/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.UserMetadata;
import org.openapitools.client.model.UserPreferences;
import org.openapitools.client.model.UserUploadQuota;
import org.openapitools.client.model.UserWebsitesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  /**
   * The user&#39;s account type:  Option descriptions:  * &#x60;basic&#x60; - The user has a Vimeo Basic subscription.  * &#x60;business&#x60; - The user has a Vimeo Business subscription.  * &#x60;live_business&#x60; - The user has a Vimeo Business Live subscription.  * &#x60;live_premium&#x60; - The user has a Vimeo Premium subscription.  * &#x60;live_pro&#x60; - The user has a Vimeo PRO Live subscription.  * &#x60;plus&#x60; - The user has a Vimeo Plus subscription.  * &#x60;pro&#x60; - The user has a Vimeo Pro subscription.  * &#x60;pro_unlimited&#x60; - The user has a Vimeo PRO Unlimited subscription.  * &#x60;producer&#x60; - The user has a Vimeo Producer subscription. 
   */
  @JsonAdapter(AccountEnum.Adapter.class)
  public enum AccountEnum {
    BASIC("basic"),
    
    BUSINESS("business"),
    
    LIVE_BUSINESS("live_business"),
    
    LIVE_PREMIUM("live_premium"),
    
    LIVE_PRO("live_pro"),
    
    PLUS("plus"),
    
    PRO("pro"),
    
    PRO_UNLIMITED("pro_unlimited"),
    
    PRODUCER("producer");

    private String value;

    AccountEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountEnum fromValue(String value) {
      for (AccountEnum b : AccountEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private AccountEnum account;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  /**
   * Gets or Sets contentFilter
   */
  @JsonAdapter(String.Adapter.class)
  public enum String {

    private String value;

    String(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static String fromValue(String value) {
      for (String b : String.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<String> {
      @Override
      public void write(final JsonWriter jsonWriter, final String enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public String read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return String.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      String.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_FILTER = "content_filter";
  @SerializedName(SERIALIZED_NAME_CONTENT_FILTER)
  private ContentFilterEnum contentFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private UserMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private UserPreferences preferences;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_UPLOAD_QUOTA = "upload_quota";
  @SerializedName(SERIALIZED_NAME_UPLOAD_QUOTA)
  private UserUploadQuota uploadQuota;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_WEBSITES = "websites";
  @SerializedName(SERIALIZED_NAME_WEBSITES)
  private List<UserWebsitesInner> websites = new ArrayList<>();

  public User() {
  }

  public User account(AccountEnum account) {
    this.account = account;
    return this;
  }

  /**
   * The user&#39;s account type:  Option descriptions:  * &#x60;basic&#x60; - The user has a Vimeo Basic subscription.  * &#x60;business&#x60; - The user has a Vimeo Business subscription.  * &#x60;live_business&#x60; - The user has a Vimeo Business Live subscription.  * &#x60;live_premium&#x60; - The user has a Vimeo Premium subscription.  * &#x60;live_pro&#x60; - The user has a Vimeo PRO Live subscription.  * &#x60;plus&#x60; - The user has a Vimeo Plus subscription.  * &#x60;pro&#x60; - The user has a Vimeo Pro subscription.  * &#x60;pro_unlimited&#x60; - The user has a Vimeo PRO Unlimited subscription.  * &#x60;producer&#x60; - The user has a Vimeo Producer subscription. 
   * @return account
   */
  @javax.annotation.Nonnull
  public AccountEnum getAccount() {
    return account;
  }

  public void setAccount(AccountEnum account) {
    this.account = account;
  }


  public User bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * The user&#39;s bio.
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public User contentFilter(ContentFilterEnum contentFilter) {
    this.contentFilter = contentFilter;
    return this;
  }

  public User addContentFilterItem(String contentFilterItem) {
    if (this.contentFilter == null) {
      this.contentFilter = new ArrayList<>();
    }
    this.contentFilter.add(contentFilterItem);
    return this;
  }

  /**
   * The user&#39;s content filters:  Option descriptions:  * &#x60;drugs&#x60; - Drugs or alcohol use.  * &#x60;language&#x60; - Profanity or sexually suggestive content.  * &#x60;nudity&#x60; - Nudity.  * &#x60;safe&#x60; - Suitable for all audiences.  * &#x60;unrated&#x60; - No rating.  * &#x60;violence&#x60; - Violent or graphic content. 
   * @return contentFilter
   */
  @javax.annotation.Nullable
  public ContentFilterEnum getContentFilter() {
    return contentFilter;
  }

  public void setContentFilter(ContentFilterEnum contentFilter) {
    this.contentFilter = contentFilter;
  }


  public User createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the user account was created.
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The user&#39;s email address. This data requires a bearer token with the &#x60;email&#x60; scope.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The absolute URL of this user&#39;s profile page.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public User location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The user&#39;s location.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public User metadata(UserMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public UserMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(UserMetadata metadata) {
    this.metadata = metadata;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The user&#39;s display name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User pictures(Picture pictures) {
    this.pictures = pictures;
    return this;
  }

  /**
   * The active portrait of this user.
   * @return pictures
   */
  @javax.annotation.Nonnull
  public Picture getPictures() {
    return pictures;
  }

  public void setPictures(Picture pictures) {
    this.pictures = pictures;
  }


  public User preferences(UserPreferences preferences) {
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nullable
  public UserPreferences getPreferences() {
    return preferences;
  }

  public void setPreferences(UserPreferences preferences) {
    this.preferences = preferences;
  }


  public User resourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
    return this;
  }

  /**
   * The user&#39;s resource key string.
   * @return resourceKey
   */
  @javax.annotation.Nonnull
  public String getResourceKey() {
    return resourceKey;
  }

  public void setResourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
  }


  public User uploadQuota(UserUploadQuota uploadQuota) {
    this.uploadQuota = uploadQuota;
    return this;
  }

  /**
   * Get uploadQuota
   * @return uploadQuota
   */
  @javax.annotation.Nonnull
  public UserUploadQuota getUploadQuota() {
    return uploadQuota;
  }

  public void setUploadQuota(UserUploadQuota uploadQuota) {
    this.uploadQuota = uploadQuota;
  }


  public User uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The user&#39;s canonical relative URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public User websites(List<UserWebsitesInner> websites) {
    this.websites = websites;
    return this;
  }

  public User addWebsitesItem(UserWebsitesInner websitesItem) {
    if (this.websites == null) {
      this.websites = new ArrayList<>();
    }
    this.websites.add(websitesItem);
    return this;
  }

  /**
   * The user&#39;s websites.
   * @return websites
   */
  @javax.annotation.Nonnull
  public List<UserWebsitesInner> getWebsites() {
    return websites;
  }

  public void setWebsites(List<UserWebsitesInner> websites) {
    this.websites = websites;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.account, user.account) &&
        Objects.equals(this.bio, user.bio) &&
        Objects.equals(this.contentFilter, user.contentFilter) &&
        Objects.equals(this.createdTime, user.createdTime) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.link, user.link) &&
        Objects.equals(this.location, user.location) &&
        Objects.equals(this.metadata, user.metadata) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.pictures, user.pictures) &&
        Objects.equals(this.preferences, user.preferences) &&
        Objects.equals(this.resourceKey, user.resourceKey) &&
        Objects.equals(this.uploadQuota, user.uploadQuota) &&
        Objects.equals(this.uri, user.uri) &&
        Objects.equals(this.websites, user.websites);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, bio, contentFilter, createdTime, email, link, location, metadata, name, pictures, preferences, resourceKey, uploadQuota, uri, websites);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    contentFilter: ").append(toIndentedString(contentFilter)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    uploadQuota: ").append(toIndentedString(uploadQuota)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    websites: ").append(toIndentedString(websites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("bio");
    openapiFields.add("content_filter");
    openapiFields.add("created_time");
    openapiFields.add("email");
    openapiFields.add("link");
    openapiFields.add("location");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("preferences");
    openapiFields.add("resource_key");
    openapiFields.add("upload_quota");
    openapiFields.add("uri");
    openapiFields.add("websites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("bio");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("upload_quota");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("websites");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      // validate the required field `account`
      AccountEnum.validateJsonElement(jsonObj.get("account"));
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_filter") != null && !jsonObj.get("content_filter").isJsonNull() && !jsonObj.get("content_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_filter` to be an array in the JSON string but got `%s`", jsonObj.get("content_filter").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // validate the required field `metadata`
      UserMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonElement(jsonObj.get("pictures"));
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        UserPreferences.validateJsonElement(jsonObj.get("preferences"));
      }
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      // validate the required field `upload_quota`
      UserUploadQuota.validateJsonElement(jsonObj.get("upload_quota"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("websites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `websites` to be an array in the JSON string but got `%s`", jsonObj.get("websites").toString()));
      }

      JsonArray jsonArraywebsites = jsonObj.getAsJsonArray("websites");
      // validate the required field `websites` (array)
      for (int i = 0; i < jsonArraywebsites.size(); i++) {
        UserWebsitesInner.validateJsonElement(jsonArraywebsites.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

