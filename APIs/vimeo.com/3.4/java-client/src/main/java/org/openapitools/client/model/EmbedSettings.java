/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EmbedSettingsButtons;
import org.openapitools.client.model.EmbedSettingsLogos;
import org.openapitools.client.model.EmbedSettingsTitle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmbedSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmbedSettings {
  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private EmbedSettingsButtons buttons;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private EmbedSettingsLogos logos;

  public static final String SERIALIZED_NAME_PLAYBAR = "playbar";
  @SerializedName(SERIALIZED_NAME_PLAYBAR)
  private Boolean playbar;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Boolean speed;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private EmbedSettingsTitle title;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Boolean volume;

  public EmbedSettings() {
  }

  public EmbedSettings buttons(EmbedSettingsButtons buttons) {
    this.buttons = buttons;
    return this;
  }

  /**
   * Get buttons
   * @return buttons
   */
  @javax.annotation.Nonnull
  public EmbedSettingsButtons getButtons() {
    return buttons;
  }

  public void setButtons(EmbedSettingsButtons buttons) {
    this.buttons = buttons;
  }


  public EmbedSettings color(String color) {
    this.color = color;
    return this;
  }

  /**
   * The primary player color, which controls the color of the progress bar, buttons, and more.
   * @return color
   */
  @javax.annotation.Nonnull
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public EmbedSettings logos(EmbedSettingsLogos logos) {
    this.logos = logos;
    return this;
  }

  /**
   * Get logos
   * @return logos
   */
  @javax.annotation.Nonnull
  public EmbedSettingsLogos getLogos() {
    return logos;
  }

  public void setLogos(EmbedSettingsLogos logos) {
    this.logos = logos;
  }


  public EmbedSettings playbar(Boolean playbar) {
    this.playbar = playbar;
    return this;
  }

  /**
   * Whether the playbar appears in the embeddable player for this video.
   * @return playbar
   */
  @javax.annotation.Nonnull
  public Boolean getPlaybar() {
    return playbar;
  }

  public void setPlaybar(Boolean playbar) {
    this.playbar = playbar;
  }


  public EmbedSettings speed(Boolean speed) {
    this.speed = speed;
    return this;
  }

  /**
   * Whether the speed controls appear in the embeddable player for this video.
   * @return speed
   */
  @javax.annotation.Nonnull
  public Boolean getSpeed() {
    return speed;
  }

  public void setSpeed(Boolean speed) {
    this.speed = speed;
  }


  public EmbedSettings title(EmbedSettingsTitle title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public EmbedSettingsTitle getTitle() {
    return title;
  }

  public void setTitle(EmbedSettingsTitle title) {
    this.title = title;
  }


  public EmbedSettings uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the embed preset.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public EmbedSettings volume(Boolean volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Whether the volume controls appear in the embeddable player for this video.
   * @return volume
   */
  @javax.annotation.Nonnull
  public Boolean getVolume() {
    return volume;
  }

  public void setVolume(Boolean volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbedSettings embedSettings = (EmbedSettings) o;
    return Objects.equals(this.buttons, embedSettings.buttons) &&
        Objects.equals(this.color, embedSettings.color) &&
        Objects.equals(this.logos, embedSettings.logos) &&
        Objects.equals(this.playbar, embedSettings.playbar) &&
        Objects.equals(this.speed, embedSettings.speed) &&
        Objects.equals(this.title, embedSettings.title) &&
        Objects.equals(this.uri, embedSettings.uri) &&
        Objects.equals(this.volume, embedSettings.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttons, color, logos, playbar, speed, title, uri, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbedSettings {\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    playbar: ").append(toIndentedString(playbar)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttons");
    openapiFields.add("color");
    openapiFields.add("logos");
    openapiFields.add("playbar");
    openapiFields.add("speed");
    openapiFields.add("title");
    openapiFields.add("uri");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("buttons");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("logos");
    openapiRequiredFields.add("playbar");
    openapiRequiredFields.add("speed");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("volume");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbedSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbedSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbedSettings is not found in the empty JSON string", EmbedSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmbedSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmbedSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbedSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `buttons`
      EmbedSettingsButtons.validateJsonElement(jsonObj.get("buttons"));
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the required field `logos`
      EmbedSettingsLogos.validateJsonElement(jsonObj.get("logos"));
      // validate the required field `title`
      EmbedSettingsTitle.validateJsonElement(jsonObj.get("title"));
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbedSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbedSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbedSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbedSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbedSettings>() {
           @Override
           public void write(JsonWriter out, EmbedSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbedSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbedSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbedSettings
   * @throws IOException if the JSON string is invalid with respect to EmbedSettings
   */
  public static EmbedSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbedSettings.class);
  }

  /**
   * Convert an instance of EmbedSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

