/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EditUserAlt1RequestVideos;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EditUserAlt1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditUserAlt1Request {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_CONTENT_FILTER = "content_filter";
  @SerializedName(SERIALIZED_NAME_CONTENT_FILTER)
  private List<String> contentFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private EditUserAlt1RequestVideos videos;

  public EditUserAlt1Request() {
  }

  public EditUserAlt1Request bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * The user&#39;s bio.
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public EditUserAlt1Request contentFilter(List<String> contentFilter) {
    this.contentFilter = contentFilter;
    return this;
  }

  public EditUserAlt1Request addContentFilterItem(String contentFilterItem) {
    if (this.contentFilter == null) {
      this.contentFilter = new ArrayList<>();
    }
    this.contentFilter.add(contentFilterItem);
    return this;
  }

  /**
   * A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.
   * @return contentFilter
   */
  @javax.annotation.Nullable
  public List<String> getContentFilter() {
    return contentFilter;
  }

  public void setContentFilter(List<String> contentFilter) {
    this.contentFilter = contentFilter;
  }


  public EditUserAlt1Request link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The user&#39;s custom Vimeo URL slug.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public EditUserAlt1Request location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The user&#39;s location.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public EditUserAlt1Request name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The user&#39;s display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EditUserAlt1Request password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The default password for all future videos that this user uploads. To use this field, the &#x60;videos.privacy.view&#x60; field must be &#x60;password&#x60;.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EditUserAlt1Request videos(EditUserAlt1RequestVideos videos) {
    this.videos = videos;
    return this;
  }

  /**
   * Get videos
   * @return videos
   */
  @javax.annotation.Nullable
  public EditUserAlt1RequestVideos getVideos() {
    return videos;
  }

  public void setVideos(EditUserAlt1RequestVideos videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditUserAlt1Request editUserAlt1Request = (EditUserAlt1Request) o;
    return Objects.equals(this.bio, editUserAlt1Request.bio) &&
        Objects.equals(this.contentFilter, editUserAlt1Request.contentFilter) &&
        Objects.equals(this.link, editUserAlt1Request.link) &&
        Objects.equals(this.location, editUserAlt1Request.location) &&
        Objects.equals(this.name, editUserAlt1Request.name) &&
        Objects.equals(this.password, editUserAlt1Request.password) &&
        Objects.equals(this.videos, editUserAlt1Request.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, contentFilter, link, location, name, password, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditUserAlt1Request {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    contentFilter: ").append(toIndentedString(contentFilter)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("content_filter");
    openapiFields.add("link");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditUserAlt1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditUserAlt1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditUserAlt1Request is not found in the empty JSON string", EditUserAlt1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditUserAlt1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditUserAlt1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_filter") != null && !jsonObj.get("content_filter").isJsonNull() && !jsonObj.get("content_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_filter` to be an array in the JSON string but got `%s`", jsonObj.get("content_filter").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `videos`
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        EditUserAlt1RequestVideos.validateJsonElement(jsonObj.get("videos"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditUserAlt1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditUserAlt1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditUserAlt1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditUserAlt1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EditUserAlt1Request>() {
           @Override
           public void write(JsonWriter out, EditUserAlt1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditUserAlt1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditUserAlt1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditUserAlt1Request
   * @throws IOException if the JSON string is invalid with respect to EditUserAlt1Request
   */
  public static EditUserAlt1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditUserAlt1Request.class);
  }

  /**
   * Convert an instance of EditUserAlt1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

