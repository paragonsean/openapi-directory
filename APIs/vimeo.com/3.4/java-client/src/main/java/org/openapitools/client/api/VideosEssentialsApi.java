/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EditVideoRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkIfUserOwnsVideo
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserOwnsVideoCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserOwnsVideoValidateBeforeCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkIfUserOwnsVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkIfUserOwnsVideo(Async)");
        }

        return checkIfUserOwnsVideoCall(userId, videoId, _callback);

    }

    /**
     * Check if a user owns a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public Video checkIfUserOwnsVideo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = checkIfUserOwnsVideoWithHttpInfo(userId, videoId);
        return localVarResp.getData();
    }

    /**
     * Check if a user owns a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> checkIfUserOwnsVideoWithHttpInfo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserOwnsVideoValidateBeforeCall(userId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a user owns a video (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserOwnsVideoAsync(BigDecimal userId, BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserOwnsVideoValidateBeforeCall(userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkIfUserOwnsVideoAlt1
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserOwnsVideoAlt1Call(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserOwnsVideoAlt1ValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkIfUserOwnsVideoAlt1(Async)");
        }

        return checkIfUserOwnsVideoAlt1Call(videoId, _callback);

    }

    /**
     * Check if a user owns a video
     * 
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public Video checkIfUserOwnsVideoAlt1(BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = checkIfUserOwnsVideoAlt1WithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Check if a user owns a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> checkIfUserOwnsVideoAlt1WithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserOwnsVideoAlt1ValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a user owns a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user owns the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserOwnsVideoAlt1Async(BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserOwnsVideoAlt1ValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideo
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video and can&#39;t delete it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideo(Async)");
        }

        return deleteVideoCall(videoId, _callback);

    }

    /**
     * Delete a video
     * 
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video and can&#39;t delete it. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideo(BigDecimal videoId) throws ApiException {
        deleteVideoWithHttpInfo(videoId);
    }

    /**
     * Delete a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video and can&#39;t delete it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video and can&#39;t delete it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoAsync(BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editVideo
     * @param videoId The ID of the video. (required)
     * @param editVideoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user doesn&#39;t own the video. * The &#x60;privacy&#x60; field is &#x60;disable&#x60; and the authenticated user can&#39;t set extra embed options. * The &#x60;privacy&#x60; field is &#x60;contacts&#x60; and the authenticated user can&#39;t follow creators. * The authenticated user has an opted-out PRO account and &#x60;privacy.view&#x60; is &#x60;users&#x60;, &#x60;password&#x60;, &#x60;nobody&#x60;, or &#x60;public&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVideoCall(BigDecimal videoId, EditVideoRequest editVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVideoRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVideoValidateBeforeCall(BigDecimal videoId, EditVideoRequest editVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editVideo(Async)");
        }

        // verify the required parameter 'editVideoRequest' is set
        if (editVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'editVideoRequest' when calling editVideo(Async)");
        }

        return editVideoCall(videoId, editVideoRequest, _callback);

    }

    /**
     * Edit a video
     * 
     * @param videoId The ID of the video. (required)
     * @param editVideoRequest  (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user doesn&#39;t own the video. * The &#x60;privacy&#x60; field is &#x60;disable&#x60; and the authenticated user can&#39;t set extra embed options. * The &#x60;privacy&#x60; field is &#x60;contacts&#x60; and the authenticated user can&#39;t follow creators. * The authenticated user has an opted-out PRO account and &#x60;privacy.view&#x60; is &#x60;users&#x60;, &#x60;password&#x60;, &#x60;nobody&#x60;, or &#x60;public&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public Video editVideo(BigDecimal videoId, EditVideoRequest editVideoRequest) throws ApiException {
        ApiResponse<Video> localVarResp = editVideoWithHttpInfo(videoId, editVideoRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a video
     * 
     * @param videoId The ID of the video. (required)
     * @param editVideoRequest  (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user doesn&#39;t own the video. * The &#x60;privacy&#x60; field is &#x60;disable&#x60; and the authenticated user can&#39;t set extra embed options. * The &#x60;privacy&#x60; field is &#x60;contacts&#x60; and the authenticated user can&#39;t follow creators. * The authenticated user has an opted-out PRO account and &#x60;privacy.view&#x60; is &#x60;users&#x60;, &#x60;password&#x60;, &#x60;nobody&#x60;, or &#x60;public&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> editVideoWithHttpInfo(BigDecimal videoId, EditVideoRequest editVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = editVideoValidateBeforeCall(videoId, editVideoRequest, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param editVideoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user doesn&#39;t own the video. * The &#x60;privacy&#x60; field is &#x60;disable&#x60; and the authenticated user can&#39;t set extra embed options. * The &#x60;privacy&#x60; field is &#x60;contacts&#x60; and the authenticated user can&#39;t follow creators. * The authenticated user has an opted-out PRO account and &#x60;privacy.view&#x60; is &#x60;users&#x60;, &#x60;password&#x60;, &#x60;nobody&#x60;, or &#x60;public&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVideoAsync(BigDecimal videoId, EditVideoRequest editVideoRequest, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVideoValidateBeforeCall(videoId, editVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppearances
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppearancesCall(BigDecimal userId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/appearances"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppearancesValidateBeforeCall(BigDecimal userId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAppearances(Async)");
        }

        return getAppearancesCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos in which a user appears
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getAppearances(BigDecimal userId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getAppearancesWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in which a user appears
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getAppearancesWithHttpInfo(BigDecimal userId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAppearancesValidateBeforeCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in which a user appears (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppearancesAsync(BigDecimal userId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppearancesValidateBeforeCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppearancesAlt1
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppearancesAlt1Call(String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/appearances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppearancesAlt1ValidateBeforeCall(String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getAppearancesAlt1Call(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos in which a user appears
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getAppearancesAlt1(String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getAppearancesAlt1WithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in which a user appears
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getAppearancesAlt1WithHttpInfo(String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAppearancesAlt1ValidateBeforeCall(direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in which a user appears (asynchronously)
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppearancesAlt1Async(String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppearancesAlt1ValidateBeforeCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideo
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideo(Async)");
        }

        return getVideoCall(videoId, _callback);

    }

    /**
     * Get a specific video
     * 
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public Video getVideo(BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = getVideoWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getVideoWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoAsync(BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideos
     * @param userId The ID of the user. (required)
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosCall(BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (filterPlayable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_playable", filterPlayable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosValidateBeforeCall(BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getVideos(Async)");
        }

        return getVideosCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos that a user has uploaded
     * 
     * @param userId The ID of the user. (required)
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getVideos(BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getVideosWithHttpInfo(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos that a user has uploaded
     * 
     * @param userId The ID of the user. (required)
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getVideosWithHttpInfo(BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideosValidateBeforeCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos that a user has uploaded (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosAsync(BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosValidateBeforeCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideosAlt1
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosAlt1Call(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (filterPlayable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_playable", filterPlayable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosAlt1ValidateBeforeCall(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getVideosAlt1Call(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos that a user has uploaded
     * 
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getVideosAlt1(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getVideosAlt1WithHttpInfo(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos that a user has uploaded
     * 
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getVideosAlt1WithHttpInfo(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideosAlt1ValidateBeforeCall(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos that a user has uploaded (asynchronously)
     * 
     * @param containingUri The page that contains the video URI. Only available when not paired with &#x60;query&#x60;. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param filterPlayable Whether to filter by all playable videos or by all videos that are not  playable. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> This user hasn&#39;t created any videos since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosAlt1Async(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosAlt1ValidateBeforeCall(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVideos
     * @param query Search query. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page. (optional)
     * @param links A comma-separated list of video URLs to find. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param uris The comma-separated list of videos to find. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2101: Either the &#x60;uris&#x60; or &#x60;links&#x60; parameter has filtering or sorting arguments. * Error code 2204: There is a problem with the batch request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> * Search is disabled. * Error code 7300: There was an internal search error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVideosCall(String query, String direction, String filter, String links, BigDecimal page, BigDecimal perPage, String sort, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (links != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("links", links));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVideosValidateBeforeCall(String query, String direction, String filter, String links, BigDecimal page, BigDecimal perPage, String sort, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVideos(Async)");
        }

        return searchVideosCall(query, direction, filter, links, page, perPage, sort, uris, _callback);

    }

    /**
     * Search for videos
     * 
     * @param query Search query. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page. (optional)
     * @param links A comma-separated list of video URLs to find. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param uris The comma-separated list of videos to find. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2101: Either the &#x60;uris&#x60; or &#x60;links&#x60; parameter has filtering or sorting arguments. * Error code 2204: There is a problem with the batch request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> * Search is disabled. * Error code 7300: There was an internal search error. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> searchVideos(String query, String direction, String filter, String links, BigDecimal page, BigDecimal perPage, String sort, String uris) throws ApiException {
        ApiResponse<List<Video>> localVarResp = searchVideosWithHttpInfo(query, direction, filter, links, page, perPage, sort, uris);
        return localVarResp.getData();
    }

    /**
     * Search for videos
     * 
     * @param query Search query. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page. (optional)
     * @param links A comma-separated list of video URLs to find. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param uris The comma-separated list of videos to find. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2101: Either the &#x60;uris&#x60; or &#x60;links&#x60; parameter has filtering or sorting arguments. * Error code 2204: There is a problem with the batch request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> * Search is disabled. * Error code 7300: There was an internal search error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> searchVideosWithHttpInfo(String query, String direction, String filter, String links, BigDecimal page, BigDecimal perPage, String sort, String uris) throws ApiException {
        okhttp3.Call localVarCall = searchVideosValidateBeforeCall(query, direction, filter, links, page, perPage, sort, uris, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for videos (asynchronously)
     * 
     * @param query Search query. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page. (optional)
     * @param links A comma-separated list of video URLs to find. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param uris The comma-separated list of videos to find. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2101: Either the &#x60;uris&#x60; or &#x60;links&#x60; parameter has filtering or sorting arguments. * Error code 2204: There is a problem with the batch request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> * Search is disabled. * Error code 7300: There was an internal search error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVideosAsync(String query, String direction, String filter, String links, BigDecimal page, BigDecimal perPage, String sort, String uris, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVideosValidateBeforeCall(query, direction, filter, links, page, perPage, sort, uris, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
