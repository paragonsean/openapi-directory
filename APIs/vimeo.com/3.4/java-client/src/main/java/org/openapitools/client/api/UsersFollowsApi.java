/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FollowUsersAlt1Request;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersFollowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersFollowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersFollowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkIfUserIsFollowing
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserIsFollowingCall(BigDecimal followUserId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserIsFollowingValidateBeforeCall(BigDecimal followUserId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling checkIfUserIsFollowing(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkIfUserIsFollowing(Async)");
        }

        return checkIfUserIsFollowingCall(followUserId, userId, _callback);

    }

    /**
     * Check if a user is following another user
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfUserIsFollowing(BigDecimal followUserId, BigDecimal userId) throws ApiException {
        checkIfUserIsFollowingWithHttpInfo(followUserId, userId);
    }

    /**
     * Check if a user is following another user
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfUserIsFollowingWithHttpInfo(BigDecimal followUserId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserIsFollowingValidateBeforeCall(followUserId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is following another user (asynchronously)
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserIsFollowingAsync(BigDecimal followUserId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserIsFollowingValidateBeforeCall(followUserId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkIfUserIsFollowingAlt1
     * @param followUserId The ID of the following user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserIsFollowingAlt1Call(BigDecimal followUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserIsFollowingAlt1ValidateBeforeCall(BigDecimal followUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling checkIfUserIsFollowingAlt1(Async)");
        }

        return checkIfUserIsFollowingAlt1Call(followUserId, _callback);

    }

    /**
     * Check if a user is following another user
     * 
     * @param followUserId The ID of the following user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfUserIsFollowingAlt1(BigDecimal followUserId) throws ApiException {
        checkIfUserIsFollowingAlt1WithHttpInfo(followUserId);
    }

    /**
     * Check if a user is following another user
     * 
     * @param followUserId The ID of the following user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfUserIsFollowingAlt1WithHttpInfo(BigDecimal followUserId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserIsFollowingAlt1ValidateBeforeCall(followUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is following another user (asynchronously)
     * 
     * @param followUserId The ID of the following user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the user in question. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user in question doesn&#39;t follow the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserIsFollowingAlt1Async(BigDecimal followUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserIsFollowingAlt1ValidateBeforeCall(followUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for followUser
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUserCall(BigDecimal followUserId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followUserValidateBeforeCall(BigDecimal followUserId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling followUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followUser(Async)");
        }

        return followUserCall(followUserId, userId, _callback);

    }

    /**
     * Follow a specific user
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public void followUser(BigDecimal followUserId, BigDecimal userId) throws ApiException {
        followUserWithHttpInfo(followUserId, userId);
    }

    /**
     * Follow a specific user
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> followUserWithHttpInfo(BigDecimal followUserId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = followUserValidateBeforeCall(followUserId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow a specific user (asynchronously)
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUserAsync(BigDecimal followUserId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followUserValidateBeforeCall(followUserId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for followUserAlt1
     * @param followUserId The ID of the following user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUserAlt1Call(BigDecimal followUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followUserAlt1ValidateBeforeCall(BigDecimal followUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling followUserAlt1(Async)");
        }

        return followUserAlt1Call(followUserId, _callback);

    }

    /**
     * Follow a specific user
     * 
     * @param followUserId The ID of the following user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public void followUserAlt1(BigDecimal followUserId) throws ApiException {
        followUserAlt1WithHttpInfo(followUserId);
    }

    /**
     * Follow a specific user
     * 
     * @param followUserId The ID of the following user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> followUserAlt1WithHttpInfo(BigDecimal followUserId) throws ApiException {
        okhttp3.Call localVarCall = followUserAlt1ValidateBeforeCall(followUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow a specific user (asynchronously)
     * 
     * @param followUserId The ID of the following user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add followers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUserAlt1Async(BigDecimal followUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followUserAlt1ValidateBeforeCall(followUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for followUsers
     * @param userId The ID of the user. (required)
     * @param followUsersAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUsersCall(BigDecimal userId, FollowUsersAlt1Request followUsersAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = followUsersAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followUsersValidateBeforeCall(BigDecimal userId, FollowUsersAlt1Request followUsersAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followUsers(Async)");
        }

        // verify the required parameter 'followUsersAlt1Request' is set
        if (followUsersAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'followUsersAlt1Request' when calling followUsers(Async)");
        }

        return followUsersCall(userId, followUsersAlt1Request, _callback);

    }

    /**
     * Follow a list of users
     * 
     * @param userId The ID of the user. (required)
     * @param followUsersAlt1Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void followUsers(BigDecimal userId, FollowUsersAlt1Request followUsersAlt1Request) throws ApiException {
        followUsersWithHttpInfo(userId, followUsersAlt1Request);
    }

    /**
     * Follow a list of users
     * 
     * @param userId The ID of the user. (required)
     * @param followUsersAlt1Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> followUsersWithHttpInfo(BigDecimal userId, FollowUsersAlt1Request followUsersAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = followUsersValidateBeforeCall(userId, followUsersAlt1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow a list of users (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param followUsersAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUsersAsync(BigDecimal userId, FollowUsersAlt1Request followUsersAlt1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followUsersValidateBeforeCall(userId, followUsersAlt1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for followUsersAlt1
     * @param followUsersAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUsersAlt1Call(FollowUsersAlt1Request followUsersAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = followUsersAlt1Request;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followUsersAlt1ValidateBeforeCall(FollowUsersAlt1Request followUsersAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUsersAlt1Request' is set
        if (followUsersAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'followUsersAlt1Request' when calling followUsersAlt1(Async)");
        }

        return followUsersAlt1Call(followUsersAlt1Request, _callback);

    }

    /**
     * Follow a list of users
     * 
     * @param followUsersAlt1Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void followUsersAlt1(FollowUsersAlt1Request followUsersAlt1Request) throws ApiException {
        followUsersAlt1WithHttpInfo(followUsersAlt1Request);
    }

    /**
     * Follow a list of users
     * 
     * @param followUsersAlt1Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> followUsersAlt1WithHttpInfo(FollowUsersAlt1Request followUsersAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = followUsersAlt1ValidateBeforeCall(followUsersAlt1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow a list of users (asynchronously)
     * 
     * @param followUsersAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The request body is empty. * Error code 2205: The &#x60;users&#x60; array is invalid. * Error code 2205: The list of users doesn&#39;t contain URIs. * Error code 2900: A user in the list doesn&#39;t exist. * Error code 2901: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user access token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3417: The current user can&#39;t follow other users. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error code 9006: The current user is rate-limited from following other users. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4005: An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followUsersAlt1Async(FollowUsersAlt1Request followUsersAlt1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followUsersAlt1ValidateBeforeCall(followUsersAlt1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFollowers
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFollowersCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/followers"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowersValidateBeforeCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFollowers(Async)");
        }

        return getFollowersCall(userId, direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the followers of a user
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getFollowers(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getFollowersWithHttpInfo(userId, direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the followers of a user
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getFollowersWithHttpInfo(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFollowersValidateBeforeCall(userId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the followers of a user (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFollowersAsync(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowersValidateBeforeCall(userId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFollowersAlt1
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFollowersAlt1Call(String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowersAlt1ValidateBeforeCall(String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getFollowersAlt1Call(direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the followers of a user
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getFollowersAlt1(String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getFollowersAlt1WithHttpInfo(direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the followers of a user
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getFollowersAlt1WithHttpInfo(String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFollowersAlt1ValidateBeforeCall(direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the followers of a user (asynchronously)
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFollowersAlt1Async(String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowersAlt1ValidateBeforeCall(direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserFollowing
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserFollowingCall(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFollowingValidateBeforeCall(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserFollowing(Async)");
        }

        return getUserFollowingCall(userId, direction, filter, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the users that a user is following
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getUserFollowing(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getUserFollowingWithHttpInfo(userId, direction, filter, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the users that a user is following
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getUserFollowingWithHttpInfo(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserFollowingValidateBeforeCall(userId, direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users that a user is following (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserFollowingAsync(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFollowingValidateBeforeCall(userId, direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserFollowingAlt1
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserFollowingAlt1Call(String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFollowingAlt1ValidateBeforeCall(String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getUserFollowingAlt1Call(direction, filter, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the users that a user is following
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getUserFollowingAlt1(String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getUserFollowingAlt1WithHttpInfo(direction, filter, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the users that a user is following
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getUserFollowingAlt1WithHttpInfo(String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserFollowingAlt1ValidateBeforeCall(direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users that a user is following (asynchronously)
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserFollowingAlt1Async(String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFollowingAlt1ValidateBeforeCall(direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unfollowUser
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfollowUserCall(BigDecimal followUserId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowUserValidateBeforeCall(BigDecimal followUserId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling unfollowUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unfollowUser(Async)");
        }

        return unfollowUserCall(followUserId, userId, _callback);

    }

    /**
     * Unfollow a user
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public void unfollowUser(BigDecimal followUserId, BigDecimal userId) throws ApiException {
        unfollowUserWithHttpInfo(followUserId, userId);
    }

    /**
     * Unfollow a user
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unfollowUserWithHttpInfo(BigDecimal followUserId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = unfollowUserValidateBeforeCall(followUserId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unfollow a user (asynchronously)
     * 
     * @param followUserId The ID of the following user. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfollowUserAsync(BigDecimal followUserId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowUserValidateBeforeCall(followUserId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unfollowUserAlt1
     * @param followUserId The ID of the following user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfollowUserAlt1Call(BigDecimal followUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowUserAlt1ValidateBeforeCall(BigDecimal followUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling unfollowUserAlt1(Async)");
        }

        return unfollowUserAlt1Call(followUserId, _callback);

    }

    /**
     * Unfollow a user
     * 
     * @param followUserId The ID of the following user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public void unfollowUserAlt1(BigDecimal followUserId) throws ApiException {
        unfollowUserAlt1WithHttpInfo(followUserId);
    }

    /**
     * Unfollow a user
     * 
     * @param followUserId The ID of the following user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unfollowUserAlt1WithHttpInfo(BigDecimal followUserId) throws ApiException {
        okhttp3.Call localVarCall = unfollowUserAlt1ValidateBeforeCall(followUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unfollow a user (asynchronously)
     * 
     * @param followUserId The ID of the following user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfollowUserAlt1Async(BigDecimal followUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowUserAlt1ValidateBeforeCall(followUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
