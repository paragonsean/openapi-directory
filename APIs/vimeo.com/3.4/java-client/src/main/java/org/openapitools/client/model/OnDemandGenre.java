/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OnDemandGenreInteractions;
import org.openapitools.client.model.OnDemandGenreMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnDemandGenre
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnDemandGenre {
  public static final String SERIALIZED_NAME_CANONICAL = "canonical";
  @SerializedName(SERIALIZED_NAME_CANONICAL)
  private String canonical;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private OnDemandGenreInteractions interactions;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private OnDemandGenreMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public OnDemandGenre() {
  }

  public OnDemandGenre canonical(String canonical) {
    this.canonical = canonical;
    return this;
  }

  /**
   * The canonical name or URL slug of the genre.
   * @return canonical
   */
  @javax.annotation.Nonnull
  public String getCanonical() {
    return canonical;
  }

  public void setCanonical(String canonical) {
    this.canonical = canonical;
  }


  public OnDemandGenre interactions(OnDemandGenreInteractions interactions) {
    this.interactions = interactions;
    return this;
  }

  /**
   * Get interactions
   * @return interactions
   */
  @javax.annotation.Nonnull
  public OnDemandGenreInteractions getInteractions() {
    return interactions;
  }

  public void setInteractions(OnDemandGenreInteractions interactions) {
    this.interactions = interactions;
  }


  public OnDemandGenre link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The Vimeo URL for this genre.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public OnDemandGenre metadata(OnDemandGenreMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public OnDemandGenreMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(OnDemandGenreMetadata metadata) {
    this.metadata = metadata;
  }


  public OnDemandGenre name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The descriptive name of the genre.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OnDemandGenre uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The relative URI of the On Demand genre.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnDemandGenre onDemandGenre = (OnDemandGenre) o;
    return Objects.equals(this.canonical, onDemandGenre.canonical) &&
        Objects.equals(this.interactions, onDemandGenre.interactions) &&
        Objects.equals(this.link, onDemandGenre.link) &&
        Objects.equals(this.metadata, onDemandGenre.metadata) &&
        Objects.equals(this.name, onDemandGenre.name) &&
        Objects.equals(this.uri, onDemandGenre.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonical, interactions, link, metadata, name, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnDemandGenre {\n");
    sb.append("    canonical: ").append(toIndentedString(canonical)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canonical");
    openapiFields.add("interactions");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canonical");
    openapiRequiredFields.add("interactions");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnDemandGenre
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnDemandGenre.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnDemandGenre is not found in the empty JSON string", OnDemandGenre.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnDemandGenre.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnDemandGenre` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnDemandGenre.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("canonical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical").toString()));
      }
      // validate the required field `interactions`
      OnDemandGenreInteractions.validateJsonElement(jsonObj.get("interactions"));
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      OnDemandGenreMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnDemandGenre.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnDemandGenre' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnDemandGenre> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnDemandGenre.class));

       return (TypeAdapter<T>) new TypeAdapter<OnDemandGenre>() {
           @Override
           public void write(JsonWriter out, OnDemandGenre value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnDemandGenre read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnDemandGenre given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnDemandGenre
   * @throws IOException if the JSON string is invalid with respect to OnDemandGenre
   */
  public static OnDemandGenre fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnDemandGenre.class);
  }

  /**
   * Convert an instance of OnDemandGenre to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

