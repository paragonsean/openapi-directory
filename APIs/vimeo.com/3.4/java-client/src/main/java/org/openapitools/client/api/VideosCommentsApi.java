/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CreateCommentAlt1Request;
import org.openapitools.client.model.CreateCommentReplyRequest;
import org.openapitools.client.model.EditCommentRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosCommentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosCommentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosCommentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createComment
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentCall(BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommentAlt1Request;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentValidateBeforeCall(BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createComment(Async)");
        }

        // verify the required parameter 'createCommentAlt1Request' is set
        if (createCommentAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createCommentAlt1Request' when calling createComment(Async)");
        }

        return createCommentCall(videoId, createCommentAlt1Request, _callback);

    }

    /**
     * Add a comment to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public Comment createComment(BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request) throws ApiException {
        ApiResponse<Comment> localVarResp = createCommentWithHttpInfo(videoId, createCommentAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Add a comment to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> createCommentWithHttpInfo(BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createCommentValidateBeforeCall(videoId, createCommentAlt1Request, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a comment to a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentAsync(BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentValidateBeforeCall(videoId, createCommentAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCommentAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentAlt1Call(BigDecimal channelId, BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommentAlt1Request;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/comments"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling createCommentAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createCommentAlt1(Async)");
        }

        // verify the required parameter 'createCommentAlt1Request' is set
        if (createCommentAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createCommentAlt1Request' when calling createCommentAlt1(Async)");
        }

        return createCommentAlt1Call(channelId, videoId, createCommentAlt1Request, _callback);

    }

    /**
     * Add a comment to a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public Comment createCommentAlt1(BigDecimal channelId, BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request) throws ApiException {
        ApiResponse<Comment> localVarResp = createCommentAlt1WithHttpInfo(channelId, videoId, createCommentAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Add a comment to a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> createCommentAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createCommentAlt1ValidateBeforeCall(channelId, videoId, createCommentAlt1Request, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a comment to a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled for this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentAlt1Async(BigDecimal channelId, BigDecimal videoId, CreateCommentAlt1Request createCommentAlt1Request, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentAlt1ValidateBeforeCall(channelId, videoId, createCommentAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCommentReply
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentReplyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled on this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentReplyCall(BigDecimal commentId, BigDecimal videoId, CreateCommentReplyRequest createCommentReplyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommentReplyRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}/replies"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentReplyValidateBeforeCall(BigDecimal commentId, BigDecimal videoId, CreateCommentReplyRequest createCommentReplyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling createCommentReply(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createCommentReply(Async)");
        }

        // verify the required parameter 'createCommentReplyRequest' is set
        if (createCommentReplyRequest == null) {
            throw new ApiException("Missing the required parameter 'createCommentReplyRequest' when calling createCommentReply(Async)");
        }

        return createCommentReplyCall(commentId, videoId, createCommentReplyRequest, _callback);

    }

    /**
     * Add a reply to a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentReplyRequest  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled on this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public Comment createCommentReply(BigDecimal commentId, BigDecimal videoId, CreateCommentReplyRequest createCommentReplyRequest) throws ApiException {
        ApiResponse<Comment> localVarResp = createCommentReplyWithHttpInfo(commentId, videoId, createCommentReplyRequest);
        return localVarResp.getData();
    }

    /**
     * Add a reply to a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentReplyRequest  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled on this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> createCommentReplyWithHttpInfo(BigDecimal commentId, BigDecimal videoId, CreateCommentReplyRequest createCommentReplyRequest) throws ApiException {
        okhttp3.Call localVarCall = createCommentReplyValidateBeforeCall(commentId, videoId, createCommentReplyRequest, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a reply to a video comment (asynchronously)
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param createCommentReplyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3413: Comments are disabled on this video. * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t comment. * Error code 3301: The comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentReplyAsync(BigDecimal commentId, BigDecimal videoId, CreateCommentReplyRequest createCommentReplyRequest, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentReplyValidateBeforeCall(commentId, videoId, createCommentReplyRequest, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteComment
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3415: The authenticated user didn&#39;t write this comment and can&#39;t delete it. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or comment exists. * Error code 5000: The deleted comment still exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentCall(BigDecimal commentId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(BigDecimal commentId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteComment(Async)");
        }

        return deleteCommentCall(commentId, videoId, _callback);

    }

    /**
     * Delete a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3415: The authenticated user didn&#39;t write this comment and can&#39;t delete it. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or comment exists. * Error code 5000: The deleted comment still exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteComment(BigDecimal commentId, BigDecimal videoId) throws ApiException {
        deleteCommentWithHttpInfo(commentId, videoId);
    }

    /**
     * Delete a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3415: The authenticated user didn&#39;t write this comment and can&#39;t delete it. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or comment exists. * Error code 5000: The deleted comment still exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCommentWithHttpInfo(BigDecimal commentId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(commentId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a video comment (asynchronously)
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3415: The authenticated user didn&#39;t write this comment and can&#39;t delete it. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or comment exists. * Error code 5000: The deleted comment still exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentAsync(BigDecimal commentId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(commentId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editComment
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param editCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t post comments. * Error code 3414: The authenticated user didn&#39;t write the comment and can&#39;t edit it. * Error code 3301: The supplied comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCommentCall(BigDecimal commentId, BigDecimal videoId, EditCommentRequest editCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editCommentRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCommentValidateBeforeCall(BigDecimal commentId, BigDecimal videoId, EditCommentRequest editCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling editComment(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editComment(Async)");
        }

        // verify the required parameter 'editCommentRequest' is set
        if (editCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'editCommentRequest' when calling editComment(Async)");
        }

        return editCommentCall(commentId, videoId, editCommentRequest, _callback);

    }

    /**
     * Edit a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param editCommentRequest  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t post comments. * Error code 3414: The authenticated user didn&#39;t write the comment and can&#39;t edit it. * Error code 3301: The supplied comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public Comment editComment(BigDecimal commentId, BigDecimal videoId, EditCommentRequest editCommentRequest) throws ApiException {
        ApiResponse<Comment> localVarResp = editCommentWithHttpInfo(commentId, videoId, editCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param editCommentRequest  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t post comments. * Error code 3414: The authenticated user didn&#39;t write the comment and can&#39;t edit it. * Error code 3301: The supplied comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> editCommentWithHttpInfo(BigDecimal commentId, BigDecimal videoId, EditCommentRequest editCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = editCommentValidateBeforeCall(commentId, videoId, editCommentRequest, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a video comment (asynchronously)
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param editCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2207: The comment text is missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3411: The authenticated user is unverified. * Error code 3412: The authenticated user can&#39;t post comments. * Error code 3414: The authenticated user didn&#39;t write the comment and can&#39;t edit it. * Error code 3301: The supplied comment was flagged as spam. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCommentAsync(BigDecimal commentId, BigDecimal videoId, EditCommentRequest editCommentRequest, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCommentValidateBeforeCall(commentId, videoId, editCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComment
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentCall(BigDecimal commentId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentValidateBeforeCall(BigDecimal commentId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getComment(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getComment(Async)");
        }

        return getCommentCall(commentId, videoId, _callback);

    }

    /**
     * Get a specific video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public Comment getComment(BigDecimal commentId, BigDecimal videoId) throws ApiException {
        ApiResponse<Comment> localVarResp = getCommentWithHttpInfo(commentId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> getCommentWithHttpInfo(BigDecimal commentId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getCommentValidateBeforeCall(commentId, videoId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific video comment (asynchronously)
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentAsync(BigDecimal commentId, BigDecimal videoId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentValidateBeforeCall(commentId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommentReplies
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentRepliesCall(BigDecimal commentId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}/replies"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentRepliesValidateBeforeCall(BigDecimal commentId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getCommentReplies(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getCommentReplies(Async)");
        }

        return getCommentRepliesCall(commentId, videoId, page, perPage, _callback);

    }

    /**
     * Get all the replies to a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> getCommentReplies(BigDecimal commentId, BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = getCommentRepliesWithHttpInfo(commentId, videoId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the replies to a video comment
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> getCommentRepliesWithHttpInfo(BigDecimal commentId, BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getCommentRepliesValidateBeforeCall(commentId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the replies to a video comment (asynchronously)
     * 
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or comment exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentRepliesAsync(BigDecimal commentId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentRepliesValidateBeforeCall(commentId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComments
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsCall(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsValidateBeforeCall(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getComments(Async)");
        }

        return getCommentsCall(videoId, direction, page, perPage, _callback);

    }

    /**
     * Get all the comments on a video
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> getComments(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = getCommentsWithHttpInfo(videoId, direction, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the comments on a video
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> getCommentsWithHttpInfo(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(videoId, direction, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the comments on a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsAsync(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(videoId, direction, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommentsAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsAlt1Call(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/comments"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getCommentsAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getCommentsAlt1(Async)");
        }

        return getCommentsAlt1Call(channelId, videoId, direction, page, perPage, _callback);

    }

    /**
     * Get all the comments on a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> getCommentsAlt1(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = getCommentsAlt1WithHttpInfo(channelId, videoId, direction, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the comments on a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> getCommentsAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getCommentsAlt1ValidateBeforeCall(channelId, videoId, direction, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the comments on a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsAlt1Async(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsAlt1ValidateBeforeCall(channelId, videoId, direction, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
