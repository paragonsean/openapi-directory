/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddChannelModeratorsRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.RemoveChannelModeratorsRequest;
import org.openapitools.client.model.ReplaceChannelModeratorsRequest;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsModeratorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsModeratorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsModeratorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addChannelModerator
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelModeratorCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChannelModeratorValidateBeforeCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addChannelModerator(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addChannelModerator(Async)");
        }

        return addChannelModeratorCall(channelId, userId, _callback);

    }

    /**
     * Add a specific channel moderator
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addChannelModerator(BigDecimal channelId, BigDecimal userId) throws ApiException {
        addChannelModeratorWithHttpInfo(channelId, userId);
    }

    /**
     * Add a specific channel moderator
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addChannelModeratorWithHttpInfo(BigDecimal channelId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = addChannelModeratorValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a specific channel moderator (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelModeratorAsync(BigDecimal channelId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChannelModeratorValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addChannelModerators
     * @param channelId The ID of the channel. (required)
     * @param addChannelModeratorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelModeratorsCall(BigDecimal channelId, AddChannelModeratorsRequest addChannelModeratorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addChannelModeratorsRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChannelModeratorsValidateBeforeCall(BigDecimal channelId, AddChannelModeratorsRequest addChannelModeratorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addChannelModerators(Async)");
        }

        // verify the required parameter 'addChannelModeratorsRequest' is set
        if (addChannelModeratorsRequest == null) {
            throw new ApiException("Missing the required parameter 'addChannelModeratorsRequest' when calling addChannelModerators(Async)");
        }

        return addChannelModeratorsCall(channelId, addChannelModeratorsRequest, _callback);

    }

    /**
     * Add a list of channel moderators
     * 
     * @param channelId The ID of the channel. (required)
     * @param addChannelModeratorsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addChannelModerators(BigDecimal channelId, AddChannelModeratorsRequest addChannelModeratorsRequest) throws ApiException {
        addChannelModeratorsWithHttpInfo(channelId, addChannelModeratorsRequest);
    }

    /**
     * Add a list of channel moderators
     * 
     * @param channelId The ID of the channel. (required)
     * @param addChannelModeratorsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addChannelModeratorsWithHttpInfo(BigDecimal channelId, AddChannelModeratorsRequest addChannelModeratorsRequest) throws ApiException {
        okhttp3.Call localVarCall = addChannelModeratorsValidateBeforeCall(channelId, addChannelModeratorsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a list of channel moderators (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param addChannelModeratorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn&#39;t follow. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelModeratorsAsync(BigDecimal channelId, AddChannelModeratorsRequest addChannelModeratorsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChannelModeratorsValidateBeforeCall(channelId, addChannelModeratorsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelModerator
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelModeratorCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelModeratorValidateBeforeCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelModerator(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getChannelModerator(Async)");
        }

        return getChannelModeratorCall(channelId, userId, _callback);

    }

    /**
     * Get a specific channel moderator
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
     </table>
     */
    public User getChannelModerator(BigDecimal channelId, BigDecimal userId) throws ApiException {
        ApiResponse<User> localVarResp = getChannelModeratorWithHttpInfo(channelId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific channel moderator
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getChannelModeratorWithHttpInfo(BigDecimal channelId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getChannelModeratorValidateBeforeCall(channelId, userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific channel moderator (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelModeratorAsync(BigDecimal channelId, BigDecimal userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelModeratorValidateBeforeCall(channelId, userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelModerators
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelModeratorsCall(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelModeratorsValidateBeforeCall(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelModerators(Async)");
        }

        return getChannelModeratorsCall(channelId, direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the moderators in a channel
     * 
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getChannelModerators(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getChannelModeratorsWithHttpInfo(channelId, direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the moderators in a channel
     * 
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getChannelModeratorsWithHttpInfo(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getChannelModeratorsValidateBeforeCall(channelId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the moderators in a channel (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelModeratorsAsync(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelModeratorsValidateBeforeCall(channelId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeChannelModerator
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeChannelModeratorCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChannelModeratorValidateBeforeCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeChannelModerator(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeChannelModerator(Async)");
        }

        return removeChannelModeratorCall(channelId, userId, _callback);

    }

    /**
     * Remove a specific channel moderator
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public void removeChannelModerator(BigDecimal channelId, BigDecimal userId) throws ApiException {
        removeChannelModeratorWithHttpInfo(channelId, userId);
    }

    /**
     * Remove a specific channel moderator
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeChannelModeratorWithHttpInfo(BigDecimal channelId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = removeChannelModeratorValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a specific channel moderator (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeChannelModeratorAsync(BigDecimal channelId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChannelModeratorValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeChannelModerators
     * @param channelId The ID of the channel. (required)
     * @param removeChannelModeratorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeChannelModeratorsCall(BigDecimal channelId, RemoveChannelModeratorsRequest removeChannelModeratorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeChannelModeratorsRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChannelModeratorsValidateBeforeCall(BigDecimal channelId, RemoveChannelModeratorsRequest removeChannelModeratorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeChannelModerators(Async)");
        }

        // verify the required parameter 'removeChannelModeratorsRequest' is set
        if (removeChannelModeratorsRequest == null) {
            throw new ApiException("Missing the required parameter 'removeChannelModeratorsRequest' when calling removeChannelModerators(Async)");
        }

        return removeChannelModeratorsCall(channelId, removeChannelModeratorsRequest, _callback);

    }

    /**
     * Remove a list of channel moderators
     * 
     * @param channelId The ID of the channel. (required)
     * @param removeChannelModeratorsRequest  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public User removeChannelModerators(BigDecimal channelId, RemoveChannelModeratorsRequest removeChannelModeratorsRequest) throws ApiException {
        ApiResponse<User> localVarResp = removeChannelModeratorsWithHttpInfo(channelId, removeChannelModeratorsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a list of channel moderators
     * 
     * @param channelId The ID of the channel. (required)
     * @param removeChannelModeratorsRequest  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> removeChannelModeratorsWithHttpInfo(BigDecimal channelId, RemoveChannelModeratorsRequest removeChannelModeratorsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeChannelModeratorsValidateBeforeCall(channelId, removeChannelModeratorsRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a list of channel moderators (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param removeChannelModeratorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the channel, the user isn&#39;t a moderator of the channel, or you tried to remove the owner of the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists, or no such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeChannelModeratorsAsync(BigDecimal channelId, RemoveChannelModeratorsRequest removeChannelModeratorsRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChannelModeratorsValidateBeforeCall(channelId, removeChannelModeratorsRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceChannelModerators
     * @param channelId The ID of the channel. (required)
     * @param replaceChannelModeratorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceChannelModeratorsCall(BigDecimal channelId, ReplaceChannelModeratorsRequest replaceChannelModeratorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceChannelModeratorsRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceChannelModeratorsValidateBeforeCall(BigDecimal channelId, ReplaceChannelModeratorsRequest replaceChannelModeratorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling replaceChannelModerators(Async)");
        }

        // verify the required parameter 'replaceChannelModeratorsRequest' is set
        if (replaceChannelModeratorsRequest == null) {
            throw new ApiException("Missing the required parameter 'replaceChannelModeratorsRequest' when calling replaceChannelModerators(Async)");
        }

        return replaceChannelModeratorsCall(channelId, replaceChannelModeratorsRequest, _callback);

    }

    /**
     * Replace the moderators of a channel
     * 
     * @param channelId The ID of the channel. (required)
     * @param replaceChannelModeratorsRequest  (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> replaceChannelModerators(BigDecimal channelId, ReplaceChannelModeratorsRequest replaceChannelModeratorsRequest) throws ApiException {
        ApiResponse<List<User>> localVarResp = replaceChannelModeratorsWithHttpInfo(channelId, replaceChannelModeratorsRequest);
        return localVarResp.getData();
    }

    /**
     * Replace the moderators of a channel
     * 
     * @param channelId The ID of the channel. (required)
     * @param replaceChannelModeratorsRequest  (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> replaceChannelModeratorsWithHttpInfo(BigDecimal channelId, ReplaceChannelModeratorsRequest replaceChannelModeratorsRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceChannelModeratorsValidateBeforeCall(channelId, replaceChannelModeratorsRequest, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace the moderators of a channel (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param replaceChannelModeratorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2908: The list contains more than 100 users. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceChannelModeratorsAsync(BigDecimal channelId, ReplaceChannelModeratorsRequest replaceChannelModeratorsRequest, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceChannelModeratorsValidateBeforeCall(channelId, replaceChannelModeratorsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
