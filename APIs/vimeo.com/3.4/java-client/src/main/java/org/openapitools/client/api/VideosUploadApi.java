/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.UploadAttempt;
import org.openapitools.client.model.UploadVideoAlt1Request;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosUploadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosUploadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosUploadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for completeStreamingUpload
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @param signature The crypto signature of the completed upload. (required)
     * @param videoFileId The ID of the uploaded file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The streaming upload is complete. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2502: The format of the video file is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * Error code 5006: The video file doesn&#39;t exist. * Error code 5007: The signature doesn&#39;t exist. * Error code 8400: The signature is invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4011: The upload server returns an HTTP status code other than 200. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeStreamingUploadCall(BigDecimal upload, BigDecimal userId, String signature, BigDecimal videoFileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/uploads/{upload}"
            .replace("{" + "upload" + "}", localVarApiClient.escapeString(upload.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        if (videoFileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("video_file_id", videoFileId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeStreamingUploadValidateBeforeCall(BigDecimal upload, BigDecimal userId, String signature, BigDecimal videoFileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling completeStreamingUpload(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling completeStreamingUpload(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling completeStreamingUpload(Async)");
        }

        // verify the required parameter 'videoFileId' is set
        if (videoFileId == null) {
            throw new ApiException("Missing the required parameter 'videoFileId' when calling completeStreamingUpload(Async)");
        }

        return completeStreamingUploadCall(upload, userId, signature, videoFileId, _callback);

    }

    /**
     * Complete a user&#39;s streaming upload
     * 
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @param signature The crypto signature of the completed upload. (required)
     * @param videoFileId The ID of the uploaded file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The streaming upload is complete. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2502: The format of the video file is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * Error code 5006: The video file doesn&#39;t exist. * Error code 5007: The signature doesn&#39;t exist. * Error code 8400: The signature is invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4011: The upload server returns an HTTP status code other than 200. </td><td>  -  </td></tr>
     </table>
     */
    public void completeStreamingUpload(BigDecimal upload, BigDecimal userId, String signature, BigDecimal videoFileId) throws ApiException {
        completeStreamingUploadWithHttpInfo(upload, userId, signature, videoFileId);
    }

    /**
     * Complete a user&#39;s streaming upload
     * 
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @param signature The crypto signature of the completed upload. (required)
     * @param videoFileId The ID of the uploaded file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The streaming upload is complete. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2502: The format of the video file is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * Error code 5006: The video file doesn&#39;t exist. * Error code 5007: The signature doesn&#39;t exist. * Error code 8400: The signature is invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4011: The upload server returns an HTTP status code other than 200. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> completeStreamingUploadWithHttpInfo(BigDecimal upload, BigDecimal userId, String signature, BigDecimal videoFileId) throws ApiException {
        okhttp3.Call localVarCall = completeStreamingUploadValidateBeforeCall(upload, userId, signature, videoFileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete a user&#39;s streaming upload (asynchronously)
     * 
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @param signature The crypto signature of the completed upload. (required)
     * @param videoFileId The ID of the uploaded file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The streaming upload is complete. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2502: The format of the video file is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * Error code 5006: The video file doesn&#39;t exist. * Error code 5007: The signature doesn&#39;t exist. * Error code 8400: The signature is invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4011: The upload server returns an HTTP status code other than 200. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeStreamingUploadAsync(BigDecimal upload, BigDecimal userId, String signature, BigDecimal videoFileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeStreamingUploadValidateBeforeCall(upload, userId, signature, videoFileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUploadAttempt
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUploadAttemptCall(BigDecimal upload, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/uploads/{upload}"
            .replace("{" + "upload" + "}", localVarApiClient.escapeString(upload.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.uploadattempt+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUploadAttemptValidateBeforeCall(BigDecimal upload, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling getUploadAttempt(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUploadAttempt(Async)");
        }

        return getUploadAttemptCall(upload, userId, _callback);

    }

    /**
     * Get a user&#39;s upload attempt
     * 
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @return UploadAttempt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
     </table>
     */
    public UploadAttempt getUploadAttempt(BigDecimal upload, BigDecimal userId) throws ApiException {
        ApiResponse<UploadAttempt> localVarResp = getUploadAttemptWithHttpInfo(upload, userId);
        return localVarResp.getData();
    }

    /**
     * Get a user&#39;s upload attempt
     * 
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;UploadAttempt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadAttempt> getUploadAttemptWithHttpInfo(BigDecimal upload, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getUploadAttemptValidateBeforeCall(upload, userId, null);
        Type localVarReturnType = new TypeToken<UploadAttempt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user&#39;s upload attempt (asynchronously)
     * 
     * @param upload The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUploadAttemptAsync(BigDecimal upload, BigDecimal userId, final ApiCallback<UploadAttempt> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUploadAttemptValidateBeforeCall(upload, userId, _callback);
        Type localVarReturnType = new TypeToken<UploadAttempt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadVideo
     * @param userId The ID of the user. (required)
     * @param uploadVideoAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadVideoCall(BigDecimal userId, UploadVideoAlt1Request uploadVideoAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadVideoAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadVideoValidateBeforeCall(BigDecimal userId, UploadVideoAlt1Request uploadVideoAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling uploadVideo(Async)");
        }

        // verify the required parameter 'uploadVideoAlt1Request' is set
        if (uploadVideoAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'uploadVideoAlt1Request' when calling uploadVideo(Async)");
        }

        return uploadVideoCall(userId, uploadVideoAlt1Request, _callback);

    }

    /**
     * Upload a video
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param userId The ID of the user. (required)
     * @param uploadVideoAlt1Request  (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public Video uploadVideo(BigDecimal userId, UploadVideoAlt1Request uploadVideoAlt1Request) throws ApiException {
        ApiResponse<Video> localVarResp = uploadVideoWithHttpInfo(userId, uploadVideoAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Upload a video
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param userId The ID of the user. (required)
     * @param uploadVideoAlt1Request  (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> uploadVideoWithHttpInfo(BigDecimal userId, UploadVideoAlt1Request uploadVideoAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = uploadVideoValidateBeforeCall(userId, uploadVideoAlt1Request, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a video (asynchronously)
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param userId The ID of the user. (required)
     * @param uploadVideoAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadVideoAsync(BigDecimal userId, UploadVideoAlt1Request uploadVideoAlt1Request, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadVideoValidateBeforeCall(userId, uploadVideoAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadVideoAlt1
     * @param uploadVideoAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadVideoAlt1Call(UploadVideoAlt1Request uploadVideoAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadVideoAlt1Request;

        // create path and map variables
        String localVarPath = "/me/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadVideoAlt1ValidateBeforeCall(UploadVideoAlt1Request uploadVideoAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadVideoAlt1Request' is set
        if (uploadVideoAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'uploadVideoAlt1Request' when calling uploadVideoAlt1(Async)");
        }

        return uploadVideoAlt1Call(uploadVideoAlt1Request, _callback);

    }

    /**
     * Upload a video
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param uploadVideoAlt1Request  (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public Video uploadVideoAlt1(UploadVideoAlt1Request uploadVideoAlt1Request) throws ApiException {
        ApiResponse<Video> localVarResp = uploadVideoAlt1WithHttpInfo(uploadVideoAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Upload a video
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param uploadVideoAlt1Request  (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> uploadVideoAlt1WithHttpInfo(UploadVideoAlt1Request uploadVideoAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = uploadVideoAlt1ValidateBeforeCall(uploadVideoAlt1Request, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a video (asynchronously)
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param uploadVideoAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The body of the request isn&#39;t formatted properly. * Error code 2204: The request contains invalid parameters. * Error code 2204: The request contains invalid body parameters. * Error code 2230: The upload type is invalid. * Error code 3116: If a &#x60;type&#x60; payload parameter was supplied instead of &#x60;upload.approach&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8002: No user is associated with the authentication token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 4102: The user&#39;s allotted quota has been reached. * Error code 4101: The user&#39;s maximum disk space has been reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4003: There is a problem initiating the upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadVideoAlt1Async(UploadVideoAlt1Request uploadVideoAlt1Request, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadVideoAlt1ValidateBeforeCall(uploadVideoAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
