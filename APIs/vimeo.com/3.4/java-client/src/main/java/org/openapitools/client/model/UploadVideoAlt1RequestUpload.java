/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadVideoAlt1RequestUpload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadVideoAlt1RequestUpload {
  /**
   * The upload approach.
   */
  @JsonAdapter(ApproachEnum.Adapter.class)
  public enum ApproachEnum {
    POST("post"),
    
    PULL("pull"),
    
    STREAMING("streaming"),
    
    TUS("tus");

    private String value;

    ApproachEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApproachEnum fromValue(String value) {
      for (ApproachEnum b : ApproachEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApproachEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApproachEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApproachEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApproachEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApproachEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROACH = "approach";
  @SerializedName(SERIALIZED_NAME_APPROACH)
  private ApproachEnum approach;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public UploadVideoAlt1RequestUpload() {
  }

  public UploadVideoAlt1RequestUpload approach(ApproachEnum approach) {
    this.approach = approach;
    return this;
  }

  /**
   * The upload approach.
   * @return approach
   */
  @javax.annotation.Nonnull
  public ApproachEnum getApproach() {
    return approach;
  }

  public void setApproach(ApproachEnum approach) {
    this.approach = approach;
  }


  public UploadVideoAlt1RequestUpload link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when &#x60;approach&#x60; is &#x60;pull&#x60;.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public UploadVideoAlt1RequestUpload redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The app&#39;s redirect URL. Use this parameter when &#x60;approach&#x60; is &#x60;post&#x60;.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public UploadVideoAlt1RequestUpload size(String size) {
    this.size = size;
    return this;
  }

  /**
   * The size in bytes of the video to upload.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadVideoAlt1RequestUpload uploadVideoAlt1RequestUpload = (UploadVideoAlt1RequestUpload) o;
    return Objects.equals(this.approach, uploadVideoAlt1RequestUpload.approach) &&
        Objects.equals(this.link, uploadVideoAlt1RequestUpload.link) &&
        Objects.equals(this.redirectUrl, uploadVideoAlt1RequestUpload.redirectUrl) &&
        Objects.equals(this.size, uploadVideoAlt1RequestUpload.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approach, link, redirectUrl, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadVideoAlt1RequestUpload {\n");
    sb.append("    approach: ").append(toIndentedString(approach)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approach");
    openapiFields.add("link");
    openapiFields.add("redirect_url");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("approach");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadVideoAlt1RequestUpload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadVideoAlt1RequestUpload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadVideoAlt1RequestUpload is not found in the empty JSON string", UploadVideoAlt1RequestUpload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadVideoAlt1RequestUpload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadVideoAlt1RequestUpload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadVideoAlt1RequestUpload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("approach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approach").toString()));
      }
      // validate the required field `approach`
      ApproachEnum.validateJsonElement(jsonObj.get("approach"));
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadVideoAlt1RequestUpload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadVideoAlt1RequestUpload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadVideoAlt1RequestUpload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadVideoAlt1RequestUpload.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadVideoAlt1RequestUpload>() {
           @Override
           public void write(JsonWriter out, UploadVideoAlt1RequestUpload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadVideoAlt1RequestUpload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadVideoAlt1RequestUpload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadVideoAlt1RequestUpload
   * @throws IOException if the JSON string is invalid with respect to UploadVideoAlt1RequestUpload
   */
  public static UploadVideoAlt1RequestUpload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadVideoAlt1RequestUpload.class);
  }

  /**
   * Convert an instance of UploadVideoAlt1RequestUpload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

