/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FollowUsersAlt1Request;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersFollowsApi
 */
@Disabled
public class UsersFollowsApiTest {

    private final UsersFollowsApi api = new UsersFollowsApi();

    /**
     * Check if a user is following another user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserIsFollowingTest() throws ApiException {
        BigDecimal followUserId = null;
        BigDecimal userId = null;
        api.checkIfUserIsFollowing(followUserId, userId);
        // TODO: test validations
    }

    /**
     * Check if a user is following another user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserIsFollowingAlt1Test() throws ApiException {
        BigDecimal followUserId = null;
        api.checkIfUserIsFollowingAlt1(followUserId);
        // TODO: test validations
    }

    /**
     * Follow a specific user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followUserTest() throws ApiException {
        BigDecimal followUserId = null;
        BigDecimal userId = null;
        api.followUser(followUserId, userId);
        // TODO: test validations
    }

    /**
     * Follow a specific user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followUserAlt1Test() throws ApiException {
        BigDecimal followUserId = null;
        api.followUserAlt1(followUserId);
        // TODO: test validations
    }

    /**
     * Follow a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followUsersTest() throws ApiException {
        BigDecimal userId = null;
        FollowUsersAlt1Request followUsersAlt1Request = null;
        api.followUsers(userId, followUsersAlt1Request);
        // TODO: test validations
    }

    /**
     * Follow a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followUsersAlt1Test() throws ApiException {
        FollowUsersAlt1Request followUsersAlt1Request = null;
        api.followUsersAlt1(followUsersAlt1Request);
        // TODO: test validations
    }

    /**
     * Get all the followers of a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowersTest() throws ApiException {
        BigDecimal userId = null;
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.getFollowers(userId, direction, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the followers of a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowersAlt1Test() throws ApiException {
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.getFollowersAlt1(direction, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the users that a user is following
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFollowingTest() throws ApiException {
        BigDecimal userId = null;
        String direction = null;
        String filter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.getUserFollowing(userId, direction, filter, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the users that a user is following
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFollowingAlt1Test() throws ApiException {
        String direction = null;
        String filter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.getUserFollowingAlt1(direction, filter, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Unfollow a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowUserTest() throws ApiException {
        BigDecimal followUserId = null;
        BigDecimal userId = null;
        api.unfollowUser(followUserId, userId);
        // TODO: test validations
    }

    /**
     * Unfollow a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowUserAlt1Test() throws ApiException {
        BigDecimal followUserId = null;
        api.unfollowUserAlt1(followUserId);
        // TODO: test validations
    }

}
