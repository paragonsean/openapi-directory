/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.OnDemandGenre;
import org.openapitools.client.model.OnDemandPage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OnDemandGenresApi
 */
@Disabled
public class OnDemandGenresApiTest {

    private final OnDemandGenresApi api = new OnDemandGenresApi();

    /**
     * Add a genre to an On Demand page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVodGenreTest() throws ApiException {
        String genreId = null;
        BigDecimal ondemandId = null;
        OnDemandGenre response = api.addVodGenre(genreId, ondemandId);
        // TODO: test validations
    }

    /**
     * Remove a genre from an On Demand page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVodGenreTest() throws ApiException {
        String genreId = null;
        BigDecimal ondemandId = null;
        api.deleteVodGenre(genreId, ondemandId);
        // TODO: test validations
    }

    /**
     * Get a specific On Demand page in a genre
     *
     * Check whether a genre contains an On Demand page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenreVodTest() throws ApiException {
        String genreId = null;
        BigDecimal ondemandId = null;
        OnDemandPage response = api.getGenreVod(genreId, ondemandId);
        // TODO: test validations
    }

    /**
     * Get all the On Demand pages in a genre
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenreVodsTest() throws ApiException {
        String genreId = null;
        String direction = null;
        String filter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<OnDemandPage> response = api.getGenreVods(genreId, direction, filter, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get a specific On Demand genre
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVodGenreTest() throws ApiException {
        String genreId = null;
        OnDemandGenre response = api.getVodGenre(genreId);
        // TODO: test validations
    }

    /**
     * Check whether an On Demand page belongs to a genre
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVodGenreByOndemandIdTest() throws ApiException {
        String genreId = null;
        BigDecimal ondemandId = null;
        OnDemandGenre response = api.getVodGenreByOndemandId(genreId, ondemandId);
        // TODO: test validations
    }

    /**
     * Get all On Demand genres
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVodGenresTest() throws ApiException {
        List<OnDemandGenre> response = api.getVodGenres();
        // TODO: test validations
    }

    /**
     * Get all the genres of an On Demand page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVodGenresByOndemandIdTest() throws ApiException {
        BigDecimal ondemandId = null;
        List<OnDemandGenre> response = api.getVodGenresByOndemandId(ondemandId);
        // TODO: test validations
    }

}
