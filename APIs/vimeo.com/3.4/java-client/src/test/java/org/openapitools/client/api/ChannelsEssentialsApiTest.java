/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.EditChannelRequest;
import org.openapitools.client.model.LegacyError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsEssentialsApi
 */
@Disabled
public class ChannelsEssentialsApiTest {

    private final ChannelsEssentialsApi api = new ChannelsEssentialsApi();

    /**
     * Create a channel
     *
     * This method creates a new channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTest() throws ApiException {
        CreateChannelRequest createChannelRequest = null;
        Channel response = api.createChannel(createChannelRequest);
        // TODO: test validations
    }

    /**
     * Delete a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        BigDecimal channelId = null;
        api.deleteChannel(channelId);
        // TODO: test validations
    }

    /**
     * Edit a channel
     *
     * This method edits the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editChannelTest() throws ApiException {
        BigDecimal channelId = null;
        EditChannelRequest editChannelRequest = null;
        Channel response = api.editChannel(channelId, editChannelRequest);
        // TODO: test validations
    }

    /**
     * Get a specific channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelTest() throws ApiException {
        BigDecimal channelId = null;
        Channel response = api.getChannel(channelId);
        // TODO: test validations
    }

    /**
     * Get all the channels to which a user subscribes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelSubscriptionsTest() throws ApiException {
        BigDecimal userId = null;
        String direction = null;
        String filter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Channel> response = api.getChannelSubscriptions(userId, direction, filter, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the channels to which a user subscribes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelSubscriptionsAlt1Test() throws ApiException {
        String direction = null;
        String filter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Channel> response = api.getChannelSubscriptionsAlt1(direction, filter, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all channels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelsTest() throws ApiException {
        String direction = null;
        String filter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Channel> response = api.getChannels(direction, filter, page, perPage, query, sort);
        // TODO: test validations
    }

}
