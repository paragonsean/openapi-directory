/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddChannelModeratorsRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.RemoveChannelModeratorsRequest;
import org.openapitools.client.model.ReplaceChannelModeratorsRequest;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsModeratorsApi
 */
@Disabled
public class ChannelsModeratorsApiTest {

    private final ChannelsModeratorsApi api = new ChannelsModeratorsApi();

    /**
     * Add a specific channel moderator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChannelModeratorTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.addChannelModerator(channelId, userId);
        // TODO: test validations
    }

    /**
     * Add a list of channel moderators
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChannelModeratorsTest() throws ApiException {
        BigDecimal channelId = null;
        AddChannelModeratorsRequest addChannelModeratorsRequest = null;
        api.addChannelModerators(channelId, addChannelModeratorsRequest);
        // TODO: test validations
    }

    /**
     * Get a specific channel moderator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelModeratorTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        User response = api.getChannelModerator(channelId, userId);
        // TODO: test validations
    }

    /**
     * Get all the moderators in a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelModeratorsTest() throws ApiException {
        BigDecimal channelId = null;
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.getChannelModerators(channelId, direction, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Remove a specific channel moderator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeChannelModeratorTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.removeChannelModerator(channelId, userId);
        // TODO: test validations
    }

    /**
     * Remove a list of channel moderators
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeChannelModeratorsTest() throws ApiException {
        BigDecimal channelId = null;
        RemoveChannelModeratorsRequest removeChannelModeratorsRequest = null;
        User response = api.removeChannelModerators(channelId, removeChannelModeratorsRequest);
        // TODO: test validations
    }

    /**
     * Replace the moderators of a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceChannelModeratorsTest() throws ApiException {
        BigDecimal channelId = null;
        ReplaceChannelModeratorsRequest replaceChannelModeratorsRequest = null;
        List<User> response = api.replaceChannelModerators(channelId, replaceChannelModeratorsRequest);
        // TODO: test validations
    }

}
