/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SetChannelPrivacyUsersRequest;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsPrivateChannelMembersApi
 */
@Disabled
public class ChannelsPrivateChannelMembersApiTest {

    private final ChannelsPrivateChannelMembersApi api = new ChannelsPrivateChannelMembersApi();

    /**
     * Restrict a user from viewing a private channel
     *
     * This method prevents a single user from being able to access the specified private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelPrivacyUserTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.deleteChannelPrivacyUser(channelId, userId);
        // TODO: test validations
    }

    /**
     * Get all the users who can view a private channel
     *
     * This method gets all the users who have access to the specified private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelPrivacyUsersTest() throws ApiException {
        BigDecimal channelId = null;
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        List<User> response = api.getChannelPrivacyUsers(channelId, direction, page, perPage);
        // TODO: test validations
    }

    /**
     * Permit a specific user to view a private channel
     *
     * This method gives a single user access to the specified private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setChannelPrivacyUserTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.setChannelPrivacyUser(channelId, userId);
        // TODO: test validations
    }

    /**
     * Permit a list of users to view a private channel
     *
     * This method gives multiple users access to the specified private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setChannelPrivacyUsersTest() throws ApiException {
        BigDecimal channelId = null;
        SetChannelPrivacyUsersRequest setChannelPrivacyUsersRequest = null;
        List<User> response = api.setChannelPrivacyUsers(channelId, setChannelPrivacyUsersRequest);
        // TODO: test validations
    }

}
