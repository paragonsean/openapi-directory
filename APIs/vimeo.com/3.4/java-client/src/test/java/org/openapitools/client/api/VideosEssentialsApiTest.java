/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.EditVideoRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosEssentialsApi
 */
@Disabled
public class VideosEssentialsApiTest {

    private final VideosEssentialsApi api = new VideosEssentialsApi();

    /**
     * Check if a user owns a video
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserOwnsVideoTest() throws ApiException {
        BigDecimal userId = null;
        BigDecimal videoId = null;
        Video response = api.checkIfUserOwnsVideo(userId, videoId);
        // TODO: test validations
    }

    /**
     * Check if a user owns a video
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserOwnsVideoAlt1Test() throws ApiException {
        BigDecimal videoId = null;
        Video response = api.checkIfUserOwnsVideoAlt1(videoId);
        // TODO: test validations
    }

    /**
     * Delete a video
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVideoTest() throws ApiException {
        BigDecimal videoId = null;
        api.deleteVideo(videoId);
        // TODO: test validations
    }

    /**
     * Edit a video
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editVideoTest() throws ApiException {
        BigDecimal videoId = null;
        EditVideoRequest editVideoRequest = null;
        Video response = api.editVideo(videoId, editVideoRequest);
        // TODO: test validations
    }

    /**
     * Get all the videos in which a user appears
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppearancesTest() throws ApiException {
        BigDecimal userId = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.getAppearances(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the videos in which a user appears
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppearancesAlt1Test() throws ApiException {
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.getAppearancesAlt1(direction, filter, filterEmbeddable, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get a specific video
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoTest() throws ApiException {
        BigDecimal videoId = null;
        Video response = api.getVideo(videoId);
        // TODO: test validations
    }

    /**
     * Get all the videos that a user has uploaded
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideosTest() throws ApiException {
        BigDecimal userId = null;
        String containingUri = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Boolean filterPlayable = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.getVideos(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the videos that a user has uploaded
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideosAlt1Test() throws ApiException {
        String containingUri = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Boolean filterPlayable = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.getVideosAlt1(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Search for videos
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVideosTest() throws ApiException {
        String query = null;
        String direction = null;
        String filter = null;
        String links = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String sort = null;
        String uris = null;
        List<Video> response = api.searchVideos(query, direction, filter, links, page, perPage, sort, uris);
        // TODO: test validations
    }

}
