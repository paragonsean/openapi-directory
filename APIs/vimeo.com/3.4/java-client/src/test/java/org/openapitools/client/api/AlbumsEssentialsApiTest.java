/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Album;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateAlbumAlt1Request;
import org.openapitools.client.model.EditAlbumAlt1Request;
import org.openapitools.client.model.LegacyError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlbumsEssentialsApi
 */
@Disabled
public class AlbumsEssentialsApiTest {

    private final AlbumsEssentialsApi api = new AlbumsEssentialsApi();

    /**
     * Create an album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlbumTest() throws ApiException {
        BigDecimal userId = null;
        CreateAlbumAlt1Request createAlbumAlt1Request = null;
        Album response = api.createAlbum(userId, createAlbumAlt1Request);
        // TODO: test validations
    }

    /**
     * Create an album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlbumAlt1Test() throws ApiException {
        CreateAlbumAlt1Request createAlbumAlt1Request = null;
        Album response = api.createAlbumAlt1(createAlbumAlt1Request);
        // TODO: test validations
    }

    /**
     * Delete an album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlbumTest() throws ApiException {
        BigDecimal albumId = null;
        BigDecimal userId = null;
        api.deleteAlbum(albumId, userId);
        // TODO: test validations
    }

    /**
     * Delete an album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlbumAlt1Test() throws ApiException {
        BigDecimal albumId = null;
        api.deleteAlbumAlt1(albumId);
        // TODO: test validations
    }

    /**
     * Edit an album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editAlbumTest() throws ApiException {
        BigDecimal albumId = null;
        BigDecimal userId = null;
        EditAlbumAlt1Request editAlbumAlt1Request = null;
        Album response = api.editAlbum(albumId, userId, editAlbumAlt1Request);
        // TODO: test validations
    }

    /**
     * Edit an album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editAlbumAlt1Test() throws ApiException {
        BigDecimal albumId = null;
        EditAlbumAlt1Request editAlbumAlt1Request = null;
        Album response = api.editAlbumAlt1(albumId, editAlbumAlt1Request);
        // TODO: test validations
    }

    /**
     * Get a specific album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumTest() throws ApiException {
        BigDecimal albumId = null;
        BigDecimal userId = null;
        Album response = api.getAlbum(albumId, userId);
        // TODO: test validations
    }

    /**
     * Get a specific album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumAlt1Test() throws ApiException {
        BigDecimal albumId = null;
        Album response = api.getAlbumAlt1(albumId);
        // TODO: test validations
    }

    /**
     * Get all the albums that belong to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumsTest() throws ApiException {
        BigDecimal userId = null;
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Album> response = api.getAlbums(userId, direction, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Get all the albums that belong to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumsAlt1Test() throws ApiException {
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<Album> response = api.getAlbumsAlt1(direction, page, perPage, query, sort);
        // TODO: test validations
    }

}
