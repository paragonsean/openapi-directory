/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsSubscriptionsAndSubscribersApi
 */
@Disabled
public class ChannelsSubscriptionsAndSubscribersApiTest {

    private final ChannelsSubscriptionsAndSubscribersApi api = new ChannelsSubscriptionsAndSubscribersApi();

    /**
     * Check if a user follows a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserSubscribedToChannelTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.checkIfUserSubscribedToChannel(channelId, userId);
        // TODO: test validations
    }

    /**
     * Check if a user follows a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserSubscribedToChannelAlt1Test() throws ApiException {
        BigDecimal channelId = null;
        api.checkIfUserSubscribedToChannelAlt1(channelId);
        // TODO: test validations
    }

    /**
     * Get all the followers of a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelSubscribersTest() throws ApiException {
        BigDecimal channelId = null;
        String filter = null;
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.getChannelSubscribers(channelId, filter, direction, page, perPage, query, sort);
        // TODO: test validations
    }

    /**
     * Subscribe a user to a specific channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeToChannelTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.subscribeToChannel(channelId, userId);
        // TODO: test validations
    }

    /**
     * Subscribe a user to a specific channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeToChannelAlt1Test() throws ApiException {
        BigDecimal channelId = null;
        api.subscribeToChannelAlt1(channelId);
        // TODO: test validations
    }

    /**
     * Unsubscribe a user from a specific channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeFromChannelTest() throws ApiException {
        BigDecimal channelId = null;
        BigDecimal userId = null;
        api.unsubscribeFromChannel(channelId, userId);
        // TODO: test validations
    }

    /**
     * Unsubscribe a user from a specific channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeFromChannelAlt1Test() throws ApiException {
        BigDecimal channelId = null;
        api.unsubscribeFromChannelAlt1(channelId);
        // TODO: test validations
    }

}
