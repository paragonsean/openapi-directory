/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateProjectAlt1Request;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Project;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsEssentialsApi
 */
@Disabled
public class ProjectsEssentialsApiTest {

    private final ProjectsEssentialsApi api = new ProjectsEssentialsApi();

    /**
     * Create a project
     *
     * This method creates a new project for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        BigDecimal userId = null;
        CreateProjectAlt1Request createProjectAlt1Request = null;
        Project response = api.createProject(userId, createProjectAlt1Request);
        // TODO: test validations
    }

    /**
     * Create a project
     *
     * This method creates a new project for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectAlt1Test() throws ApiException {
        CreateProjectAlt1Request createProjectAlt1Request = null;
        Project response = api.createProjectAlt1(createProjectAlt1Request);
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * This method deletes a project and optionally also the videos that it contains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        BigDecimal projectId = null;
        BigDecimal userId = null;
        Boolean shouldDeleteClips = null;
        api.deleteProject(projectId, userId, shouldDeleteClips);
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * This method deletes a project and optionally also the videos that it contains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectAlt1Test() throws ApiException {
        BigDecimal projectId = null;
        Boolean shouldDeleteClips = null;
        api.deleteProjectAlt1(projectId, shouldDeleteClips);
        // TODO: test validations
    }

    /**
     * Edit a project
     *
     * This method edits an existing project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editProjectTest() throws ApiException {
        BigDecimal projectId = null;
        BigDecimal userId = null;
        CreateProjectAlt1Request createProjectAlt1Request = null;
        Project response = api.editProject(projectId, userId, createProjectAlt1Request);
        // TODO: test validations
    }

    /**
     * Edit a project
     *
     * This method edits an existing project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editProjectAlt1Test() throws ApiException {
        BigDecimal projectId = null;
        CreateProjectAlt1Request createProjectAlt1Request = null;
        Project response = api.editProjectAlt1(projectId, createProjectAlt1Request);
        // TODO: test validations
    }

    /**
     * Get a specific project
     *
     * This method gets a single project that belongs to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        BigDecimal projectId = null;
        BigDecimal userId = null;
        Project response = api.getProject(projectId, userId);
        // TODO: test validations
    }

    /**
     * Get a specific project
     *
     * This method gets a single project that belongs to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectAlt1Test() throws ApiException {
        BigDecimal projectId = null;
        Project response = api.getProjectAlt1(projectId);
        // TODO: test validations
    }

    /**
     * Get all the projects that belong to a user
     *
     * This method gets all the projects that belong to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        BigDecimal userId = null;
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String sort = null;
        List<Project> response = api.getProjects(userId, direction, page, perPage, sort);
        // TODO: test validations
    }

    /**
     * Get all the projects that belong to a user
     *
     * This method gets all the projects that belong to the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsAlt1Test() throws ApiException {
        String direction = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String sort = null;
        List<Project> response = api.getProjectsAlt1(direction, page, perPage, sort);
        // TODO: test validations
    }

}
