# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mx_records import MXRecords
from openapi_server import util


class Domains(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a: List[str]=None, cname: List[str]=None, mx: List[MXRecords]=None, ns: List[str]=None, txt: List[str]=None, country: str=None, create_date: datetime=None, domain: str=None, is_dead: str=None, update_date: datetime=None):
        """Domains - a model defined in OpenAPI

        :param a: The a of this Domains.
        :param cname: The cname of this Domains.
        :param mx: The mx of this Domains.
        :param ns: The ns of this Domains.
        :param txt: The txt of this Domains.
        :param country: The country of this Domains.
        :param create_date: The create_date of this Domains.
        :param domain: The domain of this Domains.
        :param is_dead: The is_dead of this Domains.
        :param update_date: The update_date of this Domains.
        """
        self.openapi_types = {
            'a': List[str],
            'cname': List[str],
            'mx': List[MXRecords],
            'ns': List[str],
            'txt': List[str],
            'country': str,
            'create_date': datetime,
            'domain': str,
            'is_dead': str,
            'update_date': datetime
        }

        self.attribute_map = {
            'a': 'A',
            'cname': 'CNAME',
            'mx': 'MX',
            'ns': 'NS',
            'txt': 'TXT',
            'country': 'country',
            'create_date': 'create_date',
            'domain': 'domain',
            'is_dead': 'isDead',
            'update_date': 'update_date'
        }

        self._a = a
        self._cname = cname
        self._mx = mx
        self._ns = ns
        self._txt = txt
        self._country = country
        self._create_date = create_date
        self._domain = domain
        self._is_dead = is_dead
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domains':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domains of this Domains.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a(self):
        """Gets the a of this Domains.


        :return: The a of this Domains.
        :rtype: List[str]
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this Domains.


        :param a: The a of this Domains.
        :type a: List[str]
        """

        self._a = a

    @property
    def cname(self):
        """Gets the cname of this Domains.


        :return: The cname of this Domains.
        :rtype: List[str]
        """
        return self._cname

    @cname.setter
    def cname(self, cname):
        """Sets the cname of this Domains.


        :param cname: The cname of this Domains.
        :type cname: List[str]
        """

        self._cname = cname

    @property
    def mx(self):
        """Gets the mx of this Domains.


        :return: The mx of this Domains.
        :rtype: List[MXRecords]
        """
        return self._mx

    @mx.setter
    def mx(self, mx):
        """Sets the mx of this Domains.


        :param mx: The mx of this Domains.
        :type mx: List[MXRecords]
        """

        self._mx = mx

    @property
    def ns(self):
        """Gets the ns of this Domains.


        :return: The ns of this Domains.
        :rtype: List[str]
        """
        return self._ns

    @ns.setter
    def ns(self, ns):
        """Sets the ns of this Domains.


        :param ns: The ns of this Domains.
        :type ns: List[str]
        """

        self._ns = ns

    @property
    def txt(self):
        """Gets the txt of this Domains.


        :return: The txt of this Domains.
        :rtype: List[str]
        """
        return self._txt

    @txt.setter
    def txt(self, txt):
        """Sets the txt of this Domains.


        :param txt: The txt of this Domains.
        :type txt: List[str]
        """

        self._txt = txt

    @property
    def country(self):
        """Gets the country of this Domains.

        Hosting Country

        :return: The country of this Domains.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Domains.

        Hosting Country

        :param country: The country of this Domains.
        :type country: str
        """

        self._country = country

    @property
    def create_date(self):
        """Gets the create_date of this Domains.

        Domain creation date

        :return: The create_date of this Domains.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Domains.

        Domain creation date

        :param create_date: The create_date of this Domains.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def domain(self):
        """Gets the domain of this Domains.

        Domain name

        :return: The domain of this Domains.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Domains.

        Domain name

        :param domain: The domain of this Domains.
        :type domain: str
        """

        self._domain = domain

    @property
    def is_dead(self):
        """Gets the is_dead of this Domains.

        If Domain is Dead

        :return: The is_dead of this Domains.
        :rtype: str
        """
        return self._is_dead

    @is_dead.setter
    def is_dead(self, is_dead):
        """Sets the is_dead of this Domains.

        If Domain is Dead

        :param is_dead: The is_dead of this Domains.
        :type is_dead: str
        """

        self._is_dead = is_dead

    @property
    def update_date(self):
        """Gets the update_date of this Domains.

        Domain last update date

        :return: The update_date of this Domains.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Domains.

        Domain last update date

        :param update_date: The update_date of this Domains.
        :type update_date: datetime
        """

        self._update_date = update_date
