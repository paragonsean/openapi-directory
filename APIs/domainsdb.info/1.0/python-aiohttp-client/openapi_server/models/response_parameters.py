# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_page: str=None, time: str=None, total: int=None):
        """ResponseParameters - a model defined in OpenAPI

        :param next_page: The next_page of this ResponseParameters.
        :param time: The time of this ResponseParameters.
        :param total: The total of this ResponseParameters.
        """
        self.openapi_types = {
            'next_page': str,
            'time': str,
            'total': int
        }

        self.attribute_map = {
            'next_page': 'next_page',
            'time': 'time',
            'total': 'total'
        }

        self._next_page = next_page
        self._time = time
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response_Parameters of this ResponseParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_page(self):
        """Gets the next_page of this ResponseParameters.

        Next page id

        :return: The next_page of this ResponseParameters.
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this ResponseParameters.

        Next page id

        :param next_page: The next_page of this ResponseParameters.
        :type next_page: str
        """

        self._next_page = next_page

    @property
    def time(self):
        """Gets the time of this ResponseParameters.

        Time took

        :return: The time of this ResponseParameters.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ResponseParameters.

        Time took

        :param time: The time of this ResponseParameters.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def total(self):
        """Gets the total of this ResponseParameters.

        Total days reported

        :return: The total of this ResponseParameters.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ResponseParameters.

        Total days reported

        :param total: The total of this ResponseParameters.
        :type total: int
        """

        self._total = total
