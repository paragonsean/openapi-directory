# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZoneInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: List[str]=None, in_bundles: List[str]=None, includes: List[str]=None, type: str=None, zone: str=None):
        """ZoneInfo - a model defined in OpenAPI

        :param description: The description of this ZoneInfo.
        :param in_bundles: The in_bundles of this ZoneInfo.
        :param includes: The includes of this ZoneInfo.
        :param type: The type of this ZoneInfo.
        :param zone: The zone of this ZoneInfo.
        """
        self.openapi_types = {
            'description': List[str],
            'in_bundles': List[str],
            'includes': List[str],
            'type': str,
            'zone': str
        }

        self.attribute_map = {
            'description': 'description',
            'in_bundles': 'in_bundles',
            'includes': 'includes',
            'type': 'type',
            'zone': 'zone'
        }

        self._description = description
        self._in_bundles = in_bundles
        self._includes = includes
        self._type = type
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zone_info of this ZoneInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ZoneInfo.


        :return: The description of this ZoneInfo.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ZoneInfo.


        :param description: The description of this ZoneInfo.
        :type description: List[str]
        """

        self._description = description

    @property
    def in_bundles(self):
        """Gets the in_bundles of this ZoneInfo.


        :return: The in_bundles of this ZoneInfo.
        :rtype: List[str]
        """
        return self._in_bundles

    @in_bundles.setter
    def in_bundles(self, in_bundles):
        """Sets the in_bundles of this ZoneInfo.


        :param in_bundles: The in_bundles of this ZoneInfo.
        :type in_bundles: List[str]
        """

        self._in_bundles = in_bundles

    @property
    def includes(self):
        """Gets the includes of this ZoneInfo.


        :return: The includes of this ZoneInfo.
        :rtype: List[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this ZoneInfo.


        :param includes: The includes of this ZoneInfo.
        :type includes: List[str]
        """

        self._includes = includes

    @property
    def type(self):
        """Gets the type of this ZoneInfo.

        TLD type

        :return: The type of this ZoneInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ZoneInfo.

        TLD type

        :param type: The type of this ZoneInfo.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def zone(self):
        """Gets the zone of this ZoneInfo.

        TLD name

        :return: The zone of this ZoneInfo.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ZoneInfo.

        TLD name

        :param zone: The zone of this ZoneInfo.
        :type zone: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")

        self._zone = zone
