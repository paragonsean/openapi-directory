# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIKeyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_email: str=None, customer_name: str=None, expires: str=None, item_id: str=None, item_name: str=None, license: str=None, license_limit: str=None, price_id: str=None, success: str=None):
        """APIKeyInfo - a model defined in OpenAPI

        :param customer_email: The customer_email of this APIKeyInfo.
        :param customer_name: The customer_name of this APIKeyInfo.
        :param expires: The expires of this APIKeyInfo.
        :param item_id: The item_id of this APIKeyInfo.
        :param item_name: The item_name of this APIKeyInfo.
        :param license: The license of this APIKeyInfo.
        :param license_limit: The license_limit of this APIKeyInfo.
        :param price_id: The price_id of this APIKeyInfo.
        :param success: The success of this APIKeyInfo.
        """
        self.openapi_types = {
            'customer_email': str,
            'customer_name': str,
            'expires': str,
            'item_id': str,
            'item_name': str,
            'license': str,
            'license_limit': str,
            'price_id': str,
            'success': str
        }

        self.attribute_map = {
            'customer_email': 'customer_email',
            'customer_name': 'customer_name',
            'expires': 'expires',
            'item_id': 'item_id',
            'item_name': 'item_name',
            'license': 'license',
            'license_limit': 'license_limit',
            'price_id': 'price_id',
            'success': 'success'
        }

        self._customer_email = customer_email
        self._customer_name = customer_name
        self._expires = expires
        self._item_id = item_id
        self._item_name = item_name
        self._license = license
        self._license_limit = license_limit
        self._price_id = price_id
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIKeyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API_Key_Info of this APIKeyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_email(self):
        """Gets the customer_email of this APIKeyInfo.

        State

        :return: The customer_email of this APIKeyInfo.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this APIKeyInfo.

        State

        :param customer_email: The customer_email of this APIKeyInfo.
        :type customer_email: str
        """

        self._customer_email = customer_email

    @property
    def customer_name(self):
        """Gets the customer_name of this APIKeyInfo.

        State

        :return: The customer_name of this APIKeyInfo.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this APIKeyInfo.

        State

        :param customer_name: The customer_name of this APIKeyInfo.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def expires(self):
        """Gets the expires of this APIKeyInfo.

        State

        :return: The expires of this APIKeyInfo.
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this APIKeyInfo.

        State

        :param expires: The expires of this APIKeyInfo.
        :type expires: str
        """

        self._expires = expires

    @property
    def item_id(self):
        """Gets the item_id of this APIKeyInfo.

        State

        :return: The item_id of this APIKeyInfo.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this APIKeyInfo.

        State

        :param item_id: The item_id of this APIKeyInfo.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_name(self):
        """Gets the item_name of this APIKeyInfo.

        State

        :return: The item_name of this APIKeyInfo.
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this APIKeyInfo.

        State

        :param item_name: The item_name of this APIKeyInfo.
        :type item_name: str
        """

        self._item_name = item_name

    @property
    def license(self):
        """Gets the license of this APIKeyInfo.

        State

        :return: The license of this APIKeyInfo.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this APIKeyInfo.

        State

        :param license: The license of this APIKeyInfo.
        :type license: str
        """

        self._license = license

    @property
    def license_limit(self):
        """Gets the license_limit of this APIKeyInfo.

        State

        :return: The license_limit of this APIKeyInfo.
        :rtype: str
        """
        return self._license_limit

    @license_limit.setter
    def license_limit(self, license_limit):
        """Sets the license_limit of this APIKeyInfo.

        State

        :param license_limit: The license_limit of this APIKeyInfo.
        :type license_limit: str
        """

        self._license_limit = license_limit

    @property
    def price_id(self):
        """Gets the price_id of this APIKeyInfo.

        State

        :return: The price_id of this APIKeyInfo.
        :rtype: str
        """
        return self._price_id

    @price_id.setter
    def price_id(self, price_id):
        """Sets the price_id of this APIKeyInfo.

        State

        :param price_id: The price_id of this APIKeyInfo.
        :type price_id: str
        """

        self._price_id = price_id

    @property
    def success(self):
        """Gets the success of this APIKeyInfo.

        State

        :return: The success of this APIKeyInfo.
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this APIKeyInfo.

        State

        :param success: The success of this APIKeyInfo.
        :type success: str
        """

        self._success = success
