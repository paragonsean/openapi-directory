# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZoneStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, dec: int=None, inc: int=None, total: int=None, zone: str=None):
        """ZoneStatistics - a model defined in OpenAPI

        :param _date: The _date of this ZoneStatistics.
        :param dec: The dec of this ZoneStatistics.
        :param inc: The inc of this ZoneStatistics.
        :param total: The total of this ZoneStatistics.
        :param zone: The zone of this ZoneStatistics.
        """
        self.openapi_types = {
            '_date': datetime,
            'dec': int,
            'inc': int,
            'total': int,
            'zone': str
        }

        self.attribute_map = {
            '_date': 'date',
            'dec': 'dec',
            'inc': 'inc',
            'total': 'total',
            'zone': 'zone'
        }

        self.__date = _date
        self._dec = dec
        self._inc = inc
        self._total = total
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zone_statistics of this ZoneStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this ZoneStatistics.

        Report Date

        :return: The _date of this ZoneStatistics.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ZoneStatistics.

        Report Date

        :param _date: The _date of this ZoneStatistics.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def dec(self):
        """Gets the dec of this ZoneStatistics.

        Increase

        :return: The dec of this ZoneStatistics.
        :rtype: int
        """
        return self._dec

    @dec.setter
    def dec(self, dec):
        """Sets the dec of this ZoneStatistics.

        Increase

        :param dec: The dec of this ZoneStatistics.
        :type dec: int
        """
        if dec is None:
            raise ValueError("Invalid value for `dec`, must not be `None`")

        self._dec = dec

    @property
    def inc(self):
        """Gets the inc of this ZoneStatistics.

        Decrease

        :return: The inc of this ZoneStatistics.
        :rtype: int
        """
        return self._inc

    @inc.setter
    def inc(self, inc):
        """Sets the inc of this ZoneStatistics.

        Decrease

        :param inc: The inc of this ZoneStatistics.
        :type inc: int
        """
        if inc is None:
            raise ValueError("Invalid value for `inc`, must not be `None`")

        self._inc = inc

    @property
    def total(self):
        """Gets the total of this ZoneStatistics.

        Total number of records

        :return: The total of this ZoneStatistics.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ZoneStatistics.

        Total number of records

        :param total: The total of this ZoneStatistics.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def zone(self):
        """Gets the zone of this ZoneStatistics.

        TLD name

        :return: The zone of this ZoneStatistics.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ZoneStatistics.

        TLD name

        :param zone: The zone of this ZoneStatistics.
        :type zone: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")

        self._zone = zone
