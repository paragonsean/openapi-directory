/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchResults from '../model/SearchResults';
import UpdateModel from '../model/UpdateModel';

/**
* Domains service.
* @module api/DomainsApi
* @version 1.0
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainsTldZoneIdDownloadGet operation.
     * @callback module:api/DomainsApi~domainsTldZoneIdDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Whole Dataset for TLD
     * @param {String} zoneId 
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {module:api/DomainsApi~domainsTldZoneIdDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    domainsTldZoneIdDownloadGet(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling domainsTldZoneIdDownloadGet");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/tld/{zone_id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsTldZoneIdSearchGet operation.
     * @callback module:api/DomainsApi~domainsTldZoneIdSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Domains Search for TLD
     * @param {String} zoneId 
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {String} [domain] Domain includes
     * @param {String} [country] Hosting Country
     * @param {Boolean} [isDead] Dead or Not, default not
     * @param {String} [A] A record includes
     * @param {String} [NS] NS record includes
     * @param {String} [CNAME] CNAME record includes
     * @param {String} [MX] MX record includes
     * @param {String} [TXT] TXT record includes
     * @param {module:api/DomainsApi~domainsTldZoneIdSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    domainsTldZoneIdSearchGet(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling domainsTldZoneIdSearchGet");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit'],
        'domain': opts['domain'],
        'country': opts['country'],
        'isDead': opts['isDead'],
        'A': opts['A'],
        'NS': opts['NS'],
        'CNAME': opts['CNAME'],
        'MX': opts['MX'],
        'TXT': opts['TXT']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/domains/tld/{zone_id}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsUpdatesAddedDownloadGet operation.
     * @callback module:api/DomainsApi~domainsUpdatesAddedDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download added domains, latest if date not specified
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {module:api/DomainsApi~domainsUpdatesAddedDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    domainsUpdatesAddedDownloadGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/updates/added/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsUpdatesAddedGet operation.
     * @callback module:api/DomainsApi~domainsUpdatesAddedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get added domains, latest if date not specified
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {module:api/DomainsApi~domainsUpdatesAddedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    domainsUpdatesAddedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/domains/updates/added', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsUpdatesDeletedDownloadGet operation.
     * @callback module:api/DomainsApi~domainsUpdatesDeletedDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download deleted domains, latest if date not specified
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {module:api/DomainsApi~domainsUpdatesDeletedDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    domainsUpdatesDeletedDownloadGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/updates/deleted/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsUpdatesDeletedGet operation.
     * @callback module:api/DomainsApi~domainsUpdatesDeletedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deleted domains, latest if date not specified
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {module:api/DomainsApi~domainsUpdatesDeletedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    domainsUpdatesDeletedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/domains/updates/deleted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsUpdatesListGet operation.
     * @callback module:api/DomainsApi~domainsUpdatesListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of updates
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {module:api/DomainsApi~domainsUpdatesListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateModel}
     */
    domainsUpdatesListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateModel;
      return this.apiClient.callApi(
        '/domains/updates/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchDomainItem operation.
     * @callback module:api/DomainsApi~getSearchDomainItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Domains Database Search
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {String} [domain] Domain includes
     * @param {String} [zone] In Zone
     * @param {String} [country] Hosting Country
     * @param {Boolean} [isDead] Dead or Not, default not
     * @param {String} [A] A record includes
     * @param {String} [NS] NS record includes
     * @param {String} [CNAME] CNAME record includes
     * @param {String} [MX] MX record includes
     * @param {String} [TXT] TXT record includes
     * @param {module:api/DomainsApi~getSearchDomainItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    getSearchDomainItem(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit'],
        'domain': opts['domain'],
        'zone': opts['zone'],
        'country': opts['country'],
        'isDead': opts['isDead'],
        'A': opts['A'],
        'NS': opts['NS'],
        'CNAME': opts['CNAME'],
        'MX': opts['MX'],
        'TXT': opts['TXT']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/domains/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTldDomainItem operation.
     * @callback module:api/DomainsApi~getTldDomainItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TLD records
     * @param {String} zoneId 
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {String} [date] Request date
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {String} [domain] Domain includes
     * @param {String} [country] Hosting Country
     * @param {Boolean} [isDead] Dead or Not, default not
     * @param {String} [A] A record includes
     * @param {String} [NS] NS record includes
     * @param {String} [CNAME] CNAME record includes
     * @param {String} [MX] MX record includes
     * @param {String} [TXT] TXT record includes
     * @param {module:api/DomainsApi~getTldDomainItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    getTldDomainItem(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTldDomainItem");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'date': opts['date'],
        'page': opts['page'],
        'limit': opts['limit'],
        'domain': opts['domain'],
        'country': opts['country'],
        'isDead': opts['isDead'],
        'A': opts['A'],
        'NS': opts['NS'],
        'CNAME': opts['CNAME'],
        'MX': opts['MX'],
        'TXT': opts['TXT']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/domains/tld/{zone_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
