/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIKeyInfo from '../model/APIKeyInfo';
import ZoneInfo from '../model/ZoneInfo';
import ZoneStats from '../model/ZoneStats';

/**
* Info service.
* @module api/InfoApi
* @version 1.0
*/
export default class InfoApi {

    /**
    * Constructs a new InfoApi. 
    * @alias module:api/InfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getApiInfoItem operation.
     * @callback module:api/InfoApi~getApiInfoItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKeyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] API key
     * @param {module:api/InfoApi~getApiInfoItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKeyInfo}
     */
    getApiInfoItem(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKeyInfo;
      return this.apiClient.callApi(
        '/info/api', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatisticsCollection operation.
     * @callback module:api/InfoApi~getStatisticsCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ZoneStats>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns overall stagtistics
     * @param {Object} opts Optional parameters
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {module:api/InfoApi~getStatisticsCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ZoneStats>}
     */
    getStatisticsCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneStats];
      return this.apiClient.callApi(
        '/info/stat/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatisticsItem operation.
     * @callback module:api/InfoApi~getStatisticsItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns statistics for specific zone
     * @param {String} zone 
     * @param {Object} opts Optional parameters
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {module:api/InfoApi~getStatisticsItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneStats}
     */
    getStatisticsItem(zone, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling getStatisticsItem");
      }

      let pathParams = {
        'zone': zone
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneStats;
      return this.apiClient.callApi(
        '/info/stat/{zone}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infoTldGet operation.
     * @callback module:api/InfoApi~infoTldGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ZoneInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns overall Tld info
     * @param {module:api/InfoApi~infoTldGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ZoneInfo>}
     */
    infoTldGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneInfo];
      return this.apiClient.callApi(
        '/info/tld/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infoTldZoneGet operation.
     * @callback module:api/InfoApi~infoTldZoneGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns statistics for specific zone
     * @param {String} zone 
     * @param {Object} opts Optional parameters
     * @param {String} [page] Search page to request
     * @param {Number} [limit = 50)] Results per page
     * @param {module:api/InfoApi~infoTldZoneGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneInfo}
     */
    infoTldZoneGet(zone, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling infoTldZoneGet");
      }

      let pathParams = {
        'zone': zone
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneInfo;
      return this.apiClient.callApi(
        '/info/tld/{zone}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
