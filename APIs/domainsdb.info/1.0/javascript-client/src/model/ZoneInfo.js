/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ZoneInfo model module.
 * @module model/ZoneInfo
 * @version 1.0
 */
class ZoneInfo {
    /**
     * Constructs a new <code>ZoneInfo</code>.
     * @alias module:model/ZoneInfo
     * @param type {String} TLD type
     * @param zone {String} TLD name
     */
    constructor(type, zone) { 
        
        ZoneInfo.initialize(this, type, zone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, zone) { 
        obj['type'] = type;
        obj['zone'] = zone;
    }

    /**
     * Constructs a <code>ZoneInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneInfo} obj Optional instance to populate.
     * @return {module:model/ZoneInfo} The populated <code>ZoneInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneInfo();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], ['String']);
            }
            if (data.hasOwnProperty('in_bundles')) {
                obj['in_bundles'] = ApiClient.convertToType(data['in_bundles'], ['String']);
            }
            if (data.hasOwnProperty('includes')) {
                obj['includes'] = ApiClient.convertToType(data['includes'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZoneInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZoneInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ZoneInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['description'])) {
            throw new Error("Expected the field `description` to be an array in the JSON data but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['in_bundles'])) {
            throw new Error("Expected the field `in_bundles` to be an array in the JSON data but got " + data['in_bundles']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includes'])) {
            throw new Error("Expected the field `includes` to be an array in the JSON data but got " + data['includes']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}

ZoneInfo.RequiredProperties = ["type", "zone"];

/**
 * @member {Array.<String>} description
 */
ZoneInfo.prototype['description'] = undefined;

/**
 * @member {Array.<String>} in_bundles
 */
ZoneInfo.prototype['in_bundles'] = undefined;

/**
 * @member {Array.<String>} includes
 */
ZoneInfo.prototype['includes'] = undefined;

/**
 * TLD type
 * @member {String} type
 */
ZoneInfo.prototype['type'] = undefined;

/**
 * TLD name
 * @member {String} zone
 */
ZoneInfo.prototype['zone'] = undefined;






export default ZoneInfo;

