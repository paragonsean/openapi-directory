/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MXRecords from './MXRecords';

/**
 * The Domains model module.
 * @module model/Domains
 * @version 1.0
 */
class Domains {
    /**
     * Constructs a new <code>Domains</code>.
     * @alias module:model/Domains
     */
    constructor() { 
        
        Domains.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Domains</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domains} obj Optional instance to populate.
     * @return {module:model/Domains} The populated <code>Domains</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domains();

            if (data.hasOwnProperty('A')) {
                obj['A'] = ApiClient.convertToType(data['A'], ['String']);
            }
            if (data.hasOwnProperty('CNAME')) {
                obj['CNAME'] = ApiClient.convertToType(data['CNAME'], ['String']);
            }
            if (data.hasOwnProperty('MX')) {
                obj['MX'] = ApiClient.convertToType(data['MX'], [MXRecords]);
            }
            if (data.hasOwnProperty('NS')) {
                obj['NS'] = ApiClient.convertToType(data['NS'], ['String']);
            }
            if (data.hasOwnProperty('TXT')) {
                obj['TXT'] = ApiClient.convertToType(data['TXT'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('create_date')) {
                obj['create_date'] = ApiClient.convertToType(data['create_date'], 'Date');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('isDead')) {
                obj['isDead'] = ApiClient.convertToType(data['isDead'], 'String');
            }
            if (data.hasOwnProperty('update_date')) {
                obj['update_date'] = ApiClient.convertToType(data['update_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Domains</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Domains</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['A'])) {
            throw new Error("Expected the field `A` to be an array in the JSON data but got " + data['A']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CNAME'])) {
            throw new Error("Expected the field `CNAME` to be an array in the JSON data but got " + data['CNAME']);
        }
        if (data['MX']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MX'])) {
                throw new Error("Expected the field `MX` to be an array in the JSON data but got " + data['MX']);
            }
            // validate the optional field `MX` (array)
            for (const item of data['MX']) {
                MXRecords.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['NS'])) {
            throw new Error("Expected the field `NS` to be an array in the JSON data but got " + data['NS']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TXT'])) {
            throw new Error("Expected the field `TXT` to be an array in the JSON data but got " + data['TXT']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['isDead'] && !(typeof data['isDead'] === 'string' || data['isDead'] instanceof String)) {
            throw new Error("Expected the field `isDead` to be a primitive type in the JSON string but got " + data['isDead']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} A
 */
Domains.prototype['A'] = undefined;

/**
 * @member {Array.<String>} CNAME
 */
Domains.prototype['CNAME'] = undefined;

/**
 * @member {Array.<module:model/MXRecords>} MX
 */
Domains.prototype['MX'] = undefined;

/**
 * @member {Array.<String>} NS
 */
Domains.prototype['NS'] = undefined;

/**
 * @member {Array.<String>} TXT
 */
Domains.prototype['TXT'] = undefined;

/**
 * Hosting Country
 * @member {String} country
 */
Domains.prototype['country'] = undefined;

/**
 * Domain creation date
 * @member {Date} create_date
 */
Domains.prototype['create_date'] = undefined;

/**
 * Domain name
 * @member {String} domain
 */
Domains.prototype['domain'] = undefined;

/**
 * If Domain is Dead
 * @member {String} isDead
 */
Domains.prototype['isDead'] = undefined;

/**
 * Domain last update date
 * @member {Date} update_date
 */
Domains.prototype['update_date'] = undefined;






export default Domains;

