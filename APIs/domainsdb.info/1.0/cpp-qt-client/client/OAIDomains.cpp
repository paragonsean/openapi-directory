/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomains.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomains::OAIDomains(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomains::OAIDomains() {
    this->initializeModel();
}

OAIDomains::~OAIDomains() {}

void OAIDomains::initializeModel() {

    m_a_isSet = false;
    m_a_isValid = false;

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_mx_isSet = false;
    m_mx_isValid = false;

    m_ns_isSet = false;
    m_ns_isValid = false;

    m_txt_isSet = false;
    m_txt_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_is_dead_isSet = false;
    m_is_dead_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;
}

void OAIDomains::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomains::fromJsonObject(QJsonObject json) {

    m_a_isValid = ::OpenAPI::fromJsonValue(m_a, json[QString("A")]);
    m_a_isSet = !json[QString("A")].isNull() && m_a_isValid;

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("CNAME")]);
    m_cname_isSet = !json[QString("CNAME")].isNull() && m_cname_isValid;

    m_mx_isValid = ::OpenAPI::fromJsonValue(m_mx, json[QString("MX")]);
    m_mx_isSet = !json[QString("MX")].isNull() && m_mx_isValid;

    m_ns_isValid = ::OpenAPI::fromJsonValue(m_ns, json[QString("NS")]);
    m_ns_isSet = !json[QString("NS")].isNull() && m_ns_isValid;

    m_txt_isValid = ::OpenAPI::fromJsonValue(m_txt, json[QString("TXT")]);
    m_txt_isSet = !json[QString("TXT")].isNull() && m_txt_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("create_date")]);
    m_create_date_isSet = !json[QString("create_date")].isNull() && m_create_date_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_is_dead_isValid = ::OpenAPI::fromJsonValue(m_is_dead, json[QString("isDead")]);
    m_is_dead_isSet = !json[QString("isDead")].isNull() && m_is_dead_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("update_date")]);
    m_update_date_isSet = !json[QString("update_date")].isNull() && m_update_date_isValid;
}

QString OAIDomains::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomains::asJsonObject() const {
    QJsonObject obj;
    if (m_a.size() > 0) {
        obj.insert(QString("A"), ::OpenAPI::toJsonValue(m_a));
    }
    if (m_cname.size() > 0) {
        obj.insert(QString("CNAME"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_mx.size() > 0) {
        obj.insert(QString("MX"), ::OpenAPI::toJsonValue(m_mx));
    }
    if (m_ns.size() > 0) {
        obj.insert(QString("NS"), ::OpenAPI::toJsonValue(m_ns));
    }
    if (m_txt.size() > 0) {
        obj.insert(QString("TXT"), ::OpenAPI::toJsonValue(m_txt));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("create_date"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_is_dead_isSet) {
        obj.insert(QString("isDead"), ::OpenAPI::toJsonValue(m_is_dead));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("update_date"), ::OpenAPI::toJsonValue(m_update_date));
    }
    return obj;
}

QList<QString> OAIDomains::getA() const {
    return m_a;
}
void OAIDomains::setA(const QList<QString> &a) {
    m_a = a;
    m_a_isSet = true;
}

bool OAIDomains::is_a_Set() const{
    return m_a_isSet;
}

bool OAIDomains::is_a_Valid() const{
    return m_a_isValid;
}

QList<QString> OAIDomains::getCname() const {
    return m_cname;
}
void OAIDomains::setCname(const QList<QString> &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAIDomains::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAIDomains::is_cname_Valid() const{
    return m_cname_isValid;
}

QList<OAIMX_records> OAIDomains::getMx() const {
    return m_mx;
}
void OAIDomains::setMx(const QList<OAIMX_records> &mx) {
    m_mx = mx;
    m_mx_isSet = true;
}

bool OAIDomains::is_mx_Set() const{
    return m_mx_isSet;
}

bool OAIDomains::is_mx_Valid() const{
    return m_mx_isValid;
}

QList<QString> OAIDomains::getNs() const {
    return m_ns;
}
void OAIDomains::setNs(const QList<QString> &ns) {
    m_ns = ns;
    m_ns_isSet = true;
}

bool OAIDomains::is_ns_Set() const{
    return m_ns_isSet;
}

bool OAIDomains::is_ns_Valid() const{
    return m_ns_isValid;
}

QList<QString> OAIDomains::getTxt() const {
    return m_txt;
}
void OAIDomains::setTxt(const QList<QString> &txt) {
    m_txt = txt;
    m_txt_isSet = true;
}

bool OAIDomains::is_txt_Set() const{
    return m_txt_isSet;
}

bool OAIDomains::is_txt_Valid() const{
    return m_txt_isValid;
}

QString OAIDomains::getCountry() const {
    return m_country;
}
void OAIDomains::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIDomains::is_country_Set() const{
    return m_country_isSet;
}

bool OAIDomains::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAIDomains::getCreateDate() const {
    return m_create_date;
}
void OAIDomains::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIDomains::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIDomains::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIDomains::getDomain() const {
    return m_domain;
}
void OAIDomains::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDomains::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDomains::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDomains::getIsDead() const {
    return m_is_dead;
}
void OAIDomains::setIsDead(const QString &is_dead) {
    m_is_dead = is_dead;
    m_is_dead_isSet = true;
}

bool OAIDomains::is_is_dead_Set() const{
    return m_is_dead_isSet;
}

bool OAIDomains::is_is_dead_Valid() const{
    return m_is_dead_isValid;
}

QDateTime OAIDomains::getUpdateDate() const {
    return m_update_date;
}
void OAIDomains::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIDomains::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIDomains::is_update_date_Valid() const{
    return m_update_date_isValid;
}

bool OAIDomains::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cname.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mx.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_txt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomains::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
