/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZone_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZone_statistics::OAIZone_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZone_statistics::OAIZone_statistics() {
    this->initializeModel();
}

OAIZone_statistics::~OAIZone_statistics() {}

void OAIZone_statistics::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_dec_isSet = false;
    m_dec_isValid = false;

    m_inc_isSet = false;
    m_inc_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIZone_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZone_statistics::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_dec_isValid = ::OpenAPI::fromJsonValue(m_dec, json[QString("dec")]);
    m_dec_isSet = !json[QString("dec")].isNull() && m_dec_isValid;

    m_inc_isValid = ::OpenAPI::fromJsonValue(m_inc, json[QString("inc")]);
    m_inc_isSet = !json[QString("inc")].isNull() && m_inc_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIZone_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZone_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_dec_isSet) {
        obj.insert(QString("dec"), ::OpenAPI::toJsonValue(m_dec));
    }
    if (m_inc_isSet) {
        obj.insert(QString("inc"), ::OpenAPI::toJsonValue(m_inc));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QDateTime OAIZone_statistics::getDate() const {
    return m_date;
}
void OAIZone_statistics::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIZone_statistics::is_date_Set() const{
    return m_date_isSet;
}

bool OAIZone_statistics::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIZone_statistics::getDec() const {
    return m_dec;
}
void OAIZone_statistics::setDec(const qint32 &dec) {
    m_dec = dec;
    m_dec_isSet = true;
}

bool OAIZone_statistics::is_dec_Set() const{
    return m_dec_isSet;
}

bool OAIZone_statistics::is_dec_Valid() const{
    return m_dec_isValid;
}

qint32 OAIZone_statistics::getInc() const {
    return m_inc;
}
void OAIZone_statistics::setInc(const qint32 &inc) {
    m_inc = inc;
    m_inc_isSet = true;
}

bool OAIZone_statistics::is_inc_Set() const{
    return m_inc_isSet;
}

bool OAIZone_statistics::is_inc_Valid() const{
    return m_inc_isValid;
}

qint32 OAIZone_statistics::getTotal() const {
    return m_total;
}
void OAIZone_statistics::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIZone_statistics::is_total_Set() const{
    return m_total_isSet;
}

bool OAIZone_statistics::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIZone_statistics::getZone() const {
    return m_zone;
}
void OAIZone_statistics::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIZone_statistics::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIZone_statistics::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIZone_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZone_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_dec_isValid && m_inc_isValid && m_total_isValid && m_zone_isValid && true;
}

} // namespace OpenAPI
