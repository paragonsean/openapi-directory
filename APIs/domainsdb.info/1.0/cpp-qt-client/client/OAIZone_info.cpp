/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZone_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZone_info::OAIZone_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZone_info::OAIZone_info() {
    this->initializeModel();
}

OAIZone_info::~OAIZone_info() {}

void OAIZone_info::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_in_bundles_isSet = false;
    m_in_bundles_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIZone_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZone_info::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_in_bundles_isValid = ::OpenAPI::fromJsonValue(m_in_bundles, json[QString("in_bundles")]);
    m_in_bundles_isSet = !json[QString("in_bundles")].isNull() && m_in_bundles_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("includes")]);
    m_includes_isSet = !json[QString("includes")].isNull() && m_includes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIZone_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZone_info::asJsonObject() const {
    QJsonObject obj;
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_in_bundles.size() > 0) {
        obj.insert(QString("in_bundles"), ::OpenAPI::toJsonValue(m_in_bundles));
    }
    if (m_includes.size() > 0) {
        obj.insert(QString("includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QList<QString> OAIZone_info::getDescription() const {
    return m_description;
}
void OAIZone_info::setDescription(const QList<QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIZone_info::is_description_Set() const{
    return m_description_isSet;
}

bool OAIZone_info::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIZone_info::getInBundles() const {
    return m_in_bundles;
}
void OAIZone_info::setInBundles(const QList<QString> &in_bundles) {
    m_in_bundles = in_bundles;
    m_in_bundles_isSet = true;
}

bool OAIZone_info::is_in_bundles_Set() const{
    return m_in_bundles_isSet;
}

bool OAIZone_info::is_in_bundles_Valid() const{
    return m_in_bundles_isValid;
}

QList<QString> OAIZone_info::getIncludes() const {
    return m_includes;
}
void OAIZone_info::setIncludes(const QList<QString> &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIZone_info::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIZone_info::is_includes_Valid() const{
    return m_includes_isValid;
}

QString OAIZone_info::getType() const {
    return m_type;
}
void OAIZone_info::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIZone_info::is_type_Set() const{
    return m_type_isSet;
}

bool OAIZone_info::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIZone_info::getZone() const {
    return m_zone;
}
void OAIZone_info::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIZone_info::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIZone_info::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIZone_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_bundles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZone_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_zone_isValid && true;
}

} // namespace OpenAPI
