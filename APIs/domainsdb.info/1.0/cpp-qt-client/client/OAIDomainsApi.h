/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsApi_H
#define OAI_OAIDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISearch_Results.h"
#include "OAIUpdate_model.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsApi(const int timeOut = 0);
    ~OAIDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    */
    virtual void domainsTldZoneIdDownloadGet(const QString &zone_id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  is_dead bool [optional]
    * @param[in]  a QString [optional]
    * @param[in]  ns QString [optional]
    * @param[in]  cname QString [optional]
    * @param[in]  mx QString [optional]
    * @param[in]  txt QString [optional]
    */
    virtual void domainsTldZoneIdSearchGet(const QString &zone_id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_dead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &a = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mx = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &txt = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    */
    virtual void domainsUpdatesAddedDownloadGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void domainsUpdatesAddedGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    */
    virtual void domainsUpdatesDeletedDownloadGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void domainsUpdatesDeletedGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [optional]
    */
    virtual void domainsUpdatesListGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  zone QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  is_dead bool [optional]
    * @param[in]  a QString [optional]
    * @param[in]  ns QString [optional]
    * @param[in]  cname QString [optional]
    * @param[in]  mx QString [optional]
    * @param[in]  txt QString [optional]
    */
    virtual void getSearchDomainItem(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_dead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &a = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mx = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &txt = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  is_dead bool [optional]
    * @param[in]  a QString [optional]
    * @param[in]  ns QString [optional]
    * @param[in]  cname QString [optional]
    * @param[in]  mx QString [optional]
    * @param[in]  txt QString [optional]
    */
    virtual void getTldDomainItem(const QString &zone_id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_dead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &a = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mx = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &txt = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainsTldZoneIdDownloadGetCallback(OAIHttpRequestWorker *worker);
    void domainsTldZoneIdSearchGetCallback(OAIHttpRequestWorker *worker);
    void domainsUpdatesAddedDownloadGetCallback(OAIHttpRequestWorker *worker);
    void domainsUpdatesAddedGetCallback(OAIHttpRequestWorker *worker);
    void domainsUpdatesDeletedDownloadGetCallback(OAIHttpRequestWorker *worker);
    void domainsUpdatesDeletedGetCallback(OAIHttpRequestWorker *worker);
    void domainsUpdatesListGetCallback(OAIHttpRequestWorker *worker);
    void getSearchDomainItemCallback(OAIHttpRequestWorker *worker);
    void getTldDomainItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainsTldZoneIdDownloadGetSignal();
    void domainsTldZoneIdSearchGetSignal(OAISearch_Results summary);
    void domainsUpdatesAddedDownloadGetSignal();
    void domainsUpdatesAddedGetSignal(OAISearch_Results summary);
    void domainsUpdatesDeletedDownloadGetSignal();
    void domainsUpdatesDeletedGetSignal(OAISearch_Results summary);
    void domainsUpdatesListGetSignal(OAIUpdate_model summary);
    void getSearchDomainItemSignal(OAISearch_Results summary);
    void getTldDomainItemSignal(OAISearch_Results summary);


    void domainsTldZoneIdDownloadGetSignalFull(OAIHttpRequestWorker *worker);
    void domainsTldZoneIdSearchGetSignalFull(OAIHttpRequestWorker *worker, OAISearch_Results summary);
    void domainsUpdatesAddedDownloadGetSignalFull(OAIHttpRequestWorker *worker);
    void domainsUpdatesAddedGetSignalFull(OAIHttpRequestWorker *worker, OAISearch_Results summary);
    void domainsUpdatesDeletedDownloadGetSignalFull(OAIHttpRequestWorker *worker);
    void domainsUpdatesDeletedGetSignalFull(OAIHttpRequestWorker *worker, OAISearch_Results summary);
    void domainsUpdatesListGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdate_model summary);
    void getSearchDomainItemSignalFull(OAIHttpRequestWorker *worker, OAISearch_Results summary);
    void getTldDomainItemSignalFull(OAIHttpRequestWorker *worker, OAISearch_Results summary);

    Q_DECL_DEPRECATED_X("Use domainsTldZoneIdDownloadGetSignalError() instead")
    void domainsTldZoneIdDownloadGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsTldZoneIdDownloadGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsTldZoneIdSearchGetSignalError() instead")
    void domainsTldZoneIdSearchGetSignalE(OAISearch_Results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsTldZoneIdSearchGetSignalError(OAISearch_Results summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesAddedDownloadGetSignalError() instead")
    void domainsUpdatesAddedDownloadGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesAddedDownloadGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesAddedGetSignalError() instead")
    void domainsUpdatesAddedGetSignalE(OAISearch_Results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesAddedGetSignalError(OAISearch_Results summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesDeletedDownloadGetSignalError() instead")
    void domainsUpdatesDeletedDownloadGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesDeletedDownloadGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesDeletedGetSignalError() instead")
    void domainsUpdatesDeletedGetSignalE(OAISearch_Results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesDeletedGetSignalError(OAISearch_Results summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesListGetSignalError() instead")
    void domainsUpdatesListGetSignalE(OAIUpdate_model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesListGetSignalError(OAIUpdate_model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchDomainItemSignalError() instead")
    void getSearchDomainItemSignalE(OAISearch_Results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchDomainItemSignalError(OAISearch_Results summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTldDomainItemSignalError() instead")
    void getTldDomainItemSignalE(OAISearch_Results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTldDomainItemSignalError(OAISearch_Results summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainsTldZoneIdDownloadGetSignalErrorFull() instead")
    void domainsTldZoneIdDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsTldZoneIdDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsTldZoneIdSearchGetSignalErrorFull() instead")
    void domainsTldZoneIdSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsTldZoneIdSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesAddedDownloadGetSignalErrorFull() instead")
    void domainsUpdatesAddedDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesAddedDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesAddedGetSignalErrorFull() instead")
    void domainsUpdatesAddedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesAddedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesDeletedDownloadGetSignalErrorFull() instead")
    void domainsUpdatesDeletedDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesDeletedDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesDeletedGetSignalErrorFull() instead")
    void domainsUpdatesDeletedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesDeletedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdatesListGetSignalErrorFull() instead")
    void domainsUpdatesListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdatesListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchDomainItemSignalErrorFull() instead")
    void getSearchDomainItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchDomainItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTldDomainItemSignalErrorFull() instead")
    void getTldDomainItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTldDomainItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
