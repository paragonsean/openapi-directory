/**
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInfoApi_H
#define OAI_OAIInfoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Key_Info.h"
#include "OAIZone_info.h"
#include "OAIZone_stats.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInfoApi : public QObject {
    Q_OBJECT

public:
    OAIInfoApi(const int timeOut = 0);
    ~OAIInfoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [optional]
    */
    virtual void getApiInfoItem(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getStatisticsCollection(const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  zone QString [required]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getStatisticsItem(const QString &zone, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void infoTldGet();

    /**
    * @param[in]  zone QString [required]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void infoTldZoneGet(const QString &zone, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getApiInfoItemCallback(OAIHttpRequestWorker *worker);
    void getStatisticsCollectionCallback(OAIHttpRequestWorker *worker);
    void getStatisticsItemCallback(OAIHttpRequestWorker *worker);
    void infoTldGetCallback(OAIHttpRequestWorker *worker);
    void infoTldZoneGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getApiInfoItemSignal(OAIAPI_Key_Info summary);
    void getStatisticsCollectionSignal(QList<OAIZone_stats> summary);
    void getStatisticsItemSignal(OAIZone_stats summary);
    void infoTldGetSignal(QList<OAIZone_info> summary);
    void infoTldZoneGetSignal(OAIZone_info summary);


    void getApiInfoItemSignalFull(OAIHttpRequestWorker *worker, OAIAPI_Key_Info summary);
    void getStatisticsCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIZone_stats> summary);
    void getStatisticsItemSignalFull(OAIHttpRequestWorker *worker, OAIZone_stats summary);
    void infoTldGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIZone_info> summary);
    void infoTldZoneGetSignalFull(OAIHttpRequestWorker *worker, OAIZone_info summary);

    Q_DECL_DEPRECATED_X("Use getApiInfoItemSignalError() instead")
    void getApiInfoItemSignalE(OAIAPI_Key_Info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiInfoItemSignalError(OAIAPI_Key_Info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsCollectionSignalError() instead")
    void getStatisticsCollectionSignalE(QList<OAIZone_stats> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsCollectionSignalError(QList<OAIZone_stats> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsItemSignalError() instead")
    void getStatisticsItemSignalE(OAIZone_stats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsItemSignalError(OAIZone_stats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoTldGetSignalError() instead")
    void infoTldGetSignalE(QList<OAIZone_info> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infoTldGetSignalError(QList<OAIZone_info> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoTldZoneGetSignalError() instead")
    void infoTldZoneGetSignalE(OAIZone_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infoTldZoneGetSignalError(OAIZone_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getApiInfoItemSignalErrorFull() instead")
    void getApiInfoItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiInfoItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsCollectionSignalErrorFull() instead")
    void getStatisticsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsItemSignalErrorFull() instead")
    void getStatisticsItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoTldGetSignalErrorFull() instead")
    void infoTldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infoTldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoTldZoneGetSignalErrorFull() instead")
    void infoTldZoneGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infoTldZoneGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
