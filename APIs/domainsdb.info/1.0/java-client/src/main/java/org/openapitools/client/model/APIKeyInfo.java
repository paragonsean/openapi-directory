/*
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIKeyInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:48.794003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIKeyInfo {
  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customer_name";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private String expires;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_NAME = "item_name";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_LICENSE_LIMIT = "license_limit";
  @SerializedName(SERIALIZED_NAME_LICENSE_LIMIT)
  private String licenseLimit;

  public static final String SERIALIZED_NAME_PRICE_ID = "price_id";
  @SerializedName(SERIALIZED_NAME_PRICE_ID)
  private String priceId;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private String success;

  public APIKeyInfo() {
  }

  public APIKeyInfo customerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
    return this;
  }

  /**
   * State
   * @return customerEmail
   */
  @javax.annotation.Nullable
  public String getCustomerEmail() {
    return customerEmail;
  }

  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public APIKeyInfo customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  /**
   * State
   * @return customerName
   */
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }


  public APIKeyInfo expires(String expires) {
    this.expires = expires;
    return this;
  }

  /**
   * State
   * @return expires
   */
  @javax.annotation.Nullable
  public String getExpires() {
    return expires;
  }

  public void setExpires(String expires) {
    this.expires = expires;
  }


  public APIKeyInfo itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * State
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public APIKeyInfo itemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  /**
   * State
   * @return itemName
   */
  @javax.annotation.Nullable
  public String getItemName() {
    return itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }


  public APIKeyInfo license(String license) {
    this.license = license;
    return this;
  }

  /**
   * State
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public APIKeyInfo licenseLimit(String licenseLimit) {
    this.licenseLimit = licenseLimit;
    return this;
  }

  /**
   * State
   * @return licenseLimit
   */
  @javax.annotation.Nullable
  public String getLicenseLimit() {
    return licenseLimit;
  }

  public void setLicenseLimit(String licenseLimit) {
    this.licenseLimit = licenseLimit;
  }


  public APIKeyInfo priceId(String priceId) {
    this.priceId = priceId;
    return this;
  }

  /**
   * State
   * @return priceId
   */
  @javax.annotation.Nullable
  public String getPriceId() {
    return priceId;
  }

  public void setPriceId(String priceId) {
    this.priceId = priceId;
  }


  public APIKeyInfo success(String success) {
    this.success = success;
    return this;
  }

  /**
   * State
   * @return success
   */
  @javax.annotation.Nullable
  public String getSuccess() {
    return success;
  }

  public void setSuccess(String success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIKeyInfo apIKeyInfo = (APIKeyInfo) o;
    return Objects.equals(this.customerEmail, apIKeyInfo.customerEmail) &&
        Objects.equals(this.customerName, apIKeyInfo.customerName) &&
        Objects.equals(this.expires, apIKeyInfo.expires) &&
        Objects.equals(this.itemId, apIKeyInfo.itemId) &&
        Objects.equals(this.itemName, apIKeyInfo.itemName) &&
        Objects.equals(this.license, apIKeyInfo.license) &&
        Objects.equals(this.licenseLimit, apIKeyInfo.licenseLimit) &&
        Objects.equals(this.priceId, apIKeyInfo.priceId) &&
        Objects.equals(this.success, apIKeyInfo.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerEmail, customerName, expires, itemId, itemName, license, licenseLimit, priceId, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIKeyInfo {\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseLimit: ").append(toIndentedString(licenseLimit)).append("\n");
    sb.append("    priceId: ").append(toIndentedString(priceId)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_email");
    openapiFields.add("customer_name");
    openapiFields.add("expires");
    openapiFields.add("item_id");
    openapiFields.add("item_name");
    openapiFields.add("license");
    openapiFields.add("license_limit");
    openapiFields.add("price_id");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIKeyInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIKeyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIKeyInfo is not found in the empty JSON string", APIKeyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIKeyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIKeyInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
      if ((jsonObj.get("customer_name") != null && !jsonObj.get("customer_name").isJsonNull()) && !jsonObj.get("customer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_name").toString()));
      }
      if ((jsonObj.get("expires") != null && !jsonObj.get("expires").isJsonNull()) && !jsonObj.get("expires").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires").toString()));
      }
      if ((jsonObj.get("item_id") != null && !jsonObj.get("item_id").isJsonNull()) && !jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      if ((jsonObj.get("item_name") != null && !jsonObj.get("item_name").isJsonNull()) && !jsonObj.get("item_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_name").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("license_limit") != null && !jsonObj.get("license_limit").isJsonNull()) && !jsonObj.get("license_limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_limit").toString()));
      }
      if ((jsonObj.get("price_id") != null && !jsonObj.get("price_id").isJsonNull()) && !jsonObj.get("price_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_id").toString()));
      }
      if ((jsonObj.get("success") != null && !jsonObj.get("success").isJsonNull()) && !jsonObj.get("success").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIKeyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIKeyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIKeyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIKeyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<APIKeyInfo>() {
           @Override
           public void write(JsonWriter out, APIKeyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIKeyInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIKeyInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIKeyInfo
   * @throws IOException if the JSON string is invalid with respect to APIKeyInfo
   */
  public static APIKeyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIKeyInfo.class);
  }

  /**
   * Convert an instance of APIKeyInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

