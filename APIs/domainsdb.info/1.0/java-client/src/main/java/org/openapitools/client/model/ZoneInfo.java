/*
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZoneInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:48.794003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZoneInfo {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private List<String> description = new ArrayList<>();

  public static final String SERIALIZED_NAME_IN_BUNDLES = "in_bundles";
  @SerializedName(SERIALIZED_NAME_IN_BUNDLES)
  private List<String> inBundles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDES = "includes";
  @SerializedName(SERIALIZED_NAME_INCLUDES)
  private List<String> includes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public ZoneInfo() {
  }

  public ZoneInfo description(List<String> description) {
    this.description = description;
    return this;
  }

  public ZoneInfo addDescriptionItem(String descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public List<String> getDescription() {
    return description;
  }

  public void setDescription(List<String> description) {
    this.description = description;
  }


  public ZoneInfo inBundles(List<String> inBundles) {
    this.inBundles = inBundles;
    return this;
  }

  public ZoneInfo addInBundlesItem(String inBundlesItem) {
    if (this.inBundles == null) {
      this.inBundles = new ArrayList<>();
    }
    this.inBundles.add(inBundlesItem);
    return this;
  }

  /**
   * Get inBundles
   * @return inBundles
   */
  @javax.annotation.Nullable
  public List<String> getInBundles() {
    return inBundles;
  }

  public void setInBundles(List<String> inBundles) {
    this.inBundles = inBundles;
  }


  public ZoneInfo includes(List<String> includes) {
    this.includes = includes;
    return this;
  }

  public ZoneInfo addIncludesItem(String includesItem) {
    if (this.includes == null) {
      this.includes = new ArrayList<>();
    }
    this.includes.add(includesItem);
    return this;
  }

  /**
   * Get includes
   * @return includes
   */
  @javax.annotation.Nullable
  public List<String> getIncludes() {
    return includes;
  }

  public void setIncludes(List<String> includes) {
    this.includes = includes;
  }


  public ZoneInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * TLD type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ZoneInfo zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * TLD name
   * @return zone
   */
  @javax.annotation.Nonnull
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZoneInfo zoneInfo = (ZoneInfo) o;
    return Objects.equals(this.description, zoneInfo.description) &&
        Objects.equals(this.inBundles, zoneInfo.inBundles) &&
        Objects.equals(this.includes, zoneInfo.includes) &&
        Objects.equals(this.type, zoneInfo.type) &&
        Objects.equals(this.zone, zoneInfo.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, inBundles, includes, type, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZoneInfo {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inBundles: ").append(toIndentedString(inBundles)).append("\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("in_bundles");
    openapiFields.add("includes");
    openapiFields.add("type");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZoneInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZoneInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZoneInfo is not found in the empty JSON string", ZoneInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZoneInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZoneInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZoneInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be an array in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("in_bundles") != null && !jsonObj.get("in_bundles").isJsonNull() && !jsonObj.get("in_bundles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_bundles` to be an array in the JSON string but got `%s`", jsonObj.get("in_bundles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includes") != null && !jsonObj.get("includes").isJsonNull() && !jsonObj.get("includes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includes` to be an array in the JSON string but got `%s`", jsonObj.get("includes").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZoneInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZoneInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZoneInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZoneInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ZoneInfo>() {
           @Override
           public void write(JsonWriter out, ZoneInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZoneInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZoneInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZoneInfo
   * @throws IOException if the JSON string is invalid with respect to ZoneInfo
   */
  public static ZoneInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZoneInfo.class);
  }

  /**
   * Convert an instance of ZoneInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

