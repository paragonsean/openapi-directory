/*
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZoneStatistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:48.794003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZoneStatistics {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DEC = "dec";
  @SerializedName(SERIALIZED_NAME_DEC)
  private Integer dec;

  public static final String SERIALIZED_NAME_INC = "inc";
  @SerializedName(SERIALIZED_NAME_INC)
  private Integer inc;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public ZoneStatistics() {
  }

  public ZoneStatistics date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Report Date
   * @return date
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public ZoneStatistics dec(Integer dec) {
    this.dec = dec;
    return this;
  }

  /**
   * Increase
   * @return dec
   */
  @javax.annotation.Nonnull
  public Integer getDec() {
    return dec;
  }

  public void setDec(Integer dec) {
    this.dec = dec;
  }


  public ZoneStatistics inc(Integer inc) {
    this.inc = inc;
    return this;
  }

  /**
   * Decrease
   * @return inc
   */
  @javax.annotation.Nonnull
  public Integer getInc() {
    return inc;
  }

  public void setInc(Integer inc) {
    this.inc = inc;
  }


  public ZoneStatistics total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total number of records
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public ZoneStatistics zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * TLD name
   * @return zone
   */
  @javax.annotation.Nonnull
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZoneStatistics zoneStatistics = (ZoneStatistics) o;
    return Objects.equals(this.date, zoneStatistics.date) &&
        Objects.equals(this.dec, zoneStatistics.dec) &&
        Objects.equals(this.inc, zoneStatistics.inc) &&
        Objects.equals(this.total, zoneStatistics.total) &&
        Objects.equals(this.zone, zoneStatistics.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, dec, inc, total, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZoneStatistics {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dec: ").append(toIndentedString(dec)).append("\n");
    sb.append("    inc: ").append(toIndentedString(inc)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("dec");
    openapiFields.add("inc");
    openapiFields.add("total");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("dec");
    openapiRequiredFields.add("inc");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZoneStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZoneStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZoneStatistics is not found in the empty JSON string", ZoneStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZoneStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZoneStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZoneStatistics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZoneStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZoneStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZoneStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZoneStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<ZoneStatistics>() {
           @Override
           public void write(JsonWriter out, ZoneStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZoneStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZoneStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZoneStatistics
   * @throws IOException if the JSON string is invalid with respect to ZoneStatistics
   */
  public static ZoneStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZoneStatistics.class);
  }

  /**
   * Convert an instance of ZoneStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

