/*
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MXRecords;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Domains
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:48.794003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Domains {
  public static final String SERIALIZED_NAME_A = "A";
  @SerializedName(SERIALIZED_NAME_A)
  private List<String> A = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_N_A_M_E = "CNAME";
  @SerializedName(SERIALIZED_NAME_C_N_A_M_E)
  private List<String> CNAME = new ArrayList<>();

  public static final String SERIALIZED_NAME_M_X = "MX";
  @SerializedName(SERIALIZED_NAME_M_X)
  private List<MXRecords> MX = new ArrayList<>();

  public static final String SERIALIZED_NAME_N_S = "NS";
  @SerializedName(SERIALIZED_NAME_N_S)
  private List<String> NS = new ArrayList<>();

  public static final String SERIALIZED_NAME_T_X_T = "TXT";
  @SerializedName(SERIALIZED_NAME_T_X_T)
  private List<String> TXT = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREATE_DATE = "create_date";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_IS_DEAD = "isDead";
  @SerializedName(SERIALIZED_NAME_IS_DEAD)
  private String isDead;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "update_date";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public Domains() {
  }

  public Domains A(List<String> A) {
    this.A = A;
    return this;
  }

  public Domains addAItem(String AItem) {
    if (this.A == null) {
      this.A = new ArrayList<>();
    }
    this.A.add(AItem);
    return this;
  }

  /**
   * Get A
   * @return A
   */
  @javax.annotation.Nullable
  public List<String> getA() {
    return A;
  }

  public void setA(List<String> A) {
    this.A = A;
  }


  public Domains CNAME(List<String> CNAME) {
    this.CNAME = CNAME;
    return this;
  }

  public Domains addCNAMEItem(String CNAMEItem) {
    if (this.CNAME == null) {
      this.CNAME = new ArrayList<>();
    }
    this.CNAME.add(CNAMEItem);
    return this;
  }

  /**
   * Get CNAME
   * @return CNAME
   */
  @javax.annotation.Nullable
  public List<String> getCNAME() {
    return CNAME;
  }

  public void setCNAME(List<String> CNAME) {
    this.CNAME = CNAME;
  }


  public Domains MX(List<MXRecords> MX) {
    this.MX = MX;
    return this;
  }

  public Domains addMXItem(MXRecords MXItem) {
    if (this.MX == null) {
      this.MX = new ArrayList<>();
    }
    this.MX.add(MXItem);
    return this;
  }

  /**
   * Get MX
   * @return MX
   */
  @javax.annotation.Nullable
  public List<MXRecords> getMX() {
    return MX;
  }

  public void setMX(List<MXRecords> MX) {
    this.MX = MX;
  }


  public Domains NS(List<String> NS) {
    this.NS = NS;
    return this;
  }

  public Domains addNSItem(String NSItem) {
    if (this.NS == null) {
      this.NS = new ArrayList<>();
    }
    this.NS.add(NSItem);
    return this;
  }

  /**
   * Get NS
   * @return NS
   */
  @javax.annotation.Nullable
  public List<String> getNS() {
    return NS;
  }

  public void setNS(List<String> NS) {
    this.NS = NS;
  }


  public Domains TXT(List<String> TXT) {
    this.TXT = TXT;
    return this;
  }

  public Domains addTXTItem(String TXTItem) {
    if (this.TXT == null) {
      this.TXT = new ArrayList<>();
    }
    this.TXT.add(TXTItem);
    return this;
  }

  /**
   * Get TXT
   * @return TXT
   */
  @javax.annotation.Nullable
  public List<String> getTXT() {
    return TXT;
  }

  public void setTXT(List<String> TXT) {
    this.TXT = TXT;
  }


  public Domains country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Hosting Country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Domains createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Domain creation date
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public Domains domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain name
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Domains isDead(String isDead) {
    this.isDead = isDead;
    return this;
  }

  /**
   * If Domain is Dead
   * @return isDead
   */
  @javax.annotation.Nullable
  public String getIsDead() {
    return isDead;
  }

  public void setIsDead(String isDead) {
    this.isDead = isDead;
  }


  public Domains updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Domain last update date
   * @return updateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domains domains = (Domains) o;
    return Objects.equals(this.A, domains.A) &&
        Objects.equals(this.CNAME, domains.CNAME) &&
        Objects.equals(this.MX, domains.MX) &&
        Objects.equals(this.NS, domains.NS) &&
        Objects.equals(this.TXT, domains.TXT) &&
        Objects.equals(this.country, domains.country) &&
        Objects.equals(this.createDate, domains.createDate) &&
        Objects.equals(this.domain, domains.domain) &&
        Objects.equals(this.isDead, domains.isDead) &&
        Objects.equals(this.updateDate, domains.updateDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(A, CNAME, MX, NS, TXT, country, createDate, domain, isDead, updateDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domains {\n");
    sb.append("    A: ").append(toIndentedString(A)).append("\n");
    sb.append("    CNAME: ").append(toIndentedString(CNAME)).append("\n");
    sb.append("    MX: ").append(toIndentedString(MX)).append("\n");
    sb.append("    NS: ").append(toIndentedString(NS)).append("\n");
    sb.append("    TXT: ").append(toIndentedString(TXT)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    isDead: ").append(toIndentedString(isDead)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("A");
    openapiFields.add("CNAME");
    openapiFields.add("MX");
    openapiFields.add("NS");
    openapiFields.add("TXT");
    openapiFields.add("country");
    openapiFields.add("create_date");
    openapiFields.add("domain");
    openapiFields.add("isDead");
    openapiFields.add("update_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Domains
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Domains.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domains is not found in the empty JSON string", Domains.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Domains.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Domains` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("A") != null && !jsonObj.get("A").isJsonNull() && !jsonObj.get("A").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `A` to be an array in the JSON string but got `%s`", jsonObj.get("A").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CNAME") != null && !jsonObj.get("CNAME").isJsonNull() && !jsonObj.get("CNAME").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNAME` to be an array in the JSON string but got `%s`", jsonObj.get("CNAME").toString()));
      }
      if (jsonObj.get("MX") != null && !jsonObj.get("MX").isJsonNull()) {
        JsonArray jsonArrayMX = jsonObj.getAsJsonArray("MX");
        if (jsonArrayMX != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MX").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MX` to be an array in the JSON string but got `%s`", jsonObj.get("MX").toString()));
          }

          // validate the optional field `MX` (array)
          for (int i = 0; i < jsonArrayMX.size(); i++) {
            MXRecords.validateJsonElement(jsonArrayMX.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NS") != null && !jsonObj.get("NS").isJsonNull() && !jsonObj.get("NS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NS` to be an array in the JSON string but got `%s`", jsonObj.get("NS").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TXT") != null && !jsonObj.get("TXT").isJsonNull() && !jsonObj.get("TXT").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TXT` to be an array in the JSON string but got `%s`", jsonObj.get("TXT").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("isDead") != null && !jsonObj.get("isDead").isJsonNull()) && !jsonObj.get("isDead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isDead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isDead").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domains.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domains' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domains> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domains.class));

       return (TypeAdapter<T>) new TypeAdapter<Domains>() {
           @Override
           public void write(JsonWriter out, Domains value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Domains read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Domains given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Domains
   * @throws IOException if the JSON string is invalid with respect to Domains
   */
  public static Domains fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domains.class);
  }

  /**
   * Convert an instance of Domains to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

