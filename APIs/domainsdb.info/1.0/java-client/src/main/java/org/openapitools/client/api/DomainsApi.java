/*
 * Domains-Index API
 * Domains-Index database powered API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchResults;
import org.openapitools.client.model.UpdateModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainsTldZoneIdDownloadGet
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsTldZoneIdDownloadGetCall(String zoneId, String apiKey, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/tld/{zone_id}/download"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsTldZoneIdDownloadGetValidateBeforeCall(String zoneId, String apiKey, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling domainsTldZoneIdDownloadGet(Async)");
        }

        return domainsTldZoneIdDownloadGetCall(zoneId, apiKey, date, _callback);

    }

    /**
     * Download Whole Dataset for TLD
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public void domainsTldZoneIdDownloadGet(String zoneId, String apiKey, String date) throws ApiException {
        domainsTldZoneIdDownloadGetWithHttpInfo(zoneId, apiKey, date);
    }

    /**
     * Download Whole Dataset for TLD
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> domainsTldZoneIdDownloadGetWithHttpInfo(String zoneId, String apiKey, String date) throws ApiException {
        okhttp3.Call localVarCall = domainsTldZoneIdDownloadGetValidateBeforeCall(zoneId, apiKey, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Whole Dataset for TLD (asynchronously)
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsTldZoneIdDownloadGetAsync(String zoneId, String apiKey, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsTldZoneIdDownloadGetValidateBeforeCall(zoneId, apiKey, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsTldZoneIdSearchGet
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsTldZoneIdSearchGetCall(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/tld/{zone_id}/search"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (isDead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDead", isDead));
        }

        if (A != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("A", A));
        }

        if (NS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NS", NS));
        }

        if (CNAME != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CNAME", CNAME));
        }

        if (MX != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MX", MX));
        }

        if (TXT != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TXT", TXT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsTldZoneIdSearchGetValidateBeforeCall(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling domainsTldZoneIdSearchGet(Async)");
        }

        return domainsTldZoneIdSearchGetCall(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT, _callback);

    }

    /**
     * Domains Search for TLD
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults domainsTldZoneIdSearchGet(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT) throws ApiException {
        ApiResponse<SearchResults> localVarResp = domainsTldZoneIdSearchGetWithHttpInfo(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT);
        return localVarResp.getData();
    }

    /**
     * Domains Search for TLD
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> domainsTldZoneIdSearchGetWithHttpInfo(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT) throws ApiException {
        okhttp3.Call localVarCall = domainsTldZoneIdSearchGetValidateBeforeCall(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Domains Search for TLD (asynchronously)
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsTldZoneIdSearchGetAsync(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsTldZoneIdSearchGetValidateBeforeCall(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdatesAddedDownloadGet
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesAddedDownloadGetCall(String apiKey, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/updates/added/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdatesAddedDownloadGetValidateBeforeCall(String apiKey, String date, final ApiCallback _callback) throws ApiException {
        return domainsUpdatesAddedDownloadGetCall(apiKey, date, _callback);

    }

    /**
     * Download added domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public void domainsUpdatesAddedDownloadGet(String apiKey, String date) throws ApiException {
        domainsUpdatesAddedDownloadGetWithHttpInfo(apiKey, date);
    }

    /**
     * Download added domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> domainsUpdatesAddedDownloadGetWithHttpInfo(String apiKey, String date) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdatesAddedDownloadGetValidateBeforeCall(apiKey, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download added domains, latest if date not specified (asynchronously)
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesAddedDownloadGetAsync(String apiKey, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdatesAddedDownloadGetValidateBeforeCall(apiKey, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdatesAddedGet
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesAddedGetCall(String apiKey, String date, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/updates/added";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdatesAddedGetValidateBeforeCall(String apiKey, String date, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        return domainsUpdatesAddedGetCall(apiKey, date, page, limit, _callback);

    }

    /**
     * Get added domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults domainsUpdatesAddedGet(String apiKey, String date, String page, Integer limit) throws ApiException {
        ApiResponse<SearchResults> localVarResp = domainsUpdatesAddedGetWithHttpInfo(apiKey, date, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get added domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> domainsUpdatesAddedGetWithHttpInfo(String apiKey, String date, String page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdatesAddedGetValidateBeforeCall(apiKey, date, page, limit, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get added domains, latest if date not specified (asynchronously)
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesAddedGetAsync(String apiKey, String date, String page, Integer limit, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdatesAddedGetValidateBeforeCall(apiKey, date, page, limit, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdatesDeletedDownloadGet
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesDeletedDownloadGetCall(String apiKey, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/updates/deleted/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdatesDeletedDownloadGetValidateBeforeCall(String apiKey, String date, final ApiCallback _callback) throws ApiException {
        return domainsUpdatesDeletedDownloadGetCall(apiKey, date, _callback);

    }

    /**
     * Download deleted domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public void domainsUpdatesDeletedDownloadGet(String apiKey, String date) throws ApiException {
        domainsUpdatesDeletedDownloadGetWithHttpInfo(apiKey, date);
    }

    /**
     * Download deleted domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> domainsUpdatesDeletedDownloadGetWithHttpInfo(String apiKey, String date) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdatesDeletedDownloadGetValidateBeforeCall(apiKey, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download deleted domains, latest if date not specified (asynchronously)
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesDeletedDownloadGetAsync(String apiKey, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdatesDeletedDownloadGetValidateBeforeCall(apiKey, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdatesDeletedGet
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesDeletedGetCall(String apiKey, String date, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/updates/deleted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdatesDeletedGetValidateBeforeCall(String apiKey, String date, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        return domainsUpdatesDeletedGetCall(apiKey, date, page, limit, _callback);

    }

    /**
     * Get deleted domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults domainsUpdatesDeletedGet(String apiKey, String date, String page, Integer limit) throws ApiException {
        ApiResponse<SearchResults> localVarResp = domainsUpdatesDeletedGetWithHttpInfo(apiKey, date, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get deleted domains, latest if date not specified
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> domainsUpdatesDeletedGetWithHttpInfo(String apiKey, String date, String page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdatesDeletedGetValidateBeforeCall(apiKey, date, page, limit, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deleted domains, latest if date not specified (asynchronously)
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesDeletedGetAsync(String apiKey, String date, String page, Integer limit, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdatesDeletedGetValidateBeforeCall(apiKey, date, page, limit, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdatesListGet
     * @param apiKey API key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesListGetCall(String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/updates/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdatesListGetValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        return domainsUpdatesListGetCall(apiKey, _callback);

    }

    /**
     * List of updates
     * 
     * @param apiKey API key (optional)
     * @return UpdateModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateModel domainsUpdatesListGet(String apiKey) throws ApiException {
        ApiResponse<UpdateModel> localVarResp = domainsUpdatesListGetWithHttpInfo(apiKey);
        return localVarResp.getData();
    }

    /**
     * List of updates
     * 
     * @param apiKey API key (optional)
     * @return ApiResponse&lt;UpdateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateModel> domainsUpdatesListGetWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdatesListGetValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<UpdateModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of updates (asynchronously)
     * 
     * @param apiKey API key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdatesListGetAsync(String apiKey, final ApiCallback<UpdateModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdatesListGetValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<UpdateModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchDomainItem
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param zone In Zone (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> api_key is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchDomainItemCall(String apiKey, String date, String page, Integer limit, String domain, String zone, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (zone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone", zone));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (isDead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDead", isDead));
        }

        if (A != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("A", A));
        }

        if (NS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NS", NS));
        }

        if (CNAME != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CNAME", CNAME));
        }

        if (MX != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MX", MX));
        }

        if (TXT != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TXT", TXT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchDomainItemValidateBeforeCall(String apiKey, String date, String page, Integer limit, String domain, String zone, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback _callback) throws ApiException {
        return getSearchDomainItemCall(apiKey, date, page, limit, domain, zone, country, isDead, A, NS, CNAME, MX, TXT, _callback);

    }

    /**
     * Domains Database Search
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param zone In Zone (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> api_key is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getSearchDomainItem(String apiKey, String date, String page, Integer limit, String domain, String zone, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getSearchDomainItemWithHttpInfo(apiKey, date, page, limit, domain, zone, country, isDead, A, NS, CNAME, MX, TXT);
        return localVarResp.getData();
    }

    /**
     * Domains Database Search
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param zone In Zone (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> api_key is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getSearchDomainItemWithHttpInfo(String apiKey, String date, String page, Integer limit, String domain, String zone, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT) throws ApiException {
        okhttp3.Call localVarCall = getSearchDomainItemValidateBeforeCall(apiKey, date, page, limit, domain, zone, country, isDead, A, NS, CNAME, MX, TXT, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Domains Database Search (asynchronously)
     * 
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param zone In Zone (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> api_key is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchDomainItemAsync(String apiKey, String date, String page, Integer limit, String domain, String zone, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchDomainItemValidateBeforeCall(apiKey, date, page, limit, domain, zone, country, isDead, A, NS, CNAME, MX, TXT, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTldDomainItem
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTldDomainItemCall(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/tld/{zone_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (isDead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDead", isDead));
        }

        if (A != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("A", A));
        }

        if (NS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NS", NS));
        }

        if (CNAME != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CNAME", CNAME));
        }

        if (MX != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MX", MX));
        }

        if (TXT != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TXT", TXT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTldDomainItemValidateBeforeCall(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getTldDomainItem(Async)");
        }

        return getTldDomainItemCall(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT, _callback);

    }

    /**
     * Get TLD records
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getTldDomainItem(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getTldDomainItemWithHttpInfo(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT);
        return localVarResp.getData();
    }

    /**
     * Get TLD records
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getTldDomainItemWithHttpInfo(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT) throws ApiException {
        okhttp3.Call localVarCall = getTldDomainItemValidateBeforeCall(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLD records (asynchronously)
     * 
     * @param zoneId  (required)
     * @param apiKey API key (optional)
     * @param date Request date (optional)
     * @param page Search page to request (optional)
     * @param limit Results per page (optional, default to 50)
     * @param domain Domain includes (optional)
     * @param country Hosting Country (optional)
     * @param isDead Dead or Not, default not (optional)
     * @param A A record includes (optional)
     * @param NS NS record includes (optional)
     * @param CNAME CNAME record includes (optional)
     * @param MX MX record includes (optional)
     * @param TXT TXT record includes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No api_key or it&#39;s not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Results not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTldDomainItemAsync(String zoneId, String apiKey, String date, String page, Integer limit, String domain, String country, Boolean isDead, String A, String NS, String CNAME, String MX, String TXT, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTldDomainItemValidateBeforeCall(zoneId, apiKey, date, page, limit, domain, country, isDead, A, NS, CNAME, MX, TXT, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
