/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFull_comparison_test.h"
#include "OAISingle_comparison_test.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  target_screenshot_test_id qint32 [required]
    * @param[in]  target_version_id qint32 [required]
    * @param[in]  base_result_id qint32 [required]
    * @param[in]  format QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tolerance double [optional]
    */
    virtual void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(const qint32 &target_screenshot_test_id, const qint32 &target_version_id, const qint32 &base_result_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &tolerance = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  target_screenshot_test_id qint32 [required]
    * @param[in]  target_version_id qint32 [required]
    * @param[in]  base_version_id qint32 [required]
    * @param[in]  format QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tolerance double [optional]
    */
    virtual void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(const qint32 &target_screenshot_test_id, const qint32 &target_version_id, const qint32 &base_version_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &tolerance = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  target_screenshot_test_id qint32 [required]
    * @param[in]  target_version_id qint32 [required]
    * @param[in]  target_result_id qint32 [required]
    * @param[in]  base_result_id qint32 [required]
    * @param[in]  format QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tolerance double [optional]
    */
    virtual void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(const qint32 &target_screenshot_test_id, const qint32 &target_version_id, const qint32 &target_result_id, const qint32 &base_result_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &tolerance = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetCallback(OAIHttpRequestWorker *worker);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetCallback(OAIHttpRequestWorker *worker);
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignal(OAIFull_comparison_test summary);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignal(QList<OAISingle_comparison_test> summary);
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignal(OAISingle_comparison_test summary);


    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalFull(OAIHttpRequestWorker *worker, OAIFull_comparison_test summary);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISingle_comparison_test> summary);
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalFull(OAIHttpRequestWorker *worker, OAISingle_comparison_test summary);

    Q_DECL_DEPRECATED_X("Use screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalError() instead")
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalE(OAIFull_comparison_test summary, QNetworkReply::NetworkError error_type, QString error_str);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalError(OAIFull_comparison_test summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalError() instead")
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalE(QList<OAISingle_comparison_test> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalError(QList<OAISingle_comparison_test> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalError() instead")
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalE(OAISingle_comparison_test summary, QNetworkReply::NetworkError error_type, QString error_str);
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalError(OAISingle_comparison_test summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalErrorFull() instead")
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalErrorFull() instead")
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalErrorFull() instead")
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
