/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElement::OAIElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElement::OAIElement() {
    this->initializeModel();
}

OAIElement::~OAIElement() {}

void OAIElement::initializeModel() {

    m_difference_isSet = false;
    m_difference_isValid = false;

    m_full_path_isSet = false;
    m_full_path_isValid = false;

    m_short_path_isSet = false;
    m_short_path_isValid = false;

    m_show_difference_public_url_isSet = false;
    m_show_difference_public_url_isValid = false;

    m_show_difference_web_url_isSet = false;
    m_show_difference_web_url_isValid = false;
}

void OAIElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElement::fromJsonObject(QJsonObject json) {

    m_difference_isValid = ::OpenAPI::fromJsonValue(m_difference, json[QString("difference")]);
    m_difference_isSet = !json[QString("difference")].isNull() && m_difference_isValid;

    m_full_path_isValid = ::OpenAPI::fromJsonValue(m_full_path, json[QString("full_path")]);
    m_full_path_isSet = !json[QString("full_path")].isNull() && m_full_path_isValid;

    m_short_path_isValid = ::OpenAPI::fromJsonValue(m_short_path, json[QString("short_path")]);
    m_short_path_isSet = !json[QString("short_path")].isNull() && m_short_path_isValid;

    m_show_difference_public_url_isValid = ::OpenAPI::fromJsonValue(m_show_difference_public_url, json[QString("show_difference_public_url")]);
    m_show_difference_public_url_isSet = !json[QString("show_difference_public_url")].isNull() && m_show_difference_public_url_isValid;

    m_show_difference_web_url_isValid = ::OpenAPI::fromJsonValue(m_show_difference_web_url, json[QString("show_difference_web_url")]);
    m_show_difference_web_url_isSet = !json[QString("show_difference_web_url")].isNull() && m_show_difference_web_url_isValid;
}

QString OAIElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElement::asJsonObject() const {
    QJsonObject obj;
    if (m_difference_isSet) {
        obj.insert(QString("difference"), ::OpenAPI::toJsonValue(m_difference));
    }
    if (m_full_path_isSet) {
        obj.insert(QString("full_path"), ::OpenAPI::toJsonValue(m_full_path));
    }
    if (m_short_path_isSet) {
        obj.insert(QString("short_path"), ::OpenAPI::toJsonValue(m_short_path));
    }
    if (m_show_difference_public_url_isSet) {
        obj.insert(QString("show_difference_public_url"), ::OpenAPI::toJsonValue(m_show_difference_public_url));
    }
    if (m_show_difference_web_url_isSet) {
        obj.insert(QString("show_difference_web_url"), ::OpenAPI::toJsonValue(m_show_difference_web_url));
    }
    return obj;
}

QString OAIElement::getDifference() const {
    return m_difference;
}
void OAIElement::setDifference(const QString &difference) {
    m_difference = difference;
    m_difference_isSet = true;
}

bool OAIElement::is_difference_Set() const{
    return m_difference_isSet;
}

bool OAIElement::is_difference_Valid() const{
    return m_difference_isValid;
}

QString OAIElement::getFullPath() const {
    return m_full_path;
}
void OAIElement::setFullPath(const QString &full_path) {
    m_full_path = full_path;
    m_full_path_isSet = true;
}

bool OAIElement::is_full_path_Set() const{
    return m_full_path_isSet;
}

bool OAIElement::is_full_path_Valid() const{
    return m_full_path_isValid;
}

QString OAIElement::getShortPath() const {
    return m_short_path;
}
void OAIElement::setShortPath(const QString &short_path) {
    m_short_path = short_path;
    m_short_path_isSet = true;
}

bool OAIElement::is_short_path_Set() const{
    return m_short_path_isSet;
}

bool OAIElement::is_short_path_Valid() const{
    return m_short_path_isValid;
}

QString OAIElement::getShowDifferencePublicUrl() const {
    return m_show_difference_public_url;
}
void OAIElement::setShowDifferencePublicUrl(const QString &show_difference_public_url) {
    m_show_difference_public_url = show_difference_public_url;
    m_show_difference_public_url_isSet = true;
}

bool OAIElement::is_show_difference_public_url_Set() const{
    return m_show_difference_public_url_isSet;
}

bool OAIElement::is_show_difference_public_url_Valid() const{
    return m_show_difference_public_url_isValid;
}

QString OAIElement::getShowDifferenceWebUrl() const {
    return m_show_difference_web_url;
}
void OAIElement::setShowDifferenceWebUrl(const QString &show_difference_web_url) {
    m_show_difference_web_url = show_difference_web_url;
    m_show_difference_web_url_isSet = true;
}

bool OAIElement::is_show_difference_web_url_Set() const{
    return m_show_difference_web_url_isSet;
}

bool OAIElement::is_show_difference_web_url_Valid() const{
    return m_show_difference_web_url_isValid;
}

bool OAIElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_difference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_difference_public_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_difference_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
