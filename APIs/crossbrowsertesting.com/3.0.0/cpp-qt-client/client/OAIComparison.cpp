/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComparison::OAIComparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComparison::OAIComparison() {
    this->initializeModel();
}

OAIComparison::~OAIComparison() {}

void OAIComparison::initializeModel() {

    m_differences_isSet = false;
    m_differences_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_show_comparisons_public_url_isSet = false;
    m_show_comparisons_public_url_isValid = false;

    m_show_comparisons_web_url_isSet = false;
    m_show_comparisons_web_url_isValid = false;

    m_tolerance_isSet = false;
    m_tolerance_isValid = false;
}

void OAIComparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComparison::fromJsonObject(QJsonObject json) {

    m_differences_isValid = ::OpenAPI::fromJsonValue(m_differences, json[QString("differences")]);
    m_differences_isSet = !json[QString("differences")].isNull() && m_differences_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_show_comparisons_public_url_isValid = ::OpenAPI::fromJsonValue(m_show_comparisons_public_url, json[QString("show_comparisons_public_url")]);
    m_show_comparisons_public_url_isSet = !json[QString("show_comparisons_public_url")].isNull() && m_show_comparisons_public_url_isValid;

    m_show_comparisons_web_url_isValid = ::OpenAPI::fromJsonValue(m_show_comparisons_web_url, json[QString("show_comparisons_web_url")]);
    m_show_comparisons_web_url_isSet = !json[QString("show_comparisons_web_url")].isNull() && m_show_comparisons_web_url_isValid;

    m_tolerance_isValid = ::OpenAPI::fromJsonValue(m_tolerance, json[QString("tolerance")]);
    m_tolerance_isSet = !json[QString("tolerance")].isNull() && m_tolerance_isValid;
}

QString OAIComparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComparison::asJsonObject() const {
    QJsonObject obj;
    if (m_differences_isSet) {
        obj.insert(QString("differences"), ::OpenAPI::toJsonValue(m_differences));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_show_comparisons_public_url_isSet) {
        obj.insert(QString("show_comparisons_public_url"), ::OpenAPI::toJsonValue(m_show_comparisons_public_url));
    }
    if (m_show_comparisons_web_url_isSet) {
        obj.insert(QString("show_comparisons_web_url"), ::OpenAPI::toJsonValue(m_show_comparisons_web_url));
    }
    if (m_tolerance_isSet) {
        obj.insert(QString("tolerance"), ::OpenAPI::toJsonValue(m_tolerance));
    }
    return obj;
}

qint32 OAIComparison::getDifferences() const {
    return m_differences;
}
void OAIComparison::setDifferences(const qint32 &differences) {
    m_differences = differences;
    m_differences_isSet = true;
}

bool OAIComparison::is_differences_Set() const{
    return m_differences_isSet;
}

bool OAIComparison::is_differences_Valid() const{
    return m_differences_isValid;
}

QList<OAIElement> OAIComparison::getElements() const {
    return m_elements;
}
void OAIComparison::setElements(const QList<OAIElement> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIComparison::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIComparison::is_elements_Valid() const{
    return m_elements_isValid;
}

bool OAIComparison::isError() const {
    return m_error;
}
void OAIComparison::setError(const bool &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIComparison::is_error_Set() const{
    return m_error_isSet;
}

bool OAIComparison::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIComparison::getMessage() const {
    return m_message;
}
void OAIComparison::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIComparison::is_message_Set() const{
    return m_message_isSet;
}

bool OAIComparison::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIComparison::getShowComparisonsPublicUrl() const {
    return m_show_comparisons_public_url;
}
void OAIComparison::setShowComparisonsPublicUrl(const QString &show_comparisons_public_url) {
    m_show_comparisons_public_url = show_comparisons_public_url;
    m_show_comparisons_public_url_isSet = true;
}

bool OAIComparison::is_show_comparisons_public_url_Set() const{
    return m_show_comparisons_public_url_isSet;
}

bool OAIComparison::is_show_comparisons_public_url_Valid() const{
    return m_show_comparisons_public_url_isValid;
}

QString OAIComparison::getShowComparisonsWebUrl() const {
    return m_show_comparisons_web_url;
}
void OAIComparison::setShowComparisonsWebUrl(const QString &show_comparisons_web_url) {
    m_show_comparisons_web_url = show_comparisons_web_url;
    m_show_comparisons_web_url_isSet = true;
}

bool OAIComparison::is_show_comparisons_web_url_Set() const{
    return m_show_comparisons_web_url_isSet;
}

bool OAIComparison::is_show_comparisons_web_url_Valid() const{
    return m_show_comparisons_web_url_isValid;
}

qint32 OAIComparison::getTolerance() const {
    return m_tolerance;
}
void OAIComparison::setTolerance(const qint32 &tolerance) {
    m_tolerance = tolerance;
    m_tolerance_isSet = true;
}

bool OAIComparison::is_tolerance_Set() const{
    return m_tolerance_isSet;
}

bool OAIComparison::is_tolerance_Valid() const{
    return m_tolerance_isValid;
}

bool OAIComparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_differences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_comparisons_public_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_comparisons_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
