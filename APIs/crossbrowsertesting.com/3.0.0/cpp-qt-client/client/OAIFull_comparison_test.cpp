/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFull_comparison_test.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFull_comparison_test::OAIFull_comparison_test(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFull_comparison_test::OAIFull_comparison_test() {
    this->initializeModel();
}

OAIFull_comparison_test::~OAIFull_comparison_test() {}

void OAIFull_comparison_test::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIFull_comparison_test::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFull_comparison_test::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAIFull_comparison_test::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFull_comparison_test::asJsonObject() const {
    QJsonObject obj;
    if (m_base.isSet()) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

OAIFull_comparison_test_base OAIFull_comparison_test::getBase() const {
    return m_base;
}
void OAIFull_comparison_test::setBase(const OAIFull_comparison_test_base &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIFull_comparison_test::is_base_Set() const{
    return m_base_isSet;
}

bool OAIFull_comparison_test::is_base_Valid() const{
    return m_base_isValid;
}

QList<OAITarget> OAIFull_comparison_test::getTargets() const {
    return m_targets;
}
void OAIFull_comparison_test::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIFull_comparison_test::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIFull_comparison_test::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIFull_comparison_test::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFull_comparison_test::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
