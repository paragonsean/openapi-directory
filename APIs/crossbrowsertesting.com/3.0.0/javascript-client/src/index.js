/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Comparison from './model/Comparison';
import Element from './model/Element';
import FullComparisonTest from './model/FullComparisonTest';
import FullComparisonTestBase from './model/FullComparisonTestBase';
import Screenshot from './model/Screenshot';
import SingleComparisonTest from './model/SingleComparisonTest';
import Target from './model/Target';
import DefaultApi from './api/DefaultApi';


/**
* What&#39;s in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CrossbrowsertestingComScreenshotComparisonsApi = require('index'); // See note below*.
* var xxxSvc = new CrossbrowsertestingComScreenshotComparisonsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CrossbrowsertestingComScreenshotComparisonsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CrossbrowsertestingComScreenshotComparisonsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CrossbrowsertestingComScreenshotComparisonsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Comparison model constructor.
     * @property {module:model/Comparison}
     */
    Comparison,

    /**
     * The Element model constructor.
     * @property {module:model/Element}
     */
    Element,

    /**
     * The FullComparisonTest model constructor.
     * @property {module:model/FullComparisonTest}
     */
    FullComparisonTest,

    /**
     * The FullComparisonTestBase model constructor.
     * @property {module:model/FullComparisonTestBase}
     */
    FullComparisonTestBase,

    /**
     * The Screenshot model constructor.
     * @property {module:model/Screenshot}
     */
    Screenshot,

    /**
     * The SingleComparisonTest model constructor.
     * @property {module:model/SingleComparisonTest}
     */
    SingleComparisonTest,

    /**
     * The Target model constructor.
     * @property {module:model/Target}
     */
    Target,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
