/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FullComparisonTest from '../model/FullComparisonTest';
import SingleComparisonTest from '../model/SingleComparisonTest';

/**
* Default service.
* @module api/DefaultApi
* @version 3.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet operation.
     * @callback module:api/DefaultApi~screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullComparisonTest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare Full Screenshot Test
     * Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
     * @param {Number} targetScreenshotTestId test id of the target Screenshot Test
     * @param {Number} targetVersionId version id of the target Screenshot Test
     * @param {Number} baseResultId result id of the base Screenshot Test
     * @param {Object} opts Optional parameters
     * @param {String} [format = 'json')] The format of the returned data. Possible values are \"json\" or \"jsonp\".
     * @param {String} [callback] Name of callback method for JSONP requests.
     * @param {Number} [tolerance = 30)] Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences.
     * @param {module:api/DefaultApi~screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullComparisonTest}
     */
    screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(targetScreenshotTestId, targetVersionId, baseResultId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetScreenshotTestId' is set
      if (targetScreenshotTestId === undefined || targetScreenshotTestId === null) {
        throw new Error("Missing the required parameter 'targetScreenshotTestId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet");
      }
      // verify the required parameter 'targetVersionId' is set
      if (targetVersionId === undefined || targetVersionId === null) {
        throw new Error("Missing the required parameter 'targetVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet");
      }
      // verify the required parameter 'baseResultId' is set
      if (baseResultId === undefined || baseResultId === null) {
        throw new Error("Missing the required parameter 'baseResultId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet");
      }

      let pathParams = {
        'target_screenshot_test_id': targetScreenshotTestId,
        'target_version_id': targetVersionId,
        'base_result_id': baseResultId
      };
      let queryParams = {
        'format': opts['format'],
        'callback': opts['callback'],
        'tolerance': opts['tolerance']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullComparisonTest;
      return this.apiClient.callApi(
        '/screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/{base_result_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet operation.
     * @callback module:api/DefaultApi~screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SingleComparisonTest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare Screenshot Test Versions
     * Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you've run a screenshot test against a set of browsers that is \"good\". Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
     * @param {Number} targetScreenshotTestId test id of the target Screenshot Test
     * @param {Number} targetVersionId version id of the target Screenshot Test
     * @param {Number} baseVersionId version id of the base Screenshot Test
     * @param {Object} opts Optional parameters
     * @param {String} [format = 'json')] The format of the returned data. Possible values are \"json\" or \"jsonp\".
     * @param {String} [callback] Name of callback method for JSONP requests.
     * @param {Number} [tolerance = 30)] Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences.
     * @param {module:api/DefaultApi~screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SingleComparisonTest>}
     */
    screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(targetScreenshotTestId, targetVersionId, baseVersionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetScreenshotTestId' is set
      if (targetScreenshotTestId === undefined || targetScreenshotTestId === null) {
        throw new Error("Missing the required parameter 'targetScreenshotTestId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet");
      }
      // verify the required parameter 'targetVersionId' is set
      if (targetVersionId === undefined || targetVersionId === null) {
        throw new Error("Missing the required parameter 'targetVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet");
      }
      // verify the required parameter 'baseVersionId' is set
      if (baseVersionId === undefined || baseVersionId === null) {
        throw new Error("Missing the required parameter 'baseVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet");
      }

      let pathParams = {
        'target_screenshot_test_id': targetScreenshotTestId,
        'target_version_id': targetVersionId,
        'base_version_id': baseVersionId
      };
      let queryParams = {
        'format': opts['format'],
        'callback': opts['callback'],
        'tolerance': opts['tolerance']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SingleComparisonTest];
      return this.apiClient.callApi(
        '/screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/parallel/{base_version_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet operation.
     * @callback module:api/DefaultApi~screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleComparisonTest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare Single Screenshot
     * Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
     * @param {Number} targetScreenshotTestId test id of the target Screenshot Test
     * @param {Number} targetVersionId version id of the target Screenshot Test
     * @param {Number} targetResultId result id of the target Screenshot Test
     * @param {Number} baseResultId result id of the base Screenshot Test
     * @param {Object} opts Optional parameters
     * @param {String} [format = 'json')] The format of the returned data. Possible values are \"json\" or \"jsonp\".
     * @param {String} [callback] Name of callback method for JSONP requests.
     * @param {Number} [tolerance = 30)] Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences.
     * @param {module:api/DefaultApi~screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleComparisonTest}
     */
    screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(targetScreenshotTestId, targetVersionId, targetResultId, baseResultId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetScreenshotTestId' is set
      if (targetScreenshotTestId === undefined || targetScreenshotTestId === null) {
        throw new Error("Missing the required parameter 'targetScreenshotTestId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet");
      }
      // verify the required parameter 'targetVersionId' is set
      if (targetVersionId === undefined || targetVersionId === null) {
        throw new Error("Missing the required parameter 'targetVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet");
      }
      // verify the required parameter 'targetResultId' is set
      if (targetResultId === undefined || targetResultId === null) {
        throw new Error("Missing the required parameter 'targetResultId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet");
      }
      // verify the required parameter 'baseResultId' is set
      if (baseResultId === undefined || baseResultId === null) {
        throw new Error("Missing the required parameter 'baseResultId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet");
      }

      let pathParams = {
        'target_screenshot_test_id': targetScreenshotTestId,
        'target_version_id': targetVersionId,
        'target_result_id': targetResultId,
        'base_result_id': baseResultId
      };
      let queryParams = {
        'format': opts['format'],
        'callback': opts['callback'],
        'tolerance': opts['tolerance']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SingleComparisonTest;
      return this.apiClient.callApi(
        '/screenshots/{target_screenshot_test_id}/{target_version_id}/{target_result_id}/comparison/{base_result_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
