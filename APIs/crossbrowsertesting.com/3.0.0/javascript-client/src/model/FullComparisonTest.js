/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FullComparisonTestBase from './FullComparisonTestBase';
import Target from './Target';

/**
 * The FullComparisonTest model module.
 * @module model/FullComparisonTest
 * @version 3.0.0
 */
class FullComparisonTest {
    /**
     * Constructs a new <code>FullComparisonTest</code>.
     * @alias module:model/FullComparisonTest
     */
    constructor() { 
        
        FullComparisonTest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FullComparisonTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FullComparisonTest} obj Optional instance to populate.
     * @return {module:model/FullComparisonTest} The populated <code>FullComparisonTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FullComparisonTest();

            if (data.hasOwnProperty('base')) {
                obj['base'] = FullComparisonTestBase.constructFromObject(data['base']);
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [Target]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FullComparisonTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FullComparisonTest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `base`
        if (data['base']) { // data not null
          FullComparisonTestBase.validateJSON(data['base']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                Target.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/FullComparisonTestBase} base
 */
FullComparisonTest.prototype['base'] = undefined;

/**
 * @member {Array.<module:model/Target>} targets
 */
FullComparisonTest.prototype['targets'] = undefined;






export default FullComparisonTest;

