/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comparison from './Comparison';
import Screenshot from './Screenshot';

/**
 * The Target model module.
 * @module model/Target
 * @version 3.0.0
 */
class Target {
    /**
     * Constructs a new <code>Target</code>.
     * @alias module:model/Target
     */
    constructor() { 
        
        Target.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Target</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Target} obj Optional instance to populate.
     * @return {module:model/Target} The populated <code>Target</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Target();

            if (data.hasOwnProperty('comparison')) {
                obj['comparison'] = Comparison.constructFromObject(data['comparison']);
            }
            if (data.hasOwnProperty('screenshot')) {
                obj['screenshot'] = Screenshot.constructFromObject(data['screenshot']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Target</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Target</code>.
     */
    static validateJSON(data) {
        // validate the optional field `comparison`
        if (data['comparison']) { // data not null
          Comparison.validateJSON(data['comparison']);
        }
        // validate the optional field `screenshot`
        if (data['screenshot']) { // data not null
          Screenshot.validateJSON(data['screenshot']);
        }

        return true;
    }


}



/**
 * @member {module:model/Comparison} comparison
 */
Target.prototype['comparison'] = undefined;

/**
 * @member {module:model/Screenshot} screenshot
 */
Target.prototype['screenshot'] = undefined;






export default Target;

