/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Element model module.
 * @module model/Element
 * @version 3.0.0
 */
class Element {
    /**
     * Constructs a new <code>Element</code>.
     * @alias module:model/Element
     */
    constructor() { 
        
        Element.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Element</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Element} obj Optional instance to populate.
     * @return {module:model/Element} The populated <code>Element</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Element();

            if (data.hasOwnProperty('difference')) {
                obj['difference'] = ApiClient.convertToType(data['difference'], 'String');
            }
            if (data.hasOwnProperty('full_path')) {
                obj['full_path'] = ApiClient.convertToType(data['full_path'], 'String');
            }
            if (data.hasOwnProperty('short_path')) {
                obj['short_path'] = ApiClient.convertToType(data['short_path'], 'String');
            }
            if (data.hasOwnProperty('show_difference_public_url')) {
                obj['show_difference_public_url'] = ApiClient.convertToType(data['show_difference_public_url'], 'String');
            }
            if (data.hasOwnProperty('show_difference_web_url')) {
                obj['show_difference_web_url'] = ApiClient.convertToType(data['show_difference_web_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Element</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Element</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['difference'] && !(typeof data['difference'] === 'string' || data['difference'] instanceof String)) {
            throw new Error("Expected the field `difference` to be a primitive type in the JSON string but got " + data['difference']);
        }
        // ensure the json data is a string
        if (data['full_path'] && !(typeof data['full_path'] === 'string' || data['full_path'] instanceof String)) {
            throw new Error("Expected the field `full_path` to be a primitive type in the JSON string but got " + data['full_path']);
        }
        // ensure the json data is a string
        if (data['short_path'] && !(typeof data['short_path'] === 'string' || data['short_path'] instanceof String)) {
            throw new Error("Expected the field `short_path` to be a primitive type in the JSON string but got " + data['short_path']);
        }
        // ensure the json data is a string
        if (data['show_difference_public_url'] && !(typeof data['show_difference_public_url'] === 'string' || data['show_difference_public_url'] instanceof String)) {
            throw new Error("Expected the field `show_difference_public_url` to be a primitive type in the JSON string but got " + data['show_difference_public_url']);
        }
        // ensure the json data is a string
        if (data['show_difference_web_url'] && !(typeof data['show_difference_web_url'] === 'string' || data['show_difference_web_url'] instanceof String)) {
            throw new Error("Expected the field `show_difference_web_url` to be a primitive type in the JSON string but got " + data['show_difference_web_url']);
        }

        return true;
    }


}



/**
 * @member {String} difference
 */
Element.prototype['difference'] = undefined;

/**
 * @member {String} full_path
 */
Element.prototype['full_path'] = undefined;

/**
 * @member {String} short_path
 */
Element.prototype['short_path'] = undefined;

/**
 * @member {String} show_difference_public_url
 */
Element.prototype['show_difference_public_url'] = undefined;

/**
 * @member {String} show_difference_web_url
 */
Element.prototype['show_difference_web_url'] = undefined;






export default Element;

