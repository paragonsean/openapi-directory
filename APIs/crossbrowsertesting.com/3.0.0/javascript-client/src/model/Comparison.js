/**
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Element from './Element';

/**
 * The Comparison model module.
 * @module model/Comparison
 * @version 3.0.0
 */
class Comparison {
    /**
     * Constructs a new <code>Comparison</code>.
     * @alias module:model/Comparison
     */
    constructor() { 
        
        Comparison.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Comparison</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comparison} obj Optional instance to populate.
     * @return {module:model/Comparison} The populated <code>Comparison</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comparison();

            if (data.hasOwnProperty('differences')) {
                obj['differences'] = ApiClient.convertToType(data['differences'], 'Number');
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], [Element]);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('show_comparisons_public_url')) {
                obj['show_comparisons_public_url'] = ApiClient.convertToType(data['show_comparisons_public_url'], 'String');
            }
            if (data.hasOwnProperty('show_comparisons_web_url')) {
                obj['show_comparisons_web_url'] = ApiClient.convertToType(data['show_comparisons_web_url'], 'String');
            }
            if (data.hasOwnProperty('tolerance')) {
                obj['tolerance'] = ApiClient.convertToType(data['tolerance'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comparison</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comparison</code>.
     */
    static validateJSON(data) {
        if (data['elements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elements'])) {
                throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
            }
            // validate the optional field `elements` (array)
            for (const item of data['elements']) {
                Element.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['show_comparisons_public_url'] && !(typeof data['show_comparisons_public_url'] === 'string' || data['show_comparisons_public_url'] instanceof String)) {
            throw new Error("Expected the field `show_comparisons_public_url` to be a primitive type in the JSON string but got " + data['show_comparisons_public_url']);
        }
        // ensure the json data is a string
        if (data['show_comparisons_web_url'] && !(typeof data['show_comparisons_web_url'] === 'string' || data['show_comparisons_web_url'] instanceof String)) {
            throw new Error("Expected the field `show_comparisons_web_url` to be a primitive type in the JSON string but got " + data['show_comparisons_web_url']);
        }

        return true;
    }


}



/**
 * @member {Number} differences
 */
Comparison.prototype['differences'] = undefined;

/**
 * @member {Array.<module:model/Element>} elements
 */
Comparison.prototype['elements'] = undefined;

/**
 * @member {Boolean} error
 */
Comparison.prototype['error'] = undefined;

/**
 * @member {String} message
 */
Comparison.prototype['message'] = undefined;

/**
 * @member {String} show_comparisons_public_url
 */
Comparison.prototype['show_comparisons_public_url'] = undefined;

/**
 * @member {String} show_comparisons_web_url
 */
Comparison.prototype['show_comparisons_web_url'] = undefined;

/**
 * @member {Number} tolerance
 */
Comparison.prototype['tolerance'] = undefined;






export default Comparison;

