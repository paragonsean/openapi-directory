/*
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FullComparisonTest;
import org.openapitools.client.model.SingleComparisonTest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetCall(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/{base_result_id}"
            .replace("{" + "target_screenshot_test_id" + "}", localVarApiClient.escapeString(targetScreenshotTestId.toString()))
            .replace("{" + "target_version_id" + "}", localVarApiClient.escapeString(targetVersionId.toString()))
            .replace("{" + "base_result_id" + "}", localVarApiClient.escapeString(baseResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (tolerance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tolerance", tolerance));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetValidateBeforeCall(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetScreenshotTestId' is set
        if (targetScreenshotTestId == null) {
            throw new ApiException("Missing the required parameter 'targetScreenshotTestId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(Async)");
        }

        // verify the required parameter 'targetVersionId' is set
        if (targetVersionId == null) {
            throw new ApiException("Missing the required parameter 'targetVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(Async)");
        }

        // verify the required parameter 'baseResultId' is set
        if (baseResultId == null) {
            throw new ApiException("Missing the required parameter 'baseResultId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(Async)");
        }

        return screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetCall(targetScreenshotTestId, targetVersionId, baseResultId, format, paramCallback, tolerance, _callback);

    }

    /**
     * Compare Full Screenshot Test
     * Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @return FullComparisonTest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public FullComparisonTest screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance) throws ApiException {
        ApiResponse<FullComparisonTest> localVarResp = screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetWithHttpInfo(targetScreenshotTestId, targetVersionId, baseResultId, format, paramCallback, tolerance);
        return localVarResp.getData();
    }

    /**
     * Compare Full Screenshot Test
     * Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @return ApiResponse&lt;FullComparisonTest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullComparisonTest> screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetWithHttpInfo(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance) throws ApiException {
        okhttp3.Call localVarCall = screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetValidateBeforeCall(targetScreenshotTestId, targetVersionId, baseResultId, format, paramCallback, tolerance, null);
        Type localVarReturnType = new TypeToken<FullComparisonTest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare Full Screenshot Test (asynchronously)
     * Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetAsync(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback<FullComparisonTest> _callback) throws ApiException {

        okhttp3.Call localVarCall = screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetValidateBeforeCall(targetScreenshotTestId, targetVersionId, baseResultId, format, paramCallback, tolerance, _callback);
        Type localVarReturnType = new TypeToken<FullComparisonTest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseVersionId version id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetCall(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseVersionId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/parallel/{base_version_id}"
            .replace("{" + "target_screenshot_test_id" + "}", localVarApiClient.escapeString(targetScreenshotTestId.toString()))
            .replace("{" + "target_version_id" + "}", localVarApiClient.escapeString(targetVersionId.toString()))
            .replace("{" + "base_version_id" + "}", localVarApiClient.escapeString(baseVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (tolerance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tolerance", tolerance));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetValidateBeforeCall(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseVersionId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetScreenshotTestId' is set
        if (targetScreenshotTestId == null) {
            throw new ApiException("Missing the required parameter 'targetScreenshotTestId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(Async)");
        }

        // verify the required parameter 'targetVersionId' is set
        if (targetVersionId == null) {
            throw new ApiException("Missing the required parameter 'targetVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(Async)");
        }

        // verify the required parameter 'baseVersionId' is set
        if (baseVersionId == null) {
            throw new ApiException("Missing the required parameter 'baseVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(Async)");
        }

        return screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetCall(targetScreenshotTestId, targetVersionId, baseVersionId, format, paramCallback, tolerance, _callback);

    }

    /**
     * Compare Screenshot Test Versions
     * Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you&#39;ve run a screenshot test against a set of browsers that is \&quot;good\&quot;. Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseVersionId version id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @return List&lt;SingleComparisonTest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public List<SingleComparisonTest> screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseVersionId, String format, String paramCallback, BigDecimal tolerance) throws ApiException {
        ApiResponse<List<SingleComparisonTest>> localVarResp = screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetWithHttpInfo(targetScreenshotTestId, targetVersionId, baseVersionId, format, paramCallback, tolerance);
        return localVarResp.getData();
    }

    /**
     * Compare Screenshot Test Versions
     * Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you&#39;ve run a screenshot test against a set of browsers that is \&quot;good\&quot;. Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseVersionId version id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @return ApiResponse&lt;List&lt;SingleComparisonTest&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SingleComparisonTest>> screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetWithHttpInfo(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseVersionId, String format, String paramCallback, BigDecimal tolerance) throws ApiException {
        okhttp3.Call localVarCall = screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetValidateBeforeCall(targetScreenshotTestId, targetVersionId, baseVersionId, format, paramCallback, tolerance, null);
        Type localVarReturnType = new TypeToken<List<SingleComparisonTest>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare Screenshot Test Versions (asynchronously)
     * Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you&#39;ve run a screenshot test against a set of browsers that is \&quot;good\&quot;. Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param baseVersionId version id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetAsync(Integer targetScreenshotTestId, Integer targetVersionId, Integer baseVersionId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback<List<SingleComparisonTest>> _callback) throws ApiException {

        okhttp3.Call localVarCall = screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetValidateBeforeCall(targetScreenshotTestId, targetVersionId, baseVersionId, format, paramCallback, tolerance, _callback);
        Type localVarReturnType = new TypeToken<List<SingleComparisonTest>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param targetResultId result id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetCall(Integer targetScreenshotTestId, Integer targetVersionId, Integer targetResultId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/screenshots/{target_screenshot_test_id}/{target_version_id}/{target_result_id}/comparison/{base_result_id}"
            .replace("{" + "target_screenshot_test_id" + "}", localVarApiClient.escapeString(targetScreenshotTestId.toString()))
            .replace("{" + "target_version_id" + "}", localVarApiClient.escapeString(targetVersionId.toString()))
            .replace("{" + "target_result_id" + "}", localVarApiClient.escapeString(targetResultId.toString()))
            .replace("{" + "base_result_id" + "}", localVarApiClient.escapeString(baseResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (tolerance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tolerance", tolerance));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetValidateBeforeCall(Integer targetScreenshotTestId, Integer targetVersionId, Integer targetResultId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetScreenshotTestId' is set
        if (targetScreenshotTestId == null) {
            throw new ApiException("Missing the required parameter 'targetScreenshotTestId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(Async)");
        }

        // verify the required parameter 'targetVersionId' is set
        if (targetVersionId == null) {
            throw new ApiException("Missing the required parameter 'targetVersionId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(Async)");
        }

        // verify the required parameter 'targetResultId' is set
        if (targetResultId == null) {
            throw new ApiException("Missing the required parameter 'targetResultId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(Async)");
        }

        // verify the required parameter 'baseResultId' is set
        if (baseResultId == null) {
            throw new ApiException("Missing the required parameter 'baseResultId' when calling screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(Async)");
        }

        return screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetCall(targetScreenshotTestId, targetVersionId, targetResultId, baseResultId, format, paramCallback, tolerance, _callback);

    }

    /**
     * Compare Single Screenshot
     * Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param targetResultId result id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @return SingleComparisonTest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public SingleComparisonTest screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(Integer targetScreenshotTestId, Integer targetVersionId, Integer targetResultId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance) throws ApiException {
        ApiResponse<SingleComparisonTest> localVarResp = screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetWithHttpInfo(targetScreenshotTestId, targetVersionId, targetResultId, baseResultId, format, paramCallback, tolerance);
        return localVarResp.getData();
    }

    /**
     * Compare Single Screenshot
     * Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param targetResultId result id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @return ApiResponse&lt;SingleComparisonTest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleComparisonTest> screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetWithHttpInfo(Integer targetScreenshotTestId, Integer targetVersionId, Integer targetResultId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance) throws ApiException {
        okhttp3.Call localVarCall = screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetValidateBeforeCall(targetScreenshotTestId, targetVersionId, targetResultId, baseResultId, format, paramCallback, tolerance, null);
        Type localVarReturnType = new TypeToken<SingleComparisonTest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare Single Screenshot (asynchronously)
     * Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
     * @param targetScreenshotTestId test id of the target Screenshot Test (required)
     * @param targetVersionId version id of the target Screenshot Test (required)
     * @param targetResultId result id of the target Screenshot Test (required)
     * @param baseResultId result id of the base Screenshot Test (required)
     * @param format The format of the returned data. Possible values are \&quot;json\&quot; or \&quot;jsonp\&quot;. (optional, default to json)
     * @param paramCallback Name of callback method for JSONP requests. (optional)
     * @param tolerance Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences. (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Configuration objects. Within each configuration is an array of browsers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetAsync(Integer targetScreenshotTestId, Integer targetVersionId, Integer targetResultId, Integer baseResultId, String format, String paramCallback, BigDecimal tolerance, final ApiCallback<SingleComparisonTest> _callback) throws ApiException {

        okhttp3.Call localVarCall = screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetValidateBeforeCall(targetScreenshotTestId, targetVersionId, targetResultId, baseResultId, format, paramCallback, tolerance, _callback);
        Type localVarReturnType = new TypeToken<SingleComparisonTest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
