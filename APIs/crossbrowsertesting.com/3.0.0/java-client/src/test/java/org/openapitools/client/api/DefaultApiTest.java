/*
 * Crossbrowsertesting.com Screenshot Comparisons API
 * What's in this version:   1. Compare two screenshots for layout differences   2. Compare a full screenshot test of browsers to a single baseline browser for layout differences.   3. Compare a screenshot test version to another test version - good for regression tests.   4. Get links to the Comparison UI for visual representation of layout differences
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.FullComparisonTest;
import org.openapitools.client.model.SingleComparisonTest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Compare Full Screenshot Test
     *
     * Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGetTest() throws ApiException {
        Integer targetScreenshotTestId = null;
        Integer targetVersionId = null;
        Integer baseResultId = null;
        String format = null;
        String paramCallback = null;
        BigDecimal tolerance = null;
        FullComparisonTest response = api.screenshotsTargetScreenshotTestIdTargetVersionIdComparisonBaseResultIdGet(targetScreenshotTestId, targetVersionId, baseResultId, format, paramCallback, tolerance);
        // TODO: test validations
    }

    /**
     * Compare Screenshot Test Versions
     *
     * Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you&#39;ve run a screenshot test against a set of browsers that is \&quot;good\&quot;. Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGetTest() throws ApiException {
        Integer targetScreenshotTestId = null;
        Integer targetVersionId = null;
        Integer baseVersionId = null;
        String format = null;
        String paramCallback = null;
        BigDecimal tolerance = null;
        List<SingleComparisonTest> response = api.screenshotsTargetScreenshotTestIdTargetVersionIdComparisonParallelBaseVersionIdGet(targetScreenshotTestId, targetVersionId, baseVersionId, format, paramCallback, tolerance);
        // TODO: test validations
    }

    /**
     * Compare Single Screenshot
     *
     * Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGetTest() throws ApiException {
        Integer targetScreenshotTestId = null;
        Integer targetVersionId = null;
        Integer targetResultId = null;
        Integer baseResultId = null;
        String format = null;
        String paramCallback = null;
        BigDecimal tolerance = null;
        SingleComparisonTest response = api.screenshotsTargetScreenshotTestIdTargetVersionIdTargetResultIdComparisonBaseResultIdGet(targetScreenshotTestId, targetVersionId, targetResultId, baseResultId, format, paramCallback, tolerance);
        // TODO: test validations
    }

}
