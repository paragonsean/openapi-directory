/**
 * Greip API
 * This documentation shows how to use Greip API, by highlighting the API methods, options and some other features that allow you to get the most of this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@greip.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aSNLookupGet operation.
     * @callback module:api/DefaultApi~aSNLookupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} asn The AS Number you want to lookup
     * @param {Object} opts Optional parameters
     * @param {String} [isList] Set this to true if you want to list all routes of both IPv4 and IPv6.
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~aSNLookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    aSNLookupGet(key, asn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling aSNLookupGet");
      }
      // verify the required parameter 'asn' is set
      if (asn === undefined || asn === null) {
        throw new Error("Missing the required parameter 'asn' when calling aSNLookupGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'asn': asn,
        'isList': opts['isList'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ASNLookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bINLookupGet operation.
     * @callback module:api/DefaultApi~bINLookupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} bin The BIN/IIN you want to lookup/validate.
     * @param {Object} opts Optional parameters
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~bINLookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bINLookupGet(key, bin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling bINLookupGet");
      }
      // verify the required parameter 'bin' is set
      if (bin === undefined || bin === null) {
        throw new Error("Missing the required parameter 'bin' when calling bINLookupGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'bin': bin,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/BINLookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badWordsGet operation.
     * @callback module:api/DefaultApi~badWordsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * badWords endpoint: Detects whether user inputs contain profanity or not.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} text The text you want to check.
     * @param {Object} opts Optional parameters
     * @param {String} [listBadWords] Set to `yes` to list the bad-words as an Array.
     * @param {String} [scoreOnly] Set to `yes` to return only the score of the text and whether it's safe or not.
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~badWordsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    badWordsGet(key, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling badWordsGet");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling badWordsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'text': text,
        'listBadWords': opts['listBadWords'],
        'scoreOnly': opts['scoreOnly'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/badWords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkLookupGet operation.
     * @callback module:api/DefaultApi~bulkLookupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} ips The IP Addresses you want to lookup. It's a CSV (Comma Separated Values)
     * @param {Object} opts Optional parameters
     * @param {String} [params] The modules you want to use of the request. It's a CSV (Comma Separated Values)
     * @param {String} [lang] Used to inform the API to retrieve the response in your native language.
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~bulkLookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkLookupGet(key, ips, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling bulkLookupGet");
      }
      // verify the required parameter 'ips' is set
      if (ips === undefined || ips === null) {
        throw new Error("Missing the required parameter 'ips' when calling bulkLookupGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'ips': ips,
        'params': opts['params'],
        'lang': opts['lang'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/BulkLookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countryGet operation.
     * @callback module:api/DefaultApi~countryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Country endpoint: Returns the information of a specific country by passing the `countrCode`.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} countryCode The Country Code of the country you want to fetch it's data.
     * @param {Object} opts Optional parameters
     * @param {String} [params] The modules you want to use of the request. It's a CSV (Comma Separated Values)
     * @param {String} [lang] Used to inform the API to retrieve the response in your native language.
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~countryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    countryGet(key, countryCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling countryGet");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling countryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'CountryCode': countryCode,
        'params': opts['params'],
        'lang': opts['lang'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Country', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geoIPGet operation.
     * @callback module:api/DefaultApi~geoIPGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the geolocation data of the visitor.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {Object} opts Optional parameters
     * @param {String} [params] The modules you want to use of the request. It's a CSV (Comma Separated Values)
     * @param {String} [lang] Used to inform the API to retrieve the response in your native language.
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~geoIPGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    geoIPGet(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling geoIPGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'params': opts['params'],
        'lang': opts['lang'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/GeoIP', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iPLookupGet operation.
     * @callback module:api/DefaultApi~iPLookupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the geolocation data of a specific IP Address.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} ip The IP Address you want to lookup.
     * @param {Object} opts Optional parameters
     * @param {String} [params] The modules you want to use of the request. It's a CSV (Comma Separated Values)
     * @param {String} [lang] Used to inform the API to retrieve the response in your native language.
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~iPLookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iPLookupGet(key, ip, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling iPLookupGet");
      }
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling iPLookupGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'ip': ip,
        'params': opts['params'],
        'lang': opts['lang'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/IPLookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateEmailGet operation.
     * @callback module:api/DefaultApi~validateEmailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method can be used as an extra-layer of your system for validating email addresses.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} email The Email Address you want to validate.
     * @param {Object} opts Optional parameters
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~validateEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateEmailGet(key, email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling validateEmailGet");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling validateEmailGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'email': email,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/validateEmail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatePhoneGet operation.
     * @callback module:api/DefaultApi~validatePhoneGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method can be used as an extra-layer of your system for validating phone numbers.
     * @param {String} key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.
     * @param {String} phone The Phone Number you want to validate.
     * @param {String} countryCode The ISO 3166-1 alpha-2 format of the country code of the phone number.
     * @param {Object} opts Optional parameters
     * @param {String} [format] Sets the format of the API response. JSON is the default format.
     * @param {module:api/DefaultApi~validatePhoneGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validatePhoneGet(key, phone, countryCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling validatePhoneGet");
      }
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling validatePhoneGet");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling validatePhoneGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'phone': phone,
        'countryCode': countryCode,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/validatePhone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
