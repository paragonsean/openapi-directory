/**
 * Greip API
 * This documentation shows how to use Greip API, by highlighting the API methods, options and some other features that allow you to get the most of this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@greip.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  asn QString [required]
    * @param[in]  is_list QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void aSNLookupGet(const QString &key, const QString &asn, const ::OpenAPI::OptionalParam<QString> &is_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  bin QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void bINLookupGet(const QString &key, const QString &bin, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  text QString [required]
    * @param[in]  list_bad_words QString [optional]
    * @param[in]  score_only QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void badWordsGet(const QString &key, const QString &text, const ::OpenAPI::OptionalParam<QString> &list_bad_words = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &score_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  ips QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void bulkLookupGet(const QString &key, const QString &ips, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void countryGet(const QString &key, const QString &country_code, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void geoIPGet(const QString &key, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  ip QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void iPLookupGet(const QString &key, const QString &ip, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  email QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void validateEmailGet(const QString &key, const QString &email, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  phone QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void validatePhoneGet(const QString &key, const QString &phone, const QString &country_code, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aSNLookupGetCallback(OAIHttpRequestWorker *worker);
    void bINLookupGetCallback(OAIHttpRequestWorker *worker);
    void badWordsGetCallback(OAIHttpRequestWorker *worker);
    void bulkLookupGetCallback(OAIHttpRequestWorker *worker);
    void countryGetCallback(OAIHttpRequestWorker *worker);
    void geoIPGetCallback(OAIHttpRequestWorker *worker);
    void iPLookupGetCallback(OAIHttpRequestWorker *worker);
    void validateEmailGetCallback(OAIHttpRequestWorker *worker);
    void validatePhoneGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aSNLookupGetSignal();
    void bINLookupGetSignal();
    void badWordsGetSignal();
    void bulkLookupGetSignal();
    void countryGetSignal();
    void geoIPGetSignal();
    void iPLookupGetSignal();
    void validateEmailGetSignal();
    void validatePhoneGetSignal();


    void aSNLookupGetSignalFull(OAIHttpRequestWorker *worker);
    void bINLookupGetSignalFull(OAIHttpRequestWorker *worker);
    void badWordsGetSignalFull(OAIHttpRequestWorker *worker);
    void bulkLookupGetSignalFull(OAIHttpRequestWorker *worker);
    void countryGetSignalFull(OAIHttpRequestWorker *worker);
    void geoIPGetSignalFull(OAIHttpRequestWorker *worker);
    void iPLookupGetSignalFull(OAIHttpRequestWorker *worker);
    void validateEmailGetSignalFull(OAIHttpRequestWorker *worker);
    void validatePhoneGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use aSNLookupGetSignalError() instead")
    void aSNLookupGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void aSNLookupGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bINLookupGetSignalError() instead")
    void bINLookupGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bINLookupGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badWordsGetSignalError() instead")
    void badWordsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void badWordsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkLookupGetSignalError() instead")
    void bulkLookupGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bulkLookupGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countryGetSignalError() instead")
    void countryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void countryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geoIPGetSignalError() instead")
    void geoIPGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geoIPGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPLookupGetSignalError() instead")
    void iPLookupGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iPLookupGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateEmailGetSignalError() instead")
    void validateEmailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void validateEmailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePhoneGetSignalError() instead")
    void validatePhoneGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void validatePhoneGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aSNLookupGetSignalErrorFull() instead")
    void aSNLookupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aSNLookupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bINLookupGetSignalErrorFull() instead")
    void bINLookupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bINLookupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badWordsGetSignalErrorFull() instead")
    void badWordsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badWordsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkLookupGetSignalErrorFull() instead")
    void bulkLookupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkLookupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countryGetSignalErrorFull() instead")
    void countryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geoIPGetSignalErrorFull() instead")
    void geoIPGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geoIPGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iPLookupGetSignalErrorFull() instead")
    void iPLookupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iPLookupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateEmailGetSignalErrorFull() instead")
    void validateEmailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateEmailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePhoneGetSignalErrorFull() instead")
    void validatePhoneGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePhoneGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
