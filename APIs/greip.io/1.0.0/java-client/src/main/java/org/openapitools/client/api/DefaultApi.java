/*
 * Greip API
 * This documentation shows how to use Greip API, by highlighting the API methods, options and some other features that allow you to get the most of this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@greip.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aSNLookupGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param asn The AS Number you want to lookup (required)
     * @param isList Set this to true if you want to list all routes of both IPv4 and IPv6. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - ASN Lookup
     * @see <a href="https://docs.greip.io/methods/asn-lookup-api"> Documentation</a>
     */
    public okhttp3.Call aSNLookupGetCall(String key, String asn, String isList, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ASNLookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (isList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isList", isList));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aSNLookupGetValidateBeforeCall(String key, String asn, String isList, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling aSNLookupGet(Async)");
        }

        // verify the required parameter 'asn' is set
        if (asn == null) {
            throw new ApiException("Missing the required parameter 'asn' when calling aSNLookupGet(Async)");
        }

        return aSNLookupGetCall(key, asn, isList, format, _callback);

    }

    /**
     * 
     * ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param asn The AS Number you want to lookup (required)
     * @param isList Set this to true if you want to list all routes of both IPv4 and IPv6. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - ASN Lookup
     * @see <a href="https://docs.greip.io/methods/asn-lookup-api"> Documentation</a>
     */
    public void aSNLookupGet(String key, String asn, String isList, String format) throws ApiException {
        aSNLookupGetWithHttpInfo(key, asn, isList, format);
    }

    /**
     * 
     * ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param asn The AS Number you want to lookup (required)
     * @param isList Set this to true if you want to list all routes of both IPv4 and IPv6. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - ASN Lookup
     * @see <a href="https://docs.greip.io/methods/asn-lookup-api"> Documentation</a>
     */
    public ApiResponse<Void> aSNLookupGetWithHttpInfo(String key, String asn, String isList, String format) throws ApiException {
        okhttp3.Call localVarCall = aSNLookupGetValidateBeforeCall(key, asn, isList, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param asn The AS Number you want to lookup (required)
     * @param isList Set this to true if you want to list all routes of both IPv4 and IPv6. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - ASN Lookup
     * @see <a href="https://docs.greip.io/methods/asn-lookup-api"> Documentation</a>
     */
    public okhttp3.Call aSNLookupGetAsync(String key, String asn, String isList, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = aSNLookupGetValidateBeforeCall(key, asn, isList, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bINLookupGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param bin The BIN/IIN you want to lookup/validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - BIN/IIN Validation
     * @see <a href="https://docs.greip.io/methods/bin-iin-validation"> Documentation</a>
     */
    public okhttp3.Call bINLookupGetCall(String key, String bin, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BINLookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (bin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bin", bin));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bINLookupGetValidateBeforeCall(String key, String bin, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling bINLookupGet(Async)");
        }

        // verify the required parameter 'bin' is set
        if (bin == null) {
            throw new ApiException("Missing the required parameter 'bin' when calling bINLookupGet(Async)");
        }

        return bINLookupGetCall(key, bin, format, _callback);

    }

    /**
     * 
     * This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param bin The BIN/IIN you want to lookup/validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - BIN/IIN Validation
     * @see <a href="https://docs.greip.io/methods/bin-iin-validation"> Documentation</a>
     */
    public void bINLookupGet(String key, String bin, String format) throws ApiException {
        bINLookupGetWithHttpInfo(key, bin, format);
    }

    /**
     * 
     * This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param bin The BIN/IIN you want to lookup/validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - BIN/IIN Validation
     * @see <a href="https://docs.greip.io/methods/bin-iin-validation"> Documentation</a>
     */
    public ApiResponse<Void> bINLookupGetWithHttpInfo(String key, String bin, String format) throws ApiException {
        okhttp3.Call localVarCall = bINLookupGetValidateBeforeCall(key, bin, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param bin The BIN/IIN you want to lookup/validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - BIN/IIN Validation
     * @see <a href="https://docs.greip.io/methods/bin-iin-validation"> Documentation</a>
     */
    public okhttp3.Call bINLookupGetAsync(String key, String bin, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bINLookupGetValidateBeforeCall(key, bin, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for badWordsGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param text The text you want to check. (required)
     * @param listBadWords Set to &#x60;yes&#x60; to list the bad-words as an Array. (optional)
     * @param scoreOnly Set to &#x60;yes&#x60; to return only the score of the text and whether it&#39;s safe or not. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Profanity Detection
     * @see <a href="https://docs.greip.io/methods/profanity-detection"> Documentation</a>
     */
    public okhttp3.Call badWordsGetCall(String key, String text, String listBadWords, String scoreOnly, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/badWords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (listBadWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listBadWords", listBadWords));
        }

        if (scoreOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreOnly", scoreOnly));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call badWordsGetValidateBeforeCall(String key, String text, String listBadWords, String scoreOnly, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling badWordsGet(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling badWordsGet(Async)");
        }

        return badWordsGetCall(key, text, listBadWords, scoreOnly, format, _callback);

    }

    /**
     * 
     * badWords endpoint: Detects whether user inputs contain profanity or not.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param text The text you want to check. (required)
     * @param listBadWords Set to &#x60;yes&#x60; to list the bad-words as an Array. (optional)
     * @param scoreOnly Set to &#x60;yes&#x60; to return only the score of the text and whether it&#39;s safe or not. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Profanity Detection
     * @see <a href="https://docs.greip.io/methods/profanity-detection"> Documentation</a>
     */
    public void badWordsGet(String key, String text, String listBadWords, String scoreOnly, String format) throws ApiException {
        badWordsGetWithHttpInfo(key, text, listBadWords, scoreOnly, format);
    }

    /**
     * 
     * badWords endpoint: Detects whether user inputs contain profanity or not.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param text The text you want to check. (required)
     * @param listBadWords Set to &#x60;yes&#x60; to list the bad-words as an Array. (optional)
     * @param scoreOnly Set to &#x60;yes&#x60; to return only the score of the text and whether it&#39;s safe or not. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Profanity Detection
     * @see <a href="https://docs.greip.io/methods/profanity-detection"> Documentation</a>
     */
    public ApiResponse<Void> badWordsGetWithHttpInfo(String key, String text, String listBadWords, String scoreOnly, String format) throws ApiException {
        okhttp3.Call localVarCall = badWordsGetValidateBeforeCall(key, text, listBadWords, scoreOnly, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * badWords endpoint: Detects whether user inputs contain profanity or not.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param text The text you want to check. (required)
     * @param listBadWords Set to &#x60;yes&#x60; to list the bad-words as an Array. (optional)
     * @param scoreOnly Set to &#x60;yes&#x60; to return only the score of the text and whether it&#39;s safe or not. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Profanity Detection
     * @see <a href="https://docs.greip.io/methods/profanity-detection"> Documentation</a>
     */
    public okhttp3.Call badWordsGetAsync(String key, String text, String listBadWords, String scoreOnly, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = badWordsGetValidateBeforeCall(key, text, listBadWords, scoreOnly, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkLookupGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ips The IP Addresses you want to lookup. It&#39;s a CSV (Comma Separated Values) (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Bulk Lookup
     * @see <a href="https://docs.greip.io/methods/bulk-lookup"> Documentation</a>
     */
    public okhttp3.Call bulkLookupGetCall(String key, String ips, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BulkLookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (ips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ips", ips));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkLookupGetValidateBeforeCall(String key, String ips, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling bulkLookupGet(Async)");
        }

        // verify the required parameter 'ips' is set
        if (ips == null) {
            throw new ApiException("Missing the required parameter 'ips' when calling bulkLookupGet(Async)");
        }

        return bulkLookupGetCall(key, ips, params, lang, format, _callback);

    }

    /**
     * 
     * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ips The IP Addresses you want to lookup. It&#39;s a CSV (Comma Separated Values) (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Bulk Lookup
     * @see <a href="https://docs.greip.io/methods/bulk-lookup"> Documentation</a>
     */
    public void bulkLookupGet(String key, String ips, String params, String lang, String format) throws ApiException {
        bulkLookupGetWithHttpInfo(key, ips, params, lang, format);
    }

    /**
     * 
     * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ips The IP Addresses you want to lookup. It&#39;s a CSV (Comma Separated Values) (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Bulk Lookup
     * @see <a href="https://docs.greip.io/methods/bulk-lookup"> Documentation</a>
     */
    public ApiResponse<Void> bulkLookupGetWithHttpInfo(String key, String ips, String params, String lang, String format) throws ApiException {
        okhttp3.Call localVarCall = bulkLookupGetValidateBeforeCall(key, ips, params, lang, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ips The IP Addresses you want to lookup. It&#39;s a CSV (Comma Separated Values) (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Bulk Lookup
     * @see <a href="https://docs.greip.io/methods/bulk-lookup"> Documentation</a>
     */
    public okhttp3.Call bulkLookupGetAsync(String key, String ips, String params, String lang, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkLookupGetValidateBeforeCall(key, ips, params, lang, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for countryGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param countryCode The Country Code of the country you want to fetch it&#39;s data. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Country Data API
     * @see <a href="https://docs.greip.io/methods/country-data-api"> Documentation</a>
     */
    public okhttp3.Call countryGetCall(String key, String countryCode, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Country";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CountryCode", countryCode));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countryGetValidateBeforeCall(String key, String countryCode, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling countryGet(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling countryGet(Async)");
        }

        return countryGetCall(key, countryCode, params, lang, format, _callback);

    }

    /**
     * 
     * Country endpoint: Returns the information of a specific country by passing the &#x60;countrCode&#x60;.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param countryCode The Country Code of the country you want to fetch it&#39;s data. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Country Data API
     * @see <a href="https://docs.greip.io/methods/country-data-api"> Documentation</a>
     */
    public void countryGet(String key, String countryCode, String params, String lang, String format) throws ApiException {
        countryGetWithHttpInfo(key, countryCode, params, lang, format);
    }

    /**
     * 
     * Country endpoint: Returns the information of a specific country by passing the &#x60;countrCode&#x60;.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param countryCode The Country Code of the country you want to fetch it&#39;s data. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Country Data API
     * @see <a href="https://docs.greip.io/methods/country-data-api"> Documentation</a>
     */
    public ApiResponse<Void> countryGetWithHttpInfo(String key, String countryCode, String params, String lang, String format) throws ApiException {
        okhttp3.Call localVarCall = countryGetValidateBeforeCall(key, countryCode, params, lang, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Country endpoint: Returns the information of a specific country by passing the &#x60;countrCode&#x60;.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param countryCode The Country Code of the country you want to fetch it&#39;s data. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Country Data API
     * @see <a href="https://docs.greip.io/methods/country-data-api"> Documentation</a>
     */
    public okhttp3.Call countryGetAsync(String key, String countryCode, String params, String lang, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = countryGetValidateBeforeCall(key, countryCode, params, lang, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoIPGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Retrieve Visitor Info
     * @see <a href="https://docs.greip.io/methods/retrieve-visitor-info"> Documentation</a>
     */
    public okhttp3.Call geoIPGetCall(String key, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GeoIP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoIPGetValidateBeforeCall(String key, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling geoIPGet(Async)");
        }

        return geoIPGetCall(key, params, lang, format, _callback);

    }

    /**
     * 
     * Returns the geolocation data of the visitor.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Retrieve Visitor Info
     * @see <a href="https://docs.greip.io/methods/retrieve-visitor-info"> Documentation</a>
     */
    public void geoIPGet(String key, String params, String lang, String format) throws ApiException {
        geoIPGetWithHttpInfo(key, params, lang, format);
    }

    /**
     * 
     * Returns the geolocation data of the visitor.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Retrieve Visitor Info
     * @see <a href="https://docs.greip.io/methods/retrieve-visitor-info"> Documentation</a>
     */
    public ApiResponse<Void> geoIPGetWithHttpInfo(String key, String params, String lang, String format) throws ApiException {
        okhttp3.Call localVarCall = geoIPGetValidateBeforeCall(key, params, lang, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the geolocation data of the visitor.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Retrieve Visitor Info
     * @see <a href="https://docs.greip.io/methods/retrieve-visitor-info"> Documentation</a>
     */
    public okhttp3.Call geoIPGetAsync(String key, String params, String lang, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoIPGetValidateBeforeCall(key, params, lang, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iPLookupGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ip The IP Address you want to lookup. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Lookup IP Address
     * @see <a href="https://docs.greip.io/methods/lookup-ip-address"> Documentation</a>
     */
    public okhttp3.Call iPLookupGetCall(String key, String ip, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/IPLookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iPLookupGetValidateBeforeCall(String key, String ip, String params, String lang, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling iPLookupGet(Async)");
        }

        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling iPLookupGet(Async)");
        }

        return iPLookupGetCall(key, ip, params, lang, format, _callback);

    }

    /**
     * 
     * Returns the geolocation data of a specific IP Address.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ip The IP Address you want to lookup. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Lookup IP Address
     * @see <a href="https://docs.greip.io/methods/lookup-ip-address"> Documentation</a>
     */
    public void iPLookupGet(String key, String ip, String params, String lang, String format) throws ApiException {
        iPLookupGetWithHttpInfo(key, ip, params, lang, format);
    }

    /**
     * 
     * Returns the geolocation data of a specific IP Address.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ip The IP Address you want to lookup. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Lookup IP Address
     * @see <a href="https://docs.greip.io/methods/lookup-ip-address"> Documentation</a>
     */
    public ApiResponse<Void> iPLookupGetWithHttpInfo(String key, String ip, String params, String lang, String format) throws ApiException {
        okhttp3.Call localVarCall = iPLookupGetValidateBeforeCall(key, ip, params, lang, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the geolocation data of a specific IP Address.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param ip The IP Address you want to lookup. (required)
     * @param params The modules you want to use of the request. It&#39;s a CSV (Comma Separated Values) (optional)
     * @param lang Used to inform the API to retrieve the response in your native language. (optional)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Lookup IP Address
     * @see <a href="https://docs.greip.io/methods/lookup-ip-address"> Documentation</a>
     */
    public okhttp3.Call iPLookupGetAsync(String key, String ip, String params, String lang, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iPLookupGetValidateBeforeCall(key, ip, params, lang, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateEmailGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param email The Email Address you want to validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Email Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/email-validation"> Documentation</a>
     */
    public okhttp3.Call validateEmailGetCall(String key, String email, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validateEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateEmailGetValidateBeforeCall(String key, String email, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling validateEmailGet(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling validateEmailGet(Async)");
        }

        return validateEmailGetCall(key, email, format, _callback);

    }

    /**
     * 
     * This method can be used as an extra-layer of your system for validating email addresses.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param email The Email Address you want to validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Email Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/email-validation"> Documentation</a>
     */
    public void validateEmailGet(String key, String email, String format) throws ApiException {
        validateEmailGetWithHttpInfo(key, email, format);
    }

    /**
     * 
     * This method can be used as an extra-layer of your system for validating email addresses.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param email The Email Address you want to validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Email Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/email-validation"> Documentation</a>
     */
    public ApiResponse<Void> validateEmailGetWithHttpInfo(String key, String email, String format) throws ApiException {
        okhttp3.Call localVarCall = validateEmailGetValidateBeforeCall(key, email, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This method can be used as an extra-layer of your system for validating email addresses.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param email The Email Address you want to validate. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Email Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/email-validation"> Documentation</a>
     */
    public okhttp3.Call validateEmailGetAsync(String key, String email, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateEmailGetValidateBeforeCall(key, email, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatePhoneGet
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param phone The Phone Number you want to validate. (required)
     * @param countryCode The ISO 3166-1 alpha-2 format of the country code of the phone number. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Phone Number Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/phone-number-validation"> Documentation</a>
     */
    public okhttp3.Call validatePhoneGetCall(String key, String phone, String countryCode, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validatePhone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatePhoneGetValidateBeforeCall(String key, String phone, String countryCode, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling validatePhoneGet(Async)");
        }

        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling validatePhoneGet(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling validatePhoneGet(Async)");
        }

        return validatePhoneGetCall(key, phone, countryCode, format, _callback);

    }

    /**
     * 
     * This method can be used as an extra-layer of your system for validating phone numbers.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param phone The Phone Number you want to validate. (required)
     * @param countryCode The ISO 3166-1 alpha-2 format of the country code of the phone number. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Phone Number Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/phone-number-validation"> Documentation</a>
     */
    public void validatePhoneGet(String key, String phone, String countryCode, String format) throws ApiException {
        validatePhoneGetWithHttpInfo(key, phone, countryCode, format);
    }

    /**
     * 
     * This method can be used as an extra-layer of your system for validating phone numbers.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param phone The Phone Number you want to validate. (required)
     * @param countryCode The ISO 3166-1 alpha-2 format of the country code of the phone number. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Phone Number Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/phone-number-validation"> Documentation</a>
     */
    public ApiResponse<Void> validatePhoneGetWithHttpInfo(String key, String phone, String countryCode, String format) throws ApiException {
        okhttp3.Call localVarCall = validatePhoneGetValidateBeforeCall(key, phone, countryCode, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This method can be used as an extra-layer of your system for validating phone numbers.
     * @param key Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don&#39;t have an account yet, please create new account first. (required)
     * @param phone The Phone Number you want to validate. (required)
     * @param countryCode The ISO 3166-1 alpha-2 format of the country code of the phone number. (required)
     * @param format Sets the format of the API response. JSON is the default format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     * Greip API - Phone Number Validation
     * @see <a href="https://docs.greip.io/methods/data-validation/phone-number-validation"> Documentation</a>
     */
    public okhttp3.Call validatePhoneGetAsync(String key, String phone, String countryCode, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatePhoneGetValidateBeforeCall(key, phone, countryCode, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
