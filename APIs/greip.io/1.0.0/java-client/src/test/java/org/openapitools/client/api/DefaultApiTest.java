/*
 * Greip API
 * This documentation shows how to use Greip API, by highlighting the API methods, options and some other features that allow you to get the most of this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@greip.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aSNLookupGetTest() throws ApiException {
        String key = null;
        String asn = null;
        String isList = null;
        String format = null;
        api.aSNLookupGet(key, asn, isList, format);
        // TODO: test validations
    }

    /**
     * This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bINLookupGetTest() throws ApiException {
        String key = null;
        String bin = null;
        String format = null;
        api.bINLookupGet(key, bin, format);
        // TODO: test validations
    }

    /**
     * badWords endpoint: Detects whether user inputs contain profanity or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void badWordsGetTest() throws ApiException {
        String key = null;
        String text = null;
        String listBadWords = null;
        String scoreOnly = null;
        String format = null;
        api.badWordsGet(key, text, listBadWords, scoreOnly, format);
        // TODO: test validations
    }

    /**
     * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkLookupGetTest() throws ApiException {
        String key = null;
        String ips = null;
        String params = null;
        String lang = null;
        String format = null;
        api.bulkLookupGet(key, ips, params, lang, format);
        // TODO: test validations
    }

    /**
     * Country endpoint: Returns the information of a specific country by passing the &#x60;countrCode&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countryGetTest() throws ApiException {
        String key = null;
        String countryCode = null;
        String params = null;
        String lang = null;
        String format = null;
        api.countryGet(key, countryCode, params, lang, format);
        // TODO: test validations
    }

    /**
     * Returns the geolocation data of the visitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void geoIPGetTest() throws ApiException {
        String key = null;
        String params = null;
        String lang = null;
        String format = null;
        api.geoIPGet(key, params, lang, format);
        // TODO: test validations
    }

    /**
     * Returns the geolocation data of a specific IP Address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iPLookupGetTest() throws ApiException {
        String key = null;
        String ip = null;
        String params = null;
        String lang = null;
        String format = null;
        api.iPLookupGet(key, ip, params, lang, format);
        // TODO: test validations
    }

    /**
     * This method can be used as an extra-layer of your system for validating email addresses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateEmailGetTest() throws ApiException {
        String key = null;
        String email = null;
        String format = null;
        api.validateEmailGet(key, email, format);
        // TODO: test validations
    }

    /**
     * This method can be used as an extra-layer of your system for validating phone numbers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validatePhoneGetTest() throws ApiException {
        String key = null;
        String phone = null;
        String countryCode = null;
        String format = null;
        api.validatePhoneGet(key, phone, countryCode, format);
        // TODO: test validations
    }

}
