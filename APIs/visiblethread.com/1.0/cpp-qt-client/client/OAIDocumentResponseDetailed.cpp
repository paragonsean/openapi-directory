/**
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentResponseDetailed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentResponseDetailed::OAIDocumentResponseDetailed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentResponseDetailed::OAIDocumentResponseDetailed() {
    this->initializeModel();
}

OAIDocumentResponseDetailed::~OAIDocumentResponseDetailed() {}

void OAIDocumentResponseDetailed::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_eta_isSet = false;
    m_eta_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_paragraphs_isSet = false;
    m_paragraphs_isValid = false;

    m_scan_settings_isSet = false;
    m_scan_settings_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDocumentResponseDetailed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentResponseDetailed::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_eta_isValid = ::OpenAPI::fromJsonValue(m_eta, json[QString("eta")]);
    m_eta_isSet = !json[QString("eta")].isNull() && m_eta_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_paragraphs_isValid = ::OpenAPI::fromJsonValue(m_paragraphs, json[QString("paragraphs")]);
    m_paragraphs_isSet = !json[QString("paragraphs")].isNull() && m_paragraphs_isValid;

    m_scan_settings_isValid = ::OpenAPI::fromJsonValue(m_scan_settings, json[QString("scanSettings")]);
    m_scan_settings_isSet = !json[QString("scanSettings")].isNull() && m_scan_settings_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDocumentResponseDetailed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentResponseDetailed::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_eta_isSet) {
        obj.insert(QString("eta"), ::OpenAPI::toJsonValue(m_eta));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_paragraphs.size() > 0) {
        obj.insert(QString("paragraphs"), ::OpenAPI::toJsonValue(m_paragraphs));
    }
    if (m_scan_settings.isSet()) {
        obj.insert(QString("scanSettings"), ::OpenAPI::toJsonValue(m_scan_settings));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIDocumentResponseDetailed::getCompleted() const {
    return m_completed;
}
void OAIDocumentResponseDetailed::setCompleted(const QDateTime &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIDocumentResponseDetailed::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIDocumentResponseDetailed::is_completed_Valid() const{
    return m_completed_isValid;
}

QDateTime OAIDocumentResponseDetailed::getEta() const {
    return m_eta;
}
void OAIDocumentResponseDetailed::setEta(const QDateTime &eta) {
    m_eta = eta;
    m_eta_isSet = true;
}

bool OAIDocumentResponseDetailed::is_eta_Set() const{
    return m_eta_isSet;
}

bool OAIDocumentResponseDetailed::is_eta_Valid() const{
    return m_eta_isValid;
}

qint64 OAIDocumentResponseDetailed::getId() const {
    return m_id;
}
void OAIDocumentResponseDetailed::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentResponseDetailed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentResponseDetailed::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIDocumentResponseDetailed_paragraphs_inner> OAIDocumentResponseDetailed::getParagraphs() const {
    return m_paragraphs;
}
void OAIDocumentResponseDetailed::setParagraphs(const QList<OAIDocumentResponseDetailed_paragraphs_inner> &paragraphs) {
    m_paragraphs = paragraphs;
    m_paragraphs_isSet = true;
}

bool OAIDocumentResponseDetailed::is_paragraphs_Set() const{
    return m_paragraphs_isSet;
}

bool OAIDocumentResponseDetailed::is_paragraphs_Valid() const{
    return m_paragraphs_isValid;
}

OAIDocumentResponseDetailed_scanSettings OAIDocumentResponseDetailed::getScanSettings() const {
    return m_scan_settings;
}
void OAIDocumentResponseDetailed::setScanSettings(const OAIDocumentResponseDetailed_scanSettings &scan_settings) {
    m_scan_settings = scan_settings;
    m_scan_settings_isSet = true;
}

bool OAIDocumentResponseDetailed::is_scan_settings_Set() const{
    return m_scan_settings_isSet;
}

bool OAIDocumentResponseDetailed::is_scan_settings_Valid() const{
    return m_scan_settings_isValid;
}

QDateTime OAIDocumentResponseDetailed::getStarted() const {
    return m_started;
}
void OAIDocumentResponseDetailed::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIDocumentResponseDetailed::is_started_Set() const{
    return m_started_isSet;
}

bool OAIDocumentResponseDetailed::is_started_Valid() const{
    return m_started_isValid;
}

OAIStats OAIDocumentResponseDetailed::getStats() const {
    return m_stats;
}
void OAIDocumentResponseDetailed::setStats(const OAIStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIDocumentResponseDetailed::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIDocumentResponseDetailed::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIDocumentResponseDetailed::getTitle() const {
    return m_title;
}
void OAIDocumentResponseDetailed::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDocumentResponseDetailed::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDocumentResponseDetailed::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDocumentResponseDetailed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraphs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentResponseDetailed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
