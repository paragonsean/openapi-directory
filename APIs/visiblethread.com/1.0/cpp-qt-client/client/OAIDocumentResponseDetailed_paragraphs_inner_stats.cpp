/**
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentResponseDetailed_paragraphs_inner_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentResponseDetailed_paragraphs_inner_stats::OAIDocumentResponseDetailed_paragraphs_inner_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentResponseDetailed_paragraphs_inner_stats::OAIDocumentResponseDetailed_paragraphs_inner_stats() {
    this->initializeModel();
}

OAIDocumentResponseDetailed_paragraphs_inner_stats::~OAIDocumentResponseDetailed_paragraphs_inner_stats() {}

void OAIDocumentResponseDetailed_paragraphs_inner_stats::initializeModel() {

    m_adverbs_isSet = false;
    m_adverbs_isValid = false;

    m_hidden_verbs_isSet = false;
    m_hidden_verbs_isValid = false;

    m_long_sentences_isSet = false;
    m_long_sentences_isValid = false;

    m_passives_isSet = false;
    m_passives_isValid = false;

    m_very_long_sentences_isSet = false;
    m_very_long_sentences_isValid = false;
}

void OAIDocumentResponseDetailed_paragraphs_inner_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentResponseDetailed_paragraphs_inner_stats::fromJsonObject(QJsonObject json) {

    if(json["adverbs"].isArray()){
        auto arr = json["adverbs"].toArray();
        m_adverbs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIAdverbs_inner> item;
                m_adverbs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_adverbs_isSet = !jval.isNull() && m_adverbs_isValid;
                m_adverbs.push_back(item);
            }
        }
    }

    if(json["hiddenVerbs"].isArray()){
        auto arr = json["hiddenVerbs"].toArray();
        m_hidden_verbs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIHiddenVerbs_inner> item;
                m_hidden_verbs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_hidden_verbs_isSet = !jval.isNull() && m_hidden_verbs_isValid;
                m_hidden_verbs.push_back(item);
            }
        }
    }

    if(json["longSentences"].isArray()){
        auto arr = json["longSentences"].toArray();
        m_long_sentences_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAILongSentences_inner> item;
                m_long_sentences_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_long_sentences_isSet = !jval.isNull() && m_long_sentences_isValid;
                m_long_sentences.push_back(item);
            }
        }
    }

    if(json["passives"].isArray()){
        auto arr = json["passives"].toArray();
        m_passives_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIPassives_inner> item;
                m_passives_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_passives_isSet = !jval.isNull() && m_passives_isValid;
                m_passives.push_back(item);
            }
        }
    }

    if(json["veryLongSentences"].isArray()){
        auto arr = json["veryLongSentences"].toArray();
        m_very_long_sentences_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIVeryLongSentences_inner> item;
                m_very_long_sentences_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_very_long_sentences_isSet = !jval.isNull() && m_very_long_sentences_isValid;
                m_very_long_sentences.push_back(item);
            }
        }
    }
}

QString OAIDocumentResponseDetailed_paragraphs_inner_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentResponseDetailed_paragraphs_inner_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_adverbs.size() > 0) {
        
        obj.insert(QString("adverbs"), toJsonValue(m_adverbs));
    }
    if (m_hidden_verbs.size() > 0) {
        
        obj.insert(QString("hiddenVerbs"), toJsonValue(m_hidden_verbs));
    }
    if (m_long_sentences.size() > 0) {
        
        obj.insert(QString("longSentences"), toJsonValue(m_long_sentences));
    }
    if (m_passives.size() > 0) {
        
        obj.insert(QString("passives"), toJsonValue(m_passives));
    }
    if (m_very_long_sentences.size() > 0) {
        
        obj.insert(QString("veryLongSentences"), toJsonValue(m_very_long_sentences));
    }
    return obj;
}

QList<QList> OAIDocumentResponseDetailed_paragraphs_inner_stats::getAdverbs() const {
    return m_adverbs;
}
void OAIDocumentResponseDetailed_paragraphs_inner_stats::setAdverbs(const QList<QList> &adverbs) {
    m_adverbs = adverbs;
    m_adverbs_isSet = true;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_adverbs_Set() const{
    return m_adverbs_isSet;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_adverbs_Valid() const{
    return m_adverbs_isValid;
}

QList<QList> OAIDocumentResponseDetailed_paragraphs_inner_stats::getHiddenVerbs() const {
    return m_hidden_verbs;
}
void OAIDocumentResponseDetailed_paragraphs_inner_stats::setHiddenVerbs(const QList<QList> &hidden_verbs) {
    m_hidden_verbs = hidden_verbs;
    m_hidden_verbs_isSet = true;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_hidden_verbs_Set() const{
    return m_hidden_verbs_isSet;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_hidden_verbs_Valid() const{
    return m_hidden_verbs_isValid;
}

QList<QList> OAIDocumentResponseDetailed_paragraphs_inner_stats::getLongSentences() const {
    return m_long_sentences;
}
void OAIDocumentResponseDetailed_paragraphs_inner_stats::setLongSentences(const QList<QList> &long_sentences) {
    m_long_sentences = long_sentences;
    m_long_sentences_isSet = true;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_long_sentences_Set() const{
    return m_long_sentences_isSet;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_long_sentences_Valid() const{
    return m_long_sentences_isValid;
}

QList<QList> OAIDocumentResponseDetailed_paragraphs_inner_stats::getPassives() const {
    return m_passives;
}
void OAIDocumentResponseDetailed_paragraphs_inner_stats::setPassives(const QList<QList> &passives) {
    m_passives = passives;
    m_passives_isSet = true;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_passives_Set() const{
    return m_passives_isSet;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_passives_Valid() const{
    return m_passives_isValid;
}

QList<QList> OAIDocumentResponseDetailed_paragraphs_inner_stats::getVeryLongSentences() const {
    return m_very_long_sentences;
}
void OAIDocumentResponseDetailed_paragraphs_inner_stats::setVeryLongSentences(const QList<QList> &very_long_sentences) {
    m_very_long_sentences = very_long_sentences;
    m_very_long_sentences_isSet = true;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_very_long_sentences_Set() const{
    return m_very_long_sentences_isSet;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::is_very_long_sentences_Valid() const{
    return m_very_long_sentences_isValid;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adverbs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_verbs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_sentences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_passives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_very_long_sentences.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentResponseDetailed_paragraphs_inner_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
