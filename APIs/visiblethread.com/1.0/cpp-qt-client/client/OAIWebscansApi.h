/**
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebscansApi_H
#define OAI_OAIWebscansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINewScan.h"
#include "OAINewScanResponse.h"
#include "OAIScanResponseDetailed.h"
#include "OAIScanResponseSummary.h"
#include "OAIWebResponseNotReady.h"
#include "OAIWebUrlDetail.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebscansApi : public QObject {
    Q_OBJECT

public:
    OAIWebscansApi(const int timeOut = 0);
    ~OAIWebscansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scan_id qint64 [required]
    */
    virtual void getScanById(const qint64 &scan_id);

    /**
    * @param[in]  scan_id qint64 [required]
    * @param[in]  url_id qint64 [required]
    */
    virtual void getScanUrlById(const qint64 &scan_id, const qint64 &url_id);

    /**
    * @param[in]  body OAINewScan [required]
    */
    virtual void runScan(const OAINewScan &body);


    virtual void webscansGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getScanByIdCallback(OAIHttpRequestWorker *worker);
    void getScanUrlByIdCallback(OAIHttpRequestWorker *worker);
    void runScanCallback(OAIHttpRequestWorker *worker);
    void webscansGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getScanByIdSignal(OAIScanResponseDetailed summary);
    void getScanUrlByIdSignal(OAIWebUrlDetail summary);
    void runScanSignal(OAINewScanResponse summary);
    void webscansGetSignal(QList<OAIScanResponseSummary> summary);


    void getScanByIdSignalFull(OAIHttpRequestWorker *worker, OAIScanResponseDetailed summary);
    void getScanUrlByIdSignalFull(OAIHttpRequestWorker *worker, OAIWebUrlDetail summary);
    void runScanSignalFull(OAIHttpRequestWorker *worker, OAINewScanResponse summary);
    void webscansGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIScanResponseSummary> summary);

    Q_DECL_DEPRECATED_X("Use getScanByIdSignalError() instead")
    void getScanByIdSignalE(OAIScanResponseDetailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScanByIdSignalError(OAIScanResponseDetailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScanUrlByIdSignalError() instead")
    void getScanUrlByIdSignalE(OAIWebUrlDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScanUrlByIdSignalError(OAIWebUrlDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runScanSignalError() instead")
    void runScanSignalE(OAINewScanResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runScanSignalError(OAINewScanResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webscansGetSignalError() instead")
    void webscansGetSignalE(QList<OAIScanResponseSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webscansGetSignalError(QList<OAIScanResponseSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getScanByIdSignalErrorFull() instead")
    void getScanByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScanByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScanUrlByIdSignalErrorFull() instead")
    void getScanUrlByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScanUrlByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runScanSignalErrorFull() instead")
    void runScanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runScanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webscansGetSignalErrorFull() instead")
    void webscansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webscansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
