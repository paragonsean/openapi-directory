/**
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewScan from '../model/NewScan';
import NewScanResponse from '../model/NewScanResponse';
import ScanResponseDetailed from '../model/ScanResponseDetailed';
import ScanResponseSummary from '../model/ScanResponseSummary';
import WebResponseNotReady from '../model/WebResponseNotReady';
import WebUrlDetail from '../model/WebUrlDetail';

/**
* Webscans service.
* @module api/WebscansApi
* @version 1.0
*/
export default class WebscansApi {

    /**
    * Constructs a new WebscansApi. 
    * @alias module:api/WebscansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getScanById operation.
     * @callback module:api/WebscansApi~getScanByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScanResponseDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from a previously run scan
     * Get data from a previously run scan, identified by **scanId**
     * @param {Number} scanId Id of scan to fetch
     * @param {module:api/WebscansApi~getScanByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScanResponseDetailed}
     */
    getScanById(scanId, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling getScanById");
      }

      let pathParams = {
        'scanId': scanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScanResponseDetailed;
      return this.apiClient.callApi(
        '/webscans/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScanUrlById operation.
     * @callback module:api/WebscansApi~getScanUrlByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebUrlDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets data for a particular scan/webUrl
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** & **urlId**
     * @param {Number} scanId Id of scan
     * @param {Number} urlId Id of url to fetch
     * @param {module:api/WebscansApi~getScanUrlByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebUrlDetail}
     */
    getScanUrlById(scanId, urlId, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling getScanUrlById");
      }
      // verify the required parameter 'urlId' is set
      if (urlId === undefined || urlId === null) {
        throw new Error("Missing the required parameter 'urlId' when calling getScanUrlById");
      }

      let pathParams = {
        'scanId': scanId,
        'urlId': urlId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebUrlDetail;
      return this.apiClient.callApi(
        '/webscans/{scanId}/webUrls/{urlId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runScan operation.
     * @callback module:api/WebscansApi~runScanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewScanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a new scan
     * The scan runs in the background but returns immediately with a JSON response containing an \"id\" that represents your scan.         You can use this id in other requests to retrieve your scan result.   Also, an \"id\" is returned for each url which can be used to retrieve detailed results for individual scan urls. 
     * @param {module:model/NewScan} body Scan title and webUrls to analyze
     * @param {module:api/WebscansApi~runScanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewScanResponse}
     */
    runScan(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runScan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewScanResponse;
      return this.apiClient.callApi(
        '/webscans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webscansGet operation.
     * @callback module:api/WebscansApi~webscansGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScanResponseSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your list of scans
     * Get your list of scans
     * @param {module:api/WebscansApi~webscansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScanResponseSummary>}
     */
    webscansGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScanResponseSummary];
      return this.apiClient.callApi(
        '/webscans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
