/**
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AdverbsInner from './model/AdverbsInner';
import Analysis from './model/Analysis';
import DocumentListSummary from './model/DocumentListSummary';
import DocumentResponseDetailed from './model/DocumentResponseDetailed';
import DocumentResponseDetailedParagraphsInner from './model/DocumentResponseDetailedParagraphsInner';
import DocumentResponseDetailedParagraphsInnerStats from './model/DocumentResponseDetailedParagraphsInnerStats';
import DocumentResponseDetailedScanSettings from './model/DocumentResponseDetailedScanSettings';
import DocumentResponseNotReady from './model/DocumentResponseNotReady';
import HiddenVerbsInner from './model/HiddenVerbsInner';
import LongSentencesInner from './model/LongSentencesInner';
import NewDocumentResponse from './model/NewDocumentResponse';
import NewScan from './model/NewScan';
import NewScanResponse from './model/NewScanResponse';
import NewScanResponseWebUrlsInner from './model/NewScanResponseWebUrlsInner';
import NewScanScanSettings from './model/NewScanScanSettings';
import NewScanWebUrlsInner from './model/NewScanWebUrlsInner';
import PassivesInner from './model/PassivesInner';
import ScanDetailed from './model/ScanDetailed';
import ScanResponseDetailed from './model/ScanResponseDetailed';
import ScanResponseSummary from './model/ScanResponseSummary';
import ScanSummary from './model/ScanSummary';
import Search from './model/Search';
import Stats from './model/Stats';
import VeryLongSentencesInner from './model/VeryLongSentencesInner';
import WebResponseNotReady from './model/WebResponseNotReady';
import WebUrl from './model/WebUrl';
import WebUrlDetail from './model/WebUrlDetail';
import WebUrlHeader from './model/WebUrlHeader';
import DocumentsApi from './api/DocumentsApi';
import WebscansApi from './api/WebscansApi';


/**
* ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify &amp; highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \&quot;id\&quot; that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \&quot;id\&quot; that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a &#39;dictionary&#39;. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\&quot; . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation &amp; a form to try out each operation..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var VisibleThreadApi = require('index'); // See note below*.
* var xxxSvc = new VisibleThreadApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new VisibleThreadApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new VisibleThreadApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new VisibleThreadApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AdverbsInner model constructor.
     * @property {module:model/AdverbsInner}
     */
    AdverbsInner,

    /**
     * The Analysis model constructor.
     * @property {module:model/Analysis}
     */
    Analysis,

    /**
     * The DocumentListSummary model constructor.
     * @property {module:model/DocumentListSummary}
     */
    DocumentListSummary,

    /**
     * The DocumentResponseDetailed model constructor.
     * @property {module:model/DocumentResponseDetailed}
     */
    DocumentResponseDetailed,

    /**
     * The DocumentResponseDetailedParagraphsInner model constructor.
     * @property {module:model/DocumentResponseDetailedParagraphsInner}
     */
    DocumentResponseDetailedParagraphsInner,

    /**
     * The DocumentResponseDetailedParagraphsInnerStats model constructor.
     * @property {module:model/DocumentResponseDetailedParagraphsInnerStats}
     */
    DocumentResponseDetailedParagraphsInnerStats,

    /**
     * The DocumentResponseDetailedScanSettings model constructor.
     * @property {module:model/DocumentResponseDetailedScanSettings}
     */
    DocumentResponseDetailedScanSettings,

    /**
     * The DocumentResponseNotReady model constructor.
     * @property {module:model/DocumentResponseNotReady}
     */
    DocumentResponseNotReady,

    /**
     * The HiddenVerbsInner model constructor.
     * @property {module:model/HiddenVerbsInner}
     */
    HiddenVerbsInner,

    /**
     * The LongSentencesInner model constructor.
     * @property {module:model/LongSentencesInner}
     */
    LongSentencesInner,

    /**
     * The NewDocumentResponse model constructor.
     * @property {module:model/NewDocumentResponse}
     */
    NewDocumentResponse,

    /**
     * The NewScan model constructor.
     * @property {module:model/NewScan}
     */
    NewScan,

    /**
     * The NewScanResponse model constructor.
     * @property {module:model/NewScanResponse}
     */
    NewScanResponse,

    /**
     * The NewScanResponseWebUrlsInner model constructor.
     * @property {module:model/NewScanResponseWebUrlsInner}
     */
    NewScanResponseWebUrlsInner,

    /**
     * The NewScanScanSettings model constructor.
     * @property {module:model/NewScanScanSettings}
     */
    NewScanScanSettings,

    /**
     * The NewScanWebUrlsInner model constructor.
     * @property {module:model/NewScanWebUrlsInner}
     */
    NewScanWebUrlsInner,

    /**
     * The PassivesInner model constructor.
     * @property {module:model/PassivesInner}
     */
    PassivesInner,

    /**
     * The ScanDetailed model constructor.
     * @property {module:model/ScanDetailed}
     */
    ScanDetailed,

    /**
     * The ScanResponseDetailed model constructor.
     * @property {module:model/ScanResponseDetailed}
     */
    ScanResponseDetailed,

    /**
     * The ScanResponseSummary model constructor.
     * @property {module:model/ScanResponseSummary}
     */
    ScanResponseSummary,

    /**
     * The ScanSummary model constructor.
     * @property {module:model/ScanSummary}
     */
    ScanSummary,

    /**
     * The Search model constructor.
     * @property {module:model/Search}
     */
    Search,

    /**
     * The Stats model constructor.
     * @property {module:model/Stats}
     */
    Stats,

    /**
     * The VeryLongSentencesInner model constructor.
     * @property {module:model/VeryLongSentencesInner}
     */
    VeryLongSentencesInner,

    /**
     * The WebResponseNotReady model constructor.
     * @property {module:model/WebResponseNotReady}
     */
    WebResponseNotReady,

    /**
     * The WebUrl model constructor.
     * @property {module:model/WebUrl}
     */
    WebUrl,

    /**
     * The WebUrlDetail model constructor.
     * @property {module:model/WebUrlDetail}
     */
    WebUrlDetail,

    /**
     * The WebUrlHeader model constructor.
     * @property {module:model/WebUrlHeader}
     */
    WebUrlHeader,

    /**
    * The DocumentsApi service constructor.
    * @property {module:api/DocumentsApi}
    */
    DocumentsApi,

    /**
    * The WebscansApi service constructor.
    * @property {module:api/WebscansApi}
    */
    WebscansApi
};
