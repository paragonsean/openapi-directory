# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_scan_response_web_urls_inner import NewScanResponseWebUrlsInner
from openapi_server import util


class NewScanResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, title: str=None, web_urls: List[NewScanResponseWebUrlsInner]=None):
        """NewScanResponse - a model defined in OpenAPI

        :param id: The id of this NewScanResponse.
        :param title: The title of this NewScanResponse.
        :param web_urls: The web_urls of this NewScanResponse.
        """
        self.openapi_types = {
            'id': int,
            'title': str,
            'web_urls': List[NewScanResponseWebUrlsInner]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'web_urls': 'webUrls'
        }

        self._id = id
        self._title = title
        self._web_urls = web_urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewScanResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewScanResponse of this NewScanResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NewScanResponse.


        :return: The id of this NewScanResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewScanResponse.


        :param id: The id of this NewScanResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """Gets the title of this NewScanResponse.


        :return: The title of this NewScanResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewScanResponse.


        :param title: The title of this NewScanResponse.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def web_urls(self):
        """Gets the web_urls of this NewScanResponse.


        :return: The web_urls of this NewScanResponse.
        :rtype: List[NewScanResponseWebUrlsInner]
        """
        return self._web_urls

    @web_urls.setter
    def web_urls(self, web_urls):
        """Sets the web_urls of this NewScanResponse.


        :param web_urls: The web_urls of this NewScanResponse.
        :type web_urls: List[NewScanResponseWebUrlsInner]
        """
        if web_urls is None:
            raise ValueError("Invalid value for `web_urls`, must not be `None`")

        self._web_urls = web_urls
