# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_response_detailed_scan_settings import DocumentResponseDetailedScanSettings
from openapi_server import util


class NewDocumentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doc_id: int=None, scan_settings: DocumentResponseDetailedScanSettings=None, task: str=None):
        """NewDocumentResponse - a model defined in OpenAPI

        :param doc_id: The doc_id of this NewDocumentResponse.
        :param scan_settings: The scan_settings of this NewDocumentResponse.
        :param task: The task of this NewDocumentResponse.
        """
        self.openapi_types = {
            'doc_id': int,
            'scan_settings': DocumentResponseDetailedScanSettings,
            'task': str
        }

        self.attribute_map = {
            'doc_id': 'docId',
            'scan_settings': 'scanSettings',
            'task': 'task'
        }

        self._doc_id = doc_id
        self._scan_settings = scan_settings
        self._task = task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewDocumentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewDocumentResponse of this NewDocumentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_id(self):
        """Gets the doc_id of this NewDocumentResponse.


        :return: The doc_id of this NewDocumentResponse.
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this NewDocumentResponse.


        :param doc_id: The doc_id of this NewDocumentResponse.
        :type doc_id: int
        """
        if doc_id is None:
            raise ValueError("Invalid value for `doc_id`, must not be `None`")

        self._doc_id = doc_id

    @property
    def scan_settings(self):
        """Gets the scan_settings of this NewDocumentResponse.


        :return: The scan_settings of this NewDocumentResponse.
        :rtype: DocumentResponseDetailedScanSettings
        """
        return self._scan_settings

    @scan_settings.setter
    def scan_settings(self, scan_settings):
        """Sets the scan_settings of this NewDocumentResponse.


        :param scan_settings: The scan_settings of this NewDocumentResponse.
        :type scan_settings: DocumentResponseDetailedScanSettings
        """
        if scan_settings is None:
            raise ValueError("Invalid value for `scan_settings`, must not be `None`")

        self._scan_settings = scan_settings

    @property
    def task(self):
        """Gets the task of this NewDocumentResponse.


        :return: The task of this NewDocumentResponse.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this NewDocumentResponse.


        :param task: The task of this NewDocumentResponse.
        :type task: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task
