# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_response_detailed_paragraphs_inner import DocumentResponseDetailedParagraphsInner
from openapi_server.models.stats import Stats
from openapi_server import util


class WebUrlDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, paragraphs: List[DocumentResponseDetailedParagraphsInner]=None, stats: Stats=None, title: str=None, url: str=None):
        """WebUrlDetail - a model defined in OpenAPI

        :param paragraphs: The paragraphs of this WebUrlDetail.
        :param stats: The stats of this WebUrlDetail.
        :param title: The title of this WebUrlDetail.
        :param url: The url of this WebUrlDetail.
        """
        self.openapi_types = {
            'paragraphs': List[DocumentResponseDetailedParagraphsInner],
            'stats': Stats,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'paragraphs': 'paragraphs',
            'stats': 'stats',
            'title': 'title',
            'url': 'url'
        }

        self._paragraphs = paragraphs
        self._stats = stats
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebUrlDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebUrlDetail of this WebUrlDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paragraphs(self):
        """Gets the paragraphs of this WebUrlDetail.


        :return: The paragraphs of this WebUrlDetail.
        :rtype: List[DocumentResponseDetailedParagraphsInner]
        """
        return self._paragraphs

    @paragraphs.setter
    def paragraphs(self, paragraphs):
        """Sets the paragraphs of this WebUrlDetail.


        :param paragraphs: The paragraphs of this WebUrlDetail.
        :type paragraphs: List[DocumentResponseDetailedParagraphsInner]
        """

        self._paragraphs = paragraphs

    @property
    def stats(self):
        """Gets the stats of this WebUrlDetail.


        :return: The stats of this WebUrlDetail.
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this WebUrlDetail.


        :param stats: The stats of this WebUrlDetail.
        :type stats: Stats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def title(self):
        """Gets the title of this WebUrlDetail.


        :return: The title of this WebUrlDetail.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WebUrlDetail.


        :param title: The title of this WebUrlDetail.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this WebUrlDetail.


        :return: The url of this WebUrlDetail.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebUrlDetail.


        :param url: The url of this WebUrlDetail.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
