# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Stats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_sentence_length: int=None, flesch_kincaid_grade_level: float=None, flesch_reading_level: int=None, long_sentence_count: int=None, passive_sentence_count: int=None, sentence_count: int=None, word_count: int=None):
        """Stats - a model defined in OpenAPI

        :param avg_sentence_length: The avg_sentence_length of this Stats.
        :param flesch_kincaid_grade_level: The flesch_kincaid_grade_level of this Stats.
        :param flesch_reading_level: The flesch_reading_level of this Stats.
        :param long_sentence_count: The long_sentence_count of this Stats.
        :param passive_sentence_count: The passive_sentence_count of this Stats.
        :param sentence_count: The sentence_count of this Stats.
        :param word_count: The word_count of this Stats.
        """
        self.openapi_types = {
            'avg_sentence_length': int,
            'flesch_kincaid_grade_level': float,
            'flesch_reading_level': int,
            'long_sentence_count': int,
            'passive_sentence_count': int,
            'sentence_count': int,
            'word_count': int
        }

        self.attribute_map = {
            'avg_sentence_length': 'avgSentenceLength',
            'flesch_kincaid_grade_level': 'fleschKincaidGradeLevel',
            'flesch_reading_level': 'fleschReadingLevel',
            'long_sentence_count': 'longSentenceCount',
            'passive_sentence_count': 'passiveSentenceCount',
            'sentence_count': 'sentenceCount',
            'word_count': 'wordCount'
        }

        self._avg_sentence_length = avg_sentence_length
        self._flesch_kincaid_grade_level = flesch_kincaid_grade_level
        self._flesch_reading_level = flesch_reading_level
        self._long_sentence_count = long_sentence_count
        self._passive_sentence_count = passive_sentence_count
        self._sentence_count = sentence_count
        self._word_count = word_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stats of this Stats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_sentence_length(self):
        """Gets the avg_sentence_length of this Stats.


        :return: The avg_sentence_length of this Stats.
        :rtype: int
        """
        return self._avg_sentence_length

    @avg_sentence_length.setter
    def avg_sentence_length(self, avg_sentence_length):
        """Sets the avg_sentence_length of this Stats.


        :param avg_sentence_length: The avg_sentence_length of this Stats.
        :type avg_sentence_length: int
        """

        self._avg_sentence_length = avg_sentence_length

    @property
    def flesch_kincaid_grade_level(self):
        """Gets the flesch_kincaid_grade_level of this Stats.


        :return: The flesch_kincaid_grade_level of this Stats.
        :rtype: float
        """
        return self._flesch_kincaid_grade_level

    @flesch_kincaid_grade_level.setter
    def flesch_kincaid_grade_level(self, flesch_kincaid_grade_level):
        """Sets the flesch_kincaid_grade_level of this Stats.


        :param flesch_kincaid_grade_level: The flesch_kincaid_grade_level of this Stats.
        :type flesch_kincaid_grade_level: float
        """

        self._flesch_kincaid_grade_level = flesch_kincaid_grade_level

    @property
    def flesch_reading_level(self):
        """Gets the flesch_reading_level of this Stats.


        :return: The flesch_reading_level of this Stats.
        :rtype: int
        """
        return self._flesch_reading_level

    @flesch_reading_level.setter
    def flesch_reading_level(self, flesch_reading_level):
        """Sets the flesch_reading_level of this Stats.


        :param flesch_reading_level: The flesch_reading_level of this Stats.
        :type flesch_reading_level: int
        """

        self._flesch_reading_level = flesch_reading_level

    @property
    def long_sentence_count(self):
        """Gets the long_sentence_count of this Stats.


        :return: The long_sentence_count of this Stats.
        :rtype: int
        """
        return self._long_sentence_count

    @long_sentence_count.setter
    def long_sentence_count(self, long_sentence_count):
        """Sets the long_sentence_count of this Stats.


        :param long_sentence_count: The long_sentence_count of this Stats.
        :type long_sentence_count: int
        """

        self._long_sentence_count = long_sentence_count

    @property
    def passive_sentence_count(self):
        """Gets the passive_sentence_count of this Stats.


        :return: The passive_sentence_count of this Stats.
        :rtype: int
        """
        return self._passive_sentence_count

    @passive_sentence_count.setter
    def passive_sentence_count(self, passive_sentence_count):
        """Sets the passive_sentence_count of this Stats.


        :param passive_sentence_count: The passive_sentence_count of this Stats.
        :type passive_sentence_count: int
        """

        self._passive_sentence_count = passive_sentence_count

    @property
    def sentence_count(self):
        """Gets the sentence_count of this Stats.


        :return: The sentence_count of this Stats.
        :rtype: int
        """
        return self._sentence_count

    @sentence_count.setter
    def sentence_count(self, sentence_count):
        """Sets the sentence_count of this Stats.


        :param sentence_count: The sentence_count of this Stats.
        :type sentence_count: int
        """

        self._sentence_count = sentence_count

    @property
    def word_count(self):
        """Gets the word_count of this Stats.


        :return: The word_count of this Stats.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this Stats.


        :param word_count: The word_count of this Stats.
        :type word_count: int
        """

        self._word_count = word_count
