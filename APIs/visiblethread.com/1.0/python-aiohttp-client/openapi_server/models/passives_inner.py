# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PassivesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: int=None, passive_piece: str=None, start: int=None, verb: str=None):
        """PassivesInner - a model defined in OpenAPI

        :param end: The end of this PassivesInner.
        :param passive_piece: The passive_piece of this PassivesInner.
        :param start: The start of this PassivesInner.
        :param verb: The verb of this PassivesInner.
        """
        self.openapi_types = {
            'end': int,
            'passive_piece': str,
            'start': int,
            'verb': str
        }

        self.attribute_map = {
            'end': 'end',
            'passive_piece': 'passivePiece',
            'start': 'start',
            'verb': 'verb'
        }

        self._end = end
        self._passive_piece = passive_piece
        self._start = start
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassivesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Passives_inner of this PassivesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this PassivesInner.


        :return: The end of this PassivesInner.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PassivesInner.


        :param end: The end of this PassivesInner.
        :type end: int
        """

        self._end = end

    @property
    def passive_piece(self):
        """Gets the passive_piece of this PassivesInner.


        :return: The passive_piece of this PassivesInner.
        :rtype: str
        """
        return self._passive_piece

    @passive_piece.setter
    def passive_piece(self, passive_piece):
        """Sets the passive_piece of this PassivesInner.


        :param passive_piece: The passive_piece of this PassivesInner.
        :type passive_piece: str
        """

        self._passive_piece = passive_piece

    @property
    def start(self):
        """Gets the start of this PassivesInner.


        :return: The start of this PassivesInner.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PassivesInner.


        :param start: The start of this PassivesInner.
        :type start: int
        """

        self._start = start

    @property
    def verb(self):
        """Gets the verb of this PassivesInner.


        :return: The verb of this PassivesInner.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this PassivesInner.


        :param verb: The verb of this PassivesInner.
        :type verb: str
        """

        self._verb = verb
