/*
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdverbsInner;
import org.openapitools.client.model.HiddenVerbsInner;
import org.openapitools.client.model.LongSentencesInner;
import org.openapitools.client.model.PassivesInner;
import org.openapitools.client.model.VeryLongSentencesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentResponseDetailedParagraphsInnerStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:05.975704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentResponseDetailedParagraphsInnerStats {
  public static final String SERIALIZED_NAME_ADVERBS = "adverbs";
  @SerializedName(SERIALIZED_NAME_ADVERBS)
  private List<List<AdverbsInner>> adverbs = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDDEN_VERBS = "hiddenVerbs";
  @SerializedName(SERIALIZED_NAME_HIDDEN_VERBS)
  private List<List<HiddenVerbsInner>> hiddenVerbs = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONG_SENTENCES = "longSentences";
  @SerializedName(SERIALIZED_NAME_LONG_SENTENCES)
  private List<List<LongSentencesInner>> longSentences = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSIVES = "passives";
  @SerializedName(SERIALIZED_NAME_PASSIVES)
  private List<List<PassivesInner>> passives = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERY_LONG_SENTENCES = "veryLongSentences";
  @SerializedName(SERIALIZED_NAME_VERY_LONG_SENTENCES)
  private List<List<VeryLongSentencesInner>> veryLongSentences = new ArrayList<>();

  public DocumentResponseDetailedParagraphsInnerStats() {
  }

  public DocumentResponseDetailedParagraphsInnerStats adverbs(List<List<AdverbsInner>> adverbs) {
    this.adverbs = adverbs;
    return this;
  }

  public DocumentResponseDetailedParagraphsInnerStats addAdverbsItem(List<AdverbsInner> adverbsItem) {
    if (this.adverbs == null) {
      this.adverbs = new ArrayList<>();
    }
    this.adverbs.add(adverbsItem);
    return this;
  }

  /**
   * Get adverbs
   * @return adverbs
   */
  @javax.annotation.Nullable
  public List<List<AdverbsInner>> getAdverbs() {
    return adverbs;
  }

  public void setAdverbs(List<List<AdverbsInner>> adverbs) {
    this.adverbs = adverbs;
  }


  public DocumentResponseDetailedParagraphsInnerStats hiddenVerbs(List<List<HiddenVerbsInner>> hiddenVerbs) {
    this.hiddenVerbs = hiddenVerbs;
    return this;
  }

  public DocumentResponseDetailedParagraphsInnerStats addHiddenVerbsItem(List<HiddenVerbsInner> hiddenVerbsItem) {
    if (this.hiddenVerbs == null) {
      this.hiddenVerbs = new ArrayList<>();
    }
    this.hiddenVerbs.add(hiddenVerbsItem);
    return this;
  }

  /**
   * Get hiddenVerbs
   * @return hiddenVerbs
   */
  @javax.annotation.Nullable
  public List<List<HiddenVerbsInner>> getHiddenVerbs() {
    return hiddenVerbs;
  }

  public void setHiddenVerbs(List<List<HiddenVerbsInner>> hiddenVerbs) {
    this.hiddenVerbs = hiddenVerbs;
  }


  public DocumentResponseDetailedParagraphsInnerStats longSentences(List<List<LongSentencesInner>> longSentences) {
    this.longSentences = longSentences;
    return this;
  }

  public DocumentResponseDetailedParagraphsInnerStats addLongSentencesItem(List<LongSentencesInner> longSentencesItem) {
    if (this.longSentences == null) {
      this.longSentences = new ArrayList<>();
    }
    this.longSentences.add(longSentencesItem);
    return this;
  }

  /**
   * Get longSentences
   * @return longSentences
   */
  @javax.annotation.Nullable
  public List<List<LongSentencesInner>> getLongSentences() {
    return longSentences;
  }

  public void setLongSentences(List<List<LongSentencesInner>> longSentences) {
    this.longSentences = longSentences;
  }


  public DocumentResponseDetailedParagraphsInnerStats passives(List<List<PassivesInner>> passives) {
    this.passives = passives;
    return this;
  }

  public DocumentResponseDetailedParagraphsInnerStats addPassivesItem(List<PassivesInner> passivesItem) {
    if (this.passives == null) {
      this.passives = new ArrayList<>();
    }
    this.passives.add(passivesItem);
    return this;
  }

  /**
   * Get passives
   * @return passives
   */
  @javax.annotation.Nullable
  public List<List<PassivesInner>> getPassives() {
    return passives;
  }

  public void setPassives(List<List<PassivesInner>> passives) {
    this.passives = passives;
  }


  public DocumentResponseDetailedParagraphsInnerStats veryLongSentences(List<List<VeryLongSentencesInner>> veryLongSentences) {
    this.veryLongSentences = veryLongSentences;
    return this;
  }

  public DocumentResponseDetailedParagraphsInnerStats addVeryLongSentencesItem(List<VeryLongSentencesInner> veryLongSentencesItem) {
    if (this.veryLongSentences == null) {
      this.veryLongSentences = new ArrayList<>();
    }
    this.veryLongSentences.add(veryLongSentencesItem);
    return this;
  }

  /**
   * Get veryLongSentences
   * @return veryLongSentences
   */
  @javax.annotation.Nullable
  public List<List<VeryLongSentencesInner>> getVeryLongSentences() {
    return veryLongSentences;
  }

  public void setVeryLongSentences(List<List<VeryLongSentencesInner>> veryLongSentences) {
    this.veryLongSentences = veryLongSentences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentResponseDetailedParagraphsInnerStats documentResponseDetailedParagraphsInnerStats = (DocumentResponseDetailedParagraphsInnerStats) o;
    return Objects.equals(this.adverbs, documentResponseDetailedParagraphsInnerStats.adverbs) &&
        Objects.equals(this.hiddenVerbs, documentResponseDetailedParagraphsInnerStats.hiddenVerbs) &&
        Objects.equals(this.longSentences, documentResponseDetailedParagraphsInnerStats.longSentences) &&
        Objects.equals(this.passives, documentResponseDetailedParagraphsInnerStats.passives) &&
        Objects.equals(this.veryLongSentences, documentResponseDetailedParagraphsInnerStats.veryLongSentences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adverbs, hiddenVerbs, longSentences, passives, veryLongSentences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentResponseDetailedParagraphsInnerStats {\n");
    sb.append("    adverbs: ").append(toIndentedString(adverbs)).append("\n");
    sb.append("    hiddenVerbs: ").append(toIndentedString(hiddenVerbs)).append("\n");
    sb.append("    longSentences: ").append(toIndentedString(longSentences)).append("\n");
    sb.append("    passives: ").append(toIndentedString(passives)).append("\n");
    sb.append("    veryLongSentences: ").append(toIndentedString(veryLongSentences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adverbs");
    openapiFields.add("hiddenVerbs");
    openapiFields.add("longSentences");
    openapiFields.add("passives");
    openapiFields.add("veryLongSentences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentResponseDetailedParagraphsInnerStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentResponseDetailedParagraphsInnerStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentResponseDetailedParagraphsInnerStats is not found in the empty JSON string", DocumentResponseDetailedParagraphsInnerStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentResponseDetailedParagraphsInnerStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentResponseDetailedParagraphsInnerStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("adverbs") != null && !jsonObj.get("adverbs").isJsonNull() && !jsonObj.get("adverbs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adverbs` to be an array in the JSON string but got `%s`", jsonObj.get("adverbs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hiddenVerbs") != null && !jsonObj.get("hiddenVerbs").isJsonNull() && !jsonObj.get("hiddenVerbs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiddenVerbs` to be an array in the JSON string but got `%s`", jsonObj.get("hiddenVerbs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("longSentences") != null && !jsonObj.get("longSentences").isJsonNull() && !jsonObj.get("longSentences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `longSentences` to be an array in the JSON string but got `%s`", jsonObj.get("longSentences").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("passives") != null && !jsonObj.get("passives").isJsonNull() && !jsonObj.get("passives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `passives` to be an array in the JSON string but got `%s`", jsonObj.get("passives").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("veryLongSentences") != null && !jsonObj.get("veryLongSentences").isJsonNull() && !jsonObj.get("veryLongSentences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `veryLongSentences` to be an array in the JSON string but got `%s`", jsonObj.get("veryLongSentences").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentResponseDetailedParagraphsInnerStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentResponseDetailedParagraphsInnerStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentResponseDetailedParagraphsInnerStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentResponseDetailedParagraphsInnerStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentResponseDetailedParagraphsInnerStats>() {
           @Override
           public void write(JsonWriter out, DocumentResponseDetailedParagraphsInnerStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentResponseDetailedParagraphsInnerStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentResponseDetailedParagraphsInnerStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentResponseDetailedParagraphsInnerStats
   * @throws IOException if the JSON string is invalid with respect to DocumentResponseDetailedParagraphsInnerStats
   */
  public static DocumentResponseDetailedParagraphsInnerStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentResponseDetailedParagraphsInnerStats.class);
  }

  /**
   * Convert an instance of DocumentResponseDetailedParagraphsInnerStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

