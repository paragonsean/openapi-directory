/*
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DocumentListSummary;
import org.openapitools.client.model.DocumentResponseDetailed;
import org.openapitools.client.model.DocumentResponseNotReady;
import java.io.File;
import org.openapitools.client.model.NewDocumentResponse;
import org.openapitools.client.model.Search;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dictionariesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dictionariesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dictionariesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dictionariesGetCall(_callback);

    }

    /**
     * Get your list of dictionaries
     * Get your list of dictionaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void dictionariesGet() throws ApiException {
        dictionariesGetWithHttpInfo();
    }

    /**
     * Get your list of dictionaries
     * Get your list of dictionaries
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dictionariesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dictionariesGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get your list of dictionaries (asynchronously)
     * Get your list of dictionaries
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dictionariesGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dictionariesGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return documentsGetCall(_callback);

    }

    /**
     * Get your list of documents
     * Get your list of documents
     * @return List&lt;DocumentListSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentListSummary> documentsGet() throws ApiException {
        ApiResponse<List<DocumentListSummary>> localVarResp = documentsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get your list of documents
     * Get your list of documents
     * @return ApiResponse&lt;List&lt;DocumentListSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentListSummary>> documentsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DocumentListSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your list of documents (asynchronously)
     * Get your list of documents
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsGetAsync(final ApiCallback<List<DocumentListSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DocumentListSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocById
     * @param docId Id of document to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document response contained readability details for the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> the document is an unsupported file type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> an unknown error occurred processing the document </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the document analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocByIdCall(Long docId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{docId}"
            .replace("{" + "docId" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocByIdValidateBeforeCall(Long docId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling getDocById(Async)");
        }

        return getDocByIdCall(docId, _callback);

    }

    /**
     * Get data from a previously submitted document
     * Get data from a previously submitted document identified by ***docId***
     * @param docId Id of document to fetch (required)
     * @return DocumentResponseDetailed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document response contained readability details for the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> the document is an unsupported file type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> an unknown error occurred processing the document </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the document analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResponseDetailed getDocById(Long docId) throws ApiException {
        ApiResponse<DocumentResponseDetailed> localVarResp = getDocByIdWithHttpInfo(docId);
        return localVarResp.getData();
    }

    /**
     * Get data from a previously submitted document
     * Get data from a previously submitted document identified by ***docId***
     * @param docId Id of document to fetch (required)
     * @return ApiResponse&lt;DocumentResponseDetailed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document response contained readability details for the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> the document is an unsupported file type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> an unknown error occurred processing the document </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the document analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResponseDetailed> getDocByIdWithHttpInfo(Long docId) throws ApiException {
        okhttp3.Call localVarCall = getDocByIdValidateBeforeCall(docId, null);
        Type localVarReturnType = new TypeToken<DocumentResponseDetailed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data from a previously submitted document (asynchronously)
     * Get data from a previously submitted document identified by ***docId***
     * @param docId Id of document to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> document response contained readability details for the document </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> the document is an unsupported file type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> an unknown error occurred processing the document </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the document analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocByIdAsync(Long docId, final ApiCallback<DocumentResponseDetailed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocByIdValidateBeforeCall(docId, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponseDetailed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchResults
     * @param docId Id of document (required)
     * @param dictionaryId Id of dictionary (required)
     * @param matchingOnly Only returning paragraphs containing a match (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchResultsCall(Long docId, Long dictionaryId, Boolean matchingOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/searches/{docId}/{dictionaryId}"
            .replace("{" + "docId" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "dictionaryId" + "}", localVarApiClient.escapeString(dictionaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (matchingOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingOnly", matchingOnly));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchResultsValidateBeforeCall(Long docId, Long dictionaryId, Boolean matchingOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling getSearchResults(Async)");
        }

        // verify the required parameter 'dictionaryId' is set
        if (dictionaryId == null) {
            throw new ApiException("Missing the required parameter 'dictionaryId' when calling getSearchResults(Async)");
        }

        // verify the required parameter 'matchingOnly' is set
        if (matchingOnly == null) {
            throw new ApiException("Missing the required parameter 'matchingOnly' when calling getSearchResults(Async)");
        }

        return getSearchResultsCall(docId, dictionaryId, matchingOnly, _callback);

    }

    /**
     * Gets search results for a particular document/dictionary
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** &amp; **urlId**
     * @param docId Id of document (required)
     * @param dictionaryId Id of dictionary (required)
     * @param matchingOnly Only returning paragraphs containing a match (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
     </table>
     */
    public void getSearchResults(Long docId, Long dictionaryId, Boolean matchingOnly) throws ApiException {
        getSearchResultsWithHttpInfo(docId, dictionaryId, matchingOnly);
    }

    /**
     * Gets search results for a particular document/dictionary
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** &amp; **urlId**
     * @param docId Id of document (required)
     * @param dictionaryId Id of dictionary (required)
     * @param matchingOnly Only returning paragraphs containing a match (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSearchResultsWithHttpInfo(Long docId, Long dictionaryId, Boolean matchingOnly) throws ApiException {
        okhttp3.Call localVarCall = getSearchResultsValidateBeforeCall(docId, dictionaryId, matchingOnly, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets search results for a particular document/dictionary (asynchronously)
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** &amp; **urlId**
     * @param docId Id of document (required)
     * @param dictionaryId Id of dictionary (required)
     * @param matchingOnly Only returning paragraphs containing a match (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchResultsAsync(Long docId, Long dictionaryId, Boolean matchingOnly, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchResultsValidateBeforeCall(docId, dictionaryId, matchingOnly, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for runSearch
     * @param body Run a search on document **docId** using dictionary**dictId** (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runSearchCall(Search body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runSearchValidateBeforeCall(Search body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runSearch(Async)");
        }

        return runSearchCall(body, _callback);

    }

    /**
     * Run a search
     * Run a search on document **docId** using dictionary **dictId** 
     * @param body Run a search on document **docId** using dictionary**dictId** (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public Object runSearch(Search body) throws ApiException {
        ApiResponse<Object> localVarResp = runSearchWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Run a search
     * Run a search on document **docId** using dictionary **dictId** 
     * @param body Run a search on document **docId** using dictionary**dictId** (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> runSearchWithHttpInfo(Search body) throws ApiException {
        okhttp3.Call localVarCall = runSearchValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a search (asynchronously)
     * Run a search on document **docId** using dictionary **dictId** 
     * @param body Run a search on document **docId** using dictionary**dictId** (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runSearchAsync(Search body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = runSearchValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return searchesGetCall(_callback);

    }

    /**
     * Get your list of searches
     * Get your list of searches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void searchesGet() throws ApiException {
        searchesGetWithHttpInfo();
    }

    /**
     * Get your list of searches
     * Get your list of searches
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = searchesGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get your list of searches (asynchronously)
     * Get your list of searches
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchesGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchesGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDictionary
     * @param _file The uploaded CSV dictionary (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDictionaryCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDictionaryValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadDictionary(Async)");
        }

        return uploadDictionaryCall(_file, _callback);

    }

    /**
     * Upload a dictionary (CSV)
     * Upload a dictionary (CSV format) to your VisibleThread account. 
     * @param _file The uploaded CSV dictionary (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public void uploadDictionary(File _file) throws ApiException {
        uploadDictionaryWithHttpInfo(_file);
    }

    /**
     * Upload a dictionary (CSV)
     * Upload a dictionary (CSV format) to your VisibleThread account. 
     * @param _file The uploaded CSV dictionary (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadDictionaryWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadDictionaryValidateBeforeCall(_file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a dictionary (CSV) (asynchronously)
     * Upload a dictionary (CSV format) to your VisibleThread account. 
     * @param _file The uploaded CSV dictionary (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDictionaryAsync(File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDictionaryValidateBeforeCall(_file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDoc
     * @param _file The uploaded file data (required)
     * @param longSentenceWordCount Optional setting what constitutes a long sentence (default 25) (optional)
     * @param veryLongSentenceWordCount Optional setting what constitutes a very long sentence (default 30) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The document exceeds the maximum supported file size (15mb) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDocCall(File _file, Integer longSentenceWordCount, Integer veryLongSentenceWordCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (longSentenceWordCount != null) {
            localVarFormParams.put("longSentenceWordCount", longSentenceWordCount);
        }

        if (veryLongSentenceWordCount != null) {
            localVarFormParams.put("veryLongSentenceWordCount", veryLongSentenceWordCount);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDocValidateBeforeCall(File _file, Integer longSentenceWordCount, Integer veryLongSentenceWordCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadDoc(Async)");
        }

        return uploadDocCall(_file, longSentenceWordCount, veryLongSentenceWordCount, _callback);

    }

    /**
     * Upload a document
     * Upload a document to your VisibleThread account.  We return a JSON response that contains a \&quot;docId\&quot; that represents your document.         You can use this id in other requests to check on the analysis status for the document and run a dictionary search and retrieve search results. 
     * @param _file The uploaded file data (required)
     * @param longSentenceWordCount Optional setting what constitutes a long sentence (default 25) (optional)
     * @param veryLongSentenceWordCount Optional setting what constitutes a very long sentence (default 30) (optional)
     * @return NewDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The document exceeds the maximum supported file size (15mb) </td><td>  -  </td></tr>
     </table>
     */
    public NewDocumentResponse uploadDoc(File _file, Integer longSentenceWordCount, Integer veryLongSentenceWordCount) throws ApiException {
        ApiResponse<NewDocumentResponse> localVarResp = uploadDocWithHttpInfo(_file, longSentenceWordCount, veryLongSentenceWordCount);
        return localVarResp.getData();
    }

    /**
     * Upload a document
     * Upload a document to your VisibleThread account.  We return a JSON response that contains a \&quot;docId\&quot; that represents your document.         You can use this id in other requests to check on the analysis status for the document and run a dictionary search and retrieve search results. 
     * @param _file The uploaded file data (required)
     * @param longSentenceWordCount Optional setting what constitutes a long sentence (default 25) (optional)
     * @param veryLongSentenceWordCount Optional setting what constitutes a very long sentence (default 30) (optional)
     * @return ApiResponse&lt;NewDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The document exceeds the maximum supported file size (15mb) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewDocumentResponse> uploadDocWithHttpInfo(File _file, Integer longSentenceWordCount, Integer veryLongSentenceWordCount) throws ApiException {
        okhttp3.Call localVarCall = uploadDocValidateBeforeCall(_file, longSentenceWordCount, veryLongSentenceWordCount, null);
        Type localVarReturnType = new TypeToken<NewDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a document (asynchronously)
     * Upload a document to your VisibleThread account.  We return a JSON response that contains a \&quot;docId\&quot; that represents your document.         You can use this id in other requests to check on the analysis status for the document and run a dictionary search and retrieve search results. 
     * @param _file The uploaded file data (required)
     * @param longSentenceWordCount Optional setting what constitutes a long sentence (default 25) (optional)
     * @param veryLongSentenceWordCount Optional setting what constitutes a very long sentence (default 30) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The document exceeds the maximum supported file size (15mb) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDocAsync(File _file, Integer longSentenceWordCount, Integer veryLongSentenceWordCount, final ApiCallback<NewDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDocValidateBeforeCall(_file, longSentenceWordCount, veryLongSentenceWordCount, _callback);
        Type localVarReturnType = new TypeToken<NewDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
