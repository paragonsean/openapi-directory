/*
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DocumentResponseDetailedParagraphsInnerStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentResponseDetailedParagraphsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:05.975704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentResponseDetailedParagraphsInner {
  public static final String SERIALIZED_NAME_PARAGRAPH_COUNTER = "paragraphCounter";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_COUNTER)
  private Integer paragraphCounter;

  public static final String SERIALIZED_NAME_PARAGRAPH_INDEX = "paragraphIndex";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_INDEX)
  private Integer paragraphIndex;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private DocumentResponseDetailedParagraphsInnerStats stats;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public DocumentResponseDetailedParagraphsInner() {
  }

  public DocumentResponseDetailedParagraphsInner paragraphCounter(Integer paragraphCounter) {
    this.paragraphCounter = paragraphCounter;
    return this;
  }

  /**
   * Get paragraphCounter
   * @return paragraphCounter
   */
  @javax.annotation.Nullable
  public Integer getParagraphCounter() {
    return paragraphCounter;
  }

  public void setParagraphCounter(Integer paragraphCounter) {
    this.paragraphCounter = paragraphCounter;
  }


  public DocumentResponseDetailedParagraphsInner paragraphIndex(Integer paragraphIndex) {
    this.paragraphIndex = paragraphIndex;
    return this;
  }

  /**
   * Get paragraphIndex
   * @return paragraphIndex
   */
  @javax.annotation.Nullable
  public Integer getParagraphIndex() {
    return paragraphIndex;
  }

  public void setParagraphIndex(Integer paragraphIndex) {
    this.paragraphIndex = paragraphIndex;
  }


  public DocumentResponseDetailedParagraphsInner stats(DocumentResponseDetailedParagraphsInnerStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public DocumentResponseDetailedParagraphsInnerStats getStats() {
    return stats;
  }

  public void setStats(DocumentResponseDetailedParagraphsInnerStats stats) {
    this.stats = stats;
  }


  public DocumentResponseDetailedParagraphsInner text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentResponseDetailedParagraphsInner documentResponseDetailedParagraphsInner = (DocumentResponseDetailedParagraphsInner) o;
    return Objects.equals(this.paragraphCounter, documentResponseDetailedParagraphsInner.paragraphCounter) &&
        Objects.equals(this.paragraphIndex, documentResponseDetailedParagraphsInner.paragraphIndex) &&
        Objects.equals(this.stats, documentResponseDetailedParagraphsInner.stats) &&
        Objects.equals(this.text, documentResponseDetailedParagraphsInner.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paragraphCounter, paragraphIndex, stats, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentResponseDetailedParagraphsInner {\n");
    sb.append("    paragraphCounter: ").append(toIndentedString(paragraphCounter)).append("\n");
    sb.append("    paragraphIndex: ").append(toIndentedString(paragraphIndex)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paragraphCounter");
    openapiFields.add("paragraphIndex");
    openapiFields.add("stats");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentResponseDetailedParagraphsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentResponseDetailedParagraphsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentResponseDetailedParagraphsInner is not found in the empty JSON string", DocumentResponseDetailedParagraphsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentResponseDetailedParagraphsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentResponseDetailedParagraphsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        DocumentResponseDetailedParagraphsInnerStats.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentResponseDetailedParagraphsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentResponseDetailedParagraphsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentResponseDetailedParagraphsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentResponseDetailedParagraphsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentResponseDetailedParagraphsInner>() {
           @Override
           public void write(JsonWriter out, DocumentResponseDetailedParagraphsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentResponseDetailedParagraphsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentResponseDetailedParagraphsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentResponseDetailedParagraphsInner
   * @throws IOException if the JSON string is invalid with respect to DocumentResponseDetailedParagraphsInner
   */
  public static DocumentResponseDetailedParagraphsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentResponseDetailedParagraphsInner.class);
  }

  /**
   * Convert an instance of DocumentResponseDetailedParagraphsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

