/*
 * VisibleThread API
 * ## Introduction The VisibleThread b API provides services for analyzing/searching documents and web pages. To use the service you need an API key.   **Contact us at support@visiblethread.com to request an API key**.   The services are split into **Documents** and **Webscans**.  ### Documents Upload documents and dictionaries so you can : - Measure the readability of your document - search a document for all terms from a dictionary - retrieve all paragraphs from a document or only matching paragraphs  ### Webscans Analyze web pages so you can:  - Measure the readability of your web content - Identify & highlight content issues e.g. long sentences, passive voice  The VisibleThread API allows you to programatially submit webpage urls to be scanned,  check on the results of a scan, and view a list of previous scans you have performed.      -------------  The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com  Each request to the service requires your API key to be successful.  ## Getting Started With Webscans  Steps: 1. Enter your API key above and hit **Explore**.  2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).    The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan. 3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url. 4. Retrieve all your previous scan results by submitting **GET /webscans**.   5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting     **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)  ## Getting Started With Document scans:  Steps: 1. Enter your API key above and hit **Explore** 2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns    immediately with a JSON response containins an \"id\" that represents your scan 3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If     it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed    analysis of each paragraph in the document 4. Retrieve all your previous scan results by submitting **GET /documents**  ### Searching a document for keywords  The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document  using that dictionary  Steps (Assuming you have uploaded your document using the steps above): 1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON     response with the dictionary Id  2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required).  3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing     detailed results of searching the document using the dictionary. 4. To view the list of all searches you have performed submit a **GET /searches**.   Below is a list of the available API endpoints, documentation & a form to try out each operation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NewScan;
import org.openapitools.client.model.NewScanResponse;
import org.openapitools.client.model.ScanResponseDetailed;
import org.openapitools.client.model.ScanResponseSummary;
import org.openapitools.client.model.WebResponseNotReady;
import org.openapitools.client.model.WebUrlDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebscansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebscansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebscansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getScanById
     * @param scanId Id of scan to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> webscan not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the web analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanByIdCall(Long scanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webscans/{scanId}"
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScanByIdValidateBeforeCall(Long scanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling getScanById(Async)");
        }

        return getScanByIdCall(scanId, _callback);

    }

    /**
     * Get data from a previously run scan
     * Get data from a previously run scan, identified by **scanId**
     * @param scanId Id of scan to fetch (required)
     * @return ScanResponseDetailed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> webscan not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the web analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public ScanResponseDetailed getScanById(Long scanId) throws ApiException {
        ApiResponse<ScanResponseDetailed> localVarResp = getScanByIdWithHttpInfo(scanId);
        return localVarResp.getData();
    }

    /**
     * Get data from a previously run scan
     * Get data from a previously run scan, identified by **scanId**
     * @param scanId Id of scan to fetch (required)
     * @return ApiResponse&lt;ScanResponseDetailed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> webscan not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the web analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScanResponseDetailed> getScanByIdWithHttpInfo(Long scanId) throws ApiException {
        okhttp3.Call localVarCall = getScanByIdValidateBeforeCall(scanId, null);
        Type localVarReturnType = new TypeToken<ScanResponseDetailed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data from a previously run scan (asynchronously)
     * Get data from a previously run scan, identified by **scanId**
     * @param scanId Id of scan to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> webscan not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> the web analysis has not yet completed, try again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanByIdAsync(Long scanId, final ApiCallback<ScanResponseDetailed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScanByIdValidateBeforeCall(scanId, _callback);
        Type localVarReturnType = new TypeToken<ScanResponseDetailed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScanUrlById
     * @param scanId Id of scan (required)
     * @param urlId Id of url to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> scan url not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanUrlByIdCall(Long scanId, Long urlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webscans/{scanId}/webUrls/{urlId}"
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()))
            .replace("{" + "urlId" + "}", localVarApiClient.escapeString(urlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScanUrlByIdValidateBeforeCall(Long scanId, Long urlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling getScanUrlById(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling getScanUrlById(Async)");
        }

        return getScanUrlByIdCall(scanId, urlId, _callback);

    }

    /**
     * Gets data for a particular scan/webUrl
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** &amp; **urlId**
     * @param scanId Id of scan (required)
     * @param urlId Id of url to fetch (required)
     * @return WebUrlDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> scan url not found </td><td>  -  </td></tr>
     </table>
     */
    public WebUrlDetail getScanUrlById(Long scanId, Long urlId) throws ApiException {
        ApiResponse<WebUrlDetail> localVarResp = getScanUrlByIdWithHttpInfo(scanId, urlId);
        return localVarResp.getData();
    }

    /**
     * Gets data for a particular scan/webUrl
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** &amp; **urlId**
     * @param scanId Id of scan (required)
     * @param urlId Id of url to fetch (required)
     * @return ApiResponse&lt;WebUrlDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> scan url not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebUrlDetail> getScanUrlByIdWithHttpInfo(Long scanId, Long urlId) throws ApiException {
        okhttp3.Call localVarCall = getScanUrlByIdValidateBeforeCall(scanId, urlId, null);
        Type localVarReturnType = new TypeToken<WebUrlDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets data for a particular scan/webUrl (asynchronously)
     * Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** &amp; **urlId**
     * @param scanId Id of scan (required)
     * @param urlId Id of url to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> scan response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> scan url not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanUrlByIdAsync(Long scanId, Long urlId, final ApiCallback<WebUrlDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScanUrlByIdValidateBeforeCall(scanId, urlId, _callback);
        Type localVarReturnType = new TypeToken<WebUrlDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runScan
     * @param body Scan title and webUrls to analyze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScanCall(NewScan body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/webscans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runScanValidateBeforeCall(NewScan body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runScan(Async)");
        }

        return runScanCall(body, _callback);

    }

    /**
     * Run a new scan
     * The scan runs in the background but returns immediately with a JSON response containing an \&quot;id\&quot; that represents your scan.         You can use this id in other requests to retrieve your scan result.   Also, an \&quot;id\&quot; is returned for each url which can be used to retrieve detailed results for individual scan urls. 
     * @param body Scan title and webUrls to analyze (required)
     * @return NewScanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public NewScanResponse runScan(NewScan body) throws ApiException {
        ApiResponse<NewScanResponse> localVarResp = runScanWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Run a new scan
     * The scan runs in the background but returns immediately with a JSON response containing an \&quot;id\&quot; that represents your scan.         You can use this id in other requests to retrieve your scan result.   Also, an \&quot;id\&quot; is returned for each url which can be used to retrieve detailed results for individual scan urls. 
     * @param body Scan title and webUrls to analyze (required)
     * @return ApiResponse&lt;NewScanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewScanResponse> runScanWithHttpInfo(NewScan body) throws ApiException {
        okhttp3.Call localVarCall = runScanValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<NewScanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a new scan (asynchronously)
     * The scan runs in the background but returns immediately with a JSON response containing an \&quot;id\&quot; that represents your scan.         You can use this id in other requests to retrieve your scan result.   Also, an \&quot;id\&quot; is returned for each url which can be used to retrieve detailed results for individual scan urls. 
     * @param body Scan title and webUrls to analyze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScanAsync(NewScan body, final ApiCallback<NewScanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runScanValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<NewScanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webscansGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webscansGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webscans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webscansGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return webscansGetCall(_callback);

    }

    /**
     * Get your list of scans
     * Get your list of scans
     * @return List&lt;ScanResponseSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public List<ScanResponseSummary> webscansGet() throws ApiException {
        ApiResponse<List<ScanResponseSummary>> localVarResp = webscansGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get your list of scans
     * Get your list of scans
     * @return ApiResponse&lt;List&lt;ScanResponseSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScanResponseSummary>> webscansGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = webscansGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ScanResponseSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your list of scans (asynchronously)
     * Get your list of scans
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webscansGetAsync(final ApiCallback<List<ScanResponseSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webscansGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ScanResponseSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
