/*
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateCustomCardRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:55.528804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCustomCardRequest {
  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private Integer cardId;

  public static final String SERIALIZED_NAME_COVER_ID = "cover_id";
  @SerializedName(SERIALIZED_NAME_COVER_ID)
  private Integer coverId;

  public static final String SERIALIZED_NAME_COVER_SIZE_PERCENT = "cover_size_percent";
  @SerializedName(SERIALIZED_NAME_COVER_SIZE_PERCENT)
  private Integer coverSizePercent;

  public static final String SERIALIZED_NAME_FOOTER_ALIGN = "footer_align";
  @SerializedName(SERIALIZED_NAME_FOOTER_ALIGN)
  private String footerAlign;

  public static final String SERIALIZED_NAME_FOOTER_FONT_ID = "footer_font_id";
  @SerializedName(SERIALIZED_NAME_FOOTER_FONT_ID)
  private Integer footerFontId;

  public static final String SERIALIZED_NAME_FOOTER_FONT_SIZE = "footer_font_size";
  @SerializedName(SERIALIZED_NAME_FOOTER_FONT_SIZE)
  private Integer footerFontSize;

  public static final String SERIALIZED_NAME_FOOTER_TEXT = "footer_text";
  @SerializedName(SERIALIZED_NAME_FOOTER_TEXT)
  private String footerText;

  public static final String SERIALIZED_NAME_HEADER_ALIGN = "header_align";
  @SerializedName(SERIALIZED_NAME_HEADER_ALIGN)
  private String headerAlign;

  public static final String SERIALIZED_NAME_HEADER_AUTO_SIZE = "header_auto_size";
  @SerializedName(SERIALIZED_NAME_HEADER_AUTO_SIZE)
  private Boolean headerAutoSize;

  public static final String SERIALIZED_NAME_HEADER_FONT_ID = "header_font_id";
  @SerializedName(SERIALIZED_NAME_HEADER_FONT_ID)
  private Integer headerFontId;

  public static final String SERIALIZED_NAME_HEADER_FONT_SIZE = "header_font_size";
  @SerializedName(SERIALIZED_NAME_HEADER_FONT_SIZE)
  private Integer headerFontSize;

  public static final String SERIALIZED_NAME_HEADER_TEXT = "header_text";
  @SerializedName(SERIALIZED_NAME_HEADER_TEXT)
  private String headerText;

  public static final String SERIALIZED_NAME_LOGO_ID = "logo_id";
  @SerializedName(SERIALIZED_NAME_LOGO_ID)
  private Integer logoId;

  public static final String SERIALIZED_NAME_LOGO_SIZE_PERCENT = "logo_size_percent";
  @SerializedName(SERIALIZED_NAME_LOGO_SIZE_PERCENT)
  private Integer logoSizePercent;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public CreateCustomCardRequest() {
  }

  public CreateCustomCardRequest cardId(Integer cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * the card id of the card template you&#39;re starting with.  You can find this by logging into Handwrytten, clicking \&quot;customize\&quot; next to any customizable card, and pulling the card ID from the end of the URL
   * @return cardId
   */
  @javax.annotation.Nullable
  public Integer getCardId() {
    return cardId;
  }

  public void setCardId(Integer cardId) {
    this.cardId = cardId;
  }


  public CreateCustomCardRequest coverId(Integer coverId) {
    this.coverId = coverId;
    return this;
  }

  /**
   * the id of the image you want to use for the \&quot;cover\&quot;.  The cover is the large image on the front of the flat card.
   * @return coverId
   */
  @javax.annotation.Nullable
  public Integer getCoverId() {
    return coverId;
  }

  public void setCoverId(Integer coverId) {
    this.coverId = coverId;
  }


  public CreateCustomCardRequest coverSizePercent(Integer coverSizePercent) {
    this.coverSizePercent = coverSizePercent;
    return this;
  }

  /**
   * the size of the image to use as the cover.
   * @return coverSizePercent
   */
  @javax.annotation.Nullable
  public Integer getCoverSizePercent() {
    return coverSizePercent;
  }

  public void setCoverSizePercent(Integer coverSizePercent) {
    this.coverSizePercent = coverSizePercent;
  }


  public CreateCustomCardRequest footerAlign(String footerAlign) {
    this.footerAlign = footerAlign;
    return this;
  }

  /**
   * set to \&quot;left\&quot;, \&quot;center\&quot;, or \&quot;right\&quot; to align the footer appropriately
   * @return footerAlign
   */
  @javax.annotation.Nullable
  public String getFooterAlign() {
    return footerAlign;
  }

  public void setFooterAlign(String footerAlign) {
    this.footerAlign = footerAlign;
  }


  public CreateCustomCardRequest footerFontId(Integer footerFontId) {
    this.footerFontId = footerFontId;
    return this;
  }

  /**
   * font ID of the text in the footer, found by using ListFontForCustomizer
   * @return footerFontId
   */
  @javax.annotation.Nullable
  public Integer getFooterFontId() {
    return footerFontId;
  }

  public void setFooterFontId(Integer footerFontId) {
    this.footerFontId = footerFontId;
  }


  public CreateCustomCardRequest footerFontSize(Integer footerFontSize) {
    this.footerFontSize = footerFontSize;
    return this;
  }

  /**
   * Font size of the text in the footer
   * @return footerFontSize
   */
  @javax.annotation.Nullable
  public Integer getFooterFontSize() {
    return footerFontSize;
  }

  public void setFooterFontSize(Integer footerFontSize) {
    this.footerFontSize = footerFontSize;
  }


  public CreateCustomCardRequest footerText(String footerText) {
    this.footerText = footerText;
    return this;
  }

  /**
   * optional text for the footer of the customizable card
   * @return footerText
   */
  @javax.annotation.Nullable
  public String getFooterText() {
    return footerText;
  }

  public void setFooterText(String footerText) {
    this.footerText = footerText;
  }


  public CreateCustomCardRequest headerAlign(String headerAlign) {
    this.headerAlign = headerAlign;
    return this;
  }

  /**
   * set to \&quot;left\&quot;, \&quot;center\&quot;, or \&quot;right\&quot; to align the header appropriately
   * @return headerAlign
   */
  @javax.annotation.Nullable
  public String getHeaderAlign() {
    return headerAlign;
  }

  public void setHeaderAlign(String headerAlign) {
    this.headerAlign = headerAlign;
  }


  public CreateCustomCardRequest headerAutoSize(Boolean headerAutoSize) {
    this.headerAutoSize = headerAutoSize;
    return this;
  }

  /**
   * if set to true, the header will be maximized to fill the header area
   * @return headerAutoSize
   */
  @javax.annotation.Nullable
  public Boolean getHeaderAutoSize() {
    return headerAutoSize;
  }

  public void setHeaderAutoSize(Boolean headerAutoSize) {
    this.headerAutoSize = headerAutoSize;
  }


  public CreateCustomCardRequest headerFontId(Integer headerFontId) {
    this.headerFontId = headerFontId;
    return this;
  }

  /**
   * font ID of the text in the header, found by using ListFontForCustomizer
   * @return headerFontId
   */
  @javax.annotation.Nullable
  public Integer getHeaderFontId() {
    return headerFontId;
  }

  public void setHeaderFontId(Integer headerFontId) {
    this.headerFontId = headerFontId;
  }


  public CreateCustomCardRequest headerFontSize(Integer headerFontSize) {
    this.headerFontSize = headerFontSize;
    return this;
  }

  /**
   * font size of the text in the header of the card
   * @return headerFontSize
   */
  @javax.annotation.Nullable
  public Integer getHeaderFontSize() {
    return headerFontSize;
  }

  public void setHeaderFontSize(Integer headerFontSize) {
    this.headerFontSize = headerFontSize;
  }


  public CreateCustomCardRequest headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

  /**
   * text in the header, if type is set to \&quot;text\&quot;
   * @return headerText
   */
  @javax.annotation.Nullable
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }


  public CreateCustomCardRequest logoId(Integer logoId) {
    this.logoId = logoId;
    return this;
  }

  /**
   * Optional.  If setting \&quot;type\&quot; to \&quot;logo\&quot;, set the id of the logo here.
   * @return logoId
   */
  @javax.annotation.Nullable
  public Integer getLogoId() {
    return logoId;
  }

  public void setLogoId(Integer logoId) {
    this.logoId = logoId;
  }


  public CreateCustomCardRequest logoSizePercent(Integer logoSizePercent) {
    this.logoSizePercent = logoSizePercent;
    return this;
  }

  /**
   * set to the desired scaling of the logo on the header
   * @return logoSizePercent
   */
  @javax.annotation.Nullable
  public Integer getLogoSizePercent() {
    return logoSizePercent;
  }

  public void setLogoSizePercent(Integer logoSizePercent) {
    this.logoSizePercent = logoSizePercent;
  }


  public CreateCustomCardRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the name of the new card
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateCustomCardRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Defines the top of the back of the card. Set to either \&quot;logo\&quot; or \&quot;text\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CreateCustomCardRequest uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * authorized UID of the session.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCustomCardRequest createCustomCardRequest = (CreateCustomCardRequest) o;
    return Objects.equals(this.cardId, createCustomCardRequest.cardId) &&
        Objects.equals(this.coverId, createCustomCardRequest.coverId) &&
        Objects.equals(this.coverSizePercent, createCustomCardRequest.coverSizePercent) &&
        Objects.equals(this.footerAlign, createCustomCardRequest.footerAlign) &&
        Objects.equals(this.footerFontId, createCustomCardRequest.footerFontId) &&
        Objects.equals(this.footerFontSize, createCustomCardRequest.footerFontSize) &&
        Objects.equals(this.footerText, createCustomCardRequest.footerText) &&
        Objects.equals(this.headerAlign, createCustomCardRequest.headerAlign) &&
        Objects.equals(this.headerAutoSize, createCustomCardRequest.headerAutoSize) &&
        Objects.equals(this.headerFontId, createCustomCardRequest.headerFontId) &&
        Objects.equals(this.headerFontSize, createCustomCardRequest.headerFontSize) &&
        Objects.equals(this.headerText, createCustomCardRequest.headerText) &&
        Objects.equals(this.logoId, createCustomCardRequest.logoId) &&
        Objects.equals(this.logoSizePercent, createCustomCardRequest.logoSizePercent) &&
        Objects.equals(this.name, createCustomCardRequest.name) &&
        Objects.equals(this.type, createCustomCardRequest.type) &&
        Objects.equals(this.uid, createCustomCardRequest.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, coverId, coverSizePercent, footerAlign, footerFontId, footerFontSize, footerText, headerAlign, headerAutoSize, headerFontId, headerFontSize, headerText, logoId, logoSizePercent, name, type, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCustomCardRequest {\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    coverId: ").append(toIndentedString(coverId)).append("\n");
    sb.append("    coverSizePercent: ").append(toIndentedString(coverSizePercent)).append("\n");
    sb.append("    footerAlign: ").append(toIndentedString(footerAlign)).append("\n");
    sb.append("    footerFontId: ").append(toIndentedString(footerFontId)).append("\n");
    sb.append("    footerFontSize: ").append(toIndentedString(footerFontSize)).append("\n");
    sb.append("    footerText: ").append(toIndentedString(footerText)).append("\n");
    sb.append("    headerAlign: ").append(toIndentedString(headerAlign)).append("\n");
    sb.append("    headerAutoSize: ").append(toIndentedString(headerAutoSize)).append("\n");
    sb.append("    headerFontId: ").append(toIndentedString(headerFontId)).append("\n");
    sb.append("    headerFontSize: ").append(toIndentedString(headerFontSize)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    logoId: ").append(toIndentedString(logoId)).append("\n");
    sb.append("    logoSizePercent: ").append(toIndentedString(logoSizePercent)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_id");
    openapiFields.add("cover_id");
    openapiFields.add("cover_size_percent");
    openapiFields.add("footer_align");
    openapiFields.add("footer_font_id");
    openapiFields.add("footer_font_size");
    openapiFields.add("footer_text");
    openapiFields.add("header_align");
    openapiFields.add("header_auto_size");
    openapiFields.add("header_font_id");
    openapiFields.add("header_font_size");
    openapiFields.add("header_text");
    openapiFields.add("logo_id");
    openapiFields.add("logo_size_percent");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCustomCardRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCustomCardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCustomCardRequest is not found in the empty JSON string", CreateCustomCardRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCustomCardRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCustomCardRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("footer_align") != null && !jsonObj.get("footer_align").isJsonNull()) && !jsonObj.get("footer_align").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_align` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_align").toString()));
      }
      if ((jsonObj.get("footer_text") != null && !jsonObj.get("footer_text").isJsonNull()) && !jsonObj.get("footer_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_text").toString()));
      }
      if ((jsonObj.get("header_align") != null && !jsonObj.get("header_align").isJsonNull()) && !jsonObj.get("header_align").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_align` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_align").toString()));
      }
      if ((jsonObj.get("header_text") != null && !jsonObj.get("header_text").isJsonNull()) && !jsonObj.get("header_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_text").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCustomCardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCustomCardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCustomCardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCustomCardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCustomCardRequest>() {
           @Override
           public void write(JsonWriter out, CreateCustomCardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCustomCardRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCustomCardRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCustomCardRequest
   * @throws IOException if the JSON string is invalid with respect to CreateCustomCardRequest
   */
  public static CreateCustomCardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCustomCardRequest.class);
  }

  /**
   * Convert an instance of CreateCustomCardRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

