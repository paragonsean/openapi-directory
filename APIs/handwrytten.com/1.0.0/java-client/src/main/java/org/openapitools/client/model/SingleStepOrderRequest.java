/*
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SingleStepOrderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:55.528804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SingleStepOrderRequest {
  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private Integer cardId;

  public static final String SERIALIZED_NAME_CREDIT_CARD_ID = "credit_card_id";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_ID)
  private Integer creditCardId;

  public static final String SERIALIZED_NAME_DENOMINATION_ID = "denomination_id";
  @SerializedName(SERIALIZED_NAME_DENOMINATION_ID)
  private Integer denominationId;

  public static final String SERIALIZED_NAME_FONT_LABEL = "font_label";
  @SerializedName(SERIALIZED_NAME_FONT_LABEL)
  private String fontLabel;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS1 = "recipient_address1";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS1)
  private String recipientAddress1;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS2 = "recipient_address2";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS2)
  private String recipientAddress2;

  public static final String SERIALIZED_NAME_RECIPIENT_BUSINESS_NAME = "recipient_business_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_BUSINESS_NAME)
  private String recipientBusinessName;

  public static final String SERIALIZED_NAME_RECIPIENT_CITY = "recipient_city";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_CITY)
  private String recipientCity;

  public static final String SERIALIZED_NAME_RECIPIENT_COUNTRY = "recipient_country";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_COUNTRY)
  private String recipientCountry;

  public static final String SERIALIZED_NAME_RECIPIENT_COUNTRY_ID = "recipient_country_id";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_COUNTRY_ID)
  private Integer recipientCountryId;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipient_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_RECIPIENT_STATE = "recipient_state";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_STATE)
  private String recipientState;

  public static final String SERIALIZED_NAME_RECIPIENT_ZIP = "recipient_zip";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ZIP)
  private String recipientZip;

  public static final String SERIALIZED_NAME_SENDER_ADDRESS1 = "sender_address1";
  @SerializedName(SERIALIZED_NAME_SENDER_ADDRESS1)
  private String senderAddress1;

  public static final String SERIALIZED_NAME_SENDER_ADDRESS2 = "sender_address2";
  @SerializedName(SERIALIZED_NAME_SENDER_ADDRESS2)
  private String senderAddress2;

  public static final String SERIALIZED_NAME_SENDER_BUSINESS_NAME = "sender_business_name";
  @SerializedName(SERIALIZED_NAME_SENDER_BUSINESS_NAME)
  private String senderBusinessName;

  public static final String SERIALIZED_NAME_SENDER_CITY = "sender_city";
  @SerializedName(SERIALIZED_NAME_SENDER_CITY)
  private String senderCity;

  public static final String SERIALIZED_NAME_SENDER_COUNTRY = "sender_country";
  @SerializedName(SERIALIZED_NAME_SENDER_COUNTRY)
  private String senderCountry;

  public static final String SERIALIZED_NAME_SENDER_COUNTRY_ID = "sender_country_id";
  @SerializedName(SERIALIZED_NAME_SENDER_COUNTRY_ID)
  private Integer senderCountryId;

  public static final String SERIALIZED_NAME_SENDER_NAME = "sender_name";
  @SerializedName(SERIALIZED_NAME_SENDER_NAME)
  private String senderName;

  public static final String SERIALIZED_NAME_SENDER_STATE = "sender_state";
  @SerializedName(SERIALIZED_NAME_SENDER_STATE)
  private String senderState;

  public static final String SERIALIZED_NAME_SENDER_ZIP = "sender_zip";
  @SerializedName(SERIALIZED_NAME_SENDER_ZIP)
  private String senderZip;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public SingleStepOrderRequest() {
  }

  public SingleStepOrderRequest cardId(Integer cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * the id of the card you want to send
   * @return cardId
   */
  @javax.annotation.Nonnull
  public Integer getCardId() {
    return cardId;
  }

  public void setCardId(Integer cardId) {
    this.cardId = cardId;
  }


  public SingleStepOrderRequest creditCardId(Integer creditCardId) {
    this.creditCardId = creditCardId;
    return this;
  }

  /**
   * the credit card id to charge for the order.  Currently this is required, even for invoiced accounts, it just won&#39;t be charged.
   * @return creditCardId
   */
  @javax.annotation.Nullable
  public Integer getCreditCardId() {
    return creditCardId;
  }

  public void setCreditCardId(Integer creditCardId) {
    this.creditCardId = creditCardId;
  }


  public SingleStepOrderRequest denominationId(Integer denominationId) {
    this.denominationId = denominationId;
    return this;
  }

  /**
   * Optional.  Use if sending a gift card
   * @return denominationId
   */
  @javax.annotation.Nullable
  public Integer getDenominationId() {
    return denominationId;
  }

  public void setDenominationId(Integer denominationId) {
    this.denominationId = denominationId;
  }


  public SingleStepOrderRequest fontLabel(String fontLabel) {
    this.fontLabel = fontLabel;
    return this;
  }

  /**
   * the colloquial name of the font, such as &#39;Fancy Jenna&#39; or &#39;Casual David&#39;
   * @return fontLabel
   */
  @javax.annotation.Nullable
  public String getFontLabel() {
    return fontLabel;
  }

  public void setFontLabel(String fontLabel) {
    this.fontLabel = fontLabel;
  }


  public SingleStepOrderRequest message(String message) {
    this.message = message;
    return this;
  }

  /**
   * the full message body.  Use &#39;\\n&#39; for new lines
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public SingleStepOrderRequest recipientAddress1(String recipientAddress1) {
    this.recipientAddress1 = recipientAddress1;
    return this;
  }

  /**
   * the first address line of the return address
   * @return recipientAddress1
   */
  @javax.annotation.Nullable
  public String getRecipientAddress1() {
    return recipientAddress1;
  }

  public void setRecipientAddress1(String recipientAddress1) {
    this.recipientAddress1 = recipientAddress1;
  }


  public SingleStepOrderRequest recipientAddress2(String recipientAddress2) {
    this.recipientAddress2 = recipientAddress2;
    return this;
  }

  /**
   * the second line of the address, such as suite, apartment, building, etc. Optional
   * @return recipientAddress2
   */
  @javax.annotation.Nullable
  public String getRecipientAddress2() {
    return recipientAddress2;
  }

  public void setRecipientAddress2(String recipientAddress2) {
    this.recipientAddress2 = recipientAddress2;
  }


  public SingleStepOrderRequest recipientBusinessName(String recipientBusinessName) {
    this.recipientBusinessName = recipientBusinessName;
    return this;
  }

  /**
   * the second line of the recipient address.  Optional.
   * @return recipientBusinessName
   */
  @javax.annotation.Nullable
  public String getRecipientBusinessName() {
    return recipientBusinessName;
  }

  public void setRecipientBusinessName(String recipientBusinessName) {
    this.recipientBusinessName = recipientBusinessName;
  }


  public SingleStepOrderRequest recipientCity(String recipientCity) {
    this.recipientCity = recipientCity;
    return this;
  }

  /**
   * the city of the recipient, to appear in the address
   * @return recipientCity
   */
  @javax.annotation.Nullable
  public String getRecipientCity() {
    return recipientCity;
  }

  public void setRecipientCity(String recipientCity) {
    this.recipientCity = recipientCity;
  }


  public SingleStepOrderRequest recipientCountry(String recipientCountry) {
    this.recipientCountry = recipientCountry;
    return this;
  }

  /**
   * the country of the recipient.  Optional and defaults to usa
   * @return recipientCountry
   */
  @javax.annotation.Nullable
  public String getRecipientCountry() {
    return recipientCountry;
  }

  public void setRecipientCountry(String recipientCountry) {
    this.recipientCountry = recipientCountry;
  }


  public SingleStepOrderRequest recipientCountryId(Integer recipientCountryId) {
    this.recipientCountryId = recipientCountryId;
    return this;
  }

  /**
   * alternate way to specify country.  Optional and defaults to 1
   * @return recipientCountryId
   */
  @javax.annotation.Nullable
  public Integer getRecipientCountryId() {
    return recipientCountryId;
  }

  public void setRecipientCountryId(Integer recipientCountryId) {
    this.recipientCountryId = recipientCountryId;
  }


  public SingleStepOrderRequest recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * the name on the recipient address
   * @return recipientName
   */
  @javax.annotation.Nullable
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public SingleStepOrderRequest recipientState(String recipientState) {
    this.recipientState = recipientState;
    return this;
  }

  /**
   * the ABBREVIATED state or province of the recipient.  This is required for US and Canada addresses and optional for all other countries
   * @return recipientState
   */
  @javax.annotation.Nullable
  public String getRecipientState() {
    return recipientState;
  }

  public void setRecipientState(String recipientState) {
    this.recipientState = recipientState;
  }


  public SingleStepOrderRequest recipientZip(String recipientZip) {
    this.recipientZip = recipientZip;
    return this;
  }

  /**
   * the zip code or postal code of the recipient
   * @return recipientZip
   */
  @javax.annotation.Nullable
  public String getRecipientZip() {
    return recipientZip;
  }

  public void setRecipientZip(String recipientZip) {
    this.recipientZip = recipientZip;
  }


  public SingleStepOrderRequest senderAddress1(String senderAddress1) {
    this.senderAddress1 = senderAddress1;
    return this;
  }

  /**
   * the first address line of the return address
   * @return senderAddress1
   */
  @javax.annotation.Nullable
  public String getSenderAddress1() {
    return senderAddress1;
  }

  public void setSenderAddress1(String senderAddress1) {
    this.senderAddress1 = senderAddress1;
  }


  public SingleStepOrderRequest senderAddress2(String senderAddress2) {
    this.senderAddress2 = senderAddress2;
    return this;
  }

  /**
   * the second line of the address, such as suite, apartment, building, etc. Optional
   * @return senderAddress2
   */
  @javax.annotation.Nullable
  public String getSenderAddress2() {
    return senderAddress2;
  }

  public void setSenderAddress2(String senderAddress2) {
    this.senderAddress2 = senderAddress2;
  }


  public SingleStepOrderRequest senderBusinessName(String senderBusinessName) {
    this.senderBusinessName = senderBusinessName;
    return this;
  }

  /**
   * the second line of the return address.  Optional.
   * @return senderBusinessName
   */
  @javax.annotation.Nullable
  public String getSenderBusinessName() {
    return senderBusinessName;
  }

  public void setSenderBusinessName(String senderBusinessName) {
    this.senderBusinessName = senderBusinessName;
  }


  public SingleStepOrderRequest senderCity(String senderCity) {
    this.senderCity = senderCity;
    return this;
  }

  /**
   * the city of the sender, to appear in the return address
   * @return senderCity
   */
  @javax.annotation.Nullable
  public String getSenderCity() {
    return senderCity;
  }

  public void setSenderCity(String senderCity) {
    this.senderCity = senderCity;
  }


  public SingleStepOrderRequest senderCountry(String senderCountry) {
    this.senderCountry = senderCountry;
    return this;
  }

  /**
   * the country of the recipient.  Optional and defaults to usa
   * @return senderCountry
   */
  @javax.annotation.Nullable
  public String getSenderCountry() {
    return senderCountry;
  }

  public void setSenderCountry(String senderCountry) {
    this.senderCountry = senderCountry;
  }


  public SingleStepOrderRequest senderCountryId(Integer senderCountryId) {
    this.senderCountryId = senderCountryId;
    return this;
  }

  /**
   * alternate way to specify country.  Optional and defaults to 1
   * @return senderCountryId
   */
  @javax.annotation.Nullable
  public Integer getSenderCountryId() {
    return senderCountryId;
  }

  public void setSenderCountryId(Integer senderCountryId) {
    this.senderCountryId = senderCountryId;
  }


  public SingleStepOrderRequest senderName(String senderName) {
    this.senderName = senderName;
    return this;
  }

  /**
   * the name on the return address
   * @return senderName
   */
  @javax.annotation.Nullable
  public String getSenderName() {
    return senderName;
  }

  public void setSenderName(String senderName) {
    this.senderName = senderName;
  }


  public SingleStepOrderRequest senderState(String senderState) {
    this.senderState = senderState;
    return this;
  }

  /**
   * the ABBREVIATED state or province of the sender.  This is required for US and Canada addresses and optional for all other countries
   * @return senderState
   */
  @javax.annotation.Nullable
  public String getSenderState() {
    return senderState;
  }

  public void setSenderState(String senderState) {
    this.senderState = senderState;
  }


  public SingleStepOrderRequest senderZip(String senderZip) {
    this.senderZip = senderZip;
    return this;
  }

  /**
   * The postal code or zip code of the sender.
   * @return senderZip
   */
  @javax.annotation.Nullable
  public String getSenderZip() {
    return senderZip;
  }

  public void setSenderZip(String senderZip) {
    this.senderZip = senderZip;
  }


  public SingleStepOrderRequest uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * The UID of the logged-in user
   * @return uid
   */
  @javax.annotation.Nonnull
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleStepOrderRequest singleStepOrderRequest = (SingleStepOrderRequest) o;
    return Objects.equals(this.cardId, singleStepOrderRequest.cardId) &&
        Objects.equals(this.creditCardId, singleStepOrderRequest.creditCardId) &&
        Objects.equals(this.denominationId, singleStepOrderRequest.denominationId) &&
        Objects.equals(this.fontLabel, singleStepOrderRequest.fontLabel) &&
        Objects.equals(this.message, singleStepOrderRequest.message) &&
        Objects.equals(this.recipientAddress1, singleStepOrderRequest.recipientAddress1) &&
        Objects.equals(this.recipientAddress2, singleStepOrderRequest.recipientAddress2) &&
        Objects.equals(this.recipientBusinessName, singleStepOrderRequest.recipientBusinessName) &&
        Objects.equals(this.recipientCity, singleStepOrderRequest.recipientCity) &&
        Objects.equals(this.recipientCountry, singleStepOrderRequest.recipientCountry) &&
        Objects.equals(this.recipientCountryId, singleStepOrderRequest.recipientCountryId) &&
        Objects.equals(this.recipientName, singleStepOrderRequest.recipientName) &&
        Objects.equals(this.recipientState, singleStepOrderRequest.recipientState) &&
        Objects.equals(this.recipientZip, singleStepOrderRequest.recipientZip) &&
        Objects.equals(this.senderAddress1, singleStepOrderRequest.senderAddress1) &&
        Objects.equals(this.senderAddress2, singleStepOrderRequest.senderAddress2) &&
        Objects.equals(this.senderBusinessName, singleStepOrderRequest.senderBusinessName) &&
        Objects.equals(this.senderCity, singleStepOrderRequest.senderCity) &&
        Objects.equals(this.senderCountry, singleStepOrderRequest.senderCountry) &&
        Objects.equals(this.senderCountryId, singleStepOrderRequest.senderCountryId) &&
        Objects.equals(this.senderName, singleStepOrderRequest.senderName) &&
        Objects.equals(this.senderState, singleStepOrderRequest.senderState) &&
        Objects.equals(this.senderZip, singleStepOrderRequest.senderZip) &&
        Objects.equals(this.uid, singleStepOrderRequest.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, creditCardId, denominationId, fontLabel, message, recipientAddress1, recipientAddress2, recipientBusinessName, recipientCity, recipientCountry, recipientCountryId, recipientName, recipientState, recipientZip, senderAddress1, senderAddress2, senderBusinessName, senderCity, senderCountry, senderCountryId, senderName, senderState, senderZip, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleStepOrderRequest {\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    creditCardId: ").append(toIndentedString(creditCardId)).append("\n");
    sb.append("    denominationId: ").append(toIndentedString(denominationId)).append("\n");
    sb.append("    fontLabel: ").append(toIndentedString(fontLabel)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    recipientAddress1: ").append(toIndentedString(recipientAddress1)).append("\n");
    sb.append("    recipientAddress2: ").append(toIndentedString(recipientAddress2)).append("\n");
    sb.append("    recipientBusinessName: ").append(toIndentedString(recipientBusinessName)).append("\n");
    sb.append("    recipientCity: ").append(toIndentedString(recipientCity)).append("\n");
    sb.append("    recipientCountry: ").append(toIndentedString(recipientCountry)).append("\n");
    sb.append("    recipientCountryId: ").append(toIndentedString(recipientCountryId)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    recipientState: ").append(toIndentedString(recipientState)).append("\n");
    sb.append("    recipientZip: ").append(toIndentedString(recipientZip)).append("\n");
    sb.append("    senderAddress1: ").append(toIndentedString(senderAddress1)).append("\n");
    sb.append("    senderAddress2: ").append(toIndentedString(senderAddress2)).append("\n");
    sb.append("    senderBusinessName: ").append(toIndentedString(senderBusinessName)).append("\n");
    sb.append("    senderCity: ").append(toIndentedString(senderCity)).append("\n");
    sb.append("    senderCountry: ").append(toIndentedString(senderCountry)).append("\n");
    sb.append("    senderCountryId: ").append(toIndentedString(senderCountryId)).append("\n");
    sb.append("    senderName: ").append(toIndentedString(senderName)).append("\n");
    sb.append("    senderState: ").append(toIndentedString(senderState)).append("\n");
    sb.append("    senderZip: ").append(toIndentedString(senderZip)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_id");
    openapiFields.add("credit_card_id");
    openapiFields.add("denomination_id");
    openapiFields.add("font_label");
    openapiFields.add("message");
    openapiFields.add("recipient_address1");
    openapiFields.add("recipient_address2");
    openapiFields.add("recipient_business_name");
    openapiFields.add("recipient_city");
    openapiFields.add("recipient_country");
    openapiFields.add("recipient_country_id");
    openapiFields.add("recipient_name");
    openapiFields.add("recipient_state");
    openapiFields.add("recipient_zip");
    openapiFields.add("sender_address1");
    openapiFields.add("sender_address2");
    openapiFields.add("sender_business_name");
    openapiFields.add("sender_city");
    openapiFields.add("sender_country");
    openapiFields.add("sender_country_id");
    openapiFields.add("sender_name");
    openapiFields.add("sender_state");
    openapiFields.add("sender_zip");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("card_id");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("uid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleStepOrderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleStepOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleStepOrderRequest is not found in the empty JSON string", SingleStepOrderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleStepOrderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleStepOrderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SingleStepOrderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("font_label") != null && !jsonObj.get("font_label").isJsonNull()) && !jsonObj.get("font_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `font_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("font_label").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("recipient_address1") != null && !jsonObj.get("recipient_address1").isJsonNull()) && !jsonObj.get("recipient_address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_address1").toString()));
      }
      if ((jsonObj.get("recipient_address2") != null && !jsonObj.get("recipient_address2").isJsonNull()) && !jsonObj.get("recipient_address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_address2").toString()));
      }
      if ((jsonObj.get("recipient_business_name") != null && !jsonObj.get("recipient_business_name").isJsonNull()) && !jsonObj.get("recipient_business_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_business_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_business_name").toString()));
      }
      if ((jsonObj.get("recipient_city") != null && !jsonObj.get("recipient_city").isJsonNull()) && !jsonObj.get("recipient_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_city").toString()));
      }
      if ((jsonObj.get("recipient_country") != null && !jsonObj.get("recipient_country").isJsonNull()) && !jsonObj.get("recipient_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_country").toString()));
      }
      if ((jsonObj.get("recipient_name") != null && !jsonObj.get("recipient_name").isJsonNull()) && !jsonObj.get("recipient_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_name").toString()));
      }
      if ((jsonObj.get("recipient_state") != null && !jsonObj.get("recipient_state").isJsonNull()) && !jsonObj.get("recipient_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_state").toString()));
      }
      if ((jsonObj.get("recipient_zip") != null && !jsonObj.get("recipient_zip").isJsonNull()) && !jsonObj.get("recipient_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_zip").toString()));
      }
      if ((jsonObj.get("sender_address1") != null && !jsonObj.get("sender_address1").isJsonNull()) && !jsonObj.get("sender_address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_address1").toString()));
      }
      if ((jsonObj.get("sender_address2") != null && !jsonObj.get("sender_address2").isJsonNull()) && !jsonObj.get("sender_address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_address2").toString()));
      }
      if ((jsonObj.get("sender_business_name") != null && !jsonObj.get("sender_business_name").isJsonNull()) && !jsonObj.get("sender_business_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_business_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_business_name").toString()));
      }
      if ((jsonObj.get("sender_city") != null && !jsonObj.get("sender_city").isJsonNull()) && !jsonObj.get("sender_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_city").toString()));
      }
      if ((jsonObj.get("sender_country") != null && !jsonObj.get("sender_country").isJsonNull()) && !jsonObj.get("sender_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_country").toString()));
      }
      if ((jsonObj.get("sender_name") != null && !jsonObj.get("sender_name").isJsonNull()) && !jsonObj.get("sender_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_name").toString()));
      }
      if ((jsonObj.get("sender_state") != null && !jsonObj.get("sender_state").isJsonNull()) && !jsonObj.get("sender_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_state").toString()));
      }
      if ((jsonObj.get("sender_zip") != null && !jsonObj.get("sender_zip").isJsonNull()) && !jsonObj.get("sender_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_zip").toString()));
      }
      if (!jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleStepOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleStepOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleStepOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleStepOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleStepOrderRequest>() {
           @Override
           public void write(JsonWriter out, SingleStepOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleStepOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleStepOrderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleStepOrderRequest
   * @throws IOException if the JSON string is invalid with respect to SingleStepOrderRequest
   */
  public static SingleStepOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleStepOrderRequest.class);
  }

  /**
   * Convert an instance of SingleStepOrderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

