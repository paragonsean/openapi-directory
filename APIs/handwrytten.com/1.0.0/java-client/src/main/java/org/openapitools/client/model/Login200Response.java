/*
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Login200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:55.528804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Login200Response {
  public static final String SERIALIZED_NAME_ANET_CUSTOMER_ID = "anet_customer_id";
  @SerializedName(SERIALIZED_NAME_ANET_CUSTOMER_ID)
  private String anetCustomerId;

  public static final String SERIALIZED_NAME_FREE_CARDS = "free_cards";
  @SerializedName(SERIALIZED_NAME_FREE_CARDS)
  private Integer freeCards;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public Login200Response() {
  }

  public Login200Response anetCustomerId(String anetCustomerId) {
    this.anetCustomerId = anetCustomerId;
    return this;
  }

  /**
   * used internally by Handwrytten
   * @return anetCustomerId
   */
  @javax.annotation.Nullable
  public String getAnetCustomerId() {
    return anetCustomerId;
  }

  public void setAnetCustomerId(String anetCustomerId) {
    this.anetCustomerId = anetCustomerId;
  }


  public Login200Response freeCards(Integer freeCards) {
    this.freeCards = freeCards;
    return this;
  }

  /**
   * number of free cards in account
   * @return freeCards
   */
  @javax.annotation.Nullable
  public Integer getFreeCards() {
    return freeCards;
  }

  public void setFreeCards(Integer freeCards) {
    this.freeCards = freeCards;
  }


  public Login200Response status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Login200Response uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * token for future authorized calls
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public Login200Response userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Login200Response login200Response = (Login200Response) o;
    return Objects.equals(this.anetCustomerId, login200Response.anetCustomerId) &&
        Objects.equals(this.freeCards, login200Response.freeCards) &&
        Objects.equals(this.status, login200Response.status) &&
        Objects.equals(this.uid, login200Response.uid) &&
        Objects.equals(this.userId, login200Response.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anetCustomerId, freeCards, status, uid, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Login200Response {\n");
    sb.append("    anetCustomerId: ").append(toIndentedString(anetCustomerId)).append("\n");
    sb.append("    freeCards: ").append(toIndentedString(freeCards)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anet_customer_id");
    openapiFields.add("free_cards");
    openapiFields.add("status");
    openapiFields.add("uid");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Login200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Login200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Login200Response is not found in the empty JSON string", Login200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Login200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Login200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("anet_customer_id") != null && !jsonObj.get("anet_customer_id").isJsonNull()) && !jsonObj.get("anet_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anet_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anet_customer_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Login200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Login200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Login200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Login200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Login200Response>() {
           @Override
           public void write(JsonWriter out, Login200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Login200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Login200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Login200Response
   * @throws IOException if the JSON string is invalid with respect to Login200Response
   */
  public static Login200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Login200Response.class);
  }

  /**
   * Convert an instance of Login200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

