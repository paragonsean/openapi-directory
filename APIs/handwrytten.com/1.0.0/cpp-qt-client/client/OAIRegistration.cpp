/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistration::OAIRegistration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistration::OAIRegistration() {
    this->initializeModel();
}

OAIRegistration::~OAIRegistration() {}

void OAIRegistration::initializeModel() {

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_fname_isSet = false;
    m_fname_isValid = false;

    m_lname_isSet = false;
    m_lname_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAIRegistration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistration::fromJsonObject(QJsonObject json) {

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discount_code")]);
    m_discount_code_isSet = !json[QString("discount_code")].isNull() && m_discount_code_isValid;

    m_fname_isValid = ::OpenAPI::fromJsonValue(m_fname, json[QString("fname")]);
    m_fname_isSet = !json[QString("fname")].isNull() && m_fname_isValid;

    m_lname_isValid = ::OpenAPI::fromJsonValue(m_lname, json[QString("lname")]);
    m_lname_isSet = !json[QString("lname")].isNull() && m_lname_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;
}

QString OAIRegistration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistration::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_code_isSet) {
        obj.insert(QString("discount_code"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_fname_isSet) {
        obj.insert(QString("fname"), ::OpenAPI::toJsonValue(m_fname));
    }
    if (m_lname_isSet) {
        obj.insert(QString("lname"), ::OpenAPI::toJsonValue(m_lname));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAIRegistration::getDiscountCode() const {
    return m_discount_code;
}
void OAIRegistration::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAIRegistration::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAIRegistration::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

QString OAIRegistration::getFname() const {
    return m_fname;
}
void OAIRegistration::setFname(const QString &fname) {
    m_fname = fname;
    m_fname_isSet = true;
}

bool OAIRegistration::is_fname_Set() const{
    return m_fname_isSet;
}

bool OAIRegistration::is_fname_Valid() const{
    return m_fname_isValid;
}

QString OAIRegistration::getLname() const {
    return m_lname;
}
void OAIRegistration::setLname(const QString &lname) {
    m_lname = lname;
    m_lname_isSet = true;
}

bool OAIRegistration::is_lname_Set() const{
    return m_lname_isSet;
}

bool OAIRegistration::is_lname_Valid() const{
    return m_lname_isValid;
}

QString OAIRegistration::getLogin() const {
    return m_login;
}
void OAIRegistration::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIRegistration::is_login_Set() const{
    return m_login_isSet;
}

bool OAIRegistration::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIRegistration::getPassword() const {
    return m_password;
}
void OAIRegistration::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIRegistration::is_password_Set() const{
    return m_password_isSet;
}

bool OAIRegistration::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIRegistration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fname_isValid && m_lname_isValid && m_login_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
