/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageArray.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageArray::OAIImageArray(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageArray::OAIImageArray() {
    this->initializeModel();
}

OAIImageArray::~OAIImageArray() {}

void OAIImageArray::initializeModel() {

    m_array_isSet = false;
    m_array_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIImageArray::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageArray::fromJsonObject(QJsonObject json) {

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIImageArray::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageArray::asJsonObject() const {
    QJsonObject obj;
    if (m_array.size() > 0) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIImageArray::getArray() const {
    return m_array;
}
void OAIImageArray::setArray(const QList<QString> &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAIImageArray::is_array_Set() const{
    return m_array_isSet;
}

bool OAIImageArray::is_array_Valid() const{
    return m_array_isValid;
}

QString OAIImageArray::getName() const {
    return m_name;
}
void OAIImageArray::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageArray::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageArray::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIImageArray::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageArray::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
