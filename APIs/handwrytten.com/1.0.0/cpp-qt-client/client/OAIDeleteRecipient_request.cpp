/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRecipient_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRecipient_request::OAIDeleteRecipient_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRecipient_request::OAIDeleteRecipient_request() {
    this->initializeModel();
}

OAIDeleteRecipient_request::~OAIDeleteRecipient_request() {}

void OAIDeleteRecipient_request::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIDeleteRecipient_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRecipient_request::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("address_id")]);
    m_address_id_isSet = !json[QString("address_id")].isNull() && m_address_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIDeleteRecipient_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRecipient_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("address_id"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAIDeleteRecipient_request::getAddressId() const {
    return m_address_id;
}
void OAIDeleteRecipient_request::setAddressId(const qint32 &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIDeleteRecipient_request::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIDeleteRecipient_request::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAIDeleteRecipient_request::getUid() const {
    return m_uid;
}
void OAIDeleteRecipient_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIDeleteRecipient_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIDeleteRecipient_request::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIDeleteRecipient_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRecipient_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_id_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
