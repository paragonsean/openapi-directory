/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_address_from_isSet = false;
    m_address_from_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_for_free_isSet = false;
    m_for_free_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_address_from_isValid = ::OpenAPI::fromJsonValue(m_address_from, json[QString("address_from")]);
    m_address_from_isSet = !json[QString("address_from")].isNull() && m_address_from_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_for_free_isValid = ::OpenAPI::fromJsonValue(m_for_free, json[QString("for_free")]);
    m_for_free_isSet = !json[QString("for_free")].isNull() && m_for_free_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_address_from.isSet()) {
        obj.insert(QString("address_from"), ::OpenAPI::toJsonValue(m_address_from));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_for_free_isSet) {
        obj.insert(QString("for_free"), ::OpenAPI::toJsonValue(m_for_free));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIAddress OAIOrder::getAddressFrom() const {
    return m_address_from;
}
void OAIOrder::setAddressFrom(const OAIAddress &address_from) {
    m_address_from = address_from;
    m_address_from_isSet = true;
}

bool OAIOrder::is_address_from_Set() const{
    return m_address_from_isSet;
}

bool OAIOrder::is_address_from_Valid() const{
    return m_address_from_isValid;
}

OAICard OAIOrder::getCard() const {
    return m_card;
}
void OAIOrder::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIOrder::is_card_Set() const{
    return m_card_isSet;
}

bool OAIOrder::is_card_Valid() const{
    return m_card_isValid;
}

QString OAIOrder::getDateCreated() const {
    return m_date_created;
}
void OAIOrder::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIOrder::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIOrder::is_date_created_Valid() const{
    return m_date_created_isValid;
}

bool OAIOrder::isForFree() const {
    return m_for_free;
}
void OAIOrder::setForFree(const bool &for_free) {
    m_for_free = for_free;
    m_for_free_isSet = true;
}

bool OAIOrder::is_for_free_Set() const{
    return m_for_free_isSet;
}

bool OAIOrder::is_for_free_Valid() const{
    return m_for_free_isValid;
}

qint32 OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrder::getMessage() const {
    return m_message;
}
void OAIOrder::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIOrder::is_message_Set() const{
    return m_message_isSet;
}

bool OAIOrder::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_for_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
