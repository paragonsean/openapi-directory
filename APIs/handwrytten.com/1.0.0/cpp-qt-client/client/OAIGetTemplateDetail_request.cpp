/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTemplateDetail_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTemplateDetail_request::OAIGetTemplateDetail_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTemplateDetail_request::OAIGetTemplateDetail_request() {
    this->initializeModel();
}

OAIGetTemplateDetail_request::~OAIGetTemplateDetail_request() {}

void OAIGetTemplateDetail_request::initializeModel() {

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIGetTemplateDetail_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTemplateDetail_request::fromJsonObject(QJsonObject json) {

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIGetTemplateDetail_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTemplateDetail_request::asJsonObject() const {
    QJsonObject obj;
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAIGetTemplateDetail_request::getTemplateId() const {
    return m_template_id;
}
void OAIGetTemplateDetail_request::setTemplateId(const qint32 &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIGetTemplateDetail_request::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIGetTemplateDetail_request::is_template_id_Valid() const{
    return m_template_id_isValid;
}

QString OAIGetTemplateDetail_request::getUid() const {
    return m_uid;
}
void OAIGetTemplateDetail_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGetTemplateDetail_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGetTemplateDetail_request::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIGetTemplateDetail_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTemplateDetail_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
