/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingleStepOrder_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingleStepOrder_request::OAISingleStepOrder_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingleStepOrder_request::OAISingleStepOrder_request() {
    this->initializeModel();
}

OAISingleStepOrder_request::~OAISingleStepOrder_request() {}

void OAISingleStepOrder_request::initializeModel() {

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_credit_card_id_isSet = false;
    m_credit_card_id_isValid = false;

    m_denomination_id_isSet = false;
    m_denomination_id_isValid = false;

    m_font_label_isSet = false;
    m_font_label_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_recipient_address1_isSet = false;
    m_recipient_address1_isValid = false;

    m_recipient_address2_isSet = false;
    m_recipient_address2_isValid = false;

    m_recipient_business_name_isSet = false;
    m_recipient_business_name_isValid = false;

    m_recipient_city_isSet = false;
    m_recipient_city_isValid = false;

    m_recipient_country_isSet = false;
    m_recipient_country_isValid = false;

    m_recipient_country_id_isSet = false;
    m_recipient_country_id_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_recipient_state_isSet = false;
    m_recipient_state_isValid = false;

    m_recipient_zip_isSet = false;
    m_recipient_zip_isValid = false;

    m_sender_address1_isSet = false;
    m_sender_address1_isValid = false;

    m_sender_address2_isSet = false;
    m_sender_address2_isValid = false;

    m_sender_business_name_isSet = false;
    m_sender_business_name_isValid = false;

    m_sender_city_isSet = false;
    m_sender_city_isValid = false;

    m_sender_country_isSet = false;
    m_sender_country_isValid = false;

    m_sender_country_id_isSet = false;
    m_sender_country_id_isValid = false;

    m_sender_name_isSet = false;
    m_sender_name_isValid = false;

    m_sender_state_isSet = false;
    m_sender_state_isValid = false;

    m_sender_zip_isSet = false;
    m_sender_zip_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAISingleStepOrder_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingleStepOrder_request::fromJsonObject(QJsonObject json) {

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_credit_card_id_isValid = ::OpenAPI::fromJsonValue(m_credit_card_id, json[QString("credit_card_id")]);
    m_credit_card_id_isSet = !json[QString("credit_card_id")].isNull() && m_credit_card_id_isValid;

    m_denomination_id_isValid = ::OpenAPI::fromJsonValue(m_denomination_id, json[QString("denomination_id")]);
    m_denomination_id_isSet = !json[QString("denomination_id")].isNull() && m_denomination_id_isValid;

    m_font_label_isValid = ::OpenAPI::fromJsonValue(m_font_label, json[QString("font_label")]);
    m_font_label_isSet = !json[QString("font_label")].isNull() && m_font_label_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_recipient_address1_isValid = ::OpenAPI::fromJsonValue(m_recipient_address1, json[QString("recipient_address1")]);
    m_recipient_address1_isSet = !json[QString("recipient_address1")].isNull() && m_recipient_address1_isValid;

    m_recipient_address2_isValid = ::OpenAPI::fromJsonValue(m_recipient_address2, json[QString("recipient_address2")]);
    m_recipient_address2_isSet = !json[QString("recipient_address2")].isNull() && m_recipient_address2_isValid;

    m_recipient_business_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_business_name, json[QString("recipient_business_name")]);
    m_recipient_business_name_isSet = !json[QString("recipient_business_name")].isNull() && m_recipient_business_name_isValid;

    m_recipient_city_isValid = ::OpenAPI::fromJsonValue(m_recipient_city, json[QString("recipient_city")]);
    m_recipient_city_isSet = !json[QString("recipient_city")].isNull() && m_recipient_city_isValid;

    m_recipient_country_isValid = ::OpenAPI::fromJsonValue(m_recipient_country, json[QString("recipient_country")]);
    m_recipient_country_isSet = !json[QString("recipient_country")].isNull() && m_recipient_country_isValid;

    m_recipient_country_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_country_id, json[QString("recipient_country_id")]);
    m_recipient_country_id_isSet = !json[QString("recipient_country_id")].isNull() && m_recipient_country_id_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_recipient_state_isValid = ::OpenAPI::fromJsonValue(m_recipient_state, json[QString("recipient_state")]);
    m_recipient_state_isSet = !json[QString("recipient_state")].isNull() && m_recipient_state_isValid;

    m_recipient_zip_isValid = ::OpenAPI::fromJsonValue(m_recipient_zip, json[QString("recipient_zip")]);
    m_recipient_zip_isSet = !json[QString("recipient_zip")].isNull() && m_recipient_zip_isValid;

    m_sender_address1_isValid = ::OpenAPI::fromJsonValue(m_sender_address1, json[QString("sender_address1")]);
    m_sender_address1_isSet = !json[QString("sender_address1")].isNull() && m_sender_address1_isValid;

    m_sender_address2_isValid = ::OpenAPI::fromJsonValue(m_sender_address2, json[QString("sender_address2")]);
    m_sender_address2_isSet = !json[QString("sender_address2")].isNull() && m_sender_address2_isValid;

    m_sender_business_name_isValid = ::OpenAPI::fromJsonValue(m_sender_business_name, json[QString("sender_business_name")]);
    m_sender_business_name_isSet = !json[QString("sender_business_name")].isNull() && m_sender_business_name_isValid;

    m_sender_city_isValid = ::OpenAPI::fromJsonValue(m_sender_city, json[QString("sender_city")]);
    m_sender_city_isSet = !json[QString("sender_city")].isNull() && m_sender_city_isValid;

    m_sender_country_isValid = ::OpenAPI::fromJsonValue(m_sender_country, json[QString("sender_country")]);
    m_sender_country_isSet = !json[QString("sender_country")].isNull() && m_sender_country_isValid;

    m_sender_country_id_isValid = ::OpenAPI::fromJsonValue(m_sender_country_id, json[QString("sender_country_id")]);
    m_sender_country_id_isSet = !json[QString("sender_country_id")].isNull() && m_sender_country_id_isValid;

    m_sender_name_isValid = ::OpenAPI::fromJsonValue(m_sender_name, json[QString("sender_name")]);
    m_sender_name_isSet = !json[QString("sender_name")].isNull() && m_sender_name_isValid;

    m_sender_state_isValid = ::OpenAPI::fromJsonValue(m_sender_state, json[QString("sender_state")]);
    m_sender_state_isSet = !json[QString("sender_state")].isNull() && m_sender_state_isValid;

    m_sender_zip_isValid = ::OpenAPI::fromJsonValue(m_sender_zip, json[QString("sender_zip")]);
    m_sender_zip_isSet = !json[QString("sender_zip")].isNull() && m_sender_zip_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAISingleStepOrder_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingleStepOrder_request::asJsonObject() const {
    QJsonObject obj;
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_credit_card_id_isSet) {
        obj.insert(QString("credit_card_id"), ::OpenAPI::toJsonValue(m_credit_card_id));
    }
    if (m_denomination_id_isSet) {
        obj.insert(QString("denomination_id"), ::OpenAPI::toJsonValue(m_denomination_id));
    }
    if (m_font_label_isSet) {
        obj.insert(QString("font_label"), ::OpenAPI::toJsonValue(m_font_label));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_recipient_address1_isSet) {
        obj.insert(QString("recipient_address1"), ::OpenAPI::toJsonValue(m_recipient_address1));
    }
    if (m_recipient_address2_isSet) {
        obj.insert(QString("recipient_address2"), ::OpenAPI::toJsonValue(m_recipient_address2));
    }
    if (m_recipient_business_name_isSet) {
        obj.insert(QString("recipient_business_name"), ::OpenAPI::toJsonValue(m_recipient_business_name));
    }
    if (m_recipient_city_isSet) {
        obj.insert(QString("recipient_city"), ::OpenAPI::toJsonValue(m_recipient_city));
    }
    if (m_recipient_country_isSet) {
        obj.insert(QString("recipient_country"), ::OpenAPI::toJsonValue(m_recipient_country));
    }
    if (m_recipient_country_id_isSet) {
        obj.insert(QString("recipient_country_id"), ::OpenAPI::toJsonValue(m_recipient_country_id));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_recipient_state_isSet) {
        obj.insert(QString("recipient_state"), ::OpenAPI::toJsonValue(m_recipient_state));
    }
    if (m_recipient_zip_isSet) {
        obj.insert(QString("recipient_zip"), ::OpenAPI::toJsonValue(m_recipient_zip));
    }
    if (m_sender_address1_isSet) {
        obj.insert(QString("sender_address1"), ::OpenAPI::toJsonValue(m_sender_address1));
    }
    if (m_sender_address2_isSet) {
        obj.insert(QString("sender_address2"), ::OpenAPI::toJsonValue(m_sender_address2));
    }
    if (m_sender_business_name_isSet) {
        obj.insert(QString("sender_business_name"), ::OpenAPI::toJsonValue(m_sender_business_name));
    }
    if (m_sender_city_isSet) {
        obj.insert(QString("sender_city"), ::OpenAPI::toJsonValue(m_sender_city));
    }
    if (m_sender_country_isSet) {
        obj.insert(QString("sender_country"), ::OpenAPI::toJsonValue(m_sender_country));
    }
    if (m_sender_country_id_isSet) {
        obj.insert(QString("sender_country_id"), ::OpenAPI::toJsonValue(m_sender_country_id));
    }
    if (m_sender_name_isSet) {
        obj.insert(QString("sender_name"), ::OpenAPI::toJsonValue(m_sender_name));
    }
    if (m_sender_state_isSet) {
        obj.insert(QString("sender_state"), ::OpenAPI::toJsonValue(m_sender_state));
    }
    if (m_sender_zip_isSet) {
        obj.insert(QString("sender_zip"), ::OpenAPI::toJsonValue(m_sender_zip));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAISingleStepOrder_request::getCardId() const {
    return m_card_id;
}
void OAISingleStepOrder_request::setCardId(const qint32 &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAISingleStepOrder_request::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAISingleStepOrder_request::is_card_id_Valid() const{
    return m_card_id_isValid;
}

qint32 OAISingleStepOrder_request::getCreditCardId() const {
    return m_credit_card_id;
}
void OAISingleStepOrder_request::setCreditCardId(const qint32 &credit_card_id) {
    m_credit_card_id = credit_card_id;
    m_credit_card_id_isSet = true;
}

bool OAISingleStepOrder_request::is_credit_card_id_Set() const{
    return m_credit_card_id_isSet;
}

bool OAISingleStepOrder_request::is_credit_card_id_Valid() const{
    return m_credit_card_id_isValid;
}

qint32 OAISingleStepOrder_request::getDenominationId() const {
    return m_denomination_id;
}
void OAISingleStepOrder_request::setDenominationId(const qint32 &denomination_id) {
    m_denomination_id = denomination_id;
    m_denomination_id_isSet = true;
}

bool OAISingleStepOrder_request::is_denomination_id_Set() const{
    return m_denomination_id_isSet;
}

bool OAISingleStepOrder_request::is_denomination_id_Valid() const{
    return m_denomination_id_isValid;
}

QString OAISingleStepOrder_request::getFontLabel() const {
    return m_font_label;
}
void OAISingleStepOrder_request::setFontLabel(const QString &font_label) {
    m_font_label = font_label;
    m_font_label_isSet = true;
}

bool OAISingleStepOrder_request::is_font_label_Set() const{
    return m_font_label_isSet;
}

bool OAISingleStepOrder_request::is_font_label_Valid() const{
    return m_font_label_isValid;
}

QString OAISingleStepOrder_request::getMessage() const {
    return m_message;
}
void OAISingleStepOrder_request::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISingleStepOrder_request::is_message_Set() const{
    return m_message_isSet;
}

bool OAISingleStepOrder_request::is_message_Valid() const{
    return m_message_isValid;
}

QString OAISingleStepOrder_request::getRecipientAddress1() const {
    return m_recipient_address1;
}
void OAISingleStepOrder_request::setRecipientAddress1(const QString &recipient_address1) {
    m_recipient_address1 = recipient_address1;
    m_recipient_address1_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_address1_Set() const{
    return m_recipient_address1_isSet;
}

bool OAISingleStepOrder_request::is_recipient_address1_Valid() const{
    return m_recipient_address1_isValid;
}

QString OAISingleStepOrder_request::getRecipientAddress2() const {
    return m_recipient_address2;
}
void OAISingleStepOrder_request::setRecipientAddress2(const QString &recipient_address2) {
    m_recipient_address2 = recipient_address2;
    m_recipient_address2_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_address2_Set() const{
    return m_recipient_address2_isSet;
}

bool OAISingleStepOrder_request::is_recipient_address2_Valid() const{
    return m_recipient_address2_isValid;
}

QString OAISingleStepOrder_request::getRecipientBusinessName() const {
    return m_recipient_business_name;
}
void OAISingleStepOrder_request::setRecipientBusinessName(const QString &recipient_business_name) {
    m_recipient_business_name = recipient_business_name;
    m_recipient_business_name_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_business_name_Set() const{
    return m_recipient_business_name_isSet;
}

bool OAISingleStepOrder_request::is_recipient_business_name_Valid() const{
    return m_recipient_business_name_isValid;
}

QString OAISingleStepOrder_request::getRecipientCity() const {
    return m_recipient_city;
}
void OAISingleStepOrder_request::setRecipientCity(const QString &recipient_city) {
    m_recipient_city = recipient_city;
    m_recipient_city_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_city_Set() const{
    return m_recipient_city_isSet;
}

bool OAISingleStepOrder_request::is_recipient_city_Valid() const{
    return m_recipient_city_isValid;
}

QString OAISingleStepOrder_request::getRecipientCountry() const {
    return m_recipient_country;
}
void OAISingleStepOrder_request::setRecipientCountry(const QString &recipient_country) {
    m_recipient_country = recipient_country;
    m_recipient_country_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_country_Set() const{
    return m_recipient_country_isSet;
}

bool OAISingleStepOrder_request::is_recipient_country_Valid() const{
    return m_recipient_country_isValid;
}

qint32 OAISingleStepOrder_request::getRecipientCountryId() const {
    return m_recipient_country_id;
}
void OAISingleStepOrder_request::setRecipientCountryId(const qint32 &recipient_country_id) {
    m_recipient_country_id = recipient_country_id;
    m_recipient_country_id_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_country_id_Set() const{
    return m_recipient_country_id_isSet;
}

bool OAISingleStepOrder_request::is_recipient_country_id_Valid() const{
    return m_recipient_country_id_isValid;
}

QString OAISingleStepOrder_request::getRecipientName() const {
    return m_recipient_name;
}
void OAISingleStepOrder_request::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAISingleStepOrder_request::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAISingleStepOrder_request::getRecipientState() const {
    return m_recipient_state;
}
void OAISingleStepOrder_request::setRecipientState(const QString &recipient_state) {
    m_recipient_state = recipient_state;
    m_recipient_state_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_state_Set() const{
    return m_recipient_state_isSet;
}

bool OAISingleStepOrder_request::is_recipient_state_Valid() const{
    return m_recipient_state_isValid;
}

QString OAISingleStepOrder_request::getRecipientZip() const {
    return m_recipient_zip;
}
void OAISingleStepOrder_request::setRecipientZip(const QString &recipient_zip) {
    m_recipient_zip = recipient_zip;
    m_recipient_zip_isSet = true;
}

bool OAISingleStepOrder_request::is_recipient_zip_Set() const{
    return m_recipient_zip_isSet;
}

bool OAISingleStepOrder_request::is_recipient_zip_Valid() const{
    return m_recipient_zip_isValid;
}

QString OAISingleStepOrder_request::getSenderAddress1() const {
    return m_sender_address1;
}
void OAISingleStepOrder_request::setSenderAddress1(const QString &sender_address1) {
    m_sender_address1 = sender_address1;
    m_sender_address1_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_address1_Set() const{
    return m_sender_address1_isSet;
}

bool OAISingleStepOrder_request::is_sender_address1_Valid() const{
    return m_sender_address1_isValid;
}

QString OAISingleStepOrder_request::getSenderAddress2() const {
    return m_sender_address2;
}
void OAISingleStepOrder_request::setSenderAddress2(const QString &sender_address2) {
    m_sender_address2 = sender_address2;
    m_sender_address2_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_address2_Set() const{
    return m_sender_address2_isSet;
}

bool OAISingleStepOrder_request::is_sender_address2_Valid() const{
    return m_sender_address2_isValid;
}

QString OAISingleStepOrder_request::getSenderBusinessName() const {
    return m_sender_business_name;
}
void OAISingleStepOrder_request::setSenderBusinessName(const QString &sender_business_name) {
    m_sender_business_name = sender_business_name;
    m_sender_business_name_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_business_name_Set() const{
    return m_sender_business_name_isSet;
}

bool OAISingleStepOrder_request::is_sender_business_name_Valid() const{
    return m_sender_business_name_isValid;
}

QString OAISingleStepOrder_request::getSenderCity() const {
    return m_sender_city;
}
void OAISingleStepOrder_request::setSenderCity(const QString &sender_city) {
    m_sender_city = sender_city;
    m_sender_city_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_city_Set() const{
    return m_sender_city_isSet;
}

bool OAISingleStepOrder_request::is_sender_city_Valid() const{
    return m_sender_city_isValid;
}

QString OAISingleStepOrder_request::getSenderCountry() const {
    return m_sender_country;
}
void OAISingleStepOrder_request::setSenderCountry(const QString &sender_country) {
    m_sender_country = sender_country;
    m_sender_country_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_country_Set() const{
    return m_sender_country_isSet;
}

bool OAISingleStepOrder_request::is_sender_country_Valid() const{
    return m_sender_country_isValid;
}

qint32 OAISingleStepOrder_request::getSenderCountryId() const {
    return m_sender_country_id;
}
void OAISingleStepOrder_request::setSenderCountryId(const qint32 &sender_country_id) {
    m_sender_country_id = sender_country_id;
    m_sender_country_id_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_country_id_Set() const{
    return m_sender_country_id_isSet;
}

bool OAISingleStepOrder_request::is_sender_country_id_Valid() const{
    return m_sender_country_id_isValid;
}

QString OAISingleStepOrder_request::getSenderName() const {
    return m_sender_name;
}
void OAISingleStepOrder_request::setSenderName(const QString &sender_name) {
    m_sender_name = sender_name;
    m_sender_name_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_name_Set() const{
    return m_sender_name_isSet;
}

bool OAISingleStepOrder_request::is_sender_name_Valid() const{
    return m_sender_name_isValid;
}

QString OAISingleStepOrder_request::getSenderState() const {
    return m_sender_state;
}
void OAISingleStepOrder_request::setSenderState(const QString &sender_state) {
    m_sender_state = sender_state;
    m_sender_state_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_state_Set() const{
    return m_sender_state_isSet;
}

bool OAISingleStepOrder_request::is_sender_state_Valid() const{
    return m_sender_state_isValid;
}

QString OAISingleStepOrder_request::getSenderZip() const {
    return m_sender_zip;
}
void OAISingleStepOrder_request::setSenderZip(const QString &sender_zip) {
    m_sender_zip = sender_zip;
    m_sender_zip_isSet = true;
}

bool OAISingleStepOrder_request::is_sender_zip_Set() const{
    return m_sender_zip_isSet;
}

bool OAISingleStepOrder_request::is_sender_zip_Valid() const{
    return m_sender_zip_isValid;
}

QString OAISingleStepOrder_request::getUid() const {
    return m_uid;
}
void OAISingleStepOrder_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAISingleStepOrder_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAISingleStepOrder_request::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAISingleStepOrder_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denomination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingleStepOrder_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_id_isValid && m_message_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
