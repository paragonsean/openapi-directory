/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRecipient_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRecipient_request::OAIUpdateRecipient_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRecipient_request::OAIUpdateRecipient_request() {
    this->initializeModel();
}

OAIUpdateRecipient_request::~OAIUpdateRecipient_request() {}

void OAIUpdateRecipient_request::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIUpdateRecipient_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRecipient_request::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("business_name")]);
    m_business_name_isSet = !json[QString("business_name")].isNull() && m_business_name_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("country_id")]);
    m_country_id_isSet = !json[QString("country_id")].isNull() && m_country_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIUpdateRecipient_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRecipient_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_business_name_isSet) {
        obj.insert(QString("business_name"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_id_isSet) {
        obj.insert(QString("country_id"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIUpdateRecipient_request::getAddress1() const {
    return m_address1;
}
void OAIUpdateRecipient_request::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIUpdateRecipient_request::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIUpdateRecipient_request::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIUpdateRecipient_request::getAddress2() const {
    return m_address2;
}
void OAIUpdateRecipient_request::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIUpdateRecipient_request::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIUpdateRecipient_request::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIUpdateRecipient_request::getBusinessName() const {
    return m_business_name;
}
void OAIUpdateRecipient_request::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIUpdateRecipient_request::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIUpdateRecipient_request::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIUpdateRecipient_request::getCity() const {
    return m_city;
}
void OAIUpdateRecipient_request::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUpdateRecipient_request::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUpdateRecipient_request::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUpdateRecipient_request::getCountry() const {
    return m_country;
}
void OAIUpdateRecipient_request::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUpdateRecipient_request::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUpdateRecipient_request::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAIUpdateRecipient_request::getCountryId() const {
    return m_country_id;
}
void OAIUpdateRecipient_request::setCountryId(const qint32 &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAIUpdateRecipient_request::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAIUpdateRecipient_request::is_country_id_Valid() const{
    return m_country_id_isValid;
}

qint32 OAIUpdateRecipient_request::getId() const {
    return m_id;
}
void OAIUpdateRecipient_request::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateRecipient_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateRecipient_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateRecipient_request::getName() const {
    return m_name;
}
void OAIUpdateRecipient_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateRecipient_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateRecipient_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateRecipient_request::getState() const {
    return m_state;
}
void OAIUpdateRecipient_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUpdateRecipient_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUpdateRecipient_request::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUpdateRecipient_request::getUid() const {
    return m_uid;
}
void OAIUpdateRecipient_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIUpdateRecipient_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIUpdateRecipient_request::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIUpdateRecipient_request::getZip() const {
    return m_zip;
}
void OAIUpdateRecipient_request::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIUpdateRecipient_request::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIUpdateRecipient_request::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIUpdateRecipient_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRecipient_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
