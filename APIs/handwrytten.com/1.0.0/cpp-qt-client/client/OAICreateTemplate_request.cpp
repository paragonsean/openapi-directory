/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTemplate_request::OAICreateTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTemplate_request::OAICreateTemplate_request() {
    this->initializeModel();
}

OAICreateTemplate_request::~OAICreateTemplate_request() {}

void OAICreateTemplate_request::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAICreateTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTemplate_request::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAICreateTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAICreateTemplate_request::getMessage() const {
    return m_message;
}
void OAICreateTemplate_request::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateTemplate_request::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateTemplate_request::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICreateTemplate_request::getName() const {
    return m_name;
}
void OAICreateTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateTemplate_request::getUid() const {
    return m_uid;
}
void OAICreateTemplate_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICreateTemplate_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICreateTemplate_request::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAICreateTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
