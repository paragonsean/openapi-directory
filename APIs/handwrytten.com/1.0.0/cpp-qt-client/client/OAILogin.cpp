/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogin::OAILogin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogin::OAILogin() {
    this->initializeModel();
}

OAILogin::~OAILogin() {}

void OAILogin::initializeModel() {

    m_login_isSet = false;
    m_login_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAILogin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogin::fromJsonObject(QJsonObject json) {

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;
}

QString OAILogin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogin::asJsonObject() const {
    QJsonObject obj;
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAILogin::getLogin() const {
    return m_login;
}
void OAILogin::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAILogin::is_login_Set() const{
    return m_login_isSet;
}

bool OAILogin::is_login_Valid() const{
    return m_login_isValid;
}

QString OAILogin::getPassword() const {
    return m_password;
}
void OAILogin::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAILogin::is_password_Set() const{
    return m_password_isSet;
}

bool OAILogin::is_password_Valid() const{
    return m_password_isValid;
}

bool OAILogin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_login_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
