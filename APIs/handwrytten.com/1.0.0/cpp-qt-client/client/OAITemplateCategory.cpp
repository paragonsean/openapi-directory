/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateCategory::OAITemplateCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateCategory::OAITemplateCategory() {
    this->initializeModel();
}

OAITemplateCategory::~OAITemplateCategory() {}

void OAITemplateCategory::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAITemplateCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateCategory::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAITemplateCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

qint32 OAITemplateCategory::getId() const {
    return m_id;
}
void OAITemplateCategory::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITemplateCategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAITemplateCategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITemplateCategory::getName() const {
    return m_name;
}
void OAITemplateCategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateCategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateCategory::is_name_Valid() const{
    return m_name_isValid;
}

double OAITemplateCategory::getPrice() const {
    return m_price;
}
void OAITemplateCategory::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAITemplateCategory::is_price_Set() const{
    return m_price_isSet;
}

bool OAITemplateCategory::is_price_Valid() const{
    return m_price_isValid;
}

bool OAITemplateCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
