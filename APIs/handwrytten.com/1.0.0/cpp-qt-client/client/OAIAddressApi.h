/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddressApi_H
#define OAI_OAIAddressApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddRecipientAddress_200_response.h"
#include "OAIAddRecipientAddress_request.h"
#include "OAIDeleteRecipient_200_response.h"
#include "OAIDeleteRecipient_request.h"
#include "OAIRecipientAddress.h"
#include "OAIRecipientsList_request.h"
#include "OAIUpdateRecipient_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddressApi : public QObject {
    Q_OBJECT

public:
    OAIAddressApi(const int timeOut = 0);
    ~OAIAddressApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIAddRecipientAddress_request [optional]
    */
    virtual void addRecipientAddress(const ::OpenAPI::OptionalParam<OAIAddRecipientAddress_request> &body = ::OpenAPI::OptionalParam<OAIAddRecipientAddress_request>());

    /**
    * @param[in]  body OAIDeleteRecipient_request [required]
    */
    virtual void deleteRecipient(const OAIDeleteRecipient_request &body);

    /**
    * @param[in]  body OAIRecipientsList_request [required]
    */
    virtual void recipientsList(const OAIRecipientsList_request &body);

    /**
    * @param[in]  body OAIUpdateRecipient_request [required]
    */
    virtual void updateRecipient(const OAIUpdateRecipient_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addRecipientAddressCallback(OAIHttpRequestWorker *worker);
    void deleteRecipientCallback(OAIHttpRequestWorker *worker);
    void recipientsListCallback(OAIHttpRequestWorker *worker);
    void updateRecipientCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addRecipientAddressSignal(OAIAddRecipientAddress_200_response summary);
    void deleteRecipientSignal(OAIDeleteRecipient_200_response summary);
    void recipientsListSignal(QList<OAIRecipientAddress> summary);
    void updateRecipientSignal(OAIAddRecipientAddress_200_response summary);


    void addRecipientAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddRecipientAddress_200_response summary);
    void deleteRecipientSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRecipient_200_response summary);
    void recipientsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRecipientAddress> summary);
    void updateRecipientSignalFull(OAIHttpRequestWorker *worker, OAIAddRecipientAddress_200_response summary);

    Q_DECL_DEPRECATED_X("Use addRecipientAddressSignalError() instead")
    void addRecipientAddressSignalE(OAIAddRecipientAddress_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addRecipientAddressSignalError(OAIAddRecipientAddress_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecipientSignalError() instead")
    void deleteRecipientSignalE(OAIDeleteRecipient_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecipientSignalError(OAIDeleteRecipient_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipientsListSignalError() instead")
    void recipientsListSignalE(QList<OAIRecipientAddress> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipientsListSignalError(QList<OAIRecipientAddress> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRecipientSignalError() instead")
    void updateRecipientSignalE(OAIAddRecipientAddress_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRecipientSignalError(OAIAddRecipientAddress_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addRecipientAddressSignalErrorFull() instead")
    void addRecipientAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRecipientAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecipientSignalErrorFull() instead")
    void deleteRecipientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecipientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipientsListSignalErrorFull() instead")
    void recipientsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipientsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRecipientSignalErrorFull() instead")
    void updateRecipientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRecipientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
