/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTemplatessAuthorized_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTemplatessAuthorized_request::OAIGetTemplatessAuthorized_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTemplatessAuthorized_request::OAIGetTemplatessAuthorized_request() {
    this->initializeModel();
}

OAIGetTemplatessAuthorized_request::~OAIGetTemplatessAuthorized_request() {}

void OAIGetTemplatessAuthorized_request::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIGetTemplatessAuthorized_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTemplatessAuthorized_request::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIGetTemplatessAuthorized_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTemplatessAuthorized_request::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAIGetTemplatessAuthorized_request::getCategoryId() const {
    return m_category_id;
}
void OAIGetTemplatessAuthorized_request::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIGetTemplatessAuthorized_request::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIGetTemplatessAuthorized_request::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIGetTemplatessAuthorized_request::getUid() const {
    return m_uid;
}
void OAIGetTemplatessAuthorized_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGetTemplatessAuthorized_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGetTemplatessAuthorized_request::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIGetTemplatessAuthorized_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTemplatessAuthorized_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
