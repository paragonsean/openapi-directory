/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateCustomCard_request.h
 *
 * 
 */

#ifndef OAICreateCustomCard_request_H
#define OAICreateCustomCard_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateCustomCard_request : public OAIObject {
public:
    OAICreateCustomCard_request();
    OAICreateCustomCard_request(QString json);
    ~OAICreateCustomCard_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCardId() const;
    void setCardId(const qint32 &card_id);
    bool is_card_id_Set() const;
    bool is_card_id_Valid() const;

    qint32 getCoverId() const;
    void setCoverId(const qint32 &cover_id);
    bool is_cover_id_Set() const;
    bool is_cover_id_Valid() const;

    qint32 getCoverSizePercent() const;
    void setCoverSizePercent(const qint32 &cover_size_percent);
    bool is_cover_size_percent_Set() const;
    bool is_cover_size_percent_Valid() const;

    QString getFooterAlign() const;
    void setFooterAlign(const QString &footer_align);
    bool is_footer_align_Set() const;
    bool is_footer_align_Valid() const;

    qint32 getFooterFontId() const;
    void setFooterFontId(const qint32 &footer_font_id);
    bool is_footer_font_id_Set() const;
    bool is_footer_font_id_Valid() const;

    qint32 getFooterFontSize() const;
    void setFooterFontSize(const qint32 &footer_font_size);
    bool is_footer_font_size_Set() const;
    bool is_footer_font_size_Valid() const;

    QString getFooterText() const;
    void setFooterText(const QString &footer_text);
    bool is_footer_text_Set() const;
    bool is_footer_text_Valid() const;

    QString getHeaderAlign() const;
    void setHeaderAlign(const QString &header_align);
    bool is_header_align_Set() const;
    bool is_header_align_Valid() const;

    bool isHeaderAutoSize() const;
    void setHeaderAutoSize(const bool &header_auto_size);
    bool is_header_auto_size_Set() const;
    bool is_header_auto_size_Valid() const;

    qint32 getHeaderFontId() const;
    void setHeaderFontId(const qint32 &header_font_id);
    bool is_header_font_id_Set() const;
    bool is_header_font_id_Valid() const;

    qint32 getHeaderFontSize() const;
    void setHeaderFontSize(const qint32 &header_font_size);
    bool is_header_font_size_Set() const;
    bool is_header_font_size_Valid() const;

    QString getHeaderText() const;
    void setHeaderText(const QString &header_text);
    bool is_header_text_Set() const;
    bool is_header_text_Valid() const;

    qint32 getLogoId() const;
    void setLogoId(const qint32 &logo_id);
    bool is_logo_id_Set() const;
    bool is_logo_id_Valid() const;

    qint32 getLogoSizePercent() const;
    void setLogoSizePercent(const qint32 &logo_size_percent);
    bool is_logo_size_percent_Set() const;
    bool is_logo_size_percent_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_card_id;
    bool m_card_id_isSet;
    bool m_card_id_isValid;

    qint32 m_cover_id;
    bool m_cover_id_isSet;
    bool m_cover_id_isValid;

    qint32 m_cover_size_percent;
    bool m_cover_size_percent_isSet;
    bool m_cover_size_percent_isValid;

    QString m_footer_align;
    bool m_footer_align_isSet;
    bool m_footer_align_isValid;

    qint32 m_footer_font_id;
    bool m_footer_font_id_isSet;
    bool m_footer_font_id_isValid;

    qint32 m_footer_font_size;
    bool m_footer_font_size_isSet;
    bool m_footer_font_size_isValid;

    QString m_footer_text;
    bool m_footer_text_isSet;
    bool m_footer_text_isValid;

    QString m_header_align;
    bool m_header_align_isSet;
    bool m_header_align_isValid;

    bool m_header_auto_size;
    bool m_header_auto_size_isSet;
    bool m_header_auto_size_isValid;

    qint32 m_header_font_id;
    bool m_header_font_id_isSet;
    bool m_header_font_id_isValid;

    qint32 m_header_font_size;
    bool m_header_font_size_isSet;
    bool m_header_font_size_isValid;

    QString m_header_text;
    bool m_header_text_isSet;
    bool m_header_text_isValid;

    qint32 m_logo_id;
    bool m_logo_id_isSet;
    bool m_logo_id_isValid;

    qint32 m_logo_size_percent;
    bool m_logo_size_percent_isSet;
    bool m_logo_size_percent_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateCustomCard_request)

#endif // OAICreateCustomCard_request_H
