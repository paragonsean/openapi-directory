/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesApi_H
#define OAI_OAITemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangePassword_200_response.h"
#include "OAICreateTemplate_request.h"
#include "OAIDeleteTemplate_request.h"
#include "OAIGetTemplateCategoriesAuthorized_request.h"
#include "OAIGetTemplateDetail_request.h"
#include "OAIGetTemplatessAuthorized_request.h"
#include "OAITemplate.h"
#include "OAITemplateCategory.h"
#include "OAIUpdateTemplate_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesApi(const int timeOut = 0);
    ~OAITemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAICreateTemplate_request [required]
    */
    virtual void createTemplate(const OAICreateTemplate_request &body);

    /**
    * @param[in]  body OAIDeleteTemplate_request [required]
    */
    virtual void deleteTemplate(const OAIDeleteTemplate_request &body);


    virtual void getTemplateCategories();

    /**
    * @param[in]  body OAIGetTemplateCategoriesAuthorized_request [optional]
    */
    virtual void getTemplateCategoriesAuthorized(const ::OpenAPI::OptionalParam<OAIGetTemplateCategoriesAuthorized_request> &body = ::OpenAPI::OptionalParam<OAIGetTemplateCategoriesAuthorized_request>());

    /**
    * @param[in]  body OAIGetTemplateDetail_request [required]
    */
    virtual void getTemplateDetail(const OAIGetTemplateDetail_request &body);


    virtual void getTemplates();

    /**
    * @param[in]  body OAIGetTemplatessAuthorized_request [optional]
    */
    virtual void getTemplatessAuthorized(const ::OpenAPI::OptionalParam<OAIGetTemplatessAuthorized_request> &body = ::OpenAPI::OptionalParam<OAIGetTemplatessAuthorized_request>());

    /**
    * @param[in]  body OAIUpdateTemplate_request [required]
    */
    virtual void updateTemplate(const OAIUpdateTemplate_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteTemplateCallback(OAIHttpRequestWorker *worker);
    void getTemplateCategoriesCallback(OAIHttpRequestWorker *worker);
    void getTemplateCategoriesAuthorizedCallback(OAIHttpRequestWorker *worker);
    void getTemplateDetailCallback(OAIHttpRequestWorker *worker);
    void getTemplatesCallback(OAIHttpRequestWorker *worker);
    void getTemplatessAuthorizedCallback(OAIHttpRequestWorker *worker);
    void updateTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTemplateSignal(QList<OAITemplate> summary);
    void deleteTemplateSignal(OAIChangePassword_200_response summary);
    void getTemplateCategoriesSignal(QList<OAITemplateCategory> summary);
    void getTemplateCategoriesAuthorizedSignal(QList<OAITemplateCategory> summary);
    void getTemplateDetailSignal(OAITemplate summary);
    void getTemplatesSignal(QList<OAITemplate> summary);
    void getTemplatessAuthorizedSignal(QList<OAITemplate> summary);
    void updateTemplateSignal(QList<OAITemplate> summary);


    void createTemplateSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplate> summary);
    void deleteTemplateSignalFull(OAIHttpRequestWorker *worker, OAIChangePassword_200_response summary);
    void getTemplateCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplateCategory> summary);
    void getTemplateCategoriesAuthorizedSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplateCategory> summary);
    void getTemplateDetailSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void getTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplate> summary);
    void getTemplatessAuthorizedSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplate> summary);
    void updateTemplateSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplate> summary);

    Q_DECL_DEPRECATED_X("Use createTemplateSignalError() instead")
    void createTemplateSignalE(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateSignalError(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalError() instead")
    void deleteTemplateSignalE(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalError(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateCategoriesSignalError() instead")
    void getTemplateCategoriesSignalE(QList<OAITemplateCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateCategoriesSignalError(QList<OAITemplateCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateCategoriesAuthorizedSignalError() instead")
    void getTemplateCategoriesAuthorizedSignalE(QList<OAITemplateCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateCategoriesAuthorizedSignalError(QList<OAITemplateCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateDetailSignalError() instead")
    void getTemplateDetailSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateDetailSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatesSignalError() instead")
    void getTemplatesSignalE(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatesSignalError(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatessAuthorizedSignalError() instead")
    void getTemplatessAuthorizedSignalE(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatessAuthorizedSignalError(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalError() instead")
    void updateTemplateSignalE(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalError(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTemplateSignalErrorFull() instead")
    void createTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalErrorFull() instead")
    void deleteTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateCategoriesSignalErrorFull() instead")
    void getTemplateCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateCategoriesAuthorizedSignalErrorFull() instead")
    void getTemplateCategoriesAuthorizedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateCategoriesAuthorizedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateDetailSignalErrorFull() instead")
    void getTemplateDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatesSignalErrorFull() instead")
    void getTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplatessAuthorizedSignalErrorFull() instead")
    void getTemplatessAuthorizedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplatessAuthorizedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalErrorFull() instead")
    void updateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
