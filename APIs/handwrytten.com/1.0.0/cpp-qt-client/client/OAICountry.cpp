/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry::OAICountry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry::OAICountry() {
    this->initializeModel();
}

OAICountry::~OAICountry() {}

void OAICountry::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_delivery_cost_isSet = false;
    m_delivery_cost_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;
}

void OAICountry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_delivery_cost_isValid = ::OpenAPI::fromJsonValue(m_delivery_cost, json[QString("delivery_cost")]);
    m_delivery_cost_isSet = !json[QString("delivery_cost")].isNull() && m_delivery_cost_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;
}

QString OAICountry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases_isSet) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_delivery_cost_isSet) {
        obj.insert(QString("delivery_cost"), ::OpenAPI::toJsonValue(m_delivery_cost));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    return obj;
}

QString OAICountry::getAliases() const {
    return m_aliases;
}
void OAICountry::setAliases(const QString &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAICountry::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAICountry::is_aliases_Valid() const{
    return m_aliases_isValid;
}

double OAICountry::getDeliveryCost() const {
    return m_delivery_cost;
}
void OAICountry::setDeliveryCost(const double &delivery_cost) {
    m_delivery_cost = delivery_cost;
    m_delivery_cost_isSet = true;
}

bool OAICountry::is_delivery_cost_Set() const{
    return m_delivery_cost_isSet;
}

bool OAICountry::is_delivery_cost_Valid() const{
    return m_delivery_cost_isValid;
}

qint32 OAICountry::getId() const {
    return m_id;
}
void OAICountry::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICountry::is_id_Set() const{
    return m_id_isSet;
}

bool OAICountry::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIState> OAICountry::getStates() const {
    return m_states;
}
void OAICountry::setStates(const QList<OAIState> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAICountry::is_states_Set() const{
    return m_states_isSet;
}

bool OAICountry::is_states_Valid() const{
    return m_states_isValid;
}

bool OAICountry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
