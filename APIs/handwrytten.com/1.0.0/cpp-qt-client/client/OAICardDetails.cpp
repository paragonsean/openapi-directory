/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardDetails::OAICardDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardDetails::OAICardDetails() {
    this->initializeModel();
}

OAICardDetails::~OAICardDetails() {}

void OAICardDetails::initializeModel() {

    m_available_free_isSet = false;
    m_available_free_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_cover_height_isSet = false;
    m_cover_height_isValid = false;

    m_cover_width_isSet = false;
    m_cover_width_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAICardDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardDetails::fromJsonObject(QJsonObject json) {

    m_available_free_isValid = ::OpenAPI::fromJsonValue(m_available_free, json[QString("available_free")]);
    m_available_free_isSet = !json[QString("available_free")].isNull() && m_available_free_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_cover_height_isValid = ::OpenAPI::fromJsonValue(m_cover_height, json[QString("cover_height")]);
    m_cover_height_isSet = !json[QString("cover_height")].isNull() && m_cover_height_isValid;

    m_cover_width_isValid = ::OpenAPI::fromJsonValue(m_cover_width, json[QString("cover_width")]);
    m_cover_width_isSet = !json[QString("cover_width")].isNull() && m_cover_width_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAICardDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_available_free_isSet) {
        obj.insert(QString("available_free"), ::OpenAPI::toJsonValue(m_available_free));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_cover_height_isSet) {
        obj.insert(QString("cover_height"), ::OpenAPI::toJsonValue(m_cover_height));
    }
    if (m_cover_width_isSet) {
        obj.insert(QString("cover_width"), ::OpenAPI::toJsonValue(m_cover_width));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

qint32 OAICardDetails::getAvailableFree() const {
    return m_available_free;
}
void OAICardDetails::setAvailableFree(const qint32 &available_free) {
    m_available_free = available_free;
    m_available_free_isSet = true;
}

bool OAICardDetails::is_available_free_Set() const{
    return m_available_free_isSet;
}

bool OAICardDetails::is_available_free_Valid() const{
    return m_available_free_isValid;
}

qint32 OAICardDetails::getCategoryId() const {
    return m_category_id;
}
void OAICardDetails::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAICardDetails::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAICardDetails::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAICardDetails::getCover() const {
    return m_cover;
}
void OAICardDetails::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAICardDetails::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAICardDetails::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAICardDetails::getCoverHeight() const {
    return m_cover_height;
}
void OAICardDetails::setCoverHeight(const QString &cover_height) {
    m_cover_height = cover_height;
    m_cover_height_isSet = true;
}

bool OAICardDetails::is_cover_height_Set() const{
    return m_cover_height_isSet;
}

bool OAICardDetails::is_cover_height_Valid() const{
    return m_cover_height_isValid;
}

QString OAICardDetails::getCoverWidth() const {
    return m_cover_width;
}
void OAICardDetails::setCoverWidth(const QString &cover_width) {
    m_cover_width = cover_width;
    m_cover_width_isSet = true;
}

bool OAICardDetails::is_cover_width_Set() const{
    return m_cover_width_isSet;
}

bool OAICardDetails::is_cover_width_Valid() const{
    return m_cover_width_isValid;
}

qint32 OAICardDetails::getId() const {
    return m_id;
}
void OAICardDetails::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICardDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAICardDetails::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageArray> OAICardDetails::getImages() const {
    return m_images;
}
void OAICardDetails::setImages(const QList<OAIImageArray> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAICardDetails::is_images_Set() const{
    return m_images_isSet;
}

bool OAICardDetails::is_images_Valid() const{
    return m_images_isValid;
}

QString OAICardDetails::getName() const {
    return m_name;
}
void OAICardDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICardDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAICardDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICardDetails::getOrientation() const {
    return m_orientation;
}
void OAICardDetails::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAICardDetails::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAICardDetails::is_orientation_Valid() const{
    return m_orientation_isValid;
}

double OAICardDetails::getPrice() const {
    return m_price;
}
void OAICardDetails::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICardDetails::is_price_Set() const{
    return m_price_isSet;
}

bool OAICardDetails::is_price_Valid() const{
    return m_price_isValid;
}

bool OAICardDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
