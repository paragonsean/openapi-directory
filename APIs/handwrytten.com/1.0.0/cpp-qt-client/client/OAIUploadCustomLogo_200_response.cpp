/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadCustomLogo_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadCustomLogo_200_response::OAIUploadCustomLogo_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadCustomLogo_200_response::OAIUploadCustomLogo_200_response() {
    this->initializeModel();
}

OAIUploadCustomLogo_200_response::~OAIUploadCustomLogo_200_response() {}

void OAIUploadCustomLogo_200_response::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUploadCustomLogo_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadCustomLogo_200_response::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUploadCustomLogo_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadCustomLogo_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIUploadCustomLogo_200_response::getId() const {
    return m_id;
}
void OAIUploadCustomLogo_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUploadCustomLogo_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUploadCustomLogo_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUploadCustomLogo_200_response::getStatus() const {
    return m_status;
}
void OAIUploadCustomLogo_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUploadCustomLogo_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUploadCustomLogo_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUploadCustomLogo_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadCustomLogo_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
