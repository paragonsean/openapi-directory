/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterableCardDetails_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterableCardDetails_request::OAIFilterableCardDetails_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterableCardDetails_request::OAIFilterableCardDetails_request() {
    this->initializeModel();
}

OAIFilterableCardDetails_request::~OAIFilterableCardDetails_request() {}

void OAIFilterableCardDetails_request::initializeModel() {

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIFilterableCardDetails_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterableCardDetails_request::fromJsonObject(QJsonObject json) {

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIFilterableCardDetails_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterableCardDetails_request::asJsonObject() const {
    QJsonObject obj;
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAIFilterableCardDetails_request::getCardId() const {
    return m_card_id;
}
void OAIFilterableCardDetails_request::setCardId(const qint32 &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIFilterableCardDetails_request::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIFilterableCardDetails_request::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIFilterableCardDetails_request::getUid() const {
    return m_uid;
}
void OAIFilterableCardDetails_request::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIFilterableCardDetails_request::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIFilterableCardDetails_request::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIFilterableCardDetails_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterableCardDetails_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
