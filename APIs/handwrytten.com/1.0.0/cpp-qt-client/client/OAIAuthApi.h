/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangePassword_200_response.h"
#include "OAIChangePassword_request.h"
#include "OAILogin.h"
#include "OAILogin_200_response.h"
#include "OAILogout_request.h"
#include "OAIRegister_200_response.h"
#include "OAIRegistration.h"
#include "OAIResetPasswordRequest_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIChangePassword_request [required]
    */
    virtual void changePassword(const OAIChangePassword_request &body);

    /**
    * @param[in]  body OAILogin [required]
    */
    virtual void login(const OAILogin &body);

    /**
    * @param[in]  body OAILogout_request [required]
    */
    virtual void logout(const OAILogout_request &body);

    /**
    * @param[in]  body OAIRegistration [required]
    */
    virtual void r_register(const OAIRegistration &body);

    /**
    * @param[in]  body OAIResetPasswordRequest_request [required]
    */
    virtual void resetPasswordRequest(const OAIResetPasswordRequest_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePasswordCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);
    void r_registerCallback(OAIHttpRequestWorker *worker);
    void resetPasswordRequestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePasswordSignal(OAIChangePassword_200_response summary);
    void loginSignal(OAILogin_200_response summary);
    void logoutSignal(OAIChangePassword_200_response summary);
    void r_registerSignal(OAIRegister_200_response summary);
    void resetPasswordRequestSignal(OAIChangePassword_200_response summary);


    void changePasswordSignalFull(OAIHttpRequestWorker *worker, OAIChangePassword_200_response summary);
    void loginSignalFull(OAIHttpRequestWorker *worker, OAILogin_200_response summary);
    void logoutSignalFull(OAIHttpRequestWorker *worker, OAIChangePassword_200_response summary);
    void r_registerSignalFull(OAIHttpRequestWorker *worker, OAIRegister_200_response summary);
    void resetPasswordRequestSignalFull(OAIHttpRequestWorker *worker, OAIChangePassword_200_response summary);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalError() instead")
    void changePasswordSignalE(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalError(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(OAILogin_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(OAILogin_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalError() instead")
    void r_registerSignalE(OAIRegister_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalError(OAIRegister_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordRequestSignalError() instead")
    void resetPasswordRequestSignalE(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordRequestSignalError(OAIChangePassword_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalErrorFull() instead")
    void changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalErrorFull() instead")
    void r_registerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordRequestSignalErrorFull() instead")
    void resetPasswordRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
