/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFontForCustomizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFontForCustomizer::OAIFontForCustomizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFontForCustomizer::OAIFontForCustomizer() {
    this->initializeModel();
}

OAIFontForCustomizer::~OAIFontForCustomizer() {}

void OAIFontForCustomizer::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIFontForCustomizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFontForCustomizer::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIFontForCustomizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFontForCustomizer::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

qint32 OAIFontForCustomizer::getId() const {
    return m_id;
}
void OAIFontForCustomizer::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFontForCustomizer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFontForCustomizer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFontForCustomizer::getLabel() const {
    return m_label;
}
void OAIFontForCustomizer::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIFontForCustomizer::is_label_Set() const{
    return m_label_isSet;
}

bool OAIFontForCustomizer::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIFontForCustomizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFontForCustomizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
