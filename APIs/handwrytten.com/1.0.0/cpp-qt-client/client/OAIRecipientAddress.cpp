/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipientAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipientAddress::OAIRecipientAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipientAddress::OAIRecipientAddress() {
    this->initializeModel();
}

OAIRecipientAddress::~OAIRecipientAddress() {}

void OAIRecipientAddress::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIRecipientAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecipientAddress::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("business_name")]);
    m_business_name_isSet = !json[QString("business_name")].isNull() && m_business_name_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIRecipientAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecipientAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_business_name_isSet) {
        obj.insert(QString("business_name"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIRecipientAddress::getAddress1() const {
    return m_address1;
}
void OAIRecipientAddress::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIRecipientAddress::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIRecipientAddress::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIRecipientAddress::getAddress2() const {
    return m_address2;
}
void OAIRecipientAddress::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIRecipientAddress::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIRecipientAddress::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIRecipientAddress::getBusinessName() const {
    return m_business_name;
}
void OAIRecipientAddress::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIRecipientAddress::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIRecipientAddress::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIRecipientAddress::getCity() const {
    return m_city;
}
void OAIRecipientAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRecipientAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRecipientAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIRecipientAddress::getCountry() const {
    return m_country;
}
void OAIRecipientAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRecipientAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRecipientAddress::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAIRecipientAddress::getId() const {
    return m_id;
}
void OAIRecipientAddress::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecipientAddress::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecipientAddress::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRecipientAddress::getName() const {
    return m_name;
}
void OAIRecipientAddress::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecipientAddress::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecipientAddress::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecipientAddress::getState() const {
    return m_state;
}
void OAIRecipientAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRecipientAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRecipientAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRecipientAddress::getZip() const {
    return m_zip;
}
void OAIRecipientAddress::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIRecipientAddress::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIRecipientAddress::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIRecipientAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecipientAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
