/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICardsApi_H
#define OAI_OAICardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICard.h"
#include "OAICardDetails.h"
#include "OAIFilterableCardDetails_request.h"
#include "OAIListCards_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICardsApi : public QObject {
    Q_OBJECT

public:
    OAICardsApi(const int timeOut = 0);
    ~OAICardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIFilterableCardDetails_request [optional]
    */
    virtual void filterableCardDetails(const ::OpenAPI::OptionalParam<OAIFilterableCardDetails_request> &body = ::OpenAPI::OptionalParam<OAIFilterableCardDetails_request>());

    /**
    * @param[in]  body OAIListCards_request [optional]
    */
    virtual void listCards(const ::OpenAPI::OptionalParam<OAIListCards_request> &body = ::OpenAPI::OptionalParam<OAIListCards_request>());


    virtual void simpleListCards();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void filterableCardDetailsCallback(OAIHttpRequestWorker *worker);
    void listCardsCallback(OAIHttpRequestWorker *worker);
    void simpleListCardsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void filterableCardDetailsSignal(OAICardDetails summary);
    void listCardsSignal(QList<OAICard> summary);
    void simpleListCardsSignal(QList<OAICard> summary);


    void filterableCardDetailsSignalFull(OAIHttpRequestWorker *worker, OAICardDetails summary);
    void listCardsSignalFull(OAIHttpRequestWorker *worker, QList<OAICard> summary);
    void simpleListCardsSignalFull(OAIHttpRequestWorker *worker, QList<OAICard> summary);

    Q_DECL_DEPRECATED_X("Use filterableCardDetailsSignalError() instead")
    void filterableCardDetailsSignalE(OAICardDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filterableCardDetailsSignalError(OAICardDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardsSignalError() instead")
    void listCardsSignalE(QList<OAICard> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardsSignalError(QList<OAICard> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simpleListCardsSignalError() instead")
    void simpleListCardsSignalE(QList<OAICard> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simpleListCardsSignalError(QList<OAICard> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use filterableCardDetailsSignalErrorFull() instead")
    void filterableCardDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filterableCardDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardsSignalErrorFull() instead")
    void listCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simpleListCardsSignalErrorFull() instead")
    void simpleListCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simpleListCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
