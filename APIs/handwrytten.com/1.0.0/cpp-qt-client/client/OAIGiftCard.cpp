/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGiftCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGiftCard::OAIGiftCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGiftCard::OAIGiftCard() {
    this->initializeModel();
}

OAIGiftCard::~OAIGiftCard() {}

void OAIGiftCard::initializeModel() {

    m_denominations_isSet = false;
    m_denominations_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGiftCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGiftCard::fromJsonObject(QJsonObject json) {

    m_denominations_isValid = ::OpenAPI::fromJsonValue(m_denominations, json[QString("denominations")]);
    m_denominations_isSet = !json[QString("denominations")].isNull() && m_denominations_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGiftCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGiftCard::asJsonObject() const {
    QJsonObject obj;
    if (m_denominations.size() > 0) {
        obj.insert(QString("denominations"), ::OpenAPI::toJsonValue(m_denominations));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIDenomination> OAIGiftCard::getDenominations() const {
    return m_denominations;
}
void OAIGiftCard::setDenominations(const QList<OAIDenomination> &denominations) {
    m_denominations = denominations;
    m_denominations_isSet = true;
}

bool OAIGiftCard::is_denominations_Set() const{
    return m_denominations_isSet;
}

bool OAIGiftCard::is_denominations_Valid() const{
    return m_denominations_isValid;
}

qint32 OAIGiftCard::getId() const {
    return m_id;
}
void OAIGiftCard::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGiftCard::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGiftCard::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGiftCard::getImage() const {
    return m_image;
}
void OAIGiftCard::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGiftCard::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGiftCard::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIGiftCard::getName() const {
    return m_name;
}
void OAIGiftCard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGiftCard::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGiftCard::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGiftCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_denominations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGiftCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
