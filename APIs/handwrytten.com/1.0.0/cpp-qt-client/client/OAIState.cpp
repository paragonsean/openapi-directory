/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIState::OAIState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIState::OAIState() {
    this->initializeModel();
}

OAIState::~OAIState() {}

void OAIState::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;
}

void OAIState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIState::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("short_name")]);
    m_short_name_isSet = !json[QString("short_name")].isNull() && m_short_name_isValid;
}

QString OAIState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIState::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("short_name"), ::OpenAPI::toJsonValue(m_short_name));
    }
    return obj;
}

QString OAIState::getName() const {
    return m_name;
}
void OAIState::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIState::is_name_Set() const{
    return m_name_isSet;
}

bool OAIState::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIState::getShortName() const {
    return m_short_name;
}
void OAIState::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIState::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIState::is_short_name_Valid() const{
    return m_short_name_isValid;
}

bool OAIState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
