/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingleStepOrder_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingleStepOrder_200_response::OAISingleStepOrder_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingleStepOrder_200_response::OAISingleStepOrder_200_response() {
    this->initializeModel();
}

OAISingleStepOrder_200_response::~OAISingleStepOrder_200_response() {}

void OAISingleStepOrder_200_response::initializeModel() {

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISingleStepOrder_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingleStepOrder_200_response::fromJsonObject(QJsonObject json) {

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISingleStepOrder_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingleStepOrder_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIOrder OAISingleStepOrder_200_response::getResponse() const {
    return m_response;
}
void OAISingleStepOrder_200_response::setResponse(const OAIOrder &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAISingleStepOrder_200_response::is_response_Set() const{
    return m_response_isSet;
}

bool OAISingleStepOrder_200_response::is_response_Valid() const{
    return m_response_isValid;
}

QString OAISingleStepOrder_200_response::getStatus() const {
    return m_status;
}
void OAISingleStepOrder_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISingleStepOrder_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAISingleStepOrder_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISingleStepOrder_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingleStepOrder_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
