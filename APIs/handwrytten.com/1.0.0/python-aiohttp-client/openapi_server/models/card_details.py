# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_array import ImageArray
from openapi_server import util


class CardDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_free: int=None, category_id: int=None, cover: str=None, cover_height: str=None, cover_width: str=None, id: int=None, images: List[ImageArray]=None, name: str=None, orientation: str=None, price: float=None):
        """CardDetails - a model defined in OpenAPI

        :param available_free: The available_free of this CardDetails.
        :param category_id: The category_id of this CardDetails.
        :param cover: The cover of this CardDetails.
        :param cover_height: The cover_height of this CardDetails.
        :param cover_width: The cover_width of this CardDetails.
        :param id: The id of this CardDetails.
        :param images: The images of this CardDetails.
        :param name: The name of this CardDetails.
        :param orientation: The orientation of this CardDetails.
        :param price: The price of this CardDetails.
        """
        self.openapi_types = {
            'available_free': int,
            'category_id': int,
            'cover': str,
            'cover_height': str,
            'cover_width': str,
            'id': int,
            'images': List[ImageArray],
            'name': str,
            'orientation': str,
            'price': float
        }

        self.attribute_map = {
            'available_free': 'available_free',
            'category_id': 'category_id',
            'cover': 'cover',
            'cover_height': 'cover_height',
            'cover_width': 'cover_width',
            'id': 'id',
            'images': 'images',
            'name': 'name',
            'orientation': 'orientation',
            'price': 'price'
        }

        self._available_free = available_free
        self._category_id = category_id
        self._cover = cover
        self._cover_height = cover_height
        self._cover_width = cover_width
        self._id = id
        self._images = images
        self._name = name
        self._orientation = orientation
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardDetails of this CardDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_free(self):
        """Gets the available_free of this CardDetails.

        1 for cards that are available free

        :return: The available_free of this CardDetails.
        :rtype: int
        """
        return self._available_free

    @available_free.setter
    def available_free(self, available_free):
        """Sets the available_free of this CardDetails.

        1 for cards that are available free

        :param available_free: The available_free of this CardDetails.
        :type available_free: int
        """
        if available_free is not None and available_free > 1:
            raise ValueError("Invalid value for `available_free`, must be a value less than or equal to `1`")
        if available_free is not None and available_free < 0:
            raise ValueError("Invalid value for `available_free`, must be a value greater than or equal to `0`")

        self._available_free = available_free

    @property
    def category_id(self):
        """Gets the category_id of this CardDetails.

        the associated category id

        :return: The category_id of this CardDetails.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CardDetails.

        the associated category id

        :param category_id: The category_id of this CardDetails.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def cover(self):
        """Gets the cover of this CardDetails.

        cover image of card

        :return: The cover of this CardDetails.
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this CardDetails.

        cover image of card

        :param cover: The cover of this CardDetails.
        :type cover: str
        """

        self._cover = cover

    @property
    def cover_height(self):
        """Gets the cover_height of this CardDetails.

        the height in px of the cover image

        :return: The cover_height of this CardDetails.
        :rtype: str
        """
        return self._cover_height

    @cover_height.setter
    def cover_height(self, cover_height):
        """Sets the cover_height of this CardDetails.

        the height in px of the cover image

        :param cover_height: The cover_height of this CardDetails.
        :type cover_height: str
        """

        self._cover_height = cover_height

    @property
    def cover_width(self):
        """Gets the cover_width of this CardDetails.

        the width in px of the cover image

        :return: The cover_width of this CardDetails.
        :rtype: str
        """
        return self._cover_width

    @cover_width.setter
    def cover_width(self, cover_width):
        """Sets the cover_width of this CardDetails.

        the width in px of the cover image

        :param cover_width: The cover_width of this CardDetails.
        :type cover_width: str
        """

        self._cover_width = cover_width

    @property
    def id(self):
        """Gets the id of this CardDetails.


        :return: The id of this CardDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardDetails.


        :param id: The id of this CardDetails.
        :type id: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this CardDetails.

        common return value includes items for front, back, inside and envelope

        :return: The images of this CardDetails.
        :rtype: List[ImageArray]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this CardDetails.

        common return value includes items for front, back, inside and envelope

        :param images: The images of this CardDetails.
        :type images: List[ImageArray]
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this CardDetails.


        :return: The name of this CardDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardDetails.


        :param name: The name of this CardDetails.
        :type name: str
        """

        self._name = name

    @property
    def orientation(self):
        """Gets the orientation of this CardDetails.

        landscape or portrait

        :return: The orientation of this CardDetails.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this CardDetails.

        landscape or portrait

        :param orientation: The orientation of this CardDetails.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def price(self):
        """Gets the price of this CardDetails.

        the base price of a card (in USD)

        :return: The price of this CardDetails.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CardDetails.

        the base price of a card (in USD)

        :param price: The price of this CardDetails.
        :type price: float
        """

        self._price = price
