# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.card import Card
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_from: Address=None, card: Card=None, date_created: str=None, for_free: bool=None, id: int=None, message: str=None):
        """Order - a model defined in OpenAPI

        :param address_from: The address_from of this Order.
        :param card: The card of this Order.
        :param date_created: The date_created of this Order.
        :param for_free: The for_free of this Order.
        :param id: The id of this Order.
        :param message: The message of this Order.
        """
        self.openapi_types = {
            'address_from': Address,
            'card': Card,
            'date_created': str,
            'for_free': bool,
            'id': int,
            'message': str
        }

        self.attribute_map = {
            'address_from': 'address_from',
            'card': 'card',
            'date_created': 'date_created',
            'for_free': 'for_free',
            'id': 'id',
            'message': 'message'
        }

        self._address_from = address_from
        self._card = card
        self._date_created = date_created
        self._for_free = for_free
        self._id = id
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_from(self):
        """Gets the address_from of this Order.


        :return: The address_from of this Order.
        :rtype: Address
        """
        return self._address_from

    @address_from.setter
    def address_from(self, address_from):
        """Sets the address_from of this Order.


        :param address_from: The address_from of this Order.
        :type address_from: Address
        """

        self._address_from = address_from

    @property
    def card(self):
        """Gets the card of this Order.


        :return: The card of this Order.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Order.


        :param card: The card of this Order.
        :type card: Card
        """

        self._card = card

    @property
    def date_created(self):
        """Gets the date_created of this Order.

        the date the order was created

        :return: The date_created of this Order.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Order.

        the date the order was created

        :param date_created: The date_created of this Order.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def for_free(self):
        """Gets the for_free of this Order.

        if the order was free

        :return: The for_free of this Order.
        :rtype: bool
        """
        return self._for_free

    @for_free.setter
    def for_free(self, for_free):
        """Sets the for_free of this Order.

        if the order was free

        :param for_free: The for_free of this Order.
        :type for_free: bool
        """

        self._for_free = for_free

    @property
    def id(self):
        """Gets the id of this Order.

        the unique ID of the order

        :return: The id of this Order.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        the unique ID of the order

        :param id: The id of this Order.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this Order.

        The actual message of the template

        :return: The message of this Order.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Order.

        The actual message of the template

        :param message: The message of this Order.
        :type message: str
        """

        self._message = message
