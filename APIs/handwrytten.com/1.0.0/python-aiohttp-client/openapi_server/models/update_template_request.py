# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name: str=None, template_id: int=None, uid: str=None):
        """UpdateTemplateRequest - a model defined in OpenAPI

        :param message: The message of this UpdateTemplateRequest.
        :param name: The name of this UpdateTemplateRequest.
        :param template_id: The template_id of this UpdateTemplateRequest.
        :param uid: The uid of this UpdateTemplateRequest.
        """
        self.openapi_types = {
            'message': str,
            'name': str,
            'template_id': int,
            'uid': str
        }

        self.attribute_map = {
            'message': 'message',
            'name': 'name',
            'template_id': 'template_id',
            'uid': 'uid'
        }

        self._message = message
        self._name = name
        self._template_id = template_id
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateTemplate_request of this UpdateTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this UpdateTemplateRequest.


        :return: The message of this UpdateTemplateRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpdateTemplateRequest.


        :param message: The message of this UpdateTemplateRequest.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this UpdateTemplateRequest.

        the new name of the template

        :return: The name of this UpdateTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateTemplateRequest.

        the new name of the template

        :param name: The name of this UpdateTemplateRequest.
        :type name: str
        """

        self._name = name

    @property
    def template_id(self):
        """Gets the template_id of this UpdateTemplateRequest.

        the ID of the template to update

        :return: The template_id of this UpdateTemplateRequest.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this UpdateTemplateRequest.

        the ID of the template to update

        :param template_id: The template_id of this UpdateTemplateRequest.
        :type template_id: int
        """

        self._template_id = template_id

    @property
    def uid(self):
        """Gets the uid of this UpdateTemplateRequest.

        The UID of the logged-in user

        :return: The uid of this UpdateTemplateRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UpdateTemplateRequest.

        The UID of the logged-in user

        :param uid: The uid of this UpdateTemplateRequest.
        :type uid: str
        """

        self._uid = uid
