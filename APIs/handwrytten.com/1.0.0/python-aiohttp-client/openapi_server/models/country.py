# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.state import State
from openapi_server import util


class Country(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases: str=None, delivery_cost: float=None, id: int=None, states: List[State]=None):
        """Country - a model defined in OpenAPI

        :param aliases: The aliases of this Country.
        :param delivery_cost: The delivery_cost of this Country.
        :param id: The id of this Country.
        :param states: The states of this Country.
        """
        self.openapi_types = {
            'aliases': str,
            'delivery_cost': float,
            'id': int,
            'states': List[State]
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'delivery_cost': 'delivery_cost',
            'id': 'id',
            'states': 'states'
        }

        self._aliases = aliases
        self._delivery_cost = delivery_cost
        self._id = id
        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country of this Country.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self):
        """Gets the aliases of this Country.

        Other names for the country, separated by new lines

        :return: The aliases of this Country.
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Country.

        Other names for the country, separated by new lines

        :param aliases: The aliases of this Country.
        :type aliases: str
        """

        self._aliases = aliases

    @property
    def delivery_cost(self):
        """Gets the delivery_cost of this Country.

        the postage fee of delivering to a specific country

        :return: The delivery_cost of this Country.
        :rtype: float
        """
        return self._delivery_cost

    @delivery_cost.setter
    def delivery_cost(self, delivery_cost):
        """Sets the delivery_cost of this Country.

        the postage fee of delivering to a specific country

        :param delivery_cost: The delivery_cost of this Country.
        :type delivery_cost: float
        """

        self._delivery_cost = delivery_cost

    @property
    def id(self):
        """Gets the id of this Country.

        the internal id of the country

        :return: The id of this Country.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Country.

        the internal id of the country

        :param id: The id of this Country.
        :type id: int
        """

        self._id = id

    @property
    def states(self):
        """Gets the states of this Country.

        Optional states or provinces in country

        :return: The states of this Country.
        :rtype: List[State]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this Country.

        Optional states or provinces in country

        :param states: The states of this Country.
        :type states: List[State]
        """

        self._states = states
