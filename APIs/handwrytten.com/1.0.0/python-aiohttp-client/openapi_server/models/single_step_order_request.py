# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SingleStepOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: int=None, credit_card_id: int=None, denomination_id: int=None, font_label: str=None, message: str=None, recipient_address1: str=None, recipient_address2: str=None, recipient_business_name: str=None, recipient_city: str=None, recipient_country: str=None, recipient_country_id: int=None, recipient_name: str=None, recipient_state: str=None, recipient_zip: str=None, sender_address1: str=None, sender_address2: str=None, sender_business_name: str=None, sender_city: str=None, sender_country: str=None, sender_country_id: int=None, sender_name: str=None, sender_state: str=None, sender_zip: str=None, uid: str=None):
        """SingleStepOrderRequest - a model defined in OpenAPI

        :param card_id: The card_id of this SingleStepOrderRequest.
        :param credit_card_id: The credit_card_id of this SingleStepOrderRequest.
        :param denomination_id: The denomination_id of this SingleStepOrderRequest.
        :param font_label: The font_label of this SingleStepOrderRequest.
        :param message: The message of this SingleStepOrderRequest.
        :param recipient_address1: The recipient_address1 of this SingleStepOrderRequest.
        :param recipient_address2: The recipient_address2 of this SingleStepOrderRequest.
        :param recipient_business_name: The recipient_business_name of this SingleStepOrderRequest.
        :param recipient_city: The recipient_city of this SingleStepOrderRequest.
        :param recipient_country: The recipient_country of this SingleStepOrderRequest.
        :param recipient_country_id: The recipient_country_id of this SingleStepOrderRequest.
        :param recipient_name: The recipient_name of this SingleStepOrderRequest.
        :param recipient_state: The recipient_state of this SingleStepOrderRequest.
        :param recipient_zip: The recipient_zip of this SingleStepOrderRequest.
        :param sender_address1: The sender_address1 of this SingleStepOrderRequest.
        :param sender_address2: The sender_address2 of this SingleStepOrderRequest.
        :param sender_business_name: The sender_business_name of this SingleStepOrderRequest.
        :param sender_city: The sender_city of this SingleStepOrderRequest.
        :param sender_country: The sender_country of this SingleStepOrderRequest.
        :param sender_country_id: The sender_country_id of this SingleStepOrderRequest.
        :param sender_name: The sender_name of this SingleStepOrderRequest.
        :param sender_state: The sender_state of this SingleStepOrderRequest.
        :param sender_zip: The sender_zip of this SingleStepOrderRequest.
        :param uid: The uid of this SingleStepOrderRequest.
        """
        self.openapi_types = {
            'card_id': int,
            'credit_card_id': int,
            'denomination_id': int,
            'font_label': str,
            'message': str,
            'recipient_address1': str,
            'recipient_address2': str,
            'recipient_business_name': str,
            'recipient_city': str,
            'recipient_country': str,
            'recipient_country_id': int,
            'recipient_name': str,
            'recipient_state': str,
            'recipient_zip': str,
            'sender_address1': str,
            'sender_address2': str,
            'sender_business_name': str,
            'sender_city': str,
            'sender_country': str,
            'sender_country_id': int,
            'sender_name': str,
            'sender_state': str,
            'sender_zip': str,
            'uid': str
        }

        self.attribute_map = {
            'card_id': 'card_id',
            'credit_card_id': 'credit_card_id',
            'denomination_id': 'denomination_id',
            'font_label': 'font_label',
            'message': 'message',
            'recipient_address1': 'recipient_address1',
            'recipient_address2': 'recipient_address2',
            'recipient_business_name': 'recipient_business_name',
            'recipient_city': 'recipient_city',
            'recipient_country': 'recipient_country',
            'recipient_country_id': 'recipient_country_id',
            'recipient_name': 'recipient_name',
            'recipient_state': 'recipient_state',
            'recipient_zip': 'recipient_zip',
            'sender_address1': 'sender_address1',
            'sender_address2': 'sender_address2',
            'sender_business_name': 'sender_business_name',
            'sender_city': 'sender_city',
            'sender_country': 'sender_country',
            'sender_country_id': 'sender_country_id',
            'sender_name': 'sender_name',
            'sender_state': 'sender_state',
            'sender_zip': 'sender_zip',
            'uid': 'uid'
        }

        self._card_id = card_id
        self._credit_card_id = credit_card_id
        self._denomination_id = denomination_id
        self._font_label = font_label
        self._message = message
        self._recipient_address1 = recipient_address1
        self._recipient_address2 = recipient_address2
        self._recipient_business_name = recipient_business_name
        self._recipient_city = recipient_city
        self._recipient_country = recipient_country
        self._recipient_country_id = recipient_country_id
        self._recipient_name = recipient_name
        self._recipient_state = recipient_state
        self._recipient_zip = recipient_zip
        self._sender_address1 = sender_address1
        self._sender_address2 = sender_address2
        self._sender_business_name = sender_business_name
        self._sender_city = sender_city
        self._sender_country = sender_country
        self._sender_country_id = sender_country_id
        self._sender_name = sender_name
        self._sender_state = sender_state
        self._sender_zip = sender_zip
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SingleStepOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The singleStepOrder_request of this SingleStepOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this SingleStepOrderRequest.

        the id of the card you want to send

        :return: The card_id of this SingleStepOrderRequest.
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this SingleStepOrderRequest.

        the id of the card you want to send

        :param card_id: The card_id of this SingleStepOrderRequest.
        :type card_id: int
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def credit_card_id(self):
        """Gets the credit_card_id of this SingleStepOrderRequest.

        the credit card id to charge for the order.  Currently this is required, even for invoiced accounts, it just won't be charged.

        :return: The credit_card_id of this SingleStepOrderRequest.
        :rtype: int
        """
        return self._credit_card_id

    @credit_card_id.setter
    def credit_card_id(self, credit_card_id):
        """Sets the credit_card_id of this SingleStepOrderRequest.

        the credit card id to charge for the order.  Currently this is required, even for invoiced accounts, it just won't be charged.

        :param credit_card_id: The credit_card_id of this SingleStepOrderRequest.
        :type credit_card_id: int
        """

        self._credit_card_id = credit_card_id

    @property
    def denomination_id(self):
        """Gets the denomination_id of this SingleStepOrderRequest.

        Optional.  Use if sending a gift card

        :return: The denomination_id of this SingleStepOrderRequest.
        :rtype: int
        """
        return self._denomination_id

    @denomination_id.setter
    def denomination_id(self, denomination_id):
        """Sets the denomination_id of this SingleStepOrderRequest.

        Optional.  Use if sending a gift card

        :param denomination_id: The denomination_id of this SingleStepOrderRequest.
        :type denomination_id: int
        """

        self._denomination_id = denomination_id

    @property
    def font_label(self):
        """Gets the font_label of this SingleStepOrderRequest.

        the colloquial name of the font, such as 'Fancy Jenna' or 'Casual David'

        :return: The font_label of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._font_label

    @font_label.setter
    def font_label(self, font_label):
        """Sets the font_label of this SingleStepOrderRequest.

        the colloquial name of the font, such as 'Fancy Jenna' or 'Casual David'

        :param font_label: The font_label of this SingleStepOrderRequest.
        :type font_label: str
        """

        self._font_label = font_label

    @property
    def message(self):
        """Gets the message of this SingleStepOrderRequest.

        the full message body.  Use '\\n' for new lines

        :return: The message of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SingleStepOrderRequest.

        the full message body.  Use '\\n' for new lines

        :param message: The message of this SingleStepOrderRequest.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def recipient_address1(self):
        """Gets the recipient_address1 of this SingleStepOrderRequest.

        the first address line of the return address

        :return: The recipient_address1 of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_address1

    @recipient_address1.setter
    def recipient_address1(self, recipient_address1):
        """Sets the recipient_address1 of this SingleStepOrderRequest.

        the first address line of the return address

        :param recipient_address1: The recipient_address1 of this SingleStepOrderRequest.
        :type recipient_address1: str
        """

        self._recipient_address1 = recipient_address1

    @property
    def recipient_address2(self):
        """Gets the recipient_address2 of this SingleStepOrderRequest.

        the second line of the address, such as suite, apartment, building, etc. Optional

        :return: The recipient_address2 of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_address2

    @recipient_address2.setter
    def recipient_address2(self, recipient_address2):
        """Sets the recipient_address2 of this SingleStepOrderRequest.

        the second line of the address, such as suite, apartment, building, etc. Optional

        :param recipient_address2: The recipient_address2 of this SingleStepOrderRequest.
        :type recipient_address2: str
        """

        self._recipient_address2 = recipient_address2

    @property
    def recipient_business_name(self):
        """Gets the recipient_business_name of this SingleStepOrderRequest.

        the second line of the recipient address.  Optional.

        :return: The recipient_business_name of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_business_name

    @recipient_business_name.setter
    def recipient_business_name(self, recipient_business_name):
        """Sets the recipient_business_name of this SingleStepOrderRequest.

        the second line of the recipient address.  Optional.

        :param recipient_business_name: The recipient_business_name of this SingleStepOrderRequest.
        :type recipient_business_name: str
        """

        self._recipient_business_name = recipient_business_name

    @property
    def recipient_city(self):
        """Gets the recipient_city of this SingleStepOrderRequest.

        the city of the recipient, to appear in the address

        :return: The recipient_city of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_city

    @recipient_city.setter
    def recipient_city(self, recipient_city):
        """Sets the recipient_city of this SingleStepOrderRequest.

        the city of the recipient, to appear in the address

        :param recipient_city: The recipient_city of this SingleStepOrderRequest.
        :type recipient_city: str
        """

        self._recipient_city = recipient_city

    @property
    def recipient_country(self):
        """Gets the recipient_country of this SingleStepOrderRequest.

        the country of the recipient.  Optional and defaults to usa

        :return: The recipient_country of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_country

    @recipient_country.setter
    def recipient_country(self, recipient_country):
        """Sets the recipient_country of this SingleStepOrderRequest.

        the country of the recipient.  Optional and defaults to usa

        :param recipient_country: The recipient_country of this SingleStepOrderRequest.
        :type recipient_country: str
        """

        self._recipient_country = recipient_country

    @property
    def recipient_country_id(self):
        """Gets the recipient_country_id of this SingleStepOrderRequest.

        alternate way to specify country.  Optional and defaults to 1

        :return: The recipient_country_id of this SingleStepOrderRequest.
        :rtype: int
        """
        return self._recipient_country_id

    @recipient_country_id.setter
    def recipient_country_id(self, recipient_country_id):
        """Sets the recipient_country_id of this SingleStepOrderRequest.

        alternate way to specify country.  Optional and defaults to 1

        :param recipient_country_id: The recipient_country_id of this SingleStepOrderRequest.
        :type recipient_country_id: int
        """

        self._recipient_country_id = recipient_country_id

    @property
    def recipient_name(self):
        """Gets the recipient_name of this SingleStepOrderRequest.

        the name on the recipient address

        :return: The recipient_name of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this SingleStepOrderRequest.

        the name on the recipient address

        :param recipient_name: The recipient_name of this SingleStepOrderRequest.
        :type recipient_name: str
        """

        self._recipient_name = recipient_name

    @property
    def recipient_state(self):
        """Gets the recipient_state of this SingleStepOrderRequest.

        the ABBREVIATED state or province of the recipient.  This is required for US and Canada addresses and optional for all other countries

        :return: The recipient_state of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_state

    @recipient_state.setter
    def recipient_state(self, recipient_state):
        """Sets the recipient_state of this SingleStepOrderRequest.

        the ABBREVIATED state or province of the recipient.  This is required for US and Canada addresses and optional for all other countries

        :param recipient_state: The recipient_state of this SingleStepOrderRequest.
        :type recipient_state: str
        """

        self._recipient_state = recipient_state

    @property
    def recipient_zip(self):
        """Gets the recipient_zip of this SingleStepOrderRequest.

        the zip code or postal code of the recipient

        :return: The recipient_zip of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._recipient_zip

    @recipient_zip.setter
    def recipient_zip(self, recipient_zip):
        """Sets the recipient_zip of this SingleStepOrderRequest.

        the zip code or postal code of the recipient

        :param recipient_zip: The recipient_zip of this SingleStepOrderRequest.
        :type recipient_zip: str
        """

        self._recipient_zip = recipient_zip

    @property
    def sender_address1(self):
        """Gets the sender_address1 of this SingleStepOrderRequest.

        the first address line of the return address

        :return: The sender_address1 of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_address1

    @sender_address1.setter
    def sender_address1(self, sender_address1):
        """Sets the sender_address1 of this SingleStepOrderRequest.

        the first address line of the return address

        :param sender_address1: The sender_address1 of this SingleStepOrderRequest.
        :type sender_address1: str
        """

        self._sender_address1 = sender_address1

    @property
    def sender_address2(self):
        """Gets the sender_address2 of this SingleStepOrderRequest.

        the second line of the address, such as suite, apartment, building, etc. Optional

        :return: The sender_address2 of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_address2

    @sender_address2.setter
    def sender_address2(self, sender_address2):
        """Sets the sender_address2 of this SingleStepOrderRequest.

        the second line of the address, such as suite, apartment, building, etc. Optional

        :param sender_address2: The sender_address2 of this SingleStepOrderRequest.
        :type sender_address2: str
        """

        self._sender_address2 = sender_address2

    @property
    def sender_business_name(self):
        """Gets the sender_business_name of this SingleStepOrderRequest.

        the second line of the return address.  Optional.

        :return: The sender_business_name of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_business_name

    @sender_business_name.setter
    def sender_business_name(self, sender_business_name):
        """Sets the sender_business_name of this SingleStepOrderRequest.

        the second line of the return address.  Optional.

        :param sender_business_name: The sender_business_name of this SingleStepOrderRequest.
        :type sender_business_name: str
        """

        self._sender_business_name = sender_business_name

    @property
    def sender_city(self):
        """Gets the sender_city of this SingleStepOrderRequest.

        the city of the sender, to appear in the return address

        :return: The sender_city of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_city

    @sender_city.setter
    def sender_city(self, sender_city):
        """Sets the sender_city of this SingleStepOrderRequest.

        the city of the sender, to appear in the return address

        :param sender_city: The sender_city of this SingleStepOrderRequest.
        :type sender_city: str
        """

        self._sender_city = sender_city

    @property
    def sender_country(self):
        """Gets the sender_country of this SingleStepOrderRequest.

        the country of the recipient.  Optional and defaults to usa

        :return: The sender_country of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_country

    @sender_country.setter
    def sender_country(self, sender_country):
        """Sets the sender_country of this SingleStepOrderRequest.

        the country of the recipient.  Optional and defaults to usa

        :param sender_country: The sender_country of this SingleStepOrderRequest.
        :type sender_country: str
        """

        self._sender_country = sender_country

    @property
    def sender_country_id(self):
        """Gets the sender_country_id of this SingleStepOrderRequest.

        alternate way to specify country.  Optional and defaults to 1

        :return: The sender_country_id of this SingleStepOrderRequest.
        :rtype: int
        """
        return self._sender_country_id

    @sender_country_id.setter
    def sender_country_id(self, sender_country_id):
        """Sets the sender_country_id of this SingleStepOrderRequest.

        alternate way to specify country.  Optional and defaults to 1

        :param sender_country_id: The sender_country_id of this SingleStepOrderRequest.
        :type sender_country_id: int
        """

        self._sender_country_id = sender_country_id

    @property
    def sender_name(self):
        """Gets the sender_name of this SingleStepOrderRequest.

        the name on the return address

        :return: The sender_name of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this SingleStepOrderRequest.

        the name on the return address

        :param sender_name: The sender_name of this SingleStepOrderRequest.
        :type sender_name: str
        """

        self._sender_name = sender_name

    @property
    def sender_state(self):
        """Gets the sender_state of this SingleStepOrderRequest.

        the ABBREVIATED state or province of the sender.  This is required for US and Canada addresses and optional for all other countries

        :return: The sender_state of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_state

    @sender_state.setter
    def sender_state(self, sender_state):
        """Sets the sender_state of this SingleStepOrderRequest.

        the ABBREVIATED state or province of the sender.  This is required for US and Canada addresses and optional for all other countries

        :param sender_state: The sender_state of this SingleStepOrderRequest.
        :type sender_state: str
        """

        self._sender_state = sender_state

    @property
    def sender_zip(self):
        """Gets the sender_zip of this SingleStepOrderRequest.

        The postal code or zip code of the sender.

        :return: The sender_zip of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._sender_zip

    @sender_zip.setter
    def sender_zip(self, sender_zip):
        """Sets the sender_zip of this SingleStepOrderRequest.

        The postal code or zip code of the sender.

        :param sender_zip: The sender_zip of this SingleStepOrderRequest.
        :type sender_zip: str
        """

        self._sender_zip = sender_zip

    @property
    def uid(self):
        """Gets the uid of this SingleStepOrderRequest.

        The UID of the logged-in user

        :return: The uid of this SingleStepOrderRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SingleStepOrderRequest.

        The UID of the logged-in user

        :param uid: The uid of this SingleStepOrderRequest.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
