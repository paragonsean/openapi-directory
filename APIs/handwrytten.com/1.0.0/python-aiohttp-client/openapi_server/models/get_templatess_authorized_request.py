# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTemplatessAuthorizedRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, uid: str=None):
        """GetTemplatessAuthorizedRequest - a model defined in OpenAPI

        :param category_id: The category_id of this GetTemplatessAuthorizedRequest.
        :param uid: The uid of this GetTemplatessAuthorizedRequest.
        """
        self.openapi_types = {
            'category_id': int,
            'uid': str
        }

        self.attribute_map = {
            'category_id': 'category_id',
            'uid': 'uid'
        }

        self._category_id = category_id
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTemplatessAuthorizedRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getTemplatessAuthorized_request of this GetTemplatessAuthorizedRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this GetTemplatessAuthorizedRequest.

        optional category to filter the templates

        :return: The category_id of this GetTemplatessAuthorizedRequest.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this GetTemplatessAuthorizedRequest.

        optional category to filter the templates

        :param category_id: The category_id of this GetTemplatessAuthorizedRequest.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def uid(self):
        """Gets the uid of this GetTemplatessAuthorizedRequest.

        optional authorized UID of the session.  By providing this, the template list will include user-specific template categories

        :return: The uid of this GetTemplatessAuthorizedRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetTemplatessAuthorizedRequest.

        optional authorized UID of the session.  By providing this, the template list will include user-specific template categories

        :param uid: The uid of this GetTemplatessAuthorizedRequest.
        :type uid: str
        """

        self._uid = uid
