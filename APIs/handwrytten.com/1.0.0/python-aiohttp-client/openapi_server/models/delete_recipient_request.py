# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteRecipientRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_id: int=None, uid: str=None):
        """DeleteRecipientRequest - a model defined in OpenAPI

        :param address_id: The address_id of this DeleteRecipientRequest.
        :param uid: The uid of this DeleteRecipientRequest.
        """
        self.openapi_types = {
            'address_id': int,
            'uid': str
        }

        self.attribute_map = {
            'address_id': 'address_id',
            'uid': 'uid'
        }

        self._address_id = address_id
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRecipientRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deleteRecipient_request of this DeleteRecipientRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self):
        """Gets the address_id of this DeleteRecipientRequest.

        the id of the address to delete

        :return: The address_id of this DeleteRecipientRequest.
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this DeleteRecipientRequest.

        the id of the address to delete

        :param address_id: The address_id of this DeleteRecipientRequest.
        :type address_id: int
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")

        self._address_id = address_id

    @property
    def uid(self):
        """Gets the uid of this DeleteRecipientRequest.

        authorized UID of the session.

        :return: The uid of this DeleteRecipientRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DeleteRecipientRequest.

        authorized UID of the session.

        :param uid: The uid of this DeleteRecipientRequest.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
