# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangePasswordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_password: str=None, old_password: str=None, uid: str=None):
        """ChangePasswordRequest - a model defined in OpenAPI

        :param new_password: The new_password of this ChangePasswordRequest.
        :param old_password: The old_password of this ChangePasswordRequest.
        :param uid: The uid of this ChangePasswordRequest.
        """
        self.openapi_types = {
            'new_password': str,
            'old_password': str,
            'uid': str
        }

        self.attribute_map = {
            'new_password': 'new_password',
            'old_password': 'old_password',
            'uid': 'uid'
        }

        self._new_password = new_password
        self._old_password = old_password
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangePasswordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The changePassword_request of this ChangePasswordRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_password(self):
        """Gets the new_password of this ChangePasswordRequest.

        the new password

        :return: The new_password of this ChangePasswordRequest.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this ChangePasswordRequest.

        the new password

        :param new_password: The new_password of this ChangePasswordRequest.
        :type new_password: str
        """

        self._new_password = new_password

    @property
    def old_password(self):
        """Gets the old_password of this ChangePasswordRequest.

        the existing password

        :return: The old_password of this ChangePasswordRequest.
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this ChangePasswordRequest.

        the existing password

        :param old_password: The old_password of this ChangePasswordRequest.
        :type old_password: str
        """

        self._old_password = old_password

    @property
    def uid(self):
        """Gets the uid of this ChangePasswordRequest.

        the authorized UID of the session

        :return: The uid of this ChangePasswordRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ChangePasswordRequest.

        the authorized UID of the session

        :param uid: The uid of this ChangePasswordRequest.
        :type uid: str
        """

        self._uid = uid
