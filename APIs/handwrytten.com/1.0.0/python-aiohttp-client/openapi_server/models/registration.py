# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Registration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_code: str=None, fname: str=None, lname: str=None, login: str=None, password: str=None):
        """Registration - a model defined in OpenAPI

        :param discount_code: The discount_code of this Registration.
        :param fname: The fname of this Registration.
        :param lname: The lname of this Registration.
        :param login: The login of this Registration.
        :param password: The password of this Registration.
        """
        self.openapi_types = {
            'discount_code': str,
            'fname': str,
            'lname': str,
            'login': str,
            'password': str
        }

        self.attribute_map = {
            'discount_code': 'discount_code',
            'fname': 'fname',
            'lname': 'lname',
            'login': 'login',
            'password': 'password'
        }

        self._discount_code = discount_code
        self._fname = fname
        self._lname = lname
        self._login = login
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Registration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Registration of this Registration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_code(self):
        """Gets the discount_code of this Registration.

        optional discount code

        :return: The discount_code of this Registration.
        :rtype: str
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code):
        """Sets the discount_code of this Registration.

        optional discount code

        :param discount_code: The discount_code of this Registration.
        :type discount_code: str
        """

        self._discount_code = discount_code

    @property
    def fname(self):
        """Gets the fname of this Registration.

        first name

        :return: The fname of this Registration.
        :rtype: str
        """
        return self._fname

    @fname.setter
    def fname(self, fname):
        """Sets the fname of this Registration.

        first name

        :param fname: The fname of this Registration.
        :type fname: str
        """
        if fname is None:
            raise ValueError("Invalid value for `fname`, must not be `None`")

        self._fname = fname

    @property
    def lname(self):
        """Gets the lname of this Registration.

        last name

        :return: The lname of this Registration.
        :rtype: str
        """
        return self._lname

    @lname.setter
    def lname(self, lname):
        """Sets the lname of this Registration.

        last name

        :param lname: The lname of this Registration.
        :type lname: str
        """
        if lname is None:
            raise ValueError("Invalid value for `lname`, must not be `None`")

        self._lname = lname

    @property
    def login(self):
        """Gets the login of this Registration.

        email address

        :return: The login of this Registration.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Registration.

        email address

        :param login: The login of this Registration.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def password(self):
        """Gets the password of this Registration.


        :return: The password of this Registration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Registration.


        :param password: The password of this Registration.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
