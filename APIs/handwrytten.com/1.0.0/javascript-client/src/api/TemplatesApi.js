/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePassword200Response from '../model/ChangePassword200Response';
import CreateTemplateRequest from '../model/CreateTemplateRequest';
import DeleteTemplateRequest from '../model/DeleteTemplateRequest';
import GetTemplateCategoriesAuthorizedRequest from '../model/GetTemplateCategoriesAuthorizedRequest';
import GetTemplateDetailRequest from '../model/GetTemplateDetailRequest';
import GetTemplatessAuthorizedRequest from '../model/GetTemplatessAuthorizedRequest';
import Template from '../model/Template';
import TemplateCategory from '../model/TemplateCategory';
import UpdateTemplateRequest from '../model/UpdateTemplateRequest';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.0
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTemplate operation.
     * @callback module:api/TemplatesApi~createTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Template>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a New Template in the User’s Account
     * Creates a new Template in the User’s Account
     * @param {module:model/CreateTemplateRequest} body additional parameters
     * @param {module:api/TemplatesApi~createTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Template>}
     */
    createTemplate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Template];
      return this.apiClient.callApi(
        '/templates/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplate operation.
     * @callback module:api/TemplatesApi~deleteTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a users template
     * Deletes a template in the User’s Account
     * @param {module:model/DeleteTemplateRequest} body additional parameters
     * @param {module:api/TemplatesApi~deleteTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePassword200Response}
     */
    deleteTemplate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChangePassword200Response;
      return this.apiClient.callApi(
        '/templates/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateCategories operation.
     * @callback module:api/TemplatesApi~getTemplateCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TemplateCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List template categories
     * Lists the common template categories of all users. As you are not logged in, this is what you are limited to.
     * @param {module:api/TemplatesApi~getTemplateCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TemplateCategory>}
     */
    getTemplateCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TemplateCategory];
      return this.apiClient.callApi(
        '/templateCategories/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateCategoriesAuthorized operation.
     * @callback module:api/TemplatesApi~getTemplateCategoriesAuthorizedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TemplateCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List template categories
     * Lists the template categories of all users. By passing the optional UID, any custom template categories are also available.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTemplateCategoriesAuthorizedRequest} [body] additional parameters
     * @param {module:api/TemplatesApi~getTemplateCategoriesAuthorizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TemplateCategory>}
     */
    getTemplateCategoriesAuthorized(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TemplateCategory];
      return this.apiClient.callApi(
        '/templateCategories/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateDetail operation.
     * @callback module:api/TemplatesApi~getTemplateDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all info on a template
     * Provides all details on a template
     * @param {module:model/GetTemplateDetailRequest} body additional parameters
     * @param {module:api/TemplatesApi~getTemplateDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    getTemplateDetail(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTemplateDetail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/templates/view', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplates operation.
     * @callback module:api/TemplatesApi~getTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Template>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List template categories
     * Lists the common template categories of all users. As you are not logged in, this is what you are limited to.
     * @param {module:api/TemplatesApi~getTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Template>}
     */
    getTemplates(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Template];
      return this.apiClient.callApi(
        '/templates/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplatessAuthorized operation.
     * @callback module:api/TemplatesApi~getTemplatessAuthorizedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Template>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List template categories
     * Lists the template categories of all users. By passing the optional UID, any custom template categories are also available.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTemplatessAuthorizedRequest} [body] additional parameters
     * @param {module:api/TemplatesApi~getTemplatessAuthorizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Template>}
     */
    getTemplatessAuthorized(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Template];
      return this.apiClient.callApi(
        '/templates/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplate operation.
     * @callback module:api/TemplatesApi~updateTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Template>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Existing Template in the User’s Account
     * Updates an Existing Template in the User’s Account
     * @param {module:model/UpdateTemplateRequest} body additional parameters
     * @param {module:api/TemplatesApi~updateTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Template>}
     */
    updateTemplate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Template];
      return this.apiClient.callApi(
        '/templates/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
