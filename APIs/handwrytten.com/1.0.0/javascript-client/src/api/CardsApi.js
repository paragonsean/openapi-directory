/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Card from '../model/Card';
import CardDetails from '../model/CardDetails';
import FilterableCardDetailsRequest from '../model/FilterableCardDetailsRequest';
import ListCardsRequest from '../model/ListCardsRequest';

/**
* Cards service.
* @module api/CardsApi
* @version 1.0.0
*/
export default class CardsApi {

    /**
    * Constructs a new CardsApi. 
    * @alias module:api/CardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filterableCardDetails operation.
     * @callback module:api/CardsApi~filterableCardDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides full information on a specific card
     * Full card details
     * @param {Object} opts Optional parameters
     * @param {module:model/FilterableCardDetailsRequest} [body] additional parameters
     * @param {module:api/CardsApi~filterableCardDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDetails}
     */
    filterableCardDetails(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardDetails;
      return this.apiClient.callApi(
        '/cards/view', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCards operation.
     * @callback module:api/CardsApi~listCardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Card>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information on cards
     * Simple listing of cards.  No filters can be applied.
     * @param {Object} opts Optional parameters
     * @param {module:model/ListCardsRequest} [body] additional parameters
     * @param {module:api/CardsApi~listCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Card>}
     */
    listCards(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Card];
      return this.apiClient.callApi(
        '/cards/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simpleListCards operation.
     * @callback module:api/CardsApi~simpleListCardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Card>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information on cards
     * Filterable card list.  If called with UID will also provide user-specific cards.
     * @param {module:api/CardsApi~simpleListCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Card>}
     */
    simpleListCards(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Card];
      return this.apiClient.callApi(
        '/cards/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
