/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateUserAddressRequest from '../model/UpdateUserAddressRequest';
import UserAddress200Response from '../model/UserAddress200Response';
import UserAddressRequest from '../model/UserAddressRequest';

/**
* Profile service.
* @module api/ProfileApi
* @version 1.0.0
*/
export default class ProfileApi {

    /**
    * Constructs a new ProfileApi. 
    * @alias module:api/ProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the updateUserAddress operation.
     * @callback module:api/ProfileApi~updateUserAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAddress200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update the user's return address information
     * @param {module:model/UpdateUserAddressRequest} body additional parameters
     * @param {module:api/ProfileApi~updateUserAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAddress200Response}
     */
    updateUserAddress(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAddress200Response;
      return this.apiClient.callApi(
        '/profile/updateAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAddress operation.
     * @callback module:api/ProfileApi~userAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAddress200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the user's return address information
     * @param {Object} opts Optional parameters
     * @param {module:model/UserAddressRequest} [body] additional parameters
     * @param {module:api/ProfileApi~userAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAddress200Response}
     */
    userAddress(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAddress200Response;
      return this.apiClient.callApi(
        '/profile/address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
