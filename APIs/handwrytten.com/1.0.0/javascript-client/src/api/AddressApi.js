/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddRecipientAddress200Response from '../model/AddRecipientAddress200Response';
import AddRecipientAddressRequest from '../model/AddRecipientAddressRequest';
import DeleteRecipient200Response from '../model/DeleteRecipient200Response';
import DeleteRecipientRequest from '../model/DeleteRecipientRequest';
import RecipientAddress from '../model/RecipientAddress';
import RecipientsListRequest from '../model/RecipientsListRequest';
import UpdateRecipientRequest from '../model/UpdateRecipientRequest';

/**
* Address service.
* @module api/AddressApi
* @version 1.0.0
*/
export default class AddressApi {

    /**
    * Constructs a new AddressApi. 
    * @alias module:api/AddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRecipientAddress operation.
     * @callback module:api/AddressApi~addRecipientAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddRecipientAddress200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new recipient address
     * @param {Object} opts Optional parameters
     * @param {module:model/AddRecipientAddressRequest} [body] additional parameters
     * @param {module:api/AddressApi~addRecipientAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddRecipientAddress200Response}
     */
    addRecipientAddress(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddRecipientAddress200Response;
      return this.apiClient.callApi(
        '/profile/profileAddRecipient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecipient operation.
     * @callback module:api/AddressApi~deleteRecipientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRecipient200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes an existing recipient address
     * @param {module:model/DeleteRecipientRequest} body additional parameters
     * @param {module:api/AddressApi~deleteRecipientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRecipient200Response}
     */
    deleteRecipient(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRecipient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRecipient200Response;
      return this.apiClient.callApi(
        '/profile/deleteRecipient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recipientsList operation.
     * @callback module:api/AddressApi~recipientsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecipientAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list the addresses in the user's account
     * @param {module:model/RecipientsListRequest} body additional parameters
     * @param {module:api/AddressApi~recipientsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecipientAddress>}
     */
    recipientsList(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recipientsList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RecipientAddress];
      return this.apiClient.callApi(
        '/profile/recipientsList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecipient operation.
     * @callback module:api/AddressApi~updateRecipientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddRecipientAddress200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing new recipient address
     * @param {module:model/UpdateRecipientRequest} body additional parameters
     * @param {module:api/AddressApi~updateRecipientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddRecipientAddress200Response}
     */
    updateRecipient(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRecipient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddRecipientAddress200Response;
      return this.apiClient.callApi(
        '/profile/updateRecipient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
