/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Card from '../model/Card';
import CreateCustomCardRequest from '../model/CreateCustomCardRequest';
import FontForCustomizer from '../model/FontForCustomizer';
import UploadCustomLogo200Response from '../model/UploadCustomLogo200Response';

/**
* Customizer service.
* @module api/CustomizerApi
* @version 1.0.0
*/
export default class CustomizerApi {

    /**
    * Constructs a new CustomizerApi. 
    * @alias module:api/CustomizerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomCard operation.
     * @callback module:api/CustomizerApi~createCustomCardCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Card>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new custom card
     * @param {module:model/CreateCustomCardRequest} body additional parameters
     * @param {module:api/CustomizerApi~createCustomCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Card>}
     */
    createCustomCard(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCustomCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Card];
      return this.apiClient.callApi(
        '/cards/createCustomCard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fontsListForCustomizer operation.
     * @callback module:api/CustomizerApi~fontsListForCustomizerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FontForCustomizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists fonts available for use with the card customizer
     * @param {module:api/CustomizerApi~fontsListForCustomizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FontForCustomizer>}
     */
    fontsListForCustomizer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FontForCustomizer];
      return this.apiClient.callApi(
        '/fonts/listForCustomizer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadCustomLogo operation.
     * @callback module:api/CustomizerApi~uploadCustomLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadCustomLogo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upload logo or cover image for card
     * @param {File} file upload images for customc cards
     * @param {String} type set to cover or header
     * @param {String} uid uid of the user
     * @param {module:api/CustomizerApi~uploadCustomLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadCustomLogo200Response}
     */
    uploadCustomLogo(file, type, uid, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadCustomLogo");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadCustomLogo");
      }
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling uploadCustomLogo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'type': type,
        'uid': uid
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadCustomLogo200Response;
      return this.apiClient.callApi(
        '/cards/uploadCustomLogo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
