/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePassword200Response from '../model/ChangePassword200Response';
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import Login from '../model/Login';
import Login200Response from '../model/Login200Response';
import LogoutRequest from '../model/LogoutRequest';
import Register200Response from '../model/Register200Response';
import Registration from '../model/Registration';
import ResetPasswordRequestRequest from '../model/ResetPasswordRequestRequest';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/AuthApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changes a user's password
     * @param {module:model/ChangePasswordRequest} body Change password
     * @param {module:api/AuthApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePassword200Response}
     */
    changePassword(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChangePassword200Response;
      return this.apiClient.callApi(
        '/auth/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Login200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs in to an existing account
     * @param {module:model/Login} body Login to account
     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Login200Response}
     */
    login(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Login200Response;
      return this.apiClient.callApi(
        '/auth/authorization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AuthApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * logs out a session uid
     * @param {module:model/LogoutRequest} body logout session
     * @param {module:api/AuthApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePassword200Response}
     */
    logout(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChangePassword200Response;
      return this.apiClient.callApi(
        '/auth/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/AuthApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Register200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new account
     * @param {module:model/Registration} body New user account information
     * @param {module:api/AuthApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Register200Response}
     */
    register(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Register200Response;
      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordRequest operation.
     * @callback module:api/AuthApi~resetPasswordRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resets a user's password
     * @param {module:model/ResetPasswordRequestRequest} body Reset password
     * @param {module:api/AuthApi~resetPasswordRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePassword200Response}
     */
    resetPasswordRequest(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resetPasswordRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChangePassword200Response;
      return this.apiClient.callApi(
        '/auth/resetPasswordRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
