/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateUserAddressRequest model module.
 * @module model/UpdateUserAddressRequest
 * @version 1.0.0
 */
class UpdateUserAddressRequest {
    /**
     * Constructs a new <code>UpdateUserAddressRequest</code>.
     * @alias module:model/UpdateUserAddressRequest
     * @param addressId {Number} the address you are updating
     * @param uid {String} authorized UID of the session.
     */
    constructor(addressId, uid) { 
        
        UpdateUserAddressRequest.initialize(this, addressId, uid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, uid) { 
        obj['address_id'] = addressId;
        obj['uid'] = uid;
    }

    /**
     * Constructs a <code>UpdateUserAddressRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateUserAddressRequest} obj Optional instance to populate.
     * @return {module:model/UpdateUserAddressRequest} The populated <code>UpdateUserAddressRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateUserAddressRequest();

            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('address_id')) {
                obj['address_id'] = ApiClient.convertToType(data['address_id'], 'Number');
            }
            if (data.hasOwnProperty('business_name')) {
                obj['business_name'] = ApiClient.convertToType(data['business_name'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_id')) {
                obj['country_id'] = ApiClient.convertToType(data['country_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateUserAddressRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateUserAddressRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateUserAddressRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['business_name'] && !(typeof data['business_name'] === 'string' || data['business_name'] instanceof String)) {
            throw new Error("Expected the field `business_name` to be a primitive type in the JSON string but got " + data['business_name']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}

UpdateUserAddressRequest.RequiredProperties = ["address_id", "uid"];

/**
 * the first line of the address
 * @member {String} address1
 */
UpdateUserAddressRequest.prototype['address1'] = undefined;

/**
 * the second (optional) line of the address
 * @member {String} address2
 */
UpdateUserAddressRequest.prototype['address2'] = undefined;

/**
 * the address you are updating
 * @member {Number} address_id
 */
UpdateUserAddressRequest.prototype['address_id'] = undefined;

/**
 * the optional business name on the address
 * @member {String} business_name
 */
UpdateUserAddressRequest.prototype['business_name'] = undefined;

/**
 * the city of the address
 * @member {String} city
 */
UpdateUserAddressRequest.prototype['city'] = undefined;

/**
 * the name of the country of the address
 * @member {String} country
 */
UpdateUserAddressRequest.prototype['country'] = undefined;

/**
 * the id of the country of the address. do not use with \"country\" parameter
 * @member {Number} country_id
 */
UpdateUserAddressRequest.prototype['country_id'] = undefined;

/**
 * the name on the address
 * @member {String} name
 */
UpdateUserAddressRequest.prototype['name'] = undefined;

/**
 * the abbreviated state or province of the address
 * @member {String} state
 */
UpdateUserAddressRequest.prototype['state'] = undefined;

/**
 * authorized UID of the session.
 * @member {String} uid
 */
UpdateUserAddressRequest.prototype['uid'] = undefined;

/**
 * the zip or postal code of the address
 * @member {String} zip
 */
UpdateUserAddressRequest.prototype['zip'] = undefined;






export default UpdateUserAddressRequest;

