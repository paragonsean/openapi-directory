/**
 * Handwrytten API
 * This is the Handwrytten API for sending cards written in the handwriting of your choice. Using this api, you can send cards to users.  You can also customize cards with logos, which can be saved and then used like any other card in the system. For a \"sandbox\" account, please contact contact@handwrytten.com To move from credit card per-transaction to monthly invoicing, also contact us. [https://www.handwrytten.com](https://www.handwrytten.com) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@handwrytten.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SingleStepOrderRequest model module.
 * @module model/SingleStepOrderRequest
 * @version 1.0.0
 */
class SingleStepOrderRequest {
    /**
     * Constructs a new <code>SingleStepOrderRequest</code>.
     * @alias module:model/SingleStepOrderRequest
     * @param cardId {Number} the id of the card you want to send
     * @param message {String} the full message body.  Use '\\n' for new lines
     * @param uid {String} The UID of the logged-in user
     */
    constructor(cardId, message, uid) { 
        
        SingleStepOrderRequest.initialize(this, cardId, message, uid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardId, message, uid) { 
        obj['card_id'] = cardId;
        obj['message'] = message;
        obj['uid'] = uid;
    }

    /**
     * Constructs a <code>SingleStepOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleStepOrderRequest} obj Optional instance to populate.
     * @return {module:model/SingleStepOrderRequest} The populated <code>SingleStepOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleStepOrderRequest();

            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'Number');
            }
            if (data.hasOwnProperty('credit_card_id')) {
                obj['credit_card_id'] = ApiClient.convertToType(data['credit_card_id'], 'Number');
            }
            if (data.hasOwnProperty('denomination_id')) {
                obj['denomination_id'] = ApiClient.convertToType(data['denomination_id'], 'Number');
            }
            if (data.hasOwnProperty('font_label')) {
                obj['font_label'] = ApiClient.convertToType(data['font_label'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('recipient_address1')) {
                obj['recipient_address1'] = ApiClient.convertToType(data['recipient_address1'], 'String');
            }
            if (data.hasOwnProperty('recipient_address2')) {
                obj['recipient_address2'] = ApiClient.convertToType(data['recipient_address2'], 'String');
            }
            if (data.hasOwnProperty('recipient_business_name')) {
                obj['recipient_business_name'] = ApiClient.convertToType(data['recipient_business_name'], 'String');
            }
            if (data.hasOwnProperty('recipient_city')) {
                obj['recipient_city'] = ApiClient.convertToType(data['recipient_city'], 'String');
            }
            if (data.hasOwnProperty('recipient_country')) {
                obj['recipient_country'] = ApiClient.convertToType(data['recipient_country'], 'String');
            }
            if (data.hasOwnProperty('recipient_country_id')) {
                obj['recipient_country_id'] = ApiClient.convertToType(data['recipient_country_id'], 'Number');
            }
            if (data.hasOwnProperty('recipient_name')) {
                obj['recipient_name'] = ApiClient.convertToType(data['recipient_name'], 'String');
            }
            if (data.hasOwnProperty('recipient_state')) {
                obj['recipient_state'] = ApiClient.convertToType(data['recipient_state'], 'String');
            }
            if (data.hasOwnProperty('recipient_zip')) {
                obj['recipient_zip'] = ApiClient.convertToType(data['recipient_zip'], 'String');
            }
            if (data.hasOwnProperty('sender_address1')) {
                obj['sender_address1'] = ApiClient.convertToType(data['sender_address1'], 'String');
            }
            if (data.hasOwnProperty('sender_address2')) {
                obj['sender_address2'] = ApiClient.convertToType(data['sender_address2'], 'String');
            }
            if (data.hasOwnProperty('sender_business_name')) {
                obj['sender_business_name'] = ApiClient.convertToType(data['sender_business_name'], 'String');
            }
            if (data.hasOwnProperty('sender_city')) {
                obj['sender_city'] = ApiClient.convertToType(data['sender_city'], 'String');
            }
            if (data.hasOwnProperty('sender_country')) {
                obj['sender_country'] = ApiClient.convertToType(data['sender_country'], 'String');
            }
            if (data.hasOwnProperty('sender_country_id')) {
                obj['sender_country_id'] = ApiClient.convertToType(data['sender_country_id'], 'Number');
            }
            if (data.hasOwnProperty('sender_name')) {
                obj['sender_name'] = ApiClient.convertToType(data['sender_name'], 'String');
            }
            if (data.hasOwnProperty('sender_state')) {
                obj['sender_state'] = ApiClient.convertToType(data['sender_state'], 'String');
            }
            if (data.hasOwnProperty('sender_zip')) {
                obj['sender_zip'] = ApiClient.convertToType(data['sender_zip'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleStepOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleStepOrderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SingleStepOrderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['font_label'] && !(typeof data['font_label'] === 'string' || data['font_label'] instanceof String)) {
            throw new Error("Expected the field `font_label` to be a primitive type in the JSON string but got " + data['font_label']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['recipient_address1'] && !(typeof data['recipient_address1'] === 'string' || data['recipient_address1'] instanceof String)) {
            throw new Error("Expected the field `recipient_address1` to be a primitive type in the JSON string but got " + data['recipient_address1']);
        }
        // ensure the json data is a string
        if (data['recipient_address2'] && !(typeof data['recipient_address2'] === 'string' || data['recipient_address2'] instanceof String)) {
            throw new Error("Expected the field `recipient_address2` to be a primitive type in the JSON string but got " + data['recipient_address2']);
        }
        // ensure the json data is a string
        if (data['recipient_business_name'] && !(typeof data['recipient_business_name'] === 'string' || data['recipient_business_name'] instanceof String)) {
            throw new Error("Expected the field `recipient_business_name` to be a primitive type in the JSON string but got " + data['recipient_business_name']);
        }
        // ensure the json data is a string
        if (data['recipient_city'] && !(typeof data['recipient_city'] === 'string' || data['recipient_city'] instanceof String)) {
            throw new Error("Expected the field `recipient_city` to be a primitive type in the JSON string but got " + data['recipient_city']);
        }
        // ensure the json data is a string
        if (data['recipient_country'] && !(typeof data['recipient_country'] === 'string' || data['recipient_country'] instanceof String)) {
            throw new Error("Expected the field `recipient_country` to be a primitive type in the JSON string but got " + data['recipient_country']);
        }
        // ensure the json data is a string
        if (data['recipient_name'] && !(typeof data['recipient_name'] === 'string' || data['recipient_name'] instanceof String)) {
            throw new Error("Expected the field `recipient_name` to be a primitive type in the JSON string but got " + data['recipient_name']);
        }
        // ensure the json data is a string
        if (data['recipient_state'] && !(typeof data['recipient_state'] === 'string' || data['recipient_state'] instanceof String)) {
            throw new Error("Expected the field `recipient_state` to be a primitive type in the JSON string but got " + data['recipient_state']);
        }
        // ensure the json data is a string
        if (data['recipient_zip'] && !(typeof data['recipient_zip'] === 'string' || data['recipient_zip'] instanceof String)) {
            throw new Error("Expected the field `recipient_zip` to be a primitive type in the JSON string but got " + data['recipient_zip']);
        }
        // ensure the json data is a string
        if (data['sender_address1'] && !(typeof data['sender_address1'] === 'string' || data['sender_address1'] instanceof String)) {
            throw new Error("Expected the field `sender_address1` to be a primitive type in the JSON string but got " + data['sender_address1']);
        }
        // ensure the json data is a string
        if (data['sender_address2'] && !(typeof data['sender_address2'] === 'string' || data['sender_address2'] instanceof String)) {
            throw new Error("Expected the field `sender_address2` to be a primitive type in the JSON string but got " + data['sender_address2']);
        }
        // ensure the json data is a string
        if (data['sender_business_name'] && !(typeof data['sender_business_name'] === 'string' || data['sender_business_name'] instanceof String)) {
            throw new Error("Expected the field `sender_business_name` to be a primitive type in the JSON string but got " + data['sender_business_name']);
        }
        // ensure the json data is a string
        if (data['sender_city'] && !(typeof data['sender_city'] === 'string' || data['sender_city'] instanceof String)) {
            throw new Error("Expected the field `sender_city` to be a primitive type in the JSON string but got " + data['sender_city']);
        }
        // ensure the json data is a string
        if (data['sender_country'] && !(typeof data['sender_country'] === 'string' || data['sender_country'] instanceof String)) {
            throw new Error("Expected the field `sender_country` to be a primitive type in the JSON string but got " + data['sender_country']);
        }
        // ensure the json data is a string
        if (data['sender_name'] && !(typeof data['sender_name'] === 'string' || data['sender_name'] instanceof String)) {
            throw new Error("Expected the field `sender_name` to be a primitive type in the JSON string but got " + data['sender_name']);
        }
        // ensure the json data is a string
        if (data['sender_state'] && !(typeof data['sender_state'] === 'string' || data['sender_state'] instanceof String)) {
            throw new Error("Expected the field `sender_state` to be a primitive type in the JSON string but got " + data['sender_state']);
        }
        // ensure the json data is a string
        if (data['sender_zip'] && !(typeof data['sender_zip'] === 'string' || data['sender_zip'] instanceof String)) {
            throw new Error("Expected the field `sender_zip` to be a primitive type in the JSON string but got " + data['sender_zip']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

SingleStepOrderRequest.RequiredProperties = ["card_id", "message", "uid"];

/**
 * the id of the card you want to send
 * @member {Number} card_id
 */
SingleStepOrderRequest.prototype['card_id'] = undefined;

/**
 * the credit card id to charge for the order.  Currently this is required, even for invoiced accounts, it just won't be charged.
 * @member {Number} credit_card_id
 */
SingleStepOrderRequest.prototype['credit_card_id'] = undefined;

/**
 * Optional.  Use if sending a gift card
 * @member {Number} denomination_id
 */
SingleStepOrderRequest.prototype['denomination_id'] = undefined;

/**
 * the colloquial name of the font, such as 'Fancy Jenna' or 'Casual David'
 * @member {String} font_label
 */
SingleStepOrderRequest.prototype['font_label'] = undefined;

/**
 * the full message body.  Use '\\n' for new lines
 * @member {String} message
 */
SingleStepOrderRequest.prototype['message'] = undefined;

/**
 * the first address line of the return address
 * @member {String} recipient_address1
 */
SingleStepOrderRequest.prototype['recipient_address1'] = undefined;

/**
 * the second line of the address, such as suite, apartment, building, etc. Optional
 * @member {String} recipient_address2
 */
SingleStepOrderRequest.prototype['recipient_address2'] = undefined;

/**
 * the second line of the recipient address.  Optional.
 * @member {String} recipient_business_name
 */
SingleStepOrderRequest.prototype['recipient_business_name'] = undefined;

/**
 * the city of the recipient, to appear in the address
 * @member {String} recipient_city
 */
SingleStepOrderRequest.prototype['recipient_city'] = undefined;

/**
 * the country of the recipient.  Optional and defaults to usa
 * @member {String} recipient_country
 */
SingleStepOrderRequest.prototype['recipient_country'] = undefined;

/**
 * alternate way to specify country.  Optional and defaults to 1
 * @member {Number} recipient_country_id
 */
SingleStepOrderRequest.prototype['recipient_country_id'] = undefined;

/**
 * the name on the recipient address
 * @member {String} recipient_name
 */
SingleStepOrderRequest.prototype['recipient_name'] = undefined;

/**
 * the ABBREVIATED state or province of the recipient.  This is required for US and Canada addresses and optional for all other countries
 * @member {String} recipient_state
 */
SingleStepOrderRequest.prototype['recipient_state'] = undefined;

/**
 * the zip code or postal code of the recipient
 * @member {String} recipient_zip
 */
SingleStepOrderRequest.prototype['recipient_zip'] = undefined;

/**
 * the first address line of the return address
 * @member {String} sender_address1
 */
SingleStepOrderRequest.prototype['sender_address1'] = undefined;

/**
 * the second line of the address, such as suite, apartment, building, etc. Optional
 * @member {String} sender_address2
 */
SingleStepOrderRequest.prototype['sender_address2'] = undefined;

/**
 * the second line of the return address.  Optional.
 * @member {String} sender_business_name
 */
SingleStepOrderRequest.prototype['sender_business_name'] = undefined;

/**
 * the city of the sender, to appear in the return address
 * @member {String} sender_city
 */
SingleStepOrderRequest.prototype['sender_city'] = undefined;

/**
 * the country of the recipient.  Optional and defaults to usa
 * @member {String} sender_country
 */
SingleStepOrderRequest.prototype['sender_country'] = undefined;

/**
 * alternate way to specify country.  Optional and defaults to 1
 * @member {Number} sender_country_id
 */
SingleStepOrderRequest.prototype['sender_country_id'] = undefined;

/**
 * the name on the return address
 * @member {String} sender_name
 */
SingleStepOrderRequest.prototype['sender_name'] = undefined;

/**
 * the ABBREVIATED state or province of the sender.  This is required for US and Canada addresses and optional for all other countries
 * @member {String} sender_state
 */
SingleStepOrderRequest.prototype['sender_state'] = undefined;

/**
 * The postal code or zip code of the sender.
 * @member {String} sender_zip
 */
SingleStepOrderRequest.prototype['sender_zip'] = undefined;

/**
 * The UID of the logged-in user
 * @member {String} uid
 */
SingleStepOrderRequest.prototype['uid'] = undefined;






export default SingleStepOrderRequest;

