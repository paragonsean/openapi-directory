/*
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthError;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Locate;
import org.openapitools.client.model.PostLocate200Response;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postLocate
     * @param locate Request body containing cell and/or WLAN measurement data. Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  (required)
     * @param confidence Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).  (optional, default to 68)
     * @param contentEncoding Indicates that the data in the body is gzip-encoded. (optional)
     * @param fallback Acceptable fallback options for cell and WLAN positioning. Values &#x60;area&#x60; and &#x60;any&#x60; apply to cell based positioning, and value &#x60;singleWifi&#x60; applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both &#x60;area&#x60; and &#x60;any&#x60; are specified, then &#x60;area&#x60; is ignored.  By default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the &#x60;fallback&#x3D;area&#x60; setting. If you use the &#x60;fallback&#x3D;any&#x60; setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.  For privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the &#x60;fallback&#x3D;singleWifi&#x60; setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.  (optional)
     * @param desired Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @param xRequestID ID used for correlating customer requests within HERE services. Used for logging and error reporting. Can be any string, but UUID is recommended. It will be echoed in the response.  (optional)
     * @param required Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully and a WGS-84 compliant geocoordinate location estimate was included in the response. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is malformed. The URL query parameters or the JSON POST body in the request is invalid. Check the message in the response for additional troubleshooting information.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The values provided in the request cannot produce any content for the response. The location of the WLANs and cells in the request is unknown or the locations of the radio measurements are so widely scattered that the location cannot be determined. Make sure that the network measurements are correct and consistent. Try allowing fallbacks &#x60;area&#x60; or &#x60;any&#x60; for cell positioning and &#x60;singleWifi&#x60; for WLAN positioning.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. Only POST is supported. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 413 </td><td> Too large request. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 414 </td><td> Too long URI. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Invalid request content type. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected server error has occurred, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postLocateCall(Locate locate, Integer confidence, String contentEncoding, List<String> fallback, List<String> desired, String xRequestID, List<String> required, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locate;

        // create path and map variables
        String localVarPath = "/locate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confidence", confidence));
        }

        if (fallback != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fallback", fallback));
        }

        if (desired != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "desired", desired));
        }

        if (required != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "required", required));
        }

        if (contentEncoding != null) {
            localVarHeaderParams.put("Content-Encoding", localVarApiClient.parameterToString(contentEncoding));
        }

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postLocateValidateBeforeCall(Locate locate, Integer confidence, String contentEncoding, List<String> fallback, List<String> desired, String xRequestID, List<String> required, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locate' is set
        if (locate == null) {
            throw new ApiException("Missing the required parameter 'locate' when calling postLocate(Async)");
        }

        return postLocateCall(locate, confidence, contentEncoding, fallback, desired, xRequestID, required, _callback);

    }

    /**
     * Location query
     * Request WGS-84 compliant geocoordinates for a location based on 2G/3G/4G cell and/or WLAN measurements.
     * @param locate Request body containing cell and/or WLAN measurement data. Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  (required)
     * @param confidence Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).  (optional, default to 68)
     * @param contentEncoding Indicates that the data in the body is gzip-encoded. (optional)
     * @param fallback Acceptable fallback options for cell and WLAN positioning. Values &#x60;area&#x60; and &#x60;any&#x60; apply to cell based positioning, and value &#x60;singleWifi&#x60; applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both &#x60;area&#x60; and &#x60;any&#x60; are specified, then &#x60;area&#x60; is ignored.  By default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the &#x60;fallback&#x3D;area&#x60; setting. If you use the &#x60;fallback&#x3D;any&#x60; setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.  For privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the &#x60;fallback&#x3D;singleWifi&#x60; setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.  (optional)
     * @param desired Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @param xRequestID ID used for correlating customer requests within HERE services. Used for logging and error reporting. Can be any string, but UUID is recommended. It will be echoed in the response.  (optional)
     * @param required Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @return PostLocate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully and a WGS-84 compliant geocoordinate location estimate was included in the response. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is malformed. The URL query parameters or the JSON POST body in the request is invalid. Check the message in the response for additional troubleshooting information.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The values provided in the request cannot produce any content for the response. The location of the WLANs and cells in the request is unknown or the locations of the radio measurements are so widely scattered that the location cannot be determined. Make sure that the network measurements are correct and consistent. Try allowing fallbacks &#x60;area&#x60; or &#x60;any&#x60; for cell positioning and &#x60;singleWifi&#x60; for WLAN positioning.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. Only POST is supported. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 413 </td><td> Too large request. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 414 </td><td> Too long URI. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Invalid request content type. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected server error has occurred, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public PostLocate200Response postLocate(Locate locate, Integer confidence, String contentEncoding, List<String> fallback, List<String> desired, String xRequestID, List<String> required) throws ApiException {
        ApiResponse<PostLocate200Response> localVarResp = postLocateWithHttpInfo(locate, confidence, contentEncoding, fallback, desired, xRequestID, required);
        return localVarResp.getData();
    }

    /**
     * Location query
     * Request WGS-84 compliant geocoordinates for a location based on 2G/3G/4G cell and/or WLAN measurements.
     * @param locate Request body containing cell and/or WLAN measurement data. Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  (required)
     * @param confidence Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).  (optional, default to 68)
     * @param contentEncoding Indicates that the data in the body is gzip-encoded. (optional)
     * @param fallback Acceptable fallback options for cell and WLAN positioning. Values &#x60;area&#x60; and &#x60;any&#x60; apply to cell based positioning, and value &#x60;singleWifi&#x60; applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both &#x60;area&#x60; and &#x60;any&#x60; are specified, then &#x60;area&#x60; is ignored.  By default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the &#x60;fallback&#x3D;area&#x60; setting. If you use the &#x60;fallback&#x3D;any&#x60; setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.  For privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the &#x60;fallback&#x3D;singleWifi&#x60; setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.  (optional)
     * @param desired Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @param xRequestID ID used for correlating customer requests within HERE services. Used for logging and error reporting. Can be any string, but UUID is recommended. It will be echoed in the response.  (optional)
     * @param required Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @return ApiResponse&lt;PostLocate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully and a WGS-84 compliant geocoordinate location estimate was included in the response. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is malformed. The URL query parameters or the JSON POST body in the request is invalid. Check the message in the response for additional troubleshooting information.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The values provided in the request cannot produce any content for the response. The location of the WLANs and cells in the request is unknown or the locations of the radio measurements are so widely scattered that the location cannot be determined. Make sure that the network measurements are correct and consistent. Try allowing fallbacks &#x60;area&#x60; or &#x60;any&#x60; for cell positioning and &#x60;singleWifi&#x60; for WLAN positioning.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. Only POST is supported. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 413 </td><td> Too large request. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 414 </td><td> Too long URI. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Invalid request content type. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected server error has occurred, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PostLocate200Response> postLocateWithHttpInfo(Locate locate, Integer confidence, String contentEncoding, List<String> fallback, List<String> desired, String xRequestID, List<String> required) throws ApiException {
        okhttp3.Call localVarCall = postLocateValidateBeforeCall(locate, confidence, contentEncoding, fallback, desired, xRequestID, required, null);
        Type localVarReturnType = new TypeToken<PostLocate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Location query (asynchronously)
     * Request WGS-84 compliant geocoordinates for a location based on 2G/3G/4G cell and/or WLAN measurements.
     * @param locate Request body containing cell and/or WLAN measurement data. Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  (required)
     * @param confidence Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).  (optional, default to 68)
     * @param contentEncoding Indicates that the data in the body is gzip-encoded. (optional)
     * @param fallback Acceptable fallback options for cell and WLAN positioning. Values &#x60;area&#x60; and &#x60;any&#x60; apply to cell based positioning, and value &#x60;singleWifi&#x60; applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both &#x60;area&#x60; and &#x60;any&#x60; are specified, then &#x60;area&#x60; is ignored.  By default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the &#x60;fallback&#x3D;area&#x60; setting. If you use the &#x60;fallback&#x3D;any&#x60; setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.  For privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the &#x60;fallback&#x3D;singleWifi&#x60; setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.  (optional)
     * @param desired Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @param xRequestID ID used for correlating customer requests within HERE services. Used for logging and error reporting. Can be any string, but UUID is recommended. It will be echoed in the response.  (optional)
     * @param required Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value &#x60;altitude&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully and a WGS-84 compliant geocoordinate location estimate was included in the response. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is malformed. The URL query parameters or the JSON POST body in the request is invalid. Check the message in the response for additional troubleshooting information.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The values provided in the request cannot produce any content for the response. The location of the WLANs and cells in the request is unknown or the locations of the radio measurements are so widely scattered that the location cannot be determined. Make sure that the network measurements are correct and consistent. Try allowing fallbacks &#x60;area&#x60; or &#x60;any&#x60; for cell positioning and &#x60;singleWifi&#x60; for WLAN positioning.  </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. Only POST is supported. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 413 </td><td> Too large request. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 414 </td><td> Too long URI. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Invalid request content type. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected server error has occurred, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable, try again later. </td><td>  * X-Correlation-ID -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postLocateAsync(Locate locate, Integer confidence, String contentEncoding, List<String> fallback, List<String> desired, String xRequestID, List<String> required, final ApiCallback<PostLocate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postLocateValidateBeforeCall(locate, confidence, contentEncoding, fallback, desired, xRequestID, required, _callback);
        Type localVarReturnType = new TypeToken<PostLocate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
