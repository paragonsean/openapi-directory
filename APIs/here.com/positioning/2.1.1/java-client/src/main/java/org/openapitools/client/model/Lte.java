/*
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LteLocalId;
import org.openapitools.client.model.LteNmr;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LTE measurement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:37.764847-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Lte {
  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private LteLocalId localId;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private Integer mcc;

  public static final String SERIALIZED_NAME_MNC = "mnc";
  @SerializedName(SERIALIZED_NAME_MNC)
  private Integer mnc;

  public static final String SERIALIZED_NAME_NMR = "nmr";
  @SerializedName(SERIALIZED_NAME_NMR)
  private List<LteNmr> nmr = new ArrayList<>();

  public static final String SERIALIZED_NAME_RSRP = "rsrp";
  @SerializedName(SERIALIZED_NAME_RSRP)
  private Integer rsrp;

  public static final String SERIALIZED_NAME_RSRQ = "rsrq";
  @SerializedName(SERIALIZED_NAME_RSRQ)
  private BigDecimal rsrq;

  public static final String SERIALIZED_NAME_TA = "ta";
  @SerializedName(SERIALIZED_NAME_TA)
  private Integer ta;

  public static final String SERIALIZED_NAME_TAC = "tac";
  @SerializedName(SERIALIZED_NAME_TAC)
  private Integer tac;

  public Lte() {
  }

  public Lte cid(Integer cid) {
    this.cid = cid;
    return this;
  }

  /**
   * E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 
   * minimum: 0
   * maximum: 268435455
   * @return cid
   */
  @javax.annotation.Nonnull
  public Integer getCid() {
    return cid;
  }

  public void setCid(Integer cid) {
    this.cid = cid;
  }


  public Lte localId(LteLocalId localId) {
    this.localId = localId;
    return this;
  }

  /**
   * Get localId
   * @return localId
   */
  @javax.annotation.Nullable
  public LteLocalId getLocalId() {
    return localId;
  }

  public void setLocalId(LteLocalId localId) {
    this.localId = localId;
  }


  public Lte mcc(Integer mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 
   * minimum: 200
   * maximum: 999
   * @return mcc
   */
  @javax.annotation.Nonnull
  public Integer getMcc() {
    return mcc;
  }

  public void setMcc(Integer mcc) {
    this.mcc = mcc;
  }


  public Lte mnc(Integer mnc) {
    this.mnc = mnc;
    return this;
  }

  /**
   * Mobile Network Code (MNC).
   * minimum: 0
   * maximum: 999
   * @return mnc
   */
  @javax.annotation.Nonnull
  public Integer getMnc() {
    return mnc;
  }

  public void setMnc(Integer mnc) {
    this.mnc = mnc;
  }


  public Lte nmr(List<LteNmr> nmr) {
    this.nmr = nmr;
    return this;
  }

  public Lte addNmrItem(LteNmr nmrItem) {
    if (this.nmr == null) {
      this.nmr = new ArrayList<>();
    }
    this.nmr.add(nmrItem);
    return this;
  }

  /**
   * LTE Network measurements
   * @return nmr
   */
  @javax.annotation.Nullable
  public List<LteNmr> getNmr() {
    return nmr;
  }

  public void setNmr(List<LteNmr> nmr) {
    this.nmr = nmr;
  }


  public Lte rsrp(Integer rsrp) {
    this.rsrp = rsrp;
    return this;
  }

  /**
   * Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 
   * minimum: -140
   * maximum: -44
   * @return rsrp
   */
  @javax.annotation.Nullable
  public Integer getRsrp() {
    return rsrp;
  }

  public void setRsrp(Integer rsrp) {
    this.rsrp = rsrp;
  }


  public Lte rsrq(BigDecimal rsrq) {
    this.rsrq = rsrq;
    return this;
  }

  /**
   * Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 
   * minimum: -19.5
   * maximum: -3
   * @return rsrq
   */
  @javax.annotation.Nullable
  public BigDecimal getRsrq() {
    return rsrq;
  }

  public void setRsrq(BigDecimal rsrq) {
    this.rsrq = rsrq;
  }


  public Lte ta(Integer ta) {
    this.ta = ta;
    return this;
  }

  /**
   * Timing Advance. Expressed in the units of 16*Ts (16 Basic time units) &#x3D; 16/(15000*2048) seconds ~ 156meters. For reference see 3GPP TS 36.213 and 36.211. 
   * minimum: 0
   * maximum: 1282
   * @return ta
   */
  @javax.annotation.Nullable
  public Integer getTa() {
    return ta;
  }

  public void setTa(Integer ta) {
    this.ta = ta;
  }


  public Lte tac(Integer tac) {
    this.tac = tac;
    return this;
  }

  /**
   * Tracking Area Code (TAC)
   * minimum: 0
   * maximum: 65535
   * @return tac
   */
  @javax.annotation.Nullable
  public Integer getTac() {
    return tac;
  }

  public void setTac(Integer tac) {
    this.tac = tac;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lte lte = (Lte) o;
    return Objects.equals(this.cid, lte.cid) &&
        Objects.equals(this.localId, lte.localId) &&
        Objects.equals(this.mcc, lte.mcc) &&
        Objects.equals(this.mnc, lte.mnc) &&
        Objects.equals(this.nmr, lte.nmr) &&
        Objects.equals(this.rsrp, lte.rsrp) &&
        Objects.equals(this.rsrq, lte.rsrq) &&
        Objects.equals(this.ta, lte.ta) &&
        Objects.equals(this.tac, lte.tac);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cid, localId, mcc, mnc, nmr, rsrp, rsrq, ta, tac);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lte {\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
    sb.append("    nmr: ").append(toIndentedString(nmr)).append("\n");
    sb.append("    rsrp: ").append(toIndentedString(rsrp)).append("\n");
    sb.append("    rsrq: ").append(toIndentedString(rsrq)).append("\n");
    sb.append("    ta: ").append(toIndentedString(ta)).append("\n");
    sb.append("    tac: ").append(toIndentedString(tac)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cid");
    openapiFields.add("localId");
    openapiFields.add("mcc");
    openapiFields.add("mnc");
    openapiFields.add("nmr");
    openapiFields.add("rsrp");
    openapiFields.add("rsrq");
    openapiFields.add("ta");
    openapiFields.add("tac");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cid");
    openapiRequiredFields.add("mcc");
    openapiRequiredFields.add("mnc");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Lte
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Lte.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Lte is not found in the empty JSON string", Lte.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Lte.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Lte` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Lte.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `localId`
      if (jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) {
        LteLocalId.validateJsonElement(jsonObj.get("localId"));
      }
      if (jsonObj.get("nmr") != null && !jsonObj.get("nmr").isJsonNull()) {
        JsonArray jsonArraynmr = jsonObj.getAsJsonArray("nmr");
        if (jsonArraynmr != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nmr").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nmr` to be an array in the JSON string but got `%s`", jsonObj.get("nmr").toString()));
          }

          // validate the optional field `nmr` (array)
          for (int i = 0; i < jsonArraynmr.size(); i++) {
            LteNmr.validateJsonElement(jsonArraynmr.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Lte.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Lte' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Lte> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Lte.class));

       return (TypeAdapter<T>) new TypeAdapter<Lte>() {
           @Override
           public void write(JsonWriter out, Lte value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Lte read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Lte given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Lte
   * @throws IOException if the JSON string is invalid with respect to Lte
   */
  public static Lte fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Lte.class);
  }

  /**
   * Convert an instance of Lte to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

