/*
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LTE Network measurement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:37.764847-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LteNmr {
  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_EARFCN = "earfcn";
  @SerializedName(SERIALIZED_NAME_EARFCN)
  private Integer earfcn;

  public static final String SERIALIZED_NAME_PCI = "pci";
  @SerializedName(SERIALIZED_NAME_PCI)
  private Integer pci;

  public static final String SERIALIZED_NAME_RSRP = "rsrp";
  @SerializedName(SERIALIZED_NAME_RSRP)
  private Integer rsrp;

  public static final String SERIALIZED_NAME_RSRQ = "rsrq";
  @SerializedName(SERIALIZED_NAME_RSRQ)
  private BigDecimal rsrq;

  public LteNmr() {
  }

  public LteNmr cid(Integer cid) {
    this.cid = cid;
    return this;
  }

  /**
   * E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 
   * minimum: 0
   * maximum: 268435455
   * @return cid
   */
  @javax.annotation.Nullable
  public Integer getCid() {
    return cid;
  }

  public void setCid(Integer cid) {
    this.cid = cid;
  }


  public LteNmr earfcn(Integer earfcn) {
    this.earfcn = earfcn;
    return this;
  }

  /**
   * Evolved Absolute Radio Frequency Channel (E-ARFCN)
   * minimum: 0
   * maximum: 262143
   * @return earfcn
   */
  @javax.annotation.Nonnull
  public Integer getEarfcn() {
    return earfcn;
  }

  public void setEarfcn(Integer earfcn) {
    this.earfcn = earfcn;
  }


  public LteNmr pci(Integer pci) {
    this.pci = pci;
    return this;
  }

  /**
   * Physical Cell Identity (PCI)
   * minimum: 0
   * maximum: 503
   * @return pci
   */
  @javax.annotation.Nonnull
  public Integer getPci() {
    return pci;
  }

  public void setPci(Integer pci) {
    this.pci = pci;
  }


  public LteNmr rsrp(Integer rsrp) {
    this.rsrp = rsrp;
    return this;
  }

  /**
   * Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 
   * minimum: -140
   * maximum: -44
   * @return rsrp
   */
  @javax.annotation.Nullable
  public Integer getRsrp() {
    return rsrp;
  }

  public void setRsrp(Integer rsrp) {
    this.rsrp = rsrp;
  }


  public LteNmr rsrq(BigDecimal rsrq) {
    this.rsrq = rsrq;
    return this;
  }

  /**
   * Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 
   * minimum: -19.5
   * maximum: -3
   * @return rsrq
   */
  @javax.annotation.Nullable
  public BigDecimal getRsrq() {
    return rsrq;
  }

  public void setRsrq(BigDecimal rsrq) {
    this.rsrq = rsrq;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LteNmr lteNmr = (LteNmr) o;
    return Objects.equals(this.cid, lteNmr.cid) &&
        Objects.equals(this.earfcn, lteNmr.earfcn) &&
        Objects.equals(this.pci, lteNmr.pci) &&
        Objects.equals(this.rsrp, lteNmr.rsrp) &&
        Objects.equals(this.rsrq, lteNmr.rsrq);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cid, earfcn, pci, rsrp, rsrq);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LteNmr {\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    earfcn: ").append(toIndentedString(earfcn)).append("\n");
    sb.append("    pci: ").append(toIndentedString(pci)).append("\n");
    sb.append("    rsrp: ").append(toIndentedString(rsrp)).append("\n");
    sb.append("    rsrq: ").append(toIndentedString(rsrq)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cid");
    openapiFields.add("earfcn");
    openapiFields.add("pci");
    openapiFields.add("rsrp");
    openapiFields.add("rsrq");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("earfcn");
    openapiRequiredFields.add("pci");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LteNmr
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LteNmr.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LteNmr is not found in the empty JSON string", LteNmr.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LteNmr.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LteNmr` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LteNmr.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LteNmr.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LteNmr' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LteNmr> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LteNmr.class));

       return (TypeAdapter<T>) new TypeAdapter<LteNmr>() {
           @Override
           public void write(JsonWriter out, LteNmr value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LteNmr read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LteNmr given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LteNmr
   * @throws IOException if the JSON string is invalid with respect to LteNmr
   */
  public static LteNmr fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LteNmr.class);
  }

  /**
   * Convert an instance of LteNmr to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

