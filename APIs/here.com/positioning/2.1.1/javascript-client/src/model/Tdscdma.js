/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TdscdmaLocalId from './TdscdmaLocalId';
import TdscdmaNmr from './TdscdmaNmr';

/**
 * The Tdscdma model module.
 * @module model/Tdscdma
 * @version 2.1.1
 */
class Tdscdma {
    /**
     * Constructs a new <code>Tdscdma</code>.
     * TD-SCDMA measurement.
     * @alias module:model/Tdscdma
     * @param cid {Number} UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 
     * @param mcc {Number} Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 
     * @param mnc {Number} Mobile Network Code (MNC).
     */
    constructor(cid, mcc, mnc) { 
        
        Tdscdma.initialize(this, cid, mcc, mnc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cid, mcc, mnc) { 
        obj['cid'] = cid;
        obj['mcc'] = mcc;
        obj['mnc'] = mnc;
    }

    /**
     * Constructs a <code>Tdscdma</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tdscdma} obj Optional instance to populate.
     * @return {module:model/Tdscdma} The populated <code>Tdscdma</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tdscdma();

            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'Number');
            }
            if (data.hasOwnProperty('lac')) {
                obj['lac'] = ApiClient.convertToType(data['lac'], 'Number');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = TdscdmaLocalId.constructFromObject(data['localId']);
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'Number');
            }
            if (data.hasOwnProperty('mnc')) {
                obj['mnc'] = ApiClient.convertToType(data['mnc'], 'Number');
            }
            if (data.hasOwnProperty('nmr')) {
                obj['nmr'] = ApiClient.convertToType(data['nmr'], [TdscdmaNmr]);
            }
            if (data.hasOwnProperty('pathloss')) {
                obj['pathloss'] = ApiClient.convertToType(data['pathloss'], 'Number');
            }
            if (data.hasOwnProperty('rscp')) {
                obj['rscp'] = ApiClient.convertToType(data['rscp'], 'Number');
            }
            if (data.hasOwnProperty('ta')) {
                obj['ta'] = ApiClient.convertToType(data['ta'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tdscdma</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tdscdma</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tdscdma.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `localId`
        if (data['localId']) { // data not null
          TdscdmaLocalId.validateJSON(data['localId']);
        }
        if (data['nmr']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nmr'])) {
                throw new Error("Expected the field `nmr` to be an array in the JSON data but got " + data['nmr']);
            }
            // validate the optional field `nmr` (array)
            for (const item of data['nmr']) {
                TdscdmaNmr.validateJSON(item);
            };
        }

        return true;
    }


}

Tdscdma.RequiredProperties = ["cid", "mcc", "mnc"];

/**
 * UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 
 * @member {Number} cid
 */
Tdscdma.prototype['cid'] = undefined;

/**
 * Location Area Code (LAC). Note, value 65534 is invalid.
 * @member {Number} lac
 */
Tdscdma.prototype['lac'] = undefined;

/**
 * @member {module:model/TdscdmaLocalId} localId
 */
Tdscdma.prototype['localId'] = undefined;

/**
 * Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 
 * @member {Number} mcc
 */
Tdscdma.prototype['mcc'] = undefined;

/**
 * Mobile Network Code (MNC).
 * @member {Number} mnc
 */
Tdscdma.prototype['mnc'] = undefined;

/**
 * TD-SCDMA Network measurements. Maximum of 8 distinct uarfcn frequencies.
 * @member {Array.<module:model/TdscdmaNmr>} nmr
 */
Tdscdma.prototype['nmr'] = undefined;

/**
 * UTRAN pathloss (dBm)
 * @member {Number} pathloss
 */
Tdscdma.prototype['pathloss'] = undefined;

/**
 * Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 
 * @member {Number} rscp
 */
Tdscdma.prototype['rscp'] = undefined;

/**
 * Timing advance (TA). Round-Trip distance presented in the units of 4*c/7.68e6 ~156 meters. That is, the scaling factor is 4 times the chip length at chip rate of 7.68 Mchips/s. Note that at chip rates 1.28 Mchips/s and 3.84 Mchips/s you need to scale according to chip length of 7.68 Mchips/s, that is, multiply by 6 or 2 if needed. 
 * @member {Number} ta
 */
Tdscdma.prototype['ta'] = undefined;






export default Tdscdma;

