/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LteNmr model module.
 * @module model/LteNmr
 * @version 2.1.1
 */
class LteNmr {
    /**
     * Constructs a new <code>LteNmr</code>.
     * LTE Network measurement
     * @alias module:model/LteNmr
     * @param earfcn {Number} Evolved Absolute Radio Frequency Channel (E-ARFCN)
     * @param pci {Number} Physical Cell Identity (PCI)
     */
    constructor(earfcn, pci) { 
        
        LteNmr.initialize(this, earfcn, pci);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, earfcn, pci) { 
        obj['earfcn'] = earfcn;
        obj['pci'] = pci;
    }

    /**
     * Constructs a <code>LteNmr</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LteNmr} obj Optional instance to populate.
     * @return {module:model/LteNmr} The populated <code>LteNmr</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LteNmr();

            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'Number');
            }
            if (data.hasOwnProperty('earfcn')) {
                obj['earfcn'] = ApiClient.convertToType(data['earfcn'], 'Number');
            }
            if (data.hasOwnProperty('pci')) {
                obj['pci'] = ApiClient.convertToType(data['pci'], 'Number');
            }
            if (data.hasOwnProperty('rsrp')) {
                obj['rsrp'] = ApiClient.convertToType(data['rsrp'], 'Number');
            }
            if (data.hasOwnProperty('rsrq')) {
                obj['rsrq'] = ApiClient.convertToType(data['rsrq'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LteNmr</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LteNmr</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LteNmr.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

LteNmr.RequiredProperties = ["earfcn", "pci"];

/**
 * E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 
 * @member {Number} cid
 */
LteNmr.prototype['cid'] = undefined;

/**
 * Evolved Absolute Radio Frequency Channel (E-ARFCN)
 * @member {Number} earfcn
 */
LteNmr.prototype['earfcn'] = undefined;

/**
 * Physical Cell Identity (PCI)
 * @member {Number} pci
 */
LteNmr.prototype['pci'] = undefined;

/**
 * Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 
 * @member {Number} rsrp
 */
LteNmr.prototype['rsrp'] = undefined;

/**
 * Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 
 * @member {Number} rsrq
 */
LteNmr.prototype['rsrq'] = undefined;






export default LteNmr;

