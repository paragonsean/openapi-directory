/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cdma from './Cdma';
import ClientInfo from './ClientInfo';
import Gsm from './Gsm';
import Lte from './Lte';
import Tdscdma from './Tdscdma';
import Wcdma from './Wcdma';
import WlanLocate from './WlanLocate';

/**
 * The Locate model module.
 * @module model/Locate
 * @version 2.1.1
 */
class Locate {
    /**
     * Constructs a new <code>Locate</code>.
     * Object wrapping the location data submitted in a request for a position. At least one of &#x60;gsm&#x60;, &#x60;wcdma&#x60;, &#x60;tdscdma&#x60;, &#x60;lte&#x60;, &#x60;cdma&#x60;, or &#x60;wlan&#x60; elements is required. Array elements should be unique within the request. 
     * @alias module:model/Locate
     */
    constructor() { 
        
        Locate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Locate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Locate} obj Optional instance to populate.
     * @return {module:model/Locate} The populated <code>Locate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Locate();

            if (data.hasOwnProperty('cdma')) {
                obj['cdma'] = ApiClient.convertToType(data['cdma'], [Cdma]);
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = ClientInfo.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('gsm')) {
                obj['gsm'] = ApiClient.convertToType(data['gsm'], [Gsm]);
            }
            if (data.hasOwnProperty('lte')) {
                obj['lte'] = ApiClient.convertToType(data['lte'], [Lte]);
            }
            if (data.hasOwnProperty('tdscdma')) {
                obj['tdscdma'] = ApiClient.convertToType(data['tdscdma'], [Tdscdma]);
            }
            if (data.hasOwnProperty('wcdma')) {
                obj['wcdma'] = ApiClient.convertToType(data['wcdma'], [Wcdma]);
            }
            if (data.hasOwnProperty('wlan')) {
                obj['wlan'] = ApiClient.convertToType(data['wlan'], [WlanLocate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Locate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Locate</code>.
     */
    static validateJSON(data) {
        if (data['cdma']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cdma'])) {
                throw new Error("Expected the field `cdma` to be an array in the JSON data but got " + data['cdma']);
            }
            // validate the optional field `cdma` (array)
            for (const item of data['cdma']) {
                Cdma.validateJSON(item);
            };
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          ClientInfo.validateJSON(data['client']);
        }
        if (data['gsm']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gsm'])) {
                throw new Error("Expected the field `gsm` to be an array in the JSON data but got " + data['gsm']);
            }
            // validate the optional field `gsm` (array)
            for (const item of data['gsm']) {
                Gsm.validateJSON(item);
            };
        }
        if (data['lte']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lte'])) {
                throw new Error("Expected the field `lte` to be an array in the JSON data but got " + data['lte']);
            }
            // validate the optional field `lte` (array)
            for (const item of data['lte']) {
                Lte.validateJSON(item);
            };
        }
        if (data['tdscdma']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tdscdma'])) {
                throw new Error("Expected the field `tdscdma` to be an array in the JSON data but got " + data['tdscdma']);
            }
            // validate the optional field `tdscdma` (array)
            for (const item of data['tdscdma']) {
                Tdscdma.validateJSON(item);
            };
        }
        if (data['wcdma']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['wcdma'])) {
                throw new Error("Expected the field `wcdma` to be an array in the JSON data but got " + data['wcdma']);
            }
            // validate the optional field `wcdma` (array)
            for (const item of data['wcdma']) {
                Wcdma.validateJSON(item);
            };
        }
        if (data['wlan']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['wlan'])) {
                throw new Error("Expected the field `wlan` to be an array in the JSON data but got " + data['wlan']);
            }
            // validate the optional field `wlan` (array)
            for (const item of data['wlan']) {
                WlanLocate.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * CDMA cells (CDMA2000)
 * @member {Array.<module:model/Cdma>} cdma
 */
Locate.prototype['cdma'] = undefined;

/**
 * @member {module:model/ClientInfo} client
 */
Locate.prototype['client'] = undefined;

/**
 * GSM cells (GERAN)
 * @member {Array.<module:model/Gsm>} gsm
 */
Locate.prototype['gsm'] = undefined;

/**
 * LTE cells (E-UTRA, 4G)
 * @member {Array.<module:model/Lte>} lte
 */
Locate.prototype['lte'] = undefined;

/**
 * TD-SCDMA cells (UTRA-TDD, 3G UMTS TDD)
 * @member {Array.<module:model/Tdscdma>} tdscdma
 */
Locate.prototype['tdscdma'] = undefined;

/**
 * WCDMA cells (UTRA-FDD, 3G UMTS)
 * @member {Array.<module:model/Wcdma>} wcdma
 */
Locate.prototype['wcdma'] = undefined;

/**
 * WLAN access positions. For privacy reasons positioning based on a single WLAN AP is not possible; there has to be at least one other matching wlan or cell. Alternatively, you can allow fallbacks to less accurate single WLAN AP location estimates by using the setting `fallback=singleWifi`. 
 * @member {Array.<module:model/WlanLocate>} wlan
 */
Locate.prototype['wlan'] = undefined;






export default Locate;

