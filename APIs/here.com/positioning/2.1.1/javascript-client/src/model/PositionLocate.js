/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PositionLocate model module.
 * @module model/PositionLocate
 * @version 2.1.1
 */
class PositionLocate {
    /**
     * Constructs a new <code>PositionLocate</code>.
     * Object containing information on a location where a measurement was taken.
     * @alias module:model/PositionLocate
     * @param accuracy {Number} Uncertainty circle radius in meters (degree of confidence according to the `confidence` parameter).
     * @param lat {Number} Latitude in WGS-84 format, decimal representation ranging from -90 to 90.
     * @param lng {Number} Longitude in WGS-84 format, decimal representation ranging from -180 to 180.
     */
    constructor(accuracy, lat, lng) { 
        
        PositionLocate.initialize(this, accuracy, lat, lng);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accuracy, lat, lng) { 
        obj['accuracy'] = accuracy;
        obj['lat'] = lat;
        obj['lng'] = lng;
    }

    /**
     * Constructs a <code>PositionLocate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PositionLocate} obj Optional instance to populate.
     * @return {module:model/PositionLocate} The populated <code>PositionLocate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PositionLocate();

            if (data.hasOwnProperty('accuracy')) {
                obj['accuracy'] = ApiClient.convertToType(data['accuracy'], 'Number');
            }
            if (data.hasOwnProperty('alt')) {
                obj['alt'] = ApiClient.convertToType(data['alt'], 'Number');
            }
            if (data.hasOwnProperty('altAccuracy')) {
                obj['altAccuracy'] = ApiClient.convertToType(data['altAccuracy'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PositionLocate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PositionLocate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PositionLocate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

PositionLocate.RequiredProperties = ["accuracy", "lat", "lng"];

/**
 * Uncertainty circle radius in meters (degree of confidence according to the `confidence` parameter).
 * @member {Number} accuracy
 */
PositionLocate.prototype['accuracy'] = undefined;

/**
 * Altitude in meters (referenced to the WGS-84 ellipsoid) negative or positive.
 * @member {Number} alt
 */
PositionLocate.prototype['alt'] = undefined;

/**
 * Uncertainty of the altitude estimate in meters (degree of confidence according to the `confidence` parameter). This field superceeds old `altaccuracy`. 
 * @member {Number} altAccuracy
 */
PositionLocate.prototype['altAccuracy'] = undefined;

/**
 * Latitude in WGS-84 format, decimal representation ranging from -90 to 90.
 * @member {Number} lat
 */
PositionLocate.prototype['lat'] = undefined;

/**
 * Longitude in WGS-84 format, decimal representation ranging from -180 to 180.
 * @member {Number} lng
 */
PositionLocate.prototype['lng'] = undefined;






export default PositionLocate;

