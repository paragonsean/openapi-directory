/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CdmaNmr model module.
 * @module model/CdmaNmr
 * @version 2.1.1
 */
class CdmaNmr {
    /**
     * Constructs a new <code>CdmaNmr</code>.
     * CDMA Network measurement
     * @alias module:model/CdmaNmr
     * @param channel {Number} CDMA channel frequency
     * @param pnOffset {Number} Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell. 
     */
    constructor(channel, pnOffset) { 
        
        CdmaNmr.initialize(this, channel, pnOffset);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, pnOffset) { 
        obj['channel'] = channel;
        obj['pnOffset'] = pnOffset;
    }

    /**
     * Constructs a <code>CdmaNmr</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CdmaNmr} obj Optional instance to populate.
     * @return {module:model/CdmaNmr} The populated <code>CdmaNmr</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CdmaNmr();

            if (data.hasOwnProperty('bsid')) {
                obj['bsid'] = ApiClient.convertToType(data['bsid'], 'Number');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'Number');
            }
            if (data.hasOwnProperty('pilotPower')) {
                obj['pilotPower'] = ApiClient.convertToType(data['pilotPower'], 'Number');
            }
            if (data.hasOwnProperty('pnOffset')) {
                obj['pnOffset'] = ApiClient.convertToType(data['pnOffset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CdmaNmr</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CdmaNmr</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CdmaNmr.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

CdmaNmr.RequiredProperties = ["channel", "pnOffset"];

/**
 * Base Station ID (CDMA BSID, BID)
 * @member {Number} bsid
 */
CdmaNmr.prototype['bsid'] = undefined;

/**
 * CDMA channel frequency
 * @member {Number} channel
 */
CdmaNmr.prototype['channel'] = undefined;

/**
 * Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49. 
 * @member {Number} pilotPower
 */
CdmaNmr.prototype['pilotPower'] = undefined;

/**
 * Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell. 
 * @member {Number} pnOffset
 */
CdmaNmr.prototype['pnOffset'] = undefined;






export default CdmaNmr;

