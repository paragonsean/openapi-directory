/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GsmLocalId model module.
 * @module model/GsmLocalId
 * @version 2.1.1
 */
class GsmLocalId {
    /**
     * Constructs a new <code>GsmLocalId</code>.
     * Local identification parameters of GSM serving cell
     * @alias module:model/GsmLocalId
     * @param bcch {Number} Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)
     * @param bsic {Number} Base Station Identity Code (BSIC, for instance, color code)
     */
    constructor(bcch, bsic) { 
        
        GsmLocalId.initialize(this, bcch, bsic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bcch, bsic) { 
        obj['bcch'] = bcch;
        obj['bsic'] = bsic;
    }

    /**
     * Constructs a <code>GsmLocalId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GsmLocalId} obj Optional instance to populate.
     * @return {module:model/GsmLocalId} The populated <code>GsmLocalId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GsmLocalId();

            if (data.hasOwnProperty('bcch')) {
                obj['bcch'] = ApiClient.convertToType(data['bcch'], 'Number');
            }
            if (data.hasOwnProperty('bsic')) {
                obj['bsic'] = ApiClient.convertToType(data['bsic'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GsmLocalId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GsmLocalId</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GsmLocalId.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

GsmLocalId.RequiredProperties = ["bcch", "bsic"];

/**
 * Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)
 * @member {Number} bcch
 */
GsmLocalId.prototype['bcch'] = undefined;

/**
 * Base Station Identity Code (BSIC, for instance, color code)
 * @member {Number} bsic
 */
GsmLocalId.prototype['bsic'] = undefined;






export default GsmLocalId;

