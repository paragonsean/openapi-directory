/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CdmaLocalId from './CdmaLocalId';
import CdmaNmr from './CdmaNmr';

/**
 * The Cdma model module.
 * @module model/Cdma
 * @version 2.1.1
 */
class Cdma {
    /**
     * Constructs a new <code>Cdma</code>.
     * CDMA measurement
     * @alias module:model/Cdma
     * @param bsid {Number} Base Station ID (CDMA BSID, BID)
     * @param nid {Number} Network ID (NID)
     * @param sid {Number} System ID (SID)
     */
    constructor(bsid, nid, sid) { 
        
        Cdma.initialize(this, bsid, nid, sid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bsid, nid, sid) { 
        obj['bsid'] = bsid;
        obj['nid'] = nid;
        obj['sid'] = sid;
    }

    /**
     * Constructs a <code>Cdma</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cdma} obj Optional instance to populate.
     * @return {module:model/Cdma} The populated <code>Cdma</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cdma();

            if (data.hasOwnProperty('baseLat')) {
                obj['baseLat'] = ApiClient.convertToType(data['baseLat'], 'Number');
            }
            if (data.hasOwnProperty('baseLng')) {
                obj['baseLng'] = ApiClient.convertToType(data['baseLng'], 'Number');
            }
            if (data.hasOwnProperty('bsid')) {
                obj['bsid'] = ApiClient.convertToType(data['bsid'], 'Number');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = CdmaLocalId.constructFromObject(data['localId']);
            }
            if (data.hasOwnProperty('nid')) {
                obj['nid'] = ApiClient.convertToType(data['nid'], 'Number');
            }
            if (data.hasOwnProperty('nmr')) {
                obj['nmr'] = ApiClient.convertToType(data['nmr'], [CdmaNmr]);
            }
            if (data.hasOwnProperty('pilotPower')) {
                obj['pilotPower'] = ApiClient.convertToType(data['pilotPower'], 'Number');
            }
            if (data.hasOwnProperty('rz')) {
                obj['rz'] = ApiClient.convertToType(data['rz'], 'Number');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cdma</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cdma</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cdma.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `localId`
        if (data['localId']) { // data not null
          CdmaLocalId.validateJSON(data['localId']);
        }
        if (data['nmr']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nmr'])) {
                throw new Error("Expected the field `nmr` to be an array in the JSON data but got " + data['nmr']);
            }
            // validate the optional field `nmr` (array)
            for (const item of data['nmr']) {
                CdmaNmr.validateJSON(item);
            };
        }

        return true;
    }


}

Cdma.RequiredProperties = ["bsid", "nid", "sid"];

/**
 * Base station latitude
 * @member {Number} baseLat
 */
Cdma.prototype['baseLat'] = undefined;

/**
 * Base station longitude
 * @member {Number} baseLng
 */
Cdma.prototype['baseLng'] = undefined;

/**
 * Base Station ID (CDMA BSID, BID)
 * @member {Number} bsid
 */
Cdma.prototype['bsid'] = undefined;

/**
 * @member {module:model/CdmaLocalId} localId
 */
Cdma.prototype['localId'] = undefined;

/**
 * Network ID (NID)
 * @member {Number} nid
 */
Cdma.prototype['nid'] = undefined;

/**
 * CDMA Network measurements
 * @member {Array.<module:model/CdmaNmr>} nmr
 */
Cdma.prototype['nmr'] = undefined;

/**
 * Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49. 
 * @member {Number} pilotPower
 */
Cdma.prototype['pilotPower'] = undefined;

/**
 * CDMA Registration Zone (RZ)
 * @member {Number} rz
 */
Cdma.prototype['rz'] = undefined;

/**
 * System ID (SID)
 * @member {Number} sid
 */
Cdma.prototype['sid'] = undefined;






export default Cdma;

