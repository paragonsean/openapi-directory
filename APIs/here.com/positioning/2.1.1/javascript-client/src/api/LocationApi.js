/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthError from '../model/AuthError';
import Error from '../model/Error';
import Locate from '../model/Locate';
import PostLocate200Response from '../model/PostLocate200Response';

/**
* Location service.
* @module api/LocationApi
* @version 2.1.1
*/
export default class LocationApi {

    /**
    * Constructs a new LocationApi. 
    * @alias module:api/LocationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postLocate operation.
     * @callback module:api/LocationApi~postLocateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostLocate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Location query
     * Request WGS-84 compliant geocoordinates for a location based on 2G/3G/4G cell and/or WLAN measurements.
     * @param {module:model/Locate} locate Request body containing cell and/or WLAN measurement data. Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org. 
     * @param {Object} opts Optional parameters
     * @param {Number} [confidence = 68)] Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level). 
     * @param {module:model/String} [contentEncoding] Indicates that the data in the body is gzip-encoded.
     * @param {Array.<module:model/String>} [fallback] Acceptable fallback options for cell and WLAN positioning. Values `area` and `any` apply to cell based positioning, and value `singleWifi` applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both `area` and `any` are specified, then `area` is ignored.  By default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the `fallback=area` setting. If you use the `fallback=any` setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.  For privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the `fallback=singleWifi` setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger. 
     * @param {Array.<module:model/String>} [desired] Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value `altitude`. 
     * @param {String} [xRequestID] ID used for correlating customer requests within HERE services. Used for logging and error reporting. Can be any string, but UUID is recommended. It will be echoed in the response. 
     * @param {Array.<module:model/String>} [required] Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value `altitude`. 
     * @param {module:api/LocationApi~postLocateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostLocate200Response}
     */
    postLocate(locate, opts, callback) {
      opts = opts || {};
      let postBody = locate;
      // verify the required parameter 'locate' is set
      if (locate === undefined || locate === null) {
        throw new Error("Missing the required parameter 'locate' when calling postLocate");
      }

      let pathParams = {
      };
      let queryParams = {
        'confidence': opts['confidence'],
        'fallback': this.apiClient.buildCollectionParam(opts['fallback'], 'csv'),
        'desired': this.apiClient.buildCollectionParam(opts['desired'], 'csv'),
        'required': this.apiClient.buildCollectionParam(opts['required'], 'csv')
      };
      let headerParams = {
        'Content-Encoding': opts['contentEncoding'],
        'X-Request-ID': opts['xRequestID']
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'AccessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostLocate200Response;
      return this.apiClient.callApi(
        '/locate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
