/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HereNetworkPositioningApiV2);
  }
}(this, function(expect, HereNetworkPositioningApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HereNetworkPositioningApiV2.Tdscdma();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Tdscdma', function() {
    it('should create an instance of Tdscdma', function() {
      // uncomment below and update the code to test Tdscdma
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be.a(HereNetworkPositioningApiV2.Tdscdma);
    });

    it('should have the property cid (base name: "cid")', function() {
      // uncomment below and update the code to test the property cid
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property lac (base name: "lac")', function() {
      // uncomment below and update the code to test the property lac
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property localId (base name: "localId")', function() {
      // uncomment below and update the code to test the property localId
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property mcc (base name: "mcc")', function() {
      // uncomment below and update the code to test the property mcc
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property mnc (base name: "mnc")', function() {
      // uncomment below and update the code to test the property mnc
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property nmr (base name: "nmr")', function() {
      // uncomment below and update the code to test the property nmr
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property pathloss (base name: "pathloss")', function() {
      // uncomment below and update the code to test the property pathloss
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property rscp (base name: "rscp")', function() {
      // uncomment below and update the code to test the property rscp
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

    it('should have the property ta (base name: "ta")', function() {
      // uncomment below and update the code to test the property ta
      //var instance = new HereNetworkPositioningApiV2.Tdscdma();
      //expect(instance).to.be();
    });

  });

}));
