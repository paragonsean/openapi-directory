/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWcdmaNmr.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWcdmaNmr::OAIWcdmaNmr(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWcdmaNmr::OAIWcdmaNmr() {
    this->initializeModel();
}

OAIWcdmaNmr::~OAIWcdmaNmr() {}

void OAIWcdmaNmr::initializeModel() {

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_pathloss_isSet = false;
    m_pathloss_isValid = false;

    m_psc_isSet = false;
    m_psc_isValid = false;

    m_rscp_isSet = false;
    m_rscp_isValid = false;

    m_uarfcndl_isSet = false;
    m_uarfcndl_isValid = false;
}

void OAIWcdmaNmr::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWcdmaNmr::fromJsonObject(QJsonObject json) {

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_pathloss_isValid = ::OpenAPI::fromJsonValue(m_pathloss, json[QString("pathloss")]);
    m_pathloss_isSet = !json[QString("pathloss")].isNull() && m_pathloss_isValid;

    m_psc_isValid = ::OpenAPI::fromJsonValue(m_psc, json[QString("psc")]);
    m_psc_isSet = !json[QString("psc")].isNull() && m_psc_isValid;

    m_rscp_isValid = ::OpenAPI::fromJsonValue(m_rscp, json[QString("rscp")]);
    m_rscp_isSet = !json[QString("rscp")].isNull() && m_rscp_isValid;

    m_uarfcndl_isValid = ::OpenAPI::fromJsonValue(m_uarfcndl, json[QString("uarfcndl")]);
    m_uarfcndl_isSet = !json[QString("uarfcndl")].isNull() && m_uarfcndl_isValid;
}

QString OAIWcdmaNmr::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWcdmaNmr::asJsonObject() const {
    QJsonObject obj;
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_pathloss_isSet) {
        obj.insert(QString("pathloss"), ::OpenAPI::toJsonValue(m_pathloss));
    }
    if (m_psc_isSet) {
        obj.insert(QString("psc"), ::OpenAPI::toJsonValue(m_psc));
    }
    if (m_rscp_isSet) {
        obj.insert(QString("rscp"), ::OpenAPI::toJsonValue(m_rscp));
    }
    if (m_uarfcndl_isSet) {
        obj.insert(QString("uarfcndl"), ::OpenAPI::toJsonValue(m_uarfcndl));
    }
    return obj;
}

qint32 OAIWcdmaNmr::getCid() const {
    return m_cid;
}
void OAIWcdmaNmr::setCid(const qint32 &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIWcdmaNmr::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIWcdmaNmr::is_cid_Valid() const{
    return m_cid_isValid;
}

qint32 OAIWcdmaNmr::getPathloss() const {
    return m_pathloss;
}
void OAIWcdmaNmr::setPathloss(const qint32 &pathloss) {
    m_pathloss = pathloss;
    m_pathloss_isSet = true;
}

bool OAIWcdmaNmr::is_pathloss_Set() const{
    return m_pathloss_isSet;
}

bool OAIWcdmaNmr::is_pathloss_Valid() const{
    return m_pathloss_isValid;
}

qint32 OAIWcdmaNmr::getPsc() const {
    return m_psc;
}
void OAIWcdmaNmr::setPsc(const qint32 &psc) {
    m_psc = psc;
    m_psc_isSet = true;
}

bool OAIWcdmaNmr::is_psc_Set() const{
    return m_psc_isSet;
}

bool OAIWcdmaNmr::is_psc_Valid() const{
    return m_psc_isValid;
}

qint32 OAIWcdmaNmr::getRscp() const {
    return m_rscp;
}
void OAIWcdmaNmr::setRscp(const qint32 &rscp) {
    m_rscp = rscp;
    m_rscp_isSet = true;
}

bool OAIWcdmaNmr::is_rscp_Set() const{
    return m_rscp_isSet;
}

bool OAIWcdmaNmr::is_rscp_Valid() const{
    return m_rscp_isValid;
}

qint32 OAIWcdmaNmr::getUarfcndl() const {
    return m_uarfcndl;
}
void OAIWcdmaNmr::setUarfcndl(const qint32 &uarfcndl) {
    m_uarfcndl = uarfcndl;
    m_uarfcndl_isSet = true;
}

bool OAIWcdmaNmr::is_uarfcndl_Set() const{
    return m_uarfcndl_isSet;
}

bool OAIWcdmaNmr::is_uarfcndl_Valid() const{
    return m_uarfcndl_isValid;
}

bool OAIWcdmaNmr::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pathloss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uarfcndl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWcdmaNmr::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_psc_isValid && m_uarfcndl_isValid && true;
}

} // namespace OpenAPI
