/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITdscdmaNmr.h
 *
 * TD-SCDMA Network measurement
 */

#ifndef OAITdscdmaNmr_H
#define OAITdscdmaNmr_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITdscdmaNmr : public OAIObject {
public:
    OAITdscdmaNmr();
    OAITdscdmaNmr(QString json);
    ~OAITdscdmaNmr() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCellParams() const;
    void setCellParams(const qint32 &cell_params);
    bool is_cell_params_Set() const;
    bool is_cell_params_Valid() const;

    qint32 getCid() const;
    void setCid(const qint32 &cid);
    bool is_cid_Set() const;
    bool is_cid_Valid() const;

    qint32 getPathloss() const;
    void setPathloss(const qint32 &pathloss);
    bool is_pathloss_Set() const;
    bool is_pathloss_Valid() const;

    qint32 getRscp() const;
    void setRscp(const qint32 &rscp);
    bool is_rscp_Set() const;
    bool is_rscp_Valid() const;

    qint32 getUarfcn() const;
    void setUarfcn(const qint32 &uarfcn);
    bool is_uarfcn_Set() const;
    bool is_uarfcn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cell_params;
    bool m_cell_params_isSet;
    bool m_cell_params_isValid;

    qint32 m_cid;
    bool m_cid_isSet;
    bool m_cid_isValid;

    qint32 m_pathloss;
    bool m_pathloss_isSet;
    bool m_pathloss_isValid;

    qint32 m_rscp;
    bool m_rscp_isSet;
    bool m_rscp_isValid;

    qint32 m_uarfcn;
    bool m_uarfcn_isSet;
    bool m_uarfcn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITdscdmaNmr)

#endif // OAITdscdmaNmr_H
