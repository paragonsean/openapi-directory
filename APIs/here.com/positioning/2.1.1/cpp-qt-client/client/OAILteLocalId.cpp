/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILteLocalId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILteLocalId::OAILteLocalId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILteLocalId::OAILteLocalId() {
    this->initializeModel();
}

OAILteLocalId::~OAILteLocalId() {}

void OAILteLocalId::initializeModel() {

    m_earfcn_isSet = false;
    m_earfcn_isValid = false;

    m_pci_isSet = false;
    m_pci_isValid = false;
}

void OAILteLocalId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILteLocalId::fromJsonObject(QJsonObject json) {

    m_earfcn_isValid = ::OpenAPI::fromJsonValue(m_earfcn, json[QString("earfcn")]);
    m_earfcn_isSet = !json[QString("earfcn")].isNull() && m_earfcn_isValid;

    m_pci_isValid = ::OpenAPI::fromJsonValue(m_pci, json[QString("pci")]);
    m_pci_isSet = !json[QString("pci")].isNull() && m_pci_isValid;
}

QString OAILteLocalId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILteLocalId::asJsonObject() const {
    QJsonObject obj;
    if (m_earfcn_isSet) {
        obj.insert(QString("earfcn"), ::OpenAPI::toJsonValue(m_earfcn));
    }
    if (m_pci_isSet) {
        obj.insert(QString("pci"), ::OpenAPI::toJsonValue(m_pci));
    }
    return obj;
}

qint32 OAILteLocalId::getEarfcn() const {
    return m_earfcn;
}
void OAILteLocalId::setEarfcn(const qint32 &earfcn) {
    m_earfcn = earfcn;
    m_earfcn_isSet = true;
}

bool OAILteLocalId::is_earfcn_Set() const{
    return m_earfcn_isSet;
}

bool OAILteLocalId::is_earfcn_Valid() const{
    return m_earfcn_isValid;
}

qint32 OAILteLocalId::getPci() const {
    return m_pci;
}
void OAILteLocalId::setPci(const qint32 &pci) {
    m_pci = pci;
    m_pci_isSet = true;
}

bool OAILteLocalId::is_pci_Set() const{
    return m_pci_isSet;
}

bool OAILteLocalId::is_pci_Valid() const{
    return m_pci_isValid;
}

bool OAILteLocalId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earfcn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pci_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILteLocalId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_earfcn_isValid && m_pci_isValid && true;
}

} // namespace OpenAPI
