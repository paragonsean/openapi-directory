/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIError::getAction() const {
    return m_action;
}
void OAIError::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIError::is_action_Set() const{
    return m_action_isSet;
}

bool OAIError::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIError::getCause() const {
    return m_cause;
}
void OAIError::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIError::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIError::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIError::getCode() const {
    return m_code;
}
void OAIError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIError::getCorrelationId() const {
    return m_correlation_id;
}
void OAIError::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIError::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIError::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QList<OAIErrorDetail> OAIError::getDetails() const {
    return m_details;
}
void OAIError::setDetails(const QList<OAIErrorDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIError::is_details_Set() const{
    return m_details_isSet;
}

bool OAIError::is_details_Valid() const{
    return m_details_isValid;
}

double OAIError::getStatus() const {
    return m_status;
}
void OAIError::setStatus(const double &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIError::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIError::getTitle() const {
    return m_title;
}
void OAIError::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIError::is_title_Set() const{
    return m_title_isSet;
}

bool OAIError::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_cause_isValid && m_code_isValid && m_correlation_id_isValid && m_status_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
