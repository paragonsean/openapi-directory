/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdma.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdma::OAICdma(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdma::OAICdma() {
    this->initializeModel();
}

OAICdma::~OAICdma() {}

void OAICdma::initializeModel() {

    m_base_lat_isSet = false;
    m_base_lat_isValid = false;

    m_base_lng_isSet = false;
    m_base_lng_isValid = false;

    m_bsid_isSet = false;
    m_bsid_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_nid_isSet = false;
    m_nid_isValid = false;

    m_nmr_isSet = false;
    m_nmr_isValid = false;

    m_pilot_power_isSet = false;
    m_pilot_power_isValid = false;

    m_rz_isSet = false;
    m_rz_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;
}

void OAICdma::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdma::fromJsonObject(QJsonObject json) {

    m_base_lat_isValid = ::OpenAPI::fromJsonValue(m_base_lat, json[QString("baseLat")]);
    m_base_lat_isSet = !json[QString("baseLat")].isNull() && m_base_lat_isValid;

    m_base_lng_isValid = ::OpenAPI::fromJsonValue(m_base_lng, json[QString("baseLng")]);
    m_base_lng_isSet = !json[QString("baseLng")].isNull() && m_base_lng_isValid;

    m_bsid_isValid = ::OpenAPI::fromJsonValue(m_bsid, json[QString("bsid")]);
    m_bsid_isSet = !json[QString("bsid")].isNull() && m_bsid_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_nid_isValid = ::OpenAPI::fromJsonValue(m_nid, json[QString("nid")]);
    m_nid_isSet = !json[QString("nid")].isNull() && m_nid_isValid;

    m_nmr_isValid = ::OpenAPI::fromJsonValue(m_nmr, json[QString("nmr")]);
    m_nmr_isSet = !json[QString("nmr")].isNull() && m_nmr_isValid;

    m_pilot_power_isValid = ::OpenAPI::fromJsonValue(m_pilot_power, json[QString("pilotPower")]);
    m_pilot_power_isSet = !json[QString("pilotPower")].isNull() && m_pilot_power_isValid;

    m_rz_isValid = ::OpenAPI::fromJsonValue(m_rz, json[QString("rz")]);
    m_rz_isSet = !json[QString("rz")].isNull() && m_rz_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;
}

QString OAICdma::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdma::asJsonObject() const {
    QJsonObject obj;
    if (m_base_lat_isSet) {
        obj.insert(QString("baseLat"), ::OpenAPI::toJsonValue(m_base_lat));
    }
    if (m_base_lng_isSet) {
        obj.insert(QString("baseLng"), ::OpenAPI::toJsonValue(m_base_lng));
    }
    if (m_bsid_isSet) {
        obj.insert(QString("bsid"), ::OpenAPI::toJsonValue(m_bsid));
    }
    if (m_local_id.isSet()) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_nid_isSet) {
        obj.insert(QString("nid"), ::OpenAPI::toJsonValue(m_nid));
    }
    if (m_nmr.size() > 0) {
        obj.insert(QString("nmr"), ::OpenAPI::toJsonValue(m_nmr));
    }
    if (m_pilot_power_isSet) {
        obj.insert(QString("pilotPower"), ::OpenAPI::toJsonValue(m_pilot_power));
    }
    if (m_rz_isSet) {
        obj.insert(QString("rz"), ::OpenAPI::toJsonValue(m_rz));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    return obj;
}

double OAICdma::getBaseLat() const {
    return m_base_lat;
}
void OAICdma::setBaseLat(const double &base_lat) {
    m_base_lat = base_lat;
    m_base_lat_isSet = true;
}

bool OAICdma::is_base_lat_Set() const{
    return m_base_lat_isSet;
}

bool OAICdma::is_base_lat_Valid() const{
    return m_base_lat_isValid;
}

double OAICdma::getBaseLng() const {
    return m_base_lng;
}
void OAICdma::setBaseLng(const double &base_lng) {
    m_base_lng = base_lng;
    m_base_lng_isSet = true;
}

bool OAICdma::is_base_lng_Set() const{
    return m_base_lng_isSet;
}

bool OAICdma::is_base_lng_Valid() const{
    return m_base_lng_isValid;
}

qint32 OAICdma::getBsid() const {
    return m_bsid;
}
void OAICdma::setBsid(const qint32 &bsid) {
    m_bsid = bsid;
    m_bsid_isSet = true;
}

bool OAICdma::is_bsid_Set() const{
    return m_bsid_isSet;
}

bool OAICdma::is_bsid_Valid() const{
    return m_bsid_isValid;
}

OAICdmaLocalId OAICdma::getLocalId() const {
    return m_local_id;
}
void OAICdma::setLocalId(const OAICdmaLocalId &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAICdma::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAICdma::is_local_id_Valid() const{
    return m_local_id_isValid;
}

qint32 OAICdma::getNid() const {
    return m_nid;
}
void OAICdma::setNid(const qint32 &nid) {
    m_nid = nid;
    m_nid_isSet = true;
}

bool OAICdma::is_nid_Set() const{
    return m_nid_isSet;
}

bool OAICdma::is_nid_Valid() const{
    return m_nid_isValid;
}

QList<OAICdmaNmr> OAICdma::getNmr() const {
    return m_nmr;
}
void OAICdma::setNmr(const QList<OAICdmaNmr> &nmr) {
    m_nmr = nmr;
    m_nmr_isSet = true;
}

bool OAICdma::is_nmr_Set() const{
    return m_nmr_isSet;
}

bool OAICdma::is_nmr_Valid() const{
    return m_nmr_isValid;
}

qint32 OAICdma::getPilotPower() const {
    return m_pilot_power;
}
void OAICdma::setPilotPower(const qint32 &pilot_power) {
    m_pilot_power = pilot_power;
    m_pilot_power_isSet = true;
}

bool OAICdma::is_pilot_power_Set() const{
    return m_pilot_power_isSet;
}

bool OAICdma::is_pilot_power_Valid() const{
    return m_pilot_power_isValid;
}

qint32 OAICdma::getRz() const {
    return m_rz;
}
void OAICdma::setRz(const qint32 &rz) {
    m_rz = rz;
    m_rz_isSet = true;
}

bool OAICdma::is_rz_Set() const{
    return m_rz_isSet;
}

bool OAICdma::is_rz_Valid() const{
    return m_rz_isValid;
}

qint32 OAICdma::getSid() const {
    return m_sid;
}
void OAICdma::setSid(const qint32 &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAICdma::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAICdma::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAICdma::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nmr.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pilot_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdma::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bsid_isValid && m_nid_isValid && m_sid_isValid && true;
}

} // namespace OpenAPI
