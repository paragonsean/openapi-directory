/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsmLocalId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsmLocalId::OAIGsmLocalId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsmLocalId::OAIGsmLocalId() {
    this->initializeModel();
}

OAIGsmLocalId::~OAIGsmLocalId() {}

void OAIGsmLocalId::initializeModel() {

    m_bcch_isSet = false;
    m_bcch_isValid = false;

    m_bsic_isSet = false;
    m_bsic_isValid = false;
}

void OAIGsmLocalId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsmLocalId::fromJsonObject(QJsonObject json) {

    m_bcch_isValid = ::OpenAPI::fromJsonValue(m_bcch, json[QString("bcch")]);
    m_bcch_isSet = !json[QString("bcch")].isNull() && m_bcch_isValid;

    m_bsic_isValid = ::OpenAPI::fromJsonValue(m_bsic, json[QString("bsic")]);
    m_bsic_isSet = !json[QString("bsic")].isNull() && m_bsic_isValid;
}

QString OAIGsmLocalId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsmLocalId::asJsonObject() const {
    QJsonObject obj;
    if (m_bcch_isSet) {
        obj.insert(QString("bcch"), ::OpenAPI::toJsonValue(m_bcch));
    }
    if (m_bsic_isSet) {
        obj.insert(QString("bsic"), ::OpenAPI::toJsonValue(m_bsic));
    }
    return obj;
}

qint32 OAIGsmLocalId::getBcch() const {
    return m_bcch;
}
void OAIGsmLocalId::setBcch(const qint32 &bcch) {
    m_bcch = bcch;
    m_bcch_isSet = true;
}

bool OAIGsmLocalId::is_bcch_Set() const{
    return m_bcch_isSet;
}

bool OAIGsmLocalId::is_bcch_Valid() const{
    return m_bcch_isValid;
}

qint32 OAIGsmLocalId::getBsic() const {
    return m_bsic;
}
void OAIGsmLocalId::setBsic(const qint32 &bsic) {
    m_bsic = bsic;
    m_bsic_isSet = true;
}

bool OAIGsmLocalId::is_bsic_Set() const{
    return m_bsic_isSet;
}

bool OAIGsmLocalId::is_bsic_Valid() const{
    return m_bsic_isValid;
}

bool OAIGsmLocalId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bcch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsmLocalId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bcch_isValid && m_bsic_isValid && true;
}

} // namespace OpenAPI
