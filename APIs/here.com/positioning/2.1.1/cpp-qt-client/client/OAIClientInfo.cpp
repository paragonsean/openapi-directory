/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientInfo::OAIClientInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientInfo::OAIClientInfo() {
    this->initializeModel();
}

OAIClientInfo::~OAIClientInfo() {}

void OAIClientInfo::initializeModel() {

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIClientInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientInfo::fromJsonObject(QJsonObject json) {

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIClientInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIClientInfo::getFirmware() const {
    return m_firmware;
}
void OAIClientInfo::setFirmware(const QString &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAIClientInfo::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAIClientInfo::is_firmware_Valid() const{
    return m_firmware_isValid;
}

QString OAIClientInfo::getManufacturer() const {
    return m_manufacturer;
}
void OAIClientInfo::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIClientInfo::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIClientInfo::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIClientInfo::getModel() const {
    return m_model;
}
void OAIClientInfo::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIClientInfo::is_model_Set() const{
    return m_model_isSet;
}

bool OAIClientInfo::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIClientInfo::getName() const {
    return m_name;
}
void OAIClientInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClientInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClientInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIClientInfo::getPlatform() const {
    return m_platform;
}
void OAIClientInfo::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIClientInfo::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIClientInfo::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIClientInfo::getVersion() const {
    return m_version;
}
void OAIClientInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIClientInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIClientInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIClientInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_manufacturer_isValid && m_model_isValid && m_name_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
