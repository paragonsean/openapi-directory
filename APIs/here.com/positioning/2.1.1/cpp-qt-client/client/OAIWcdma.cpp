/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWcdma.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWcdma::OAIWcdma(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWcdma::OAIWcdma() {
    this->initializeModel();
}

OAIWcdma::~OAIWcdma() {}

void OAIWcdma::initializeModel() {

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_lac_isSet = false;
    m_lac_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_nmr_isSet = false;
    m_nmr_isValid = false;

    m_pathloss_isSet = false;
    m_pathloss_isValid = false;

    m_rscp_isSet = false;
    m_rscp_isValid = false;
}

void OAIWcdma::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWcdma::fromJsonObject(QJsonObject json) {

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_lac_isValid = ::OpenAPI::fromJsonValue(m_lac, json[QString("lac")]);
    m_lac_isSet = !json[QString("lac")].isNull() && m_lac_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("mnc")]);
    m_mnc_isSet = !json[QString("mnc")].isNull() && m_mnc_isValid;

    m_nmr_isValid = ::OpenAPI::fromJsonValue(m_nmr, json[QString("nmr")]);
    m_nmr_isSet = !json[QString("nmr")].isNull() && m_nmr_isValid;

    m_pathloss_isValid = ::OpenAPI::fromJsonValue(m_pathloss, json[QString("pathloss")]);
    m_pathloss_isSet = !json[QString("pathloss")].isNull() && m_pathloss_isValid;

    m_rscp_isValid = ::OpenAPI::fromJsonValue(m_rscp, json[QString("rscp")]);
    m_rscp_isSet = !json[QString("rscp")].isNull() && m_rscp_isValid;
}

QString OAIWcdma::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWcdma::asJsonObject() const {
    QJsonObject obj;
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_lac_isSet) {
        obj.insert(QString("lac"), ::OpenAPI::toJsonValue(m_lac));
    }
    if (m_local_id.isSet()) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_nmr.size() > 0) {
        obj.insert(QString("nmr"), ::OpenAPI::toJsonValue(m_nmr));
    }
    if (m_pathloss_isSet) {
        obj.insert(QString("pathloss"), ::OpenAPI::toJsonValue(m_pathloss));
    }
    if (m_rscp_isSet) {
        obj.insert(QString("rscp"), ::OpenAPI::toJsonValue(m_rscp));
    }
    return obj;
}

qint32 OAIWcdma::getCid() const {
    return m_cid;
}
void OAIWcdma::setCid(const qint32 &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIWcdma::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIWcdma::is_cid_Valid() const{
    return m_cid_isValid;
}

qint32 OAIWcdma::getLac() const {
    return m_lac;
}
void OAIWcdma::setLac(const qint32 &lac) {
    m_lac = lac;
    m_lac_isSet = true;
}

bool OAIWcdma::is_lac_Set() const{
    return m_lac_isSet;
}

bool OAIWcdma::is_lac_Valid() const{
    return m_lac_isValid;
}

OAIWcdmaLocalId OAIWcdma::getLocalId() const {
    return m_local_id;
}
void OAIWcdma::setLocalId(const OAIWcdmaLocalId &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIWcdma::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIWcdma::is_local_id_Valid() const{
    return m_local_id_isValid;
}

qint32 OAIWcdma::getMcc() const {
    return m_mcc;
}
void OAIWcdma::setMcc(const qint32 &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIWcdma::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIWcdma::is_mcc_Valid() const{
    return m_mcc_isValid;
}

qint32 OAIWcdma::getMnc() const {
    return m_mnc;
}
void OAIWcdma::setMnc(const qint32 &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAIWcdma::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAIWcdma::is_mnc_Valid() const{
    return m_mnc_isValid;
}

QList<OAIWcdmaNmr> OAIWcdma::getNmr() const {
    return m_nmr;
}
void OAIWcdma::setNmr(const QList<OAIWcdmaNmr> &nmr) {
    m_nmr = nmr;
    m_nmr_isSet = true;
}

bool OAIWcdma::is_nmr_Set() const{
    return m_nmr_isSet;
}

bool OAIWcdma::is_nmr_Valid() const{
    return m_nmr_isValid;
}

qint32 OAIWcdma::getPathloss() const {
    return m_pathloss;
}
void OAIWcdma::setPathloss(const qint32 &pathloss) {
    m_pathloss = pathloss;
    m_pathloss_isSet = true;
}

bool OAIWcdma::is_pathloss_Set() const{
    return m_pathloss_isSet;
}

bool OAIWcdma::is_pathloss_Valid() const{
    return m_pathloss_isValid;
}

qint32 OAIWcdma::getRscp() const {
    return m_rscp;
}
void OAIWcdma::setRscp(const qint32 &rscp) {
    m_rscp = rscp;
    m_rscp_isSet = true;
}

bool OAIWcdma::is_rscp_Set() const{
    return m_rscp_isSet;
}

bool OAIWcdma::is_rscp_Valid() const{
    return m_rscp_isValid;
}

bool OAIWcdma::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nmr.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pathloss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWcdma::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cid_isValid && m_mcc_isValid && m_mnc_isValid && true;
}

} // namespace OpenAPI
