/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILteNmr.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILteNmr::OAILteNmr(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILteNmr::OAILteNmr() {
    this->initializeModel();
}

OAILteNmr::~OAILteNmr() {}

void OAILteNmr::initializeModel() {

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_earfcn_isSet = false;
    m_earfcn_isValid = false;

    m_pci_isSet = false;
    m_pci_isValid = false;

    m_rsrp_isSet = false;
    m_rsrp_isValid = false;

    m_rsrq_isSet = false;
    m_rsrq_isValid = false;
}

void OAILteNmr::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILteNmr::fromJsonObject(QJsonObject json) {

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_earfcn_isValid = ::OpenAPI::fromJsonValue(m_earfcn, json[QString("earfcn")]);
    m_earfcn_isSet = !json[QString("earfcn")].isNull() && m_earfcn_isValid;

    m_pci_isValid = ::OpenAPI::fromJsonValue(m_pci, json[QString("pci")]);
    m_pci_isSet = !json[QString("pci")].isNull() && m_pci_isValid;

    m_rsrp_isValid = ::OpenAPI::fromJsonValue(m_rsrp, json[QString("rsrp")]);
    m_rsrp_isSet = !json[QString("rsrp")].isNull() && m_rsrp_isValid;

    m_rsrq_isValid = ::OpenAPI::fromJsonValue(m_rsrq, json[QString("rsrq")]);
    m_rsrq_isSet = !json[QString("rsrq")].isNull() && m_rsrq_isValid;
}

QString OAILteNmr::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILteNmr::asJsonObject() const {
    QJsonObject obj;
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_earfcn_isSet) {
        obj.insert(QString("earfcn"), ::OpenAPI::toJsonValue(m_earfcn));
    }
    if (m_pci_isSet) {
        obj.insert(QString("pci"), ::OpenAPI::toJsonValue(m_pci));
    }
    if (m_rsrp_isSet) {
        obj.insert(QString("rsrp"), ::OpenAPI::toJsonValue(m_rsrp));
    }
    if (m_rsrq_isSet) {
        obj.insert(QString("rsrq"), ::OpenAPI::toJsonValue(m_rsrq));
    }
    return obj;
}

qint32 OAILteNmr::getCid() const {
    return m_cid;
}
void OAILteNmr::setCid(const qint32 &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAILteNmr::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAILteNmr::is_cid_Valid() const{
    return m_cid_isValid;
}

qint32 OAILteNmr::getEarfcn() const {
    return m_earfcn;
}
void OAILteNmr::setEarfcn(const qint32 &earfcn) {
    m_earfcn = earfcn;
    m_earfcn_isSet = true;
}

bool OAILteNmr::is_earfcn_Set() const{
    return m_earfcn_isSet;
}

bool OAILteNmr::is_earfcn_Valid() const{
    return m_earfcn_isValid;
}

qint32 OAILteNmr::getPci() const {
    return m_pci;
}
void OAILteNmr::setPci(const qint32 &pci) {
    m_pci = pci;
    m_pci_isSet = true;
}

bool OAILteNmr::is_pci_Set() const{
    return m_pci_isSet;
}

bool OAILteNmr::is_pci_Valid() const{
    return m_pci_isValid;
}

qint32 OAILteNmr::getRsrp() const {
    return m_rsrp;
}
void OAILteNmr::setRsrp(const qint32 &rsrp) {
    m_rsrp = rsrp;
    m_rsrp_isSet = true;
}

bool OAILteNmr::is_rsrp_Set() const{
    return m_rsrp_isSet;
}

bool OAILteNmr::is_rsrp_Valid() const{
    return m_rsrp_isValid;
}

double OAILteNmr::getRsrq() const {
    return m_rsrq;
}
void OAILteNmr::setRsrq(const double &rsrq) {
    m_rsrq = rsrq;
    m_rsrq_isSet = true;
}

bool OAILteNmr::is_rsrq_Set() const{
    return m_rsrq_isSet;
}

bool OAILteNmr::is_rsrq_Valid() const{
    return m_rsrq_isValid;
}

bool OAILteNmr::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earfcn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrq_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILteNmr::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_earfcn_isValid && m_pci_isValid && true;
}

} // namespace OpenAPI
