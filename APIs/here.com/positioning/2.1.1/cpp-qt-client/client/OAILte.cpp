/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILte.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILte::OAILte(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILte::OAILte() {
    this->initializeModel();
}

OAILte::~OAILte() {}

void OAILte::initializeModel() {

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_nmr_isSet = false;
    m_nmr_isValid = false;

    m_rsrp_isSet = false;
    m_rsrp_isValid = false;

    m_rsrq_isSet = false;
    m_rsrq_isValid = false;

    m_ta_isSet = false;
    m_ta_isValid = false;

    m_tac_isSet = false;
    m_tac_isValid = false;
}

void OAILte::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILte::fromJsonObject(QJsonObject json) {

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("mnc")]);
    m_mnc_isSet = !json[QString("mnc")].isNull() && m_mnc_isValid;

    m_nmr_isValid = ::OpenAPI::fromJsonValue(m_nmr, json[QString("nmr")]);
    m_nmr_isSet = !json[QString("nmr")].isNull() && m_nmr_isValid;

    m_rsrp_isValid = ::OpenAPI::fromJsonValue(m_rsrp, json[QString("rsrp")]);
    m_rsrp_isSet = !json[QString("rsrp")].isNull() && m_rsrp_isValid;

    m_rsrq_isValid = ::OpenAPI::fromJsonValue(m_rsrq, json[QString("rsrq")]);
    m_rsrq_isSet = !json[QString("rsrq")].isNull() && m_rsrq_isValid;

    m_ta_isValid = ::OpenAPI::fromJsonValue(m_ta, json[QString("ta")]);
    m_ta_isSet = !json[QString("ta")].isNull() && m_ta_isValid;

    m_tac_isValid = ::OpenAPI::fromJsonValue(m_tac, json[QString("tac")]);
    m_tac_isSet = !json[QString("tac")].isNull() && m_tac_isValid;
}

QString OAILte::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILte::asJsonObject() const {
    QJsonObject obj;
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_local_id.isSet()) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_nmr.size() > 0) {
        obj.insert(QString("nmr"), ::OpenAPI::toJsonValue(m_nmr));
    }
    if (m_rsrp_isSet) {
        obj.insert(QString("rsrp"), ::OpenAPI::toJsonValue(m_rsrp));
    }
    if (m_rsrq_isSet) {
        obj.insert(QString("rsrq"), ::OpenAPI::toJsonValue(m_rsrq));
    }
    if (m_ta_isSet) {
        obj.insert(QString("ta"), ::OpenAPI::toJsonValue(m_ta));
    }
    if (m_tac_isSet) {
        obj.insert(QString("tac"), ::OpenAPI::toJsonValue(m_tac));
    }
    return obj;
}

qint32 OAILte::getCid() const {
    return m_cid;
}
void OAILte::setCid(const qint32 &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAILte::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAILte::is_cid_Valid() const{
    return m_cid_isValid;
}

OAILteLocalId OAILte::getLocalId() const {
    return m_local_id;
}
void OAILte::setLocalId(const OAILteLocalId &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAILte::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAILte::is_local_id_Valid() const{
    return m_local_id_isValid;
}

qint32 OAILte::getMcc() const {
    return m_mcc;
}
void OAILte::setMcc(const qint32 &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAILte::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAILte::is_mcc_Valid() const{
    return m_mcc_isValid;
}

qint32 OAILte::getMnc() const {
    return m_mnc;
}
void OAILte::setMnc(const qint32 &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAILte::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAILte::is_mnc_Valid() const{
    return m_mnc_isValid;
}

QList<OAILteNmr> OAILte::getNmr() const {
    return m_nmr;
}
void OAILte::setNmr(const QList<OAILteNmr> &nmr) {
    m_nmr = nmr;
    m_nmr_isSet = true;
}

bool OAILte::is_nmr_Set() const{
    return m_nmr_isSet;
}

bool OAILte::is_nmr_Valid() const{
    return m_nmr_isValid;
}

qint32 OAILte::getRsrp() const {
    return m_rsrp;
}
void OAILte::setRsrp(const qint32 &rsrp) {
    m_rsrp = rsrp;
    m_rsrp_isSet = true;
}

bool OAILte::is_rsrp_Set() const{
    return m_rsrp_isSet;
}

bool OAILte::is_rsrp_Valid() const{
    return m_rsrp_isValid;
}

double OAILte::getRsrq() const {
    return m_rsrq;
}
void OAILte::setRsrq(const double &rsrq) {
    m_rsrq = rsrq;
    m_rsrq_isSet = true;
}

bool OAILte::is_rsrq_Set() const{
    return m_rsrq_isSet;
}

bool OAILte::is_rsrq_Valid() const{
    return m_rsrq_isValid;
}

qint32 OAILte::getTa() const {
    return m_ta;
}
void OAILte::setTa(const qint32 &ta) {
    m_ta = ta;
    m_ta_isSet = true;
}

bool OAILte::is_ta_Set() const{
    return m_ta_isSet;
}

bool OAILte::is_ta_Valid() const{
    return m_ta_isValid;
}

qint32 OAILte::getTac() const {
    return m_tac;
}
void OAILte::setTac(const qint32 &tac) {
    m_tac = tac;
    m_tac_isSet = true;
}

bool OAILte::is_tac_Set() const{
    return m_tac_isSet;
}

bool OAILte::is_tac_Valid() const{
    return m_tac_isValid;
}

bool OAILte::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nmr.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tac_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILte::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cid_isValid && m_mcc_isValid && m_mnc_isValid && true;
}

} // namespace OpenAPI
