/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdmaLocalId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdmaLocalId::OAICdmaLocalId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdmaLocalId::OAICdmaLocalId() {
    this->initializeModel();
}

OAICdmaLocalId::~OAICdmaLocalId() {}

void OAICdmaLocalId::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_pn_offset_isSet = false;
    m_pn_offset_isValid = false;
}

void OAICdmaLocalId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdmaLocalId::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_pn_offset_isValid = ::OpenAPI::fromJsonValue(m_pn_offset, json[QString("pnOffset")]);
    m_pn_offset_isSet = !json[QString("pnOffset")].isNull() && m_pn_offset_isValid;
}

QString OAICdmaLocalId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdmaLocalId::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_pn_offset_isSet) {
        obj.insert(QString("pnOffset"), ::OpenAPI::toJsonValue(m_pn_offset));
    }
    return obj;
}

qint32 OAICdmaLocalId::getChannel() const {
    return m_channel;
}
void OAICdmaLocalId::setChannel(const qint32 &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAICdmaLocalId::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAICdmaLocalId::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAICdmaLocalId::getPnOffset() const {
    return m_pn_offset;
}
void OAICdmaLocalId::setPnOffset(const qint32 &pn_offset) {
    m_pn_offset = pn_offset;
    m_pn_offset_isSet = true;
}

bool OAICdmaLocalId::is_pn_offset_Set() const{
    return m_pn_offset_isSet;
}

bool OAICdmaLocalId::is_pn_offset_Valid() const{
    return m_pn_offset_isValid;
}

bool OAICdmaLocalId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pn_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdmaLocalId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_pn_offset_isValid && true;
}

} // namespace OpenAPI
