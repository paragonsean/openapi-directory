/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorDetail::OAIErrorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorDetail::OAIErrorDetail() {
    this->initializeModel();
}

OAIErrorDetail::~OAIErrorDetail() {}

void OAIErrorDetail::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_placeholders_isSet = false;
    m_message_placeholders_isValid = false;

    m_message_template_isSet = false;
    m_message_template_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIErrorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorDetail::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_placeholders_isValid = ::OpenAPI::fromJsonValue(m_message_placeholders, json[QString("messagePlaceholders")]);
    m_message_placeholders_isSet = !json[QString("messagePlaceholders")].isNull() && m_message_placeholders_isValid;

    m_message_template_isValid = ::OpenAPI::fromJsonValue(m_message_template, json[QString("messageTemplate")]);
    m_message_template_isSet = !json[QString("messageTemplate")].isNull() && m_message_template_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIErrorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_placeholders_isSet) {
        obj.insert(QString("messagePlaceholders"), ::OpenAPI::toJsonValue(m_message_placeholders));
    }
    if (m_message_template_isSet) {
        obj.insert(QString("messageTemplate"), ::OpenAPI::toJsonValue(m_message_template));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIErrorDetail::getMessage() const {
    return m_message;
}
void OAIErrorDetail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorDetail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorDetail::is_message_Valid() const{
    return m_message_isValid;
}

QJsonValue OAIErrorDetail::getMessagePlaceholders() const {
    return m_message_placeholders;
}
void OAIErrorDetail::setMessagePlaceholders(const QJsonValue &message_placeholders) {
    m_message_placeholders = message_placeholders;
    m_message_placeholders_isSet = true;
}

bool OAIErrorDetail::is_message_placeholders_Set() const{
    return m_message_placeholders_isSet;
}

bool OAIErrorDetail::is_message_placeholders_Valid() const{
    return m_message_placeholders_isValid;
}

QString OAIErrorDetail::getMessageTemplate() const {
    return m_message_template;
}
void OAIErrorDetail::setMessageTemplate(const QString &message_template) {
    m_message_template = message_template;
    m_message_template_isSet = true;
}

bool OAIErrorDetail::is_message_template_Set() const{
    return m_message_template_isSet;
}

bool OAIErrorDetail::is_message_template_Valid() const{
    return m_message_template_isValid;
}

QString OAIErrorDetail::getSource() const {
    return m_source;
}
void OAIErrorDetail::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIErrorDetail::is_source_Set() const{
    return m_source_isSet;
}

bool OAIErrorDetail::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIErrorDetail::getTitle() const {
    return m_title;
}
void OAIErrorDetail::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIErrorDetail::is_title_Set() const{
    return m_title_isSet;
}

bool OAIErrorDetail::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIErrorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_placeholders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
