/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICdma.h
 *
 * CDMA measurement
 */

#ifndef OAICdma_H
#define OAICdma_H

#include <QJsonObject>

#include "OAICdmaLocalId.h"
#include "OAICdmaNmr.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICdmaLocalId;
class OAICdmaNmr;

class OAICdma : public OAIObject {
public:
    OAICdma();
    OAICdma(QString json);
    ~OAICdma() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBaseLat() const;
    void setBaseLat(const double &base_lat);
    bool is_base_lat_Set() const;
    bool is_base_lat_Valid() const;

    double getBaseLng() const;
    void setBaseLng(const double &base_lng);
    bool is_base_lng_Set() const;
    bool is_base_lng_Valid() const;

    qint32 getBsid() const;
    void setBsid(const qint32 &bsid);
    bool is_bsid_Set() const;
    bool is_bsid_Valid() const;

    OAICdmaLocalId getLocalId() const;
    void setLocalId(const OAICdmaLocalId &local_id);
    bool is_local_id_Set() const;
    bool is_local_id_Valid() const;

    qint32 getNid() const;
    void setNid(const qint32 &nid);
    bool is_nid_Set() const;
    bool is_nid_Valid() const;

    QList<OAICdmaNmr> getNmr() const;
    void setNmr(const QList<OAICdmaNmr> &nmr);
    bool is_nmr_Set() const;
    bool is_nmr_Valid() const;

    qint32 getPilotPower() const;
    void setPilotPower(const qint32 &pilot_power);
    bool is_pilot_power_Set() const;
    bool is_pilot_power_Valid() const;

    qint32 getRz() const;
    void setRz(const qint32 &rz);
    bool is_rz_Set() const;
    bool is_rz_Valid() const;

    qint32 getSid() const;
    void setSid(const qint32 &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_base_lat;
    bool m_base_lat_isSet;
    bool m_base_lat_isValid;

    double m_base_lng;
    bool m_base_lng_isSet;
    bool m_base_lng_isValid;

    qint32 m_bsid;
    bool m_bsid_isSet;
    bool m_bsid_isValid;

    OAICdmaLocalId m_local_id;
    bool m_local_id_isSet;
    bool m_local_id_isValid;

    qint32 m_nid;
    bool m_nid_isSet;
    bool m_nid_isValid;

    QList<OAICdmaNmr> m_nmr;
    bool m_nmr_isSet;
    bool m_nmr_isValid;

    qint32 m_pilot_power;
    bool m_pilot_power_isSet;
    bool m_pilot_power_isValid;

    qint32 m_rz;
    bool m_rz_isSet;
    bool m_rz_isValid;

    qint32 m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICdma)

#endif // OAICdma_H
