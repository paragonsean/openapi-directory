/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILte.h
 *
 * LTE measurement
 */

#ifndef OAILte_H
#define OAILte_H

#include <QJsonObject>

#include "OAILteLocalId.h"
#include "OAILteNmr.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILteLocalId;
class OAILteNmr;

class OAILte : public OAIObject {
public:
    OAILte();
    OAILte(QString json);
    ~OAILte() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCid() const;
    void setCid(const qint32 &cid);
    bool is_cid_Set() const;
    bool is_cid_Valid() const;

    OAILteLocalId getLocalId() const;
    void setLocalId(const OAILteLocalId &local_id);
    bool is_local_id_Set() const;
    bool is_local_id_Valid() const;

    qint32 getMcc() const;
    void setMcc(const qint32 &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    qint32 getMnc() const;
    void setMnc(const qint32 &mnc);
    bool is_mnc_Set() const;
    bool is_mnc_Valid() const;

    QList<OAILteNmr> getNmr() const;
    void setNmr(const QList<OAILteNmr> &nmr);
    bool is_nmr_Set() const;
    bool is_nmr_Valid() const;

    qint32 getRsrp() const;
    void setRsrp(const qint32 &rsrp);
    bool is_rsrp_Set() const;
    bool is_rsrp_Valid() const;

    double getRsrq() const;
    void setRsrq(const double &rsrq);
    bool is_rsrq_Set() const;
    bool is_rsrq_Valid() const;

    qint32 getTa() const;
    void setTa(const qint32 &ta);
    bool is_ta_Set() const;
    bool is_ta_Valid() const;

    qint32 getTac() const;
    void setTac(const qint32 &tac);
    bool is_tac_Set() const;
    bool is_tac_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cid;
    bool m_cid_isSet;
    bool m_cid_isValid;

    OAILteLocalId m_local_id;
    bool m_local_id_isSet;
    bool m_local_id_isValid;

    qint32 m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    qint32 m_mnc;
    bool m_mnc_isSet;
    bool m_mnc_isValid;

    QList<OAILteNmr> m_nmr;
    bool m_nmr_isSet;
    bool m_nmr_isValid;

    qint32 m_rsrp;
    bool m_rsrp_isSet;
    bool m_rsrp_isValid;

    double m_rsrq;
    bool m_rsrq_isSet;
    bool m_rsrq_isValid;

    qint32 m_ta;
    bool m_ta_isSet;
    bool m_ta_isValid;

    qint32 m_tac;
    bool m_tac_isSet;
    bool m_tac_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILte)

#endif // OAILte_H
