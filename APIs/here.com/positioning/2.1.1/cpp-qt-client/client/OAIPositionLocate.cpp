/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionLocate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionLocate::OAIPositionLocate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionLocate::OAIPositionLocate() {
    this->initializeModel();
}

OAIPositionLocate::~OAIPositionLocate() {}

void OAIPositionLocate::initializeModel() {

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_alt_isSet = false;
    m_alt_isValid = false;

    m_alt_accuracy_isSet = false;
    m_alt_accuracy_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;
}

void OAIPositionLocate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionLocate::fromJsonObject(QJsonObject json) {

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("accuracy")]);
    m_accuracy_isSet = !json[QString("accuracy")].isNull() && m_accuracy_isValid;

    m_alt_isValid = ::OpenAPI::fromJsonValue(m_alt, json[QString("alt")]);
    m_alt_isSet = !json[QString("alt")].isNull() && m_alt_isValid;

    m_alt_accuracy_isValid = ::OpenAPI::fromJsonValue(m_alt_accuracy, json[QString("altAccuracy")]);
    m_alt_accuracy_isSet = !json[QString("altAccuracy")].isNull() && m_alt_accuracy_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;
}

QString OAIPositionLocate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionLocate::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_isSet) {
        obj.insert(QString("accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_alt_isSet) {
        obj.insert(QString("alt"), ::OpenAPI::toJsonValue(m_alt));
    }
    if (m_alt_accuracy_isSet) {
        obj.insert(QString("altAccuracy"), ::OpenAPI::toJsonValue(m_alt_accuracy));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    return obj;
}

double OAIPositionLocate::getAccuracy() const {
    return m_accuracy;
}
void OAIPositionLocate::setAccuracy(const double &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAIPositionLocate::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIPositionLocate::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

double OAIPositionLocate::getAlt() const {
    return m_alt;
}
void OAIPositionLocate::setAlt(const double &alt) {
    m_alt = alt;
    m_alt_isSet = true;
}

bool OAIPositionLocate::is_alt_Set() const{
    return m_alt_isSet;
}

bool OAIPositionLocate::is_alt_Valid() const{
    return m_alt_isValid;
}

double OAIPositionLocate::getAltAccuracy() const {
    return m_alt_accuracy;
}
void OAIPositionLocate::setAltAccuracy(const double &alt_accuracy) {
    m_alt_accuracy = alt_accuracy;
    m_alt_accuracy_isSet = true;
}

bool OAIPositionLocate::is_alt_accuracy_Set() const{
    return m_alt_accuracy_isSet;
}

bool OAIPositionLocate::is_alt_accuracy_Valid() const{
    return m_alt_accuracy_isValid;
}

double OAIPositionLocate::getLat() const {
    return m_lat;
}
void OAIPositionLocate::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIPositionLocate::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIPositionLocate::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIPositionLocate::getLng() const {
    return m_lng;
}
void OAIPositionLocate::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIPositionLocate::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIPositionLocate::is_lng_Valid() const{
    return m_lng_isValid;
}

bool OAIPositionLocate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionLocate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accuracy_isValid && m_lat_isValid && m_lng_isValid && true;
}

} // namespace OpenAPI
