/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPositionLocate.h
 *
 * Object containing information on a location where a measurement was taken.
 */

#ifndef OAIPositionLocate_H
#define OAIPositionLocate_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPositionLocate : public OAIObject {
public:
    OAIPositionLocate();
    OAIPositionLocate(QString json);
    ~OAIPositionLocate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccuracy() const;
    void setAccuracy(const double &accuracy);
    bool is_accuracy_Set() const;
    bool is_accuracy_Valid() const;

    double getAlt() const;
    void setAlt(const double &alt);
    bool is_alt_Set() const;
    bool is_alt_Valid() const;

    double getAltAccuracy() const;
    void setAltAccuracy(const double &alt_accuracy);
    bool is_alt_accuracy_Set() const;
    bool is_alt_accuracy_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getLng() const;
    void setLng(const double &lng);
    bool is_lng_Set() const;
    bool is_lng_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_accuracy;
    bool m_accuracy_isSet;
    bool m_accuracy_isValid;

    double m_alt;
    bool m_alt_isSet;
    bool m_alt_isValid;

    double m_alt_accuracy;
    bool m_alt_accuracy_isSet;
    bool m_alt_accuracy_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_lng;
    bool m_lng_isSet;
    bool m_lng_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPositionLocate)

#endif // OAIPositionLocate_H
