/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILocate.h
 *
 * Object wrapping the location data submitted in a request for a position. At least one of &#x60;gsm&#x60;, &#x60;wcdma&#x60;, &#x60;tdscdma&#x60;, &#x60;lte&#x60;, &#x60;cdma&#x60;, or &#x60;wlan&#x60; elements is required. Array elements should be unique within the request. 
 */

#ifndef OAILocate_H
#define OAILocate_H

#include <QJsonObject>

#include "OAICdma.h"
#include "OAIClientInfo.h"
#include "OAIGsm.h"
#include "OAILte.h"
#include "OAITdscdma.h"
#include "OAIWcdma.h"
#include "OAIWlanLocate.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICdma;
class OAIClientInfo;
class OAIGsm;
class OAILte;
class OAITdscdma;
class OAIWcdma;
class OAIWlanLocate;

class OAILocate : public OAIObject {
public:
    OAILocate();
    OAILocate(QString json);
    ~OAILocate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICdma> getCdma() const;
    void setCdma(const QList<OAICdma> &cdma);
    bool is_cdma_Set() const;
    bool is_cdma_Valid() const;

    OAIClientInfo getClient() const;
    void setClient(const OAIClientInfo &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    QList<OAIGsm> getGsm() const;
    void setGsm(const QList<OAIGsm> &gsm);
    bool is_gsm_Set() const;
    bool is_gsm_Valid() const;

    QList<OAILte> getLte() const;
    void setLte(const QList<OAILte> &lte);
    bool is_lte_Set() const;
    bool is_lte_Valid() const;

    QList<OAITdscdma> getTdscdma() const;
    void setTdscdma(const QList<OAITdscdma> &tdscdma);
    bool is_tdscdma_Set() const;
    bool is_tdscdma_Valid() const;

    QList<OAIWcdma> getWcdma() const;
    void setWcdma(const QList<OAIWcdma> &wcdma);
    bool is_wcdma_Set() const;
    bool is_wcdma_Valid() const;

    QList<OAIWlanLocate> getWlan() const;
    void setWlan(const QList<OAIWlanLocate> &wlan);
    bool is_wlan_Set() const;
    bool is_wlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICdma> m_cdma;
    bool m_cdma_isSet;
    bool m_cdma_isValid;

    OAIClientInfo m_client;
    bool m_client_isSet;
    bool m_client_isValid;

    QList<OAIGsm> m_gsm;
    bool m_gsm_isSet;
    bool m_gsm_isValid;

    QList<OAILte> m_lte;
    bool m_lte_isSet;
    bool m_lte_isValid;

    QList<OAITdscdma> m_tdscdma;
    bool m_tdscdma_isSet;
    bool m_tdscdma_isValid;

    QList<OAIWcdma> m_wcdma;
    bool m_wcdma_isSet;
    bool m_wcdma_isValid;

    QList<OAIWlanLocate> m_wlan;
    bool m_wlan_isSet;
    bool m_wlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILocate)

#endif // OAILocate_H
