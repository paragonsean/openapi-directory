/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocate::OAILocate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocate::OAILocate() {
    this->initializeModel();
}

OAILocate::~OAILocate() {}

void OAILocate::initializeModel() {

    m_cdma_isSet = false;
    m_cdma_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_gsm_isSet = false;
    m_gsm_isValid = false;

    m_lte_isSet = false;
    m_lte_isValid = false;

    m_tdscdma_isSet = false;
    m_tdscdma_isValid = false;

    m_wcdma_isSet = false;
    m_wcdma_isValid = false;

    m_wlan_isSet = false;
    m_wlan_isValid = false;
}

void OAILocate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocate::fromJsonObject(QJsonObject json) {

    m_cdma_isValid = ::OpenAPI::fromJsonValue(m_cdma, json[QString("cdma")]);
    m_cdma_isSet = !json[QString("cdma")].isNull() && m_cdma_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_gsm_isValid = ::OpenAPI::fromJsonValue(m_gsm, json[QString("gsm")]);
    m_gsm_isSet = !json[QString("gsm")].isNull() && m_gsm_isValid;

    m_lte_isValid = ::OpenAPI::fromJsonValue(m_lte, json[QString("lte")]);
    m_lte_isSet = !json[QString("lte")].isNull() && m_lte_isValid;

    m_tdscdma_isValid = ::OpenAPI::fromJsonValue(m_tdscdma, json[QString("tdscdma")]);
    m_tdscdma_isSet = !json[QString("tdscdma")].isNull() && m_tdscdma_isValid;

    m_wcdma_isValid = ::OpenAPI::fromJsonValue(m_wcdma, json[QString("wcdma")]);
    m_wcdma_isSet = !json[QString("wcdma")].isNull() && m_wcdma_isValid;

    m_wlan_isValid = ::OpenAPI::fromJsonValue(m_wlan, json[QString("wlan")]);
    m_wlan_isSet = !json[QString("wlan")].isNull() && m_wlan_isValid;
}

QString OAILocate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocate::asJsonObject() const {
    QJsonObject obj;
    if (m_cdma.size() > 0) {
        obj.insert(QString("cdma"), ::OpenAPI::toJsonValue(m_cdma));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_gsm.size() > 0) {
        obj.insert(QString("gsm"), ::OpenAPI::toJsonValue(m_gsm));
    }
    if (m_lte.size() > 0) {
        obj.insert(QString("lte"), ::OpenAPI::toJsonValue(m_lte));
    }
    if (m_tdscdma.size() > 0) {
        obj.insert(QString("tdscdma"), ::OpenAPI::toJsonValue(m_tdscdma));
    }
    if (m_wcdma.size() > 0) {
        obj.insert(QString("wcdma"), ::OpenAPI::toJsonValue(m_wcdma));
    }
    if (m_wlan.size() > 0) {
        obj.insert(QString("wlan"), ::OpenAPI::toJsonValue(m_wlan));
    }
    return obj;
}

QList<OAICdma> OAILocate::getCdma() const {
    return m_cdma;
}
void OAILocate::setCdma(const QList<OAICdma> &cdma) {
    m_cdma = cdma;
    m_cdma_isSet = true;
}

bool OAILocate::is_cdma_Set() const{
    return m_cdma_isSet;
}

bool OAILocate::is_cdma_Valid() const{
    return m_cdma_isValid;
}

OAIClientInfo OAILocate::getClient() const {
    return m_client;
}
void OAILocate::setClient(const OAIClientInfo &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAILocate::is_client_Set() const{
    return m_client_isSet;
}

bool OAILocate::is_client_Valid() const{
    return m_client_isValid;
}

QList<OAIGsm> OAILocate::getGsm() const {
    return m_gsm;
}
void OAILocate::setGsm(const QList<OAIGsm> &gsm) {
    m_gsm = gsm;
    m_gsm_isSet = true;
}

bool OAILocate::is_gsm_Set() const{
    return m_gsm_isSet;
}

bool OAILocate::is_gsm_Valid() const{
    return m_gsm_isValid;
}

QList<OAILte> OAILocate::getLte() const {
    return m_lte;
}
void OAILocate::setLte(const QList<OAILte> &lte) {
    m_lte = lte;
    m_lte_isSet = true;
}

bool OAILocate::is_lte_Set() const{
    return m_lte_isSet;
}

bool OAILocate::is_lte_Valid() const{
    return m_lte_isValid;
}

QList<OAITdscdma> OAILocate::getTdscdma() const {
    return m_tdscdma;
}
void OAILocate::setTdscdma(const QList<OAITdscdma> &tdscdma) {
    m_tdscdma = tdscdma;
    m_tdscdma_isSet = true;
}

bool OAILocate::is_tdscdma_Set() const{
    return m_tdscdma_isSet;
}

bool OAILocate::is_tdscdma_Valid() const{
    return m_tdscdma_isValid;
}

QList<OAIWcdma> OAILocate::getWcdma() const {
    return m_wcdma;
}
void OAILocate::setWcdma(const QList<OAIWcdma> &wcdma) {
    m_wcdma = wcdma;
    m_wcdma_isSet = true;
}

bool OAILocate::is_wcdma_Set() const{
    return m_wcdma_isSet;
}

bool OAILocate::is_wcdma_Valid() const{
    return m_wcdma_isValid;
}

QList<OAIWlanLocate> OAILocate::getWlan() const {
    return m_wlan;
}
void OAILocate::setWlan(const QList<OAIWlanLocate> &wlan) {
    m_wlan = wlan;
    m_wlan_isSet = true;
}

bool OAILocate::is_wlan_Set() const{
    return m_wlan_isSet;
}

bool OAILocate::is_wlan_Valid() const{
    return m_wlan_isValid;
}

bool OAILocate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cdma.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gsm.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tdscdma.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wcdma.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wlan.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
