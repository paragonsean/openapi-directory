/**
 * HERE Network Positioning API v2
 * Positioning API accepts requests with radio network measurements and replies with corresponding location estimate. For more details and examples, see [Developer's Guide](https://developer.here.com/documentation/positioning). Cellular measurements are given in terms defined in 3GPP and 3GGP2 specifications, see the corresponsing documentation at http://www.3gpp.org.  Breaking changes from v1:   - JSON fields     `altaccuracy`, `baselat`, `baselng`, `cellparams`, `pilotpower`, `pnoffset`, `powrx`, `rxlevel`,     have been deprecated and replaced with     `altAccuracy`, `baseLat`, `baseLng`, `cellParams`, `pilotPower`, `pnOffset`, `rss`, `rxLevel`     respectively.   - Dependent parameters combined as a subobject.     - CDMA, GSM, WCDMA, TD-SCDMA and LTE local identification parameters for serving cell moved under `localId` property.     - GSM neighbor global ID: `lac` and `cid` for neighbor cell moved under `globalIdentity` property. 
 *
 * The version of the OpenAPI document: 2.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGsm.h
 *
 * GSM measurement
 */

#ifndef OAIGsm_H
#define OAIGsm_H

#include <QJsonObject>

#include "OAIGsmLocalId.h"
#include "OAIGsmNmr.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGsmLocalId;
class OAIGsmNmr;

class OAIGsm : public OAIObject {
public:
    OAIGsm();
    OAIGsm(QString json);
    ~OAIGsm() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCid() const;
    void setCid(const qint32 &cid);
    bool is_cid_Set() const;
    bool is_cid_Valid() const;

    qint32 getLac() const;
    void setLac(const qint32 &lac);
    bool is_lac_Set() const;
    bool is_lac_Valid() const;

    OAIGsmLocalId getLocalId() const;
    void setLocalId(const OAIGsmLocalId &local_id);
    bool is_local_id_Set() const;
    bool is_local_id_Valid() const;

    qint32 getMcc() const;
    void setMcc(const qint32 &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    qint32 getMnc() const;
    void setMnc(const qint32 &mnc);
    bool is_mnc_Set() const;
    bool is_mnc_Valid() const;

    QList<OAIGsmNmr> getNmr() const;
    void setNmr(const QList<OAIGsmNmr> &nmr);
    bool is_nmr_Set() const;
    bool is_nmr_Valid() const;

    qint32 getRxLevel() const;
    void setRxLevel(const qint32 &rx_level);
    bool is_rx_level_Set() const;
    bool is_rx_level_Valid() const;

    qint32 getTa() const;
    void setTa(const qint32 &ta);
    bool is_ta_Set() const;
    bool is_ta_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cid;
    bool m_cid_isSet;
    bool m_cid_isValid;

    qint32 m_lac;
    bool m_lac_isSet;
    bool m_lac_isValid;

    OAIGsmLocalId m_local_id;
    bool m_local_id_isSet;
    bool m_local_id_isValid;

    qint32 m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    qint32 m_mnc;
    bool m_mnc_isSet;
    bool m_mnc_isValid;

    QList<OAIGsmNmr> m_nmr;
    bool m_nmr_isSet;
    bool m_nmr_isValid;

    qint32 m_rx_level;
    bool m_rx_level_isSet;
    bool m_rx_level_isValid;

    qint32 m_ta;
    bool m_ta_isSet;
    bool m_ta_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGsm)

#endif // OAIGsm_H
