# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wcdma_local_id import WcdmaLocalId
from openapi_server.models.wcdma_nmr import WcdmaNmr
from openapi_server import util


class Wcdma(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: int=None, lac: int=None, local_id: WcdmaLocalId=None, mcc: int=None, mnc: int=None, nmr: List[WcdmaNmr]=None, pathloss: int=None, rscp: int=None):
        """Wcdma - a model defined in OpenAPI

        :param cid: The cid of this Wcdma.
        :param lac: The lac of this Wcdma.
        :param local_id: The local_id of this Wcdma.
        :param mcc: The mcc of this Wcdma.
        :param mnc: The mnc of this Wcdma.
        :param nmr: The nmr of this Wcdma.
        :param pathloss: The pathloss of this Wcdma.
        :param rscp: The rscp of this Wcdma.
        """
        self.openapi_types = {
            'cid': int,
            'lac': int,
            'local_id': WcdmaLocalId,
            'mcc': int,
            'mnc': int,
            'nmr': List[WcdmaNmr],
            'pathloss': int,
            'rscp': int
        }

        self.attribute_map = {
            'cid': 'cid',
            'lac': 'lac',
            'local_id': 'localId',
            'mcc': 'mcc',
            'mnc': 'mnc',
            'nmr': 'nmr',
            'pathloss': 'pathloss',
            'rscp': 'rscp'
        }

        self._cid = cid
        self._lac = lac
        self._local_id = local_id
        self._mcc = mcc
        self._mnc = mnc
        self._nmr = nmr
        self._pathloss = pathloss
        self._rscp = rscp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Wcdma':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Wcdma of this Wcdma.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this Wcdma.

        UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 

        :return: The cid of this Wcdma.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Wcdma.

        UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 

        :param cid: The cid of this Wcdma.
        :type cid: int
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")
        if cid is not None and cid > 268435455:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `268435455`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def lac(self):
        """Gets the lac of this Wcdma.

        Location Area Code (LAC). Note, value 65534 is invalid.

        :return: The lac of this Wcdma.
        :rtype: int
        """
        return self._lac

    @lac.setter
    def lac(self, lac):
        """Sets the lac of this Wcdma.

        Location Area Code (LAC). Note, value 65534 is invalid.

        :param lac: The lac of this Wcdma.
        :type lac: int
        """
        if lac is not None and lac > 65535:
            raise ValueError("Invalid value for `lac`, must be a value less than or equal to `65535`")
        if lac is not None and lac < 1:
            raise ValueError("Invalid value for `lac`, must be a value greater than or equal to `1`")

        self._lac = lac

    @property
    def local_id(self):
        """Gets the local_id of this Wcdma.


        :return: The local_id of this Wcdma.
        :rtype: WcdmaLocalId
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this Wcdma.


        :param local_id: The local_id of this Wcdma.
        :type local_id: WcdmaLocalId
        """

        self._local_id = local_id

    @property
    def mcc(self):
        """Gets the mcc of this Wcdma.

        Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 

        :return: The mcc of this Wcdma.
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this Wcdma.

        Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 

        :param mcc: The mcc of this Wcdma.
        :type mcc: int
        """
        if mcc is None:
            raise ValueError("Invalid value for `mcc`, must not be `None`")
        if mcc is not None and mcc > 999:
            raise ValueError("Invalid value for `mcc`, must be a value less than or equal to `999`")
        if mcc is not None and mcc < 200:
            raise ValueError("Invalid value for `mcc`, must be a value greater than or equal to `200`")

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this Wcdma.

        Mobile Network Code (MNC).

        :return: The mnc of this Wcdma.
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this Wcdma.

        Mobile Network Code (MNC).

        :param mnc: The mnc of this Wcdma.
        :type mnc: int
        """
        if mnc is None:
            raise ValueError("Invalid value for `mnc`, must not be `None`")
        if mnc is not None and mnc > 999:
            raise ValueError("Invalid value for `mnc`, must be a value less than or equal to `999`")
        if mnc is not None and mnc < 0:
            raise ValueError("Invalid value for `mnc`, must be a value greater than or equal to `0`")

        self._mnc = mnc

    @property
    def nmr(self):
        """Gets the nmr of this Wcdma.

        WCDMA Network measurements. Maximum of 8 distinct uarfcndl frequencies.

        :return: The nmr of this Wcdma.
        :rtype: List[WcdmaNmr]
        """
        return self._nmr

    @nmr.setter
    def nmr(self, nmr):
        """Sets the nmr of this Wcdma.

        WCDMA Network measurements. Maximum of 8 distinct uarfcndl frequencies.

        :param nmr: The nmr of this Wcdma.
        :type nmr: List[WcdmaNmr]
        """
        if nmr is not None and len(nmr) > 32:
            raise ValueError("Invalid value for `nmr`, number of items must be less than or equal to `32`")
        if nmr is not None and len(nmr) < 1:
            raise ValueError("Invalid value for `nmr`, number of items must be greater than or equal to `1`")

        self._nmr = nmr

    @property
    def pathloss(self):
        """Gets the pathloss of this Wcdma.

        UTRAN pathloss (dBm)

        :return: The pathloss of this Wcdma.
        :rtype: int
        """
        return self._pathloss

    @pathloss.setter
    def pathloss(self, pathloss):
        """Sets the pathloss of this Wcdma.

        UTRAN pathloss (dBm)

        :param pathloss: The pathloss of this Wcdma.
        :type pathloss: int
        """
        if pathloss is not None and pathloss > 158:
            raise ValueError("Invalid value for `pathloss`, must be a value less than or equal to `158`")
        if pathloss is not None and pathloss < 46:
            raise ValueError("Invalid value for `pathloss`, must be a value greater than or equal to `46`")

        self._pathloss = pathloss

    @property
    def rscp(self):
        """Gets the rscp of this Wcdma.

        Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 

        :return: The rscp of this Wcdma.
        :rtype: int
        """
        return self._rscp

    @rscp.setter
    def rscp(self, rscp):
        """Sets the rscp of this Wcdma.

        Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 

        :param rscp: The rscp of this Wcdma.
        :type rscp: int
        """
        if rscp is not None and rscp > -25:
            raise ValueError("Invalid value for `rscp`, must be a value less than or equal to `-25`")
        if rscp is not None and rscp < -120:
            raise ValueError("Invalid value for `rscp`, must be a value greater than or equal to `-120`")

        self._rscp = rscp
