# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WcdmaNmr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: int=None, pathloss: int=None, psc: int=None, rscp: int=None, uarfcndl: int=None):
        """WcdmaNmr - a model defined in OpenAPI

        :param cid: The cid of this WcdmaNmr.
        :param pathloss: The pathloss of this WcdmaNmr.
        :param psc: The psc of this WcdmaNmr.
        :param rscp: The rscp of this WcdmaNmr.
        :param uarfcndl: The uarfcndl of this WcdmaNmr.
        """
        self.openapi_types = {
            'cid': int,
            'pathloss': int,
            'psc': int,
            'rscp': int,
            'uarfcndl': int
        }

        self.attribute_map = {
            'cid': 'cid',
            'pathloss': 'pathloss',
            'psc': 'psc',
            'rscp': 'rscp',
            'uarfcndl': 'uarfcndl'
        }

        self._cid = cid
        self._pathloss = pathloss
        self._psc = psc
        self._rscp = rscp
        self._uarfcndl = uarfcndl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WcdmaNmr':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WcdmaNmr of this WcdmaNmr.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this WcdmaNmr.

        UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 

        :return: The cid of this WcdmaNmr.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this WcdmaNmr.

        UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 

        :param cid: The cid of this WcdmaNmr.
        :type cid: int
        """
        if cid is not None and cid > 268435455:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `268435455`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def pathloss(self):
        """Gets the pathloss of this WcdmaNmr.

        UTRAN pathloss (dBm)

        :return: The pathloss of this WcdmaNmr.
        :rtype: int
        """
        return self._pathloss

    @pathloss.setter
    def pathloss(self, pathloss):
        """Sets the pathloss of this WcdmaNmr.

        UTRAN pathloss (dBm)

        :param pathloss: The pathloss of this WcdmaNmr.
        :type pathloss: int
        """
        if pathloss is not None and pathloss > 158:
            raise ValueError("Invalid value for `pathloss`, must be a value less than or equal to `158`")
        if pathloss is not None and pathloss < 46:
            raise ValueError("Invalid value for `pathloss`, must be a value greater than or equal to `46`")

        self._pathloss = pathloss

    @property
    def psc(self):
        """Gets the psc of this WcdmaNmr.

        Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).

        :return: The psc of this WcdmaNmr.
        :rtype: int
        """
        return self._psc

    @psc.setter
    def psc(self, psc):
        """Sets the psc of this WcdmaNmr.

        Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).

        :param psc: The psc of this WcdmaNmr.
        :type psc: int
        """
        if psc is None:
            raise ValueError("Invalid value for `psc`, must not be `None`")
        if psc is not None and psc > 511:
            raise ValueError("Invalid value for `psc`, must be a value less than or equal to `511`")
        if psc is not None and psc < 0:
            raise ValueError("Invalid value for `psc`, must be a value greater than or equal to `0`")

        self._psc = psc

    @property
    def rscp(self):
        """Gets the rscp of this WcdmaNmr.

        Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 

        :return: The rscp of this WcdmaNmr.
        :rtype: int
        """
        return self._rscp

    @rscp.setter
    def rscp(self, rscp):
        """Sets the rscp of this WcdmaNmr.

        Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 

        :param rscp: The rscp of this WcdmaNmr.
        :type rscp: int
        """
        if rscp is not None and rscp > -25:
            raise ValueError("Invalid value for `rscp`, must be a value less than or equal to `-25`")
        if rscp is not None and rscp < -120:
            raise ValueError("Invalid value for `rscp`, must be a value greater than or equal to `-120`")

        self._rscp = rscp

    @property
    def uarfcndl(self):
        """Gets the uarfcndl of this WcdmaNmr.

        UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)

        :return: The uarfcndl of this WcdmaNmr.
        :rtype: int
        """
        return self._uarfcndl

    @uarfcndl.setter
    def uarfcndl(self, uarfcndl):
        """Sets the uarfcndl of this WcdmaNmr.

        UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)

        :param uarfcndl: The uarfcndl of this WcdmaNmr.
        :type uarfcndl: int
        """
        if uarfcndl is None:
            raise ValueError("Invalid value for `uarfcndl`, must not be `None`")
        if uarfcndl is not None and uarfcndl > 16383:
            raise ValueError("Invalid value for `uarfcndl`, must be a value less than or equal to `16383`")
        if uarfcndl is not None and uarfcndl < 0:
            raise ValueError("Invalid value for `uarfcndl`, must be a value greater than or equal to `0`")

        self._uarfcndl = uarfcndl
