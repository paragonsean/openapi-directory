# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CdmaLocalId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: int=None, pn_offset: int=None):
        """CdmaLocalId - a model defined in OpenAPI

        :param channel: The channel of this CdmaLocalId.
        :param pn_offset: The pn_offset of this CdmaLocalId.
        """
        self.openapi_types = {
            'channel': int,
            'pn_offset': int
        }

        self.attribute_map = {
            'channel': 'channel',
            'pn_offset': 'pnOffset'
        }

        self._channel = channel
        self._pn_offset = pn_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdmaLocalId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdmaLocalId of this CdmaLocalId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this CdmaLocalId.

        CDMA channel frequency

        :return: The channel of this CdmaLocalId.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CdmaLocalId.

        CDMA channel frequency

        :param channel: The channel of this CdmaLocalId.
        :type channel: int
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")
        if channel is not None and channel > 2047:
            raise ValueError("Invalid value for `channel`, must be a value less than or equal to `2047`")
        if channel is not None and channel < 0:
            raise ValueError("Invalid value for `channel`, must be a value greater than or equal to `0`")

        self._channel = channel

    @property
    def pn_offset(self):
        """Gets the pn_offset of this CdmaLocalId.

        Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell. 

        :return: The pn_offset of this CdmaLocalId.
        :rtype: int
        """
        return self._pn_offset

    @pn_offset.setter
    def pn_offset(self, pn_offset):
        """Sets the pn_offset of this CdmaLocalId.

        Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell. 

        :param pn_offset: The pn_offset of this CdmaLocalId.
        :type pn_offset: int
        """
        if pn_offset is None:
            raise ValueError("Invalid value for `pn_offset`, must not be `None`")
        if pn_offset is not None and pn_offset > 511:
            raise ValueError("Invalid value for `pn_offset`, must be a value less than or equal to `511`")
        if pn_offset is not None and pn_offset < 0:
            raise ValueError("Invalid value for `pn_offset`, must be a value greater than or equal to `0`")

        self._pn_offset = pn_offset
