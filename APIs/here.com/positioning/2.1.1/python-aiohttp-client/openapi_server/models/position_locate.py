# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PositionLocate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy: float=None, alt: float=None, alt_accuracy: float=None, lat: float=None, lng: float=None):
        """PositionLocate - a model defined in OpenAPI

        :param accuracy: The accuracy of this PositionLocate.
        :param alt: The alt of this PositionLocate.
        :param alt_accuracy: The alt_accuracy of this PositionLocate.
        :param lat: The lat of this PositionLocate.
        :param lng: The lng of this PositionLocate.
        """
        self.openapi_types = {
            'accuracy': float,
            'alt': float,
            'alt_accuracy': float,
            'lat': float,
            'lng': float
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'alt': 'alt',
            'alt_accuracy': 'altAccuracy',
            'lat': 'lat',
            'lng': 'lng'
        }

        self._accuracy = accuracy
        self._alt = alt
        self._alt_accuracy = alt_accuracy
        self._lat = lat
        self._lng = lng

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PositionLocate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PositionLocate of this PositionLocate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this PositionLocate.

        Uncertainty circle radius in meters (degree of confidence according to the `confidence` parameter).

        :return: The accuracy of this PositionLocate.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this PositionLocate.

        Uncertainty circle radius in meters (degree of confidence according to the `confidence` parameter).

        :param accuracy: The accuracy of this PositionLocate.
        :type accuracy: float
        """
        if accuracy is None:
            raise ValueError("Invalid value for `accuracy`, must not be `None`")
        if accuracy is not None and accuracy < 1:
            raise ValueError("Invalid value for `accuracy`, must be a value greater than or equal to `1`")

        self._accuracy = accuracy

    @property
    def alt(self):
        """Gets the alt of this PositionLocate.

        Altitude in meters (referenced to the WGS-84 ellipsoid) negative or positive.

        :return: The alt of this PositionLocate.
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this PositionLocate.

        Altitude in meters (referenced to the WGS-84 ellipsoid) negative or positive.

        :param alt: The alt of this PositionLocate.
        :type alt: float
        """

        self._alt = alt

    @property
    def alt_accuracy(self):
        """Gets the alt_accuracy of this PositionLocate.

        Uncertainty of the altitude estimate in meters (degree of confidence according to the `confidence` parameter). This field superceeds old `altaccuracy`. 

        :return: The alt_accuracy of this PositionLocate.
        :rtype: float
        """
        return self._alt_accuracy

    @alt_accuracy.setter
    def alt_accuracy(self, alt_accuracy):
        """Sets the alt_accuracy of this PositionLocate.

        Uncertainty of the altitude estimate in meters (degree of confidence according to the `confidence` parameter). This field superceeds old `altaccuracy`. 

        :param alt_accuracy: The alt_accuracy of this PositionLocate.
        :type alt_accuracy: float
        """
        if alt_accuracy is not None and alt_accuracy < 1:
            raise ValueError("Invalid value for `alt_accuracy`, must be a value greater than or equal to `1`")

        self._alt_accuracy = alt_accuracy

    @property
    def lat(self):
        """Gets the lat of this PositionLocate.

        Latitude in WGS-84 format, decimal representation ranging from -90 to 90.

        :return: The lat of this PositionLocate.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this PositionLocate.

        Latitude in WGS-84 format, decimal representation ranging from -90 to 90.

        :param lat: The lat of this PositionLocate.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")
        if lat is not None and lat > 90:
            raise ValueError("Invalid value for `lat`, must be a value less than or equal to `90`")
        if lat is not None and lat < -90:
            raise ValueError("Invalid value for `lat`, must be a value greater than or equal to `-90`")

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this PositionLocate.

        Longitude in WGS-84 format, decimal representation ranging from -180 to 180.

        :return: The lng of this PositionLocate.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this PositionLocate.

        Longitude in WGS-84 format, decimal representation ranging from -180 to 180.

        :param lng: The lng of this PositionLocate.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")
        if lng is not None and lng > 180:
            raise ValueError("Invalid value for `lng`, must be a value less than or equal to `180`")
        if lng is not None and lng < -180:
            raise ValueError("Invalid value for `lng`, must be a value greater than or equal to `-180`")

        self._lng = lng
