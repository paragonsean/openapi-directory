# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cdma_local_id import CdmaLocalId
from openapi_server.models.cdma_nmr import CdmaNmr
from openapi_server import util


class Cdma(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_lat: float=None, base_lng: float=None, bsid: int=None, local_id: CdmaLocalId=None, nid: int=None, nmr: List[CdmaNmr]=None, pilot_power: int=None, rz: int=None, sid: int=None):
        """Cdma - a model defined in OpenAPI

        :param base_lat: The base_lat of this Cdma.
        :param base_lng: The base_lng of this Cdma.
        :param bsid: The bsid of this Cdma.
        :param local_id: The local_id of this Cdma.
        :param nid: The nid of this Cdma.
        :param nmr: The nmr of this Cdma.
        :param pilot_power: The pilot_power of this Cdma.
        :param rz: The rz of this Cdma.
        :param sid: The sid of this Cdma.
        """
        self.openapi_types = {
            'base_lat': float,
            'base_lng': float,
            'bsid': int,
            'local_id': CdmaLocalId,
            'nid': int,
            'nmr': List[CdmaNmr],
            'pilot_power': int,
            'rz': int,
            'sid': int
        }

        self.attribute_map = {
            'base_lat': 'baseLat',
            'base_lng': 'baseLng',
            'bsid': 'bsid',
            'local_id': 'localId',
            'nid': 'nid',
            'nmr': 'nmr',
            'pilot_power': 'pilotPower',
            'rz': 'rz',
            'sid': 'sid'
        }

        self._base_lat = base_lat
        self._base_lng = base_lng
        self._bsid = bsid
        self._local_id = local_id
        self._nid = nid
        self._nmr = nmr
        self._pilot_power = pilot_power
        self._rz = rz
        self._sid = sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cdma':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cdma of this Cdma.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_lat(self):
        """Gets the base_lat of this Cdma.

        Base station latitude

        :return: The base_lat of this Cdma.
        :rtype: float
        """
        return self._base_lat

    @base_lat.setter
    def base_lat(self, base_lat):
        """Sets the base_lat of this Cdma.

        Base station latitude

        :param base_lat: The base_lat of this Cdma.
        :type base_lat: float
        """
        if base_lat is not None and base_lat > 90:
            raise ValueError("Invalid value for `base_lat`, must be a value less than or equal to `90`")
        if base_lat is not None and base_lat < -90:
            raise ValueError("Invalid value for `base_lat`, must be a value greater than or equal to `-90`")

        self._base_lat = base_lat

    @property
    def base_lng(self):
        """Gets the base_lng of this Cdma.

        Base station longitude

        :return: The base_lng of this Cdma.
        :rtype: float
        """
        return self._base_lng

    @base_lng.setter
    def base_lng(self, base_lng):
        """Sets the base_lng of this Cdma.

        Base station longitude

        :param base_lng: The base_lng of this Cdma.
        :type base_lng: float
        """
        if base_lng is not None and base_lng > 180:
            raise ValueError("Invalid value for `base_lng`, must be a value less than or equal to `180`")
        if base_lng is not None and base_lng < -180:
            raise ValueError("Invalid value for `base_lng`, must be a value greater than or equal to `-180`")

        self._base_lng = base_lng

    @property
    def bsid(self):
        """Gets the bsid of this Cdma.

        Base Station ID (CDMA BSID, BID)

        :return: The bsid of this Cdma.
        :rtype: int
        """
        return self._bsid

    @bsid.setter
    def bsid(self, bsid):
        """Sets the bsid of this Cdma.

        Base Station ID (CDMA BSID, BID)

        :param bsid: The bsid of this Cdma.
        :type bsid: int
        """
        if bsid is None:
            raise ValueError("Invalid value for `bsid`, must not be `None`")
        if bsid is not None and bsid > 65535:
            raise ValueError("Invalid value for `bsid`, must be a value less than or equal to `65535`")
        if bsid is not None and bsid < 0:
            raise ValueError("Invalid value for `bsid`, must be a value greater than or equal to `0`")

        self._bsid = bsid

    @property
    def local_id(self):
        """Gets the local_id of this Cdma.


        :return: The local_id of this Cdma.
        :rtype: CdmaLocalId
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this Cdma.


        :param local_id: The local_id of this Cdma.
        :type local_id: CdmaLocalId
        """

        self._local_id = local_id

    @property
    def nid(self):
        """Gets the nid of this Cdma.

        Network ID (NID)

        :return: The nid of this Cdma.
        :rtype: int
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this Cdma.

        Network ID (NID)

        :param nid: The nid of this Cdma.
        :type nid: int
        """
        if nid is None:
            raise ValueError("Invalid value for `nid`, must not be `None`")
        if nid is not None and nid > 65535:
            raise ValueError("Invalid value for `nid`, must be a value less than or equal to `65535`")
        if nid is not None and nid < 0:
            raise ValueError("Invalid value for `nid`, must be a value greater than or equal to `0`")

        self._nid = nid

    @property
    def nmr(self):
        """Gets the nmr of this Cdma.

        CDMA Network measurements

        :return: The nmr of this Cdma.
        :rtype: List[CdmaNmr]
        """
        return self._nmr

    @nmr.setter
    def nmr(self, nmr):
        """Sets the nmr of this Cdma.

        CDMA Network measurements

        :param nmr: The nmr of this Cdma.
        :type nmr: List[CdmaNmr]
        """
        if nmr is not None and len(nmr) > 32:
            raise ValueError("Invalid value for `nmr`, number of items must be less than or equal to `32`")
        if nmr is not None and len(nmr) < 1:
            raise ValueError("Invalid value for `nmr`, number of items must be greater than or equal to `1`")

        self._nmr = nmr

    @property
    def pilot_power(self):
        """Gets the pilot_power of this Cdma.

        Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49. 

        :return: The pilot_power of this Cdma.
        :rtype: int
        """
        return self._pilot_power

    @pilot_power.setter
    def pilot_power(self, pilot_power):
        """Sets the pilot_power of this Cdma.

        Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49. 

        :param pilot_power: The pilot_power of this Cdma.
        :type pilot_power: int
        """
        if pilot_power is not None and pilot_power > -49:
            raise ValueError("Invalid value for `pilot_power`, must be a value less than or equal to `-49`")
        if pilot_power is not None and pilot_power < -142:
            raise ValueError("Invalid value for `pilot_power`, must be a value greater than or equal to `-142`")

        self._pilot_power = pilot_power

    @property
    def rz(self):
        """Gets the rz of this Cdma.

        CDMA Registration Zone (RZ)

        :return: The rz of this Cdma.
        :rtype: int
        """
        return self._rz

    @rz.setter
    def rz(self, rz):
        """Sets the rz of this Cdma.

        CDMA Registration Zone (RZ)

        :param rz: The rz of this Cdma.
        :type rz: int
        """
        if rz is not None and rz > 4095:
            raise ValueError("Invalid value for `rz`, must be a value less than or equal to `4095`")
        if rz is not None and rz < 0:
            raise ValueError("Invalid value for `rz`, must be a value greater than or equal to `0`")

        self._rz = rz

    @property
    def sid(self):
        """Gets the sid of this Cdma.

        System ID (SID)

        :return: The sid of this Cdma.
        :rtype: int
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this Cdma.

        System ID (SID)

        :param sid: The sid of this Cdma.
        :type sid: int
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")
        if sid is not None and sid > 32767:
            raise ValueError("Invalid value for `sid`, must be a value less than or equal to `32767`")
        if sid is not None and sid < 1:
            raise ValueError("Invalid value for `sid`, must be a value greater than or equal to `1`")

        self._sid = sid
