# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gsm_local_id import GsmLocalId
from openapi_server.models.gsm_nmr import GsmNmr
from openapi_server import util


class Gsm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: int=None, lac: int=None, local_id: GsmLocalId=None, mcc: int=None, mnc: int=None, nmr: List[GsmNmr]=None, rx_level: int=None, ta: int=None):
        """Gsm - a model defined in OpenAPI

        :param cid: The cid of this Gsm.
        :param lac: The lac of this Gsm.
        :param local_id: The local_id of this Gsm.
        :param mcc: The mcc of this Gsm.
        :param mnc: The mnc of this Gsm.
        :param nmr: The nmr of this Gsm.
        :param rx_level: The rx_level of this Gsm.
        :param ta: The ta of this Gsm.
        """
        self.openapi_types = {
            'cid': int,
            'lac': int,
            'local_id': GsmLocalId,
            'mcc': int,
            'mnc': int,
            'nmr': List[GsmNmr],
            'rx_level': int,
            'ta': int
        }

        self.attribute_map = {
            'cid': 'cid',
            'lac': 'lac',
            'local_id': 'localId',
            'mcc': 'mcc',
            'mnc': 'mnc',
            'nmr': 'nmr',
            'rx_level': 'rxLevel',
            'ta': 'ta'
        }

        self._cid = cid
        self._lac = lac
        self._local_id = local_id
        self._mcc = mcc
        self._mnc = mnc
        self._nmr = nmr
        self._rx_level = rx_level
        self._ta = ta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gsm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gsm of this Gsm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this Gsm.

        Cell identifier (GERAN CID)

        :return: The cid of this Gsm.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Gsm.

        Cell identifier (GERAN CID)

        :param cid: The cid of this Gsm.
        :type cid: int
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")
        if cid is not None and cid > 65535:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `65535`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def lac(self):
        """Gets the lac of this Gsm.

        Location Area Code (LAC). Note, value 65534 is invalid.

        :return: The lac of this Gsm.
        :rtype: int
        """
        return self._lac

    @lac.setter
    def lac(self, lac):
        """Sets the lac of this Gsm.

        Location Area Code (LAC). Note, value 65534 is invalid.

        :param lac: The lac of this Gsm.
        :type lac: int
        """
        if lac is None:
            raise ValueError("Invalid value for `lac`, must not be `None`")
        if lac is not None and lac > 65535:
            raise ValueError("Invalid value for `lac`, must be a value less than or equal to `65535`")
        if lac is not None and lac < 1:
            raise ValueError("Invalid value for `lac`, must be a value greater than or equal to `1`")

        self._lac = lac

    @property
    def local_id(self):
        """Gets the local_id of this Gsm.


        :return: The local_id of this Gsm.
        :rtype: GsmLocalId
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this Gsm.


        :param local_id: The local_id of this Gsm.
        :type local_id: GsmLocalId
        """

        self._local_id = local_id

    @property
    def mcc(self):
        """Gets the mcc of this Gsm.

        Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 

        :return: The mcc of this Gsm.
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this Gsm.

        Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 

        :param mcc: The mcc of this Gsm.
        :type mcc: int
        """
        if mcc is None:
            raise ValueError("Invalid value for `mcc`, must not be `None`")
        if mcc is not None and mcc > 999:
            raise ValueError("Invalid value for `mcc`, must be a value less than or equal to `999`")
        if mcc is not None and mcc < 200:
            raise ValueError("Invalid value for `mcc`, must be a value greater than or equal to `200`")

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this Gsm.

        Mobile Network Code (MNC).

        :return: The mnc of this Gsm.
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this Gsm.

        Mobile Network Code (MNC).

        :param mnc: The mnc of this Gsm.
        :type mnc: int
        """
        if mnc is None:
            raise ValueError("Invalid value for `mnc`, must not be `None`")
        if mnc is not None and mnc > 999:
            raise ValueError("Invalid value for `mnc`, must be a value less than or equal to `999`")
        if mnc is not None and mnc < 0:
            raise ValueError("Invalid value for `mnc`, must be a value greater than or equal to `0`")

        self._mnc = mnc

    @property
    def nmr(self):
        """Gets the nmr of this Gsm.

        GSM Network measurements

        :return: The nmr of this Gsm.
        :rtype: List[GsmNmr]
        """
        return self._nmr

    @nmr.setter
    def nmr(self, nmr):
        """Sets the nmr of this Gsm.

        GSM Network measurements

        :param nmr: The nmr of this Gsm.
        :type nmr: List[GsmNmr]
        """
        if nmr is not None and len(nmr) > 32:
            raise ValueError("Invalid value for `nmr`, number of items must be less than or equal to `32`")
        if nmr is not None and len(nmr) < 1:
            raise ValueError("Invalid value for `nmr`, number of items must be greater than or equal to `1`")

        self._nmr = nmr

    @property
    def rx_level(self):
        """Gets the rx_level of this Gsm.

        Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25. 

        :return: The rx_level of this Gsm.
        :rtype: int
        """
        return self._rx_level

    @rx_level.setter
    def rx_level(self, rx_level):
        """Sets the rx_level of this Gsm.

        Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25. 

        :param rx_level: The rx_level of this Gsm.
        :type rx_level: int
        """
        if rx_level is not None and rx_level > -25:
            raise ValueError("Invalid value for `rx_level`, must be a value less than or equal to `-25`")
        if rx_level is not None and rx_level < -110:
            raise ValueError("Invalid value for `rx_level`, must be a value greater than or equal to `-110`")

        self._rx_level = rx_level

    @property
    def ta(self):
        """Gets the ta of this Gsm.

        Timing advance (TA). Expressed in the units of GSM bits equaling to 48/13 μs ~ 1107 meters.

        :return: The ta of this Gsm.
        :rtype: int
        """
        return self._ta

    @ta.setter
    def ta(self, ta):
        """Sets the ta of this Gsm.

        Timing advance (TA). Expressed in the units of GSM bits equaling to 48/13 μs ~ 1107 meters.

        :param ta: The ta of this Gsm.
        :type ta: int
        """
        if ta is not None and ta > 63:
            raise ValueError("Invalid value for `ta`, must be a value less than or equal to `63`")
        if ta is not None and ta < 0:
            raise ValueError("Invalid value for `ta`, must be a value greater than or equal to `0`")

        self._ta = ta
