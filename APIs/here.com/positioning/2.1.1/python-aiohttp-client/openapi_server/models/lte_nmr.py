# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LteNmr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: int=None, earfcn: int=None, pci: int=None, rsrp: int=None, rsrq: float=None):
        """LteNmr - a model defined in OpenAPI

        :param cid: The cid of this LteNmr.
        :param earfcn: The earfcn of this LteNmr.
        :param pci: The pci of this LteNmr.
        :param rsrp: The rsrp of this LteNmr.
        :param rsrq: The rsrq of this LteNmr.
        """
        self.openapi_types = {
            'cid': int,
            'earfcn': int,
            'pci': int,
            'rsrp': int,
            'rsrq': float
        }

        self.attribute_map = {
            'cid': 'cid',
            'earfcn': 'earfcn',
            'pci': 'pci',
            'rsrp': 'rsrp',
            'rsrq': 'rsrq'
        }

        self._cid = cid
        self._earfcn = earfcn
        self._pci = pci
        self._rsrp = rsrp
        self._rsrq = rsrq

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LteNmr':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LteNmr of this LteNmr.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this LteNmr.

        E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 

        :return: The cid of this LteNmr.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this LteNmr.

        E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 

        :param cid: The cid of this LteNmr.
        :type cid: int
        """
        if cid is not None and cid > 268435455:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `268435455`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def earfcn(self):
        """Gets the earfcn of this LteNmr.

        Evolved Absolute Radio Frequency Channel (E-ARFCN)

        :return: The earfcn of this LteNmr.
        :rtype: int
        """
        return self._earfcn

    @earfcn.setter
    def earfcn(self, earfcn):
        """Sets the earfcn of this LteNmr.

        Evolved Absolute Radio Frequency Channel (E-ARFCN)

        :param earfcn: The earfcn of this LteNmr.
        :type earfcn: int
        """
        if earfcn is None:
            raise ValueError("Invalid value for `earfcn`, must not be `None`")
        if earfcn is not None and earfcn > 262143:
            raise ValueError("Invalid value for `earfcn`, must be a value less than or equal to `262143`")
        if earfcn is not None and earfcn < 0:
            raise ValueError("Invalid value for `earfcn`, must be a value greater than or equal to `0`")

        self._earfcn = earfcn

    @property
    def pci(self):
        """Gets the pci of this LteNmr.

        Physical Cell Identity (PCI)

        :return: The pci of this LteNmr.
        :rtype: int
        """
        return self._pci

    @pci.setter
    def pci(self, pci):
        """Sets the pci of this LteNmr.

        Physical Cell Identity (PCI)

        :param pci: The pci of this LteNmr.
        :type pci: int
        """
        if pci is None:
            raise ValueError("Invalid value for `pci`, must not be `None`")
        if pci is not None and pci > 503:
            raise ValueError("Invalid value for `pci`, must be a value less than or equal to `503`")
        if pci is not None and pci < 0:
            raise ValueError("Invalid value for `pci`, must be a value greater than or equal to `0`")

        self._pci = pci

    @property
    def rsrp(self):
        """Gets the rsrp of this LteNmr.

        Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 

        :return: The rsrp of this LteNmr.
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this LteNmr.

        Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 

        :param rsrp: The rsrp of this LteNmr.
        :type rsrp: int
        """
        if rsrp is not None and rsrp > -44:
            raise ValueError("Invalid value for `rsrp`, must be a value less than or equal to `-44`")
        if rsrp is not None and rsrp < -140:
            raise ValueError("Invalid value for `rsrp`, must be a value greater than or equal to `-140`")

        self._rsrp = rsrp

    @property
    def rsrq(self):
        """Gets the rsrq of this LteNmr.

        Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 

        :return: The rsrq of this LteNmr.
        :rtype: float
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this LteNmr.

        Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 

        :param rsrq: The rsrq of this LteNmr.
        :type rsrq: float
        """
        if rsrq is not None and rsrq > -3:
            raise ValueError("Invalid value for `rsrq`, must be a value less than or equal to `-3`")
        if rsrq is not None and rsrq < -19.5:
            raise ValueError("Invalid value for `rsrq`, must be a value greater than or equal to `-19.5`")

        self._rsrq = rsrq
