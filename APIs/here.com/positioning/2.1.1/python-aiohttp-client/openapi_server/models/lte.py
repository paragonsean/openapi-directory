# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lte_local_id import LteLocalId
from openapi_server.models.lte_nmr import LteNmr
from openapi_server import util


class Lte(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: int=None, local_id: LteLocalId=None, mcc: int=None, mnc: int=None, nmr: List[LteNmr]=None, rsrp: int=None, rsrq: float=None, ta: int=None, tac: int=None):
        """Lte - a model defined in OpenAPI

        :param cid: The cid of this Lte.
        :param local_id: The local_id of this Lte.
        :param mcc: The mcc of this Lte.
        :param mnc: The mnc of this Lte.
        :param nmr: The nmr of this Lte.
        :param rsrp: The rsrp of this Lte.
        :param rsrq: The rsrq of this Lte.
        :param ta: The ta of this Lte.
        :param tac: The tac of this Lte.
        """
        self.openapi_types = {
            'cid': int,
            'local_id': LteLocalId,
            'mcc': int,
            'mnc': int,
            'nmr': List[LteNmr],
            'rsrp': int,
            'rsrq': float,
            'ta': int,
            'tac': int
        }

        self.attribute_map = {
            'cid': 'cid',
            'local_id': 'localId',
            'mcc': 'mcc',
            'mnc': 'mnc',
            'nmr': 'nmr',
            'rsrp': 'rsrp',
            'rsrq': 'rsrq',
            'ta': 'ta',
            'tac': 'tac'
        }

        self._cid = cid
        self._local_id = local_id
        self._mcc = mcc
        self._mnc = mnc
        self._nmr = nmr
        self._rsrp = rsrp
        self._rsrq = rsrq
        self._ta = ta
        self._tac = tac

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Lte':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Lte of this Lte.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this Lte.

        E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 

        :return: The cid of this Lte.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Lte.

        E-UTRA Cell Identifier (UC-Id), 28 bits (20 bits eNodeB and 8 bits Cell ID). MCC + MNC + CID uniquely identifies the LTE cell, TAC is optional. 

        :param cid: The cid of this Lte.
        :type cid: int
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")
        if cid is not None and cid > 268435455:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `268435455`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def local_id(self):
        """Gets the local_id of this Lte.


        :return: The local_id of this Lte.
        :rtype: LteLocalId
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this Lte.


        :param local_id: The local_id of this Lte.
        :type local_id: LteLocalId
        """

        self._local_id = local_id

    @property
    def mcc(self):
        """Gets the mcc of this Lte.

        Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 

        :return: The mcc of this Lte.
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this Lte.

        Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used 

        :param mcc: The mcc of this Lte.
        :type mcc: int
        """
        if mcc is None:
            raise ValueError("Invalid value for `mcc`, must not be `None`")
        if mcc is not None and mcc > 999:
            raise ValueError("Invalid value for `mcc`, must be a value less than or equal to `999`")
        if mcc is not None and mcc < 200:
            raise ValueError("Invalid value for `mcc`, must be a value greater than or equal to `200`")

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this Lte.

        Mobile Network Code (MNC).

        :return: The mnc of this Lte.
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this Lte.

        Mobile Network Code (MNC).

        :param mnc: The mnc of this Lte.
        :type mnc: int
        """
        if mnc is None:
            raise ValueError("Invalid value for `mnc`, must not be `None`")
        if mnc is not None and mnc > 999:
            raise ValueError("Invalid value for `mnc`, must be a value less than or equal to `999`")
        if mnc is not None and mnc < 0:
            raise ValueError("Invalid value for `mnc`, must be a value greater than or equal to `0`")

        self._mnc = mnc

    @property
    def nmr(self):
        """Gets the nmr of this Lte.

        LTE Network measurements

        :return: The nmr of this Lte.
        :rtype: List[LteNmr]
        """
        return self._nmr

    @nmr.setter
    def nmr(self, nmr):
        """Sets the nmr of this Lte.

        LTE Network measurements

        :param nmr: The nmr of this Lte.
        :type nmr: List[LteNmr]
        """
        if nmr is not None and len(nmr) > 32:
            raise ValueError("Invalid value for `nmr`, number of items must be less than or equal to `32`")
        if nmr is not None and len(nmr) < 1:
            raise ValueError("Invalid value for `nmr`, number of items must be greater than or equal to `1`")

        self._nmr = nmr

    @property
    def rsrp(self):
        """Gets the rsrp of this Lte.

        Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 

        :return: The rsrp of this Lte.
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this Lte.

        Reference Signal Received Power (RSRP) in dBm. Power less than -140dBm should be mapped to -140. Power greater than -44dBm should be mapped to -44. 

        :param rsrp: The rsrp of this Lte.
        :type rsrp: int
        """
        if rsrp is not None and rsrp > -44:
            raise ValueError("Invalid value for `rsrp`, must be a value less than or equal to `-44`")
        if rsrp is not None and rsrp < -140:
            raise ValueError("Invalid value for `rsrp`, must be a value greater than or equal to `-140`")

        self._rsrp = rsrp

    @property
    def rsrq(self):
        """Gets the rsrq of this Lte.

        Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 

        :return: The rsrq of this Lte.
        :rtype: float
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this Lte.

        Reference Signal Received Quality (RSRQ) in dBm. Values less than -19.5dB should be mapped to -19.5, and values greater than -3dB should be mapped to -3dB. 

        :param rsrq: The rsrq of this Lte.
        :type rsrq: float
        """
        if rsrq is not None and rsrq > -3:
            raise ValueError("Invalid value for `rsrq`, must be a value less than or equal to `-3`")
        if rsrq is not None and rsrq < -19.5:
            raise ValueError("Invalid value for `rsrq`, must be a value greater than or equal to `-19.5`")

        self._rsrq = rsrq

    @property
    def ta(self):
        """Gets the ta of this Lte.

        Timing Advance. Expressed in the units of 16*Ts (16 Basic time units) = 16/(15000*2048) seconds ~ 156meters. For reference see 3GPP TS 36.213 and 36.211. 

        :return: The ta of this Lte.
        :rtype: int
        """
        return self._ta

    @ta.setter
    def ta(self, ta):
        """Sets the ta of this Lte.

        Timing Advance. Expressed in the units of 16*Ts (16 Basic time units) = 16/(15000*2048) seconds ~ 156meters. For reference see 3GPP TS 36.213 and 36.211. 

        :param ta: The ta of this Lte.
        :type ta: int
        """
        if ta is not None and ta > 1282:
            raise ValueError("Invalid value for `ta`, must be a value less than or equal to `1282`")
        if ta is not None and ta < 0:
            raise ValueError("Invalid value for `ta`, must be a value greater than or equal to `0`")

        self._ta = ta

    @property
    def tac(self):
        """Gets the tac of this Lte.

        Tracking Area Code (TAC)

        :return: The tac of this Lte.
        :rtype: int
        """
        return self._tac

    @tac.setter
    def tac(self, tac):
        """Sets the tac of this Lte.

        Tracking Area Code (TAC)

        :param tac: The tac of this Lte.
        :type tac: int
        """
        if tac is not None and tac > 65535:
            raise ValueError("Invalid value for `tac`, must be a value less than or equal to `65535`")
        if tac is not None and tac < 0:
            raise ValueError("Invalid value for `tac`, must be a value greater than or equal to `0`")

        self._tac = tac
