# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, cause: str=None, code: str=None, correlation_id: str=None, details: List[ErrorDetail]=None, status: float=None, title: str=None):
        """Error - a model defined in OpenAPI

        :param action: The action of this Error.
        :param cause: The cause of this Error.
        :param code: The code of this Error.
        :param correlation_id: The correlation_id of this Error.
        :param details: The details of this Error.
        :param status: The status of this Error.
        :param title: The title of this Error.
        """
        self.openapi_types = {
            'action': str,
            'cause': str,
            'code': str,
            'correlation_id': str,
            'details': List[ErrorDetail],
            'status': float,
            'title': str
        }

        self.attribute_map = {
            'action': 'action',
            'cause': 'cause',
            'code': 'code',
            'correlation_id': 'correlationId',
            'details': 'details',
            'status': 'status',
            'title': 'title'
        }

        self._action = action
        self._cause = cause
        self._code = code
        self._correlation_id = correlation_id
        self._details = details
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Error.

        Actionable instructions for the user

        :return: The action of this Error.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Error.

        Actionable instructions for the user

        :param action: The action of this Error.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def cause(self):
        """Gets the cause of this Error.

        Reason for the error

        :return: The cause of this Error.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this Error.

        Reason for the error

        :param cause: The cause of this Error.
        :type cause: str
        """
        if cause is None:
            raise ValueError("Invalid value for `cause`, must not be `None`")

        self._cause = cause

    @property
    def code(self):
        """Gets the code of this Error.

        Error code

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        Error code

        :param code: The code of this Error.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def correlation_id(self):
        """Gets the correlation_id of this Error.

        Copy from X-Correlation-ID header for logging

        :return: The correlation_id of this Error.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this Error.

        Copy from X-Correlation-ID header for logging

        :param correlation_id: The correlation_id of this Error.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def details(self):
        """Gets the details of this Error.


        :return: The details of this Error.
        :rtype: List[ErrorDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Error.


        :param details: The details of this Error.
        :type details: List[ErrorDetail]
        """

        self._details = details

    @property
    def status(self):
        """Gets the status of this Error.

        Equals HTTP status code

        :return: The status of this Error.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.

        Equals HTTP status code

        :param status: The status of this Error.
        :type status: float
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this Error.

        Localized error string

        :return: The title of this Error.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Error.

        Localized error string

        :param title: The title of this Error.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
