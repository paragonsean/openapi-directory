# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firmware: str=None, manufacturer: str=None, model: str=None, name: str=None, platform: str=None, version: str=None):
        """ClientInfo - a model defined in OpenAPI

        :param firmware: The firmware of this ClientInfo.
        :param manufacturer: The manufacturer of this ClientInfo.
        :param model: The model of this ClientInfo.
        :param name: The name of this ClientInfo.
        :param platform: The platform of this ClientInfo.
        :param version: The version of this ClientInfo.
        """
        self.openapi_types = {
            'firmware': str,
            'manufacturer': str,
            'model': str,
            'name': str,
            'platform': str,
            'version': str
        }

        self.attribute_map = {
            'firmware': 'firmware',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'name': 'name',
            'platform': 'platform',
            'version': 'version'
        }

        self._firmware = firmware
        self._manufacturer = manufacturer
        self._model = model
        self._name = name
        self._platform = platform
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientInfo of this ClientInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firmware(self):
        """Gets the firmware of this ClientInfo.

        Device firmware version information

        :return: The firmware of this ClientInfo.
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this ClientInfo.

        Device firmware version information

        :param firmware: The firmware of this ClientInfo.
        :type firmware: str
        """
        if firmware is not None and len(firmware) > 150:
            raise ValueError("Invalid value for `firmware`, length must be less than or equal to `150`")
        if firmware is not None and len(firmware) < 1:
            raise ValueError("Invalid value for `firmware`, length must be greater than or equal to `1`")

        self._firmware = firmware

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ClientInfo.

        Manufacturer of the device (hardware)

        :return: The manufacturer of this ClientInfo.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ClientInfo.

        Manufacturer of the device (hardware)

        :param manufacturer: The manufacturer of this ClientInfo.
        :type manufacturer: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")
        if manufacturer is not None and len(manufacturer) > 50:
            raise ValueError("Invalid value for `manufacturer`, length must be less than or equal to `50`")
        if manufacturer is not None and len(manufacturer) < 2:
            raise ValueError("Invalid value for `manufacturer`, length must be greater than or equal to `2`")

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this ClientInfo.

        Model of the device (hardware)

        :return: The model of this ClientInfo.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ClientInfo.

        Model of the device (hardware)

        :param model: The model of this ClientInfo.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")
        if model is not None and len(model) > 50:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `50`")
        if model is not None and len(model) < 1:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")

        self._model = model

    @property
    def name(self):
        """Gets the name of this ClientInfo.

        Name of the client software accessing the HERE API

        :return: The name of this ClientInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientInfo.

        Name of the client software accessing the HERE API

        :param name: The name of this ClientInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this ClientInfo.

        Software platform information of the device, for example operating system name and version.

        :return: The platform of this ClientInfo.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ClientInfo.

        Software platform information of the device, for example operating system name and version.

        :param platform: The platform of this ClientInfo.
        :type platform: str
        """
        if platform is not None and len(platform) > 50:
            raise ValueError("Invalid value for `platform`, length must be less than or equal to `50`")
        if platform is not None and len(platform) < 3:
            raise ValueError("Invalid value for `platform`, length must be greater than or equal to `3`")

        self._platform = platform

    @property
    def version(self):
        """Gets the version of this ClientInfo.

        Version of the client software in format X.Y.Z, where X [0..255] is a major, Y [0..255] is a minor, and Z [0..65535] is a build version number. Increase the version/build number for each release of the client.

        :return: The version of this ClientInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClientInfo.

        Version of the client software in format X.Y.Z, where X [0..255] is a major, Y [0..255] is a minor, and Z [0..65535] is a build version number. Increase the version/build number for each release of the client.

        :param version: The version of this ClientInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and len(version) > 13:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `13`")
        if version is not None and len(version) < 3:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `3`")

        self._version = version
