# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gsm_nmr_global_id import GsmNmrGlobalId
from openapi_server import util


class GsmNmr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcch: int=None, bsic: int=None, global_identity: GsmNmrGlobalId=None, rx_level: int=None):
        """GsmNmr - a model defined in OpenAPI

        :param bcch: The bcch of this GsmNmr.
        :param bsic: The bsic of this GsmNmr.
        :param global_identity: The global_identity of this GsmNmr.
        :param rx_level: The rx_level of this GsmNmr.
        """
        self.openapi_types = {
            'bcch': int,
            'bsic': int,
            'global_identity': GsmNmrGlobalId,
            'rx_level': int
        }

        self.attribute_map = {
            'bcch': 'bcch',
            'bsic': 'bsic',
            'global_identity': 'globalIdentity',
            'rx_level': 'rxLevel'
        }

        self._bcch = bcch
        self._bsic = bsic
        self._global_identity = global_identity
        self._rx_level = rx_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GsmNmr':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GsmNmr of this GsmNmr.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcch(self):
        """Gets the bcch of this GsmNmr.

        Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)

        :return: The bcch of this GsmNmr.
        :rtype: int
        """
        return self._bcch

    @bcch.setter
    def bcch(self, bcch):
        """Sets the bcch of this GsmNmr.

        Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)

        :param bcch: The bcch of this GsmNmr.
        :type bcch: int
        """
        if bcch is None:
            raise ValueError("Invalid value for `bcch`, must not be `None`")
        if bcch is not None and bcch > 1023:
            raise ValueError("Invalid value for `bcch`, must be a value less than or equal to `1023`")
        if bcch is not None and bcch < 0:
            raise ValueError("Invalid value for `bcch`, must be a value greater than or equal to `0`")

        self._bcch = bcch

    @property
    def bsic(self):
        """Gets the bsic of this GsmNmr.

        Base Station Identity Code (BSIC, for instance, color code)

        :return: The bsic of this GsmNmr.
        :rtype: int
        """
        return self._bsic

    @bsic.setter
    def bsic(self, bsic):
        """Sets the bsic of this GsmNmr.

        Base Station Identity Code (BSIC, for instance, color code)

        :param bsic: The bsic of this GsmNmr.
        :type bsic: int
        """
        if bsic is None:
            raise ValueError("Invalid value for `bsic`, must not be `None`")
        if bsic is not None and bsic > 63:
            raise ValueError("Invalid value for `bsic`, must be a value less than or equal to `63`")
        if bsic is not None and bsic < 0:
            raise ValueError("Invalid value for `bsic`, must be a value greater than or equal to `0`")

        self._bsic = bsic

    @property
    def global_identity(self):
        """Gets the global_identity of this GsmNmr.


        :return: The global_identity of this GsmNmr.
        :rtype: GsmNmrGlobalId
        """
        return self._global_identity

    @global_identity.setter
    def global_identity(self, global_identity):
        """Sets the global_identity of this GsmNmr.


        :param global_identity: The global_identity of this GsmNmr.
        :type global_identity: GsmNmrGlobalId
        """

        self._global_identity = global_identity

    @property
    def rx_level(self):
        """Gets the rx_level of this GsmNmr.

        Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25. 

        :return: The rx_level of this GsmNmr.
        :rtype: int
        """
        return self._rx_level

    @rx_level.setter
    def rx_level(self, rx_level):
        """Sets the rx_level of this GsmNmr.

        Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25. 

        :param rx_level: The rx_level of this GsmNmr.
        :type rx_level: int
        """
        if rx_level is not None and rx_level > -25:
            raise ValueError("Invalid value for `rx_level`, must be a value less than or equal to `-25`")
        if rx_level is not None and rx_level < -110:
            raise ValueError("Invalid value for `rx_level`, must be a value greater than or equal to `-110`")

        self._rx_level = rx_level
