# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WcdmaLocalId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, psc: int=None, uarfcndl: int=None):
        """WcdmaLocalId - a model defined in OpenAPI

        :param psc: The psc of this WcdmaLocalId.
        :param uarfcndl: The uarfcndl of this WcdmaLocalId.
        """
        self.openapi_types = {
            'psc': int,
            'uarfcndl': int
        }

        self.attribute_map = {
            'psc': 'psc',
            'uarfcndl': 'uarfcndl'
        }

        self._psc = psc
        self._uarfcndl = uarfcndl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WcdmaLocalId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WcdmaLocalId of this WcdmaLocalId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def psc(self):
        """Gets the psc of this WcdmaLocalId.

        Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).

        :return: The psc of this WcdmaLocalId.
        :rtype: int
        """
        return self._psc

    @psc.setter
    def psc(self, psc):
        """Sets the psc of this WcdmaLocalId.

        Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel).

        :param psc: The psc of this WcdmaLocalId.
        :type psc: int
        """
        if psc is None:
            raise ValueError("Invalid value for `psc`, must not be `None`")
        if psc is not None and psc > 511:
            raise ValueError("Invalid value for `psc`, must be a value less than or equal to `511`")
        if psc is not None and psc < 0:
            raise ValueError("Invalid value for `psc`, must be a value greater than or equal to `0`")

        self._psc = psc

    @property
    def uarfcndl(self):
        """Gets the uarfcndl of this WcdmaLocalId.

        UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)

        :return: The uarfcndl of this WcdmaLocalId.
        :rtype: int
        """
        return self._uarfcndl

    @uarfcndl.setter
    def uarfcndl(self, uarfcndl):
        """Sets the uarfcndl of this WcdmaLocalId.

        UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)

        :param uarfcndl: The uarfcndl of this WcdmaLocalId.
        :type uarfcndl: int
        """
        if uarfcndl is None:
            raise ValueError("Invalid value for `uarfcndl`, must not be `None`")
        if uarfcndl is not None and uarfcndl > 16383:
            raise ValueError("Invalid value for `uarfcndl`, must be a value less than or equal to `16383`")
        if uarfcndl is not None and uarfcndl < 0:
            raise ValueError("Invalid value for `uarfcndl`, must be a value greater than or equal to `0`")

        self._uarfcndl = uarfcndl
