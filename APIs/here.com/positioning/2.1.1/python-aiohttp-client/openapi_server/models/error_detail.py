# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, message_placeholders: object=None, message_template: str=None, source: str=None, title: str=None):
        """ErrorDetail - a model defined in OpenAPI

        :param message: The message of this ErrorDetail.
        :param message_placeholders: The message_placeholders of this ErrorDetail.
        :param message_template: The message_template of this ErrorDetail.
        :param source: The source of this ErrorDetail.
        :param title: The title of this ErrorDetail.
        """
        self.openapi_types = {
            'message': str,
            'message_placeholders': object,
            'message_template': str,
            'source': str,
            'title': str
        }

        self.attribute_map = {
            'message': 'message',
            'message_placeholders': 'messagePlaceholders',
            'message_template': 'messageTemplate',
            'source': 'source',
            'title': 'title'
        }

        self._message = message
        self._message_placeholders = message_placeholders
        self._message_template = message_template
        self._source = source
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorDetail of this ErrorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ErrorDetail.

        Localize message

        :return: The message of this ErrorDetail.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorDetail.

        Localize message

        :param message: The message of this ErrorDetail.
        :type message: str
        """

        self._message = message

    @property
    def message_placeholders(self):
        """Gets the message_placeholders of this ErrorDetail.


        :return: The message_placeholders of this ErrorDetail.
        :rtype: object
        """
        return self._message_placeholders

    @message_placeholders.setter
    def message_placeholders(self, message_placeholders):
        """Sets the message_placeholders of this ErrorDetail.


        :param message_placeholders: The message_placeholders of this ErrorDetail.
        :type message_placeholders: object
        """

        self._message_placeholders = message_placeholders

    @property
    def message_template(self):
        """Gets the message_template of this ErrorDetail.


        :return: The message_template of this ErrorDetail.
        :rtype: str
        """
        return self._message_template

    @message_template.setter
    def message_template(self, message_template):
        """Sets the message_template of this ErrorDetail.


        :param message_template: The message_template of this ErrorDetail.
        :type message_template: str
        """

        self._message_template = message_template

    @property
    def source(self):
        """Gets the source of this ErrorDetail.

        Source of the error, using JSONPath

        :return: The source of this ErrorDetail.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ErrorDetail.

        Source of the error, using JSONPath

        :param source: The source of this ErrorDetail.
        :type source: str
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this ErrorDetail.

        Title for the detail

        :return: The title of this ErrorDetail.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorDetail.

        Title for the detail

        :param title: The title of this ErrorDetail.
        :type title: str
        """

        self._title = title
