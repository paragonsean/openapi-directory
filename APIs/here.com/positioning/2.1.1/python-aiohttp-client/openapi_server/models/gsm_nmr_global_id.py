# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GsmNmrGlobalId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: int=None, lac: int=None):
        """GsmNmrGlobalId - a model defined in OpenAPI

        :param cid: The cid of this GsmNmrGlobalId.
        :param lac: The lac of this GsmNmrGlobalId.
        """
        self.openapi_types = {
            'cid': int,
            'lac': int
        }

        self.attribute_map = {
            'cid': 'cid',
            'lac': 'lac'
        }

        self._cid = cid
        self._lac = lac

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GsmNmrGlobalId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GsmNmrGlobalId of this GsmNmrGlobalId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this GsmNmrGlobalId.

        Cell identifier (GERAN CID)

        :return: The cid of this GsmNmrGlobalId.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this GsmNmrGlobalId.

        Cell identifier (GERAN CID)

        :param cid: The cid of this GsmNmrGlobalId.
        :type cid: int
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")
        if cid is not None and cid > 65535:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `65535`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def lac(self):
        """Gets the lac of this GsmNmrGlobalId.

        Location Area Code (LAC). Note, value 65534 is invalid.

        :return: The lac of this GsmNmrGlobalId.
        :rtype: int
        """
        return self._lac

    @lac.setter
    def lac(self, lac):
        """Sets the lac of this GsmNmrGlobalId.

        Location Area Code (LAC). Note, value 65534 is invalid.

        :param lac: The lac of this GsmNmrGlobalId.
        :type lac: int
        """
        if lac is None:
            raise ValueError("Invalid value for `lac`, must not be `None`")
        if lac is not None and lac > 65535:
            raise ValueError("Invalid value for `lac`, must be a value less than or equal to `65535`")
        if lac is not None and lac < 1:
            raise ValueError("Invalid value for `lac`, must be a value greater than or equal to `1`")

        self._lac = lac
