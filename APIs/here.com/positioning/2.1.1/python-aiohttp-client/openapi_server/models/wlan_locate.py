# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WlanLocate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mac: str=None, rss: int=None):
        """WlanLocate - a model defined in OpenAPI

        :param mac: The mac of this WlanLocate.
        :param rss: The rss of this WlanLocate.
        """
        self.openapi_types = {
            'mac': str,
            'rss': int
        }

        self.attribute_map = {
            'mac': 'mac',
            'rss': 'rss'
        }

        self._mac = mac
        self._rss = rss

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WlanLocate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WlanLocate of this WlanLocate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac(self):
        """Gets the mac of this WlanLocate.

        The MAC address of the WLAN access point. MAC-48 address with colon (:) or hyphen (-) separators, upper or lower case hex digits. Note that if the SSID contains postfix \"_nomap\", the AP should not be used for positioning. 

        :return: The mac of this WlanLocate.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this WlanLocate.

        The MAC address of the WLAN access point. MAC-48 address with colon (:) or hyphen (-) separators, upper or lower case hex digits. Note that if the SSID contains postfix \"_nomap\", the AP should not be used for positioning. 

        :param mac: The mac of this WlanLocate.
        :type mac: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")
        if mac is not None and not re.search(r'^((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}-){5}))[0-9a-fA-F]{2}$', mac):
            raise ValueError("Invalid value for `mac`, must be a follow pattern or equal to `/^((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}-){5}))[0-9a-fA-F]{2}$/`")

        self._mac = mac

    @property
    def rss(self):
        """Gets the rss of this WlanLocate.

        Received signal level (dBm) at the terminal

        :return: The rss of this WlanLocate.
        :rtype: int
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this WlanLocate.

        Received signal level (dBm) at the terminal

        :param rss: The rss of this WlanLocate.
        :type rss: int
        """
        if rss is not None and rss > 0:
            raise ValueError("Invalid value for `rss`, must be a value less than or equal to `0`")
        if rss is not None and rss < -128:
            raise ValueError("Invalid value for `rss`, must be a value greater than or equal to `-128`")

        self._rss = rss
