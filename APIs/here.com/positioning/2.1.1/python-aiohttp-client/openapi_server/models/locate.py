# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cdma import Cdma
from openapi_server.models.client_info import ClientInfo
from openapi_server.models.gsm import Gsm
from openapi_server.models.lte import Lte
from openapi_server.models.tdscdma import Tdscdma
from openapi_server.models.wcdma import Wcdma
from openapi_server.models.wlan_locate import WlanLocate
from openapi_server import util


class Locate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cdma: List[Cdma]=None, client: ClientInfo=None, gsm: List[Gsm]=None, lte: List[Lte]=None, tdscdma: List[Tdscdma]=None, wcdma: List[Wcdma]=None, wlan: List[WlanLocate]=None):
        """Locate - a model defined in OpenAPI

        :param cdma: The cdma of this Locate.
        :param client: The client of this Locate.
        :param gsm: The gsm of this Locate.
        :param lte: The lte of this Locate.
        :param tdscdma: The tdscdma of this Locate.
        :param wcdma: The wcdma of this Locate.
        :param wlan: The wlan of this Locate.
        """
        self.openapi_types = {
            'cdma': List[Cdma],
            'client': ClientInfo,
            'gsm': List[Gsm],
            'lte': List[Lte],
            'tdscdma': List[Tdscdma],
            'wcdma': List[Wcdma],
            'wlan': List[WlanLocate]
        }

        self.attribute_map = {
            'cdma': 'cdma',
            'client': 'client',
            'gsm': 'gsm',
            'lte': 'lte',
            'tdscdma': 'tdscdma',
            'wcdma': 'wcdma',
            'wlan': 'wlan'
        }

        self._cdma = cdma
        self._client = client
        self._gsm = gsm
        self._lte = lte
        self._tdscdma = tdscdma
        self._wcdma = wcdma
        self._wlan = wlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Locate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Locate of this Locate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cdma(self):
        """Gets the cdma of this Locate.

        CDMA cells (CDMA2000)

        :return: The cdma of this Locate.
        :rtype: List[Cdma]
        """
        return self._cdma

    @cdma.setter
    def cdma(self, cdma):
        """Sets the cdma of this Locate.

        CDMA cells (CDMA2000)

        :param cdma: The cdma of this Locate.
        :type cdma: List[Cdma]
        """
        if cdma is not None and len(cdma) > 16:
            raise ValueError("Invalid value for `cdma`, number of items must be less than or equal to `16`")
        if cdma is not None and len(cdma) < 1:
            raise ValueError("Invalid value for `cdma`, number of items must be greater than or equal to `1`")

        self._cdma = cdma

    @property
    def client(self):
        """Gets the client of this Locate.


        :return: The client of this Locate.
        :rtype: ClientInfo
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Locate.


        :param client: The client of this Locate.
        :type client: ClientInfo
        """

        self._client = client

    @property
    def gsm(self):
        """Gets the gsm of this Locate.

        GSM cells (GERAN)

        :return: The gsm of this Locate.
        :rtype: List[Gsm]
        """
        return self._gsm

    @gsm.setter
    def gsm(self, gsm):
        """Sets the gsm of this Locate.

        GSM cells (GERAN)

        :param gsm: The gsm of this Locate.
        :type gsm: List[Gsm]
        """
        if gsm is not None and len(gsm) > 16:
            raise ValueError("Invalid value for `gsm`, number of items must be less than or equal to `16`")
        if gsm is not None and len(gsm) < 1:
            raise ValueError("Invalid value for `gsm`, number of items must be greater than or equal to `1`")

        self._gsm = gsm

    @property
    def lte(self):
        """Gets the lte of this Locate.

        LTE cells (E-UTRA, 4G)

        :return: The lte of this Locate.
        :rtype: List[Lte]
        """
        return self._lte

    @lte.setter
    def lte(self, lte):
        """Sets the lte of this Locate.

        LTE cells (E-UTRA, 4G)

        :param lte: The lte of this Locate.
        :type lte: List[Lte]
        """
        if lte is not None and len(lte) > 16:
            raise ValueError("Invalid value for `lte`, number of items must be less than or equal to `16`")
        if lte is not None and len(lte) < 1:
            raise ValueError("Invalid value for `lte`, number of items must be greater than or equal to `1`")

        self._lte = lte

    @property
    def tdscdma(self):
        """Gets the tdscdma of this Locate.

        TD-SCDMA cells (UTRA-TDD, 3G UMTS TDD)

        :return: The tdscdma of this Locate.
        :rtype: List[Tdscdma]
        """
        return self._tdscdma

    @tdscdma.setter
    def tdscdma(self, tdscdma):
        """Sets the tdscdma of this Locate.

        TD-SCDMA cells (UTRA-TDD, 3G UMTS TDD)

        :param tdscdma: The tdscdma of this Locate.
        :type tdscdma: List[Tdscdma]
        """
        if tdscdma is not None and len(tdscdma) > 16:
            raise ValueError("Invalid value for `tdscdma`, number of items must be less than or equal to `16`")
        if tdscdma is not None and len(tdscdma) < 1:
            raise ValueError("Invalid value for `tdscdma`, number of items must be greater than or equal to `1`")

        self._tdscdma = tdscdma

    @property
    def wcdma(self):
        """Gets the wcdma of this Locate.

        WCDMA cells (UTRA-FDD, 3G UMTS)

        :return: The wcdma of this Locate.
        :rtype: List[Wcdma]
        """
        return self._wcdma

    @wcdma.setter
    def wcdma(self, wcdma):
        """Sets the wcdma of this Locate.

        WCDMA cells (UTRA-FDD, 3G UMTS)

        :param wcdma: The wcdma of this Locate.
        :type wcdma: List[Wcdma]
        """
        if wcdma is not None and len(wcdma) > 16:
            raise ValueError("Invalid value for `wcdma`, number of items must be less than or equal to `16`")
        if wcdma is not None and len(wcdma) < 1:
            raise ValueError("Invalid value for `wcdma`, number of items must be greater than or equal to `1`")

        self._wcdma = wcdma

    @property
    def wlan(self):
        """Gets the wlan of this Locate.

        WLAN access positions. For privacy reasons positioning based on a single WLAN AP is not possible; there has to be at least one other matching wlan or cell. Alternatively, you can allow fallbacks to less accurate single WLAN AP location estimates by using the setting `fallback=singleWifi`. 

        :return: The wlan of this Locate.
        :rtype: List[WlanLocate]
        """
        return self._wlan

    @wlan.setter
    def wlan(self, wlan):
        """Sets the wlan of this Locate.

        WLAN access positions. For privacy reasons positioning based on a single WLAN AP is not possible; there has to be at least one other matching wlan or cell. Alternatively, you can allow fallbacks to less accurate single WLAN AP location estimates by using the setting `fallback=singleWifi`. 

        :param wlan: The wlan of this Locate.
        :type wlan: List[WlanLocate]
        """
        if wlan is not None and len(wlan) > 256:
            raise ValueError("Invalid value for `wlan`, number of items must be less than or equal to `256`")
        if wlan is not None and len(wlan) < 1:
            raise ValueError("Invalid value for `wlan`, number of items must be greater than or equal to `1`")

        self._wlan = wlan
