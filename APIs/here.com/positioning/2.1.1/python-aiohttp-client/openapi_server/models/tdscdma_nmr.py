# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TdscdmaNmr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_params: int=None, cid: int=None, pathloss: int=None, rscp: int=None, uarfcn: int=None):
        """TdscdmaNmr - a model defined in OpenAPI

        :param cell_params: The cell_params of this TdscdmaNmr.
        :param cid: The cid of this TdscdmaNmr.
        :param pathloss: The pathloss of this TdscdmaNmr.
        :param rscp: The rscp of this TdscdmaNmr.
        :param uarfcn: The uarfcn of this TdscdmaNmr.
        """
        self.openapi_types = {
            'cell_params': int,
            'cid': int,
            'pathloss': int,
            'rscp': int,
            'uarfcn': int
        }

        self.attribute_map = {
            'cell_params': 'cellParams',
            'cid': 'cid',
            'pathloss': 'pathloss',
            'rscp': 'rscp',
            'uarfcn': 'uarfcn'
        }

        self._cell_params = cell_params
        self._cid = cid
        self._pathloss = pathloss
        self._rscp = rscp
        self._uarfcn = uarfcn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TdscdmaNmr':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TdscdmaNmr of this TdscdmaNmr.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_params(self):
        """Gets the cell_params of this TdscdmaNmr.

        Cell Parameters ID (CDMA Spreading Code ID)

        :return: The cell_params of this TdscdmaNmr.
        :rtype: int
        """
        return self._cell_params

    @cell_params.setter
    def cell_params(self, cell_params):
        """Sets the cell_params of this TdscdmaNmr.

        Cell Parameters ID (CDMA Spreading Code ID)

        :param cell_params: The cell_params of this TdscdmaNmr.
        :type cell_params: int
        """
        if cell_params is None:
            raise ValueError("Invalid value for `cell_params`, must not be `None`")
        if cell_params is not None and cell_params > 127:
            raise ValueError("Invalid value for `cell_params`, must be a value less than or equal to `127`")
        if cell_params is not None and cell_params < 0:
            raise ValueError("Invalid value for `cell_params`, must be a value greater than or equal to `0`")

        self._cell_params = cell_params

    @property
    def cid(self):
        """Gets the cid of this TdscdmaNmr.

        UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 

        :return: The cid of this TdscdmaNmr.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this TdscdmaNmr.

        UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional. 

        :param cid: The cid of this TdscdmaNmr.
        :type cid: int
        """
        if cid is not None and cid > 268435455:
            raise ValueError("Invalid value for `cid`, must be a value less than or equal to `268435455`")
        if cid is not None and cid < 0:
            raise ValueError("Invalid value for `cid`, must be a value greater than or equal to `0`")

        self._cid = cid

    @property
    def pathloss(self):
        """Gets the pathloss of this TdscdmaNmr.

        UTRAN pathloss (dBm)

        :return: The pathloss of this TdscdmaNmr.
        :rtype: int
        """
        return self._pathloss

    @pathloss.setter
    def pathloss(self, pathloss):
        """Sets the pathloss of this TdscdmaNmr.

        UTRAN pathloss (dBm)

        :param pathloss: The pathloss of this TdscdmaNmr.
        :type pathloss: int
        """
        if pathloss is not None and pathloss > 158:
            raise ValueError("Invalid value for `pathloss`, must be a value less than or equal to `158`")
        if pathloss is not None and pathloss < 46:
            raise ValueError("Invalid value for `pathloss`, must be a value greater than or equal to `46`")

        self._pathloss = pathloss

    @property
    def rscp(self):
        """Gets the rscp of this TdscdmaNmr.

        Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 

        :return: The rscp of this TdscdmaNmr.
        :rtype: int
        """
        return self._rscp

    @rscp.setter
    def rscp(self, rscp):
        """Sets the rscp of this TdscdmaNmr.

        Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25. 

        :param rscp: The rscp of this TdscdmaNmr.
        :type rscp: int
        """
        if rscp is not None and rscp > -25:
            raise ValueError("Invalid value for `rscp`, must be a value less than or equal to `-25`")
        if rscp is not None and rscp < -120:
            raise ValueError("Invalid value for `rscp`, must be a value greater than or equal to `-120`")

        self._rscp = rscp

    @property
    def uarfcn(self):
        """Gets the uarfcn of this TdscdmaNmr.

        UTRAN Absolute Radio Frequency (U-ARFCN)

        :return: The uarfcn of this TdscdmaNmr.
        :rtype: int
        """
        return self._uarfcn

    @uarfcn.setter
    def uarfcn(self, uarfcn):
        """Sets the uarfcn of this TdscdmaNmr.

        UTRAN Absolute Radio Frequency (U-ARFCN)

        :param uarfcn: The uarfcn of this TdscdmaNmr.
        :type uarfcn: int
        """
        if uarfcn is None:
            raise ValueError("Invalid value for `uarfcn`, must not be `None`")
        if uarfcn is not None and uarfcn > 16383:
            raise ValueError("Invalid value for `uarfcn`, must be a value less than or equal to `16383`")
        if uarfcn is not None and uarfcn < 0:
            raise ValueError("Invalid value for `uarfcn`, must be a value greater than or equal to `0`")

        self._uarfcn = uarfcn
