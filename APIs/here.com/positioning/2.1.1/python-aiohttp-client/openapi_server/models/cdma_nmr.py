# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CdmaNmr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bsid: int=None, channel: int=None, pilot_power: int=None, pn_offset: int=None):
        """CdmaNmr - a model defined in OpenAPI

        :param bsid: The bsid of this CdmaNmr.
        :param channel: The channel of this CdmaNmr.
        :param pilot_power: The pilot_power of this CdmaNmr.
        :param pn_offset: The pn_offset of this CdmaNmr.
        """
        self.openapi_types = {
            'bsid': int,
            'channel': int,
            'pilot_power': int,
            'pn_offset': int
        }

        self.attribute_map = {
            'bsid': 'bsid',
            'channel': 'channel',
            'pilot_power': 'pilotPower',
            'pn_offset': 'pnOffset'
        }

        self._bsid = bsid
        self._channel = channel
        self._pilot_power = pilot_power
        self._pn_offset = pn_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdmaNmr':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdmaNmr of this CdmaNmr.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bsid(self):
        """Gets the bsid of this CdmaNmr.

        Base Station ID (CDMA BSID, BID)

        :return: The bsid of this CdmaNmr.
        :rtype: int
        """
        return self._bsid

    @bsid.setter
    def bsid(self, bsid):
        """Sets the bsid of this CdmaNmr.

        Base Station ID (CDMA BSID, BID)

        :param bsid: The bsid of this CdmaNmr.
        :type bsid: int
        """
        if bsid is not None and bsid > 65535:
            raise ValueError("Invalid value for `bsid`, must be a value less than or equal to `65535`")
        if bsid is not None and bsid < 0:
            raise ValueError("Invalid value for `bsid`, must be a value greater than or equal to `0`")

        self._bsid = bsid

    @property
    def channel(self):
        """Gets the channel of this CdmaNmr.

        CDMA channel frequency

        :return: The channel of this CdmaNmr.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CdmaNmr.

        CDMA channel frequency

        :param channel: The channel of this CdmaNmr.
        :type channel: int
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")
        if channel is not None and channel > 2047:
            raise ValueError("Invalid value for `channel`, must be a value less than or equal to `2047`")
        if channel is not None and channel < 0:
            raise ValueError("Invalid value for `channel`, must be a value greater than or equal to `0`")

        self._channel = channel

    @property
    def pilot_power(self):
        """Gets the pilot_power of this CdmaNmr.

        Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49. 

        :return: The pilot_power of this CdmaNmr.
        :rtype: int
        """
        return self._pilot_power

    @pilot_power.setter
    def pilot_power(self, pilot_power):
        """Sets the pilot_power of this CdmaNmr.

        Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49. 

        :param pilot_power: The pilot_power of this CdmaNmr.
        :type pilot_power: int
        """
        if pilot_power is not None and pilot_power > -49:
            raise ValueError("Invalid value for `pilot_power`, must be a value less than or equal to `-49`")
        if pilot_power is not None and pilot_power < -142:
            raise ValueError("Invalid value for `pilot_power`, must be a value greater than or equal to `-142`")

        self._pilot_power = pilot_power

    @property
    def pn_offset(self):
        """Gets the pn_offset of this CdmaNmr.

        Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell. 

        :return: The pn_offset of this CdmaNmr.
        :rtype: int
        """
        return self._pn_offset

    @pn_offset.setter
    def pn_offset(self, pn_offset):
        """Sets the pn_offset of this CdmaNmr.

        Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell. 

        :param pn_offset: The pn_offset of this CdmaNmr.
        :type pn_offset: int
        """
        if pn_offset is None:
            raise ValueError("Invalid value for `pn_offset`, must not be `None`")
        if pn_offset is not None and pn_offset > 511:
            raise ValueError("Invalid value for `pn_offset`, must be a value less than or equal to `511`")
        if pn_offset is not None and pn_offset < 0:
            raise ValueError("Invalid value for `pn_offset`, must be a value greater than or equal to `0`")

        self._pn_offset = pn_offset
