/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTopic_200_response_details_participants_inner.h
 *
 * 
 */

#ifndef OAIGetTopic_200_response_details_participants_inner_H
#define OAIGetTopic_200_response_details_participants_inner_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetTopic_200_response_details_participants_inner : public OAIObject {
public:
    OAIGetTopic_200_response_details_participants_inner();
    OAIGetTopic_200_response_details_participants_inner(QString json);
    ~OAIGetTopic_200_response_details_participants_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    QString getAvatarTemplate() const;
    void setAvatarTemplate(const QString &avatar_template);
    bool is_avatar_template_Set() const;
    bool is_avatar_template_Valid() const;

    QString getFlairBgColor() const;
    void setFlairBgColor(const QString &flair_bg_color);
    bool is_flair_bg_color_Set() const;
    bool is_flair_bg_color_Valid() const;

    QString getFlairColor() const;
    void setFlairColor(const QString &flair_color);
    bool is_flair_color_Set() const;
    bool is_flair_color_Valid() const;

    QString getFlairName() const;
    void setFlairName(const QString &flair_name);
    bool is_flair_name_Set() const;
    bool is_flair_name_Valid() const;

    QString getFlairUrl() const;
    void setFlairUrl(const QString &flair_url);
    bool is_flair_url_Set() const;
    bool is_flair_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isModerator() const;
    void setModerator(const bool &moderator);
    bool is_moderator_Set() const;
    bool is_moderator_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPostCount() const;
    void setPostCount(const qint32 &post_count);
    bool is_post_count_Set() const;
    bool is_post_count_Valid() const;

    QString getPrimaryGroupName() const;
    void setPrimaryGroupName(const QString &primary_group_name);
    bool is_primary_group_name_Set() const;
    bool is_primary_group_name_Valid() const;

    qint32 getTrustLevel() const;
    void setTrustLevel(const qint32 &trust_level);
    bool is_trust_level_Set() const;
    bool is_trust_level_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    QString m_avatar_template;
    bool m_avatar_template_isSet;
    bool m_avatar_template_isValid;

    QString m_flair_bg_color;
    bool m_flair_bg_color_isSet;
    bool m_flair_bg_color_isValid;

    QString m_flair_color;
    bool m_flair_color_isSet;
    bool m_flair_color_isValid;

    QString m_flair_name;
    bool m_flair_name_isSet;
    bool m_flair_name_isValid;

    QString m_flair_url;
    bool m_flair_url_isSet;
    bool m_flair_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_moderator;
    bool m_moderator_isSet;
    bool m_moderator_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_post_count;
    bool m_post_count_isSet;
    bool m_post_count_isValid;

    QString m_primary_group_name;
    bool m_primary_group_name_isSet;
    bool m_primary_group_name_isValid;

    qint32 m_trust_level;
    bool m_trust_level_isSet;
    bool m_trust_level_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTopic_200_response_details_participants_inner)

#endif // OAIGetTopic_200_response_details_participants_inner_H
