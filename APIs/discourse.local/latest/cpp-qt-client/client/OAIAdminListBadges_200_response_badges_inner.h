/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdminListBadges_200_response_badges_inner.h
 *
 * 
 */

#ifndef OAIAdminListBadges_200_response_badges_inner_H
#define OAIAdminListBadges_200_response_badges_inner_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdminListBadges_200_response_badges_inner : public OAIObject {
public:
    OAIAdminListBadges_200_response_badges_inner();
    OAIAdminListBadges_200_response_badges_inner(QString json);
    ~OAIAdminListBadges_200_response_badges_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowTitle() const;
    void setAllowTitle(const bool &allow_title);
    bool is_allow_title_Set() const;
    bool is_allow_title_Valid() const;

    bool isAutoRevoke() const;
    void setAutoRevoke(const bool &auto_revoke);
    bool is_auto_revoke_Set() const;
    bool is_auto_revoke_Valid() const;

    qint32 getBadgeGroupingId() const;
    void setBadgeGroupingId(const qint32 &badge_grouping_id);
    bool is_badge_grouping_id_Set() const;
    bool is_badge_grouping_id_Valid() const;

    qint32 getBadgeTypeId() const;
    void setBadgeTypeId(const qint32 &badge_type_id);
    bool is_badge_type_id_Set() const;
    bool is_badge_type_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    qint32 getGrantCount() const;
    void setGrantCount(const qint32 &grant_count);
    bool is_grant_count_Set() const;
    bool is_grant_count_Valid() const;

    QString getI18nName() const;
    void setI18nName(const QString &i18n_name);
    bool is_i18n_name_Set() const;
    bool is_i18n_name_Valid() const;

    QString getIcon() const;
    void setIcon(const QString &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    bool isListable() const;
    void setListable(const bool &listable);
    bool is_listable_Set() const;
    bool is_listable_Valid() const;

    QString getLongDescription() const;
    void setLongDescription(const QString &long_description);
    bool is_long_description_Set() const;
    bool is_long_description_Valid() const;

    bool isManuallyGrantable() const;
    void setManuallyGrantable(const bool &manually_grantable);
    bool is_manually_grantable_Set() const;
    bool is_manually_grantable_Valid() const;

    bool isMultipleGrant() const;
    void setMultipleGrant(const bool &multiple_grant);
    bool is_multiple_grant_Set() const;
    bool is_multiple_grant_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    bool isShowPosts() const;
    void setShowPosts(const bool &show_posts);
    bool is_show_posts_Set() const;
    bool is_show_posts_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    bool isSystem() const;
    void setSystem(const bool &system);
    bool is_system_Set() const;
    bool is_system_Valid() const;

    bool isTargetPosts() const;
    void setTargetPosts(const bool &target_posts);
    bool is_target_posts_Set() const;
    bool is_target_posts_Valid() const;

    qint32 getTrigger() const;
    void setTrigger(const qint32 &trigger);
    bool is_trigger_Set() const;
    bool is_trigger_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_title;
    bool m_allow_title_isSet;
    bool m_allow_title_isValid;

    bool m_auto_revoke;
    bool m_auto_revoke_isSet;
    bool m_auto_revoke_isValid;

    qint32 m_badge_grouping_id;
    bool m_badge_grouping_id_isSet;
    bool m_badge_grouping_id_isValid;

    qint32 m_badge_type_id;
    bool m_badge_type_id_isSet;
    bool m_badge_type_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    qint32 m_grant_count;
    bool m_grant_count_isSet;
    bool m_grant_count_isValid;

    QString m_i18n_name;
    bool m_i18n_name_isSet;
    bool m_i18n_name_isValid;

    QString m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    bool m_listable;
    bool m_listable_isSet;
    bool m_listable_isValid;

    QString m_long_description;
    bool m_long_description_isSet;
    bool m_long_description_isValid;

    bool m_manually_grantable;
    bool m_manually_grantable_isSet;
    bool m_manually_grantable_isValid;

    bool m_multiple_grant;
    bool m_multiple_grant_isSet;
    bool m_multiple_grant_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    bool m_show_posts;
    bool m_show_posts_isSet;
    bool m_show_posts_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    bool m_system;
    bool m_system_isSet;
    bool m_system_isValid;

    bool m_target_posts;
    bool m_target_posts_isSet;
    bool m_target_posts_isValid;

    qint32 m_trigger;
    bool m_trigger_isSet;
    bool m_trigger_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdminListBadges_200_response_badges_inner)

#endif // OAIAdminListBadges_200_response_badges_inner_H
