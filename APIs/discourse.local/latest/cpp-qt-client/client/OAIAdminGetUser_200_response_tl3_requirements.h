/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdminGetUser_200_response_tl3_requirements.h
 *
 * 
 */

#ifndef OAIAdminGetUser_200_response_tl3_requirements_H
#define OAIAdminGetUser_200_response_tl3_requirements_H

#include <QJsonObject>

#include "OAIAdminGetUser_200_response_tl3_requirements_penalty_counts.h"
#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdminGetUser_200_response_tl3_requirements : public OAIObject {
public:
    OAIAdminGetUser_200_response_tl3_requirements();
    OAIAdminGetUser_200_response_tl3_requirements(QString json);
    ~OAIAdminGetUser_200_response_tl3_requirements() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDaysVisited() const;
    void setDaysVisited(const qint32 &days_visited);
    bool is_days_visited_Set() const;
    bool is_days_visited_Valid() const;

    qint32 getMaxFlaggedByUsers() const;
    void setMaxFlaggedByUsers(const qint32 &max_flagged_by_users);
    bool is_max_flagged_by_users_Set() const;
    bool is_max_flagged_by_users_Valid() const;

    qint32 getMaxFlaggedPosts() const;
    void setMaxFlaggedPosts(const qint32 &max_flagged_posts);
    bool is_max_flagged_posts_Set() const;
    bool is_max_flagged_posts_Valid() const;

    qint32 getMinDaysVisited() const;
    void setMinDaysVisited(const qint32 &min_days_visited);
    bool is_min_days_visited_Set() const;
    bool is_min_days_visited_Valid() const;

    qint32 getMinLikesGiven() const;
    void setMinLikesGiven(const qint32 &min_likes_given);
    bool is_min_likes_given_Set() const;
    bool is_min_likes_given_Valid() const;

    qint32 getMinLikesReceived() const;
    void setMinLikesReceived(const qint32 &min_likes_received);
    bool is_min_likes_received_Set() const;
    bool is_min_likes_received_Valid() const;

    qint32 getMinLikesReceivedDays() const;
    void setMinLikesReceivedDays(const qint32 &min_likes_received_days);
    bool is_min_likes_received_days_Set() const;
    bool is_min_likes_received_days_Valid() const;

    qint32 getMinLikesReceivedUsers() const;
    void setMinLikesReceivedUsers(const qint32 &min_likes_received_users);
    bool is_min_likes_received_users_Set() const;
    bool is_min_likes_received_users_Valid() const;

    qint32 getMinPostsRead() const;
    void setMinPostsRead(const qint32 &min_posts_read);
    bool is_min_posts_read_Set() const;
    bool is_min_posts_read_Valid() const;

    qint32 getMinPostsReadAllTime() const;
    void setMinPostsReadAllTime(const qint32 &min_posts_read_all_time);
    bool is_min_posts_read_all_time_Set() const;
    bool is_min_posts_read_all_time_Valid() const;

    qint32 getMinTopicsRepliedTo() const;
    void setMinTopicsRepliedTo(const qint32 &min_topics_replied_to);
    bool is_min_topics_replied_to_Set() const;
    bool is_min_topics_replied_to_Valid() const;

    qint32 getMinTopicsViewed() const;
    void setMinTopicsViewed(const qint32 &min_topics_viewed);
    bool is_min_topics_viewed_Set() const;
    bool is_min_topics_viewed_Valid() const;

    qint32 getMinTopicsViewedAllTime() const;
    void setMinTopicsViewedAllTime(const qint32 &min_topics_viewed_all_time);
    bool is_min_topics_viewed_all_time_Set() const;
    bool is_min_topics_viewed_all_time_Valid() const;

    qint32 getNumFlaggedByUsers() const;
    void setNumFlaggedByUsers(const qint32 &num_flagged_by_users);
    bool is_num_flagged_by_users_Set() const;
    bool is_num_flagged_by_users_Valid() const;

    qint32 getNumFlaggedPosts() const;
    void setNumFlaggedPosts(const qint32 &num_flagged_posts);
    bool is_num_flagged_posts_Set() const;
    bool is_num_flagged_posts_Valid() const;

    qint32 getNumLikesGiven() const;
    void setNumLikesGiven(const qint32 &num_likes_given);
    bool is_num_likes_given_Set() const;
    bool is_num_likes_given_Valid() const;

    qint32 getNumLikesReceived() const;
    void setNumLikesReceived(const qint32 &num_likes_received);
    bool is_num_likes_received_Set() const;
    bool is_num_likes_received_Valid() const;

    qint32 getNumLikesReceivedDays() const;
    void setNumLikesReceivedDays(const qint32 &num_likes_received_days);
    bool is_num_likes_received_days_Set() const;
    bool is_num_likes_received_days_Valid() const;

    qint32 getNumLikesReceivedUsers() const;
    void setNumLikesReceivedUsers(const qint32 &num_likes_received_users);
    bool is_num_likes_received_users_Set() const;
    bool is_num_likes_received_users_Valid() const;

    qint32 getNumTopicsRepliedTo() const;
    void setNumTopicsRepliedTo(const qint32 &num_topics_replied_to);
    bool is_num_topics_replied_to_Set() const;
    bool is_num_topics_replied_to_Valid() const;

    bool isOnGracePeriod() const;
    void setOnGracePeriod(const bool &on_grace_period);
    bool is_on_grace_period_Set() const;
    bool is_on_grace_period_Valid() const;

    OAIAdminGetUser_200_response_tl3_requirements_penalty_counts getPenaltyCounts() const;
    void setPenaltyCounts(const OAIAdminGetUser_200_response_tl3_requirements_penalty_counts &penalty_counts);
    bool is_penalty_counts_Set() const;
    bool is_penalty_counts_Valid() const;

    qint32 getPostsRead() const;
    void setPostsRead(const qint32 &posts_read);
    bool is_posts_read_Set() const;
    bool is_posts_read_Valid() const;

    qint32 getPostsReadAllTime() const;
    void setPostsReadAllTime(const qint32 &posts_read_all_time);
    bool is_posts_read_all_time_Set() const;
    bool is_posts_read_all_time_Valid() const;

    bool isRequirementsLost() const;
    void setRequirementsLost(const bool &requirements_lost);
    bool is_requirements_lost_Set() const;
    bool is_requirements_lost_Valid() const;

    bool isRequirementsMet() const;
    void setRequirementsMet(const bool &requirements_met);
    bool is_requirements_met_Set() const;
    bool is_requirements_met_Valid() const;

    qint32 getTimePeriod() const;
    void setTimePeriod(const qint32 &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    qint32 getTopicsViewed() const;
    void setTopicsViewed(const qint32 &topics_viewed);
    bool is_topics_viewed_Set() const;
    bool is_topics_viewed_Valid() const;

    qint32 getTopicsViewedAllTime() const;
    void setTopicsViewedAllTime(const qint32 &topics_viewed_all_time);
    bool is_topics_viewed_all_time_Set() const;
    bool is_topics_viewed_all_time_Valid() const;

    bool isTrustLevelLocked() const;
    void setTrustLevelLocked(const bool &trust_level_locked);
    bool is_trust_level_locked_Set() const;
    bool is_trust_level_locked_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_days_visited;
    bool m_days_visited_isSet;
    bool m_days_visited_isValid;

    qint32 m_max_flagged_by_users;
    bool m_max_flagged_by_users_isSet;
    bool m_max_flagged_by_users_isValid;

    qint32 m_max_flagged_posts;
    bool m_max_flagged_posts_isSet;
    bool m_max_flagged_posts_isValid;

    qint32 m_min_days_visited;
    bool m_min_days_visited_isSet;
    bool m_min_days_visited_isValid;

    qint32 m_min_likes_given;
    bool m_min_likes_given_isSet;
    bool m_min_likes_given_isValid;

    qint32 m_min_likes_received;
    bool m_min_likes_received_isSet;
    bool m_min_likes_received_isValid;

    qint32 m_min_likes_received_days;
    bool m_min_likes_received_days_isSet;
    bool m_min_likes_received_days_isValid;

    qint32 m_min_likes_received_users;
    bool m_min_likes_received_users_isSet;
    bool m_min_likes_received_users_isValid;

    qint32 m_min_posts_read;
    bool m_min_posts_read_isSet;
    bool m_min_posts_read_isValid;

    qint32 m_min_posts_read_all_time;
    bool m_min_posts_read_all_time_isSet;
    bool m_min_posts_read_all_time_isValid;

    qint32 m_min_topics_replied_to;
    bool m_min_topics_replied_to_isSet;
    bool m_min_topics_replied_to_isValid;

    qint32 m_min_topics_viewed;
    bool m_min_topics_viewed_isSet;
    bool m_min_topics_viewed_isValid;

    qint32 m_min_topics_viewed_all_time;
    bool m_min_topics_viewed_all_time_isSet;
    bool m_min_topics_viewed_all_time_isValid;

    qint32 m_num_flagged_by_users;
    bool m_num_flagged_by_users_isSet;
    bool m_num_flagged_by_users_isValid;

    qint32 m_num_flagged_posts;
    bool m_num_flagged_posts_isSet;
    bool m_num_flagged_posts_isValid;

    qint32 m_num_likes_given;
    bool m_num_likes_given_isSet;
    bool m_num_likes_given_isValid;

    qint32 m_num_likes_received;
    bool m_num_likes_received_isSet;
    bool m_num_likes_received_isValid;

    qint32 m_num_likes_received_days;
    bool m_num_likes_received_days_isSet;
    bool m_num_likes_received_days_isValid;

    qint32 m_num_likes_received_users;
    bool m_num_likes_received_users_isSet;
    bool m_num_likes_received_users_isValid;

    qint32 m_num_topics_replied_to;
    bool m_num_topics_replied_to_isSet;
    bool m_num_topics_replied_to_isValid;

    bool m_on_grace_period;
    bool m_on_grace_period_isSet;
    bool m_on_grace_period_isValid;

    OAIAdminGetUser_200_response_tl3_requirements_penalty_counts m_penalty_counts;
    bool m_penalty_counts_isSet;
    bool m_penalty_counts_isValid;

    qint32 m_posts_read;
    bool m_posts_read_isSet;
    bool m_posts_read_isValid;

    qint32 m_posts_read_all_time;
    bool m_posts_read_all_time_isSet;
    bool m_posts_read_all_time_isValid;

    bool m_requirements_lost;
    bool m_requirements_lost_isSet;
    bool m_requirements_lost_isValid;

    bool m_requirements_met;
    bool m_requirements_met_isSet;
    bool m_requirements_met_isValid;

    qint32 m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    qint32 m_topics_viewed;
    bool m_topics_viewed_isSet;
    bool m_topics_viewed_isValid;

    qint32 m_topics_viewed_all_time;
    bool m_topics_viewed_all_time_isSet;
    bool m_topics_viewed_all_time_isValid;

    bool m_trust_level_locked;
    bool m_trust_level_locked_isSet;
    bool m_trust_level_locked_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdminGetUser_200_response_tl3_requirements)

#endif // OAIAdminGetUser_200_response_tl3_requirements_H
