/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTopic_200_response.h
 *
 * 
 */

#ifndef OAIGetTopic_200_response_H
#define OAIGetTopic_200_response_H

#include <QJsonObject>

#include "OAIGetTopic_200_response_actions_summary_inner.h"
#include "OAIGetTopic_200_response_details.h"
#include "OAIGetTopic_200_response_post_stream.h"
#include "OAIGetTopic_200_response_suggested_topics_inner.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetTopic_200_response : public OAIObject {
public:
    OAIGetTopic_200_response();
    OAIGetTopic_200_response(QString json);
    ~OAIGetTopic_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGetTopic_200_response_actions_summary_inner> getActionsSummary() const;
    void setActionsSummary(const QList<OAIGetTopic_200_response_actions_summary_inner> &actions_summary);
    bool is_actions_summary_Set() const;
    bool is_actions_summary_Valid() const;

    QString getArchetype() const;
    void setArchetype(const QString &archetype);
    bool is_archetype_Set() const;
    bool is_archetype_Valid() const;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    bool isBookmarked() const;
    void setBookmarked(const bool &bookmarked);
    bool is_bookmarked_Set() const;
    bool is_bookmarked_Valid() const;

    QList<QJsonValue> getBookmarks() const;
    void setBookmarks(const QList<QJsonValue> &bookmarks);
    bool is_bookmarks_Set() const;
    bool is_bookmarks_Valid() const;

    qint32 getCategoryId() const;
    void setCategoryId(const qint32 &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    qint32 getChunkSize() const;
    void setChunkSize(const qint32 &chunk_size);
    bool is_chunk_size_Set() const;
    bool is_chunk_size_Valid() const;

    bool isClosed() const;
    void setClosed(const bool &closed);
    bool is_closed_Set() const;
    bool is_closed_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint32 getCurrentPostNumber() const;
    void setCurrentPostNumber(const qint32 &current_post_number);
    bool is_current_post_number_Set() const;
    bool is_current_post_number_Valid() const;

    QString getDeletedAt() const;
    void setDeletedAt(const QString &deleted_at);
    bool is_deleted_at_Set() const;
    bool is_deleted_at_Valid() const;

    QString getDeletedBy() const;
    void setDeletedBy(const QString &deleted_by);
    bool is_deleted_by_Set() const;
    bool is_deleted_by_Valid() const;

    OAIGetTopic_200_response_details getDetails() const;
    void setDetails(const OAIGetTopic_200_response_details &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getDraft() const;
    void setDraft(const QString &draft);
    bool is_draft_Set() const;
    bool is_draft_Valid() const;

    QString getDraftKey() const;
    void setDraftKey(const QString &draft_key);
    bool is_draft_key_Set() const;
    bool is_draft_key_Valid() const;

    qint32 getDraftSequence() const;
    void setDraftSequence(const qint32 &draft_sequence);
    bool is_draft_sequence_Set() const;
    bool is_draft_sequence_Valid() const;

    QString getFancyTitle() const;
    void setFancyTitle(const QString &fancy_title);
    bool is_fancy_title_Set() const;
    bool is_fancy_title_Valid() const;

    QString getFeaturedLink() const;
    void setFeaturedLink(const QString &featured_link);
    bool is_featured_link_Set() const;
    bool is_featured_link_Valid() const;

    bool isHasDeleted() const;
    void setHasDeleted(const bool &has_deleted);
    bool is_has_deleted_Set() const;
    bool is_has_deleted_Valid() const;

    bool isHasSummary() const;
    void setHasSummary(const bool &has_summary);
    bool is_has_summary_Set() const;
    bool is_has_summary_Valid() const;

    qint32 getHighestPostNumber() const;
    void setHighestPostNumber(const qint32 &highest_post_number);
    bool is_highest_post_number_Set() const;
    bool is_highest_post_number_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getLastPostedAt() const;
    void setLastPostedAt(const QString &last_posted_at);
    bool is_last_posted_at_Set() const;
    bool is_last_posted_at_Valid() const;

    qint32 getLikeCount() const;
    void setLikeCount(const qint32 &like_count);
    bool is_like_count_Set() const;
    bool is_like_count_Valid() const;

    qint32 getMessageBusLastId() const;
    void setMessageBusLastId(const qint32 &message_bus_last_id);
    bool is_message_bus_last_id_Set() const;
    bool is_message_bus_last_id_Valid() const;

    qint32 getParticipantCount() const;
    void setParticipantCount(const qint32 &participant_count);
    bool is_participant_count_Set() const;
    bool is_participant_count_Valid() const;

    bool isPinned() const;
    void setPinned(const bool &pinned);
    bool is_pinned_Set() const;
    bool is_pinned_Valid() const;

    QString getPinnedAt() const;
    void setPinnedAt(const QString &pinned_at);
    bool is_pinned_at_Set() const;
    bool is_pinned_at_Valid() const;

    bool isPinnedGlobally() const;
    void setPinnedGlobally(const bool &pinned_globally);
    bool is_pinned_globally_Set() const;
    bool is_pinned_globally_Valid() const;

    QString getPinnedUntil() const;
    void setPinnedUntil(const QString &pinned_until);
    bool is_pinned_until_Set() const;
    bool is_pinned_until_Valid() const;

    OAIGetTopic_200_response_post_stream getPostStream() const;
    void setPostStream(const OAIGetTopic_200_response_post_stream &post_stream);
    bool is_post_stream_Set() const;
    bool is_post_stream_Valid() const;

    qint32 getPostsCount() const;
    void setPostsCount(const qint32 &posts_count);
    bool is_posts_count_Set() const;
    bool is_posts_count_Valid() const;

    qint32 getReplyCount() const;
    void setReplyCount(const qint32 &reply_count);
    bool is_reply_count_Set() const;
    bool is_reply_count_Valid() const;

    bool isShowReadIndicator() const;
    void setShowReadIndicator(const bool &show_read_indicator);
    bool is_show_read_indicator_Set() const;
    bool is_show_read_indicator_Valid() const;

    QString getSlowModeEnabledUntil() const;
    void setSlowModeEnabledUntil(const QString &slow_mode_enabled_until);
    bool is_slow_mode_enabled_until_Set() const;
    bool is_slow_mode_enabled_until_Valid() const;

    qint32 getSlowModeSeconds() const;
    void setSlowModeSeconds(const qint32 &slow_mode_seconds);
    bool is_slow_mode_seconds_Set() const;
    bool is_slow_mode_seconds_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QList<OAIGetTopic_200_response_suggested_topics_inner> getSuggestedTopics() const;
    void setSuggestedTopics(const QList<OAIGetTopic_200_response_suggested_topics_inner> &suggested_topics);
    bool is_suggested_topics_Set() const;
    bool is_suggested_topics_Valid() const;

    QList<QJsonValue> getTags() const;
    void setTags(const QList<QJsonValue> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QMap<QString, QJsonValue> getTagsDescriptions() const;
    void setTagsDescriptions(const QMap<QString, QJsonValue> &tags_descriptions);
    bool is_tags_descriptions_Set() const;
    bool is_tags_descriptions_Valid() const;

    QString getThumbnails() const;
    void setThumbnails(const QString &thumbnails);
    bool is_thumbnails_Set() const;
    bool is_thumbnails_Valid() const;

    QList<QJsonValue> getTimelineLookup() const;
    void setTimelineLookup(const QList<QJsonValue> &timeline_lookup);
    bool is_timeline_lookup_Set() const;
    bool is_timeline_lookup_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTopicTimer() const;
    void setTopicTimer(const QString &topic_timer);
    bool is_topic_timer_Set() const;
    bool is_topic_timer_Valid() const;

    QString getUnpinned() const;
    void setUnpinned(const QString &unpinned);
    bool is_unpinned_Set() const;
    bool is_unpinned_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    qint32 getViews() const;
    void setViews(const qint32 &views);
    bool is_views_Set() const;
    bool is_views_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    qint32 getWordCount() const;
    void setWordCount(const qint32 &word_count);
    bool is_word_count_Set() const;
    bool is_word_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGetTopic_200_response_actions_summary_inner> m_actions_summary;
    bool m_actions_summary_isSet;
    bool m_actions_summary_isValid;

    QString m_archetype;
    bool m_archetype_isSet;
    bool m_archetype_isValid;

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    bool m_bookmarked;
    bool m_bookmarked_isSet;
    bool m_bookmarked_isValid;

    QList<QJsonValue> m_bookmarks;
    bool m_bookmarks_isSet;
    bool m_bookmarks_isValid;

    qint32 m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    qint32 m_chunk_size;
    bool m_chunk_size_isSet;
    bool m_chunk_size_isValid;

    bool m_closed;
    bool m_closed_isSet;
    bool m_closed_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint32 m_current_post_number;
    bool m_current_post_number_isSet;
    bool m_current_post_number_isValid;

    QString m_deleted_at;
    bool m_deleted_at_isSet;
    bool m_deleted_at_isValid;

    QString m_deleted_by;
    bool m_deleted_by_isSet;
    bool m_deleted_by_isValid;

    OAIGetTopic_200_response_details m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_draft;
    bool m_draft_isSet;
    bool m_draft_isValid;

    QString m_draft_key;
    bool m_draft_key_isSet;
    bool m_draft_key_isValid;

    qint32 m_draft_sequence;
    bool m_draft_sequence_isSet;
    bool m_draft_sequence_isValid;

    QString m_fancy_title;
    bool m_fancy_title_isSet;
    bool m_fancy_title_isValid;

    QString m_featured_link;
    bool m_featured_link_isSet;
    bool m_featured_link_isValid;

    bool m_has_deleted;
    bool m_has_deleted_isSet;
    bool m_has_deleted_isValid;

    bool m_has_summary;
    bool m_has_summary_isSet;
    bool m_has_summary_isValid;

    qint32 m_highest_post_number;
    bool m_highest_post_number_isSet;
    bool m_highest_post_number_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_last_posted_at;
    bool m_last_posted_at_isSet;
    bool m_last_posted_at_isValid;

    qint32 m_like_count;
    bool m_like_count_isSet;
    bool m_like_count_isValid;

    qint32 m_message_bus_last_id;
    bool m_message_bus_last_id_isSet;
    bool m_message_bus_last_id_isValid;

    qint32 m_participant_count;
    bool m_participant_count_isSet;
    bool m_participant_count_isValid;

    bool m_pinned;
    bool m_pinned_isSet;
    bool m_pinned_isValid;

    QString m_pinned_at;
    bool m_pinned_at_isSet;
    bool m_pinned_at_isValid;

    bool m_pinned_globally;
    bool m_pinned_globally_isSet;
    bool m_pinned_globally_isValid;

    QString m_pinned_until;
    bool m_pinned_until_isSet;
    bool m_pinned_until_isValid;

    OAIGetTopic_200_response_post_stream m_post_stream;
    bool m_post_stream_isSet;
    bool m_post_stream_isValid;

    qint32 m_posts_count;
    bool m_posts_count_isSet;
    bool m_posts_count_isValid;

    qint32 m_reply_count;
    bool m_reply_count_isSet;
    bool m_reply_count_isValid;

    bool m_show_read_indicator;
    bool m_show_read_indicator_isSet;
    bool m_show_read_indicator_isValid;

    QString m_slow_mode_enabled_until;
    bool m_slow_mode_enabled_until_isSet;
    bool m_slow_mode_enabled_until_isValid;

    qint32 m_slow_mode_seconds;
    bool m_slow_mode_seconds_isSet;
    bool m_slow_mode_seconds_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QList<OAIGetTopic_200_response_suggested_topics_inner> m_suggested_topics;
    bool m_suggested_topics_isSet;
    bool m_suggested_topics_isValid;

    QList<QJsonValue> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QMap<QString, QJsonValue> m_tags_descriptions;
    bool m_tags_descriptions_isSet;
    bool m_tags_descriptions_isValid;

    QString m_thumbnails;
    bool m_thumbnails_isSet;
    bool m_thumbnails_isValid;

    QList<QJsonValue> m_timeline_lookup;
    bool m_timeline_lookup_isSet;
    bool m_timeline_lookup_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_topic_timer;
    bool m_topic_timer_isSet;
    bool m_topic_timer_isValid;

    QString m_unpinned;
    bool m_unpinned_isSet;
    bool m_unpinned_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    qint32 m_views;
    bool m_views_isSet;
    bool m_views_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;

    qint32 m_word_count;
    bool m_word_count_isSet;
    bool m_word_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTopic_200_response)

#endif // OAIGetTopic_200_response_H
