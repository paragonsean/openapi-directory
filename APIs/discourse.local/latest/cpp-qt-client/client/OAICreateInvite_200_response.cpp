/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInvite_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInvite_200_response::OAICreateInvite_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInvite_200_response::OAICreateInvite_200_response() {
    this->initializeModel();
}

OAICreateInvite_200_response::~OAICreateInvite_200_response() {}

void OAICreateInvite_200_response::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_message_isSet = false;
    m_custom_message_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_emailed_isSet = false;
    m_emailed_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICreateInvite_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInvite_200_response::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_message_isValid = ::OpenAPI::fromJsonValue(m_custom_message, json[QString("custom_message")]);
    m_custom_message_isSet = !json[QString("custom_message")].isNull() && m_custom_message_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_emailed_isValid = ::OpenAPI::fromJsonValue(m_emailed, json[QString("emailed")]);
    m_emailed_isSet = !json[QString("emailed")].isNull() && m_emailed_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICreateInvite_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInvite_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_message_isSet) {
        obj.insert(QString("custom_message"), ::OpenAPI::toJsonValue(m_custom_message));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_emailed_isSet) {
        obj.insert(QString("emailed"), ::OpenAPI::toJsonValue(m_emailed));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAICreateInvite_200_response::getCreatedAt() const {
    return m_created_at;
}
void OAICreateInvite_200_response::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateInvite_200_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateInvite_200_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreateInvite_200_response::getCustomMessage() const {
    return m_custom_message;
}
void OAICreateInvite_200_response::setCustomMessage(const QString &custom_message) {
    m_custom_message = custom_message;
    m_custom_message_isSet = true;
}

bool OAICreateInvite_200_response::is_custom_message_Set() const{
    return m_custom_message_isSet;
}

bool OAICreateInvite_200_response::is_custom_message_Valid() const{
    return m_custom_message_isValid;
}

QString OAICreateInvite_200_response::getEmail() const {
    return m_email;
}
void OAICreateInvite_200_response::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateInvite_200_response::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateInvite_200_response::is_email_Valid() const{
    return m_email_isValid;
}

bool OAICreateInvite_200_response::isEmailed() const {
    return m_emailed;
}
void OAICreateInvite_200_response::setEmailed(const bool &emailed) {
    m_emailed = emailed;
    m_emailed_isSet = true;
}

bool OAICreateInvite_200_response::is_emailed_Set() const{
    return m_emailed_isSet;
}

bool OAICreateInvite_200_response::is_emailed_Valid() const{
    return m_emailed_isValid;
}

bool OAICreateInvite_200_response::isExpired() const {
    return m_expired;
}
void OAICreateInvite_200_response::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAICreateInvite_200_response::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAICreateInvite_200_response::is_expired_Valid() const{
    return m_expired_isValid;
}

QString OAICreateInvite_200_response::getExpiresAt() const {
    return m_expires_at;
}
void OAICreateInvite_200_response::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICreateInvite_200_response::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICreateInvite_200_response::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QList<QJsonValue> OAICreateInvite_200_response::getGroups() const {
    return m_groups;
}
void OAICreateInvite_200_response::setGroups(const QList<QJsonValue> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAICreateInvite_200_response::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAICreateInvite_200_response::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAICreateInvite_200_response::getId() const {
    return m_id;
}
void OAICreateInvite_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateInvite_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateInvite_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateInvite_200_response::getLink() const {
    return m_link;
}
void OAICreateInvite_200_response::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICreateInvite_200_response::is_link_Set() const{
    return m_link_isSet;
}

bool OAICreateInvite_200_response::is_link_Valid() const{
    return m_link_isValid;
}

QList<QJsonValue> OAICreateInvite_200_response::getTopics() const {
    return m_topics;
}
void OAICreateInvite_200_response::setTopics(const QList<QJsonValue> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAICreateInvite_200_response::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAICreateInvite_200_response::is_topics_Valid() const{
    return m_topics_isValid;
}

QString OAICreateInvite_200_response::getUpdatedAt() const {
    return m_updated_at;
}
void OAICreateInvite_200_response::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICreateInvite_200_response::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICreateInvite_200_response::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICreateInvite_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emailed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInvite_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
