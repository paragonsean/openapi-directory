/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUploadsApi_H
#define OAI_OAIUploadsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAbortMultipart_request.h"
#include "OAIBatchPresignMultipartParts_200_response.h"
#include "OAIBatchPresignMultipartParts_request.h"
#include "OAICompleteExternalUpload_request.h"
#include "OAICompleteMultipart_request.h"
#include "OAICreateMultipartUpload_200_response.h"
#include "OAICreateMultipartUpload_request.h"
#include "OAICreateUpload_200_response.h"
#include "OAIDeleteGroup_200_response.h"
#include "OAIGeneratePresignedPut_200_response.h"
#include "OAIGeneratePresignedPut_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUploadsApi : public QObject {
    Q_OBJECT

public:
    OAIUploadsApi(const int timeOut = 0);
    ~OAIUploadsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_abort_multipart_request OAIAbortMultipart_request [optional]
    */
    virtual void abortMultipart(const ::OpenAPI::OptionalParam<OAIAbortMultipart_request> &oai_abort_multipart_request = ::OpenAPI::OptionalParam<OAIAbortMultipart_request>());

    /**
    * @param[in]  oai_batch_presign_multipart_parts_request OAIBatchPresignMultipartParts_request [optional]
    */
    virtual void batchPresignMultipartParts(const ::OpenAPI::OptionalParam<OAIBatchPresignMultipartParts_request> &oai_batch_presign_multipart_parts_request = ::OpenAPI::OptionalParam<OAIBatchPresignMultipartParts_request>());

    /**
    * @param[in]  oai_complete_external_upload_request OAICompleteExternalUpload_request [optional]
    */
    virtual void completeExternalUpload(const ::OpenAPI::OptionalParam<OAICompleteExternalUpload_request> &oai_complete_external_upload_request = ::OpenAPI::OptionalParam<OAICompleteExternalUpload_request>());

    /**
    * @param[in]  oai_complete_multipart_request OAICompleteMultipart_request [optional]
    */
    virtual void completeMultipart(const ::OpenAPI::OptionalParam<OAICompleteMultipart_request> &oai_complete_multipart_request = ::OpenAPI::OptionalParam<OAICompleteMultipart_request>());

    /**
    * @param[in]  oai_create_multipart_upload_request OAICreateMultipartUpload_request [optional]
    */
    virtual void createMultipartUpload(const ::OpenAPI::OptionalParam<OAICreateMultipartUpload_request> &oai_create_multipart_upload_request = ::OpenAPI::OptionalParam<OAICreateMultipartUpload_request>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  file QJsonValue [optional]
    * @param[in]  synchronous bool [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void createUpload(const QString &type, const ::OpenAPI::OptionalParam<QJsonValue> &file = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_generate_presigned_put_request OAIGeneratePresignedPut_request [optional]
    */
    virtual void generatePresignedPut(const ::OpenAPI::OptionalParam<OAIGeneratePresignedPut_request> &oai_generate_presigned_put_request = ::OpenAPI::OptionalParam<OAIGeneratePresignedPut_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void abortMultipartCallback(OAIHttpRequestWorker *worker);
    void batchPresignMultipartPartsCallback(OAIHttpRequestWorker *worker);
    void completeExternalUploadCallback(OAIHttpRequestWorker *worker);
    void completeMultipartCallback(OAIHttpRequestWorker *worker);
    void createMultipartUploadCallback(OAIHttpRequestWorker *worker);
    void createUploadCallback(OAIHttpRequestWorker *worker);
    void generatePresignedPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void abortMultipartSignal(OAIDeleteGroup_200_response summary);
    void batchPresignMultipartPartsSignal(OAIBatchPresignMultipartParts_200_response summary);
    void completeExternalUploadSignal(OAICreateUpload_200_response summary);
    void completeMultipartSignal(OAICreateUpload_200_response summary);
    void createMultipartUploadSignal(OAICreateMultipartUpload_200_response summary);
    void createUploadSignal(OAICreateUpload_200_response summary);
    void generatePresignedPutSignal(OAIGeneratePresignedPut_200_response summary);


    void abortMultipartSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGroup_200_response summary);
    void batchPresignMultipartPartsSignalFull(OAIHttpRequestWorker *worker, OAIBatchPresignMultipartParts_200_response summary);
    void completeExternalUploadSignalFull(OAIHttpRequestWorker *worker, OAICreateUpload_200_response summary);
    void completeMultipartSignalFull(OAIHttpRequestWorker *worker, OAICreateUpload_200_response summary);
    void createMultipartUploadSignalFull(OAIHttpRequestWorker *worker, OAICreateMultipartUpload_200_response summary);
    void createUploadSignalFull(OAIHttpRequestWorker *worker, OAICreateUpload_200_response summary);
    void generatePresignedPutSignalFull(OAIHttpRequestWorker *worker, OAIGeneratePresignedPut_200_response summary);

    Q_DECL_DEPRECATED_X("Use abortMultipartSignalError() instead")
    void abortMultipartSignalE(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void abortMultipartSignalError(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchPresignMultipartPartsSignalError() instead")
    void batchPresignMultipartPartsSignalE(OAIBatchPresignMultipartParts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchPresignMultipartPartsSignalError(OAIBatchPresignMultipartParts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeExternalUploadSignalError() instead")
    void completeExternalUploadSignalE(OAICreateUpload_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeExternalUploadSignalError(OAICreateUpload_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeMultipartSignalError() instead")
    void completeMultipartSignalE(OAICreateUpload_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeMultipartSignalError(OAICreateUpload_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMultipartUploadSignalError() instead")
    void createMultipartUploadSignalE(OAICreateMultipartUpload_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMultipartUploadSignalError(OAICreateMultipartUpload_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUploadSignalError() instead")
    void createUploadSignalE(OAICreateUpload_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUploadSignalError(OAICreateUpload_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePresignedPutSignalError() instead")
    void generatePresignedPutSignalE(OAIGeneratePresignedPut_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePresignedPutSignalError(OAIGeneratePresignedPut_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use abortMultipartSignalErrorFull() instead")
    void abortMultipartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void abortMultipartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchPresignMultipartPartsSignalErrorFull() instead")
    void batchPresignMultipartPartsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchPresignMultipartPartsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeExternalUploadSignalErrorFull() instead")
    void completeExternalUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeExternalUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeMultipartSignalErrorFull() instead")
    void completeMultipartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeMultipartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMultipartUploadSignalErrorFull() instead")
    void createMultipartUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMultipartUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUploadSignalErrorFull() instead")
    void createUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePresignedPutSignalErrorFull() instead")
    void generatePresignedPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePresignedPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
