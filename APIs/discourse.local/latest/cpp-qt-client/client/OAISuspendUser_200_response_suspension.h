/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuspendUser_200_response_suspension.h
 *
 * 
 */

#ifndef OAISuspendUser_200_response_suspension_H
#define OAISuspendUser_200_response_suspension_H

#include <QJsonObject>

#include "OAIAdminGetUser_200_response_approved_by.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISuspendUser_200_response_suspension : public OAIObject {
public:
    OAISuspendUser_200_response_suspension();
    OAISuspendUser_200_response_suspension(QString json);
    ~OAISuspendUser_200_response_suspension() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFullSuspendReason() const;
    void setFullSuspendReason(const QString &full_suspend_reason);
    bool is_full_suspend_reason_Set() const;
    bool is_full_suspend_reason_Valid() const;

    QString getSuspendReason() const;
    void setSuspendReason(const QString &suspend_reason);
    bool is_suspend_reason_Set() const;
    bool is_suspend_reason_Valid() const;

    QString getSuspendedAt() const;
    void setSuspendedAt(const QString &suspended_at);
    bool is_suspended_at_Set() const;
    bool is_suspended_at_Valid() const;

    OAIAdminGetUser_200_response_approved_by getSuspendedBy() const;
    void setSuspendedBy(const OAIAdminGetUser_200_response_approved_by &suspended_by);
    bool is_suspended_by_Set() const;
    bool is_suspended_by_Valid() const;

    QString getSuspendedTill() const;
    void setSuspendedTill(const QString &suspended_till);
    bool is_suspended_till_Set() const;
    bool is_suspended_till_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_full_suspend_reason;
    bool m_full_suspend_reason_isSet;
    bool m_full_suspend_reason_isValid;

    QString m_suspend_reason;
    bool m_suspend_reason_isSet;
    bool m_suspend_reason_isValid;

    QString m_suspended_at;
    bool m_suspended_at_isSet;
    bool m_suspended_at_isValid;

    OAIAdminGetUser_200_response_approved_by m_suspended_by;
    bool m_suspended_by_isSet;
    bool m_suspended_by_isValid;

    QString m_suspended_till;
    bool m_suspended_till_isSet;
    bool m_suspended_till_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuspendUser_200_response_suspension)

#endif // OAISuspendUser_200_response_suspension_H
