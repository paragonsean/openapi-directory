/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateInvite_200_response.h
 *
 * 
 */

#ifndef OAICreateInvite_200_response_H
#define OAICreateInvite_200_response_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateInvite_200_response : public OAIObject {
public:
    OAICreateInvite_200_response();
    OAICreateInvite_200_response(QString json);
    ~OAICreateInvite_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCustomMessage() const;
    void setCustomMessage(const QString &custom_message);
    bool is_custom_message_Set() const;
    bool is_custom_message_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    bool isEmailed() const;
    void setEmailed(const bool &emailed);
    bool is_emailed_Set() const;
    bool is_emailed_Valid() const;

    bool isExpired() const;
    void setExpired(const bool &expired);
    bool is_expired_Set() const;
    bool is_expired_Valid() const;

    QString getExpiresAt() const;
    void setExpiresAt(const QString &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    QList<QJsonValue> getGroups() const;
    void setGroups(const QList<QJsonValue> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QList<QJsonValue> getTopics() const;
    void setTopics(const QList<QJsonValue> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_custom_message;
    bool m_custom_message_isSet;
    bool m_custom_message_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    bool m_emailed;
    bool m_emailed_isSet;
    bool m_emailed_isValid;

    bool m_expired;
    bool m_expired_isSet;
    bool m_expired_isValid;

    QString m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    QList<QJsonValue> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QList<QJsonValue> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateInvite_200_response)

#endif // OAICreateInvite_200_response_H
