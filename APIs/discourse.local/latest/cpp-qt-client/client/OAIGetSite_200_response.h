/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSite_200_response.h
 *
 * 
 */

#ifndef OAIGetSite_200_response_H
#define OAIGetSite_200_response_H

#include <QJsonObject>

#include "OAIGetSite_200_response_archetypes_inner.h"
#include "OAIGetSite_200_response_categories_inner.h"
#include "OAIGetSite_200_response_groups_inner.h"
#include "OAIGetSite_200_response_notification_types.h"
#include "OAIGetSite_200_response_post_action_types_inner.h"
#include "OAIGetSite_200_response_post_types.h"
#include "OAIGetSite_200_response_trust_levels.h"
#include "OAIGetSite_200_response_user_color_schemes_inner.h"
#include "OAIGetSite_200_response_user_themes_inner.h"
#include "OAIObject.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetSite_200_response : public OAIObject {
public:
    OAIGetSite_200_response();
    OAIGetSite_200_response(QString json);
    ~OAIGetSite_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QJsonValue> getAnonymousTopMenuItems() const;
    void setAnonymousTopMenuItems(const QList<QJsonValue> &anonymous_top_menu_items);
    bool is_anonymous_top_menu_items_Set() const;
    bool is_anonymous_top_menu_items_Valid() const;

    QList<OAIGetSite_200_response_archetypes_inner> getArchetypes() const;
    void setArchetypes(const QList<OAIGetSite_200_response_archetypes_inner> &archetypes);
    bool is_archetypes_Set() const;
    bool is_archetypes_Valid() const;

    QList<QJsonValue> getAuthProviders() const;
    void setAuthProviders(const QList<QJsonValue> &auth_providers);
    bool is_auth_providers_Set() const;
    bool is_auth_providers_Valid() const;

    bool isCanAssociateGroups() const;
    void setCanAssociateGroups(const bool &can_associate_groups);
    bool is_can_associate_groups_Set() const;
    bool is_can_associate_groups_Valid() const;

    bool isCanCreateTag() const;
    void setCanCreateTag(const bool &can_create_tag);
    bool is_can_create_tag_Set() const;
    bool is_can_create_tag_Valid() const;

    bool isCanTagPms() const;
    void setCanTagPms(const bool &can_tag_pms);
    bool is_can_tag_pms_Set() const;
    bool is_can_tag_pms_Valid() const;

    bool isCanTagTopics() const;
    void setCanTagTopics(const bool &can_tag_topics);
    bool is_can_tag_topics_Set() const;
    bool is_can_tag_topics_Valid() const;

    QList<OAIGetSite_200_response_categories_inner> getCategories() const;
    void setCategories(const QList<OAIGetSite_200_response_categories_inner> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    QList<OAIObject> getCensoredRegexp() const;
    void setCensoredRegexp(const QList<OAIObject> &censored_regexp);
    bool is_censored_regexp_Set() const;
    bool is_censored_regexp_Valid() const;

    QMap<QString, QJsonValue> getCustomEmojiTranslation() const;
    void setCustomEmojiTranslation(const QMap<QString, QJsonValue> &custom_emoji_translation);
    bool is_custom_emoji_translation_Set() const;
    bool is_custom_emoji_translation_Valid() const;

    QString getDefaultArchetype() const;
    void setDefaultArchetype(const QString &default_archetype);
    bool is_default_archetype_Set() const;
    bool is_default_archetype_Valid() const;

    OAIObject getDefaultDarkColorScheme() const;
    void setDefaultDarkColorScheme(const OAIObject &default_dark_color_scheme);
    bool is_default_dark_color_scheme_Set() const;
    bool is_default_dark_color_scheme_Valid() const;

    QList<QJsonValue> getDeniedEmojis() const;
    void setDeniedEmojis(const QList<QJsonValue> &denied_emojis);
    bool is_denied_emojis_Set() const;
    bool is_denied_emojis_Valid() const;

    QList<QJsonValue> getDisplayedAboutPluginStatGroups() const;
    void setDisplayedAboutPluginStatGroups(const QList<QJsonValue> &displayed_about_plugin_stat_groups);
    bool is_displayed_about_plugin_stat_groups_Set() const;
    bool is_displayed_about_plugin_stat_groups_Valid() const;

    QList<QJsonValue> getFilters() const;
    void setFilters(const QList<QJsonValue> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    QList<OAIGetSite_200_response_groups_inner> getGroups() const;
    void setGroups(const QList<OAIGetSite_200_response_groups_inner> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    OAIObject getHashtagConfigurations() const;
    void setHashtagConfigurations(const OAIObject &hashtag_configurations);
    bool is_hashtag_configurations_Set() const;
    bool is_hashtag_configurations_Valid() const;

    QList<QJsonValue> getHashtagIcons() const;
    void setHashtagIcons(const QList<QJsonValue> &hashtag_icons);
    bool is_hashtag_icons_Set() const;
    bool is_hashtag_icons_Valid() const;

    OAIObject getMarkdownAdditionalOptions() const;
    void setMarkdownAdditionalOptions(const OAIObject &markdown_additional_options);
    bool is_markdown_additional_options_Set() const;
    bool is_markdown_additional_options_Valid() const;

    OAIGetSite_200_response_notification_types getNotificationTypes() const;
    void setNotificationTypes(const OAIGetSite_200_response_notification_types &notification_types);
    bool is_notification_types_Set() const;
    bool is_notification_types_Valid() const;

    QList<QJsonValue> getPeriods() const;
    void setPeriods(const QList<QJsonValue> &periods);
    bool is_periods_Set() const;
    bool is_periods_Valid() const;

    QList<OAIGetSite_200_response_post_action_types_inner> getPostActionTypes() const;
    void setPostActionTypes(const QList<OAIGetSite_200_response_post_action_types_inner> &post_action_types);
    bool is_post_action_types_Set() const;
    bool is_post_action_types_Valid() const;

    OAIGetSite_200_response_post_types getPostTypes() const;
    void setPostTypes(const OAIGetSite_200_response_post_types &post_types);
    bool is_post_types_Set() const;
    bool is_post_types_Valid() const;

    bool isShowWelcomeTopicBanner() const;
    void setShowWelcomeTopicBanner(const bool &show_welcome_topic_banner);
    bool is_show_welcome_topic_banner_Set() const;
    bool is_show_welcome_topic_banner_Valid() const;

    QString getTagsFilterRegexp() const;
    void setTagsFilterRegexp(const QString &tags_filter_regexp);
    bool is_tags_filter_regexp_Set() const;
    bool is_tags_filter_regexp_Valid() const;

    QList<QJsonValue> getTopMenuItems() const;
    void setTopMenuItems(const QList<QJsonValue> &top_menu_items);
    bool is_top_menu_items_Set() const;
    bool is_top_menu_items_Valid() const;

    QList<QJsonValue> getTopTags() const;
    void setTopTags(const QList<QJsonValue> &top_tags);
    bool is_top_tags_Set() const;
    bool is_top_tags_Valid() const;

    QList<QJsonValue> getTopicFeaturedLinkAllowedCategoryIds() const;
    void setTopicFeaturedLinkAllowedCategoryIds(const QList<QJsonValue> &topic_featured_link_allowed_category_ids);
    bool is_topic_featured_link_allowed_category_ids_Set() const;
    bool is_topic_featured_link_allowed_category_ids_Valid() const;

    QList<OAIGetSite_200_response_post_action_types_inner> getTopicFlagTypes() const;
    void setTopicFlagTypes(const QList<OAIGetSite_200_response_post_action_types_inner> &topic_flag_types);
    bool is_topic_flag_types_Set() const;
    bool is_topic_flag_types_Valid() const;

    OAIGetSite_200_response_trust_levels getTrustLevels() const;
    void setTrustLevels(const OAIGetSite_200_response_trust_levels &trust_levels);
    bool is_trust_levels_Set() const;
    bool is_trust_levels_Valid() const;

    qint32 getUncategorizedCategoryId() const;
    void setUncategorizedCategoryId(const qint32 &uncategorized_category_id);
    bool is_uncategorized_category_id_Set() const;
    bool is_uncategorized_category_id_Valid() const;

    QList<OAIGetSite_200_response_user_color_schemes_inner> getUserColorSchemes() const;
    void setUserColorSchemes(const QList<OAIGetSite_200_response_user_color_schemes_inner> &user_color_schemes);
    bool is_user_color_schemes_Set() const;
    bool is_user_color_schemes_Valid() const;

    qint32 getUserFieldMaxLength() const;
    void setUserFieldMaxLength(const qint32 &user_field_max_length);
    bool is_user_field_max_length_Set() const;
    bool is_user_field_max_length_Valid() const;

    QList<QJsonValue> getUserFields() const;
    void setUserFields(const QList<QJsonValue> &user_fields);
    bool is_user_fields_Set() const;
    bool is_user_fields_Valid() const;

    QList<OAIGetSite_200_response_user_themes_inner> getUserThemes() const;
    void setUserThemes(const QList<OAIGetSite_200_response_user_themes_inner> &user_themes);
    bool is_user_themes_Set() const;
    bool is_user_themes_Valid() const;

    QString getWatchedWordsLink() const;
    void setWatchedWordsLink(const QString &watched_words_link);
    bool is_watched_words_link_Set() const;
    bool is_watched_words_link_Valid() const;

    QString getWatchedWordsReplace() const;
    void setWatchedWordsReplace(const QString &watched_words_replace);
    bool is_watched_words_replace_Set() const;
    bool is_watched_words_replace_Valid() const;

    QList<QJsonValue> getWhispersAllowedGroupsNames() const;
    void setWhispersAllowedGroupsNames(const QList<QJsonValue> &whispers_allowed_groups_names);
    bool is_whispers_allowed_groups_names_Set() const;
    bool is_whispers_allowed_groups_names_Valid() const;

    bool isWizardRequired() const;
    void setWizardRequired(const bool &wizard_required);
    bool is_wizard_required_Set() const;
    bool is_wizard_required_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QJsonValue> m_anonymous_top_menu_items;
    bool m_anonymous_top_menu_items_isSet;
    bool m_anonymous_top_menu_items_isValid;

    QList<OAIGetSite_200_response_archetypes_inner> m_archetypes;
    bool m_archetypes_isSet;
    bool m_archetypes_isValid;

    QList<QJsonValue> m_auth_providers;
    bool m_auth_providers_isSet;
    bool m_auth_providers_isValid;

    bool m_can_associate_groups;
    bool m_can_associate_groups_isSet;
    bool m_can_associate_groups_isValid;

    bool m_can_create_tag;
    bool m_can_create_tag_isSet;
    bool m_can_create_tag_isValid;

    bool m_can_tag_pms;
    bool m_can_tag_pms_isSet;
    bool m_can_tag_pms_isValid;

    bool m_can_tag_topics;
    bool m_can_tag_topics_isSet;
    bool m_can_tag_topics_isValid;

    QList<OAIGetSite_200_response_categories_inner> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    QList<OAIObject> m_censored_regexp;
    bool m_censored_regexp_isSet;
    bool m_censored_regexp_isValid;

    QMap<QString, QJsonValue> m_custom_emoji_translation;
    bool m_custom_emoji_translation_isSet;
    bool m_custom_emoji_translation_isValid;

    QString m_default_archetype;
    bool m_default_archetype_isSet;
    bool m_default_archetype_isValid;

    OAIObject m_default_dark_color_scheme;
    bool m_default_dark_color_scheme_isSet;
    bool m_default_dark_color_scheme_isValid;

    QList<QJsonValue> m_denied_emojis;
    bool m_denied_emojis_isSet;
    bool m_denied_emojis_isValid;

    QList<QJsonValue> m_displayed_about_plugin_stat_groups;
    bool m_displayed_about_plugin_stat_groups_isSet;
    bool m_displayed_about_plugin_stat_groups_isValid;

    QList<QJsonValue> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    QList<OAIGetSite_200_response_groups_inner> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    OAIObject m_hashtag_configurations;
    bool m_hashtag_configurations_isSet;
    bool m_hashtag_configurations_isValid;

    QList<QJsonValue> m_hashtag_icons;
    bool m_hashtag_icons_isSet;
    bool m_hashtag_icons_isValid;

    OAIObject m_markdown_additional_options;
    bool m_markdown_additional_options_isSet;
    bool m_markdown_additional_options_isValid;

    OAIGetSite_200_response_notification_types m_notification_types;
    bool m_notification_types_isSet;
    bool m_notification_types_isValid;

    QList<QJsonValue> m_periods;
    bool m_periods_isSet;
    bool m_periods_isValid;

    QList<OAIGetSite_200_response_post_action_types_inner> m_post_action_types;
    bool m_post_action_types_isSet;
    bool m_post_action_types_isValid;

    OAIGetSite_200_response_post_types m_post_types;
    bool m_post_types_isSet;
    bool m_post_types_isValid;

    bool m_show_welcome_topic_banner;
    bool m_show_welcome_topic_banner_isSet;
    bool m_show_welcome_topic_banner_isValid;

    QString m_tags_filter_regexp;
    bool m_tags_filter_regexp_isSet;
    bool m_tags_filter_regexp_isValid;

    QList<QJsonValue> m_top_menu_items;
    bool m_top_menu_items_isSet;
    bool m_top_menu_items_isValid;

    QList<QJsonValue> m_top_tags;
    bool m_top_tags_isSet;
    bool m_top_tags_isValid;

    QList<QJsonValue> m_topic_featured_link_allowed_category_ids;
    bool m_topic_featured_link_allowed_category_ids_isSet;
    bool m_topic_featured_link_allowed_category_ids_isValid;

    QList<OAIGetSite_200_response_post_action_types_inner> m_topic_flag_types;
    bool m_topic_flag_types_isSet;
    bool m_topic_flag_types_isValid;

    OAIGetSite_200_response_trust_levels m_trust_levels;
    bool m_trust_levels_isSet;
    bool m_trust_levels_isValid;

    qint32 m_uncategorized_category_id;
    bool m_uncategorized_category_id_isSet;
    bool m_uncategorized_category_id_isValid;

    QList<OAIGetSite_200_response_user_color_schemes_inner> m_user_color_schemes;
    bool m_user_color_schemes_isSet;
    bool m_user_color_schemes_isValid;

    qint32 m_user_field_max_length;
    bool m_user_field_max_length_isSet;
    bool m_user_field_max_length_isValid;

    QList<QJsonValue> m_user_fields;
    bool m_user_fields_isSet;
    bool m_user_fields_isValid;

    QList<OAIGetSite_200_response_user_themes_inner> m_user_themes;
    bool m_user_themes_isSet;
    bool m_user_themes_isValid;

    QString m_watched_words_link;
    bool m_watched_words_link_isSet;
    bool m_watched_words_link_isValid;

    QString m_watched_words_replace;
    bool m_watched_words_replace_isSet;
    bool m_watched_words_replace_isValid;

    QList<QJsonValue> m_whispers_allowed_groups_names;
    bool m_whispers_allowed_groups_names_isSet;
    bool m_whispers_allowed_groups_names_isValid;

    bool m_wizard_required;
    bool m_wizard_required_isSet;
    bool m_wizard_required_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSite_200_response)

#endif // OAIGetSite_200_response_H
