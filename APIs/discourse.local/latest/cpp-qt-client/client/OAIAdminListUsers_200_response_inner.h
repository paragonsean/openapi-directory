/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdminListUsers_200_response_inner.h
 *
 * 
 */

#ifndef OAIAdminListUsers_200_response_inner_H
#define OAIAdminListUsers_200_response_inner_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdminListUsers_200_response_inner : public OAIObject {
public:
    OAIAdminListUsers_200_response_inner();
    OAIAdminListUsers_200_response_inner(QString json);
    ~OAIAdminListUsers_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    QString getAvatarTemplate() const;
    void setAvatarTemplate(const QString &avatar_template);
    bool is_avatar_template_Set() const;
    bool is_avatar_template_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    double getCreatedAtAge() const;
    void setCreatedAtAge(const double &created_at_age);
    bool is_created_at_age_Set() const;
    bool is_created_at_age_Valid() const;

    qint32 getDaysVisited() const;
    void setDaysVisited(const qint32 &days_visited);
    bool is_days_visited_Set() const;
    bool is_days_visited_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    qint32 getFlagLevel() const;
    void setFlagLevel(const qint32 &flag_level);
    bool is_flag_level_Set() const;
    bool is_flag_level_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getLastEmailedAge() const;
    void setLastEmailedAge(const double &last_emailed_age);
    bool is_last_emailed_age_Set() const;
    bool is_last_emailed_age_Valid() const;

    QString getLastEmailedAt() const;
    void setLastEmailedAt(const QString &last_emailed_at);
    bool is_last_emailed_at_Set() const;
    bool is_last_emailed_at_Valid() const;

    double getLastSeenAge() const;
    void setLastSeenAge(const double &last_seen_age);
    bool is_last_seen_age_Set() const;
    bool is_last_seen_age_Valid() const;

    QString getLastSeenAt() const;
    void setLastSeenAt(const QString &last_seen_at);
    bool is_last_seen_at_Set() const;
    bool is_last_seen_at_Valid() const;

    QString getManualLockedTrustLevel() const;
    void setManualLockedTrustLevel(const QString &manual_locked_trust_level);
    bool is_manual_locked_trust_level_Set() const;
    bool is_manual_locked_trust_level_Valid() const;

    bool isModerator() const;
    void setModerator(const bool &moderator);
    bool is_moderator_Set() const;
    bool is_moderator_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPostCount() const;
    void setPostCount(const qint32 &post_count);
    bool is_post_count_Set() const;
    bool is_post_count_Valid() const;

    qint32 getPostsReadCount() const;
    void setPostsReadCount(const qint32 &posts_read_count);
    bool is_posts_read_count_Set() const;
    bool is_posts_read_count_Valid() const;

    QList<QJsonValue> getSecondaryEmails() const;
    void setSecondaryEmails(const QList<QJsonValue> &secondary_emails);
    bool is_secondary_emails_Set() const;
    bool is_secondary_emails_Valid() const;

    bool isStaged() const;
    void setStaged(const bool &staged);
    bool is_staged_Set() const;
    bool is_staged_Valid() const;

    qint32 getTimeRead() const;
    void setTimeRead(const qint32 &time_read);
    bool is_time_read_Set() const;
    bool is_time_read_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTopicsEntered() const;
    void setTopicsEntered(const qint32 &topics_entered);
    bool is_topics_entered_Set() const;
    bool is_topics_entered_Valid() const;

    qint32 getTrustLevel() const;
    void setTrustLevel(const qint32 &trust_level);
    bool is_trust_level_Set() const;
    bool is_trust_level_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    QString m_avatar_template;
    bool m_avatar_template_isSet;
    bool m_avatar_template_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    double m_created_at_age;
    bool m_created_at_age_isSet;
    bool m_created_at_age_isValid;

    qint32 m_days_visited;
    bool m_days_visited_isSet;
    bool m_days_visited_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    qint32 m_flag_level;
    bool m_flag_level_isSet;
    bool m_flag_level_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_last_emailed_age;
    bool m_last_emailed_age_isSet;
    bool m_last_emailed_age_isValid;

    QString m_last_emailed_at;
    bool m_last_emailed_at_isSet;
    bool m_last_emailed_at_isValid;

    double m_last_seen_age;
    bool m_last_seen_age_isSet;
    bool m_last_seen_age_isValid;

    QString m_last_seen_at;
    bool m_last_seen_at_isSet;
    bool m_last_seen_at_isValid;

    QString m_manual_locked_trust_level;
    bool m_manual_locked_trust_level_isSet;
    bool m_manual_locked_trust_level_isValid;

    bool m_moderator;
    bool m_moderator_isSet;
    bool m_moderator_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_post_count;
    bool m_post_count_isSet;
    bool m_post_count_isValid;

    qint32 m_posts_read_count;
    bool m_posts_read_count_isSet;
    bool m_posts_read_count_isValid;

    QList<QJsonValue> m_secondary_emails;
    bool m_secondary_emails_isSet;
    bool m_secondary_emails_isValid;

    bool m_staged;
    bool m_staged_isSet;
    bool m_staged_isValid;

    qint32 m_time_read;
    bool m_time_read_isSet;
    bool m_time_read_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_topics_entered;
    bool m_topics_entered_isSet;
    bool m_topics_entered_isValid;

    qint32 m_trust_level;
    bool m_trust_level_isSet;
    bool m_trust_level_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdminListUsers_200_response_inner)

#endif // OAIAdminListUsers_200_response_inner_H
