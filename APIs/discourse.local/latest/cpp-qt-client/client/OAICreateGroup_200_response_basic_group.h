/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateGroup_200_response_basic_group.h
 *
 * 
 */

#ifndef OAICreateGroup_200_response_basic_group_H
#define OAICreateGroup_200_response_basic_group_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateGroup_200_response_basic_group : public OAIObject {
public:
    OAICreateGroup_200_response_basic_group();
    OAICreateGroup_200_response_basic_group(QString json);
    ~OAICreateGroup_200_response_basic_group() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowMembershipRequests() const;
    void setAllowMembershipRequests(const bool &allow_membership_requests);
    bool is_allow_membership_requests_Set() const;
    bool is_allow_membership_requests_Valid() const;

    bool isAutomatic() const;
    void setAutomatic(const bool &automatic);
    bool is_automatic_Set() const;
    bool is_automatic_Valid() const;

    QString getBioCooked() const;
    void setBioCooked(const QString &bio_cooked);
    bool is_bio_cooked_Set() const;
    bool is_bio_cooked_Valid() const;

    QString getBioExcerpt() const;
    void setBioExcerpt(const QString &bio_excerpt);
    bool is_bio_excerpt_Set() const;
    bool is_bio_excerpt_Valid() const;

    QString getBioRaw() const;
    void setBioRaw(const QString &bio_raw);
    bool is_bio_raw_Set() const;
    bool is_bio_raw_Valid() const;

    bool isCanAdminGroup() const;
    void setCanAdminGroup(const bool &can_admin_group);
    bool is_can_admin_group_Set() const;
    bool is_can_admin_group_Valid() const;

    bool isCanEditGroup() const;
    void setCanEditGroup(const bool &can_edit_group);
    bool is_can_edit_group_Set() const;
    bool is_can_edit_group_Valid() const;

    bool isCanSeeMembers() const;
    void setCanSeeMembers(const bool &can_see_members);
    bool is_can_see_members_Set() const;
    bool is_can_see_members_Valid() const;

    qint32 getDefaultNotificationLevel() const;
    void setDefaultNotificationLevel(const qint32 &default_notification_level);
    bool is_default_notification_level_Set() const;
    bool is_default_notification_level_Valid() const;

    QString getFlairBgColor() const;
    void setFlairBgColor(const QString &flair_bg_color);
    bool is_flair_bg_color_Set() const;
    bool is_flair_bg_color_Valid() const;

    QString getFlairColor() const;
    void setFlairColor(const QString &flair_color);
    bool is_flair_color_Set() const;
    bool is_flair_color_Valid() const;

    QString getFlairUrl() const;
    void setFlairUrl(const QString &flair_url);
    bool is_flair_url_Set() const;
    bool is_flair_url_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    QString getGrantTrustLevel() const;
    void setGrantTrustLevel(const QString &grant_trust_level);
    bool is_grant_trust_level_Set() const;
    bool is_grant_trust_level_Valid() const;

    bool isHasMessages() const;
    void setHasMessages(const bool &has_messages);
    bool is_has_messages_Set() const;
    bool is_has_messages_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIncomingEmail() const;
    void setIncomingEmail(const QString &incoming_email);
    bool is_incoming_email_Set() const;
    bool is_incoming_email_Valid() const;

    qint32 getMembersVisibilityLevel() const;
    void setMembersVisibilityLevel(const qint32 &members_visibility_level);
    bool is_members_visibility_level_Set() const;
    bool is_members_visibility_level_Valid() const;

    QString getMembershipRequestTemplate() const;
    void setMembershipRequestTemplate(const QString &membership_request_template);
    bool is_membership_request_template_Set() const;
    bool is_membership_request_template_Valid() const;

    qint32 getMentionableLevel() const;
    void setMentionableLevel(const qint32 &mentionable_level);
    bool is_mentionable_level_Set() const;
    bool is_mentionable_level_Valid() const;

    qint32 getMessageableLevel() const;
    void setMessageableLevel(const qint32 &messageable_level);
    bool is_messageable_level_Set() const;
    bool is_messageable_level_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isPrimaryGroup() const;
    void setPrimaryGroup(const bool &primary_group);
    bool is_primary_group_Set() const;
    bool is_primary_group_Valid() const;

    bool isPublicAdmission() const;
    void setPublicAdmission(const bool &public_admission);
    bool is_public_admission_Set() const;
    bool is_public_admission_Valid() const;

    bool isPublicExit() const;
    void setPublicExit(const bool &public_exit);
    bool is_public_exit_Set() const;
    bool is_public_exit_Valid() const;

    bool isPublishReadState() const;
    void setPublishReadState(const bool &publish_read_state);
    bool is_publish_read_state_Set() const;
    bool is_publish_read_state_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getUserCount() const;
    void setUserCount(const qint32 &user_count);
    bool is_user_count_Set() const;
    bool is_user_count_Valid() const;

    qint32 getVisibilityLevel() const;
    void setVisibilityLevel(const qint32 &visibility_level);
    bool is_visibility_level_Set() const;
    bool is_visibility_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_membership_requests;
    bool m_allow_membership_requests_isSet;
    bool m_allow_membership_requests_isValid;

    bool m_automatic;
    bool m_automatic_isSet;
    bool m_automatic_isValid;

    QString m_bio_cooked;
    bool m_bio_cooked_isSet;
    bool m_bio_cooked_isValid;

    QString m_bio_excerpt;
    bool m_bio_excerpt_isSet;
    bool m_bio_excerpt_isValid;

    QString m_bio_raw;
    bool m_bio_raw_isSet;
    bool m_bio_raw_isValid;

    bool m_can_admin_group;
    bool m_can_admin_group_isSet;
    bool m_can_admin_group_isValid;

    bool m_can_edit_group;
    bool m_can_edit_group_isSet;
    bool m_can_edit_group_isValid;

    bool m_can_see_members;
    bool m_can_see_members_isSet;
    bool m_can_see_members_isValid;

    qint32 m_default_notification_level;
    bool m_default_notification_level_isSet;
    bool m_default_notification_level_isValid;

    QString m_flair_bg_color;
    bool m_flair_bg_color_isSet;
    bool m_flair_bg_color_isValid;

    QString m_flair_color;
    bool m_flair_color_isSet;
    bool m_flair_color_isValid;

    QString m_flair_url;
    bool m_flair_url_isSet;
    bool m_flair_url_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    QString m_grant_trust_level;
    bool m_grant_trust_level_isSet;
    bool m_grant_trust_level_isValid;

    bool m_has_messages;
    bool m_has_messages_isSet;
    bool m_has_messages_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_incoming_email;
    bool m_incoming_email_isSet;
    bool m_incoming_email_isValid;

    qint32 m_members_visibility_level;
    bool m_members_visibility_level_isSet;
    bool m_members_visibility_level_isValid;

    QString m_membership_request_template;
    bool m_membership_request_template_isSet;
    bool m_membership_request_template_isValid;

    qint32 m_mentionable_level;
    bool m_mentionable_level_isSet;
    bool m_mentionable_level_isValid;

    qint32 m_messageable_level;
    bool m_messageable_level_isSet;
    bool m_messageable_level_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_primary_group;
    bool m_primary_group_isSet;
    bool m_primary_group_isValid;

    bool m_public_admission;
    bool m_public_admission_isSet;
    bool m_public_admission_isValid;

    bool m_public_exit;
    bool m_public_exit_isSet;
    bool m_public_exit_isValid;

    bool m_publish_read_state;
    bool m_publish_read_state_isSet;
    bool m_publish_read_state_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_user_count;
    bool m_user_count_isSet;
    bool m_user_count_isValid;

    qint32 m_visibility_level;
    bool m_visibility_level_isSet;
    bool m_visibility_level_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateGroup_200_response_basic_group)

#endif // OAICreateGroup_200_response_basic_group_H
