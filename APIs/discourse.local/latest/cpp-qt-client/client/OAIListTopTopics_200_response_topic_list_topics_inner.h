/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListTopTopics_200_response_topic_list_topics_inner.h
 *
 * 
 */

#ifndef OAIListTopTopics_200_response_topic_list_topics_inner_H
#define OAIListTopTopics_200_response_topic_list_topics_inner_H

#include <QJsonObject>

#include "OAIListTopTopics_200_response_topic_list_topics_inner_posters_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListTopTopics_200_response_topic_list_topics_inner_posters_inner;

class OAIListTopTopics_200_response_topic_list_topics_inner : public OAIObject {
public:
    OAIListTopTopics_200_response_topic_list_topics_inner();
    OAIListTopTopics_200_response_topic_list_topics_inner(QString json);
    ~OAIListTopTopics_200_response_topic_list_topics_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchetype() const;
    void setArchetype(const QString &archetype);
    bool is_archetype_Set() const;
    bool is_archetype_Valid() const;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    bool isBookmarked() const;
    void setBookmarked(const bool &bookmarked);
    bool is_bookmarked_Set() const;
    bool is_bookmarked_Valid() const;

    bool isBumped() const;
    void setBumped(const bool &bumped);
    bool is_bumped_Set() const;
    bool is_bumped_Valid() const;

    QString getBumpedAt() const;
    void setBumpedAt(const QString &bumped_at);
    bool is_bumped_at_Set() const;
    bool is_bumped_at_Valid() const;

    qint32 getCategoryId() const;
    void setCategoryId(const qint32 &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    bool isClosed() const;
    void setClosed(const bool &closed);
    bool is_closed_Set() const;
    bool is_closed_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getFancyTitle() const;
    void setFancyTitle(const QString &fancy_title);
    bool is_fancy_title_Set() const;
    bool is_fancy_title_Valid() const;

    QString getFeaturedLink() const;
    void setFeaturedLink(const QString &featured_link);
    bool is_featured_link_Set() const;
    bool is_featured_link_Valid() const;

    bool isHasSummary() const;
    void setHasSummary(const bool &has_summary);
    bool is_has_summary_Set() const;
    bool is_has_summary_Valid() const;

    qint32 getHighestPostNumber() const;
    void setHighestPostNumber(const qint32 &highest_post_number);
    bool is_highest_post_number_Set() const;
    bool is_highest_post_number_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getLastPostedAt() const;
    void setLastPostedAt(const QString &last_posted_at);
    bool is_last_posted_at_Set() const;
    bool is_last_posted_at_Valid() const;

    QString getLastPosterUsername() const;
    void setLastPosterUsername(const QString &last_poster_username);
    bool is_last_poster_username_Set() const;
    bool is_last_poster_username_Valid() const;

    qint32 getLastReadPostNumber() const;
    void setLastReadPostNumber(const qint32 &last_read_post_number);
    bool is_last_read_post_number_Set() const;
    bool is_last_read_post_number_Valid() const;

    qint32 getLikeCount() const;
    void setLikeCount(const qint32 &like_count);
    bool is_like_count_Set() const;
    bool is_like_count_Valid() const;

    bool isLiked() const;
    void setLiked(const bool &liked);
    bool is_liked_Set() const;
    bool is_liked_Valid() const;

    qint32 getNotificationLevel() const;
    void setNotificationLevel(const qint32 &notification_level);
    bool is_notification_level_Set() const;
    bool is_notification_level_Valid() const;

    qint32 getOpLikeCount() const;
    void setOpLikeCount(const qint32 &op_like_count);
    bool is_op_like_count_Set() const;
    bool is_op_like_count_Valid() const;

    bool isPinned() const;
    void setPinned(const bool &pinned);
    bool is_pinned_Set() const;
    bool is_pinned_Valid() const;

    bool isPinnedGlobally() const;
    void setPinnedGlobally(const bool &pinned_globally);
    bool is_pinned_globally_Set() const;
    bool is_pinned_globally_Valid() const;

    QList<OAIListTopTopics_200_response_topic_list_topics_inner_posters_inner> getPosters() const;
    void setPosters(const QList<OAIListTopTopics_200_response_topic_list_topics_inner_posters_inner> &posters);
    bool is_posters_Set() const;
    bool is_posters_Valid() const;

    qint32 getPostsCount() const;
    void setPostsCount(const qint32 &posts_count);
    bool is_posts_count_Set() const;
    bool is_posts_count_Valid() const;

    qint32 getReplyCount() const;
    void setReplyCount(const qint32 &reply_count);
    bool is_reply_count_Set() const;
    bool is_reply_count_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    bool isUnpinned() const;
    void setUnpinned(const bool &unpinned);
    bool is_unpinned_Set() const;
    bool is_unpinned_Valid() const;

    qint32 getUnreadPosts() const;
    void setUnreadPosts(const qint32 &unread_posts);
    bool is_unread_posts_Set() const;
    bool is_unread_posts_Valid() const;

    bool isUnseen() const;
    void setUnseen(const bool &unseen);
    bool is_unseen_Set() const;
    bool is_unseen_Valid() const;

    qint32 getViews() const;
    void setViews(const qint32 &views);
    bool is_views_Set() const;
    bool is_views_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_archetype;
    bool m_archetype_isSet;
    bool m_archetype_isValid;

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    bool m_bookmarked;
    bool m_bookmarked_isSet;
    bool m_bookmarked_isValid;

    bool m_bumped;
    bool m_bumped_isSet;
    bool m_bumped_isValid;

    QString m_bumped_at;
    bool m_bumped_at_isSet;
    bool m_bumped_at_isValid;

    qint32 m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    bool m_closed;
    bool m_closed_isSet;
    bool m_closed_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_fancy_title;
    bool m_fancy_title_isSet;
    bool m_fancy_title_isValid;

    QString m_featured_link;
    bool m_featured_link_isSet;
    bool m_featured_link_isValid;

    bool m_has_summary;
    bool m_has_summary_isSet;
    bool m_has_summary_isValid;

    qint32 m_highest_post_number;
    bool m_highest_post_number_isSet;
    bool m_highest_post_number_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_last_posted_at;
    bool m_last_posted_at_isSet;
    bool m_last_posted_at_isValid;

    QString m_last_poster_username;
    bool m_last_poster_username_isSet;
    bool m_last_poster_username_isValid;

    qint32 m_last_read_post_number;
    bool m_last_read_post_number_isSet;
    bool m_last_read_post_number_isValid;

    qint32 m_like_count;
    bool m_like_count_isSet;
    bool m_like_count_isValid;

    bool m_liked;
    bool m_liked_isSet;
    bool m_liked_isValid;

    qint32 m_notification_level;
    bool m_notification_level_isSet;
    bool m_notification_level_isValid;

    qint32 m_op_like_count;
    bool m_op_like_count_isSet;
    bool m_op_like_count_isValid;

    bool m_pinned;
    bool m_pinned_isSet;
    bool m_pinned_isValid;

    bool m_pinned_globally;
    bool m_pinned_globally_isSet;
    bool m_pinned_globally_isValid;

    QList<OAIListTopTopics_200_response_topic_list_topics_inner_posters_inner> m_posters;
    bool m_posters_isSet;
    bool m_posters_isValid;

    qint32 m_posts_count;
    bool m_posts_count_isSet;
    bool m_posts_count_isValid;

    qint32 m_reply_count;
    bool m_reply_count_isSet;
    bool m_reply_count_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    bool m_unpinned;
    bool m_unpinned_isSet;
    bool m_unpinned_isValid;

    qint32 m_unread_posts;
    bool m_unread_posts_isSet;
    bool m_unread_posts_isValid;

    bool m_unseen;
    bool m_unseen_isSet;
    bool m_unseen_isValid;

    qint32 m_views;
    bool m_views_isSet;
    bool m_views_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListTopTopics_200_response_topic_list_topics_inner)

#endif // OAIListTopTopics_200_response_topic_list_topics_inner_H
