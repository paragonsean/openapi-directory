/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListUsersPublic_200_response_directory_items_inner.h
 *
 * 
 */

#ifndef OAIListUsersPublic_200_response_directory_items_inner_H
#define OAIListUsersPublic_200_response_directory_items_inner_H

#include <QJsonObject>

#include "OAIListUsersPublic_200_response_directory_items_inner_user.h"
#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListUsersPublic_200_response_directory_items_inner : public OAIObject {
public:
    OAIListUsersPublic_200_response_directory_items_inner();
    OAIListUsersPublic_200_response_directory_items_inner(QString json);
    ~OAIListUsersPublic_200_response_directory_items_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDaysVisited() const;
    void setDaysVisited(const qint32 &days_visited);
    bool is_days_visited_Set() const;
    bool is_days_visited_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getLikesGiven() const;
    void setLikesGiven(const qint32 &likes_given);
    bool is_likes_given_Set() const;
    bool is_likes_given_Valid() const;

    qint32 getLikesReceived() const;
    void setLikesReceived(const qint32 &likes_received);
    bool is_likes_received_Set() const;
    bool is_likes_received_Valid() const;

    qint32 getPostCount() const;
    void setPostCount(const qint32 &post_count);
    bool is_post_count_Set() const;
    bool is_post_count_Valid() const;

    qint32 getPostsRead() const;
    void setPostsRead(const qint32 &posts_read);
    bool is_posts_read_Set() const;
    bool is_posts_read_Valid() const;

    qint32 getTopicCount() const;
    void setTopicCount(const qint32 &topic_count);
    bool is_topic_count_Set() const;
    bool is_topic_count_Valid() const;

    qint32 getTopicsEntered() const;
    void setTopicsEntered(const qint32 &topics_entered);
    bool is_topics_entered_Set() const;
    bool is_topics_entered_Valid() const;

    OAIListUsersPublic_200_response_directory_items_inner_user getUser() const;
    void setUser(const OAIListUsersPublic_200_response_directory_items_inner_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_days_visited;
    bool m_days_visited_isSet;
    bool m_days_visited_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_likes_given;
    bool m_likes_given_isSet;
    bool m_likes_given_isValid;

    qint32 m_likes_received;
    bool m_likes_received_isSet;
    bool m_likes_received_isValid;

    qint32 m_post_count;
    bool m_post_count_isSet;
    bool m_post_count_isValid;

    qint32 m_posts_read;
    bool m_posts_read_isSet;
    bool m_posts_read_isValid;

    qint32 m_topic_count;
    bool m_topic_count_isSet;
    bool m_topic_count_isValid;

    qint32 m_topics_entered;
    bool m_topics_entered_isSet;
    bool m_topics_entered_isValid;

    OAIListUsersPublic_200_response_directory_items_inner_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListUsersPublic_200_response_directory_items_inner)

#endif // OAIListUsersPublic_200_response_directory_items_inner_H
