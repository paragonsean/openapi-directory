/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminGetUser_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminGetUser_200_response::OAIAdminGetUser_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminGetUser_200_response::OAIAdminGetUser_200_response() {
    this->initializeModel();
}

OAIAdminGetUser_200_response::~OAIAdminGetUser_200_response() {}

void OAIAdminGetUser_200_response::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_api_key_count_isSet = false;
    m_api_key_count_isValid = false;

    m_approved_by_isSet = false;
    m_approved_by_isValid = false;

    m_associated_accounts_isSet = false;
    m_associated_accounts_isValid = false;

    m_avatar_template_isSet = false;
    m_avatar_template_isValid = false;

    m_badge_count_isSet = false;
    m_badge_count_isValid = false;

    m_bounce_score_isSet = false;
    m_bounce_score_isValid = false;

    m_can_activate_isSet = false;
    m_can_activate_isValid = false;

    m_can_be_anonymized_isSet = false;
    m_can_be_anonymized_isValid = false;

    m_can_be_deleted_isSet = false;
    m_can_be_deleted_isValid = false;

    m_can_be_merged_isSet = false;
    m_can_be_merged_isValid = false;

    m_can_deactivate_isSet = false;
    m_can_deactivate_isValid = false;

    m_can_delete_all_posts_isSet = false;
    m_can_delete_all_posts_isValid = false;

    m_can_delete_sso_record_isSet = false;
    m_can_delete_sso_record_isValid = false;

    m_can_disable_second_factor_isSet = false;
    m_can_disable_second_factor_isValid = false;

    m_can_grant_admin_isSet = false;
    m_can_grant_admin_isValid = false;

    m_can_grant_moderation_isSet = false;
    m_can_grant_moderation_isValid = false;

    m_can_impersonate_isSet = false;
    m_can_impersonate_isValid = false;

    m_can_revoke_admin_isSet = false;
    m_can_revoke_admin_isValid = false;

    m_can_revoke_moderation_isSet = false;
    m_can_revoke_moderation_isValid = false;

    m_can_send_activation_email_isSet = false;
    m_can_send_activation_email_isValid = false;

    m_can_view_action_logs_isSet = false;
    m_can_view_action_logs_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_at_age_isSet = false;
    m_created_at_age_isValid = false;

    m_days_visited_isSet = false;
    m_days_visited_isValid = false;

    m_external_ids_isSet = false;
    m_external_ids_isValid = false;

    m_flag_level_isSet = false;
    m_flag_level_isValid = false;

    m_flags_given_count_isSet = false;
    m_flags_given_count_isValid = false;

    m_flags_received_count_isSet = false;
    m_flags_received_count_isValid = false;

    m_full_suspend_reason_isSet = false;
    m_full_suspend_reason_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_emailed_age_isSet = false;
    m_last_emailed_age_isValid = false;

    m_last_emailed_at_isSet = false;
    m_last_emailed_at_isValid = false;

    m_last_seen_age_isSet = false;
    m_last_seen_age_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_like_count_isSet = false;
    m_like_count_isValid = false;

    m_like_given_count_isSet = false;
    m_like_given_count_isValid = false;

    m_manual_locked_trust_level_isSet = false;
    m_manual_locked_trust_level_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_penalty_isSet = false;
    m_next_penalty_isValid = false;

    m_penalty_counts_isSet = false;
    m_penalty_counts_isValid = false;

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_post_edits_count_isSet = false;
    m_post_edits_count_isValid = false;

    m_posts_read_count_isSet = false;
    m_posts_read_count_isValid = false;

    m_primary_group_id_isSet = false;
    m_primary_group_id_isValid = false;

    m_private_topics_count_isSet = false;
    m_private_topics_count_isValid = false;

    m_registration_ip_address_isSet = false;
    m_registration_ip_address_isValid = false;

    m_reset_bounce_score_after_isSet = false;
    m_reset_bounce_score_after_isValid = false;

    m_silence_reason_isSet = false;
    m_silence_reason_isValid = false;

    m_silenced_by_isSet = false;
    m_silenced_by_isValid = false;

    m_single_sign_on_record_isSet = false;
    m_single_sign_on_record_isValid = false;

    m_staged_isSet = false;
    m_staged_isValid = false;

    m_suspended_by_isSet = false;
    m_suspended_by_isValid = false;

    m_time_read_isSet = false;
    m_time_read_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tl3_requirements_isSet = false;
    m_tl3_requirements_isValid = false;

    m_topic_count_isSet = false;
    m_topic_count_isValid = false;

    m_topics_entered_isSet = false;
    m_topics_entered_isValid = false;

    m_trust_level_isSet = false;
    m_trust_level_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_warnings_received_count_isSet = false;
    m_warnings_received_count_isValid = false;
}

void OAIAdminGetUser_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminGetUser_200_response::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_api_key_count_isValid = ::OpenAPI::fromJsonValue(m_api_key_count, json[QString("api_key_count")]);
    m_api_key_count_isSet = !json[QString("api_key_count")].isNull() && m_api_key_count_isValid;

    m_approved_by_isValid = ::OpenAPI::fromJsonValue(m_approved_by, json[QString("approved_by")]);
    m_approved_by_isSet = !json[QString("approved_by")].isNull() && m_approved_by_isValid;

    m_associated_accounts_isValid = ::OpenAPI::fromJsonValue(m_associated_accounts, json[QString("associated_accounts")]);
    m_associated_accounts_isSet = !json[QString("associated_accounts")].isNull() && m_associated_accounts_isValid;

    m_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_avatar_template, json[QString("avatar_template")]);
    m_avatar_template_isSet = !json[QString("avatar_template")].isNull() && m_avatar_template_isValid;

    m_badge_count_isValid = ::OpenAPI::fromJsonValue(m_badge_count, json[QString("badge_count")]);
    m_badge_count_isSet = !json[QString("badge_count")].isNull() && m_badge_count_isValid;

    m_bounce_score_isValid = ::OpenAPI::fromJsonValue(m_bounce_score, json[QString("bounce_score")]);
    m_bounce_score_isSet = !json[QString("bounce_score")].isNull() && m_bounce_score_isValid;

    m_can_activate_isValid = ::OpenAPI::fromJsonValue(m_can_activate, json[QString("can_activate")]);
    m_can_activate_isSet = !json[QString("can_activate")].isNull() && m_can_activate_isValid;

    m_can_be_anonymized_isValid = ::OpenAPI::fromJsonValue(m_can_be_anonymized, json[QString("can_be_anonymized")]);
    m_can_be_anonymized_isSet = !json[QString("can_be_anonymized")].isNull() && m_can_be_anonymized_isValid;

    m_can_be_deleted_isValid = ::OpenAPI::fromJsonValue(m_can_be_deleted, json[QString("can_be_deleted")]);
    m_can_be_deleted_isSet = !json[QString("can_be_deleted")].isNull() && m_can_be_deleted_isValid;

    m_can_be_merged_isValid = ::OpenAPI::fromJsonValue(m_can_be_merged, json[QString("can_be_merged")]);
    m_can_be_merged_isSet = !json[QString("can_be_merged")].isNull() && m_can_be_merged_isValid;

    m_can_deactivate_isValid = ::OpenAPI::fromJsonValue(m_can_deactivate, json[QString("can_deactivate")]);
    m_can_deactivate_isSet = !json[QString("can_deactivate")].isNull() && m_can_deactivate_isValid;

    m_can_delete_all_posts_isValid = ::OpenAPI::fromJsonValue(m_can_delete_all_posts, json[QString("can_delete_all_posts")]);
    m_can_delete_all_posts_isSet = !json[QString("can_delete_all_posts")].isNull() && m_can_delete_all_posts_isValid;

    m_can_delete_sso_record_isValid = ::OpenAPI::fromJsonValue(m_can_delete_sso_record, json[QString("can_delete_sso_record")]);
    m_can_delete_sso_record_isSet = !json[QString("can_delete_sso_record")].isNull() && m_can_delete_sso_record_isValid;

    m_can_disable_second_factor_isValid = ::OpenAPI::fromJsonValue(m_can_disable_second_factor, json[QString("can_disable_second_factor")]);
    m_can_disable_second_factor_isSet = !json[QString("can_disable_second_factor")].isNull() && m_can_disable_second_factor_isValid;

    m_can_grant_admin_isValid = ::OpenAPI::fromJsonValue(m_can_grant_admin, json[QString("can_grant_admin")]);
    m_can_grant_admin_isSet = !json[QString("can_grant_admin")].isNull() && m_can_grant_admin_isValid;

    m_can_grant_moderation_isValid = ::OpenAPI::fromJsonValue(m_can_grant_moderation, json[QString("can_grant_moderation")]);
    m_can_grant_moderation_isSet = !json[QString("can_grant_moderation")].isNull() && m_can_grant_moderation_isValid;

    m_can_impersonate_isValid = ::OpenAPI::fromJsonValue(m_can_impersonate, json[QString("can_impersonate")]);
    m_can_impersonate_isSet = !json[QString("can_impersonate")].isNull() && m_can_impersonate_isValid;

    m_can_revoke_admin_isValid = ::OpenAPI::fromJsonValue(m_can_revoke_admin, json[QString("can_revoke_admin")]);
    m_can_revoke_admin_isSet = !json[QString("can_revoke_admin")].isNull() && m_can_revoke_admin_isValid;

    m_can_revoke_moderation_isValid = ::OpenAPI::fromJsonValue(m_can_revoke_moderation, json[QString("can_revoke_moderation")]);
    m_can_revoke_moderation_isSet = !json[QString("can_revoke_moderation")].isNull() && m_can_revoke_moderation_isValid;

    m_can_send_activation_email_isValid = ::OpenAPI::fromJsonValue(m_can_send_activation_email, json[QString("can_send_activation_email")]);
    m_can_send_activation_email_isSet = !json[QString("can_send_activation_email")].isNull() && m_can_send_activation_email_isValid;

    m_can_view_action_logs_isValid = ::OpenAPI::fromJsonValue(m_can_view_action_logs, json[QString("can_view_action_logs")]);
    m_can_view_action_logs_isSet = !json[QString("can_view_action_logs")].isNull() && m_can_view_action_logs_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_at_age_isValid = ::OpenAPI::fromJsonValue(m_created_at_age, json[QString("created_at_age")]);
    m_created_at_age_isSet = !json[QString("created_at_age")].isNull() && m_created_at_age_isValid;

    m_days_visited_isValid = ::OpenAPI::fromJsonValue(m_days_visited, json[QString("days_visited")]);
    m_days_visited_isSet = !json[QString("days_visited")].isNull() && m_days_visited_isValid;

    m_external_ids_isValid = ::OpenAPI::fromJsonValue(m_external_ids, json[QString("external_ids")]);
    m_external_ids_isSet = !json[QString("external_ids")].isNull() && m_external_ids_isValid;

    m_flag_level_isValid = ::OpenAPI::fromJsonValue(m_flag_level, json[QString("flag_level")]);
    m_flag_level_isSet = !json[QString("flag_level")].isNull() && m_flag_level_isValid;

    m_flags_given_count_isValid = ::OpenAPI::fromJsonValue(m_flags_given_count, json[QString("flags_given_count")]);
    m_flags_given_count_isSet = !json[QString("flags_given_count")].isNull() && m_flags_given_count_isValid;

    m_flags_received_count_isValid = ::OpenAPI::fromJsonValue(m_flags_received_count, json[QString("flags_received_count")]);
    m_flags_received_count_isSet = !json[QString("flags_received_count")].isNull() && m_flags_received_count_isValid;

    m_full_suspend_reason_isValid = ::OpenAPI::fromJsonValue(m_full_suspend_reason, json[QString("full_suspend_reason")]);
    m_full_suspend_reason_isSet = !json[QString("full_suspend_reason")].isNull() && m_full_suspend_reason_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_last_emailed_age_isValid = ::OpenAPI::fromJsonValue(m_last_emailed_age, json[QString("last_emailed_age")]);
    m_last_emailed_age_isSet = !json[QString("last_emailed_age")].isNull() && m_last_emailed_age_isValid;

    m_last_emailed_at_isValid = ::OpenAPI::fromJsonValue(m_last_emailed_at, json[QString("last_emailed_at")]);
    m_last_emailed_at_isSet = !json[QString("last_emailed_at")].isNull() && m_last_emailed_at_isValid;

    m_last_seen_age_isValid = ::OpenAPI::fromJsonValue(m_last_seen_age, json[QString("last_seen_age")]);
    m_last_seen_age_isSet = !json[QString("last_seen_age")].isNull() && m_last_seen_age_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_like_count_isValid = ::OpenAPI::fromJsonValue(m_like_count, json[QString("like_count")]);
    m_like_count_isSet = !json[QString("like_count")].isNull() && m_like_count_isValid;

    m_like_given_count_isValid = ::OpenAPI::fromJsonValue(m_like_given_count, json[QString("like_given_count")]);
    m_like_given_count_isSet = !json[QString("like_given_count")].isNull() && m_like_given_count_isValid;

    m_manual_locked_trust_level_isValid = ::OpenAPI::fromJsonValue(m_manual_locked_trust_level, json[QString("manual_locked_trust_level")]);
    m_manual_locked_trust_level_isSet = !json[QString("manual_locked_trust_level")].isNull() && m_manual_locked_trust_level_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_penalty_isValid = ::OpenAPI::fromJsonValue(m_next_penalty, json[QString("next_penalty")]);
    m_next_penalty_isSet = !json[QString("next_penalty")].isNull() && m_next_penalty_isValid;

    m_penalty_counts_isValid = ::OpenAPI::fromJsonValue(m_penalty_counts, json[QString("penalty_counts")]);
    m_penalty_counts_isSet = !json[QString("penalty_counts")].isNull() && m_penalty_counts_isValid;

    m_post_count_isValid = ::OpenAPI::fromJsonValue(m_post_count, json[QString("post_count")]);
    m_post_count_isSet = !json[QString("post_count")].isNull() && m_post_count_isValid;

    m_post_edits_count_isValid = ::OpenAPI::fromJsonValue(m_post_edits_count, json[QString("post_edits_count")]);
    m_post_edits_count_isSet = !json[QString("post_edits_count")].isNull() && m_post_edits_count_isValid;

    m_posts_read_count_isValid = ::OpenAPI::fromJsonValue(m_posts_read_count, json[QString("posts_read_count")]);
    m_posts_read_count_isSet = !json[QString("posts_read_count")].isNull() && m_posts_read_count_isValid;

    m_primary_group_id_isValid = ::OpenAPI::fromJsonValue(m_primary_group_id, json[QString("primary_group_id")]);
    m_primary_group_id_isSet = !json[QString("primary_group_id")].isNull() && m_primary_group_id_isValid;

    m_private_topics_count_isValid = ::OpenAPI::fromJsonValue(m_private_topics_count, json[QString("private_topics_count")]);
    m_private_topics_count_isSet = !json[QString("private_topics_count")].isNull() && m_private_topics_count_isValid;

    m_registration_ip_address_isValid = ::OpenAPI::fromJsonValue(m_registration_ip_address, json[QString("registration_ip_address")]);
    m_registration_ip_address_isSet = !json[QString("registration_ip_address")].isNull() && m_registration_ip_address_isValid;

    m_reset_bounce_score_after_isValid = ::OpenAPI::fromJsonValue(m_reset_bounce_score_after, json[QString("reset_bounce_score_after")]);
    m_reset_bounce_score_after_isSet = !json[QString("reset_bounce_score_after")].isNull() && m_reset_bounce_score_after_isValid;

    m_silence_reason_isValid = ::OpenAPI::fromJsonValue(m_silence_reason, json[QString("silence_reason")]);
    m_silence_reason_isSet = !json[QString("silence_reason")].isNull() && m_silence_reason_isValid;

    m_silenced_by_isValid = ::OpenAPI::fromJsonValue(m_silenced_by, json[QString("silenced_by")]);
    m_silenced_by_isSet = !json[QString("silenced_by")].isNull() && m_silenced_by_isValid;

    m_single_sign_on_record_isValid = ::OpenAPI::fromJsonValue(m_single_sign_on_record, json[QString("single_sign_on_record")]);
    m_single_sign_on_record_isSet = !json[QString("single_sign_on_record")].isNull() && m_single_sign_on_record_isValid;

    m_staged_isValid = ::OpenAPI::fromJsonValue(m_staged, json[QString("staged")]);
    m_staged_isSet = !json[QString("staged")].isNull() && m_staged_isValid;

    m_suspended_by_isValid = ::OpenAPI::fromJsonValue(m_suspended_by, json[QString("suspended_by")]);
    m_suspended_by_isSet = !json[QString("suspended_by")].isNull() && m_suspended_by_isValid;

    m_time_read_isValid = ::OpenAPI::fromJsonValue(m_time_read, json[QString("time_read")]);
    m_time_read_isSet = !json[QString("time_read")].isNull() && m_time_read_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tl3_requirements_isValid = ::OpenAPI::fromJsonValue(m_tl3_requirements, json[QString("tl3_requirements")]);
    m_tl3_requirements_isSet = !json[QString("tl3_requirements")].isNull() && m_tl3_requirements_isValid;

    m_topic_count_isValid = ::OpenAPI::fromJsonValue(m_topic_count, json[QString("topic_count")]);
    m_topic_count_isSet = !json[QString("topic_count")].isNull() && m_topic_count_isValid;

    m_topics_entered_isValid = ::OpenAPI::fromJsonValue(m_topics_entered, json[QString("topics_entered")]);
    m_topics_entered_isSet = !json[QString("topics_entered")].isNull() && m_topics_entered_isValid;

    m_trust_level_isValid = ::OpenAPI::fromJsonValue(m_trust_level, json[QString("trust_level")]);
    m_trust_level_isSet = !json[QString("trust_level")].isNull() && m_trust_level_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_warnings_received_count_isValid = ::OpenAPI::fromJsonValue(m_warnings_received_count, json[QString("warnings_received_count")]);
    m_warnings_received_count_isSet = !json[QString("warnings_received_count")].isNull() && m_warnings_received_count_isValid;
}

QString OAIAdminGetUser_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminGetUser_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_api_key_count_isSet) {
        obj.insert(QString("api_key_count"), ::OpenAPI::toJsonValue(m_api_key_count));
    }
    if (m_approved_by.isSet()) {
        obj.insert(QString("approved_by"), ::OpenAPI::toJsonValue(m_approved_by));
    }
    if (m_associated_accounts.size() > 0) {
        obj.insert(QString("associated_accounts"), ::OpenAPI::toJsonValue(m_associated_accounts));
    }
    if (m_avatar_template_isSet) {
        obj.insert(QString("avatar_template"), ::OpenAPI::toJsonValue(m_avatar_template));
    }
    if (m_badge_count_isSet) {
        obj.insert(QString("badge_count"), ::OpenAPI::toJsonValue(m_badge_count));
    }
    if (m_bounce_score_isSet) {
        obj.insert(QString("bounce_score"), ::OpenAPI::toJsonValue(m_bounce_score));
    }
    if (m_can_activate_isSet) {
        obj.insert(QString("can_activate"), ::OpenAPI::toJsonValue(m_can_activate));
    }
    if (m_can_be_anonymized_isSet) {
        obj.insert(QString("can_be_anonymized"), ::OpenAPI::toJsonValue(m_can_be_anonymized));
    }
    if (m_can_be_deleted_isSet) {
        obj.insert(QString("can_be_deleted"), ::OpenAPI::toJsonValue(m_can_be_deleted));
    }
    if (m_can_be_merged_isSet) {
        obj.insert(QString("can_be_merged"), ::OpenAPI::toJsonValue(m_can_be_merged));
    }
    if (m_can_deactivate_isSet) {
        obj.insert(QString("can_deactivate"), ::OpenAPI::toJsonValue(m_can_deactivate));
    }
    if (m_can_delete_all_posts_isSet) {
        obj.insert(QString("can_delete_all_posts"), ::OpenAPI::toJsonValue(m_can_delete_all_posts));
    }
    if (m_can_delete_sso_record_isSet) {
        obj.insert(QString("can_delete_sso_record"), ::OpenAPI::toJsonValue(m_can_delete_sso_record));
    }
    if (m_can_disable_second_factor_isSet) {
        obj.insert(QString("can_disable_second_factor"), ::OpenAPI::toJsonValue(m_can_disable_second_factor));
    }
    if (m_can_grant_admin_isSet) {
        obj.insert(QString("can_grant_admin"), ::OpenAPI::toJsonValue(m_can_grant_admin));
    }
    if (m_can_grant_moderation_isSet) {
        obj.insert(QString("can_grant_moderation"), ::OpenAPI::toJsonValue(m_can_grant_moderation));
    }
    if (m_can_impersonate_isSet) {
        obj.insert(QString("can_impersonate"), ::OpenAPI::toJsonValue(m_can_impersonate));
    }
    if (m_can_revoke_admin_isSet) {
        obj.insert(QString("can_revoke_admin"), ::OpenAPI::toJsonValue(m_can_revoke_admin));
    }
    if (m_can_revoke_moderation_isSet) {
        obj.insert(QString("can_revoke_moderation"), ::OpenAPI::toJsonValue(m_can_revoke_moderation));
    }
    if (m_can_send_activation_email_isSet) {
        obj.insert(QString("can_send_activation_email"), ::OpenAPI::toJsonValue(m_can_send_activation_email));
    }
    if (m_can_view_action_logs_isSet) {
        obj.insert(QString("can_view_action_logs"), ::OpenAPI::toJsonValue(m_can_view_action_logs));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_at_age_isSet) {
        obj.insert(QString("created_at_age"), ::OpenAPI::toJsonValue(m_created_at_age));
    }
    if (m_days_visited_isSet) {
        obj.insert(QString("days_visited"), ::OpenAPI::toJsonValue(m_days_visited));
    }
    if (m_external_ids_isSet) {
        obj.insert(QString("external_ids"), ::OpenAPI::toJsonValue(m_external_ids));
    }
    if (m_flag_level_isSet) {
        obj.insert(QString("flag_level"), ::OpenAPI::toJsonValue(m_flag_level));
    }
    if (m_flags_given_count_isSet) {
        obj.insert(QString("flags_given_count"), ::OpenAPI::toJsonValue(m_flags_given_count));
    }
    if (m_flags_received_count_isSet) {
        obj.insert(QString("flags_received_count"), ::OpenAPI::toJsonValue(m_flags_received_count));
    }
    if (m_full_suspend_reason_isSet) {
        obj.insert(QString("full_suspend_reason"), ::OpenAPI::toJsonValue(m_full_suspend_reason));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_emailed_age_isSet) {
        obj.insert(QString("last_emailed_age"), ::OpenAPI::toJsonValue(m_last_emailed_age));
    }
    if (m_last_emailed_at_isSet) {
        obj.insert(QString("last_emailed_at"), ::OpenAPI::toJsonValue(m_last_emailed_at));
    }
    if (m_last_seen_age_isSet) {
        obj.insert(QString("last_seen_age"), ::OpenAPI::toJsonValue(m_last_seen_age));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_like_count_isSet) {
        obj.insert(QString("like_count"), ::OpenAPI::toJsonValue(m_like_count));
    }
    if (m_like_given_count_isSet) {
        obj.insert(QString("like_given_count"), ::OpenAPI::toJsonValue(m_like_given_count));
    }
    if (m_manual_locked_trust_level_isSet) {
        obj.insert(QString("manual_locked_trust_level"), ::OpenAPI::toJsonValue(m_manual_locked_trust_level));
    }
    if (m_moderator_isSet) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_penalty_isSet) {
        obj.insert(QString("next_penalty"), ::OpenAPI::toJsonValue(m_next_penalty));
    }
    if (m_penalty_counts.isSet()) {
        obj.insert(QString("penalty_counts"), ::OpenAPI::toJsonValue(m_penalty_counts));
    }
    if (m_post_count_isSet) {
        obj.insert(QString("post_count"), ::OpenAPI::toJsonValue(m_post_count));
    }
    if (m_post_edits_count_isSet) {
        obj.insert(QString("post_edits_count"), ::OpenAPI::toJsonValue(m_post_edits_count));
    }
    if (m_posts_read_count_isSet) {
        obj.insert(QString("posts_read_count"), ::OpenAPI::toJsonValue(m_posts_read_count));
    }
    if (m_primary_group_id_isSet) {
        obj.insert(QString("primary_group_id"), ::OpenAPI::toJsonValue(m_primary_group_id));
    }
    if (m_private_topics_count_isSet) {
        obj.insert(QString("private_topics_count"), ::OpenAPI::toJsonValue(m_private_topics_count));
    }
    if (m_registration_ip_address_isSet) {
        obj.insert(QString("registration_ip_address"), ::OpenAPI::toJsonValue(m_registration_ip_address));
    }
    if (m_reset_bounce_score_after_isSet) {
        obj.insert(QString("reset_bounce_score_after"), ::OpenAPI::toJsonValue(m_reset_bounce_score_after));
    }
    if (m_silence_reason_isSet) {
        obj.insert(QString("silence_reason"), ::OpenAPI::toJsonValue(m_silence_reason));
    }
    if (m_silenced_by_isSet) {
        obj.insert(QString("silenced_by"), ::OpenAPI::toJsonValue(m_silenced_by));
    }
    if (m_single_sign_on_record_isSet) {
        obj.insert(QString("single_sign_on_record"), ::OpenAPI::toJsonValue(m_single_sign_on_record));
    }
    if (m_staged_isSet) {
        obj.insert(QString("staged"), ::OpenAPI::toJsonValue(m_staged));
    }
    if (m_suspended_by_isSet) {
        obj.insert(QString("suspended_by"), ::OpenAPI::toJsonValue(m_suspended_by));
    }
    if (m_time_read_isSet) {
        obj.insert(QString("time_read"), ::OpenAPI::toJsonValue(m_time_read));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tl3_requirements.isSet()) {
        obj.insert(QString("tl3_requirements"), ::OpenAPI::toJsonValue(m_tl3_requirements));
    }
    if (m_topic_count_isSet) {
        obj.insert(QString("topic_count"), ::OpenAPI::toJsonValue(m_topic_count));
    }
    if (m_topics_entered_isSet) {
        obj.insert(QString("topics_entered"), ::OpenAPI::toJsonValue(m_topics_entered));
    }
    if (m_trust_level_isSet) {
        obj.insert(QString("trust_level"), ::OpenAPI::toJsonValue(m_trust_level));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_warnings_received_count_isSet) {
        obj.insert(QString("warnings_received_count"), ::OpenAPI::toJsonValue(m_warnings_received_count));
    }
    return obj;
}

bool OAIAdminGetUser_200_response::isActive() const {
    return m_active;
}
void OAIAdminGetUser_200_response::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAdminGetUser_200_response::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAdminGetUser_200_response::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIAdminGetUser_200_response::isAdmin() const {
    return m_admin;
}
void OAIAdminGetUser_200_response::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIAdminGetUser_200_response::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIAdminGetUser_200_response::is_admin_Valid() const{
    return m_admin_isValid;
}

qint32 OAIAdminGetUser_200_response::getApiKeyCount() const {
    return m_api_key_count;
}
void OAIAdminGetUser_200_response::setApiKeyCount(const qint32 &api_key_count) {
    m_api_key_count = api_key_count;
    m_api_key_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_api_key_count_Set() const{
    return m_api_key_count_isSet;
}

bool OAIAdminGetUser_200_response::is_api_key_count_Valid() const{
    return m_api_key_count_isValid;
}

OAIAdminGetUser_200_response_approved_by OAIAdminGetUser_200_response::getApprovedBy() const {
    return m_approved_by;
}
void OAIAdminGetUser_200_response::setApprovedBy(const OAIAdminGetUser_200_response_approved_by &approved_by) {
    m_approved_by = approved_by;
    m_approved_by_isSet = true;
}

bool OAIAdminGetUser_200_response::is_approved_by_Set() const{
    return m_approved_by_isSet;
}

bool OAIAdminGetUser_200_response::is_approved_by_Valid() const{
    return m_approved_by_isValid;
}

QList<QJsonValue> OAIAdminGetUser_200_response::getAssociatedAccounts() const {
    return m_associated_accounts;
}
void OAIAdminGetUser_200_response::setAssociatedAccounts(const QList<QJsonValue> &associated_accounts) {
    m_associated_accounts = associated_accounts;
    m_associated_accounts_isSet = true;
}

bool OAIAdminGetUser_200_response::is_associated_accounts_Set() const{
    return m_associated_accounts_isSet;
}

bool OAIAdminGetUser_200_response::is_associated_accounts_Valid() const{
    return m_associated_accounts_isValid;
}

QString OAIAdminGetUser_200_response::getAvatarTemplate() const {
    return m_avatar_template;
}
void OAIAdminGetUser_200_response::setAvatarTemplate(const QString &avatar_template) {
    m_avatar_template = avatar_template;
    m_avatar_template_isSet = true;
}

bool OAIAdminGetUser_200_response::is_avatar_template_Set() const{
    return m_avatar_template_isSet;
}

bool OAIAdminGetUser_200_response::is_avatar_template_Valid() const{
    return m_avatar_template_isValid;
}

qint32 OAIAdminGetUser_200_response::getBadgeCount() const {
    return m_badge_count;
}
void OAIAdminGetUser_200_response::setBadgeCount(const qint32 &badge_count) {
    m_badge_count = badge_count;
    m_badge_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_badge_count_Set() const{
    return m_badge_count_isSet;
}

bool OAIAdminGetUser_200_response::is_badge_count_Valid() const{
    return m_badge_count_isValid;
}

qint32 OAIAdminGetUser_200_response::getBounceScore() const {
    return m_bounce_score;
}
void OAIAdminGetUser_200_response::setBounceScore(const qint32 &bounce_score) {
    m_bounce_score = bounce_score;
    m_bounce_score_isSet = true;
}

bool OAIAdminGetUser_200_response::is_bounce_score_Set() const{
    return m_bounce_score_isSet;
}

bool OAIAdminGetUser_200_response::is_bounce_score_Valid() const{
    return m_bounce_score_isValid;
}

bool OAIAdminGetUser_200_response::isCanActivate() const {
    return m_can_activate;
}
void OAIAdminGetUser_200_response::setCanActivate(const bool &can_activate) {
    m_can_activate = can_activate;
    m_can_activate_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_activate_Set() const{
    return m_can_activate_isSet;
}

bool OAIAdminGetUser_200_response::is_can_activate_Valid() const{
    return m_can_activate_isValid;
}

bool OAIAdminGetUser_200_response::isCanBeAnonymized() const {
    return m_can_be_anonymized;
}
void OAIAdminGetUser_200_response::setCanBeAnonymized(const bool &can_be_anonymized) {
    m_can_be_anonymized = can_be_anonymized;
    m_can_be_anonymized_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_be_anonymized_Set() const{
    return m_can_be_anonymized_isSet;
}

bool OAIAdminGetUser_200_response::is_can_be_anonymized_Valid() const{
    return m_can_be_anonymized_isValid;
}

bool OAIAdminGetUser_200_response::isCanBeDeleted() const {
    return m_can_be_deleted;
}
void OAIAdminGetUser_200_response::setCanBeDeleted(const bool &can_be_deleted) {
    m_can_be_deleted = can_be_deleted;
    m_can_be_deleted_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_be_deleted_Set() const{
    return m_can_be_deleted_isSet;
}

bool OAIAdminGetUser_200_response::is_can_be_deleted_Valid() const{
    return m_can_be_deleted_isValid;
}

bool OAIAdminGetUser_200_response::isCanBeMerged() const {
    return m_can_be_merged;
}
void OAIAdminGetUser_200_response::setCanBeMerged(const bool &can_be_merged) {
    m_can_be_merged = can_be_merged;
    m_can_be_merged_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_be_merged_Set() const{
    return m_can_be_merged_isSet;
}

bool OAIAdminGetUser_200_response::is_can_be_merged_Valid() const{
    return m_can_be_merged_isValid;
}

bool OAIAdminGetUser_200_response::isCanDeactivate() const {
    return m_can_deactivate;
}
void OAIAdminGetUser_200_response::setCanDeactivate(const bool &can_deactivate) {
    m_can_deactivate = can_deactivate;
    m_can_deactivate_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_deactivate_Set() const{
    return m_can_deactivate_isSet;
}

bool OAIAdminGetUser_200_response::is_can_deactivate_Valid() const{
    return m_can_deactivate_isValid;
}

bool OAIAdminGetUser_200_response::isCanDeleteAllPosts() const {
    return m_can_delete_all_posts;
}
void OAIAdminGetUser_200_response::setCanDeleteAllPosts(const bool &can_delete_all_posts) {
    m_can_delete_all_posts = can_delete_all_posts;
    m_can_delete_all_posts_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_delete_all_posts_Set() const{
    return m_can_delete_all_posts_isSet;
}

bool OAIAdminGetUser_200_response::is_can_delete_all_posts_Valid() const{
    return m_can_delete_all_posts_isValid;
}

bool OAIAdminGetUser_200_response::isCanDeleteSsoRecord() const {
    return m_can_delete_sso_record;
}
void OAIAdminGetUser_200_response::setCanDeleteSsoRecord(const bool &can_delete_sso_record) {
    m_can_delete_sso_record = can_delete_sso_record;
    m_can_delete_sso_record_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_delete_sso_record_Set() const{
    return m_can_delete_sso_record_isSet;
}

bool OAIAdminGetUser_200_response::is_can_delete_sso_record_Valid() const{
    return m_can_delete_sso_record_isValid;
}

bool OAIAdminGetUser_200_response::isCanDisableSecondFactor() const {
    return m_can_disable_second_factor;
}
void OAIAdminGetUser_200_response::setCanDisableSecondFactor(const bool &can_disable_second_factor) {
    m_can_disable_second_factor = can_disable_second_factor;
    m_can_disable_second_factor_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_disable_second_factor_Set() const{
    return m_can_disable_second_factor_isSet;
}

bool OAIAdminGetUser_200_response::is_can_disable_second_factor_Valid() const{
    return m_can_disable_second_factor_isValid;
}

bool OAIAdminGetUser_200_response::isCanGrantAdmin() const {
    return m_can_grant_admin;
}
void OAIAdminGetUser_200_response::setCanGrantAdmin(const bool &can_grant_admin) {
    m_can_grant_admin = can_grant_admin;
    m_can_grant_admin_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_grant_admin_Set() const{
    return m_can_grant_admin_isSet;
}

bool OAIAdminGetUser_200_response::is_can_grant_admin_Valid() const{
    return m_can_grant_admin_isValid;
}

bool OAIAdminGetUser_200_response::isCanGrantModeration() const {
    return m_can_grant_moderation;
}
void OAIAdminGetUser_200_response::setCanGrantModeration(const bool &can_grant_moderation) {
    m_can_grant_moderation = can_grant_moderation;
    m_can_grant_moderation_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_grant_moderation_Set() const{
    return m_can_grant_moderation_isSet;
}

bool OAIAdminGetUser_200_response::is_can_grant_moderation_Valid() const{
    return m_can_grant_moderation_isValid;
}

bool OAIAdminGetUser_200_response::isCanImpersonate() const {
    return m_can_impersonate;
}
void OAIAdminGetUser_200_response::setCanImpersonate(const bool &can_impersonate) {
    m_can_impersonate = can_impersonate;
    m_can_impersonate_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_impersonate_Set() const{
    return m_can_impersonate_isSet;
}

bool OAIAdminGetUser_200_response::is_can_impersonate_Valid() const{
    return m_can_impersonate_isValid;
}

bool OAIAdminGetUser_200_response::isCanRevokeAdmin() const {
    return m_can_revoke_admin;
}
void OAIAdminGetUser_200_response::setCanRevokeAdmin(const bool &can_revoke_admin) {
    m_can_revoke_admin = can_revoke_admin;
    m_can_revoke_admin_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_revoke_admin_Set() const{
    return m_can_revoke_admin_isSet;
}

bool OAIAdminGetUser_200_response::is_can_revoke_admin_Valid() const{
    return m_can_revoke_admin_isValid;
}

bool OAIAdminGetUser_200_response::isCanRevokeModeration() const {
    return m_can_revoke_moderation;
}
void OAIAdminGetUser_200_response::setCanRevokeModeration(const bool &can_revoke_moderation) {
    m_can_revoke_moderation = can_revoke_moderation;
    m_can_revoke_moderation_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_revoke_moderation_Set() const{
    return m_can_revoke_moderation_isSet;
}

bool OAIAdminGetUser_200_response::is_can_revoke_moderation_Valid() const{
    return m_can_revoke_moderation_isValid;
}

bool OAIAdminGetUser_200_response::isCanSendActivationEmail() const {
    return m_can_send_activation_email;
}
void OAIAdminGetUser_200_response::setCanSendActivationEmail(const bool &can_send_activation_email) {
    m_can_send_activation_email = can_send_activation_email;
    m_can_send_activation_email_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_send_activation_email_Set() const{
    return m_can_send_activation_email_isSet;
}

bool OAIAdminGetUser_200_response::is_can_send_activation_email_Valid() const{
    return m_can_send_activation_email_isValid;
}

bool OAIAdminGetUser_200_response::isCanViewActionLogs() const {
    return m_can_view_action_logs;
}
void OAIAdminGetUser_200_response::setCanViewActionLogs(const bool &can_view_action_logs) {
    m_can_view_action_logs = can_view_action_logs;
    m_can_view_action_logs_isSet = true;
}

bool OAIAdminGetUser_200_response::is_can_view_action_logs_Set() const{
    return m_can_view_action_logs_isSet;
}

bool OAIAdminGetUser_200_response::is_can_view_action_logs_Valid() const{
    return m_can_view_action_logs_isValid;
}

QString OAIAdminGetUser_200_response::getCreatedAt() const {
    return m_created_at;
}
void OAIAdminGetUser_200_response::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAdminGetUser_200_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAdminGetUser_200_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

double OAIAdminGetUser_200_response::getCreatedAtAge() const {
    return m_created_at_age;
}
void OAIAdminGetUser_200_response::setCreatedAtAge(const double &created_at_age) {
    m_created_at_age = created_at_age;
    m_created_at_age_isSet = true;
}

bool OAIAdminGetUser_200_response::is_created_at_age_Set() const{
    return m_created_at_age_isSet;
}

bool OAIAdminGetUser_200_response::is_created_at_age_Valid() const{
    return m_created_at_age_isValid;
}

qint32 OAIAdminGetUser_200_response::getDaysVisited() const {
    return m_days_visited;
}
void OAIAdminGetUser_200_response::setDaysVisited(const qint32 &days_visited) {
    m_days_visited = days_visited;
    m_days_visited_isSet = true;
}

bool OAIAdminGetUser_200_response::is_days_visited_Set() const{
    return m_days_visited_isSet;
}

bool OAIAdminGetUser_200_response::is_days_visited_Valid() const{
    return m_days_visited_isValid;
}

OAIObject OAIAdminGetUser_200_response::getExternalIds() const {
    return m_external_ids;
}
void OAIAdminGetUser_200_response::setExternalIds(const OAIObject &external_ids) {
    m_external_ids = external_ids;
    m_external_ids_isSet = true;
}

bool OAIAdminGetUser_200_response::is_external_ids_Set() const{
    return m_external_ids_isSet;
}

bool OAIAdminGetUser_200_response::is_external_ids_Valid() const{
    return m_external_ids_isValid;
}

qint32 OAIAdminGetUser_200_response::getFlagLevel() const {
    return m_flag_level;
}
void OAIAdminGetUser_200_response::setFlagLevel(const qint32 &flag_level) {
    m_flag_level = flag_level;
    m_flag_level_isSet = true;
}

bool OAIAdminGetUser_200_response::is_flag_level_Set() const{
    return m_flag_level_isSet;
}

bool OAIAdminGetUser_200_response::is_flag_level_Valid() const{
    return m_flag_level_isValid;
}

qint32 OAIAdminGetUser_200_response::getFlagsGivenCount() const {
    return m_flags_given_count;
}
void OAIAdminGetUser_200_response::setFlagsGivenCount(const qint32 &flags_given_count) {
    m_flags_given_count = flags_given_count;
    m_flags_given_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_flags_given_count_Set() const{
    return m_flags_given_count_isSet;
}

bool OAIAdminGetUser_200_response::is_flags_given_count_Valid() const{
    return m_flags_given_count_isValid;
}

qint32 OAIAdminGetUser_200_response::getFlagsReceivedCount() const {
    return m_flags_received_count;
}
void OAIAdminGetUser_200_response::setFlagsReceivedCount(const qint32 &flags_received_count) {
    m_flags_received_count = flags_received_count;
    m_flags_received_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_flags_received_count_Set() const{
    return m_flags_received_count_isSet;
}

bool OAIAdminGetUser_200_response::is_flags_received_count_Valid() const{
    return m_flags_received_count_isValid;
}

QString OAIAdminGetUser_200_response::getFullSuspendReason() const {
    return m_full_suspend_reason;
}
void OAIAdminGetUser_200_response::setFullSuspendReason(const QString &full_suspend_reason) {
    m_full_suspend_reason = full_suspend_reason;
    m_full_suspend_reason_isSet = true;
}

bool OAIAdminGetUser_200_response::is_full_suspend_reason_Set() const{
    return m_full_suspend_reason_isSet;
}

bool OAIAdminGetUser_200_response::is_full_suspend_reason_Valid() const{
    return m_full_suspend_reason_isValid;
}

QList<OAIAdminGetUser_200_response_groups_inner> OAIAdminGetUser_200_response::getGroups() const {
    return m_groups;
}
void OAIAdminGetUser_200_response::setGroups(const QList<OAIAdminGetUser_200_response_groups_inner> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIAdminGetUser_200_response::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIAdminGetUser_200_response::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIAdminGetUser_200_response::getId() const {
    return m_id;
}
void OAIAdminGetUser_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdminGetUser_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdminGetUser_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdminGetUser_200_response::getIpAddress() const {
    return m_ip_address;
}
void OAIAdminGetUser_200_response::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAdminGetUser_200_response::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAdminGetUser_200_response::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

double OAIAdminGetUser_200_response::getLastEmailedAge() const {
    return m_last_emailed_age;
}
void OAIAdminGetUser_200_response::setLastEmailedAge(const double &last_emailed_age) {
    m_last_emailed_age = last_emailed_age;
    m_last_emailed_age_isSet = true;
}

bool OAIAdminGetUser_200_response::is_last_emailed_age_Set() const{
    return m_last_emailed_age_isSet;
}

bool OAIAdminGetUser_200_response::is_last_emailed_age_Valid() const{
    return m_last_emailed_age_isValid;
}

QString OAIAdminGetUser_200_response::getLastEmailedAt() const {
    return m_last_emailed_at;
}
void OAIAdminGetUser_200_response::setLastEmailedAt(const QString &last_emailed_at) {
    m_last_emailed_at = last_emailed_at;
    m_last_emailed_at_isSet = true;
}

bool OAIAdminGetUser_200_response::is_last_emailed_at_Set() const{
    return m_last_emailed_at_isSet;
}

bool OAIAdminGetUser_200_response::is_last_emailed_at_Valid() const{
    return m_last_emailed_at_isValid;
}

double OAIAdminGetUser_200_response::getLastSeenAge() const {
    return m_last_seen_age;
}
void OAIAdminGetUser_200_response::setLastSeenAge(const double &last_seen_age) {
    m_last_seen_age = last_seen_age;
    m_last_seen_age_isSet = true;
}

bool OAIAdminGetUser_200_response::is_last_seen_age_Set() const{
    return m_last_seen_age_isSet;
}

bool OAIAdminGetUser_200_response::is_last_seen_age_Valid() const{
    return m_last_seen_age_isValid;
}

QString OAIAdminGetUser_200_response::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIAdminGetUser_200_response::setLastSeenAt(const QString &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIAdminGetUser_200_response::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIAdminGetUser_200_response::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

qint32 OAIAdminGetUser_200_response::getLikeCount() const {
    return m_like_count;
}
void OAIAdminGetUser_200_response::setLikeCount(const qint32 &like_count) {
    m_like_count = like_count;
    m_like_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_like_count_Set() const{
    return m_like_count_isSet;
}

bool OAIAdminGetUser_200_response::is_like_count_Valid() const{
    return m_like_count_isValid;
}

qint32 OAIAdminGetUser_200_response::getLikeGivenCount() const {
    return m_like_given_count;
}
void OAIAdminGetUser_200_response::setLikeGivenCount(const qint32 &like_given_count) {
    m_like_given_count = like_given_count;
    m_like_given_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_like_given_count_Set() const{
    return m_like_given_count_isSet;
}

bool OAIAdminGetUser_200_response::is_like_given_count_Valid() const{
    return m_like_given_count_isValid;
}

QString OAIAdminGetUser_200_response::getManualLockedTrustLevel() const {
    return m_manual_locked_trust_level;
}
void OAIAdminGetUser_200_response::setManualLockedTrustLevel(const QString &manual_locked_trust_level) {
    m_manual_locked_trust_level = manual_locked_trust_level;
    m_manual_locked_trust_level_isSet = true;
}

bool OAIAdminGetUser_200_response::is_manual_locked_trust_level_Set() const{
    return m_manual_locked_trust_level_isSet;
}

bool OAIAdminGetUser_200_response::is_manual_locked_trust_level_Valid() const{
    return m_manual_locked_trust_level_isValid;
}

bool OAIAdminGetUser_200_response::isModerator() const {
    return m_moderator;
}
void OAIAdminGetUser_200_response::setModerator(const bool &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIAdminGetUser_200_response::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIAdminGetUser_200_response::is_moderator_Valid() const{
    return m_moderator_isValid;
}

QString OAIAdminGetUser_200_response::getName() const {
    return m_name;
}
void OAIAdminGetUser_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdminGetUser_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdminGetUser_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdminGetUser_200_response::getNextPenalty() const {
    return m_next_penalty;
}
void OAIAdminGetUser_200_response::setNextPenalty(const QString &next_penalty) {
    m_next_penalty = next_penalty;
    m_next_penalty_isSet = true;
}

bool OAIAdminGetUser_200_response::is_next_penalty_Set() const{
    return m_next_penalty_isSet;
}

bool OAIAdminGetUser_200_response::is_next_penalty_Valid() const{
    return m_next_penalty_isValid;
}

OAIAdminGetUser_200_response_penalty_counts OAIAdminGetUser_200_response::getPenaltyCounts() const {
    return m_penalty_counts;
}
void OAIAdminGetUser_200_response::setPenaltyCounts(const OAIAdminGetUser_200_response_penalty_counts &penalty_counts) {
    m_penalty_counts = penalty_counts;
    m_penalty_counts_isSet = true;
}

bool OAIAdminGetUser_200_response::is_penalty_counts_Set() const{
    return m_penalty_counts_isSet;
}

bool OAIAdminGetUser_200_response::is_penalty_counts_Valid() const{
    return m_penalty_counts_isValid;
}

qint32 OAIAdminGetUser_200_response::getPostCount() const {
    return m_post_count;
}
void OAIAdminGetUser_200_response::setPostCount(const qint32 &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool OAIAdminGetUser_200_response::is_post_count_Valid() const{
    return m_post_count_isValid;
}

qint32 OAIAdminGetUser_200_response::getPostEditsCount() const {
    return m_post_edits_count;
}
void OAIAdminGetUser_200_response::setPostEditsCount(const qint32 &post_edits_count) {
    m_post_edits_count = post_edits_count;
    m_post_edits_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_post_edits_count_Set() const{
    return m_post_edits_count_isSet;
}

bool OAIAdminGetUser_200_response::is_post_edits_count_Valid() const{
    return m_post_edits_count_isValid;
}

qint32 OAIAdminGetUser_200_response::getPostsReadCount() const {
    return m_posts_read_count;
}
void OAIAdminGetUser_200_response::setPostsReadCount(const qint32 &posts_read_count) {
    m_posts_read_count = posts_read_count;
    m_posts_read_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_posts_read_count_Set() const{
    return m_posts_read_count_isSet;
}

bool OAIAdminGetUser_200_response::is_posts_read_count_Valid() const{
    return m_posts_read_count_isValid;
}

QString OAIAdminGetUser_200_response::getPrimaryGroupId() const {
    return m_primary_group_id;
}
void OAIAdminGetUser_200_response::setPrimaryGroupId(const QString &primary_group_id) {
    m_primary_group_id = primary_group_id;
    m_primary_group_id_isSet = true;
}

bool OAIAdminGetUser_200_response::is_primary_group_id_Set() const{
    return m_primary_group_id_isSet;
}

bool OAIAdminGetUser_200_response::is_primary_group_id_Valid() const{
    return m_primary_group_id_isValid;
}

qint32 OAIAdminGetUser_200_response::getPrivateTopicsCount() const {
    return m_private_topics_count;
}
void OAIAdminGetUser_200_response::setPrivateTopicsCount(const qint32 &private_topics_count) {
    m_private_topics_count = private_topics_count;
    m_private_topics_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_private_topics_count_Set() const{
    return m_private_topics_count_isSet;
}

bool OAIAdminGetUser_200_response::is_private_topics_count_Valid() const{
    return m_private_topics_count_isValid;
}

QString OAIAdminGetUser_200_response::getRegistrationIpAddress() const {
    return m_registration_ip_address;
}
void OAIAdminGetUser_200_response::setRegistrationIpAddress(const QString &registration_ip_address) {
    m_registration_ip_address = registration_ip_address;
    m_registration_ip_address_isSet = true;
}

bool OAIAdminGetUser_200_response::is_registration_ip_address_Set() const{
    return m_registration_ip_address_isSet;
}

bool OAIAdminGetUser_200_response::is_registration_ip_address_Valid() const{
    return m_registration_ip_address_isValid;
}

QString OAIAdminGetUser_200_response::getResetBounceScoreAfter() const {
    return m_reset_bounce_score_after;
}
void OAIAdminGetUser_200_response::setResetBounceScoreAfter(const QString &reset_bounce_score_after) {
    m_reset_bounce_score_after = reset_bounce_score_after;
    m_reset_bounce_score_after_isSet = true;
}

bool OAIAdminGetUser_200_response::is_reset_bounce_score_after_Set() const{
    return m_reset_bounce_score_after_isSet;
}

bool OAIAdminGetUser_200_response::is_reset_bounce_score_after_Valid() const{
    return m_reset_bounce_score_after_isValid;
}

QString OAIAdminGetUser_200_response::getSilenceReason() const {
    return m_silence_reason;
}
void OAIAdminGetUser_200_response::setSilenceReason(const QString &silence_reason) {
    m_silence_reason = silence_reason;
    m_silence_reason_isSet = true;
}

bool OAIAdminGetUser_200_response::is_silence_reason_Set() const{
    return m_silence_reason_isSet;
}

bool OAIAdminGetUser_200_response::is_silence_reason_Valid() const{
    return m_silence_reason_isValid;
}

QString OAIAdminGetUser_200_response::getSilencedBy() const {
    return m_silenced_by;
}
void OAIAdminGetUser_200_response::setSilencedBy(const QString &silenced_by) {
    m_silenced_by = silenced_by;
    m_silenced_by_isSet = true;
}

bool OAIAdminGetUser_200_response::is_silenced_by_Set() const{
    return m_silenced_by_isSet;
}

bool OAIAdminGetUser_200_response::is_silenced_by_Valid() const{
    return m_silenced_by_isValid;
}

QString OAIAdminGetUser_200_response::getSingleSignOnRecord() const {
    return m_single_sign_on_record;
}
void OAIAdminGetUser_200_response::setSingleSignOnRecord(const QString &single_sign_on_record) {
    m_single_sign_on_record = single_sign_on_record;
    m_single_sign_on_record_isSet = true;
}

bool OAIAdminGetUser_200_response::is_single_sign_on_record_Set() const{
    return m_single_sign_on_record_isSet;
}

bool OAIAdminGetUser_200_response::is_single_sign_on_record_Valid() const{
    return m_single_sign_on_record_isValid;
}

bool OAIAdminGetUser_200_response::isStaged() const {
    return m_staged;
}
void OAIAdminGetUser_200_response::setStaged(const bool &staged) {
    m_staged = staged;
    m_staged_isSet = true;
}

bool OAIAdminGetUser_200_response::is_staged_Set() const{
    return m_staged_isSet;
}

bool OAIAdminGetUser_200_response::is_staged_Valid() const{
    return m_staged_isValid;
}

QString OAIAdminGetUser_200_response::getSuspendedBy() const {
    return m_suspended_by;
}
void OAIAdminGetUser_200_response::setSuspendedBy(const QString &suspended_by) {
    m_suspended_by = suspended_by;
    m_suspended_by_isSet = true;
}

bool OAIAdminGetUser_200_response::is_suspended_by_Set() const{
    return m_suspended_by_isSet;
}

bool OAIAdminGetUser_200_response::is_suspended_by_Valid() const{
    return m_suspended_by_isValid;
}

qint32 OAIAdminGetUser_200_response::getTimeRead() const {
    return m_time_read;
}
void OAIAdminGetUser_200_response::setTimeRead(const qint32 &time_read) {
    m_time_read = time_read;
    m_time_read_isSet = true;
}

bool OAIAdminGetUser_200_response::is_time_read_Set() const{
    return m_time_read_isSet;
}

bool OAIAdminGetUser_200_response::is_time_read_Valid() const{
    return m_time_read_isValid;
}

QString OAIAdminGetUser_200_response::getTitle() const {
    return m_title;
}
void OAIAdminGetUser_200_response::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAdminGetUser_200_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAdminGetUser_200_response::is_title_Valid() const{
    return m_title_isValid;
}

OAIAdminGetUser_200_response_tl3_requirements OAIAdminGetUser_200_response::getTl3Requirements() const {
    return m_tl3_requirements;
}
void OAIAdminGetUser_200_response::setTl3Requirements(const OAIAdminGetUser_200_response_tl3_requirements &tl3_requirements) {
    m_tl3_requirements = tl3_requirements;
    m_tl3_requirements_isSet = true;
}

bool OAIAdminGetUser_200_response::is_tl3_requirements_Set() const{
    return m_tl3_requirements_isSet;
}

bool OAIAdminGetUser_200_response::is_tl3_requirements_Valid() const{
    return m_tl3_requirements_isValid;
}

qint32 OAIAdminGetUser_200_response::getTopicCount() const {
    return m_topic_count;
}
void OAIAdminGetUser_200_response::setTopicCount(const qint32 &topic_count) {
    m_topic_count = topic_count;
    m_topic_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_topic_count_Set() const{
    return m_topic_count_isSet;
}

bool OAIAdminGetUser_200_response::is_topic_count_Valid() const{
    return m_topic_count_isValid;
}

qint32 OAIAdminGetUser_200_response::getTopicsEntered() const {
    return m_topics_entered;
}
void OAIAdminGetUser_200_response::setTopicsEntered(const qint32 &topics_entered) {
    m_topics_entered = topics_entered;
    m_topics_entered_isSet = true;
}

bool OAIAdminGetUser_200_response::is_topics_entered_Set() const{
    return m_topics_entered_isSet;
}

bool OAIAdminGetUser_200_response::is_topics_entered_Valid() const{
    return m_topics_entered_isValid;
}

qint32 OAIAdminGetUser_200_response::getTrustLevel() const {
    return m_trust_level;
}
void OAIAdminGetUser_200_response::setTrustLevel(const qint32 &trust_level) {
    m_trust_level = trust_level;
    m_trust_level_isSet = true;
}

bool OAIAdminGetUser_200_response::is_trust_level_Set() const{
    return m_trust_level_isSet;
}

bool OAIAdminGetUser_200_response::is_trust_level_Valid() const{
    return m_trust_level_isValid;
}

QString OAIAdminGetUser_200_response::getUsername() const {
    return m_username;
}
void OAIAdminGetUser_200_response::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAdminGetUser_200_response::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAdminGetUser_200_response::is_username_Valid() const{
    return m_username_isValid;
}

qint32 OAIAdminGetUser_200_response::getWarningsReceivedCount() const {
    return m_warnings_received_count;
}
void OAIAdminGetUser_200_response::setWarningsReceivedCount(const qint32 &warnings_received_count) {
    m_warnings_received_count = warnings_received_count;
    m_warnings_received_count_isSet = true;
}

bool OAIAdminGetUser_200_response::is_warnings_received_count_Set() const{
    return m_warnings_received_count_isSet;
}

bool OAIAdminGetUser_200_response::is_warnings_received_count_Valid() const{
    return m_warnings_received_count_isValid;
}

bool OAIAdminGetUser_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_activate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_anonymized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_merged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_deactivate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_all_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_sso_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_disable_second_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_grant_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_grant_moderation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_impersonate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_revoke_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_revoke_moderation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_activation_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_view_action_logs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_visited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_given_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_received_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_suspend_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_emailed_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_emailed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_given_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_locked_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_edits_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts_read_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_topics_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_bounce_score_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silence_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silenced_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_sign_on_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tl3_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_entered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings_received_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminGetUser_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_admin_isValid && m_api_key_count_isValid && m_approved_by_isValid && m_avatar_template_isValid && m_badge_count_isValid && m_bounce_score_isValid && m_can_activate_isValid && m_can_be_anonymized_isValid && m_can_be_deleted_isValid && m_can_be_merged_isValid && m_can_deactivate_isValid && m_can_delete_all_posts_isValid && m_can_delete_sso_record_isValid && m_can_disable_second_factor_isValid && m_can_grant_admin_isValid && m_can_grant_moderation_isValid && m_can_impersonate_isValid && m_can_revoke_admin_isValid && m_can_revoke_moderation_isValid && m_can_send_activation_email_isValid && m_can_view_action_logs_isValid && m_created_at_isValid && m_created_at_age_isValid && m_days_visited_isValid && m_external_ids_isValid && m_flag_level_isValid && m_flags_given_count_isValid && m_flags_received_count_isValid && m_full_suspend_reason_isValid && m_groups_isValid && m_id_isValid && m_ip_address_isValid && m_last_emailed_age_isValid && m_last_emailed_at_isValid && m_last_seen_age_isValid && m_last_seen_at_isValid && m_like_count_isValid && m_like_given_count_isValid && m_manual_locked_trust_level_isValid && m_moderator_isValid && m_name_isValid && m_post_count_isValid && m_posts_read_count_isValid && m_primary_group_id_isValid && m_private_topics_count_isValid && m_registration_ip_address_isValid && m_reset_bounce_score_after_isValid && m_silence_reason_isValid && m_silenced_by_isValid && m_single_sign_on_record_isValid && m_staged_isValid && m_suspended_by_isValid && m_time_read_isValid && m_title_isValid && m_topic_count_isValid && m_topics_entered_isValid && m_trust_level_isValid && m_username_isValid && m_warnings_received_count_isValid && true;
}

} // namespace OpenAPI
