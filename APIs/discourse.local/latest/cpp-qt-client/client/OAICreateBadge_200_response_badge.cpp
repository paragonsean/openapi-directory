/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBadge_200_response_badge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBadge_200_response_badge::OAICreateBadge_200_response_badge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBadge_200_response_badge::OAICreateBadge_200_response_badge() {
    this->initializeModel();
}

OAICreateBadge_200_response_badge::~OAICreateBadge_200_response_badge() {}

void OAICreateBadge_200_response_badge::initializeModel() {

    m_allow_title_isSet = false;
    m_allow_title_isValid = false;

    m_auto_revoke_isSet = false;
    m_auto_revoke_isValid = false;

    m_badge_grouping_id_isSet = false;
    m_badge_grouping_id_isValid = false;

    m_badge_type_id_isSet = false;
    m_badge_type_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_grant_count_isSet = false;
    m_grant_count_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_listable_isSet = false;
    m_listable_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_manually_grantable_isSet = false;
    m_manually_grantable_isValid = false;

    m_multiple_grant_isSet = false;
    m_multiple_grant_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_show_posts_isSet = false;
    m_show_posts_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_target_posts_isSet = false;
    m_target_posts_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAICreateBadge_200_response_badge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBadge_200_response_badge::fromJsonObject(QJsonObject json) {

    m_allow_title_isValid = ::OpenAPI::fromJsonValue(m_allow_title, json[QString("allow_title")]);
    m_allow_title_isSet = !json[QString("allow_title")].isNull() && m_allow_title_isValid;

    m_auto_revoke_isValid = ::OpenAPI::fromJsonValue(m_auto_revoke, json[QString("auto_revoke")]);
    m_auto_revoke_isSet = !json[QString("auto_revoke")].isNull() && m_auto_revoke_isValid;

    m_badge_grouping_id_isValid = ::OpenAPI::fromJsonValue(m_badge_grouping_id, json[QString("badge_grouping_id")]);
    m_badge_grouping_id_isSet = !json[QString("badge_grouping_id")].isNull() && m_badge_grouping_id_isValid;

    m_badge_type_id_isValid = ::OpenAPI::fromJsonValue(m_badge_type_id, json[QString("badge_type_id")]);
    m_badge_type_id_isSet = !json[QString("badge_type_id")].isNull() && m_badge_type_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_grant_count_isValid = ::OpenAPI::fromJsonValue(m_grant_count, json[QString("grant_count")]);
    m_grant_count_isSet = !json[QString("grant_count")].isNull() && m_grant_count_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_listable_isValid = ::OpenAPI::fromJsonValue(m_listable, json[QString("listable")]);
    m_listable_isSet = !json[QString("listable")].isNull() && m_listable_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("long_description")]);
    m_long_description_isSet = !json[QString("long_description")].isNull() && m_long_description_isValid;

    m_manually_grantable_isValid = ::OpenAPI::fromJsonValue(m_manually_grantable, json[QString("manually_grantable")]);
    m_manually_grantable_isSet = !json[QString("manually_grantable")].isNull() && m_manually_grantable_isValid;

    m_multiple_grant_isValid = ::OpenAPI::fromJsonValue(m_multiple_grant, json[QString("multiple_grant")]);
    m_multiple_grant_isSet = !json[QString("multiple_grant")].isNull() && m_multiple_grant_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_show_posts_isValid = ::OpenAPI::fromJsonValue(m_show_posts, json[QString("show_posts")]);
    m_show_posts_isSet = !json[QString("show_posts")].isNull() && m_show_posts_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_target_posts_isValid = ::OpenAPI::fromJsonValue(m_target_posts, json[QString("target_posts")]);
    m_target_posts_isSet = !json[QString("target_posts")].isNull() && m_target_posts_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAICreateBadge_200_response_badge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBadge_200_response_badge::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_title_isSet) {
        obj.insert(QString("allow_title"), ::OpenAPI::toJsonValue(m_allow_title));
    }
    if (m_auto_revoke_isSet) {
        obj.insert(QString("auto_revoke"), ::OpenAPI::toJsonValue(m_auto_revoke));
    }
    if (m_badge_grouping_id_isSet) {
        obj.insert(QString("badge_grouping_id"), ::OpenAPI::toJsonValue(m_badge_grouping_id));
    }
    if (m_badge_type_id_isSet) {
        obj.insert(QString("badge_type_id"), ::OpenAPI::toJsonValue(m_badge_type_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_grant_count_isSet) {
        obj.insert(QString("grant_count"), ::OpenAPI::toJsonValue(m_grant_count));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_listable_isSet) {
        obj.insert(QString("listable"), ::OpenAPI::toJsonValue(m_listable));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("long_description"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_manually_grantable_isSet) {
        obj.insert(QString("manually_grantable"), ::OpenAPI::toJsonValue(m_manually_grantable));
    }
    if (m_multiple_grant_isSet) {
        obj.insert(QString("multiple_grant"), ::OpenAPI::toJsonValue(m_multiple_grant));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_show_posts_isSet) {
        obj.insert(QString("show_posts"), ::OpenAPI::toJsonValue(m_show_posts));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_target_posts_isSet) {
        obj.insert(QString("target_posts"), ::OpenAPI::toJsonValue(m_target_posts));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

bool OAICreateBadge_200_response_badge::isAllowTitle() const {
    return m_allow_title;
}
void OAICreateBadge_200_response_badge::setAllowTitle(const bool &allow_title) {
    m_allow_title = allow_title;
    m_allow_title_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_allow_title_Set() const{
    return m_allow_title_isSet;
}

bool OAICreateBadge_200_response_badge::is_allow_title_Valid() const{
    return m_allow_title_isValid;
}

bool OAICreateBadge_200_response_badge::isAutoRevoke() const {
    return m_auto_revoke;
}
void OAICreateBadge_200_response_badge::setAutoRevoke(const bool &auto_revoke) {
    m_auto_revoke = auto_revoke;
    m_auto_revoke_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_auto_revoke_Set() const{
    return m_auto_revoke_isSet;
}

bool OAICreateBadge_200_response_badge::is_auto_revoke_Valid() const{
    return m_auto_revoke_isValid;
}

qint32 OAICreateBadge_200_response_badge::getBadgeGroupingId() const {
    return m_badge_grouping_id;
}
void OAICreateBadge_200_response_badge::setBadgeGroupingId(const qint32 &badge_grouping_id) {
    m_badge_grouping_id = badge_grouping_id;
    m_badge_grouping_id_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_badge_grouping_id_Set() const{
    return m_badge_grouping_id_isSet;
}

bool OAICreateBadge_200_response_badge::is_badge_grouping_id_Valid() const{
    return m_badge_grouping_id_isValid;
}

qint32 OAICreateBadge_200_response_badge::getBadgeTypeId() const {
    return m_badge_type_id;
}
void OAICreateBadge_200_response_badge::setBadgeTypeId(const qint32 &badge_type_id) {
    m_badge_type_id = badge_type_id;
    m_badge_type_id_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_badge_type_id_Set() const{
    return m_badge_type_id_isSet;
}

bool OAICreateBadge_200_response_badge::is_badge_type_id_Valid() const{
    return m_badge_type_id_isValid;
}

QString OAICreateBadge_200_response_badge::getDescription() const {
    return m_description;
}
void OAICreateBadge_200_response_badge::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateBadge_200_response_badge::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateBadge_200_response_badge::isEnabled() const {
    return m_enabled;
}
void OAICreateBadge_200_response_badge::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateBadge_200_response_badge::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAICreateBadge_200_response_badge::getGrantCount() const {
    return m_grant_count;
}
void OAICreateBadge_200_response_badge::setGrantCount(const qint32 &grant_count) {
    m_grant_count = grant_count;
    m_grant_count_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_grant_count_Set() const{
    return m_grant_count_isSet;
}

bool OAICreateBadge_200_response_badge::is_grant_count_Valid() const{
    return m_grant_count_isValid;
}

QString OAICreateBadge_200_response_badge::getIcon() const {
    return m_icon;
}
void OAICreateBadge_200_response_badge::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAICreateBadge_200_response_badge::is_icon_Valid() const{
    return m_icon_isValid;
}

qint32 OAICreateBadge_200_response_badge::getId() const {
    return m_id;
}
void OAICreateBadge_200_response_badge::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateBadge_200_response_badge::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateBadge_200_response_badge::getImageUrl() const {
    return m_image_url;
}
void OAICreateBadge_200_response_badge::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAICreateBadge_200_response_badge::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAICreateBadge_200_response_badge::isListable() const {
    return m_listable;
}
void OAICreateBadge_200_response_badge::setListable(const bool &listable) {
    m_listable = listable;
    m_listable_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_listable_Set() const{
    return m_listable_isSet;
}

bool OAICreateBadge_200_response_badge::is_listable_Valid() const{
    return m_listable_isValid;
}

QString OAICreateBadge_200_response_badge::getLongDescription() const {
    return m_long_description;
}
void OAICreateBadge_200_response_badge::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAICreateBadge_200_response_badge::is_long_description_Valid() const{
    return m_long_description_isValid;
}

bool OAICreateBadge_200_response_badge::isManuallyGrantable() const {
    return m_manually_grantable;
}
void OAICreateBadge_200_response_badge::setManuallyGrantable(const bool &manually_grantable) {
    m_manually_grantable = manually_grantable;
    m_manually_grantable_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_manually_grantable_Set() const{
    return m_manually_grantable_isSet;
}

bool OAICreateBadge_200_response_badge::is_manually_grantable_Valid() const{
    return m_manually_grantable_isValid;
}

bool OAICreateBadge_200_response_badge::isMultipleGrant() const {
    return m_multiple_grant;
}
void OAICreateBadge_200_response_badge::setMultipleGrant(const bool &multiple_grant) {
    m_multiple_grant = multiple_grant;
    m_multiple_grant_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_multiple_grant_Set() const{
    return m_multiple_grant_isSet;
}

bool OAICreateBadge_200_response_badge::is_multiple_grant_Valid() const{
    return m_multiple_grant_isValid;
}

QString OAICreateBadge_200_response_badge::getName() const {
    return m_name;
}
void OAICreateBadge_200_response_badge::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateBadge_200_response_badge::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateBadge_200_response_badge::getQuery() const {
    return m_query;
}
void OAICreateBadge_200_response_badge::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_query_Set() const{
    return m_query_isSet;
}

bool OAICreateBadge_200_response_badge::is_query_Valid() const{
    return m_query_isValid;
}

bool OAICreateBadge_200_response_badge::isShowPosts() const {
    return m_show_posts;
}
void OAICreateBadge_200_response_badge::setShowPosts(const bool &show_posts) {
    m_show_posts = show_posts;
    m_show_posts_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_show_posts_Set() const{
    return m_show_posts_isSet;
}

bool OAICreateBadge_200_response_badge::is_show_posts_Valid() const{
    return m_show_posts_isValid;
}

QString OAICreateBadge_200_response_badge::getSlug() const {
    return m_slug;
}
void OAICreateBadge_200_response_badge::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAICreateBadge_200_response_badge::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAICreateBadge_200_response_badge::isSystem() const {
    return m_system;
}
void OAICreateBadge_200_response_badge::setSystem(const bool &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_system_Set() const{
    return m_system_isSet;
}

bool OAICreateBadge_200_response_badge::is_system_Valid() const{
    return m_system_isValid;
}

bool OAICreateBadge_200_response_badge::isTargetPosts() const {
    return m_target_posts;
}
void OAICreateBadge_200_response_badge::setTargetPosts(const bool &target_posts) {
    m_target_posts = target_posts;
    m_target_posts_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_target_posts_Set() const{
    return m_target_posts_isSet;
}

bool OAICreateBadge_200_response_badge::is_target_posts_Valid() const{
    return m_target_posts_isValid;
}

QString OAICreateBadge_200_response_badge::getTrigger() const {
    return m_trigger;
}
void OAICreateBadge_200_response_badge::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAICreateBadge_200_response_badge::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAICreateBadge_200_response_badge::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAICreateBadge_200_response_badge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_revoke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_grouping_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manually_grantable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_grant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBadge_200_response_badge::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_title_isValid && m_auto_revoke_isValid && m_badge_grouping_id_isValid && m_badge_type_id_isValid && m_description_isValid && m_enabled_isValid && m_grant_count_isValid && m_icon_isValid && m_id_isValid && m_image_url_isValid && m_listable_isValid && m_long_description_isValid && m_manually_grantable_isValid && m_multiple_grant_isValid && m_name_isValid && m_query_isValid && m_show_posts_isValid && m_slug_isValid && m_system_isValid && m_target_posts_isValid && m_trigger_isValid && true;
}

} // namespace OpenAPI
