/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBadgesApi_H
#define OAI_OAIBadgesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdminListBadges_200_response.h"
#include "OAICreateBadge_200_response.h"
#include "OAICreateBadge_request.h"
#include "OAIListUserBadges_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBadgesApi : public QObject {
    Q_OBJECT

public:
    OAIBadgesApi(const int timeOut = 0);
    ~OAIBadgesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void adminListBadges();

    /**
    * @param[in]  oai_create_badge_request OAICreateBadge_request [optional]
    */
    virtual void createBadge(const ::OpenAPI::OptionalParam<OAICreateBadge_request> &oai_create_badge_request = ::OpenAPI::OptionalParam<OAICreateBadge_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteBadge(const qint32 &id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void listUserBadges(const QString &username);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_create_badge_request OAICreateBadge_request [optional]
    */
    virtual void updateBadge(const qint32 &id, const ::OpenAPI::OptionalParam<OAICreateBadge_request> &oai_create_badge_request = ::OpenAPI::OptionalParam<OAICreateBadge_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminListBadgesCallback(OAIHttpRequestWorker *worker);
    void createBadgeCallback(OAIHttpRequestWorker *worker);
    void deleteBadgeCallback(OAIHttpRequestWorker *worker);
    void listUserBadgesCallback(OAIHttpRequestWorker *worker);
    void updateBadgeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminListBadgesSignal(OAIAdminListBadges_200_response summary);
    void createBadgeSignal(OAICreateBadge_200_response summary);
    void deleteBadgeSignal();
    void listUserBadgesSignal(OAIListUserBadges_200_response summary);
    void updateBadgeSignal(OAICreateBadge_200_response summary);


    void adminListBadgesSignalFull(OAIHttpRequestWorker *worker, OAIAdminListBadges_200_response summary);
    void createBadgeSignalFull(OAIHttpRequestWorker *worker, OAICreateBadge_200_response summary);
    void deleteBadgeSignalFull(OAIHttpRequestWorker *worker);
    void listUserBadgesSignalFull(OAIHttpRequestWorker *worker, OAIListUserBadges_200_response summary);
    void updateBadgeSignalFull(OAIHttpRequestWorker *worker, OAICreateBadge_200_response summary);

    Q_DECL_DEPRECATED_X("Use adminListBadgesSignalError() instead")
    void adminListBadgesSignalE(OAIAdminListBadges_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminListBadgesSignalError(OAIAdminListBadges_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBadgeSignalError() instead")
    void createBadgeSignalE(OAICreateBadge_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBadgeSignalError(OAICreateBadge_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBadgeSignalError() instead")
    void deleteBadgeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBadgeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserBadgesSignalError() instead")
    void listUserBadgesSignalE(OAIListUserBadges_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserBadgesSignalError(OAIListUserBadges_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBadgeSignalError() instead")
    void updateBadgeSignalE(OAICreateBadge_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBadgeSignalError(OAICreateBadge_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminListBadgesSignalErrorFull() instead")
    void adminListBadgesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminListBadgesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBadgeSignalErrorFull() instead")
    void createBadgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBadgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBadgeSignalErrorFull() instead")
    void deleteBadgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBadgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserBadgesSignalErrorFull() instead")
    void listUserBadgesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserBadgesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBadgeSignalErrorFull() instead")
    void updateBadgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBadgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
