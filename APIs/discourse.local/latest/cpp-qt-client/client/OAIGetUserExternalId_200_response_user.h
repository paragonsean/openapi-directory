/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetUserExternalId_200_response_user.h
 *
 * 
 */

#ifndef OAIGetUserExternalId_200_response_user_H
#define OAIGetUserExternalId_200_response_user_H

#include <QJsonObject>

#include "OAIAdminGetUser_200_response_groups_inner.h"
#include "OAIGetUserExternalId_200_response_user_custom_fields.h"
#include "OAIGetUserExternalId_200_response_user_group_users_inner.h"
#include "OAIGetUserExternalId_200_response_user_user_auth_tokens_inner.h"
#include "OAIGetUserExternalId_200_response_user_user_fields.h"
#include "OAIGetUserExternalId_200_response_user_user_notification_schedule.h"
#include "OAIGetUserExternalId_200_response_user_user_option.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetUserExternalId_200_response_user : public OAIObject {
public:
    OAIGetUserExternalId_200_response_user();
    OAIGetUserExternalId_200_response_user(QString json);
    ~OAIGetUserExternalId_200_response_user() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    QList<QJsonValue> getAllowedPmUsernames() const;
    void setAllowedPmUsernames(const QList<QJsonValue> &allowed_pm_usernames);
    bool is_allowed_pm_usernames_Set() const;
    bool is_allowed_pm_usernames_Valid() const;

    QString getAvatarTemplate() const;
    void setAvatarTemplate(const QString &avatar_template);
    bool is_avatar_template_Set() const;
    bool is_avatar_template_Valid() const;

    qint32 getBadgeCount() const;
    void setBadgeCount(const qint32 &badge_count);
    bool is_badge_count_Set() const;
    bool is_badge_count_Valid() const;

    bool isCanBeDeleted() const;
    void setCanBeDeleted(const bool &can_be_deleted);
    bool is_can_be_deleted_Set() const;
    bool is_can_be_deleted_Valid() const;

    bool isCanChangeBio() const;
    void setCanChangeBio(const bool &can_change_bio);
    bool is_can_change_bio_Set() const;
    bool is_can_change_bio_Valid() const;

    bool isCanChangeLocation() const;
    void setCanChangeLocation(const bool &can_change_location);
    bool is_can_change_location_Set() const;
    bool is_can_change_location_Valid() const;

    bool isCanChangeTrackingPreferences() const;
    void setCanChangeTrackingPreferences(const bool &can_change_tracking_preferences);
    bool is_can_change_tracking_preferences_Set() const;
    bool is_can_change_tracking_preferences_Valid() const;

    bool isCanChangeWebsite() const;
    void setCanChangeWebsite(const bool &can_change_website);
    bool is_can_change_website_Set() const;
    bool is_can_change_website_Valid() const;

    bool isCanDeleteAllPosts() const;
    void setCanDeleteAllPosts(const bool &can_delete_all_posts);
    bool is_can_delete_all_posts_Set() const;
    bool is_can_delete_all_posts_Valid() const;

    bool isCanEdit() const;
    void setCanEdit(const bool &can_edit);
    bool is_can_edit_Set() const;
    bool is_can_edit_Valid() const;

    bool isCanEditEmail() const;
    void setCanEditEmail(const bool &can_edit_email);
    bool is_can_edit_email_Set() const;
    bool is_can_edit_email_Valid() const;

    bool isCanEditName() const;
    void setCanEditName(const bool &can_edit_name);
    bool is_can_edit_name_Set() const;
    bool is_can_edit_name_Valid() const;

    bool isCanEditUsername() const;
    void setCanEditUsername(const bool &can_edit_username);
    bool is_can_edit_username_Set() const;
    bool is_can_edit_username_Valid() const;

    bool isCanIgnoreUser() const;
    void setCanIgnoreUser(const bool &can_ignore_user);
    bool is_can_ignore_user_Set() const;
    bool is_can_ignore_user_Valid() const;

    bool isCanMuteUser() const;
    void setCanMuteUser(const bool &can_mute_user);
    bool is_can_mute_user_Set() const;
    bool is_can_mute_user_Valid() const;

    bool isCanSendPrivateMessageToUser() const;
    void setCanSendPrivateMessageToUser(const bool &can_send_private_message_to_user);
    bool is_can_send_private_message_to_user_Set() const;
    bool is_can_send_private_message_to_user_Valid() const;

    bool isCanSendPrivateMessages() const;
    void setCanSendPrivateMessages(const bool &can_send_private_messages);
    bool is_can_send_private_messages_Set() const;
    bool is_can_send_private_messages_Valid() const;

    bool isCanUploadProfileHeader() const;
    void setCanUploadProfileHeader(const bool &can_upload_profile_header);
    bool is_can_upload_profile_header_Set() const;
    bool is_can_upload_profile_header_Valid() const;

    bool isCanUploadUserCardBackground() const;
    void setCanUploadUserCardBackground(const bool &can_upload_user_card_background);
    bool is_can_upload_user_card_background_Set() const;
    bool is_can_upload_user_card_background_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIGetUserExternalId_200_response_user_custom_fields getCustomFields() const;
    void setCustomFields(const OAIGetUserExternalId_200_response_user_custom_fields &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    QString getFeaturedTopic() const;
    void setFeaturedTopic(const QString &featured_topic);
    bool is_featured_topic_Set() const;
    bool is_featured_topic_Valid() const;

    QList<QJsonValue> getFeaturedUserBadgeIds() const;
    void setFeaturedUserBadgeIds(const QList<QJsonValue> &featured_user_badge_ids);
    bool is_featured_user_badge_ids_Set() const;
    bool is_featured_user_badge_ids_Valid() const;

    QString getFlairBgColor() const;
    void setFlairBgColor(const QString &flair_bg_color);
    bool is_flair_bg_color_Set() const;
    bool is_flair_bg_color_Valid() const;

    QString getFlairColor() const;
    void setFlairColor(const QString &flair_color);
    bool is_flair_color_Set() const;
    bool is_flair_color_Valid() const;

    QString getFlairGroupId() const;
    void setFlairGroupId(const QString &flair_group_id);
    bool is_flair_group_id_Set() const;
    bool is_flair_group_id_Valid() const;

    QString getFlairName() const;
    void setFlairName(const QString &flair_name);
    bool is_flair_name_Set() const;
    bool is_flair_name_Valid() const;

    QString getFlairUrl() const;
    void setFlairUrl(const QString &flair_url);
    bool is_flair_url_Set() const;
    bool is_flair_url_Valid() const;

    QList<OAIGetUserExternalId_200_response_user_group_users_inner> getGroupUsers() const;
    void setGroupUsers(const QList<OAIGetUserExternalId_200_response_user_group_users_inner> &group_users);
    bool is_group_users_Set() const;
    bool is_group_users_Valid() const;

    QList<OAIAdminGetUser_200_response_groups_inner> getGroups() const;
    void setGroups(const QList<OAIAdminGetUser_200_response_groups_inner> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    bool isHasTitleBadges() const;
    void setHasTitleBadges(const bool &has_title_badges);
    bool is_has_title_badges_Set() const;
    bool is_has_title_badges_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIgnored() const;
    void setIgnored(const bool &ignored);
    bool is_ignored_Set() const;
    bool is_ignored_Valid() const;

    QList<QJsonValue> getIgnoredUsernames() const;
    void setIgnoredUsernames(const QList<QJsonValue> &ignored_usernames);
    bool is_ignored_usernames_Set() const;
    bool is_ignored_usernames_Valid() const;

    QString getInvitedBy() const;
    void setInvitedBy(const QString &invited_by);
    bool is_invited_by_Set() const;
    bool is_invited_by_Valid() const;

    QString getLastPostedAt() const;
    void setLastPostedAt(const QString &last_posted_at);
    bool is_last_posted_at_Set() const;
    bool is_last_posted_at_Valid() const;

    QString getLastSeenAt() const;
    void setLastSeenAt(const QString &last_seen_at);
    bool is_last_seen_at_Set() const;
    bool is_last_seen_at_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    qint32 getMailingListPostsPerDay() const;
    void setMailingListPostsPerDay(const qint32 &mailing_list_posts_per_day);
    bool is_mailing_list_posts_per_day_Set() const;
    bool is_mailing_list_posts_per_day_Valid() const;

    bool isModerator() const;
    void setModerator(const bool &moderator);
    bool is_moderator_Set() const;
    bool is_moderator_Valid() const;

    bool isMuted() const;
    void setMuted(const bool &muted);
    bool is_muted_Set() const;
    bool is_muted_Valid() const;

    QList<QJsonValue> getMutedCategoryIds() const;
    void setMutedCategoryIds(const QList<QJsonValue> &muted_category_ids);
    bool is_muted_category_ids_Set() const;
    bool is_muted_category_ids_Valid() const;

    QList<QJsonValue> getMutedTags() const;
    void setMutedTags(const QList<QJsonValue> &muted_tags);
    bool is_muted_tags_Set() const;
    bool is_muted_tags_Valid() const;

    QList<QJsonValue> getMutedUsernames() const;
    void setMutedUsernames(const QList<QJsonValue> &muted_usernames);
    bool is_muted_usernames_Set() const;
    bool is_muted_usernames_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPendingCount() const;
    void setPendingCount(const qint32 &pending_count);
    bool is_pending_count_Set() const;
    bool is_pending_count_Valid() const;

    qint32 getPendingPostsCount() const;
    void setPendingPostsCount(const qint32 &pending_posts_count);
    bool is_pending_posts_count_Set() const;
    bool is_pending_posts_count_Valid() const;

    qint32 getPostCount() const;
    void setPostCount(const qint32 &post_count);
    bool is_post_count_Set() const;
    bool is_post_count_Valid() const;

    QString getPrimaryGroupId() const;
    void setPrimaryGroupId(const QString &primary_group_id);
    bool is_primary_group_id_Set() const;
    bool is_primary_group_id_Valid() const;

    QString getPrimaryGroupName() const;
    void setPrimaryGroupName(const QString &primary_group_name);
    bool is_primary_group_name_Set() const;
    bool is_primary_group_name_Valid() const;

    qint32 getProfileViewCount() const;
    void setProfileViewCount(const qint32 &profile_view_count);
    bool is_profile_view_count_Set() const;
    bool is_profile_view_count_Valid() const;

    qint32 getRecentTimeRead() const;
    void setRecentTimeRead(const qint32 &recent_time_read);
    bool is_recent_time_read_Set() const;
    bool is_recent_time_read_Valid() const;

    QList<QJsonValue> getRegularCategoryIds() const;
    void setRegularCategoryIds(const QList<QJsonValue> &regular_category_ids);
    bool is_regular_category_ids_Set() const;
    bool is_regular_category_ids_Valid() const;

    bool isSecondFactorBackupEnabled() const;
    void setSecondFactorBackupEnabled(const bool &second_factor_backup_enabled);
    bool is_second_factor_backup_enabled_Set() const;
    bool is_second_factor_backup_enabled_Valid() const;

    bool isSecondFactorEnabled() const;
    void setSecondFactorEnabled(const bool &second_factor_enabled);
    bool is_second_factor_enabled_Set() const;
    bool is_second_factor_enabled_Valid() const;

    bool isStaged() const;
    void setStaged(const bool &staged);
    bool is_staged_Set() const;
    bool is_staged_Valid() const;

    QString getSystemAvatarTemplate() const;
    void setSystemAvatarTemplate(const QString &system_avatar_template);
    bool is_system_avatar_template_Set() const;
    bool is_system_avatar_template_Valid() const;

    QString getSystemAvatarUploadId() const;
    void setSystemAvatarUploadId(const QString &system_avatar_upload_id);
    bool is_system_avatar_upload_id_Set() const;
    bool is_system_avatar_upload_id_Valid() const;

    qint32 getTimeRead() const;
    void setTimeRead(const qint32 &time_read);
    bool is_time_read_Set() const;
    bool is_time_read_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QList<QJsonValue> getTrackedCategoryIds() const;
    void setTrackedCategoryIds(const QList<QJsonValue> &tracked_category_ids);
    bool is_tracked_category_ids_Set() const;
    bool is_tracked_category_ids_Valid() const;

    QList<QJsonValue> getTrackedTags() const;
    void setTrackedTags(const QList<QJsonValue> &tracked_tags);
    bool is_tracked_tags_Set() const;
    bool is_tracked_tags_Valid() const;

    qint32 getTrustLevel() const;
    void setTrustLevel(const qint32 &trust_level);
    bool is_trust_level_Set() const;
    bool is_trust_level_Valid() const;

    QString getUploadedAvatarId() const;
    void setUploadedAvatarId(const QString &uploaded_avatar_id);
    bool is_uploaded_avatar_id_Set() const;
    bool is_uploaded_avatar_id_Valid() const;

    bool isUseLogoSmallAsAvatar() const;
    void setUseLogoSmallAsAvatar(const bool &use_logo_small_as_avatar);
    bool is_use_logo_small_as_avatar_Set() const;
    bool is_use_logo_small_as_avatar_Valid() const;

    QString getUserApiKeys() const;
    void setUserApiKeys(const QString &user_api_keys);
    bool is_user_api_keys_Set() const;
    bool is_user_api_keys_Valid() const;

    QList<OAIGetUserExternalId_200_response_user_user_auth_tokens_inner> getUserAuthTokens() const;
    void setUserAuthTokens(const QList<OAIGetUserExternalId_200_response_user_user_auth_tokens_inner> &user_auth_tokens);
    bool is_user_auth_tokens_Set() const;
    bool is_user_auth_tokens_Valid() const;

    OAIGetUserExternalId_200_response_user_user_fields getUserFields() const;
    void setUserFields(const OAIGetUserExternalId_200_response_user_user_fields &user_fields);
    bool is_user_fields_Set() const;
    bool is_user_fields_Valid() const;

    OAIGetUserExternalId_200_response_user_user_notification_schedule getUserNotificationSchedule() const;
    void setUserNotificationSchedule(const OAIGetUserExternalId_200_response_user_user_notification_schedule &user_notification_schedule);
    bool is_user_notification_schedule_Set() const;
    bool is_user_notification_schedule_Valid() const;

    OAIGetUserExternalId_200_response_user_user_option getUserOption() const;
    void setUserOption(const OAIGetUserExternalId_200_response_user_user_option &user_option);
    bool is_user_option_Set() const;
    bool is_user_option_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QList<QJsonValue> getWatchedCategoryIds() const;
    void setWatchedCategoryIds(const QList<QJsonValue> &watched_category_ids);
    bool is_watched_category_ids_Set() const;
    bool is_watched_category_ids_Valid() const;

    QList<QJsonValue> getWatchedFirstPostCategoryIds() const;
    void setWatchedFirstPostCategoryIds(const QList<QJsonValue> &watched_first_post_category_ids);
    bool is_watched_first_post_category_ids_Set() const;
    bool is_watched_first_post_category_ids_Valid() const;

    QList<QJsonValue> getWatchedTags() const;
    void setWatchedTags(const QList<QJsonValue> &watched_tags);
    bool is_watched_tags_Set() const;
    bool is_watched_tags_Valid() const;

    QList<QJsonValue> getWatchingFirstPostTags() const;
    void setWatchingFirstPostTags(const QList<QJsonValue> &watching_first_post_tags);
    bool is_watching_first_post_tags_Set() const;
    bool is_watching_first_post_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    QList<QJsonValue> m_allowed_pm_usernames;
    bool m_allowed_pm_usernames_isSet;
    bool m_allowed_pm_usernames_isValid;

    QString m_avatar_template;
    bool m_avatar_template_isSet;
    bool m_avatar_template_isValid;

    qint32 m_badge_count;
    bool m_badge_count_isSet;
    bool m_badge_count_isValid;

    bool m_can_be_deleted;
    bool m_can_be_deleted_isSet;
    bool m_can_be_deleted_isValid;

    bool m_can_change_bio;
    bool m_can_change_bio_isSet;
    bool m_can_change_bio_isValid;

    bool m_can_change_location;
    bool m_can_change_location_isSet;
    bool m_can_change_location_isValid;

    bool m_can_change_tracking_preferences;
    bool m_can_change_tracking_preferences_isSet;
    bool m_can_change_tracking_preferences_isValid;

    bool m_can_change_website;
    bool m_can_change_website_isSet;
    bool m_can_change_website_isValid;

    bool m_can_delete_all_posts;
    bool m_can_delete_all_posts_isSet;
    bool m_can_delete_all_posts_isValid;

    bool m_can_edit;
    bool m_can_edit_isSet;
    bool m_can_edit_isValid;

    bool m_can_edit_email;
    bool m_can_edit_email_isSet;
    bool m_can_edit_email_isValid;

    bool m_can_edit_name;
    bool m_can_edit_name_isSet;
    bool m_can_edit_name_isValid;

    bool m_can_edit_username;
    bool m_can_edit_username_isSet;
    bool m_can_edit_username_isValid;

    bool m_can_ignore_user;
    bool m_can_ignore_user_isSet;
    bool m_can_ignore_user_isValid;

    bool m_can_mute_user;
    bool m_can_mute_user_isSet;
    bool m_can_mute_user_isValid;

    bool m_can_send_private_message_to_user;
    bool m_can_send_private_message_to_user_isSet;
    bool m_can_send_private_message_to_user_isValid;

    bool m_can_send_private_messages;
    bool m_can_send_private_messages_isSet;
    bool m_can_send_private_messages_isValid;

    bool m_can_upload_profile_header;
    bool m_can_upload_profile_header_isSet;
    bool m_can_upload_profile_header_isValid;

    bool m_can_upload_user_card_background;
    bool m_can_upload_user_card_background_isSet;
    bool m_can_upload_user_card_background_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIGetUserExternalId_200_response_user_custom_fields m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    QString m_featured_topic;
    bool m_featured_topic_isSet;
    bool m_featured_topic_isValid;

    QList<QJsonValue> m_featured_user_badge_ids;
    bool m_featured_user_badge_ids_isSet;
    bool m_featured_user_badge_ids_isValid;

    QString m_flair_bg_color;
    bool m_flair_bg_color_isSet;
    bool m_flair_bg_color_isValid;

    QString m_flair_color;
    bool m_flair_color_isSet;
    bool m_flair_color_isValid;

    QString m_flair_group_id;
    bool m_flair_group_id_isSet;
    bool m_flair_group_id_isValid;

    QString m_flair_name;
    bool m_flair_name_isSet;
    bool m_flair_name_isValid;

    QString m_flair_url;
    bool m_flair_url_isSet;
    bool m_flair_url_isValid;

    QList<OAIGetUserExternalId_200_response_user_group_users_inner> m_group_users;
    bool m_group_users_isSet;
    bool m_group_users_isValid;

    QList<OAIAdminGetUser_200_response_groups_inner> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    bool m_has_title_badges;
    bool m_has_title_badges_isSet;
    bool m_has_title_badges_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_ignored;
    bool m_ignored_isSet;
    bool m_ignored_isValid;

    QList<QJsonValue> m_ignored_usernames;
    bool m_ignored_usernames_isSet;
    bool m_ignored_usernames_isValid;

    QString m_invited_by;
    bool m_invited_by_isSet;
    bool m_invited_by_isValid;

    QString m_last_posted_at;
    bool m_last_posted_at_isSet;
    bool m_last_posted_at_isValid;

    QString m_last_seen_at;
    bool m_last_seen_at_isSet;
    bool m_last_seen_at_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    qint32 m_mailing_list_posts_per_day;
    bool m_mailing_list_posts_per_day_isSet;
    bool m_mailing_list_posts_per_day_isValid;

    bool m_moderator;
    bool m_moderator_isSet;
    bool m_moderator_isValid;

    bool m_muted;
    bool m_muted_isSet;
    bool m_muted_isValid;

    QList<QJsonValue> m_muted_category_ids;
    bool m_muted_category_ids_isSet;
    bool m_muted_category_ids_isValid;

    QList<QJsonValue> m_muted_tags;
    bool m_muted_tags_isSet;
    bool m_muted_tags_isValid;

    QList<QJsonValue> m_muted_usernames;
    bool m_muted_usernames_isSet;
    bool m_muted_usernames_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_pending_count;
    bool m_pending_count_isSet;
    bool m_pending_count_isValid;

    qint32 m_pending_posts_count;
    bool m_pending_posts_count_isSet;
    bool m_pending_posts_count_isValid;

    qint32 m_post_count;
    bool m_post_count_isSet;
    bool m_post_count_isValid;

    QString m_primary_group_id;
    bool m_primary_group_id_isSet;
    bool m_primary_group_id_isValid;

    QString m_primary_group_name;
    bool m_primary_group_name_isSet;
    bool m_primary_group_name_isValid;

    qint32 m_profile_view_count;
    bool m_profile_view_count_isSet;
    bool m_profile_view_count_isValid;

    qint32 m_recent_time_read;
    bool m_recent_time_read_isSet;
    bool m_recent_time_read_isValid;

    QList<QJsonValue> m_regular_category_ids;
    bool m_regular_category_ids_isSet;
    bool m_regular_category_ids_isValid;

    bool m_second_factor_backup_enabled;
    bool m_second_factor_backup_enabled_isSet;
    bool m_second_factor_backup_enabled_isValid;

    bool m_second_factor_enabled;
    bool m_second_factor_enabled_isSet;
    bool m_second_factor_enabled_isValid;

    bool m_staged;
    bool m_staged_isSet;
    bool m_staged_isValid;

    QString m_system_avatar_template;
    bool m_system_avatar_template_isSet;
    bool m_system_avatar_template_isValid;

    QString m_system_avatar_upload_id;
    bool m_system_avatar_upload_id_isSet;
    bool m_system_avatar_upload_id_isValid;

    qint32 m_time_read;
    bool m_time_read_isSet;
    bool m_time_read_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QList<QJsonValue> m_tracked_category_ids;
    bool m_tracked_category_ids_isSet;
    bool m_tracked_category_ids_isValid;

    QList<QJsonValue> m_tracked_tags;
    bool m_tracked_tags_isSet;
    bool m_tracked_tags_isValid;

    qint32 m_trust_level;
    bool m_trust_level_isSet;
    bool m_trust_level_isValid;

    QString m_uploaded_avatar_id;
    bool m_uploaded_avatar_id_isSet;
    bool m_uploaded_avatar_id_isValid;

    bool m_use_logo_small_as_avatar;
    bool m_use_logo_small_as_avatar_isSet;
    bool m_use_logo_small_as_avatar_isValid;

    QString m_user_api_keys;
    bool m_user_api_keys_isSet;
    bool m_user_api_keys_isValid;

    QList<OAIGetUserExternalId_200_response_user_user_auth_tokens_inner> m_user_auth_tokens;
    bool m_user_auth_tokens_isSet;
    bool m_user_auth_tokens_isValid;

    OAIGetUserExternalId_200_response_user_user_fields m_user_fields;
    bool m_user_fields_isSet;
    bool m_user_fields_isValid;

    OAIGetUserExternalId_200_response_user_user_notification_schedule m_user_notification_schedule;
    bool m_user_notification_schedule_isSet;
    bool m_user_notification_schedule_isValid;

    OAIGetUserExternalId_200_response_user_user_option m_user_option;
    bool m_user_option_isSet;
    bool m_user_option_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QList<QJsonValue> m_watched_category_ids;
    bool m_watched_category_ids_isSet;
    bool m_watched_category_ids_isValid;

    QList<QJsonValue> m_watched_first_post_category_ids;
    bool m_watched_first_post_category_ids_isSet;
    bool m_watched_first_post_category_ids_isValid;

    QList<QJsonValue> m_watched_tags;
    bool m_watched_tags_isSet;
    bool m_watched_tags_isValid;

    QList<QJsonValue> m_watching_first_post_tags;
    bool m_watching_first_post_tags_isSet;
    bool m_watching_first_post_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetUserExternalId_200_response_user)

#endif // OAIGetUserExternalId_200_response_user_H
