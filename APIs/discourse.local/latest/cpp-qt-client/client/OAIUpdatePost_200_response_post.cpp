/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePost_200_response_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePost_200_response_post::OAIUpdatePost_200_response_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePost_200_response_post::OAIUpdatePost_200_response_post() {
    this->initializeModel();
}

OAIUpdatePost_200_response_post::~OAIUpdatePost_200_response_post() {}

void OAIUpdatePost_200_response_post::initializeModel() {

    m_actions_summary_isSet = false;
    m_actions_summary_isValid = false;

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_avatar_template_isSet = false;
    m_avatar_template_isValid = false;

    m_bookmarked_isSet = false;
    m_bookmarked_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_recover_isSet = false;
    m_can_recover_isValid = false;

    m_can_view_edit_history_isSet = false;
    m_can_view_edit_history_isValid = false;

    m_can_wiki_isSet = false;
    m_can_wiki_isValid = false;

    m_cooked_isSet = false;
    m_cooked_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_display_username_isSet = false;
    m_display_username_isValid = false;

    m_draft_sequence_isSet = false;
    m_draft_sequence_isValid = false;

    m_edit_reason_isSet = false;
    m_edit_reason_isValid = false;

    m_flair_bg_color_isSet = false;
    m_flair_bg_color_isValid = false;

    m_flair_color_isSet = false;
    m_flair_color_isValid = false;

    m_flair_name_isSet = false;
    m_flair_name_isValid = false;

    m_flair_url_isSet = false;
    m_flair_url_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_incoming_link_count_isSet = false;
    m_incoming_link_count_isValid = false;

    m_mentioned_users_isSet = false;
    m_mentioned_users_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_number_isSet = false;
    m_post_number_isValid = false;

    m_post_type_isSet = false;
    m_post_type_isValid = false;

    m_primary_group_name_isSet = false;
    m_primary_group_name_isValid = false;

    m_quote_count_isSet = false;
    m_quote_count_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_readers_count_isSet = false;
    m_readers_count_isValid = false;

    m_reads_isSet = false;
    m_reads_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_reply_to_post_number_isSet = false;
    m_reply_to_post_number_isValid = false;

    m_reviewable_id_isSet = false;
    m_reviewable_id_isValid = false;

    m_reviewable_score_count_isSet = false;
    m_reviewable_score_count_isValid = false;

    m_reviewable_score_pending_count_isSet = false;
    m_reviewable_score_pending_count_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_staff_isSet = false;
    m_staff_isValid = false;

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_topic_slug_isSet = false;
    m_topic_slug_isValid = false;

    m_trust_level_isSet = false;
    m_trust_level_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_deleted_isSet = false;
    m_user_deleted_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_title_isSet = false;
    m_user_title_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_wiki_isSet = false;
    m_wiki_isValid = false;

    m_yours_isSet = false;
    m_yours_isValid = false;
}

void OAIUpdatePost_200_response_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePost_200_response_post::fromJsonObject(QJsonObject json) {

    m_actions_summary_isValid = ::OpenAPI::fromJsonValue(m_actions_summary, json[QString("actions_summary")]);
    m_actions_summary_isSet = !json[QString("actions_summary")].isNull() && m_actions_summary_isValid;

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_avatar_template, json[QString("avatar_template")]);
    m_avatar_template_isSet = !json[QString("avatar_template")].isNull() && m_avatar_template_isValid;

    m_bookmarked_isValid = ::OpenAPI::fromJsonValue(m_bookmarked, json[QString("bookmarked")]);
    m_bookmarked_isSet = !json[QString("bookmarked")].isNull() && m_bookmarked_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("can_delete")]);
    m_can_delete_isSet = !json[QString("can_delete")].isNull() && m_can_delete_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_can_recover_isValid = ::OpenAPI::fromJsonValue(m_can_recover, json[QString("can_recover")]);
    m_can_recover_isSet = !json[QString("can_recover")].isNull() && m_can_recover_isValid;

    m_can_view_edit_history_isValid = ::OpenAPI::fromJsonValue(m_can_view_edit_history, json[QString("can_view_edit_history")]);
    m_can_view_edit_history_isSet = !json[QString("can_view_edit_history")].isNull() && m_can_view_edit_history_isValid;

    m_can_wiki_isValid = ::OpenAPI::fromJsonValue(m_can_wiki, json[QString("can_wiki")]);
    m_can_wiki_isSet = !json[QString("can_wiki")].isNull() && m_can_wiki_isValid;

    m_cooked_isValid = ::OpenAPI::fromJsonValue(m_cooked, json[QString("cooked")]);
    m_cooked_isSet = !json[QString("cooked")].isNull() && m_cooked_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_display_username_isValid = ::OpenAPI::fromJsonValue(m_display_username, json[QString("display_username")]);
    m_display_username_isSet = !json[QString("display_username")].isNull() && m_display_username_isValid;

    m_draft_sequence_isValid = ::OpenAPI::fromJsonValue(m_draft_sequence, json[QString("draft_sequence")]);
    m_draft_sequence_isSet = !json[QString("draft_sequence")].isNull() && m_draft_sequence_isValid;

    m_edit_reason_isValid = ::OpenAPI::fromJsonValue(m_edit_reason, json[QString("edit_reason")]);
    m_edit_reason_isSet = !json[QString("edit_reason")].isNull() && m_edit_reason_isValid;

    m_flair_bg_color_isValid = ::OpenAPI::fromJsonValue(m_flair_bg_color, json[QString("flair_bg_color")]);
    m_flair_bg_color_isSet = !json[QString("flair_bg_color")].isNull() && m_flair_bg_color_isValid;

    m_flair_color_isValid = ::OpenAPI::fromJsonValue(m_flair_color, json[QString("flair_color")]);
    m_flair_color_isSet = !json[QString("flair_color")].isNull() && m_flair_color_isValid;

    m_flair_name_isValid = ::OpenAPI::fromJsonValue(m_flair_name, json[QString("flair_name")]);
    m_flair_name_isSet = !json[QString("flair_name")].isNull() && m_flair_name_isValid;

    m_flair_url_isValid = ::OpenAPI::fromJsonValue(m_flair_url, json[QString("flair_url")]);
    m_flair_url_isSet = !json[QString("flair_url")].isNull() && m_flair_url_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_incoming_link_count_isValid = ::OpenAPI::fromJsonValue(m_incoming_link_count, json[QString("incoming_link_count")]);
    m_incoming_link_count_isSet = !json[QString("incoming_link_count")].isNull() && m_incoming_link_count_isValid;

    m_mentioned_users_isValid = ::OpenAPI::fromJsonValue(m_mentioned_users, json[QString("mentioned_users")]);
    m_mentioned_users_isSet = !json[QString("mentioned_users")].isNull() && m_mentioned_users_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_number_isValid = ::OpenAPI::fromJsonValue(m_post_number, json[QString("post_number")]);
    m_post_number_isSet = !json[QString("post_number")].isNull() && m_post_number_isValid;

    m_post_type_isValid = ::OpenAPI::fromJsonValue(m_post_type, json[QString("post_type")]);
    m_post_type_isSet = !json[QString("post_type")].isNull() && m_post_type_isValid;

    m_primary_group_name_isValid = ::OpenAPI::fromJsonValue(m_primary_group_name, json[QString("primary_group_name")]);
    m_primary_group_name_isSet = !json[QString("primary_group_name")].isNull() && m_primary_group_name_isValid;

    m_quote_count_isValid = ::OpenAPI::fromJsonValue(m_quote_count, json[QString("quote_count")]);
    m_quote_count_isSet = !json[QString("quote_count")].isNull() && m_quote_count_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_readers_count_isValid = ::OpenAPI::fromJsonValue(m_readers_count, json[QString("readers_count")]);
    m_readers_count_isSet = !json[QString("readers_count")].isNull() && m_readers_count_isValid;

    m_reads_isValid = ::OpenAPI::fromJsonValue(m_reads, json[QString("reads")]);
    m_reads_isSet = !json[QString("reads")].isNull() && m_reads_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("reply_count")]);
    m_reply_count_isSet = !json[QString("reply_count")].isNull() && m_reply_count_isValid;

    m_reply_to_post_number_isValid = ::OpenAPI::fromJsonValue(m_reply_to_post_number, json[QString("reply_to_post_number")]);
    m_reply_to_post_number_isSet = !json[QString("reply_to_post_number")].isNull() && m_reply_to_post_number_isValid;

    m_reviewable_id_isValid = ::OpenAPI::fromJsonValue(m_reviewable_id, json[QString("reviewable_id")]);
    m_reviewable_id_isSet = !json[QString("reviewable_id")].isNull() && m_reviewable_id_isValid;

    m_reviewable_score_count_isValid = ::OpenAPI::fromJsonValue(m_reviewable_score_count, json[QString("reviewable_score_count")]);
    m_reviewable_score_count_isSet = !json[QString("reviewable_score_count")].isNull() && m_reviewable_score_count_isValid;

    m_reviewable_score_pending_count_isValid = ::OpenAPI::fromJsonValue(m_reviewable_score_pending_count, json[QString("reviewable_score_pending_count")]);
    m_reviewable_score_pending_count_isSet = !json[QString("reviewable_score_pending_count")].isNull() && m_reviewable_score_pending_count_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_staff_isValid = ::OpenAPI::fromJsonValue(m_staff, json[QString("staff")]);
    m_staff_isSet = !json[QString("staff")].isNull() && m_staff_isValid;

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("topic_id")]);
    m_topic_id_isSet = !json[QString("topic_id")].isNull() && m_topic_id_isValid;

    m_topic_slug_isValid = ::OpenAPI::fromJsonValue(m_topic_slug, json[QString("topic_slug")]);
    m_topic_slug_isSet = !json[QString("topic_slug")].isNull() && m_topic_slug_isValid;

    m_trust_level_isValid = ::OpenAPI::fromJsonValue(m_trust_level, json[QString("trust_level")]);
    m_trust_level_isSet = !json[QString("trust_level")].isNull() && m_trust_level_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_deleted_isValid = ::OpenAPI::fromJsonValue(m_user_deleted, json[QString("user_deleted")]);
    m_user_deleted_isSet = !json[QString("user_deleted")].isNull() && m_user_deleted_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_title_isValid = ::OpenAPI::fromJsonValue(m_user_title, json[QString("user_title")]);
    m_user_title_isSet = !json[QString("user_title")].isNull() && m_user_title_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_wiki_isValid = ::OpenAPI::fromJsonValue(m_wiki, json[QString("wiki")]);
    m_wiki_isSet = !json[QString("wiki")].isNull() && m_wiki_isValid;

    m_yours_isValid = ::OpenAPI::fromJsonValue(m_yours, json[QString("yours")]);
    m_yours_isSet = !json[QString("yours")].isNull() && m_yours_isValid;
}

QString OAIUpdatePost_200_response_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePost_200_response_post::asJsonObject() const {
    QJsonObject obj;
    if (m_actions_summary.size() > 0) {
        obj.insert(QString("actions_summary"), ::OpenAPI::toJsonValue(m_actions_summary));
    }
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_avatar_template_isSet) {
        obj.insert(QString("avatar_template"), ::OpenAPI::toJsonValue(m_avatar_template));
    }
    if (m_bookmarked_isSet) {
        obj.insert(QString("bookmarked"), ::OpenAPI::toJsonValue(m_bookmarked));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("can_delete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_recover_isSet) {
        obj.insert(QString("can_recover"), ::OpenAPI::toJsonValue(m_can_recover));
    }
    if (m_can_view_edit_history_isSet) {
        obj.insert(QString("can_view_edit_history"), ::OpenAPI::toJsonValue(m_can_view_edit_history));
    }
    if (m_can_wiki_isSet) {
        obj.insert(QString("can_wiki"), ::OpenAPI::toJsonValue(m_can_wiki));
    }
    if (m_cooked_isSet) {
        obj.insert(QString("cooked"), ::OpenAPI::toJsonValue(m_cooked));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_display_username_isSet) {
        obj.insert(QString("display_username"), ::OpenAPI::toJsonValue(m_display_username));
    }
    if (m_draft_sequence_isSet) {
        obj.insert(QString("draft_sequence"), ::OpenAPI::toJsonValue(m_draft_sequence));
    }
    if (m_edit_reason_isSet) {
        obj.insert(QString("edit_reason"), ::OpenAPI::toJsonValue(m_edit_reason));
    }
    if (m_flair_bg_color_isSet) {
        obj.insert(QString("flair_bg_color"), ::OpenAPI::toJsonValue(m_flair_bg_color));
    }
    if (m_flair_color_isSet) {
        obj.insert(QString("flair_color"), ::OpenAPI::toJsonValue(m_flair_color));
    }
    if (m_flair_name_isSet) {
        obj.insert(QString("flair_name"), ::OpenAPI::toJsonValue(m_flair_name));
    }
    if (m_flair_url_isSet) {
        obj.insert(QString("flair_url"), ::OpenAPI::toJsonValue(m_flair_url));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_incoming_link_count_isSet) {
        obj.insert(QString("incoming_link_count"), ::OpenAPI::toJsonValue(m_incoming_link_count));
    }
    if (m_mentioned_users.size() > 0) {
        obj.insert(QString("mentioned_users"), ::OpenAPI::toJsonValue(m_mentioned_users));
    }
    if (m_moderator_isSet) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_number_isSet) {
        obj.insert(QString("post_number"), ::OpenAPI::toJsonValue(m_post_number));
    }
    if (m_post_type_isSet) {
        obj.insert(QString("post_type"), ::OpenAPI::toJsonValue(m_post_type));
    }
    if (m_primary_group_name_isSet) {
        obj.insert(QString("primary_group_name"), ::OpenAPI::toJsonValue(m_primary_group_name));
    }
    if (m_quote_count_isSet) {
        obj.insert(QString("quote_count"), ::OpenAPI::toJsonValue(m_quote_count));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_readers_count_isSet) {
        obj.insert(QString("readers_count"), ::OpenAPI::toJsonValue(m_readers_count));
    }
    if (m_reads_isSet) {
        obj.insert(QString("reads"), ::OpenAPI::toJsonValue(m_reads));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("reply_count"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_reply_to_post_number_isSet) {
        obj.insert(QString("reply_to_post_number"), ::OpenAPI::toJsonValue(m_reply_to_post_number));
    }
    if (m_reviewable_id_isSet) {
        obj.insert(QString("reviewable_id"), ::OpenAPI::toJsonValue(m_reviewable_id));
    }
    if (m_reviewable_score_count_isSet) {
        obj.insert(QString("reviewable_score_count"), ::OpenAPI::toJsonValue(m_reviewable_score_count));
    }
    if (m_reviewable_score_pending_count_isSet) {
        obj.insert(QString("reviewable_score_pending_count"), ::OpenAPI::toJsonValue(m_reviewable_score_pending_count));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_staff_isSet) {
        obj.insert(QString("staff"), ::OpenAPI::toJsonValue(m_staff));
    }
    if (m_topic_id_isSet) {
        obj.insert(QString("topic_id"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_topic_slug_isSet) {
        obj.insert(QString("topic_slug"), ::OpenAPI::toJsonValue(m_topic_slug));
    }
    if (m_trust_level_isSet) {
        obj.insert(QString("trust_level"), ::OpenAPI::toJsonValue(m_trust_level));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_deleted_isSet) {
        obj.insert(QString("user_deleted"), ::OpenAPI::toJsonValue(m_user_deleted));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_title_isSet) {
        obj.insert(QString("user_title"), ::OpenAPI::toJsonValue(m_user_title));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_wiki_isSet) {
        obj.insert(QString("wiki"), ::OpenAPI::toJsonValue(m_wiki));
    }
    if (m_yours_isSet) {
        obj.insert(QString("yours"), ::OpenAPI::toJsonValue(m_yours));
    }
    return obj;
}

QList<OAICreateTopicPostPM_200_response_actions_summary_inner> OAIUpdatePost_200_response_post::getActionsSummary() const {
    return m_actions_summary;
}
void OAIUpdatePost_200_response_post::setActionsSummary(const QList<OAICreateTopicPostPM_200_response_actions_summary_inner> &actions_summary) {
    m_actions_summary = actions_summary;
    m_actions_summary_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_actions_summary_Set() const{
    return m_actions_summary_isSet;
}

bool OAIUpdatePost_200_response_post::is_actions_summary_Valid() const{
    return m_actions_summary_isValid;
}

bool OAIUpdatePost_200_response_post::isAdmin() const {
    return m_admin;
}
void OAIUpdatePost_200_response_post::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIUpdatePost_200_response_post::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIUpdatePost_200_response_post::getAvatarTemplate() const {
    return m_avatar_template;
}
void OAIUpdatePost_200_response_post::setAvatarTemplate(const QString &avatar_template) {
    m_avatar_template = avatar_template;
    m_avatar_template_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_avatar_template_Set() const{
    return m_avatar_template_isSet;
}

bool OAIUpdatePost_200_response_post::is_avatar_template_Valid() const{
    return m_avatar_template_isValid;
}

bool OAIUpdatePost_200_response_post::isBookmarked() const {
    return m_bookmarked;
}
void OAIUpdatePost_200_response_post::setBookmarked(const bool &bookmarked) {
    m_bookmarked = bookmarked;
    m_bookmarked_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_bookmarked_Set() const{
    return m_bookmarked_isSet;
}

bool OAIUpdatePost_200_response_post::is_bookmarked_Valid() const{
    return m_bookmarked_isValid;
}

bool OAIUpdatePost_200_response_post::isCanDelete() const {
    return m_can_delete;
}
void OAIUpdatePost_200_response_post::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIUpdatePost_200_response_post::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIUpdatePost_200_response_post::isCanEdit() const {
    return m_can_edit;
}
void OAIUpdatePost_200_response_post::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIUpdatePost_200_response_post::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAIUpdatePost_200_response_post::isCanRecover() const {
    return m_can_recover;
}
void OAIUpdatePost_200_response_post::setCanRecover(const bool &can_recover) {
    m_can_recover = can_recover;
    m_can_recover_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_can_recover_Set() const{
    return m_can_recover_isSet;
}

bool OAIUpdatePost_200_response_post::is_can_recover_Valid() const{
    return m_can_recover_isValid;
}

bool OAIUpdatePost_200_response_post::isCanViewEditHistory() const {
    return m_can_view_edit_history;
}
void OAIUpdatePost_200_response_post::setCanViewEditHistory(const bool &can_view_edit_history) {
    m_can_view_edit_history = can_view_edit_history;
    m_can_view_edit_history_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_can_view_edit_history_Set() const{
    return m_can_view_edit_history_isSet;
}

bool OAIUpdatePost_200_response_post::is_can_view_edit_history_Valid() const{
    return m_can_view_edit_history_isValid;
}

bool OAIUpdatePost_200_response_post::isCanWiki() const {
    return m_can_wiki;
}
void OAIUpdatePost_200_response_post::setCanWiki(const bool &can_wiki) {
    m_can_wiki = can_wiki;
    m_can_wiki_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_can_wiki_Set() const{
    return m_can_wiki_isSet;
}

bool OAIUpdatePost_200_response_post::is_can_wiki_Valid() const{
    return m_can_wiki_isValid;
}

QString OAIUpdatePost_200_response_post::getCooked() const {
    return m_cooked;
}
void OAIUpdatePost_200_response_post::setCooked(const QString &cooked) {
    m_cooked = cooked;
    m_cooked_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_cooked_Set() const{
    return m_cooked_isSet;
}

bool OAIUpdatePost_200_response_post::is_cooked_Valid() const{
    return m_cooked_isValid;
}

QString OAIUpdatePost_200_response_post::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdatePost_200_response_post::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdatePost_200_response_post::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUpdatePost_200_response_post::getDeletedAt() const {
    return m_deleted_at;
}
void OAIUpdatePost_200_response_post::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIUpdatePost_200_response_post::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAIUpdatePost_200_response_post::getDisplayUsername() const {
    return m_display_username;
}
void OAIUpdatePost_200_response_post::setDisplayUsername(const QString &display_username) {
    m_display_username = display_username;
    m_display_username_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_display_username_Set() const{
    return m_display_username_isSet;
}

bool OAIUpdatePost_200_response_post::is_display_username_Valid() const{
    return m_display_username_isValid;
}

qint32 OAIUpdatePost_200_response_post::getDraftSequence() const {
    return m_draft_sequence;
}
void OAIUpdatePost_200_response_post::setDraftSequence(const qint32 &draft_sequence) {
    m_draft_sequence = draft_sequence;
    m_draft_sequence_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_draft_sequence_Set() const{
    return m_draft_sequence_isSet;
}

bool OAIUpdatePost_200_response_post::is_draft_sequence_Valid() const{
    return m_draft_sequence_isValid;
}

QString OAIUpdatePost_200_response_post::getEditReason() const {
    return m_edit_reason;
}
void OAIUpdatePost_200_response_post::setEditReason(const QString &edit_reason) {
    m_edit_reason = edit_reason;
    m_edit_reason_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_edit_reason_Set() const{
    return m_edit_reason_isSet;
}

bool OAIUpdatePost_200_response_post::is_edit_reason_Valid() const{
    return m_edit_reason_isValid;
}

QString OAIUpdatePost_200_response_post::getFlairBgColor() const {
    return m_flair_bg_color;
}
void OAIUpdatePost_200_response_post::setFlairBgColor(const QString &flair_bg_color) {
    m_flair_bg_color = flair_bg_color;
    m_flair_bg_color_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_flair_bg_color_Set() const{
    return m_flair_bg_color_isSet;
}

bool OAIUpdatePost_200_response_post::is_flair_bg_color_Valid() const{
    return m_flair_bg_color_isValid;
}

QString OAIUpdatePost_200_response_post::getFlairColor() const {
    return m_flair_color;
}
void OAIUpdatePost_200_response_post::setFlairColor(const QString &flair_color) {
    m_flair_color = flair_color;
    m_flair_color_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_flair_color_Set() const{
    return m_flair_color_isSet;
}

bool OAIUpdatePost_200_response_post::is_flair_color_Valid() const{
    return m_flair_color_isValid;
}

QString OAIUpdatePost_200_response_post::getFlairName() const {
    return m_flair_name;
}
void OAIUpdatePost_200_response_post::setFlairName(const QString &flair_name) {
    m_flair_name = flair_name;
    m_flair_name_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_flair_name_Set() const{
    return m_flair_name_isSet;
}

bool OAIUpdatePost_200_response_post::is_flair_name_Valid() const{
    return m_flair_name_isValid;
}

QString OAIUpdatePost_200_response_post::getFlairUrl() const {
    return m_flair_url;
}
void OAIUpdatePost_200_response_post::setFlairUrl(const QString &flair_url) {
    m_flair_url = flair_url;
    m_flair_url_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_flair_url_Set() const{
    return m_flair_url_isSet;
}

bool OAIUpdatePost_200_response_post::is_flair_url_Valid() const{
    return m_flair_url_isValid;
}

bool OAIUpdatePost_200_response_post::isHidden() const {
    return m_hidden;
}
void OAIUpdatePost_200_response_post::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIUpdatePost_200_response_post::is_hidden_Valid() const{
    return m_hidden_isValid;
}

qint32 OAIUpdatePost_200_response_post::getId() const {
    return m_id;
}
void OAIUpdatePost_200_response_post::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdatePost_200_response_post::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIUpdatePost_200_response_post::getIncomingLinkCount() const {
    return m_incoming_link_count;
}
void OAIUpdatePost_200_response_post::setIncomingLinkCount(const qint32 &incoming_link_count) {
    m_incoming_link_count = incoming_link_count;
    m_incoming_link_count_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_incoming_link_count_Set() const{
    return m_incoming_link_count_isSet;
}

bool OAIUpdatePost_200_response_post::is_incoming_link_count_Valid() const{
    return m_incoming_link_count_isValid;
}

QList<QJsonValue> OAIUpdatePost_200_response_post::getMentionedUsers() const {
    return m_mentioned_users;
}
void OAIUpdatePost_200_response_post::setMentionedUsers(const QList<QJsonValue> &mentioned_users) {
    m_mentioned_users = mentioned_users;
    m_mentioned_users_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_mentioned_users_Set() const{
    return m_mentioned_users_isSet;
}

bool OAIUpdatePost_200_response_post::is_mentioned_users_Valid() const{
    return m_mentioned_users_isValid;
}

bool OAIUpdatePost_200_response_post::isModerator() const {
    return m_moderator;
}
void OAIUpdatePost_200_response_post::setModerator(const bool &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIUpdatePost_200_response_post::is_moderator_Valid() const{
    return m_moderator_isValid;
}

QString OAIUpdatePost_200_response_post::getName() const {
    return m_name;
}
void OAIUpdatePost_200_response_post::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdatePost_200_response_post::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIUpdatePost_200_response_post::getPostNumber() const {
    return m_post_number;
}
void OAIUpdatePost_200_response_post::setPostNumber(const qint32 &post_number) {
    m_post_number = post_number;
    m_post_number_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_post_number_Set() const{
    return m_post_number_isSet;
}

bool OAIUpdatePost_200_response_post::is_post_number_Valid() const{
    return m_post_number_isValid;
}

qint32 OAIUpdatePost_200_response_post::getPostType() const {
    return m_post_type;
}
void OAIUpdatePost_200_response_post::setPostType(const qint32 &post_type) {
    m_post_type = post_type;
    m_post_type_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_post_type_Set() const{
    return m_post_type_isSet;
}

bool OAIUpdatePost_200_response_post::is_post_type_Valid() const{
    return m_post_type_isValid;
}

QString OAIUpdatePost_200_response_post::getPrimaryGroupName() const {
    return m_primary_group_name;
}
void OAIUpdatePost_200_response_post::setPrimaryGroupName(const QString &primary_group_name) {
    m_primary_group_name = primary_group_name;
    m_primary_group_name_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_primary_group_name_Set() const{
    return m_primary_group_name_isSet;
}

bool OAIUpdatePost_200_response_post::is_primary_group_name_Valid() const{
    return m_primary_group_name_isValid;
}

qint32 OAIUpdatePost_200_response_post::getQuoteCount() const {
    return m_quote_count;
}
void OAIUpdatePost_200_response_post::setQuoteCount(const qint32 &quote_count) {
    m_quote_count = quote_count;
    m_quote_count_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_quote_count_Set() const{
    return m_quote_count_isSet;
}

bool OAIUpdatePost_200_response_post::is_quote_count_Valid() const{
    return m_quote_count_isValid;
}

QString OAIUpdatePost_200_response_post::getRaw() const {
    return m_raw;
}
void OAIUpdatePost_200_response_post::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIUpdatePost_200_response_post::is_raw_Valid() const{
    return m_raw_isValid;
}

qint32 OAIUpdatePost_200_response_post::getReadersCount() const {
    return m_readers_count;
}
void OAIUpdatePost_200_response_post::setReadersCount(const qint32 &readers_count) {
    m_readers_count = readers_count;
    m_readers_count_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_readers_count_Set() const{
    return m_readers_count_isSet;
}

bool OAIUpdatePost_200_response_post::is_readers_count_Valid() const{
    return m_readers_count_isValid;
}

qint32 OAIUpdatePost_200_response_post::getReads() const {
    return m_reads;
}
void OAIUpdatePost_200_response_post::setReads(const qint32 &reads) {
    m_reads = reads;
    m_reads_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_reads_Set() const{
    return m_reads_isSet;
}

bool OAIUpdatePost_200_response_post::is_reads_Valid() const{
    return m_reads_isValid;
}

qint32 OAIUpdatePost_200_response_post::getReplyCount() const {
    return m_reply_count;
}
void OAIUpdatePost_200_response_post::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAIUpdatePost_200_response_post::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

QString OAIUpdatePost_200_response_post::getReplyToPostNumber() const {
    return m_reply_to_post_number;
}
void OAIUpdatePost_200_response_post::setReplyToPostNumber(const QString &reply_to_post_number) {
    m_reply_to_post_number = reply_to_post_number;
    m_reply_to_post_number_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_reply_to_post_number_Set() const{
    return m_reply_to_post_number_isSet;
}

bool OAIUpdatePost_200_response_post::is_reply_to_post_number_Valid() const{
    return m_reply_to_post_number_isValid;
}

QString OAIUpdatePost_200_response_post::getReviewableId() const {
    return m_reviewable_id;
}
void OAIUpdatePost_200_response_post::setReviewableId(const QString &reviewable_id) {
    m_reviewable_id = reviewable_id;
    m_reviewable_id_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_reviewable_id_Set() const{
    return m_reviewable_id_isSet;
}

bool OAIUpdatePost_200_response_post::is_reviewable_id_Valid() const{
    return m_reviewable_id_isValid;
}

qint32 OAIUpdatePost_200_response_post::getReviewableScoreCount() const {
    return m_reviewable_score_count;
}
void OAIUpdatePost_200_response_post::setReviewableScoreCount(const qint32 &reviewable_score_count) {
    m_reviewable_score_count = reviewable_score_count;
    m_reviewable_score_count_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_reviewable_score_count_Set() const{
    return m_reviewable_score_count_isSet;
}

bool OAIUpdatePost_200_response_post::is_reviewable_score_count_Valid() const{
    return m_reviewable_score_count_isValid;
}

qint32 OAIUpdatePost_200_response_post::getReviewableScorePendingCount() const {
    return m_reviewable_score_pending_count;
}
void OAIUpdatePost_200_response_post::setReviewableScorePendingCount(const qint32 &reviewable_score_pending_count) {
    m_reviewable_score_pending_count = reviewable_score_pending_count;
    m_reviewable_score_pending_count_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_reviewable_score_pending_count_Set() const{
    return m_reviewable_score_pending_count_isSet;
}

bool OAIUpdatePost_200_response_post::is_reviewable_score_pending_count_Valid() const{
    return m_reviewable_score_pending_count_isValid;
}

QJsonValue OAIUpdatePost_200_response_post::getScore() const {
    return m_score;
}
void OAIUpdatePost_200_response_post::setScore(const QJsonValue &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_score_Set() const{
    return m_score_isSet;
}

bool OAIUpdatePost_200_response_post::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIUpdatePost_200_response_post::isStaff() const {
    return m_staff;
}
void OAIUpdatePost_200_response_post::setStaff(const bool &staff) {
    m_staff = staff;
    m_staff_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_staff_Set() const{
    return m_staff_isSet;
}

bool OAIUpdatePost_200_response_post::is_staff_Valid() const{
    return m_staff_isValid;
}

qint32 OAIUpdatePost_200_response_post::getTopicId() const {
    return m_topic_id;
}
void OAIUpdatePost_200_response_post::setTopicId(const qint32 &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIUpdatePost_200_response_post::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

QString OAIUpdatePost_200_response_post::getTopicSlug() const {
    return m_topic_slug;
}
void OAIUpdatePost_200_response_post::setTopicSlug(const QString &topic_slug) {
    m_topic_slug = topic_slug;
    m_topic_slug_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_topic_slug_Set() const{
    return m_topic_slug_isSet;
}

bool OAIUpdatePost_200_response_post::is_topic_slug_Valid() const{
    return m_topic_slug_isValid;
}

qint32 OAIUpdatePost_200_response_post::getTrustLevel() const {
    return m_trust_level;
}
void OAIUpdatePost_200_response_post::setTrustLevel(const qint32 &trust_level) {
    m_trust_level = trust_level;
    m_trust_level_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_trust_level_Set() const{
    return m_trust_level_isSet;
}

bool OAIUpdatePost_200_response_post::is_trust_level_Valid() const{
    return m_trust_level_isValid;
}

QString OAIUpdatePost_200_response_post::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUpdatePost_200_response_post::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUpdatePost_200_response_post::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIUpdatePost_200_response_post::isUserDeleted() const {
    return m_user_deleted;
}
void OAIUpdatePost_200_response_post::setUserDeleted(const bool &user_deleted) {
    m_user_deleted = user_deleted;
    m_user_deleted_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_user_deleted_Set() const{
    return m_user_deleted_isSet;
}

bool OAIUpdatePost_200_response_post::is_user_deleted_Valid() const{
    return m_user_deleted_isValid;
}

qint32 OAIUpdatePost_200_response_post::getUserId() const {
    return m_user_id;
}
void OAIUpdatePost_200_response_post::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUpdatePost_200_response_post::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUpdatePost_200_response_post::getUserTitle() const {
    return m_user_title;
}
void OAIUpdatePost_200_response_post::setUserTitle(const QString &user_title) {
    m_user_title = user_title;
    m_user_title_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_user_title_Set() const{
    return m_user_title_isSet;
}

bool OAIUpdatePost_200_response_post::is_user_title_Valid() const{
    return m_user_title_isValid;
}

QString OAIUpdatePost_200_response_post::getUsername() const {
    return m_username;
}
void OAIUpdatePost_200_response_post::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUpdatePost_200_response_post::is_username_Valid() const{
    return m_username_isValid;
}

qint32 OAIUpdatePost_200_response_post::getVersion() const {
    return m_version;
}
void OAIUpdatePost_200_response_post::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpdatePost_200_response_post::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUpdatePost_200_response_post::isWiki() const {
    return m_wiki;
}
void OAIUpdatePost_200_response_post::setWiki(const bool &wiki) {
    m_wiki = wiki;
    m_wiki_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_wiki_Set() const{
    return m_wiki_isSet;
}

bool OAIUpdatePost_200_response_post::is_wiki_Valid() const{
    return m_wiki_isValid;
}

bool OAIUpdatePost_200_response_post::isYours() const {
    return m_yours;
}
void OAIUpdatePost_200_response_post::setYours(const bool &yours) {
    m_yours = yours;
    m_yours_isSet = true;
}

bool OAIUpdatePost_200_response_post::is_yours_Set() const{
    return m_yours_isSet;
}

bool OAIUpdatePost_200_response_post::is_yours_Valid() const{
    return m_yours_isValid;
}

bool OAIUpdatePost_200_response_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmarked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_recover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_view_edit_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_bg_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_link_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_post_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewable_score_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewable_score_pending_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePost_200_response_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_summary_isValid && m_admin_isValid && m_avatar_template_isValid && m_bookmarked_isValid && m_can_delete_isValid && m_can_edit_isValid && m_can_recover_isValid && m_can_view_edit_history_isValid && m_can_wiki_isValid && m_cooked_isValid && m_created_at_isValid && m_deleted_at_isValid && m_draft_sequence_isValid && m_edit_reason_isValid && m_flair_bg_color_isValid && m_flair_color_isValid && m_flair_name_isValid && m_flair_url_isValid && m_hidden_isValid && m_id_isValid && m_incoming_link_count_isValid && m_moderator_isValid && m_post_number_isValid && m_post_type_isValid && m_primary_group_name_isValid && m_quote_count_isValid && m_raw_isValid && m_readers_count_isValid && m_reads_isValid && m_reply_count_isValid && m_reply_to_post_number_isValid && m_reviewable_id_isValid && m_reviewable_score_count_isValid && m_reviewable_score_pending_count_isValid && m_score_isValid && m_staff_isValid && m_topic_id_isValid && m_topic_slug_isValid && m_trust_level_isValid && m_updated_at_isValid && m_user_deleted_isValid && m_user_id_isValid && m_user_title_isValid && m_username_isValid && m_version_isValid && m_wiki_isValid && m_yours_isValid && true;
}

} // namespace OpenAPI
