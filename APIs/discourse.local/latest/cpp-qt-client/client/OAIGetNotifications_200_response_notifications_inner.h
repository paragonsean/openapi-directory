/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNotifications_200_response_notifications_inner.h
 *
 * 
 */

#ifndef OAIGetNotifications_200_response_notifications_inner_H
#define OAIGetNotifications_200_response_notifications_inner_H

#include <QJsonObject>

#include "OAIGetNotifications_200_response_notifications_inner_data.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNotifications_200_response_notifications_inner_data;

class OAIGetNotifications_200_response_notifications_inner : public OAIObject {
public:
    OAIGetNotifications_200_response_notifications_inner();
    OAIGetNotifications_200_response_notifications_inner(QString json);
    ~OAIGetNotifications_200_response_notifications_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIGetNotifications_200_response_notifications_inner_data getData() const;
    void setData(const OAIGetNotifications_200_response_notifications_inner_data &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getNotificationType() const;
    void setNotificationType(const qint32 &notification_type);
    bool is_notification_type_Set() const;
    bool is_notification_type_Valid() const;

    QString getPostNumber() const;
    void setPostNumber(const QString &post_number);
    bool is_post_number_Set() const;
    bool is_post_number_Valid() const;

    bool isRead() const;
    void setRead(const bool &read);
    bool is_read_Set() const;
    bool is_read_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    qint32 getTopicId() const;
    void setTopicId(const qint32 &topic_id);
    bool is_topic_id_Set() const;
    bool is_topic_id_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIGetNotifications_200_response_notifications_inner_data m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_notification_type;
    bool m_notification_type_isSet;
    bool m_notification_type_isValid;

    QString m_post_number;
    bool m_post_number_isSet;
    bool m_post_number_isValid;

    bool m_read;
    bool m_read_isSet;
    bool m_read_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    qint32 m_topic_id;
    bool m_topic_id_isSet;
    bool m_topic_id_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNotifications_200_response_notifications_inner)

#endif // OAIGetNotifications_200_response_notifications_inner_H
