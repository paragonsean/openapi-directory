/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateTopicPostPM_200_response.h
 *
 * 
 */

#ifndef OAICreateTopicPostPM_200_response_H
#define OAICreateTopicPostPM_200_response_H

#include <QJsonObject>

#include "OAICreateTopicPostPM_200_response_actions_summary_inner.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateTopicPostPM_200_response : public OAIObject {
public:
    OAICreateTopicPostPM_200_response();
    OAICreateTopicPostPM_200_response(QString json);
    ~OAICreateTopicPostPM_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICreateTopicPostPM_200_response_actions_summary_inner> getActionsSummary() const;
    void setActionsSummary(const QList<OAICreateTopicPostPM_200_response_actions_summary_inner> &actions_summary);
    bool is_actions_summary_Set() const;
    bool is_actions_summary_Valid() const;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    QString getAvatarTemplate() const;
    void setAvatarTemplate(const QString &avatar_template);
    bool is_avatar_template_Set() const;
    bool is_avatar_template_Valid() const;

    bool isBookmarked() const;
    void setBookmarked(const bool &bookmarked);
    bool is_bookmarked_Set() const;
    bool is_bookmarked_Valid() const;

    bool isCanDelete() const;
    void setCanDelete(const bool &can_delete);
    bool is_can_delete_Set() const;
    bool is_can_delete_Valid() const;

    bool isCanEdit() const;
    void setCanEdit(const bool &can_edit);
    bool is_can_edit_Set() const;
    bool is_can_edit_Valid() const;

    bool isCanRecover() const;
    void setCanRecover(const bool &can_recover);
    bool is_can_recover_Set() const;
    bool is_can_recover_Valid() const;

    bool isCanViewEditHistory() const;
    void setCanViewEditHistory(const bool &can_view_edit_history);
    bool is_can_view_edit_history_Set() const;
    bool is_can_view_edit_history_Valid() const;

    bool isCanWiki() const;
    void setCanWiki(const bool &can_wiki);
    bool is_can_wiki_Set() const;
    bool is_can_wiki_Valid() const;

    QString getCooked() const;
    void setCooked(const QString &cooked);
    bool is_cooked_Set() const;
    bool is_cooked_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDeletedAt() const;
    void setDeletedAt(const QString &deleted_at);
    bool is_deleted_at_Set() const;
    bool is_deleted_at_Valid() const;

    QString getDisplayUsername() const;
    void setDisplayUsername(const QString &display_username);
    bool is_display_username_Set() const;
    bool is_display_username_Valid() const;

    qint32 getDraftSequence() const;
    void setDraftSequence(const qint32 &draft_sequence);
    bool is_draft_sequence_Set() const;
    bool is_draft_sequence_Valid() const;

    QString getEditReason() const;
    void setEditReason(const QString &edit_reason);
    bool is_edit_reason_Set() const;
    bool is_edit_reason_Valid() const;

    QString getFlairBgColor() const;
    void setFlairBgColor(const QString &flair_bg_color);
    bool is_flair_bg_color_Set() const;
    bool is_flair_bg_color_Valid() const;

    QString getFlairColor() const;
    void setFlairColor(const QString &flair_color);
    bool is_flair_color_Set() const;
    bool is_flair_color_Valid() const;

    QString getFlairName() const;
    void setFlairName(const QString &flair_name);
    bool is_flair_name_Set() const;
    bool is_flair_name_Valid() const;

    QString getFlairUrl() const;
    void setFlairUrl(const QString &flair_url);
    bool is_flair_url_Set() const;
    bool is_flair_url_Valid() const;

    bool isHidden() const;
    void setHidden(const bool &hidden);
    bool is_hidden_Set() const;
    bool is_hidden_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getIncomingLinkCount() const;
    void setIncomingLinkCount(const qint32 &incoming_link_count);
    bool is_incoming_link_count_Set() const;
    bool is_incoming_link_count_Valid() const;

    QList<QJsonValue> getMentionedUsers() const;
    void setMentionedUsers(const QList<QJsonValue> &mentioned_users);
    bool is_mentioned_users_Set() const;
    bool is_mentioned_users_Valid() const;

    bool isModerator() const;
    void setModerator(const bool &moderator);
    bool is_moderator_Set() const;
    bool is_moderator_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPostNumber() const;
    void setPostNumber(const qint32 &post_number);
    bool is_post_number_Set() const;
    bool is_post_number_Valid() const;

    qint32 getPostType() const;
    void setPostType(const qint32 &post_type);
    bool is_post_type_Set() const;
    bool is_post_type_Valid() const;

    QString getPrimaryGroupName() const;
    void setPrimaryGroupName(const QString &primary_group_name);
    bool is_primary_group_name_Set() const;
    bool is_primary_group_name_Valid() const;

    qint32 getQuoteCount() const;
    void setQuoteCount(const qint32 &quote_count);
    bool is_quote_count_Set() const;
    bool is_quote_count_Valid() const;

    QString getRaw() const;
    void setRaw(const QString &raw);
    bool is_raw_Set() const;
    bool is_raw_Valid() const;

    qint32 getReadersCount() const;
    void setReadersCount(const qint32 &readers_count);
    bool is_readers_count_Set() const;
    bool is_readers_count_Valid() const;

    qint32 getReads() const;
    void setReads(const qint32 &reads);
    bool is_reads_Set() const;
    bool is_reads_Valid() const;

    qint32 getReplyCount() const;
    void setReplyCount(const qint32 &reply_count);
    bool is_reply_count_Set() const;
    bool is_reply_count_Valid() const;

    QString getReplyToPostNumber() const;
    void setReplyToPostNumber(const QString &reply_to_post_number);
    bool is_reply_to_post_number_Set() const;
    bool is_reply_to_post_number_Valid() const;

    QString getReviewableId() const;
    void setReviewableId(const QString &reviewable_id);
    bool is_reviewable_id_Set() const;
    bool is_reviewable_id_Valid() const;

    qint32 getReviewableScoreCount() const;
    void setReviewableScoreCount(const qint32 &reviewable_score_count);
    bool is_reviewable_score_count_Set() const;
    bool is_reviewable_score_count_Valid() const;

    qint32 getReviewableScorePendingCount() const;
    void setReviewableScorePendingCount(const qint32 &reviewable_score_pending_count);
    bool is_reviewable_score_pending_count_Set() const;
    bool is_reviewable_score_pending_count_Valid() const;

    qint32 getScore() const;
    void setScore(const qint32 &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    bool isStaff() const;
    void setStaff(const bool &staff);
    bool is_staff_Set() const;
    bool is_staff_Valid() const;

    qint32 getTopicId() const;
    void setTopicId(const qint32 &topic_id);
    bool is_topic_id_Set() const;
    bool is_topic_id_Valid() const;

    QString getTopicSlug() const;
    void setTopicSlug(const QString &topic_slug);
    bool is_topic_slug_Set() const;
    bool is_topic_slug_Valid() const;

    qint32 getTrustLevel() const;
    void setTrustLevel(const qint32 &trust_level);
    bool is_trust_level_Set() const;
    bool is_trust_level_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    bool isUserDeleted() const;
    void setUserDeleted(const bool &user_deleted);
    bool is_user_deleted_Set() const;
    bool is_user_deleted_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserTitle() const;
    void setUserTitle(const QString &user_title);
    bool is_user_title_Set() const;
    bool is_user_title_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    bool isWiki() const;
    void setWiki(const bool &wiki);
    bool is_wiki_Set() const;
    bool is_wiki_Valid() const;

    bool isYours() const;
    void setYours(const bool &yours);
    bool is_yours_Set() const;
    bool is_yours_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICreateTopicPostPM_200_response_actions_summary_inner> m_actions_summary;
    bool m_actions_summary_isSet;
    bool m_actions_summary_isValid;

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    QString m_avatar_template;
    bool m_avatar_template_isSet;
    bool m_avatar_template_isValid;

    bool m_bookmarked;
    bool m_bookmarked_isSet;
    bool m_bookmarked_isValid;

    bool m_can_delete;
    bool m_can_delete_isSet;
    bool m_can_delete_isValid;

    bool m_can_edit;
    bool m_can_edit_isSet;
    bool m_can_edit_isValid;

    bool m_can_recover;
    bool m_can_recover_isSet;
    bool m_can_recover_isValid;

    bool m_can_view_edit_history;
    bool m_can_view_edit_history_isSet;
    bool m_can_view_edit_history_isValid;

    bool m_can_wiki;
    bool m_can_wiki_isSet;
    bool m_can_wiki_isValid;

    QString m_cooked;
    bool m_cooked_isSet;
    bool m_cooked_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_deleted_at;
    bool m_deleted_at_isSet;
    bool m_deleted_at_isValid;

    QString m_display_username;
    bool m_display_username_isSet;
    bool m_display_username_isValid;

    qint32 m_draft_sequence;
    bool m_draft_sequence_isSet;
    bool m_draft_sequence_isValid;

    QString m_edit_reason;
    bool m_edit_reason_isSet;
    bool m_edit_reason_isValid;

    QString m_flair_bg_color;
    bool m_flair_bg_color_isSet;
    bool m_flair_bg_color_isValid;

    QString m_flair_color;
    bool m_flair_color_isSet;
    bool m_flair_color_isValid;

    QString m_flair_name;
    bool m_flair_name_isSet;
    bool m_flair_name_isValid;

    QString m_flair_url;
    bool m_flair_url_isSet;
    bool m_flair_url_isValid;

    bool m_hidden;
    bool m_hidden_isSet;
    bool m_hidden_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_incoming_link_count;
    bool m_incoming_link_count_isSet;
    bool m_incoming_link_count_isValid;

    QList<QJsonValue> m_mentioned_users;
    bool m_mentioned_users_isSet;
    bool m_mentioned_users_isValid;

    bool m_moderator;
    bool m_moderator_isSet;
    bool m_moderator_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_post_number;
    bool m_post_number_isSet;
    bool m_post_number_isValid;

    qint32 m_post_type;
    bool m_post_type_isSet;
    bool m_post_type_isValid;

    QString m_primary_group_name;
    bool m_primary_group_name_isSet;
    bool m_primary_group_name_isValid;

    qint32 m_quote_count;
    bool m_quote_count_isSet;
    bool m_quote_count_isValid;

    QString m_raw;
    bool m_raw_isSet;
    bool m_raw_isValid;

    qint32 m_readers_count;
    bool m_readers_count_isSet;
    bool m_readers_count_isValid;

    qint32 m_reads;
    bool m_reads_isSet;
    bool m_reads_isValid;

    qint32 m_reply_count;
    bool m_reply_count_isSet;
    bool m_reply_count_isValid;

    QString m_reply_to_post_number;
    bool m_reply_to_post_number_isSet;
    bool m_reply_to_post_number_isValid;

    QString m_reviewable_id;
    bool m_reviewable_id_isSet;
    bool m_reviewable_id_isValid;

    qint32 m_reviewable_score_count;
    bool m_reviewable_score_count_isSet;
    bool m_reviewable_score_count_isValid;

    qint32 m_reviewable_score_pending_count;
    bool m_reviewable_score_pending_count_isSet;
    bool m_reviewable_score_pending_count_isValid;

    qint32 m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    bool m_staff;
    bool m_staff_isSet;
    bool m_staff_isValid;

    qint32 m_topic_id;
    bool m_topic_id_isSet;
    bool m_topic_id_isValid;

    QString m_topic_slug;
    bool m_topic_slug_isSet;
    bool m_topic_slug_isValid;

    qint32 m_trust_level;
    bool m_trust_level_isSet;
    bool m_trust_level_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    bool m_user_deleted;
    bool m_user_deleted_isSet;
    bool m_user_deleted_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_title;
    bool m_user_title_isSet;
    bool m_user_title_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    bool m_wiki;
    bool m_wiki_isSet;
    bool m_wiki_isValid;

    bool m_yours;
    bool m_yours_isSet;
    bool m_yours_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateTopicPostPM_200_response)

#endif // OAICreateTopicPostPM_200_response_H
