/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListTagGroups_200_response_tag_groups_inner.h
 *
 * 
 */

#ifndef OAIListTagGroups_200_response_tag_groups_inner_H
#define OAIListTagGroups_200_response_tag_groups_inner_H

#include <QJsonObject>

#include "OAIListTagGroups_200_response_tag_groups_inner_permissions.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListTagGroups_200_response_tag_groups_inner_permissions;

class OAIListTagGroups_200_response_tag_groups_inner : public OAIObject {
public:
    OAIListTagGroups_200_response_tag_groups_inner();
    OAIListTagGroups_200_response_tag_groups_inner(QString json);
    ~OAIListTagGroups_200_response_tag_groups_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isOnePerTopic() const;
    void setOnePerTopic(const bool &one_per_topic);
    bool is_one_per_topic_Set() const;
    bool is_one_per_topic_Valid() const;

    QList<QJsonValue> getParentTagName() const;
    void setParentTagName(const QList<QJsonValue> &parent_tag_name);
    bool is_parent_tag_name_Set() const;
    bool is_parent_tag_name_Valid() const;

    OAIListTagGroups_200_response_tag_groups_inner_permissions getPermissions() const;
    void setPermissions(const OAIListTagGroups_200_response_tag_groups_inner_permissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QList<QJsonValue> getTagNames() const;
    void setTagNames(const QList<QJsonValue> &tag_names);
    bool is_tag_names_Set() const;
    bool is_tag_names_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_one_per_topic;
    bool m_one_per_topic_isSet;
    bool m_one_per_topic_isValid;

    QList<QJsonValue> m_parent_tag_name;
    bool m_parent_tag_name_isSet;
    bool m_parent_tag_name_isValid;

    OAIListTagGroups_200_response_tag_groups_inner_permissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QList<QJsonValue> m_tag_names;
    bool m_tag_names_isSet;
    bool m_tag_names_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListTagGroups_200_response_tag_groups_inner)

#endif // OAIListTagGroups_200_response_tag_groups_inner_H
