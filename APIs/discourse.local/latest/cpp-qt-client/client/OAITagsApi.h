/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagsApi_H
#define OAI_OAITagsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTagGroup_200_response.h"
#include "OAICreateTagGroup_request.h"
#include "OAIGetTagGroup_200_response.h"
#include "OAIGetTag_200_response.h"
#include "OAIListTagGroups_200_response.h"
#include "OAIListTags_200_response.h"
#include "OAIUpdateTagGroup_200_response.h"
#include "OAIUpdateTagGroup_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagsApi : public QObject {
    Q_OBJECT

public:
    OAITagsApi(const int timeOut = 0);
    ~OAITagsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_tag_group_request OAICreateTagGroup_request [optional]
    */
    virtual void createTagGroup(const ::OpenAPI::OptionalParam<OAICreateTagGroup_request> &oai_create_tag_group_request = ::OpenAPI::OptionalParam<OAICreateTagGroup_request>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void getTag(const QString &name);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getTagGroup(const QString &id);


    virtual void listTagGroups();


    virtual void listTags();

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_tag_group_request OAIUpdateTagGroup_request [optional]
    */
    virtual void updateTagGroup(const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateTagGroup_request> &oai_update_tag_group_request = ::OpenAPI::OptionalParam<OAIUpdateTagGroup_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTagGroupCallback(OAIHttpRequestWorker *worker);
    void getTagCallback(OAIHttpRequestWorker *worker);
    void getTagGroupCallback(OAIHttpRequestWorker *worker);
    void listTagGroupsCallback(OAIHttpRequestWorker *worker);
    void listTagsCallback(OAIHttpRequestWorker *worker);
    void updateTagGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTagGroupSignal(OAICreateTagGroup_200_response summary);
    void getTagSignal(OAIGetTag_200_response summary);
    void getTagGroupSignal(OAIGetTagGroup_200_response summary);
    void listTagGroupsSignal(OAIListTagGroups_200_response summary);
    void listTagsSignal(OAIListTags_200_response summary);
    void updateTagGroupSignal(OAIUpdateTagGroup_200_response summary);


    void createTagGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateTagGroup_200_response summary);
    void getTagSignalFull(OAIHttpRequestWorker *worker, OAIGetTag_200_response summary);
    void getTagGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetTagGroup_200_response summary);
    void listTagGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListTagGroups_200_response summary);
    void listTagsSignalFull(OAIHttpRequestWorker *worker, OAIListTags_200_response summary);
    void updateTagGroupSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTagGroup_200_response summary);

    Q_DECL_DEPRECATED_X("Use createTagGroupSignalError() instead")
    void createTagGroupSignalE(OAICreateTagGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTagGroupSignalError(OAICreateTagGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagSignalError() instead")
    void getTagSignalE(OAIGetTag_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagSignalError(OAIGetTag_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagGroupSignalError() instead")
    void getTagGroupSignalE(OAIGetTagGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagGroupSignalError(OAIGetTagGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagGroupsSignalError() instead")
    void listTagGroupsSignalE(OAIListTagGroups_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagGroupsSignalError(OAIListTagGroups_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsSignalError() instead")
    void listTagsSignalE(OAIListTags_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsSignalError(OAIListTags_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagGroupSignalError() instead")
    void updateTagGroupSignalE(OAIUpdateTagGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagGroupSignalError(OAIUpdateTagGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTagGroupSignalErrorFull() instead")
    void createTagGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTagGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagSignalErrorFull() instead")
    void getTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagGroupSignalErrorFull() instead")
    void getTagGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagGroupsSignalErrorFull() instead")
    void listTagGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsSignalErrorFull() instead")
    void listTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagGroupSignalErrorFull() instead")
    void updateTagGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
