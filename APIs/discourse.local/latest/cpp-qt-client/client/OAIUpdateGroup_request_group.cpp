/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateGroup_request_group.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateGroup_request_group::OAIUpdateGroup_request_group(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateGroup_request_group::OAIUpdateGroup_request_group() {
    this->initializeModel();
}

OAIUpdateGroup_request_group::~OAIUpdateGroup_request_group() {}

void OAIUpdateGroup_request_group::initializeModel() {

    m_automatic_membership_email_domains_isSet = false;
    m_automatic_membership_email_domains_isValid = false;

    m_bio_raw_isSet = false;
    m_bio_raw_isValid = false;

    m_default_notification_level_isSet = false;
    m_default_notification_level_isValid = false;

    m_flair_bg_color_isSet = false;
    m_flair_bg_color_isValid = false;

    m_flair_icon_isSet = false;
    m_flair_icon_isValid = false;

    m_flair_upload_id_isSet = false;
    m_flair_upload_id_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_muted_category_ids_isSet = false;
    m_muted_category_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_usernames_isSet = false;
    m_owner_usernames_isValid = false;

    m_primary_group_isSet = false;
    m_primary_group_isValid = false;

    m_public_admission_isSet = false;
    m_public_admission_isValid = false;

    m_public_exit_isSet = false;
    m_public_exit_isValid = false;

    m_regular_category_ids_isSet = false;
    m_regular_category_ids_isValid = false;

    m_tracking_category_ids_isSet = false;
    m_tracking_category_ids_isValid = false;

    m_usernames_isSet = false;
    m_usernames_isValid = false;

    m_visibility_level_isSet = false;
    m_visibility_level_isValid = false;

    m_watching_category_ids_isSet = false;
    m_watching_category_ids_isValid = false;

    m_watching_first_post_category_ids_isSet = false;
    m_watching_first_post_category_ids_isValid = false;
}

void OAIUpdateGroup_request_group::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateGroup_request_group::fromJsonObject(QJsonObject json) {

    m_automatic_membership_email_domains_isValid = ::OpenAPI::fromJsonValue(m_automatic_membership_email_domains, json[QString("automatic_membership_email_domains")]);
    m_automatic_membership_email_domains_isSet = !json[QString("automatic_membership_email_domains")].isNull() && m_automatic_membership_email_domains_isValid;

    m_bio_raw_isValid = ::OpenAPI::fromJsonValue(m_bio_raw, json[QString("bio_raw")]);
    m_bio_raw_isSet = !json[QString("bio_raw")].isNull() && m_bio_raw_isValid;

    m_default_notification_level_isValid = ::OpenAPI::fromJsonValue(m_default_notification_level, json[QString("default_notification_level")]);
    m_default_notification_level_isSet = !json[QString("default_notification_level")].isNull() && m_default_notification_level_isValid;

    m_flair_bg_color_isValid = ::OpenAPI::fromJsonValue(m_flair_bg_color, json[QString("flair_bg_color")]);
    m_flair_bg_color_isSet = !json[QString("flair_bg_color")].isNull() && m_flair_bg_color_isValid;

    m_flair_icon_isValid = ::OpenAPI::fromJsonValue(m_flair_icon, json[QString("flair_icon")]);
    m_flair_icon_isSet = !json[QString("flair_icon")].isNull() && m_flair_icon_isValid;

    m_flair_upload_id_isValid = ::OpenAPI::fromJsonValue(m_flair_upload_id, json[QString("flair_upload_id")]);
    m_flair_upload_id_isSet = !json[QString("flair_upload_id")].isNull() && m_flair_upload_id_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_muted_category_ids_isValid = ::OpenAPI::fromJsonValue(m_muted_category_ids, json[QString("muted_category_ids")]);
    m_muted_category_ids_isSet = !json[QString("muted_category_ids")].isNull() && m_muted_category_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_usernames_isValid = ::OpenAPI::fromJsonValue(m_owner_usernames, json[QString("owner_usernames")]);
    m_owner_usernames_isSet = !json[QString("owner_usernames")].isNull() && m_owner_usernames_isValid;

    m_primary_group_isValid = ::OpenAPI::fromJsonValue(m_primary_group, json[QString("primary_group")]);
    m_primary_group_isSet = !json[QString("primary_group")].isNull() && m_primary_group_isValid;

    m_public_admission_isValid = ::OpenAPI::fromJsonValue(m_public_admission, json[QString("public_admission")]);
    m_public_admission_isSet = !json[QString("public_admission")].isNull() && m_public_admission_isValid;

    m_public_exit_isValid = ::OpenAPI::fromJsonValue(m_public_exit, json[QString("public_exit")]);
    m_public_exit_isSet = !json[QString("public_exit")].isNull() && m_public_exit_isValid;

    m_regular_category_ids_isValid = ::OpenAPI::fromJsonValue(m_regular_category_ids, json[QString("regular_category_ids")]);
    m_regular_category_ids_isSet = !json[QString("regular_category_ids")].isNull() && m_regular_category_ids_isValid;

    m_tracking_category_ids_isValid = ::OpenAPI::fromJsonValue(m_tracking_category_ids, json[QString("tracking_category_ids")]);
    m_tracking_category_ids_isSet = !json[QString("tracking_category_ids")].isNull() && m_tracking_category_ids_isValid;

    m_usernames_isValid = ::OpenAPI::fromJsonValue(m_usernames, json[QString("usernames")]);
    m_usernames_isSet = !json[QString("usernames")].isNull() && m_usernames_isValid;

    m_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_visibility_level, json[QString("visibility_level")]);
    m_visibility_level_isSet = !json[QString("visibility_level")].isNull() && m_visibility_level_isValid;

    m_watching_category_ids_isValid = ::OpenAPI::fromJsonValue(m_watching_category_ids, json[QString("watching_category_ids")]);
    m_watching_category_ids_isSet = !json[QString("watching_category_ids")].isNull() && m_watching_category_ids_isValid;

    m_watching_first_post_category_ids_isValid = ::OpenAPI::fromJsonValue(m_watching_first_post_category_ids, json[QString("watching_first_post_category_ids")]);
    m_watching_first_post_category_ids_isSet = !json[QString("watching_first_post_category_ids")].isNull() && m_watching_first_post_category_ids_isValid;
}

QString OAIUpdateGroup_request_group::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateGroup_request_group::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_membership_email_domains_isSet) {
        obj.insert(QString("automatic_membership_email_domains"), ::OpenAPI::toJsonValue(m_automatic_membership_email_domains));
    }
    if (m_bio_raw_isSet) {
        obj.insert(QString("bio_raw"), ::OpenAPI::toJsonValue(m_bio_raw));
    }
    if (m_default_notification_level_isSet) {
        obj.insert(QString("default_notification_level"), ::OpenAPI::toJsonValue(m_default_notification_level));
    }
    if (m_flair_bg_color_isSet) {
        obj.insert(QString("flair_bg_color"), ::OpenAPI::toJsonValue(m_flair_bg_color));
    }
    if (m_flair_icon_isSet) {
        obj.insert(QString("flair_icon"), ::OpenAPI::toJsonValue(m_flair_icon));
    }
    if (m_flair_upload_id_isSet) {
        obj.insert(QString("flair_upload_id"), ::OpenAPI::toJsonValue(m_flair_upload_id));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_muted_category_ids.size() > 0) {
        obj.insert(QString("muted_category_ids"), ::OpenAPI::toJsonValue(m_muted_category_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_usernames_isSet) {
        obj.insert(QString("owner_usernames"), ::OpenAPI::toJsonValue(m_owner_usernames));
    }
    if (m_primary_group_isSet) {
        obj.insert(QString("primary_group"), ::OpenAPI::toJsonValue(m_primary_group));
    }
    if (m_public_admission_isSet) {
        obj.insert(QString("public_admission"), ::OpenAPI::toJsonValue(m_public_admission));
    }
    if (m_public_exit_isSet) {
        obj.insert(QString("public_exit"), ::OpenAPI::toJsonValue(m_public_exit));
    }
    if (m_regular_category_ids.size() > 0) {
        obj.insert(QString("regular_category_ids"), ::OpenAPI::toJsonValue(m_regular_category_ids));
    }
    if (m_tracking_category_ids.size() > 0) {
        obj.insert(QString("tracking_category_ids"), ::OpenAPI::toJsonValue(m_tracking_category_ids));
    }
    if (m_usernames_isSet) {
        obj.insert(QString("usernames"), ::OpenAPI::toJsonValue(m_usernames));
    }
    if (m_visibility_level_isSet) {
        obj.insert(QString("visibility_level"), ::OpenAPI::toJsonValue(m_visibility_level));
    }
    if (m_watching_category_ids.size() > 0) {
        obj.insert(QString("watching_category_ids"), ::OpenAPI::toJsonValue(m_watching_category_ids));
    }
    if (m_watching_first_post_category_ids.size() > 0) {
        obj.insert(QString("watching_first_post_category_ids"), ::OpenAPI::toJsonValue(m_watching_first_post_category_ids));
    }
    return obj;
}

QString OAIUpdateGroup_request_group::getAutomaticMembershipEmailDomains() const {
    return m_automatic_membership_email_domains;
}
void OAIUpdateGroup_request_group::setAutomaticMembershipEmailDomains(const QString &automatic_membership_email_domains) {
    m_automatic_membership_email_domains = automatic_membership_email_domains;
    m_automatic_membership_email_domains_isSet = true;
}

bool OAIUpdateGroup_request_group::is_automatic_membership_email_domains_Set() const{
    return m_automatic_membership_email_domains_isSet;
}

bool OAIUpdateGroup_request_group::is_automatic_membership_email_domains_Valid() const{
    return m_automatic_membership_email_domains_isValid;
}

QString OAIUpdateGroup_request_group::getBioRaw() const {
    return m_bio_raw;
}
void OAIUpdateGroup_request_group::setBioRaw(const QString &bio_raw) {
    m_bio_raw = bio_raw;
    m_bio_raw_isSet = true;
}

bool OAIUpdateGroup_request_group::is_bio_raw_Set() const{
    return m_bio_raw_isSet;
}

bool OAIUpdateGroup_request_group::is_bio_raw_Valid() const{
    return m_bio_raw_isValid;
}

qint32 OAIUpdateGroup_request_group::getDefaultNotificationLevel() const {
    return m_default_notification_level;
}
void OAIUpdateGroup_request_group::setDefaultNotificationLevel(const qint32 &default_notification_level) {
    m_default_notification_level = default_notification_level;
    m_default_notification_level_isSet = true;
}

bool OAIUpdateGroup_request_group::is_default_notification_level_Set() const{
    return m_default_notification_level_isSet;
}

bool OAIUpdateGroup_request_group::is_default_notification_level_Valid() const{
    return m_default_notification_level_isValid;
}

QString OAIUpdateGroup_request_group::getFlairBgColor() const {
    return m_flair_bg_color;
}
void OAIUpdateGroup_request_group::setFlairBgColor(const QString &flair_bg_color) {
    m_flair_bg_color = flair_bg_color;
    m_flair_bg_color_isSet = true;
}

bool OAIUpdateGroup_request_group::is_flair_bg_color_Set() const{
    return m_flair_bg_color_isSet;
}

bool OAIUpdateGroup_request_group::is_flair_bg_color_Valid() const{
    return m_flair_bg_color_isValid;
}

QString OAIUpdateGroup_request_group::getFlairIcon() const {
    return m_flair_icon;
}
void OAIUpdateGroup_request_group::setFlairIcon(const QString &flair_icon) {
    m_flair_icon = flair_icon;
    m_flair_icon_isSet = true;
}

bool OAIUpdateGroup_request_group::is_flair_icon_Set() const{
    return m_flair_icon_isSet;
}

bool OAIUpdateGroup_request_group::is_flair_icon_Valid() const{
    return m_flair_icon_isValid;
}

qint32 OAIUpdateGroup_request_group::getFlairUploadId() const {
    return m_flair_upload_id;
}
void OAIUpdateGroup_request_group::setFlairUploadId(const qint32 &flair_upload_id) {
    m_flair_upload_id = flair_upload_id;
    m_flair_upload_id_isSet = true;
}

bool OAIUpdateGroup_request_group::is_flair_upload_id_Set() const{
    return m_flair_upload_id_isSet;
}

bool OAIUpdateGroup_request_group::is_flair_upload_id_Valid() const{
    return m_flair_upload_id_isValid;
}

QString OAIUpdateGroup_request_group::getFullName() const {
    return m_full_name;
}
void OAIUpdateGroup_request_group::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUpdateGroup_request_group::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUpdateGroup_request_group::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QList<qint32> OAIUpdateGroup_request_group::getMutedCategoryIds() const {
    return m_muted_category_ids;
}
void OAIUpdateGroup_request_group::setMutedCategoryIds(const QList<qint32> &muted_category_ids) {
    m_muted_category_ids = muted_category_ids;
    m_muted_category_ids_isSet = true;
}

bool OAIUpdateGroup_request_group::is_muted_category_ids_Set() const{
    return m_muted_category_ids_isSet;
}

bool OAIUpdateGroup_request_group::is_muted_category_ids_Valid() const{
    return m_muted_category_ids_isValid;
}

QString OAIUpdateGroup_request_group::getName() const {
    return m_name;
}
void OAIUpdateGroup_request_group::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateGroup_request_group::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateGroup_request_group::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateGroup_request_group::getOwnerUsernames() const {
    return m_owner_usernames;
}
void OAIUpdateGroup_request_group::setOwnerUsernames(const QString &owner_usernames) {
    m_owner_usernames = owner_usernames;
    m_owner_usernames_isSet = true;
}

bool OAIUpdateGroup_request_group::is_owner_usernames_Set() const{
    return m_owner_usernames_isSet;
}

bool OAIUpdateGroup_request_group::is_owner_usernames_Valid() const{
    return m_owner_usernames_isValid;
}

bool OAIUpdateGroup_request_group::isPrimaryGroup() const {
    return m_primary_group;
}
void OAIUpdateGroup_request_group::setPrimaryGroup(const bool &primary_group) {
    m_primary_group = primary_group;
    m_primary_group_isSet = true;
}

bool OAIUpdateGroup_request_group::is_primary_group_Set() const{
    return m_primary_group_isSet;
}

bool OAIUpdateGroup_request_group::is_primary_group_Valid() const{
    return m_primary_group_isValid;
}

bool OAIUpdateGroup_request_group::isPublicAdmission() const {
    return m_public_admission;
}
void OAIUpdateGroup_request_group::setPublicAdmission(const bool &public_admission) {
    m_public_admission = public_admission;
    m_public_admission_isSet = true;
}

bool OAIUpdateGroup_request_group::is_public_admission_Set() const{
    return m_public_admission_isSet;
}

bool OAIUpdateGroup_request_group::is_public_admission_Valid() const{
    return m_public_admission_isValid;
}

bool OAIUpdateGroup_request_group::isPublicExit() const {
    return m_public_exit;
}
void OAIUpdateGroup_request_group::setPublicExit(const bool &public_exit) {
    m_public_exit = public_exit;
    m_public_exit_isSet = true;
}

bool OAIUpdateGroup_request_group::is_public_exit_Set() const{
    return m_public_exit_isSet;
}

bool OAIUpdateGroup_request_group::is_public_exit_Valid() const{
    return m_public_exit_isValid;
}

QList<qint32> OAIUpdateGroup_request_group::getRegularCategoryIds() const {
    return m_regular_category_ids;
}
void OAIUpdateGroup_request_group::setRegularCategoryIds(const QList<qint32> &regular_category_ids) {
    m_regular_category_ids = regular_category_ids;
    m_regular_category_ids_isSet = true;
}

bool OAIUpdateGroup_request_group::is_regular_category_ids_Set() const{
    return m_regular_category_ids_isSet;
}

bool OAIUpdateGroup_request_group::is_regular_category_ids_Valid() const{
    return m_regular_category_ids_isValid;
}

QList<qint32> OAIUpdateGroup_request_group::getTrackingCategoryIds() const {
    return m_tracking_category_ids;
}
void OAIUpdateGroup_request_group::setTrackingCategoryIds(const QList<qint32> &tracking_category_ids) {
    m_tracking_category_ids = tracking_category_ids;
    m_tracking_category_ids_isSet = true;
}

bool OAIUpdateGroup_request_group::is_tracking_category_ids_Set() const{
    return m_tracking_category_ids_isSet;
}

bool OAIUpdateGroup_request_group::is_tracking_category_ids_Valid() const{
    return m_tracking_category_ids_isValid;
}

QString OAIUpdateGroup_request_group::getUsernames() const {
    return m_usernames;
}
void OAIUpdateGroup_request_group::setUsernames(const QString &usernames) {
    m_usernames = usernames;
    m_usernames_isSet = true;
}

bool OAIUpdateGroup_request_group::is_usernames_Set() const{
    return m_usernames_isSet;
}

bool OAIUpdateGroup_request_group::is_usernames_Valid() const{
    return m_usernames_isValid;
}

qint32 OAIUpdateGroup_request_group::getVisibilityLevel() const {
    return m_visibility_level;
}
void OAIUpdateGroup_request_group::setVisibilityLevel(const qint32 &visibility_level) {
    m_visibility_level = visibility_level;
    m_visibility_level_isSet = true;
}

bool OAIUpdateGroup_request_group::is_visibility_level_Set() const{
    return m_visibility_level_isSet;
}

bool OAIUpdateGroup_request_group::is_visibility_level_Valid() const{
    return m_visibility_level_isValid;
}

QList<qint32> OAIUpdateGroup_request_group::getWatchingCategoryIds() const {
    return m_watching_category_ids;
}
void OAIUpdateGroup_request_group::setWatchingCategoryIds(const QList<qint32> &watching_category_ids) {
    m_watching_category_ids = watching_category_ids;
    m_watching_category_ids_isSet = true;
}

bool OAIUpdateGroup_request_group::is_watching_category_ids_Set() const{
    return m_watching_category_ids_isSet;
}

bool OAIUpdateGroup_request_group::is_watching_category_ids_Valid() const{
    return m_watching_category_ids_isValid;
}

QList<qint32> OAIUpdateGroup_request_group::getWatchingFirstPostCategoryIds() const {
    return m_watching_first_post_category_ids;
}
void OAIUpdateGroup_request_group::setWatchingFirstPostCategoryIds(const QList<qint32> &watching_first_post_category_ids) {
    m_watching_first_post_category_ids = watching_first_post_category_ids;
    m_watching_first_post_category_ids_isSet = true;
}

bool OAIUpdateGroup_request_group::is_watching_first_post_category_ids_Set() const{
    return m_watching_first_post_category_ids_isSet;
}

bool OAIUpdateGroup_request_group::is_watching_first_post_category_ids_Valid() const{
    return m_watching_first_post_category_ids_isValid;
}

bool OAIUpdateGroup_request_group::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_membership_email_domains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_notification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_bg_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_usernames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_admission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_exit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usernames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_first_post_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateGroup_request_group::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
