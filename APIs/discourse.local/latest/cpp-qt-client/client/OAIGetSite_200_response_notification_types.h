/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSite_200_response_notification_types.h
 *
 * 
 */

#ifndef OAIGetSite_200_response_notification_types_H
#define OAIGetSite_200_response_notification_types_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetSite_200_response_notification_types : public OAIObject {
public:
    OAIGetSite_200_response_notification_types();
    OAIGetSite_200_response_notification_types(QString json);
    ~OAIGetSite_200_response_notification_types() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAssigned() const;
    void setAssigned(const qint32 &assigned);
    bool is_assigned_Set() const;
    bool is_assigned_Valid() const;

    qint32 getBookmarkReminder() const;
    void setBookmarkReminder(const qint32 &bookmark_reminder);
    bool is_bookmark_reminder_Set() const;
    bool is_bookmark_reminder_Valid() const;

    qint32 getChatGroupMention() const;
    void setChatGroupMention(const qint32 &chat_group_mention);
    bool is_chat_group_mention_Set() const;
    bool is_chat_group_mention_Valid() const;

    qint32 getChatInvitation() const;
    void setChatInvitation(const qint32 &chat_invitation);
    bool is_chat_invitation_Set() const;
    bool is_chat_invitation_Valid() const;

    qint32 getChatMention() const;
    void setChatMention(const qint32 &chat_mention);
    bool is_chat_mention_Set() const;
    bool is_chat_mention_Valid() const;

    qint32 getChatMessage() const;
    void setChatMessage(const qint32 &chat_message);
    bool is_chat_message_Set() const;
    bool is_chat_message_Valid() const;

    qint32 getChatQuoted() const;
    void setChatQuoted(const qint32 &chat_quoted);
    bool is_chat_quoted_Set() const;
    bool is_chat_quoted_Valid() const;

    qint32 getCirclesActivity() const;
    void setCirclesActivity(const qint32 &circles_activity);
    bool is_circles_activity_Set() const;
    bool is_circles_activity_Valid() const;

    qint32 getCodeReviewCommitApproved() const;
    void setCodeReviewCommitApproved(const qint32 &code_review_commit_approved);
    bool is_code_review_commit_approved_Set() const;
    bool is_code_review_commit_approved_Valid() const;

    qint32 getCustom() const;
    void setCustom(const qint32 &custom);
    bool is_custom_Set() const;
    bool is_custom_Valid() const;

    qint32 getEdited() const;
    void setEdited(const qint32 &edited);
    bool is_edited_Set() const;
    bool is_edited_Valid() const;

    qint32 getEventInvitation() const;
    void setEventInvitation(const qint32 &event_invitation);
    bool is_event_invitation_Set() const;
    bool is_event_invitation_Valid() const;

    qint32 getEventReminder() const;
    void setEventReminder(const qint32 &event_reminder);
    bool is_event_reminder_Set() const;
    bool is_event_reminder_Valid() const;

    qint32 getFollowing() const;
    void setFollowing(const qint32 &following);
    bool is_following_Set() const;
    bool is_following_Valid() const;

    qint32 getFollowingCreatedTopic() const;
    void setFollowingCreatedTopic(const qint32 &following_created_topic);
    bool is_following_created_topic_Set() const;
    bool is_following_created_topic_Valid() const;

    qint32 getFollowingReplied() const;
    void setFollowingReplied(const qint32 &following_replied);
    bool is_following_replied_Set() const;
    bool is_following_replied_Valid() const;

    qint32 getGrantedBadge() const;
    void setGrantedBadge(const qint32 &granted_badge);
    bool is_granted_badge_Set() const;
    bool is_granted_badge_Valid() const;

    qint32 getGroupMentioned() const;
    void setGroupMentioned(const qint32 &group_mentioned);
    bool is_group_mentioned_Set() const;
    bool is_group_mentioned_Valid() const;

    qint32 getGroupMessageSummary() const;
    void setGroupMessageSummary(const qint32 &group_message_summary);
    bool is_group_message_summary_Set() const;
    bool is_group_message_summary_Valid() const;

    qint32 getInvitedToPrivateMessage() const;
    void setInvitedToPrivateMessage(const qint32 &invited_to_private_message);
    bool is_invited_to_private_message_Set() const;
    bool is_invited_to_private_message_Valid() const;

    qint32 getInvitedToTopic() const;
    void setInvitedToTopic(const qint32 &invited_to_topic);
    bool is_invited_to_topic_Set() const;
    bool is_invited_to_topic_Valid() const;

    qint32 getInviteeAccepted() const;
    void setInviteeAccepted(const qint32 &invitee_accepted);
    bool is_invitee_accepted_Set() const;
    bool is_invitee_accepted_Valid() const;

    qint32 getLiked() const;
    void setLiked(const qint32 &liked);
    bool is_liked_Set() const;
    bool is_liked_Valid() const;

    qint32 getLikedConsolidated() const;
    void setLikedConsolidated(const qint32 &liked_consolidated);
    bool is_liked_consolidated_Set() const;
    bool is_liked_consolidated_Valid() const;

    qint32 getLinked() const;
    void setLinked(const qint32 &linked);
    bool is_linked_Set() const;
    bool is_linked_Valid() const;

    qint32 getMembershipRequestAccepted() const;
    void setMembershipRequestAccepted(const qint32 &membership_request_accepted);
    bool is_membership_request_accepted_Set() const;
    bool is_membership_request_accepted_Valid() const;

    qint32 getMembershipRequestConsolidated() const;
    void setMembershipRequestConsolidated(const qint32 &membership_request_consolidated);
    bool is_membership_request_consolidated_Set() const;
    bool is_membership_request_consolidated_Valid() const;

    qint32 getMentioned() const;
    void setMentioned(const qint32 &mentioned);
    bool is_mentioned_Set() const;
    bool is_mentioned_Valid() const;

    qint32 getMovedPost() const;
    void setMovedPost(const qint32 &moved_post);
    bool is_moved_post_Set() const;
    bool is_moved_post_Valid() const;

    qint32 getNewFeatures() const;
    void setNewFeatures(const qint32 &new_features);
    bool is_new_features_Set() const;
    bool is_new_features_Valid() const;

    qint32 getPostApproved() const;
    void setPostApproved(const qint32 &post_approved);
    bool is_post_approved_Set() const;
    bool is_post_approved_Valid() const;

    qint32 getPosted() const;
    void setPosted(const qint32 &posted);
    bool is_posted_Set() const;
    bool is_posted_Valid() const;

    qint32 getPrivateMessage() const;
    void setPrivateMessage(const qint32 &private_message);
    bool is_private_message_Set() const;
    bool is_private_message_Valid() const;

    qint32 getQuestionAnswerUserCommented() const;
    void setQuestionAnswerUserCommented(const qint32 &question_answer_user_commented);
    bool is_question_answer_user_commented_Set() const;
    bool is_question_answer_user_commented_Valid() const;

    qint32 getQuoted() const;
    void setQuoted(const qint32 &quoted);
    bool is_quoted_Set() const;
    bool is_quoted_Valid() const;

    qint32 getReaction() const;
    void setReaction(const qint32 &reaction);
    bool is_reaction_Set() const;
    bool is_reaction_Valid() const;

    qint32 getReplied() const;
    void setReplied(const qint32 &replied);
    bool is_replied_Set() const;
    bool is_replied_Valid() const;

    qint32 getTopicReminder() const;
    void setTopicReminder(const qint32 &topic_reminder);
    bool is_topic_reminder_Set() const;
    bool is_topic_reminder_Valid() const;

    qint32 getVotesReleased() const;
    void setVotesReleased(const qint32 &votes_released);
    bool is_votes_released_Set() const;
    bool is_votes_released_Valid() const;

    qint32 getWatchingCategoryOrTag() const;
    void setWatchingCategoryOrTag(const qint32 &watching_category_or_tag);
    bool is_watching_category_or_tag_Set() const;
    bool is_watching_category_or_tag_Valid() const;

    qint32 getWatchingFirstPost() const;
    void setWatchingFirstPost(const qint32 &watching_first_post);
    bool is_watching_first_post_Set() const;
    bool is_watching_first_post_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_assigned;
    bool m_assigned_isSet;
    bool m_assigned_isValid;

    qint32 m_bookmark_reminder;
    bool m_bookmark_reminder_isSet;
    bool m_bookmark_reminder_isValid;

    qint32 m_chat_group_mention;
    bool m_chat_group_mention_isSet;
    bool m_chat_group_mention_isValid;

    qint32 m_chat_invitation;
    bool m_chat_invitation_isSet;
    bool m_chat_invitation_isValid;

    qint32 m_chat_mention;
    bool m_chat_mention_isSet;
    bool m_chat_mention_isValid;

    qint32 m_chat_message;
    bool m_chat_message_isSet;
    bool m_chat_message_isValid;

    qint32 m_chat_quoted;
    bool m_chat_quoted_isSet;
    bool m_chat_quoted_isValid;

    qint32 m_circles_activity;
    bool m_circles_activity_isSet;
    bool m_circles_activity_isValid;

    qint32 m_code_review_commit_approved;
    bool m_code_review_commit_approved_isSet;
    bool m_code_review_commit_approved_isValid;

    qint32 m_custom;
    bool m_custom_isSet;
    bool m_custom_isValid;

    qint32 m_edited;
    bool m_edited_isSet;
    bool m_edited_isValid;

    qint32 m_event_invitation;
    bool m_event_invitation_isSet;
    bool m_event_invitation_isValid;

    qint32 m_event_reminder;
    bool m_event_reminder_isSet;
    bool m_event_reminder_isValid;

    qint32 m_following;
    bool m_following_isSet;
    bool m_following_isValid;

    qint32 m_following_created_topic;
    bool m_following_created_topic_isSet;
    bool m_following_created_topic_isValid;

    qint32 m_following_replied;
    bool m_following_replied_isSet;
    bool m_following_replied_isValid;

    qint32 m_granted_badge;
    bool m_granted_badge_isSet;
    bool m_granted_badge_isValid;

    qint32 m_group_mentioned;
    bool m_group_mentioned_isSet;
    bool m_group_mentioned_isValid;

    qint32 m_group_message_summary;
    bool m_group_message_summary_isSet;
    bool m_group_message_summary_isValid;

    qint32 m_invited_to_private_message;
    bool m_invited_to_private_message_isSet;
    bool m_invited_to_private_message_isValid;

    qint32 m_invited_to_topic;
    bool m_invited_to_topic_isSet;
    bool m_invited_to_topic_isValid;

    qint32 m_invitee_accepted;
    bool m_invitee_accepted_isSet;
    bool m_invitee_accepted_isValid;

    qint32 m_liked;
    bool m_liked_isSet;
    bool m_liked_isValid;

    qint32 m_liked_consolidated;
    bool m_liked_consolidated_isSet;
    bool m_liked_consolidated_isValid;

    qint32 m_linked;
    bool m_linked_isSet;
    bool m_linked_isValid;

    qint32 m_membership_request_accepted;
    bool m_membership_request_accepted_isSet;
    bool m_membership_request_accepted_isValid;

    qint32 m_membership_request_consolidated;
    bool m_membership_request_consolidated_isSet;
    bool m_membership_request_consolidated_isValid;

    qint32 m_mentioned;
    bool m_mentioned_isSet;
    bool m_mentioned_isValid;

    qint32 m_moved_post;
    bool m_moved_post_isSet;
    bool m_moved_post_isValid;

    qint32 m_new_features;
    bool m_new_features_isSet;
    bool m_new_features_isValid;

    qint32 m_post_approved;
    bool m_post_approved_isSet;
    bool m_post_approved_isValid;

    qint32 m_posted;
    bool m_posted_isSet;
    bool m_posted_isValid;

    qint32 m_private_message;
    bool m_private_message_isSet;
    bool m_private_message_isValid;

    qint32 m_question_answer_user_commented;
    bool m_question_answer_user_commented_isSet;
    bool m_question_answer_user_commented_isValid;

    qint32 m_quoted;
    bool m_quoted_isSet;
    bool m_quoted_isValid;

    qint32 m_reaction;
    bool m_reaction_isSet;
    bool m_reaction_isValid;

    qint32 m_replied;
    bool m_replied_isSet;
    bool m_replied_isValid;

    qint32 m_topic_reminder;
    bool m_topic_reminder_isSet;
    bool m_topic_reminder_isValid;

    qint32 m_votes_released;
    bool m_votes_released_isSet;
    bool m_votes_released_isValid;

    qint32 m_watching_category_or_tag;
    bool m_watching_category_or_tag_isSet;
    bool m_watching_category_or_tag_isValid;

    qint32 m_watching_first_post;
    bool m_watching_first_post_isSet;
    bool m_watching_first_post_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSite_200_response_notification_types)

#endif // OAIGetSite_200_response_notification_types_H
