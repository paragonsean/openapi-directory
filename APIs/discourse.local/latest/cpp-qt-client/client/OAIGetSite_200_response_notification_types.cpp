/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSite_200_response_notification_types.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSite_200_response_notification_types::OAIGetSite_200_response_notification_types(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSite_200_response_notification_types::OAIGetSite_200_response_notification_types() {
    this->initializeModel();
}

OAIGetSite_200_response_notification_types::~OAIGetSite_200_response_notification_types() {}

void OAIGetSite_200_response_notification_types::initializeModel() {

    m_assigned_isSet = false;
    m_assigned_isValid = false;

    m_bookmark_reminder_isSet = false;
    m_bookmark_reminder_isValid = false;

    m_chat_group_mention_isSet = false;
    m_chat_group_mention_isValid = false;

    m_chat_invitation_isSet = false;
    m_chat_invitation_isValid = false;

    m_chat_mention_isSet = false;
    m_chat_mention_isValid = false;

    m_chat_message_isSet = false;
    m_chat_message_isValid = false;

    m_chat_quoted_isSet = false;
    m_chat_quoted_isValid = false;

    m_circles_activity_isSet = false;
    m_circles_activity_isValid = false;

    m_code_review_commit_approved_isSet = false;
    m_code_review_commit_approved_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_edited_isSet = false;
    m_edited_isValid = false;

    m_event_invitation_isSet = false;
    m_event_invitation_isValid = false;

    m_event_reminder_isSet = false;
    m_event_reminder_isValid = false;

    m_following_isSet = false;
    m_following_isValid = false;

    m_following_created_topic_isSet = false;
    m_following_created_topic_isValid = false;

    m_following_replied_isSet = false;
    m_following_replied_isValid = false;

    m_granted_badge_isSet = false;
    m_granted_badge_isValid = false;

    m_group_mentioned_isSet = false;
    m_group_mentioned_isValid = false;

    m_group_message_summary_isSet = false;
    m_group_message_summary_isValid = false;

    m_invited_to_private_message_isSet = false;
    m_invited_to_private_message_isValid = false;

    m_invited_to_topic_isSet = false;
    m_invited_to_topic_isValid = false;

    m_invitee_accepted_isSet = false;
    m_invitee_accepted_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_liked_consolidated_isSet = false;
    m_liked_consolidated_isValid = false;

    m_linked_isSet = false;
    m_linked_isValid = false;

    m_membership_request_accepted_isSet = false;
    m_membership_request_accepted_isValid = false;

    m_membership_request_consolidated_isSet = false;
    m_membership_request_consolidated_isValid = false;

    m_mentioned_isSet = false;
    m_mentioned_isValid = false;

    m_moved_post_isSet = false;
    m_moved_post_isValid = false;

    m_new_features_isSet = false;
    m_new_features_isValid = false;

    m_post_approved_isSet = false;
    m_post_approved_isValid = false;

    m_posted_isSet = false;
    m_posted_isValid = false;

    m_private_message_isSet = false;
    m_private_message_isValid = false;

    m_question_answer_user_commented_isSet = false;
    m_question_answer_user_commented_isValid = false;

    m_quoted_isSet = false;
    m_quoted_isValid = false;

    m_reaction_isSet = false;
    m_reaction_isValid = false;

    m_replied_isSet = false;
    m_replied_isValid = false;

    m_topic_reminder_isSet = false;
    m_topic_reminder_isValid = false;

    m_votes_released_isSet = false;
    m_votes_released_isValid = false;

    m_watching_category_or_tag_isSet = false;
    m_watching_category_or_tag_isValid = false;

    m_watching_first_post_isSet = false;
    m_watching_first_post_isValid = false;
}

void OAIGetSite_200_response_notification_types::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSite_200_response_notification_types::fromJsonObject(QJsonObject json) {

    m_assigned_isValid = ::OpenAPI::fromJsonValue(m_assigned, json[QString("assigned")]);
    m_assigned_isSet = !json[QString("assigned")].isNull() && m_assigned_isValid;

    m_bookmark_reminder_isValid = ::OpenAPI::fromJsonValue(m_bookmark_reminder, json[QString("bookmark_reminder")]);
    m_bookmark_reminder_isSet = !json[QString("bookmark_reminder")].isNull() && m_bookmark_reminder_isValid;

    m_chat_group_mention_isValid = ::OpenAPI::fromJsonValue(m_chat_group_mention, json[QString("chat_group_mention")]);
    m_chat_group_mention_isSet = !json[QString("chat_group_mention")].isNull() && m_chat_group_mention_isValid;

    m_chat_invitation_isValid = ::OpenAPI::fromJsonValue(m_chat_invitation, json[QString("chat_invitation")]);
    m_chat_invitation_isSet = !json[QString("chat_invitation")].isNull() && m_chat_invitation_isValid;

    m_chat_mention_isValid = ::OpenAPI::fromJsonValue(m_chat_mention, json[QString("chat_mention")]);
    m_chat_mention_isSet = !json[QString("chat_mention")].isNull() && m_chat_mention_isValid;

    m_chat_message_isValid = ::OpenAPI::fromJsonValue(m_chat_message, json[QString("chat_message")]);
    m_chat_message_isSet = !json[QString("chat_message")].isNull() && m_chat_message_isValid;

    m_chat_quoted_isValid = ::OpenAPI::fromJsonValue(m_chat_quoted, json[QString("chat_quoted")]);
    m_chat_quoted_isSet = !json[QString("chat_quoted")].isNull() && m_chat_quoted_isValid;

    m_circles_activity_isValid = ::OpenAPI::fromJsonValue(m_circles_activity, json[QString("circles_activity")]);
    m_circles_activity_isSet = !json[QString("circles_activity")].isNull() && m_circles_activity_isValid;

    m_code_review_commit_approved_isValid = ::OpenAPI::fromJsonValue(m_code_review_commit_approved, json[QString("code_review_commit_approved")]);
    m_code_review_commit_approved_isSet = !json[QString("code_review_commit_approved")].isNull() && m_code_review_commit_approved_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_edited_isValid = ::OpenAPI::fromJsonValue(m_edited, json[QString("edited")]);
    m_edited_isSet = !json[QString("edited")].isNull() && m_edited_isValid;

    m_event_invitation_isValid = ::OpenAPI::fromJsonValue(m_event_invitation, json[QString("event_invitation")]);
    m_event_invitation_isSet = !json[QString("event_invitation")].isNull() && m_event_invitation_isValid;

    m_event_reminder_isValid = ::OpenAPI::fromJsonValue(m_event_reminder, json[QString("event_reminder")]);
    m_event_reminder_isSet = !json[QString("event_reminder")].isNull() && m_event_reminder_isValid;

    m_following_isValid = ::OpenAPI::fromJsonValue(m_following, json[QString("following")]);
    m_following_isSet = !json[QString("following")].isNull() && m_following_isValid;

    m_following_created_topic_isValid = ::OpenAPI::fromJsonValue(m_following_created_topic, json[QString("following_created_topic")]);
    m_following_created_topic_isSet = !json[QString("following_created_topic")].isNull() && m_following_created_topic_isValid;

    m_following_replied_isValid = ::OpenAPI::fromJsonValue(m_following_replied, json[QString("following_replied")]);
    m_following_replied_isSet = !json[QString("following_replied")].isNull() && m_following_replied_isValid;

    m_granted_badge_isValid = ::OpenAPI::fromJsonValue(m_granted_badge, json[QString("granted_badge")]);
    m_granted_badge_isSet = !json[QString("granted_badge")].isNull() && m_granted_badge_isValid;

    m_group_mentioned_isValid = ::OpenAPI::fromJsonValue(m_group_mentioned, json[QString("group_mentioned")]);
    m_group_mentioned_isSet = !json[QString("group_mentioned")].isNull() && m_group_mentioned_isValid;

    m_group_message_summary_isValid = ::OpenAPI::fromJsonValue(m_group_message_summary, json[QString("group_message_summary")]);
    m_group_message_summary_isSet = !json[QString("group_message_summary")].isNull() && m_group_message_summary_isValid;

    m_invited_to_private_message_isValid = ::OpenAPI::fromJsonValue(m_invited_to_private_message, json[QString("invited_to_private_message")]);
    m_invited_to_private_message_isSet = !json[QString("invited_to_private_message")].isNull() && m_invited_to_private_message_isValid;

    m_invited_to_topic_isValid = ::OpenAPI::fromJsonValue(m_invited_to_topic, json[QString("invited_to_topic")]);
    m_invited_to_topic_isSet = !json[QString("invited_to_topic")].isNull() && m_invited_to_topic_isValid;

    m_invitee_accepted_isValid = ::OpenAPI::fromJsonValue(m_invitee_accepted, json[QString("invitee_accepted")]);
    m_invitee_accepted_isSet = !json[QString("invitee_accepted")].isNull() && m_invitee_accepted_isValid;

    m_liked_isValid = ::OpenAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_liked_consolidated_isValid = ::OpenAPI::fromJsonValue(m_liked_consolidated, json[QString("liked_consolidated")]);
    m_liked_consolidated_isSet = !json[QString("liked_consolidated")].isNull() && m_liked_consolidated_isValid;

    m_linked_isValid = ::OpenAPI::fromJsonValue(m_linked, json[QString("linked")]);
    m_linked_isSet = !json[QString("linked")].isNull() && m_linked_isValid;

    m_membership_request_accepted_isValid = ::OpenAPI::fromJsonValue(m_membership_request_accepted, json[QString("membership_request_accepted")]);
    m_membership_request_accepted_isSet = !json[QString("membership_request_accepted")].isNull() && m_membership_request_accepted_isValid;

    m_membership_request_consolidated_isValid = ::OpenAPI::fromJsonValue(m_membership_request_consolidated, json[QString("membership_request_consolidated")]);
    m_membership_request_consolidated_isSet = !json[QString("membership_request_consolidated")].isNull() && m_membership_request_consolidated_isValid;

    m_mentioned_isValid = ::OpenAPI::fromJsonValue(m_mentioned, json[QString("mentioned")]);
    m_mentioned_isSet = !json[QString("mentioned")].isNull() && m_mentioned_isValid;

    m_moved_post_isValid = ::OpenAPI::fromJsonValue(m_moved_post, json[QString("moved_post")]);
    m_moved_post_isSet = !json[QString("moved_post")].isNull() && m_moved_post_isValid;

    m_new_features_isValid = ::OpenAPI::fromJsonValue(m_new_features, json[QString("new_features")]);
    m_new_features_isSet = !json[QString("new_features")].isNull() && m_new_features_isValid;

    m_post_approved_isValid = ::OpenAPI::fromJsonValue(m_post_approved, json[QString("post_approved")]);
    m_post_approved_isSet = !json[QString("post_approved")].isNull() && m_post_approved_isValid;

    m_posted_isValid = ::OpenAPI::fromJsonValue(m_posted, json[QString("posted")]);
    m_posted_isSet = !json[QString("posted")].isNull() && m_posted_isValid;

    m_private_message_isValid = ::OpenAPI::fromJsonValue(m_private_message, json[QString("private_message")]);
    m_private_message_isSet = !json[QString("private_message")].isNull() && m_private_message_isValid;

    m_question_answer_user_commented_isValid = ::OpenAPI::fromJsonValue(m_question_answer_user_commented, json[QString("question_answer_user_commented")]);
    m_question_answer_user_commented_isSet = !json[QString("question_answer_user_commented")].isNull() && m_question_answer_user_commented_isValid;

    m_quoted_isValid = ::OpenAPI::fromJsonValue(m_quoted, json[QString("quoted")]);
    m_quoted_isSet = !json[QString("quoted")].isNull() && m_quoted_isValid;

    m_reaction_isValid = ::OpenAPI::fromJsonValue(m_reaction, json[QString("reaction")]);
    m_reaction_isSet = !json[QString("reaction")].isNull() && m_reaction_isValid;

    m_replied_isValid = ::OpenAPI::fromJsonValue(m_replied, json[QString("replied")]);
    m_replied_isSet = !json[QString("replied")].isNull() && m_replied_isValid;

    m_topic_reminder_isValid = ::OpenAPI::fromJsonValue(m_topic_reminder, json[QString("topic_reminder")]);
    m_topic_reminder_isSet = !json[QString("topic_reminder")].isNull() && m_topic_reminder_isValid;

    m_votes_released_isValid = ::OpenAPI::fromJsonValue(m_votes_released, json[QString("votes_released")]);
    m_votes_released_isSet = !json[QString("votes_released")].isNull() && m_votes_released_isValid;

    m_watching_category_or_tag_isValid = ::OpenAPI::fromJsonValue(m_watching_category_or_tag, json[QString("watching_category_or_tag")]);
    m_watching_category_or_tag_isSet = !json[QString("watching_category_or_tag")].isNull() && m_watching_category_or_tag_isValid;

    m_watching_first_post_isValid = ::OpenAPI::fromJsonValue(m_watching_first_post, json[QString("watching_first_post")]);
    m_watching_first_post_isSet = !json[QString("watching_first_post")].isNull() && m_watching_first_post_isValid;
}

QString OAIGetSite_200_response_notification_types::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSite_200_response_notification_types::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_isSet) {
        obj.insert(QString("assigned"), ::OpenAPI::toJsonValue(m_assigned));
    }
    if (m_bookmark_reminder_isSet) {
        obj.insert(QString("bookmark_reminder"), ::OpenAPI::toJsonValue(m_bookmark_reminder));
    }
    if (m_chat_group_mention_isSet) {
        obj.insert(QString("chat_group_mention"), ::OpenAPI::toJsonValue(m_chat_group_mention));
    }
    if (m_chat_invitation_isSet) {
        obj.insert(QString("chat_invitation"), ::OpenAPI::toJsonValue(m_chat_invitation));
    }
    if (m_chat_mention_isSet) {
        obj.insert(QString("chat_mention"), ::OpenAPI::toJsonValue(m_chat_mention));
    }
    if (m_chat_message_isSet) {
        obj.insert(QString("chat_message"), ::OpenAPI::toJsonValue(m_chat_message));
    }
    if (m_chat_quoted_isSet) {
        obj.insert(QString("chat_quoted"), ::OpenAPI::toJsonValue(m_chat_quoted));
    }
    if (m_circles_activity_isSet) {
        obj.insert(QString("circles_activity"), ::OpenAPI::toJsonValue(m_circles_activity));
    }
    if (m_code_review_commit_approved_isSet) {
        obj.insert(QString("code_review_commit_approved"), ::OpenAPI::toJsonValue(m_code_review_commit_approved));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_edited_isSet) {
        obj.insert(QString("edited"), ::OpenAPI::toJsonValue(m_edited));
    }
    if (m_event_invitation_isSet) {
        obj.insert(QString("event_invitation"), ::OpenAPI::toJsonValue(m_event_invitation));
    }
    if (m_event_reminder_isSet) {
        obj.insert(QString("event_reminder"), ::OpenAPI::toJsonValue(m_event_reminder));
    }
    if (m_following_isSet) {
        obj.insert(QString("following"), ::OpenAPI::toJsonValue(m_following));
    }
    if (m_following_created_topic_isSet) {
        obj.insert(QString("following_created_topic"), ::OpenAPI::toJsonValue(m_following_created_topic));
    }
    if (m_following_replied_isSet) {
        obj.insert(QString("following_replied"), ::OpenAPI::toJsonValue(m_following_replied));
    }
    if (m_granted_badge_isSet) {
        obj.insert(QString("granted_badge"), ::OpenAPI::toJsonValue(m_granted_badge));
    }
    if (m_group_mentioned_isSet) {
        obj.insert(QString("group_mentioned"), ::OpenAPI::toJsonValue(m_group_mentioned));
    }
    if (m_group_message_summary_isSet) {
        obj.insert(QString("group_message_summary"), ::OpenAPI::toJsonValue(m_group_message_summary));
    }
    if (m_invited_to_private_message_isSet) {
        obj.insert(QString("invited_to_private_message"), ::OpenAPI::toJsonValue(m_invited_to_private_message));
    }
    if (m_invited_to_topic_isSet) {
        obj.insert(QString("invited_to_topic"), ::OpenAPI::toJsonValue(m_invited_to_topic));
    }
    if (m_invitee_accepted_isSet) {
        obj.insert(QString("invitee_accepted"), ::OpenAPI::toJsonValue(m_invitee_accepted));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::OpenAPI::toJsonValue(m_liked));
    }
    if (m_liked_consolidated_isSet) {
        obj.insert(QString("liked_consolidated"), ::OpenAPI::toJsonValue(m_liked_consolidated));
    }
    if (m_linked_isSet) {
        obj.insert(QString("linked"), ::OpenAPI::toJsonValue(m_linked));
    }
    if (m_membership_request_accepted_isSet) {
        obj.insert(QString("membership_request_accepted"), ::OpenAPI::toJsonValue(m_membership_request_accepted));
    }
    if (m_membership_request_consolidated_isSet) {
        obj.insert(QString("membership_request_consolidated"), ::OpenAPI::toJsonValue(m_membership_request_consolidated));
    }
    if (m_mentioned_isSet) {
        obj.insert(QString("mentioned"), ::OpenAPI::toJsonValue(m_mentioned));
    }
    if (m_moved_post_isSet) {
        obj.insert(QString("moved_post"), ::OpenAPI::toJsonValue(m_moved_post));
    }
    if (m_new_features_isSet) {
        obj.insert(QString("new_features"), ::OpenAPI::toJsonValue(m_new_features));
    }
    if (m_post_approved_isSet) {
        obj.insert(QString("post_approved"), ::OpenAPI::toJsonValue(m_post_approved));
    }
    if (m_posted_isSet) {
        obj.insert(QString("posted"), ::OpenAPI::toJsonValue(m_posted));
    }
    if (m_private_message_isSet) {
        obj.insert(QString("private_message"), ::OpenAPI::toJsonValue(m_private_message));
    }
    if (m_question_answer_user_commented_isSet) {
        obj.insert(QString("question_answer_user_commented"), ::OpenAPI::toJsonValue(m_question_answer_user_commented));
    }
    if (m_quoted_isSet) {
        obj.insert(QString("quoted"), ::OpenAPI::toJsonValue(m_quoted));
    }
    if (m_reaction_isSet) {
        obj.insert(QString("reaction"), ::OpenAPI::toJsonValue(m_reaction));
    }
    if (m_replied_isSet) {
        obj.insert(QString("replied"), ::OpenAPI::toJsonValue(m_replied));
    }
    if (m_topic_reminder_isSet) {
        obj.insert(QString("topic_reminder"), ::OpenAPI::toJsonValue(m_topic_reminder));
    }
    if (m_votes_released_isSet) {
        obj.insert(QString("votes_released"), ::OpenAPI::toJsonValue(m_votes_released));
    }
    if (m_watching_category_or_tag_isSet) {
        obj.insert(QString("watching_category_or_tag"), ::OpenAPI::toJsonValue(m_watching_category_or_tag));
    }
    if (m_watching_first_post_isSet) {
        obj.insert(QString("watching_first_post"), ::OpenAPI::toJsonValue(m_watching_first_post));
    }
    return obj;
}

qint32 OAIGetSite_200_response_notification_types::getAssigned() const {
    return m_assigned;
}
void OAIGetSite_200_response_notification_types::setAssigned(const qint32 &assigned) {
    m_assigned = assigned;
    m_assigned_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_assigned_Set() const{
    return m_assigned_isSet;
}

bool OAIGetSite_200_response_notification_types::is_assigned_Valid() const{
    return m_assigned_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getBookmarkReminder() const {
    return m_bookmark_reminder;
}
void OAIGetSite_200_response_notification_types::setBookmarkReminder(const qint32 &bookmark_reminder) {
    m_bookmark_reminder = bookmark_reminder;
    m_bookmark_reminder_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_bookmark_reminder_Set() const{
    return m_bookmark_reminder_isSet;
}

bool OAIGetSite_200_response_notification_types::is_bookmark_reminder_Valid() const{
    return m_bookmark_reminder_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getChatGroupMention() const {
    return m_chat_group_mention;
}
void OAIGetSite_200_response_notification_types::setChatGroupMention(const qint32 &chat_group_mention) {
    m_chat_group_mention = chat_group_mention;
    m_chat_group_mention_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_chat_group_mention_Set() const{
    return m_chat_group_mention_isSet;
}

bool OAIGetSite_200_response_notification_types::is_chat_group_mention_Valid() const{
    return m_chat_group_mention_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getChatInvitation() const {
    return m_chat_invitation;
}
void OAIGetSite_200_response_notification_types::setChatInvitation(const qint32 &chat_invitation) {
    m_chat_invitation = chat_invitation;
    m_chat_invitation_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_chat_invitation_Set() const{
    return m_chat_invitation_isSet;
}

bool OAIGetSite_200_response_notification_types::is_chat_invitation_Valid() const{
    return m_chat_invitation_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getChatMention() const {
    return m_chat_mention;
}
void OAIGetSite_200_response_notification_types::setChatMention(const qint32 &chat_mention) {
    m_chat_mention = chat_mention;
    m_chat_mention_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_chat_mention_Set() const{
    return m_chat_mention_isSet;
}

bool OAIGetSite_200_response_notification_types::is_chat_mention_Valid() const{
    return m_chat_mention_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getChatMessage() const {
    return m_chat_message;
}
void OAIGetSite_200_response_notification_types::setChatMessage(const qint32 &chat_message) {
    m_chat_message = chat_message;
    m_chat_message_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_chat_message_Set() const{
    return m_chat_message_isSet;
}

bool OAIGetSite_200_response_notification_types::is_chat_message_Valid() const{
    return m_chat_message_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getChatQuoted() const {
    return m_chat_quoted;
}
void OAIGetSite_200_response_notification_types::setChatQuoted(const qint32 &chat_quoted) {
    m_chat_quoted = chat_quoted;
    m_chat_quoted_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_chat_quoted_Set() const{
    return m_chat_quoted_isSet;
}

bool OAIGetSite_200_response_notification_types::is_chat_quoted_Valid() const{
    return m_chat_quoted_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getCirclesActivity() const {
    return m_circles_activity;
}
void OAIGetSite_200_response_notification_types::setCirclesActivity(const qint32 &circles_activity) {
    m_circles_activity = circles_activity;
    m_circles_activity_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_circles_activity_Set() const{
    return m_circles_activity_isSet;
}

bool OAIGetSite_200_response_notification_types::is_circles_activity_Valid() const{
    return m_circles_activity_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getCodeReviewCommitApproved() const {
    return m_code_review_commit_approved;
}
void OAIGetSite_200_response_notification_types::setCodeReviewCommitApproved(const qint32 &code_review_commit_approved) {
    m_code_review_commit_approved = code_review_commit_approved;
    m_code_review_commit_approved_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_code_review_commit_approved_Set() const{
    return m_code_review_commit_approved_isSet;
}

bool OAIGetSite_200_response_notification_types::is_code_review_commit_approved_Valid() const{
    return m_code_review_commit_approved_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getCustom() const {
    return m_custom;
}
void OAIGetSite_200_response_notification_types::setCustom(const qint32 &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIGetSite_200_response_notification_types::is_custom_Valid() const{
    return m_custom_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getEdited() const {
    return m_edited;
}
void OAIGetSite_200_response_notification_types::setEdited(const qint32 &edited) {
    m_edited = edited;
    m_edited_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_edited_Set() const{
    return m_edited_isSet;
}

bool OAIGetSite_200_response_notification_types::is_edited_Valid() const{
    return m_edited_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getEventInvitation() const {
    return m_event_invitation;
}
void OAIGetSite_200_response_notification_types::setEventInvitation(const qint32 &event_invitation) {
    m_event_invitation = event_invitation;
    m_event_invitation_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_event_invitation_Set() const{
    return m_event_invitation_isSet;
}

bool OAIGetSite_200_response_notification_types::is_event_invitation_Valid() const{
    return m_event_invitation_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getEventReminder() const {
    return m_event_reminder;
}
void OAIGetSite_200_response_notification_types::setEventReminder(const qint32 &event_reminder) {
    m_event_reminder = event_reminder;
    m_event_reminder_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_event_reminder_Set() const{
    return m_event_reminder_isSet;
}

bool OAIGetSite_200_response_notification_types::is_event_reminder_Valid() const{
    return m_event_reminder_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getFollowing() const {
    return m_following;
}
void OAIGetSite_200_response_notification_types::setFollowing(const qint32 &following) {
    m_following = following;
    m_following_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_following_Set() const{
    return m_following_isSet;
}

bool OAIGetSite_200_response_notification_types::is_following_Valid() const{
    return m_following_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getFollowingCreatedTopic() const {
    return m_following_created_topic;
}
void OAIGetSite_200_response_notification_types::setFollowingCreatedTopic(const qint32 &following_created_topic) {
    m_following_created_topic = following_created_topic;
    m_following_created_topic_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_following_created_topic_Set() const{
    return m_following_created_topic_isSet;
}

bool OAIGetSite_200_response_notification_types::is_following_created_topic_Valid() const{
    return m_following_created_topic_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getFollowingReplied() const {
    return m_following_replied;
}
void OAIGetSite_200_response_notification_types::setFollowingReplied(const qint32 &following_replied) {
    m_following_replied = following_replied;
    m_following_replied_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_following_replied_Set() const{
    return m_following_replied_isSet;
}

bool OAIGetSite_200_response_notification_types::is_following_replied_Valid() const{
    return m_following_replied_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getGrantedBadge() const {
    return m_granted_badge;
}
void OAIGetSite_200_response_notification_types::setGrantedBadge(const qint32 &granted_badge) {
    m_granted_badge = granted_badge;
    m_granted_badge_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_granted_badge_Set() const{
    return m_granted_badge_isSet;
}

bool OAIGetSite_200_response_notification_types::is_granted_badge_Valid() const{
    return m_granted_badge_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getGroupMentioned() const {
    return m_group_mentioned;
}
void OAIGetSite_200_response_notification_types::setGroupMentioned(const qint32 &group_mentioned) {
    m_group_mentioned = group_mentioned;
    m_group_mentioned_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_group_mentioned_Set() const{
    return m_group_mentioned_isSet;
}

bool OAIGetSite_200_response_notification_types::is_group_mentioned_Valid() const{
    return m_group_mentioned_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getGroupMessageSummary() const {
    return m_group_message_summary;
}
void OAIGetSite_200_response_notification_types::setGroupMessageSummary(const qint32 &group_message_summary) {
    m_group_message_summary = group_message_summary;
    m_group_message_summary_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_group_message_summary_Set() const{
    return m_group_message_summary_isSet;
}

bool OAIGetSite_200_response_notification_types::is_group_message_summary_Valid() const{
    return m_group_message_summary_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getInvitedToPrivateMessage() const {
    return m_invited_to_private_message;
}
void OAIGetSite_200_response_notification_types::setInvitedToPrivateMessage(const qint32 &invited_to_private_message) {
    m_invited_to_private_message = invited_to_private_message;
    m_invited_to_private_message_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_invited_to_private_message_Set() const{
    return m_invited_to_private_message_isSet;
}

bool OAIGetSite_200_response_notification_types::is_invited_to_private_message_Valid() const{
    return m_invited_to_private_message_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getInvitedToTopic() const {
    return m_invited_to_topic;
}
void OAIGetSite_200_response_notification_types::setInvitedToTopic(const qint32 &invited_to_topic) {
    m_invited_to_topic = invited_to_topic;
    m_invited_to_topic_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_invited_to_topic_Set() const{
    return m_invited_to_topic_isSet;
}

bool OAIGetSite_200_response_notification_types::is_invited_to_topic_Valid() const{
    return m_invited_to_topic_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getInviteeAccepted() const {
    return m_invitee_accepted;
}
void OAIGetSite_200_response_notification_types::setInviteeAccepted(const qint32 &invitee_accepted) {
    m_invitee_accepted = invitee_accepted;
    m_invitee_accepted_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_invitee_accepted_Set() const{
    return m_invitee_accepted_isSet;
}

bool OAIGetSite_200_response_notification_types::is_invitee_accepted_Valid() const{
    return m_invitee_accepted_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getLiked() const {
    return m_liked;
}
void OAIGetSite_200_response_notification_types::setLiked(const qint32 &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_liked_Set() const{
    return m_liked_isSet;
}

bool OAIGetSite_200_response_notification_types::is_liked_Valid() const{
    return m_liked_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getLikedConsolidated() const {
    return m_liked_consolidated;
}
void OAIGetSite_200_response_notification_types::setLikedConsolidated(const qint32 &liked_consolidated) {
    m_liked_consolidated = liked_consolidated;
    m_liked_consolidated_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_liked_consolidated_Set() const{
    return m_liked_consolidated_isSet;
}

bool OAIGetSite_200_response_notification_types::is_liked_consolidated_Valid() const{
    return m_liked_consolidated_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getLinked() const {
    return m_linked;
}
void OAIGetSite_200_response_notification_types::setLinked(const qint32 &linked) {
    m_linked = linked;
    m_linked_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_linked_Set() const{
    return m_linked_isSet;
}

bool OAIGetSite_200_response_notification_types::is_linked_Valid() const{
    return m_linked_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getMembershipRequestAccepted() const {
    return m_membership_request_accepted;
}
void OAIGetSite_200_response_notification_types::setMembershipRequestAccepted(const qint32 &membership_request_accepted) {
    m_membership_request_accepted = membership_request_accepted;
    m_membership_request_accepted_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_membership_request_accepted_Set() const{
    return m_membership_request_accepted_isSet;
}

bool OAIGetSite_200_response_notification_types::is_membership_request_accepted_Valid() const{
    return m_membership_request_accepted_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getMembershipRequestConsolidated() const {
    return m_membership_request_consolidated;
}
void OAIGetSite_200_response_notification_types::setMembershipRequestConsolidated(const qint32 &membership_request_consolidated) {
    m_membership_request_consolidated = membership_request_consolidated;
    m_membership_request_consolidated_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_membership_request_consolidated_Set() const{
    return m_membership_request_consolidated_isSet;
}

bool OAIGetSite_200_response_notification_types::is_membership_request_consolidated_Valid() const{
    return m_membership_request_consolidated_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getMentioned() const {
    return m_mentioned;
}
void OAIGetSite_200_response_notification_types::setMentioned(const qint32 &mentioned) {
    m_mentioned = mentioned;
    m_mentioned_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_mentioned_Set() const{
    return m_mentioned_isSet;
}

bool OAIGetSite_200_response_notification_types::is_mentioned_Valid() const{
    return m_mentioned_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getMovedPost() const {
    return m_moved_post;
}
void OAIGetSite_200_response_notification_types::setMovedPost(const qint32 &moved_post) {
    m_moved_post = moved_post;
    m_moved_post_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_moved_post_Set() const{
    return m_moved_post_isSet;
}

bool OAIGetSite_200_response_notification_types::is_moved_post_Valid() const{
    return m_moved_post_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getNewFeatures() const {
    return m_new_features;
}
void OAIGetSite_200_response_notification_types::setNewFeatures(const qint32 &new_features) {
    m_new_features = new_features;
    m_new_features_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_new_features_Set() const{
    return m_new_features_isSet;
}

bool OAIGetSite_200_response_notification_types::is_new_features_Valid() const{
    return m_new_features_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getPostApproved() const {
    return m_post_approved;
}
void OAIGetSite_200_response_notification_types::setPostApproved(const qint32 &post_approved) {
    m_post_approved = post_approved;
    m_post_approved_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_post_approved_Set() const{
    return m_post_approved_isSet;
}

bool OAIGetSite_200_response_notification_types::is_post_approved_Valid() const{
    return m_post_approved_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getPosted() const {
    return m_posted;
}
void OAIGetSite_200_response_notification_types::setPosted(const qint32 &posted) {
    m_posted = posted;
    m_posted_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_posted_Set() const{
    return m_posted_isSet;
}

bool OAIGetSite_200_response_notification_types::is_posted_Valid() const{
    return m_posted_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getPrivateMessage() const {
    return m_private_message;
}
void OAIGetSite_200_response_notification_types::setPrivateMessage(const qint32 &private_message) {
    m_private_message = private_message;
    m_private_message_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_private_message_Set() const{
    return m_private_message_isSet;
}

bool OAIGetSite_200_response_notification_types::is_private_message_Valid() const{
    return m_private_message_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getQuestionAnswerUserCommented() const {
    return m_question_answer_user_commented;
}
void OAIGetSite_200_response_notification_types::setQuestionAnswerUserCommented(const qint32 &question_answer_user_commented) {
    m_question_answer_user_commented = question_answer_user_commented;
    m_question_answer_user_commented_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_question_answer_user_commented_Set() const{
    return m_question_answer_user_commented_isSet;
}

bool OAIGetSite_200_response_notification_types::is_question_answer_user_commented_Valid() const{
    return m_question_answer_user_commented_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getQuoted() const {
    return m_quoted;
}
void OAIGetSite_200_response_notification_types::setQuoted(const qint32 &quoted) {
    m_quoted = quoted;
    m_quoted_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_quoted_Set() const{
    return m_quoted_isSet;
}

bool OAIGetSite_200_response_notification_types::is_quoted_Valid() const{
    return m_quoted_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getReaction() const {
    return m_reaction;
}
void OAIGetSite_200_response_notification_types::setReaction(const qint32 &reaction) {
    m_reaction = reaction;
    m_reaction_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_reaction_Set() const{
    return m_reaction_isSet;
}

bool OAIGetSite_200_response_notification_types::is_reaction_Valid() const{
    return m_reaction_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getReplied() const {
    return m_replied;
}
void OAIGetSite_200_response_notification_types::setReplied(const qint32 &replied) {
    m_replied = replied;
    m_replied_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_replied_Set() const{
    return m_replied_isSet;
}

bool OAIGetSite_200_response_notification_types::is_replied_Valid() const{
    return m_replied_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getTopicReminder() const {
    return m_topic_reminder;
}
void OAIGetSite_200_response_notification_types::setTopicReminder(const qint32 &topic_reminder) {
    m_topic_reminder = topic_reminder;
    m_topic_reminder_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_topic_reminder_Set() const{
    return m_topic_reminder_isSet;
}

bool OAIGetSite_200_response_notification_types::is_topic_reminder_Valid() const{
    return m_topic_reminder_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getVotesReleased() const {
    return m_votes_released;
}
void OAIGetSite_200_response_notification_types::setVotesReleased(const qint32 &votes_released) {
    m_votes_released = votes_released;
    m_votes_released_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_votes_released_Set() const{
    return m_votes_released_isSet;
}

bool OAIGetSite_200_response_notification_types::is_votes_released_Valid() const{
    return m_votes_released_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getWatchingCategoryOrTag() const {
    return m_watching_category_or_tag;
}
void OAIGetSite_200_response_notification_types::setWatchingCategoryOrTag(const qint32 &watching_category_or_tag) {
    m_watching_category_or_tag = watching_category_or_tag;
    m_watching_category_or_tag_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_watching_category_or_tag_Set() const{
    return m_watching_category_or_tag_isSet;
}

bool OAIGetSite_200_response_notification_types::is_watching_category_or_tag_Valid() const{
    return m_watching_category_or_tag_isValid;
}

qint32 OAIGetSite_200_response_notification_types::getWatchingFirstPost() const {
    return m_watching_first_post;
}
void OAIGetSite_200_response_notification_types::setWatchingFirstPost(const qint32 &watching_first_post) {
    m_watching_first_post = watching_first_post;
    m_watching_first_post_isSet = true;
}

bool OAIGetSite_200_response_notification_types::is_watching_first_post_Set() const{
    return m_watching_first_post_isSet;
}

bool OAIGetSite_200_response_notification_types::is_watching_first_post_Valid() const{
    return m_watching_first_post_isValid;
}

bool OAIGetSite_200_response_notification_types::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmark_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_group_mention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_invitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_mention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_quoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circles_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_review_commit_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_invitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_created_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_replied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granted_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_mentioned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_message_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_to_private_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_to_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitee_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_consolidated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_request_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_request_consolidated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moved_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_answer_user_commented_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_category_or_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_first_post_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSite_200_response_notification_types::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bookmark_reminder_isValid && m_chat_group_mention_isValid && m_chat_invitation_isValid && m_chat_mention_isValid && m_chat_message_isValid && m_code_review_commit_approved_isValid && m_custom_isValid && m_edited_isValid && m_event_invitation_isValid && m_event_reminder_isValid && m_granted_badge_isValid && m_group_mentioned_isValid && m_group_message_summary_isValid && m_invited_to_private_message_isValid && m_invited_to_topic_isValid && m_invitee_accepted_isValid && m_liked_isValid && m_liked_consolidated_isValid && m_linked_isValid && m_membership_request_accepted_isValid && m_membership_request_consolidated_isValid && m_mentioned_isValid && m_moved_post_isValid && m_post_approved_isValid && m_posted_isValid && m_private_message_isValid && m_quoted_isValid && m_reaction_isValid && m_replied_isValid && m_topic_reminder_isValid && m_votes_released_isValid && m_watching_category_or_tag_isValid && m_watching_first_post_isValid && true;
}

} // namespace OpenAPI
