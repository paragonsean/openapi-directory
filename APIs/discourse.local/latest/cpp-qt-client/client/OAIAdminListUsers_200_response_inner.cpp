/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminListUsers_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminListUsers_200_response_inner::OAIAdminListUsers_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminListUsers_200_response_inner::OAIAdminListUsers_200_response_inner() {
    this->initializeModel();
}

OAIAdminListUsers_200_response_inner::~OAIAdminListUsers_200_response_inner() {}

void OAIAdminListUsers_200_response_inner::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_avatar_template_isSet = false;
    m_avatar_template_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_at_age_isSet = false;
    m_created_at_age_isValid = false;

    m_days_visited_isSet = false;
    m_days_visited_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_flag_level_isSet = false;
    m_flag_level_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_emailed_age_isSet = false;
    m_last_emailed_age_isValid = false;

    m_last_emailed_at_isSet = false;
    m_last_emailed_at_isValid = false;

    m_last_seen_age_isSet = false;
    m_last_seen_age_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_manual_locked_trust_level_isSet = false;
    m_manual_locked_trust_level_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_posts_read_count_isSet = false;
    m_posts_read_count_isValid = false;

    m_secondary_emails_isSet = false;
    m_secondary_emails_isValid = false;

    m_staged_isSet = false;
    m_staged_isValid = false;

    m_time_read_isSet = false;
    m_time_read_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topics_entered_isSet = false;
    m_topics_entered_isValid = false;

    m_trust_level_isSet = false;
    m_trust_level_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIAdminListUsers_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminListUsers_200_response_inner::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_avatar_template, json[QString("avatar_template")]);
    m_avatar_template_isSet = !json[QString("avatar_template")].isNull() && m_avatar_template_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_at_age_isValid = ::OpenAPI::fromJsonValue(m_created_at_age, json[QString("created_at_age")]);
    m_created_at_age_isSet = !json[QString("created_at_age")].isNull() && m_created_at_age_isValid;

    m_days_visited_isValid = ::OpenAPI::fromJsonValue(m_days_visited, json[QString("days_visited")]);
    m_days_visited_isSet = !json[QString("days_visited")].isNull() && m_days_visited_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_flag_level_isValid = ::OpenAPI::fromJsonValue(m_flag_level, json[QString("flag_level")]);
    m_flag_level_isSet = !json[QString("flag_level")].isNull() && m_flag_level_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_emailed_age_isValid = ::OpenAPI::fromJsonValue(m_last_emailed_age, json[QString("last_emailed_age")]);
    m_last_emailed_age_isSet = !json[QString("last_emailed_age")].isNull() && m_last_emailed_age_isValid;

    m_last_emailed_at_isValid = ::OpenAPI::fromJsonValue(m_last_emailed_at, json[QString("last_emailed_at")]);
    m_last_emailed_at_isSet = !json[QString("last_emailed_at")].isNull() && m_last_emailed_at_isValid;

    m_last_seen_age_isValid = ::OpenAPI::fromJsonValue(m_last_seen_age, json[QString("last_seen_age")]);
    m_last_seen_age_isSet = !json[QString("last_seen_age")].isNull() && m_last_seen_age_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_manual_locked_trust_level_isValid = ::OpenAPI::fromJsonValue(m_manual_locked_trust_level, json[QString("manual_locked_trust_level")]);
    m_manual_locked_trust_level_isSet = !json[QString("manual_locked_trust_level")].isNull() && m_manual_locked_trust_level_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_count_isValid = ::OpenAPI::fromJsonValue(m_post_count, json[QString("post_count")]);
    m_post_count_isSet = !json[QString("post_count")].isNull() && m_post_count_isValid;

    m_posts_read_count_isValid = ::OpenAPI::fromJsonValue(m_posts_read_count, json[QString("posts_read_count")]);
    m_posts_read_count_isSet = !json[QString("posts_read_count")].isNull() && m_posts_read_count_isValid;

    m_secondary_emails_isValid = ::OpenAPI::fromJsonValue(m_secondary_emails, json[QString("secondary_emails")]);
    m_secondary_emails_isSet = !json[QString("secondary_emails")].isNull() && m_secondary_emails_isValid;

    m_staged_isValid = ::OpenAPI::fromJsonValue(m_staged, json[QString("staged")]);
    m_staged_isSet = !json[QString("staged")].isNull() && m_staged_isValid;

    m_time_read_isValid = ::OpenAPI::fromJsonValue(m_time_read, json[QString("time_read")]);
    m_time_read_isSet = !json[QString("time_read")].isNull() && m_time_read_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topics_entered_isValid = ::OpenAPI::fromJsonValue(m_topics_entered, json[QString("topics_entered")]);
    m_topics_entered_isSet = !json[QString("topics_entered")].isNull() && m_topics_entered_isValid;

    m_trust_level_isValid = ::OpenAPI::fromJsonValue(m_trust_level, json[QString("trust_level")]);
    m_trust_level_isSet = !json[QString("trust_level")].isNull() && m_trust_level_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIAdminListUsers_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminListUsers_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_avatar_template_isSet) {
        obj.insert(QString("avatar_template"), ::OpenAPI::toJsonValue(m_avatar_template));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_at_age_isSet) {
        obj.insert(QString("created_at_age"), ::OpenAPI::toJsonValue(m_created_at_age));
    }
    if (m_days_visited_isSet) {
        obj.insert(QString("days_visited"), ::OpenAPI::toJsonValue(m_days_visited));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_flag_level_isSet) {
        obj.insert(QString("flag_level"), ::OpenAPI::toJsonValue(m_flag_level));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_emailed_age_isSet) {
        obj.insert(QString("last_emailed_age"), ::OpenAPI::toJsonValue(m_last_emailed_age));
    }
    if (m_last_emailed_at_isSet) {
        obj.insert(QString("last_emailed_at"), ::OpenAPI::toJsonValue(m_last_emailed_at));
    }
    if (m_last_seen_age_isSet) {
        obj.insert(QString("last_seen_age"), ::OpenAPI::toJsonValue(m_last_seen_age));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_manual_locked_trust_level_isSet) {
        obj.insert(QString("manual_locked_trust_level"), ::OpenAPI::toJsonValue(m_manual_locked_trust_level));
    }
    if (m_moderator_isSet) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_count_isSet) {
        obj.insert(QString("post_count"), ::OpenAPI::toJsonValue(m_post_count));
    }
    if (m_posts_read_count_isSet) {
        obj.insert(QString("posts_read_count"), ::OpenAPI::toJsonValue(m_posts_read_count));
    }
    if (m_secondary_emails.size() > 0) {
        obj.insert(QString("secondary_emails"), ::OpenAPI::toJsonValue(m_secondary_emails));
    }
    if (m_staged_isSet) {
        obj.insert(QString("staged"), ::OpenAPI::toJsonValue(m_staged));
    }
    if (m_time_read_isSet) {
        obj.insert(QString("time_read"), ::OpenAPI::toJsonValue(m_time_read));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topics_entered_isSet) {
        obj.insert(QString("topics_entered"), ::OpenAPI::toJsonValue(m_topics_entered));
    }
    if (m_trust_level_isSet) {
        obj.insert(QString("trust_level"), ::OpenAPI::toJsonValue(m_trust_level));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIAdminListUsers_200_response_inner::isActive() const {
    return m_active;
}
void OAIAdminListUsers_200_response_inner::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIAdminListUsers_200_response_inner::isAdmin() const {
    return m_admin;
}
void OAIAdminListUsers_200_response_inner::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIAdminListUsers_200_response_inner::getAvatarTemplate() const {
    return m_avatar_template;
}
void OAIAdminListUsers_200_response_inner::setAvatarTemplate(const QString &avatar_template) {
    m_avatar_template = avatar_template;
    m_avatar_template_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_avatar_template_Set() const{
    return m_avatar_template_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_avatar_template_Valid() const{
    return m_avatar_template_isValid;
}

QString OAIAdminListUsers_200_response_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIAdminListUsers_200_response_inner::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

double OAIAdminListUsers_200_response_inner::getCreatedAtAge() const {
    return m_created_at_age;
}
void OAIAdminListUsers_200_response_inner::setCreatedAtAge(const double &created_at_age) {
    m_created_at_age = created_at_age;
    m_created_at_age_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_created_at_age_Set() const{
    return m_created_at_age_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_created_at_age_Valid() const{
    return m_created_at_age_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getDaysVisited() const {
    return m_days_visited;
}
void OAIAdminListUsers_200_response_inner::setDaysVisited(const qint32 &days_visited) {
    m_days_visited = days_visited;
    m_days_visited_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_days_visited_Set() const{
    return m_days_visited_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_days_visited_Valid() const{
    return m_days_visited_isValid;
}

QString OAIAdminListUsers_200_response_inner::getEmail() const {
    return m_email;
}
void OAIAdminListUsers_200_response_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getFlagLevel() const {
    return m_flag_level;
}
void OAIAdminListUsers_200_response_inner::setFlagLevel(const qint32 &flag_level) {
    m_flag_level = flag_level;
    m_flag_level_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_flag_level_Set() const{
    return m_flag_level_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_flag_level_Valid() const{
    return m_flag_level_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getId() const {
    return m_id;
}
void OAIAdminListUsers_200_response_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

double OAIAdminListUsers_200_response_inner::getLastEmailedAge() const {
    return m_last_emailed_age;
}
void OAIAdminListUsers_200_response_inner::setLastEmailedAge(const double &last_emailed_age) {
    m_last_emailed_age = last_emailed_age;
    m_last_emailed_age_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_last_emailed_age_Set() const{
    return m_last_emailed_age_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_last_emailed_age_Valid() const{
    return m_last_emailed_age_isValid;
}

QString OAIAdminListUsers_200_response_inner::getLastEmailedAt() const {
    return m_last_emailed_at;
}
void OAIAdminListUsers_200_response_inner::setLastEmailedAt(const QString &last_emailed_at) {
    m_last_emailed_at = last_emailed_at;
    m_last_emailed_at_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_last_emailed_at_Set() const{
    return m_last_emailed_at_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_last_emailed_at_Valid() const{
    return m_last_emailed_at_isValid;
}

double OAIAdminListUsers_200_response_inner::getLastSeenAge() const {
    return m_last_seen_age;
}
void OAIAdminListUsers_200_response_inner::setLastSeenAge(const double &last_seen_age) {
    m_last_seen_age = last_seen_age;
    m_last_seen_age_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_last_seen_age_Set() const{
    return m_last_seen_age_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_last_seen_age_Valid() const{
    return m_last_seen_age_isValid;
}

QString OAIAdminListUsers_200_response_inner::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIAdminListUsers_200_response_inner::setLastSeenAt(const QString &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIAdminListUsers_200_response_inner::getManualLockedTrustLevel() const {
    return m_manual_locked_trust_level;
}
void OAIAdminListUsers_200_response_inner::setManualLockedTrustLevel(const QString &manual_locked_trust_level) {
    m_manual_locked_trust_level = manual_locked_trust_level;
    m_manual_locked_trust_level_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_manual_locked_trust_level_Set() const{
    return m_manual_locked_trust_level_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_manual_locked_trust_level_Valid() const{
    return m_manual_locked_trust_level_isValid;
}

bool OAIAdminListUsers_200_response_inner::isModerator() const {
    return m_moderator;
}
void OAIAdminListUsers_200_response_inner::setModerator(const bool &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_moderator_Valid() const{
    return m_moderator_isValid;
}

QString OAIAdminListUsers_200_response_inner::getName() const {
    return m_name;
}
void OAIAdminListUsers_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getPostCount() const {
    return m_post_count;
}
void OAIAdminListUsers_200_response_inner::setPostCount(const qint32 &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_post_count_Valid() const{
    return m_post_count_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getPostsReadCount() const {
    return m_posts_read_count;
}
void OAIAdminListUsers_200_response_inner::setPostsReadCount(const qint32 &posts_read_count) {
    m_posts_read_count = posts_read_count;
    m_posts_read_count_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_posts_read_count_Set() const{
    return m_posts_read_count_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_posts_read_count_Valid() const{
    return m_posts_read_count_isValid;
}

QList<QJsonValue> OAIAdminListUsers_200_response_inner::getSecondaryEmails() const {
    return m_secondary_emails;
}
void OAIAdminListUsers_200_response_inner::setSecondaryEmails(const QList<QJsonValue> &secondary_emails) {
    m_secondary_emails = secondary_emails;
    m_secondary_emails_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_secondary_emails_Set() const{
    return m_secondary_emails_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_secondary_emails_Valid() const{
    return m_secondary_emails_isValid;
}

bool OAIAdminListUsers_200_response_inner::isStaged() const {
    return m_staged;
}
void OAIAdminListUsers_200_response_inner::setStaged(const bool &staged) {
    m_staged = staged;
    m_staged_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_staged_Set() const{
    return m_staged_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_staged_Valid() const{
    return m_staged_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getTimeRead() const {
    return m_time_read;
}
void OAIAdminListUsers_200_response_inner::setTimeRead(const qint32 &time_read) {
    m_time_read = time_read;
    m_time_read_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_time_read_Set() const{
    return m_time_read_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_time_read_Valid() const{
    return m_time_read_isValid;
}

QString OAIAdminListUsers_200_response_inner::getTitle() const {
    return m_title;
}
void OAIAdminListUsers_200_response_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getTopicsEntered() const {
    return m_topics_entered;
}
void OAIAdminListUsers_200_response_inner::setTopicsEntered(const qint32 &topics_entered) {
    m_topics_entered = topics_entered;
    m_topics_entered_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_topics_entered_Set() const{
    return m_topics_entered_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_topics_entered_Valid() const{
    return m_topics_entered_isValid;
}

qint32 OAIAdminListUsers_200_response_inner::getTrustLevel() const {
    return m_trust_level;
}
void OAIAdminListUsers_200_response_inner::setTrustLevel(const qint32 &trust_level) {
    m_trust_level = trust_level;
    m_trust_level_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_trust_level_Set() const{
    return m_trust_level_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_trust_level_Valid() const{
    return m_trust_level_isValid;
}

QString OAIAdminListUsers_200_response_inner::getUsername() const {
    return m_username;
}
void OAIAdminListUsers_200_response_inner::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAdminListUsers_200_response_inner::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAdminListUsers_200_response_inner::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIAdminListUsers_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_visited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_emailed_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_emailed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_locked_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts_read_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_staged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_entered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminListUsers_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_admin_isValid && m_avatar_template_isValid && m_created_at_isValid && m_created_at_age_isValid && m_days_visited_isValid && m_flag_level_isValid && m_id_isValid && m_last_emailed_age_isValid && m_last_emailed_at_isValid && m_last_seen_age_isValid && m_last_seen_at_isValid && m_manual_locked_trust_level_isValid && m_moderator_isValid && m_name_isValid && m_post_count_isValid && m_posts_read_count_isValid && m_staged_isValid && m_time_read_isValid && m_title_isValid && m_topics_entered_isValid && m_trust_level_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
