/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminGetUser_200_response_tl3_requirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminGetUser_200_response_tl3_requirements::OAIAdminGetUser_200_response_tl3_requirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminGetUser_200_response_tl3_requirements::OAIAdminGetUser_200_response_tl3_requirements() {
    this->initializeModel();
}

OAIAdminGetUser_200_response_tl3_requirements::~OAIAdminGetUser_200_response_tl3_requirements() {}

void OAIAdminGetUser_200_response_tl3_requirements::initializeModel() {

    m_days_visited_isSet = false;
    m_days_visited_isValid = false;

    m_max_flagged_by_users_isSet = false;
    m_max_flagged_by_users_isValid = false;

    m_max_flagged_posts_isSet = false;
    m_max_flagged_posts_isValid = false;

    m_min_days_visited_isSet = false;
    m_min_days_visited_isValid = false;

    m_min_likes_given_isSet = false;
    m_min_likes_given_isValid = false;

    m_min_likes_received_isSet = false;
    m_min_likes_received_isValid = false;

    m_min_likes_received_days_isSet = false;
    m_min_likes_received_days_isValid = false;

    m_min_likes_received_users_isSet = false;
    m_min_likes_received_users_isValid = false;

    m_min_posts_read_isSet = false;
    m_min_posts_read_isValid = false;

    m_min_posts_read_all_time_isSet = false;
    m_min_posts_read_all_time_isValid = false;

    m_min_topics_replied_to_isSet = false;
    m_min_topics_replied_to_isValid = false;

    m_min_topics_viewed_isSet = false;
    m_min_topics_viewed_isValid = false;

    m_min_topics_viewed_all_time_isSet = false;
    m_min_topics_viewed_all_time_isValid = false;

    m_num_flagged_by_users_isSet = false;
    m_num_flagged_by_users_isValid = false;

    m_num_flagged_posts_isSet = false;
    m_num_flagged_posts_isValid = false;

    m_num_likes_given_isSet = false;
    m_num_likes_given_isValid = false;

    m_num_likes_received_isSet = false;
    m_num_likes_received_isValid = false;

    m_num_likes_received_days_isSet = false;
    m_num_likes_received_days_isValid = false;

    m_num_likes_received_users_isSet = false;
    m_num_likes_received_users_isValid = false;

    m_num_topics_replied_to_isSet = false;
    m_num_topics_replied_to_isValid = false;

    m_on_grace_period_isSet = false;
    m_on_grace_period_isValid = false;

    m_penalty_counts_isSet = false;
    m_penalty_counts_isValid = false;

    m_posts_read_isSet = false;
    m_posts_read_isValid = false;

    m_posts_read_all_time_isSet = false;
    m_posts_read_all_time_isValid = false;

    m_requirements_lost_isSet = false;
    m_requirements_lost_isValid = false;

    m_requirements_met_isSet = false;
    m_requirements_met_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_topics_viewed_isSet = false;
    m_topics_viewed_isValid = false;

    m_topics_viewed_all_time_isSet = false;
    m_topics_viewed_all_time_isValid = false;

    m_trust_level_locked_isSet = false;
    m_trust_level_locked_isValid = false;
}

void OAIAdminGetUser_200_response_tl3_requirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminGetUser_200_response_tl3_requirements::fromJsonObject(QJsonObject json) {

    m_days_visited_isValid = ::OpenAPI::fromJsonValue(m_days_visited, json[QString("days_visited")]);
    m_days_visited_isSet = !json[QString("days_visited")].isNull() && m_days_visited_isValid;

    m_max_flagged_by_users_isValid = ::OpenAPI::fromJsonValue(m_max_flagged_by_users, json[QString("max_flagged_by_users")]);
    m_max_flagged_by_users_isSet = !json[QString("max_flagged_by_users")].isNull() && m_max_flagged_by_users_isValid;

    m_max_flagged_posts_isValid = ::OpenAPI::fromJsonValue(m_max_flagged_posts, json[QString("max_flagged_posts")]);
    m_max_flagged_posts_isSet = !json[QString("max_flagged_posts")].isNull() && m_max_flagged_posts_isValid;

    m_min_days_visited_isValid = ::OpenAPI::fromJsonValue(m_min_days_visited, json[QString("min_days_visited")]);
    m_min_days_visited_isSet = !json[QString("min_days_visited")].isNull() && m_min_days_visited_isValid;

    m_min_likes_given_isValid = ::OpenAPI::fromJsonValue(m_min_likes_given, json[QString("min_likes_given")]);
    m_min_likes_given_isSet = !json[QString("min_likes_given")].isNull() && m_min_likes_given_isValid;

    m_min_likes_received_isValid = ::OpenAPI::fromJsonValue(m_min_likes_received, json[QString("min_likes_received")]);
    m_min_likes_received_isSet = !json[QString("min_likes_received")].isNull() && m_min_likes_received_isValid;

    m_min_likes_received_days_isValid = ::OpenAPI::fromJsonValue(m_min_likes_received_days, json[QString("min_likes_received_days")]);
    m_min_likes_received_days_isSet = !json[QString("min_likes_received_days")].isNull() && m_min_likes_received_days_isValid;

    m_min_likes_received_users_isValid = ::OpenAPI::fromJsonValue(m_min_likes_received_users, json[QString("min_likes_received_users")]);
    m_min_likes_received_users_isSet = !json[QString("min_likes_received_users")].isNull() && m_min_likes_received_users_isValid;

    m_min_posts_read_isValid = ::OpenAPI::fromJsonValue(m_min_posts_read, json[QString("min_posts_read")]);
    m_min_posts_read_isSet = !json[QString("min_posts_read")].isNull() && m_min_posts_read_isValid;

    m_min_posts_read_all_time_isValid = ::OpenAPI::fromJsonValue(m_min_posts_read_all_time, json[QString("min_posts_read_all_time")]);
    m_min_posts_read_all_time_isSet = !json[QString("min_posts_read_all_time")].isNull() && m_min_posts_read_all_time_isValid;

    m_min_topics_replied_to_isValid = ::OpenAPI::fromJsonValue(m_min_topics_replied_to, json[QString("min_topics_replied_to")]);
    m_min_topics_replied_to_isSet = !json[QString("min_topics_replied_to")].isNull() && m_min_topics_replied_to_isValid;

    m_min_topics_viewed_isValid = ::OpenAPI::fromJsonValue(m_min_topics_viewed, json[QString("min_topics_viewed")]);
    m_min_topics_viewed_isSet = !json[QString("min_topics_viewed")].isNull() && m_min_topics_viewed_isValid;

    m_min_topics_viewed_all_time_isValid = ::OpenAPI::fromJsonValue(m_min_topics_viewed_all_time, json[QString("min_topics_viewed_all_time")]);
    m_min_topics_viewed_all_time_isSet = !json[QString("min_topics_viewed_all_time")].isNull() && m_min_topics_viewed_all_time_isValid;

    m_num_flagged_by_users_isValid = ::OpenAPI::fromJsonValue(m_num_flagged_by_users, json[QString("num_flagged_by_users")]);
    m_num_flagged_by_users_isSet = !json[QString("num_flagged_by_users")].isNull() && m_num_flagged_by_users_isValid;

    m_num_flagged_posts_isValid = ::OpenAPI::fromJsonValue(m_num_flagged_posts, json[QString("num_flagged_posts")]);
    m_num_flagged_posts_isSet = !json[QString("num_flagged_posts")].isNull() && m_num_flagged_posts_isValid;

    m_num_likes_given_isValid = ::OpenAPI::fromJsonValue(m_num_likes_given, json[QString("num_likes_given")]);
    m_num_likes_given_isSet = !json[QString("num_likes_given")].isNull() && m_num_likes_given_isValid;

    m_num_likes_received_isValid = ::OpenAPI::fromJsonValue(m_num_likes_received, json[QString("num_likes_received")]);
    m_num_likes_received_isSet = !json[QString("num_likes_received")].isNull() && m_num_likes_received_isValid;

    m_num_likes_received_days_isValid = ::OpenAPI::fromJsonValue(m_num_likes_received_days, json[QString("num_likes_received_days")]);
    m_num_likes_received_days_isSet = !json[QString("num_likes_received_days")].isNull() && m_num_likes_received_days_isValid;

    m_num_likes_received_users_isValid = ::OpenAPI::fromJsonValue(m_num_likes_received_users, json[QString("num_likes_received_users")]);
    m_num_likes_received_users_isSet = !json[QString("num_likes_received_users")].isNull() && m_num_likes_received_users_isValid;

    m_num_topics_replied_to_isValid = ::OpenAPI::fromJsonValue(m_num_topics_replied_to, json[QString("num_topics_replied_to")]);
    m_num_topics_replied_to_isSet = !json[QString("num_topics_replied_to")].isNull() && m_num_topics_replied_to_isValid;

    m_on_grace_period_isValid = ::OpenAPI::fromJsonValue(m_on_grace_period, json[QString("on_grace_period")]);
    m_on_grace_period_isSet = !json[QString("on_grace_period")].isNull() && m_on_grace_period_isValid;

    m_penalty_counts_isValid = ::OpenAPI::fromJsonValue(m_penalty_counts, json[QString("penalty_counts")]);
    m_penalty_counts_isSet = !json[QString("penalty_counts")].isNull() && m_penalty_counts_isValid;

    m_posts_read_isValid = ::OpenAPI::fromJsonValue(m_posts_read, json[QString("posts_read")]);
    m_posts_read_isSet = !json[QString("posts_read")].isNull() && m_posts_read_isValid;

    m_posts_read_all_time_isValid = ::OpenAPI::fromJsonValue(m_posts_read_all_time, json[QString("posts_read_all_time")]);
    m_posts_read_all_time_isSet = !json[QString("posts_read_all_time")].isNull() && m_posts_read_all_time_isValid;

    m_requirements_lost_isValid = ::OpenAPI::fromJsonValue(m_requirements_lost, json[QString("requirements_lost")]);
    m_requirements_lost_isSet = !json[QString("requirements_lost")].isNull() && m_requirements_lost_isValid;

    m_requirements_met_isValid = ::OpenAPI::fromJsonValue(m_requirements_met, json[QString("requirements_met")]);
    m_requirements_met_isSet = !json[QString("requirements_met")].isNull() && m_requirements_met_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("time_period")]);
    m_time_period_isSet = !json[QString("time_period")].isNull() && m_time_period_isValid;

    m_topics_viewed_isValid = ::OpenAPI::fromJsonValue(m_topics_viewed, json[QString("topics_viewed")]);
    m_topics_viewed_isSet = !json[QString("topics_viewed")].isNull() && m_topics_viewed_isValid;

    m_topics_viewed_all_time_isValid = ::OpenAPI::fromJsonValue(m_topics_viewed_all_time, json[QString("topics_viewed_all_time")]);
    m_topics_viewed_all_time_isSet = !json[QString("topics_viewed_all_time")].isNull() && m_topics_viewed_all_time_isValid;

    m_trust_level_locked_isValid = ::OpenAPI::fromJsonValue(m_trust_level_locked, json[QString("trust_level_locked")]);
    m_trust_level_locked_isSet = !json[QString("trust_level_locked")].isNull() && m_trust_level_locked_isValid;
}

QString OAIAdminGetUser_200_response_tl3_requirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminGetUser_200_response_tl3_requirements::asJsonObject() const {
    QJsonObject obj;
    if (m_days_visited_isSet) {
        obj.insert(QString("days_visited"), ::OpenAPI::toJsonValue(m_days_visited));
    }
    if (m_max_flagged_by_users_isSet) {
        obj.insert(QString("max_flagged_by_users"), ::OpenAPI::toJsonValue(m_max_flagged_by_users));
    }
    if (m_max_flagged_posts_isSet) {
        obj.insert(QString("max_flagged_posts"), ::OpenAPI::toJsonValue(m_max_flagged_posts));
    }
    if (m_min_days_visited_isSet) {
        obj.insert(QString("min_days_visited"), ::OpenAPI::toJsonValue(m_min_days_visited));
    }
    if (m_min_likes_given_isSet) {
        obj.insert(QString("min_likes_given"), ::OpenAPI::toJsonValue(m_min_likes_given));
    }
    if (m_min_likes_received_isSet) {
        obj.insert(QString("min_likes_received"), ::OpenAPI::toJsonValue(m_min_likes_received));
    }
    if (m_min_likes_received_days_isSet) {
        obj.insert(QString("min_likes_received_days"), ::OpenAPI::toJsonValue(m_min_likes_received_days));
    }
    if (m_min_likes_received_users_isSet) {
        obj.insert(QString("min_likes_received_users"), ::OpenAPI::toJsonValue(m_min_likes_received_users));
    }
    if (m_min_posts_read_isSet) {
        obj.insert(QString("min_posts_read"), ::OpenAPI::toJsonValue(m_min_posts_read));
    }
    if (m_min_posts_read_all_time_isSet) {
        obj.insert(QString("min_posts_read_all_time"), ::OpenAPI::toJsonValue(m_min_posts_read_all_time));
    }
    if (m_min_topics_replied_to_isSet) {
        obj.insert(QString("min_topics_replied_to"), ::OpenAPI::toJsonValue(m_min_topics_replied_to));
    }
    if (m_min_topics_viewed_isSet) {
        obj.insert(QString("min_topics_viewed"), ::OpenAPI::toJsonValue(m_min_topics_viewed));
    }
    if (m_min_topics_viewed_all_time_isSet) {
        obj.insert(QString("min_topics_viewed_all_time"), ::OpenAPI::toJsonValue(m_min_topics_viewed_all_time));
    }
    if (m_num_flagged_by_users_isSet) {
        obj.insert(QString("num_flagged_by_users"), ::OpenAPI::toJsonValue(m_num_flagged_by_users));
    }
    if (m_num_flagged_posts_isSet) {
        obj.insert(QString("num_flagged_posts"), ::OpenAPI::toJsonValue(m_num_flagged_posts));
    }
    if (m_num_likes_given_isSet) {
        obj.insert(QString("num_likes_given"), ::OpenAPI::toJsonValue(m_num_likes_given));
    }
    if (m_num_likes_received_isSet) {
        obj.insert(QString("num_likes_received"), ::OpenAPI::toJsonValue(m_num_likes_received));
    }
    if (m_num_likes_received_days_isSet) {
        obj.insert(QString("num_likes_received_days"), ::OpenAPI::toJsonValue(m_num_likes_received_days));
    }
    if (m_num_likes_received_users_isSet) {
        obj.insert(QString("num_likes_received_users"), ::OpenAPI::toJsonValue(m_num_likes_received_users));
    }
    if (m_num_topics_replied_to_isSet) {
        obj.insert(QString("num_topics_replied_to"), ::OpenAPI::toJsonValue(m_num_topics_replied_to));
    }
    if (m_on_grace_period_isSet) {
        obj.insert(QString("on_grace_period"), ::OpenAPI::toJsonValue(m_on_grace_period));
    }
    if (m_penalty_counts.isSet()) {
        obj.insert(QString("penalty_counts"), ::OpenAPI::toJsonValue(m_penalty_counts));
    }
    if (m_posts_read_isSet) {
        obj.insert(QString("posts_read"), ::OpenAPI::toJsonValue(m_posts_read));
    }
    if (m_posts_read_all_time_isSet) {
        obj.insert(QString("posts_read_all_time"), ::OpenAPI::toJsonValue(m_posts_read_all_time));
    }
    if (m_requirements_lost_isSet) {
        obj.insert(QString("requirements_lost"), ::OpenAPI::toJsonValue(m_requirements_lost));
    }
    if (m_requirements_met_isSet) {
        obj.insert(QString("requirements_met"), ::OpenAPI::toJsonValue(m_requirements_met));
    }
    if (m_time_period_isSet) {
        obj.insert(QString("time_period"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_topics_viewed_isSet) {
        obj.insert(QString("topics_viewed"), ::OpenAPI::toJsonValue(m_topics_viewed));
    }
    if (m_topics_viewed_all_time_isSet) {
        obj.insert(QString("topics_viewed_all_time"), ::OpenAPI::toJsonValue(m_topics_viewed_all_time));
    }
    if (m_trust_level_locked_isSet) {
        obj.insert(QString("trust_level_locked"), ::OpenAPI::toJsonValue(m_trust_level_locked));
    }
    return obj;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getDaysVisited() const {
    return m_days_visited;
}
void OAIAdminGetUser_200_response_tl3_requirements::setDaysVisited(const qint32 &days_visited) {
    m_days_visited = days_visited;
    m_days_visited_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_days_visited_Set() const{
    return m_days_visited_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_days_visited_Valid() const{
    return m_days_visited_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMaxFlaggedByUsers() const {
    return m_max_flagged_by_users;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMaxFlaggedByUsers(const qint32 &max_flagged_by_users) {
    m_max_flagged_by_users = max_flagged_by_users;
    m_max_flagged_by_users_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_max_flagged_by_users_Set() const{
    return m_max_flagged_by_users_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_max_flagged_by_users_Valid() const{
    return m_max_flagged_by_users_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMaxFlaggedPosts() const {
    return m_max_flagged_posts;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMaxFlaggedPosts(const qint32 &max_flagged_posts) {
    m_max_flagged_posts = max_flagged_posts;
    m_max_flagged_posts_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_max_flagged_posts_Set() const{
    return m_max_flagged_posts_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_max_flagged_posts_Valid() const{
    return m_max_flagged_posts_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinDaysVisited() const {
    return m_min_days_visited;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinDaysVisited(const qint32 &min_days_visited) {
    m_min_days_visited = min_days_visited;
    m_min_days_visited_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_days_visited_Set() const{
    return m_min_days_visited_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_days_visited_Valid() const{
    return m_min_days_visited_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinLikesGiven() const {
    return m_min_likes_given;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinLikesGiven(const qint32 &min_likes_given) {
    m_min_likes_given = min_likes_given;
    m_min_likes_given_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_given_Set() const{
    return m_min_likes_given_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_given_Valid() const{
    return m_min_likes_given_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinLikesReceived() const {
    return m_min_likes_received;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinLikesReceived(const qint32 &min_likes_received) {
    m_min_likes_received = min_likes_received;
    m_min_likes_received_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_received_Set() const{
    return m_min_likes_received_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_received_Valid() const{
    return m_min_likes_received_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinLikesReceivedDays() const {
    return m_min_likes_received_days;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinLikesReceivedDays(const qint32 &min_likes_received_days) {
    m_min_likes_received_days = min_likes_received_days;
    m_min_likes_received_days_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_received_days_Set() const{
    return m_min_likes_received_days_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_received_days_Valid() const{
    return m_min_likes_received_days_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinLikesReceivedUsers() const {
    return m_min_likes_received_users;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinLikesReceivedUsers(const qint32 &min_likes_received_users) {
    m_min_likes_received_users = min_likes_received_users;
    m_min_likes_received_users_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_received_users_Set() const{
    return m_min_likes_received_users_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_likes_received_users_Valid() const{
    return m_min_likes_received_users_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinPostsRead() const {
    return m_min_posts_read;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinPostsRead(const qint32 &min_posts_read) {
    m_min_posts_read = min_posts_read;
    m_min_posts_read_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_posts_read_Set() const{
    return m_min_posts_read_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_posts_read_Valid() const{
    return m_min_posts_read_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinPostsReadAllTime() const {
    return m_min_posts_read_all_time;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinPostsReadAllTime(const qint32 &min_posts_read_all_time) {
    m_min_posts_read_all_time = min_posts_read_all_time;
    m_min_posts_read_all_time_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_posts_read_all_time_Set() const{
    return m_min_posts_read_all_time_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_posts_read_all_time_Valid() const{
    return m_min_posts_read_all_time_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinTopicsRepliedTo() const {
    return m_min_topics_replied_to;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinTopicsRepliedTo(const qint32 &min_topics_replied_to) {
    m_min_topics_replied_to = min_topics_replied_to;
    m_min_topics_replied_to_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_topics_replied_to_Set() const{
    return m_min_topics_replied_to_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_topics_replied_to_Valid() const{
    return m_min_topics_replied_to_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinTopicsViewed() const {
    return m_min_topics_viewed;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinTopicsViewed(const qint32 &min_topics_viewed) {
    m_min_topics_viewed = min_topics_viewed;
    m_min_topics_viewed_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_topics_viewed_Set() const{
    return m_min_topics_viewed_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_topics_viewed_Valid() const{
    return m_min_topics_viewed_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getMinTopicsViewedAllTime() const {
    return m_min_topics_viewed_all_time;
}
void OAIAdminGetUser_200_response_tl3_requirements::setMinTopicsViewedAllTime(const qint32 &min_topics_viewed_all_time) {
    m_min_topics_viewed_all_time = min_topics_viewed_all_time;
    m_min_topics_viewed_all_time_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_topics_viewed_all_time_Set() const{
    return m_min_topics_viewed_all_time_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_min_topics_viewed_all_time_Valid() const{
    return m_min_topics_viewed_all_time_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumFlaggedByUsers() const {
    return m_num_flagged_by_users;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumFlaggedByUsers(const qint32 &num_flagged_by_users) {
    m_num_flagged_by_users = num_flagged_by_users;
    m_num_flagged_by_users_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_flagged_by_users_Set() const{
    return m_num_flagged_by_users_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_flagged_by_users_Valid() const{
    return m_num_flagged_by_users_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumFlaggedPosts() const {
    return m_num_flagged_posts;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumFlaggedPosts(const qint32 &num_flagged_posts) {
    m_num_flagged_posts = num_flagged_posts;
    m_num_flagged_posts_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_flagged_posts_Set() const{
    return m_num_flagged_posts_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_flagged_posts_Valid() const{
    return m_num_flagged_posts_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumLikesGiven() const {
    return m_num_likes_given;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumLikesGiven(const qint32 &num_likes_given) {
    m_num_likes_given = num_likes_given;
    m_num_likes_given_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_given_Set() const{
    return m_num_likes_given_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_given_Valid() const{
    return m_num_likes_given_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumLikesReceived() const {
    return m_num_likes_received;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumLikesReceived(const qint32 &num_likes_received) {
    m_num_likes_received = num_likes_received;
    m_num_likes_received_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_received_Set() const{
    return m_num_likes_received_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_received_Valid() const{
    return m_num_likes_received_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumLikesReceivedDays() const {
    return m_num_likes_received_days;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumLikesReceivedDays(const qint32 &num_likes_received_days) {
    m_num_likes_received_days = num_likes_received_days;
    m_num_likes_received_days_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_received_days_Set() const{
    return m_num_likes_received_days_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_received_days_Valid() const{
    return m_num_likes_received_days_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumLikesReceivedUsers() const {
    return m_num_likes_received_users;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumLikesReceivedUsers(const qint32 &num_likes_received_users) {
    m_num_likes_received_users = num_likes_received_users;
    m_num_likes_received_users_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_received_users_Set() const{
    return m_num_likes_received_users_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_likes_received_users_Valid() const{
    return m_num_likes_received_users_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getNumTopicsRepliedTo() const {
    return m_num_topics_replied_to;
}
void OAIAdminGetUser_200_response_tl3_requirements::setNumTopicsRepliedTo(const qint32 &num_topics_replied_to) {
    m_num_topics_replied_to = num_topics_replied_to;
    m_num_topics_replied_to_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_topics_replied_to_Set() const{
    return m_num_topics_replied_to_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_num_topics_replied_to_Valid() const{
    return m_num_topics_replied_to_isValid;
}

bool OAIAdminGetUser_200_response_tl3_requirements::isOnGracePeriod() const {
    return m_on_grace_period;
}
void OAIAdminGetUser_200_response_tl3_requirements::setOnGracePeriod(const bool &on_grace_period) {
    m_on_grace_period = on_grace_period;
    m_on_grace_period_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_on_grace_period_Set() const{
    return m_on_grace_period_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_on_grace_period_Valid() const{
    return m_on_grace_period_isValid;
}

OAIAdminGetUser_200_response_tl3_requirements_penalty_counts OAIAdminGetUser_200_response_tl3_requirements::getPenaltyCounts() const {
    return m_penalty_counts;
}
void OAIAdminGetUser_200_response_tl3_requirements::setPenaltyCounts(const OAIAdminGetUser_200_response_tl3_requirements_penalty_counts &penalty_counts) {
    m_penalty_counts = penalty_counts;
    m_penalty_counts_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_penalty_counts_Set() const{
    return m_penalty_counts_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_penalty_counts_Valid() const{
    return m_penalty_counts_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getPostsRead() const {
    return m_posts_read;
}
void OAIAdminGetUser_200_response_tl3_requirements::setPostsRead(const qint32 &posts_read) {
    m_posts_read = posts_read;
    m_posts_read_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_posts_read_Set() const{
    return m_posts_read_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_posts_read_Valid() const{
    return m_posts_read_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getPostsReadAllTime() const {
    return m_posts_read_all_time;
}
void OAIAdminGetUser_200_response_tl3_requirements::setPostsReadAllTime(const qint32 &posts_read_all_time) {
    m_posts_read_all_time = posts_read_all_time;
    m_posts_read_all_time_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_posts_read_all_time_Set() const{
    return m_posts_read_all_time_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_posts_read_all_time_Valid() const{
    return m_posts_read_all_time_isValid;
}

bool OAIAdminGetUser_200_response_tl3_requirements::isRequirementsLost() const {
    return m_requirements_lost;
}
void OAIAdminGetUser_200_response_tl3_requirements::setRequirementsLost(const bool &requirements_lost) {
    m_requirements_lost = requirements_lost;
    m_requirements_lost_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_requirements_lost_Set() const{
    return m_requirements_lost_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_requirements_lost_Valid() const{
    return m_requirements_lost_isValid;
}

bool OAIAdminGetUser_200_response_tl3_requirements::isRequirementsMet() const {
    return m_requirements_met;
}
void OAIAdminGetUser_200_response_tl3_requirements::setRequirementsMet(const bool &requirements_met) {
    m_requirements_met = requirements_met;
    m_requirements_met_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_requirements_met_Set() const{
    return m_requirements_met_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_requirements_met_Valid() const{
    return m_requirements_met_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getTimePeriod() const {
    return m_time_period;
}
void OAIAdminGetUser_200_response_tl3_requirements::setTimePeriod(const qint32 &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_time_period_Valid() const{
    return m_time_period_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getTopicsViewed() const {
    return m_topics_viewed;
}
void OAIAdminGetUser_200_response_tl3_requirements::setTopicsViewed(const qint32 &topics_viewed) {
    m_topics_viewed = topics_viewed;
    m_topics_viewed_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_topics_viewed_Set() const{
    return m_topics_viewed_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_topics_viewed_Valid() const{
    return m_topics_viewed_isValid;
}

qint32 OAIAdminGetUser_200_response_tl3_requirements::getTopicsViewedAllTime() const {
    return m_topics_viewed_all_time;
}
void OAIAdminGetUser_200_response_tl3_requirements::setTopicsViewedAllTime(const qint32 &topics_viewed_all_time) {
    m_topics_viewed_all_time = topics_viewed_all_time;
    m_topics_viewed_all_time_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_topics_viewed_all_time_Set() const{
    return m_topics_viewed_all_time_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_topics_viewed_all_time_Valid() const{
    return m_topics_viewed_all_time_isValid;
}

bool OAIAdminGetUser_200_response_tl3_requirements::isTrustLevelLocked() const {
    return m_trust_level_locked;
}
void OAIAdminGetUser_200_response_tl3_requirements::setTrustLevelLocked(const bool &trust_level_locked) {
    m_trust_level_locked = trust_level_locked;
    m_trust_level_locked_isSet = true;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_trust_level_locked_Set() const{
    return m_trust_level_locked_isSet;
}

bool OAIAdminGetUser_200_response_tl3_requirements::is_trust_level_locked_Valid() const{
    return m_trust_level_locked_isValid;
}

bool OAIAdminGetUser_200_response_tl3_requirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_visited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_flagged_by_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_flagged_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_days_visited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likes_given_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likes_received_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likes_received_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_posts_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_posts_read_all_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_topics_replied_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_topics_viewed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_topics_viewed_all_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_flagged_by_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_flagged_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_given_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_received_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_received_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_topics_replied_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts_read_all_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements_met_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_viewed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_viewed_all_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_level_locked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminGetUser_200_response_tl3_requirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_days_visited_isValid && m_max_flagged_by_users_isValid && m_max_flagged_posts_isValid && m_min_days_visited_isValid && m_min_likes_given_isValid && m_min_likes_received_isValid && m_min_likes_received_days_isValid && m_min_likes_received_users_isValid && m_min_posts_read_isValid && m_min_posts_read_all_time_isValid && m_min_topics_replied_to_isValid && m_min_topics_viewed_isValid && m_min_topics_viewed_all_time_isValid && m_num_flagged_by_users_isValid && m_num_flagged_posts_isValid && m_num_likes_given_isValid && m_num_likes_received_isValid && m_num_likes_received_days_isValid && m_num_likes_received_users_isValid && m_num_topics_replied_to_isValid && m_on_grace_period_isValid && m_penalty_counts_isValid && m_posts_read_isValid && m_posts_read_all_time_isValid && m_requirements_lost_isValid && m_requirements_met_isValid && m_time_period_isValid && m_topics_viewed_isValid && m_topics_viewed_all_time_isValid && m_trust_level_locked_isValid && true;
}

} // namespace OpenAPI
