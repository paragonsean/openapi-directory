/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUserActions_200_response_user_actions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUserActions_200_response_user_actions_inner::OAIListUserActions_200_response_user_actions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUserActions_200_response_user_actions_inner::OAIListUserActions_200_response_user_actions_inner() {
    this->initializeModel();
}

OAIListUserActions_200_response_user_actions_inner::~OAIListUserActions_200_response_user_actions_inner() {}

void OAIListUserActions_200_response_user_actions_inner::initializeModel() {

    m_acting_avatar_template_isSet = false;
    m_acting_avatar_template_isValid = false;

    m_acting_name_isSet = false;
    m_acting_name_isValid = false;

    m_acting_user_id_isSet = false;
    m_acting_user_id_isValid = false;

    m_acting_username_isSet = false;
    m_acting_username_isValid = false;

    m_action_code_isSet = false;
    m_action_code_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_avatar_template_isSet = false;
    m_avatar_template_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_post_number_isSet = false;
    m_post_number_isValid = false;

    m_post_type_isSet = false;
    m_post_type_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_target_name_isSet = false;
    m_target_name_isValid = false;

    m_target_user_id_isSet = false;
    m_target_user_id_isValid = false;

    m_target_username_isSet = false;
    m_target_username_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIListUserActions_200_response_user_actions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUserActions_200_response_user_actions_inner::fromJsonObject(QJsonObject json) {

    m_acting_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_acting_avatar_template, json[QString("acting_avatar_template")]);
    m_acting_avatar_template_isSet = !json[QString("acting_avatar_template")].isNull() && m_acting_avatar_template_isValid;

    m_acting_name_isValid = ::OpenAPI::fromJsonValue(m_acting_name, json[QString("acting_name")]);
    m_acting_name_isSet = !json[QString("acting_name")].isNull() && m_acting_name_isValid;

    m_acting_user_id_isValid = ::OpenAPI::fromJsonValue(m_acting_user_id, json[QString("acting_user_id")]);
    m_acting_user_id_isSet = !json[QString("acting_user_id")].isNull() && m_acting_user_id_isValid;

    m_acting_username_isValid = ::OpenAPI::fromJsonValue(m_acting_username, json[QString("acting_username")]);
    m_acting_username_isSet = !json[QString("acting_username")].isNull() && m_acting_username_isValid;

    m_action_code_isValid = ::OpenAPI::fromJsonValue(m_action_code, json[QString("action_code")]);
    m_action_code_isSet = !json[QString("action_code")].isNull() && m_action_code_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("action_type")]);
    m_action_type_isSet = !json[QString("action_type")].isNull() && m_action_type_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_avatar_template, json[QString("avatar_template")]);
    m_avatar_template_isSet = !json[QString("avatar_template")].isNull() && m_avatar_template_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_post_number_isValid = ::OpenAPI::fromJsonValue(m_post_number, json[QString("post_number")]);
    m_post_number_isSet = !json[QString("post_number")].isNull() && m_post_number_isValid;

    m_post_type_isValid = ::OpenAPI::fromJsonValue(m_post_type, json[QString("post_type")]);
    m_post_type_isSet = !json[QString("post_type")].isNull() && m_post_type_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_target_name_isValid = ::OpenAPI::fromJsonValue(m_target_name, json[QString("target_name")]);
    m_target_name_isSet = !json[QString("target_name")].isNull() && m_target_name_isValid;

    m_target_user_id_isValid = ::OpenAPI::fromJsonValue(m_target_user_id, json[QString("target_user_id")]);
    m_target_user_id_isSet = !json[QString("target_user_id")].isNull() && m_target_user_id_isValid;

    m_target_username_isValid = ::OpenAPI::fromJsonValue(m_target_username, json[QString("target_username")]);
    m_target_username_isSet = !json[QString("target_username")].isNull() && m_target_username_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("topic_id")]);
    m_topic_id_isSet = !json[QString("topic_id")].isNull() && m_topic_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUserActions_200_response_user_actions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_acting_avatar_template_isSet) {
        obj.insert(QString("acting_avatar_template"), ::OpenAPI::toJsonValue(m_acting_avatar_template));
    }
    if (m_acting_name_isSet) {
        obj.insert(QString("acting_name"), ::OpenAPI::toJsonValue(m_acting_name));
    }
    if (m_acting_user_id_isSet) {
        obj.insert(QString("acting_user_id"), ::OpenAPI::toJsonValue(m_acting_user_id));
    }
    if (m_acting_username_isSet) {
        obj.insert(QString("acting_username"), ::OpenAPI::toJsonValue(m_acting_username));
    }
    if (m_action_code_isSet) {
        obj.insert(QString("action_code"), ::OpenAPI::toJsonValue(m_action_code));
    }
    if (m_action_type_isSet) {
        obj.insert(QString("action_type"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_avatar_template_isSet) {
        obj.insert(QString("avatar_template"), ::OpenAPI::toJsonValue(m_avatar_template));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_excerpt_isSet) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_post_number_isSet) {
        obj.insert(QString("post_number"), ::OpenAPI::toJsonValue(m_post_number));
    }
    if (m_post_type_isSet) {
        obj.insert(QString("post_type"), ::OpenAPI::toJsonValue(m_post_type));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_target_name_isSet) {
        obj.insert(QString("target_name"), ::OpenAPI::toJsonValue(m_target_name));
    }
    if (m_target_user_id_isSet) {
        obj.insert(QString("target_user_id"), ::OpenAPI::toJsonValue(m_target_user_id));
    }
    if (m_target_username_isSet) {
        obj.insert(QString("target_username"), ::OpenAPI::toJsonValue(m_target_username));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topic_id_isSet) {
        obj.insert(QString("topic_id"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIListUserActions_200_response_user_actions_inner::getActingAvatarTemplate() const {
    return m_acting_avatar_template;
}
void OAIListUserActions_200_response_user_actions_inner::setActingAvatarTemplate(const QString &acting_avatar_template) {
    m_acting_avatar_template = acting_avatar_template;
    m_acting_avatar_template_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_avatar_template_Set() const{
    return m_acting_avatar_template_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_avatar_template_Valid() const{
    return m_acting_avatar_template_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getActingName() const {
    return m_acting_name;
}
void OAIListUserActions_200_response_user_actions_inner::setActingName(const QString &acting_name) {
    m_acting_name = acting_name;
    m_acting_name_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_name_Set() const{
    return m_acting_name_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_name_Valid() const{
    return m_acting_name_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getActingUserId() const {
    return m_acting_user_id;
}
void OAIListUserActions_200_response_user_actions_inner::setActingUserId(const qint32 &acting_user_id) {
    m_acting_user_id = acting_user_id;
    m_acting_user_id_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_user_id_Set() const{
    return m_acting_user_id_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_user_id_Valid() const{
    return m_acting_user_id_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getActingUsername() const {
    return m_acting_username;
}
void OAIListUserActions_200_response_user_actions_inner::setActingUsername(const QString &acting_username) {
    m_acting_username = acting_username;
    m_acting_username_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_username_Set() const{
    return m_acting_username_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_acting_username_Valid() const{
    return m_acting_username_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getActionCode() const {
    return m_action_code;
}
void OAIListUserActions_200_response_user_actions_inner::setActionCode(const QString &action_code) {
    m_action_code = action_code;
    m_action_code_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_action_code_Set() const{
    return m_action_code_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_action_code_Valid() const{
    return m_action_code_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getActionType() const {
    return m_action_type;
}
void OAIListUserActions_200_response_user_actions_inner::setActionType(const qint32 &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_action_type_Valid() const{
    return m_action_type_isValid;
}

bool OAIListUserActions_200_response_user_actions_inner::isArchived() const {
    return m_archived;
}
void OAIListUserActions_200_response_user_actions_inner::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getAvatarTemplate() const {
    return m_avatar_template;
}
void OAIListUserActions_200_response_user_actions_inner::setAvatarTemplate(const QString &avatar_template) {
    m_avatar_template = avatar_template;
    m_avatar_template_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_avatar_template_Set() const{
    return m_avatar_template_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_avatar_template_Valid() const{
    return m_avatar_template_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getCategoryId() const {
    return m_category_id;
}
void OAIListUserActions_200_response_user_actions_inner::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_category_id_Valid() const{
    return m_category_id_isValid;
}

bool OAIListUserActions_200_response_user_actions_inner::isClosed() const {
    return m_closed;
}
void OAIListUserActions_200_response_user_actions_inner::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIListUserActions_200_response_user_actions_inner::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIListUserActions_200_response_user_actions_inner::isDeleted() const {
    return m_deleted;
}
void OAIListUserActions_200_response_user_actions_inner::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getExcerpt() const {
    return m_excerpt;
}
void OAIListUserActions_200_response_user_actions_inner::setExcerpt(const QString &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getHidden() const {
    return m_hidden;
}
void OAIListUserActions_200_response_user_actions_inner::setHidden(const QString &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getName() const {
    return m_name;
}
void OAIListUserActions_200_response_user_actions_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getPostId() const {
    return m_post_id;
}
void OAIListUserActions_200_response_user_actions_inner::setPostId(const QString &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getPostNumber() const {
    return m_post_number;
}
void OAIListUserActions_200_response_user_actions_inner::setPostNumber(const qint32 &post_number) {
    m_post_number = post_number;
    m_post_number_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_post_number_Set() const{
    return m_post_number_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_post_number_Valid() const{
    return m_post_number_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getPostType() const {
    return m_post_type;
}
void OAIListUserActions_200_response_user_actions_inner::setPostType(const QString &post_type) {
    m_post_type = post_type;
    m_post_type_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_post_type_Set() const{
    return m_post_type_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_post_type_Valid() const{
    return m_post_type_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getSlug() const {
    return m_slug;
}
void OAIListUserActions_200_response_user_actions_inner::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getTargetName() const {
    return m_target_name;
}
void OAIListUserActions_200_response_user_actions_inner::setTargetName(const QString &target_name) {
    m_target_name = target_name;
    m_target_name_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_target_name_Set() const{
    return m_target_name_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_target_name_Valid() const{
    return m_target_name_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getTargetUserId() const {
    return m_target_user_id;
}
void OAIListUserActions_200_response_user_actions_inner::setTargetUserId(const qint32 &target_user_id) {
    m_target_user_id = target_user_id;
    m_target_user_id_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_target_user_id_Set() const{
    return m_target_user_id_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_target_user_id_Valid() const{
    return m_target_user_id_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getTargetUsername() const {
    return m_target_username;
}
void OAIListUserActions_200_response_user_actions_inner::setTargetUsername(const QString &target_username) {
    m_target_username = target_username;
    m_target_username_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_target_username_Set() const{
    return m_target_username_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_target_username_Valid() const{
    return m_target_username_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getTitle() const {
    return m_title;
}
void OAIListUserActions_200_response_user_actions_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getTopicId() const {
    return m_topic_id;
}
void OAIListUserActions_200_response_user_actions_inner::setTopicId(const qint32 &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

qint32 OAIListUserActions_200_response_user_actions_inner::getUserId() const {
    return m_user_id;
}
void OAIListUserActions_200_response_user_actions_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIListUserActions_200_response_user_actions_inner::getUsername() const {
    return m_username;
}
void OAIListUserActions_200_response_user_actions_inner::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIListUserActions_200_response_user_actions_inner::is_username_Set() const{
    return m_username_isSet;
}

bool OAIListUserActions_200_response_user_actions_inner::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIListUserActions_200_response_user_actions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acting_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acting_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acting_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acting_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUserActions_200_response_user_actions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acting_avatar_template_isValid && m_acting_name_isValid && m_acting_user_id_isValid && m_acting_username_isValid && m_action_code_isValid && m_action_type_isValid && m_archived_isValid && m_avatar_template_isValid && m_category_id_isValid && m_closed_isValid && m_created_at_isValid && m_deleted_isValid && m_excerpt_isValid && m_hidden_isValid && m_name_isValid && m_post_id_isValid && m_post_number_isValid && m_post_type_isValid && m_slug_isValid && m_target_name_isValid && m_target_user_id_isValid && m_target_username_isValid && m_title_isValid && m_topic_id_isValid && m_user_id_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
