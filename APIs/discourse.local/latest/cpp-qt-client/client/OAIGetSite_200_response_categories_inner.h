/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSite_200_response_categories_inner.h
 *
 * 
 */

#ifndef OAIGetSite_200_response_categories_inner_H
#define OAIGetSite_200_response_categories_inner_H

#include <QJsonObject>

#include "OAIGetCategory_200_response_category_required_tag_groups_inner.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetSite_200_response_categories_inner : public OAIObject {
public:
    OAIGetSite_200_response_categories_inner();
    OAIGetSite_200_response_categories_inner(QString json);
    ~OAIGetSite_200_response_categories_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowGlobalTags() const;
    void setAllowGlobalTags(const bool &allow_global_tags);
    bool is_allow_global_tags_Set() const;
    bool is_allow_global_tags_Valid() const;

    QList<QJsonValue> getAllowedTagGroups() const;
    void setAllowedTagGroups(const QList<QJsonValue> &allowed_tag_groups);
    bool is_allowed_tag_groups_Set() const;
    bool is_allowed_tag_groups_Valid() const;

    QList<QJsonValue> getAllowedTags() const;
    void setAllowedTags(const QList<QJsonValue> &allowed_tags);
    bool is_allowed_tags_Set() const;
    bool is_allowed_tags_Valid() const;

    bool isCanEdit() const;
    void setCanEdit(const bool &can_edit);
    bool is_can_edit_Set() const;
    bool is_can_edit_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    QMap<QString, QJsonValue> getCustomFields() const;
    void setCustomFields(const QMap<QString, QJsonValue> &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    QString getDefaultListFilter() const;
    void setDefaultListFilter(const QString &default_list_filter);
    bool is_default_list_filter_Set() const;
    bool is_default_list_filter_Valid() const;

    QString getDefaultTopPeriod() const;
    void setDefaultTopPeriod(const QString &default_top_period);
    bool is_default_top_period_Set() const;
    bool is_default_top_period_Valid() const;

    QString getDefaultView() const;
    void setDefaultView(const QString &default_view);
    bool is_default_view_Set() const;
    bool is_default_view_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDescriptionExcerpt() const;
    void setDescriptionExcerpt(const QString &description_excerpt);
    bool is_description_excerpt_Set() const;
    bool is_description_excerpt_Valid() const;

    QString getDescriptionText() const;
    void setDescriptionText(const QString &description_text);
    bool is_description_text_Set() const;
    bool is_description_text_Valid() const;

    QList<QJsonValue> getFormTemplateIds() const;
    void setFormTemplateIds(const QList<QJsonValue> &form_template_ids);
    bool is_form_template_ids_Set() const;
    bool is_form_template_ids_Valid() const;

    bool isHasChildren() const;
    void setHasChildren(const bool &has_children);
    bool is_has_children_Set() const;
    bool is_has_children_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMinimumRequiredTags() const;
    void setMinimumRequiredTags(const qint32 &minimum_required_tags);
    bool is_minimum_required_tags_Set() const;
    bool is_minimum_required_tags_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isNavigateToFirstPostAfterRead() const;
    void setNavigateToFirstPostAfterRead(const bool &navigate_to_first_post_after_read);
    bool is_navigate_to_first_post_after_read_Set() const;
    bool is_navigate_to_first_post_after_read_Valid() const;

    qint32 getNotificationLevel() const;
    void setNotificationLevel(const qint32 &notification_level);
    bool is_notification_level_Set() const;
    bool is_notification_level_Valid() const;

    qint32 getNumFeaturedTopics() const;
    void setNumFeaturedTopics(const qint32 &num_featured_topics);
    bool is_num_featured_topics_Set() const;
    bool is_num_featured_topics_Valid() const;

    qint32 getParentCategoryId() const;
    void setParentCategoryId(const qint32 &parent_category_id);
    bool is_parent_category_id_Set() const;
    bool is_parent_category_id_Valid() const;

    qint32 getPermission() const;
    void setPermission(const qint32 &permission);
    bool is_permission_Set() const;
    bool is_permission_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    qint32 getPostCount() const;
    void setPostCount(const qint32 &post_count);
    bool is_post_count_Set() const;
    bool is_post_count_Valid() const;

    QString getReadOnlyBanner() const;
    void setReadOnlyBanner(const QString &read_only_banner);
    bool is_read_only_banner_Set() const;
    bool is_read_only_banner_Valid() const;

    bool isReadRestricted() const;
    void setReadRestricted(const bool &read_restricted);
    bool is_read_restricted_Set() const;
    bool is_read_restricted_Valid() const;

    QList<OAIGetCategory_200_response_category_required_tag_groups_inner> getRequiredTagGroups() const;
    void setRequiredTagGroups(const QList<OAIGetCategory_200_response_category_required_tag_groups_inner> &required_tag_groups);
    bool is_required_tag_groups_Set() const;
    bool is_required_tag_groups_Valid() const;

    bool isShowSubcategoryList() const;
    void setShowSubcategoryList(const bool &show_subcategory_list);
    bool is_show_subcategory_list_Set() const;
    bool is_show_subcategory_list_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QString getSortAscending() const;
    void setSortAscending(const QString &sort_ascending);
    bool is_sort_ascending_Set() const;
    bool is_sort_ascending_Valid() const;

    QString getSortOrder() const;
    void setSortOrder(const QString &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    QString getSubcategoryListStyle() const;
    void setSubcategoryListStyle(const QString &subcategory_list_style);
    bool is_subcategory_list_style_Set() const;
    bool is_subcategory_list_style_Valid() const;

    QString getTextColor() const;
    void setTextColor(const QString &text_color);
    bool is_text_color_Set() const;
    bool is_text_color_Valid() const;

    qint32 getTopicCount() const;
    void setTopicCount(const qint32 &topic_count);
    bool is_topic_count_Set() const;
    bool is_topic_count_Valid() const;

    QString getTopicTemplate() const;
    void setTopicTemplate(const QString &topic_template);
    bool is_topic_template_Set() const;
    bool is_topic_template_Valid() const;

    QString getTopicUrl() const;
    void setTopicUrl(const QString &topic_url);
    bool is_topic_url_Set() const;
    bool is_topic_url_Valid() const;

    QString getUploadedBackground() const;
    void setUploadedBackground(const QString &uploaded_background);
    bool is_uploaded_background_Set() const;
    bool is_uploaded_background_Valid() const;

    QString getUploadedLogo() const;
    void setUploadedLogo(const QString &uploaded_logo);
    bool is_uploaded_logo_Set() const;
    bool is_uploaded_logo_Valid() const;

    QString getUploadedLogoDark() const;
    void setUploadedLogoDark(const QString &uploaded_logo_dark);
    bool is_uploaded_logo_dark_Set() const;
    bool is_uploaded_logo_dark_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_global_tags;
    bool m_allow_global_tags_isSet;
    bool m_allow_global_tags_isValid;

    QList<QJsonValue> m_allowed_tag_groups;
    bool m_allowed_tag_groups_isSet;
    bool m_allowed_tag_groups_isValid;

    QList<QJsonValue> m_allowed_tags;
    bool m_allowed_tags_isSet;
    bool m_allowed_tags_isValid;

    bool m_can_edit;
    bool m_can_edit_isSet;
    bool m_can_edit_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    QMap<QString, QJsonValue> m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    QString m_default_list_filter;
    bool m_default_list_filter_isSet;
    bool m_default_list_filter_isValid;

    QString m_default_top_period;
    bool m_default_top_period_isSet;
    bool m_default_top_period_isValid;

    QString m_default_view;
    bool m_default_view_isSet;
    bool m_default_view_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_description_excerpt;
    bool m_description_excerpt_isSet;
    bool m_description_excerpt_isValid;

    QString m_description_text;
    bool m_description_text_isSet;
    bool m_description_text_isValid;

    QList<QJsonValue> m_form_template_ids;
    bool m_form_template_ids_isSet;
    bool m_form_template_ids_isValid;

    bool m_has_children;
    bool m_has_children_isSet;
    bool m_has_children_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_minimum_required_tags;
    bool m_minimum_required_tags_isSet;
    bool m_minimum_required_tags_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_navigate_to_first_post_after_read;
    bool m_navigate_to_first_post_after_read_isSet;
    bool m_navigate_to_first_post_after_read_isValid;

    qint32 m_notification_level;
    bool m_notification_level_isSet;
    bool m_notification_level_isValid;

    qint32 m_num_featured_topics;
    bool m_num_featured_topics_isSet;
    bool m_num_featured_topics_isValid;

    qint32 m_parent_category_id;
    bool m_parent_category_id_isSet;
    bool m_parent_category_id_isValid;

    qint32 m_permission;
    bool m_permission_isSet;
    bool m_permission_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    qint32 m_post_count;
    bool m_post_count_isSet;
    bool m_post_count_isValid;

    QString m_read_only_banner;
    bool m_read_only_banner_isSet;
    bool m_read_only_banner_isValid;

    bool m_read_restricted;
    bool m_read_restricted_isSet;
    bool m_read_restricted_isValid;

    QList<OAIGetCategory_200_response_category_required_tag_groups_inner> m_required_tag_groups;
    bool m_required_tag_groups_isSet;
    bool m_required_tag_groups_isValid;

    bool m_show_subcategory_list;
    bool m_show_subcategory_list_isSet;
    bool m_show_subcategory_list_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QString m_sort_ascending;
    bool m_sort_ascending_isSet;
    bool m_sort_ascending_isValid;

    QString m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    QString m_subcategory_list_style;
    bool m_subcategory_list_style_isSet;
    bool m_subcategory_list_style_isValid;

    QString m_text_color;
    bool m_text_color_isSet;
    bool m_text_color_isValid;

    qint32 m_topic_count;
    bool m_topic_count_isSet;
    bool m_topic_count_isValid;

    QString m_topic_template;
    bool m_topic_template_isSet;
    bool m_topic_template_isValid;

    QString m_topic_url;
    bool m_topic_url_isSet;
    bool m_topic_url_isValid;

    QString m_uploaded_background;
    bool m_uploaded_background_isSet;
    bool m_uploaded_background_isValid;

    QString m_uploaded_logo;
    bool m_uploaded_logo_isSet;
    bool m_uploaded_logo_isValid;

    QString m_uploaded_logo_dark;
    bool m_uploaded_logo_dark_isSet;
    bool m_uploaded_logo_dark_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSite_200_response_categories_inner)

#endif // OAIGetSite_200_response_categories_inner_H
