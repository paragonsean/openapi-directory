/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateInvite_request.h
 *
 * 
 */

#ifndef OAICreateInvite_request_H
#define OAICreateInvite_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateInvite_request : public OAIObject {
public:
    OAICreateInvite_request();
    OAICreateInvite_request(QString json);
    ~OAICreateInvite_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCustomMessage() const;
    void setCustomMessage(const QString &custom_message);
    bool is_custom_message_Set() const;
    bool is_custom_message_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getExpiresAt() const;
    void setExpiresAt(const QString &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    qint32 getGroupId() const;
    void setGroupId(const qint32 &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    QString getGroupNames() const;
    void setGroupNames(const QString &group_names);
    bool is_group_names_Set() const;
    bool is_group_names_Valid() const;

    qint32 getMaxRedemptionsAllowed() const;
    void setMaxRedemptionsAllowed(const qint32 &max_redemptions_allowed);
    bool is_max_redemptions_allowed_Set() const;
    bool is_max_redemptions_allowed_Valid() const;

    bool isSkipEmail() const;
    void setSkipEmail(const bool &skip_email);
    bool is_skip_email_Set() const;
    bool is_skip_email_Valid() const;

    qint32 getTopicId() const;
    void setTopicId(const qint32 &topic_id);
    bool is_topic_id_Set() const;
    bool is_topic_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_custom_message;
    bool m_custom_message_isSet;
    bool m_custom_message_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    qint32 m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    QString m_group_names;
    bool m_group_names_isSet;
    bool m_group_names_isValid;

    qint32 m_max_redemptions_allowed;
    bool m_max_redemptions_allowed_isSet;
    bool m_max_redemptions_allowed_isValid;

    bool m_skip_email;
    bool m_skip_email_isSet;
    bool m_skip_email_isValid;

    qint32 m_topic_id;
    bool m_topic_id_isSet;
    bool m_topic_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateInvite_request)

#endif // OAICreateInvite_request_H
