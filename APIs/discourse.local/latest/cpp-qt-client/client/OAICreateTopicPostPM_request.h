/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateTopicPostPM_request.h
 *
 * 
 */

#ifndef OAICreateTopicPostPM_request_H
#define OAICreateTopicPostPM_request_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateTopicPostPM_request : public OAIObject {
public:
    OAICreateTopicPostPM_request();
    OAICreateTopicPostPM_request(QString json);
    ~OAICreateTopicPostPM_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchetype() const;
    void setArchetype(const QString &archetype);
    bool is_archetype_Set() const;
    bool is_archetype_Valid() const;

    qint32 getCategory() const;
    void setCategory(const qint32 &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getEmbedUrl() const;
    void setEmbedUrl(const QString &embed_url);
    bool is_embed_url_Set() const;
    bool is_embed_url_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    QString getRaw() const;
    void setRaw(const QString &raw);
    bool is_raw_Set() const;
    bool is_raw_Valid() const;

    QString getTargetRecipients() const;
    void setTargetRecipients(const QString &target_recipients);
    bool is_target_recipients_Set() const;
    bool is_target_recipients_Valid() const;

    Q_DECL_DEPRECATED QString getTargetUsernames() const;
    Q_DECL_DEPRECATED void setTargetUsernames(const QString &target_usernames);
    Q_DECL_DEPRECATED bool is_target_usernames_Set() const;
    Q_DECL_DEPRECATED bool is_target_usernames_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTopicId() const;
    void setTopicId(const qint32 &topic_id);
    bool is_topic_id_Set() const;
    bool is_topic_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_archetype;
    bool m_archetype_isSet;
    bool m_archetype_isValid;

    qint32 m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_embed_url;
    bool m_embed_url_isSet;
    bool m_embed_url_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;

    QString m_raw;
    bool m_raw_isSet;
    bool m_raw_isValid;

    QString m_target_recipients;
    bool m_target_recipients_isSet;
    bool m_target_recipients_isValid;

    QString m_target_usernames;
    bool m_target_usernames_isSet;
    bool m_target_usernames_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_topic_id;
    bool m_topic_id_isSet;
    bool m_topic_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateTopicPostPM_request)

#endif // OAICreateTopicPostPM_request_H
