/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCategory_200_response_category.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCategory_200_response_category::OAIUpdateCategory_200_response_category(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCategory_200_response_category::OAIUpdateCategory_200_response_category() {
    this->initializeModel();
}

OAIUpdateCategory_200_response_category::~OAIUpdateCategory_200_response_category() {}

void OAIUpdateCategory_200_response_category::initializeModel() {

    m_all_topics_wiki_isSet = false;
    m_all_topics_wiki_isValid = false;

    m_allow_badges_isSet = false;
    m_allow_badges_isValid = false;

    m_allow_global_tags_isSet = false;
    m_allow_global_tags_isValid = false;

    m_allow_unlimited_owner_edits_on_first_post_isSet = false;
    m_allow_unlimited_owner_edits_on_first_post_isValid = false;

    m_allowed_tag_groups_isSet = false;
    m_allowed_tag_groups_isValid = false;

    m_allowed_tags_isSet = false;
    m_allowed_tags_isValid = false;

    m_auto_close_based_on_last_post_isSet = false;
    m_auto_close_based_on_last_post_isValid = false;

    m_auto_close_hours_isSet = false;
    m_auto_close_hours_isValid = false;

    m_available_groups_isSet = false;
    m_available_groups_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_category_setting_isSet = false;
    m_category_setting_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_default_list_filter_isSet = false;
    m_default_list_filter_isValid = false;

    m_default_slow_mode_seconds_isSet = false;
    m_default_slow_mode_seconds_isValid = false;

    m_default_top_period_isSet = false;
    m_default_top_period_isValid = false;

    m_default_view_isSet = false;
    m_default_view_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_excerpt_isSet = false;
    m_description_excerpt_isValid = false;

    m_description_text_isSet = false;
    m_description_text_isValid = false;

    m_email_in_isSet = false;
    m_email_in_isValid = false;

    m_email_in_allow_strangers_isSet = false;
    m_email_in_allow_strangers_isValid = false;

    m_form_template_ids_isSet = false;
    m_form_template_ids_isValid = false;

    m_group_permissions_isSet = false;
    m_group_permissions_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mailinglist_mirror_isSet = false;
    m_mailinglist_mirror_isValid = false;

    m_minimum_required_tags_isSet = false;
    m_minimum_required_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_navigate_to_first_post_after_read_isSet = false;
    m_navigate_to_first_post_after_read_isValid = false;

    m_notification_level_isSet = false;
    m_notification_level_isValid = false;

    m_num_featured_topics_isSet = false;
    m_num_featured_topics_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_read_only_banner_isSet = false;
    m_read_only_banner_isValid = false;

    m_read_restricted_isSet = false;
    m_read_restricted_isValid = false;

    m_required_tag_groups_isSet = false;
    m_required_tag_groups_isValid = false;

    m_search_priority_isSet = false;
    m_search_priority_isValid = false;

    m_show_subcategory_list_isSet = false;
    m_show_subcategory_list_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_sort_ascending_isSet = false;
    m_sort_ascending_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_subcategory_list_style_isSet = false;
    m_subcategory_list_style_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_topic_count_isSet = false;
    m_topic_count_isValid = false;

    m_topic_featured_link_allowed_isSet = false;
    m_topic_featured_link_allowed_isValid = false;

    m_topic_template_isSet = false;
    m_topic_template_isValid = false;

    m_topic_url_isSet = false;
    m_topic_url_isValid = false;

    m_uploaded_background_isSet = false;
    m_uploaded_background_isValid = false;

    m_uploaded_logo_isSet = false;
    m_uploaded_logo_isValid = false;

    m_uploaded_logo_dark_isSet = false;
    m_uploaded_logo_dark_isValid = false;
}

void OAIUpdateCategory_200_response_category::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCategory_200_response_category::fromJsonObject(QJsonObject json) {

    m_all_topics_wiki_isValid = ::OpenAPI::fromJsonValue(m_all_topics_wiki, json[QString("all_topics_wiki")]);
    m_all_topics_wiki_isSet = !json[QString("all_topics_wiki")].isNull() && m_all_topics_wiki_isValid;

    m_allow_badges_isValid = ::OpenAPI::fromJsonValue(m_allow_badges, json[QString("allow_badges")]);
    m_allow_badges_isSet = !json[QString("allow_badges")].isNull() && m_allow_badges_isValid;

    m_allow_global_tags_isValid = ::OpenAPI::fromJsonValue(m_allow_global_tags, json[QString("allow_global_tags")]);
    m_allow_global_tags_isSet = !json[QString("allow_global_tags")].isNull() && m_allow_global_tags_isValid;

    m_allow_unlimited_owner_edits_on_first_post_isValid = ::OpenAPI::fromJsonValue(m_allow_unlimited_owner_edits_on_first_post, json[QString("allow_unlimited_owner_edits_on_first_post")]);
    m_allow_unlimited_owner_edits_on_first_post_isSet = !json[QString("allow_unlimited_owner_edits_on_first_post")].isNull() && m_allow_unlimited_owner_edits_on_first_post_isValid;

    m_allowed_tag_groups_isValid = ::OpenAPI::fromJsonValue(m_allowed_tag_groups, json[QString("allowed_tag_groups")]);
    m_allowed_tag_groups_isSet = !json[QString("allowed_tag_groups")].isNull() && m_allowed_tag_groups_isValid;

    m_allowed_tags_isValid = ::OpenAPI::fromJsonValue(m_allowed_tags, json[QString("allowed_tags")]);
    m_allowed_tags_isSet = !json[QString("allowed_tags")].isNull() && m_allowed_tags_isValid;

    m_auto_close_based_on_last_post_isValid = ::OpenAPI::fromJsonValue(m_auto_close_based_on_last_post, json[QString("auto_close_based_on_last_post")]);
    m_auto_close_based_on_last_post_isSet = !json[QString("auto_close_based_on_last_post")].isNull() && m_auto_close_based_on_last_post_isValid;

    m_auto_close_hours_isValid = ::OpenAPI::fromJsonValue(m_auto_close_hours, json[QString("auto_close_hours")]);
    m_auto_close_hours_isSet = !json[QString("auto_close_hours")].isNull() && m_auto_close_hours_isValid;

    m_available_groups_isValid = ::OpenAPI::fromJsonValue(m_available_groups, json[QString("available_groups")]);
    m_available_groups_isSet = !json[QString("available_groups")].isNull() && m_available_groups_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("can_delete")]);
    m_can_delete_isSet = !json[QString("can_delete")].isNull() && m_can_delete_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_category_setting_isValid = ::OpenAPI::fromJsonValue(m_category_setting, json[QString("category_setting")]);
    m_category_setting_isSet = !json[QString("category_setting")].isNull() && m_category_setting_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_default_list_filter_isValid = ::OpenAPI::fromJsonValue(m_default_list_filter, json[QString("default_list_filter")]);
    m_default_list_filter_isSet = !json[QString("default_list_filter")].isNull() && m_default_list_filter_isValid;

    m_default_slow_mode_seconds_isValid = ::OpenAPI::fromJsonValue(m_default_slow_mode_seconds, json[QString("default_slow_mode_seconds")]);
    m_default_slow_mode_seconds_isSet = !json[QString("default_slow_mode_seconds")].isNull() && m_default_slow_mode_seconds_isValid;

    m_default_top_period_isValid = ::OpenAPI::fromJsonValue(m_default_top_period, json[QString("default_top_period")]);
    m_default_top_period_isSet = !json[QString("default_top_period")].isNull() && m_default_top_period_isValid;

    m_default_view_isValid = ::OpenAPI::fromJsonValue(m_default_view, json[QString("default_view")]);
    m_default_view_isSet = !json[QString("default_view")].isNull() && m_default_view_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_excerpt_isValid = ::OpenAPI::fromJsonValue(m_description_excerpt, json[QString("description_excerpt")]);
    m_description_excerpt_isSet = !json[QString("description_excerpt")].isNull() && m_description_excerpt_isValid;

    m_description_text_isValid = ::OpenAPI::fromJsonValue(m_description_text, json[QString("description_text")]);
    m_description_text_isSet = !json[QString("description_text")].isNull() && m_description_text_isValid;

    m_email_in_isValid = ::OpenAPI::fromJsonValue(m_email_in, json[QString("email_in")]);
    m_email_in_isSet = !json[QString("email_in")].isNull() && m_email_in_isValid;

    m_email_in_allow_strangers_isValid = ::OpenAPI::fromJsonValue(m_email_in_allow_strangers, json[QString("email_in_allow_strangers")]);
    m_email_in_allow_strangers_isSet = !json[QString("email_in_allow_strangers")].isNull() && m_email_in_allow_strangers_isValid;

    m_form_template_ids_isValid = ::OpenAPI::fromJsonValue(m_form_template_ids, json[QString("form_template_ids")]);
    m_form_template_ids_isSet = !json[QString("form_template_ids")].isNull() && m_form_template_ids_isValid;

    m_group_permissions_isValid = ::OpenAPI::fromJsonValue(m_group_permissions, json[QString("group_permissions")]);
    m_group_permissions_isSet = !json[QString("group_permissions")].isNull() && m_group_permissions_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("has_children")]);
    m_has_children_isSet = !json[QString("has_children")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mailinglist_mirror_isValid = ::OpenAPI::fromJsonValue(m_mailinglist_mirror, json[QString("mailinglist_mirror")]);
    m_mailinglist_mirror_isSet = !json[QString("mailinglist_mirror")].isNull() && m_mailinglist_mirror_isValid;

    m_minimum_required_tags_isValid = ::OpenAPI::fromJsonValue(m_minimum_required_tags, json[QString("minimum_required_tags")]);
    m_minimum_required_tags_isSet = !json[QString("minimum_required_tags")].isNull() && m_minimum_required_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_navigate_to_first_post_after_read_isValid = ::OpenAPI::fromJsonValue(m_navigate_to_first_post_after_read, json[QString("navigate_to_first_post_after_read")]);
    m_navigate_to_first_post_after_read_isSet = !json[QString("navigate_to_first_post_after_read")].isNull() && m_navigate_to_first_post_after_read_isValid;

    m_notification_level_isValid = ::OpenAPI::fromJsonValue(m_notification_level, json[QString("notification_level")]);
    m_notification_level_isSet = !json[QString("notification_level")].isNull() && m_notification_level_isValid;

    m_num_featured_topics_isValid = ::OpenAPI::fromJsonValue(m_num_featured_topics, json[QString("num_featured_topics")]);
    m_num_featured_topics_isSet = !json[QString("num_featured_topics")].isNull() && m_num_featured_topics_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_post_count_isValid = ::OpenAPI::fromJsonValue(m_post_count, json[QString("post_count")]);
    m_post_count_isSet = !json[QString("post_count")].isNull() && m_post_count_isValid;

    m_read_only_banner_isValid = ::OpenAPI::fromJsonValue(m_read_only_banner, json[QString("read_only_banner")]);
    m_read_only_banner_isSet = !json[QString("read_only_banner")].isNull() && m_read_only_banner_isValid;

    m_read_restricted_isValid = ::OpenAPI::fromJsonValue(m_read_restricted, json[QString("read_restricted")]);
    m_read_restricted_isSet = !json[QString("read_restricted")].isNull() && m_read_restricted_isValid;

    m_required_tag_groups_isValid = ::OpenAPI::fromJsonValue(m_required_tag_groups, json[QString("required_tag_groups")]);
    m_required_tag_groups_isSet = !json[QString("required_tag_groups")].isNull() && m_required_tag_groups_isValid;

    m_search_priority_isValid = ::OpenAPI::fromJsonValue(m_search_priority, json[QString("search_priority")]);
    m_search_priority_isSet = !json[QString("search_priority")].isNull() && m_search_priority_isValid;

    m_show_subcategory_list_isValid = ::OpenAPI::fromJsonValue(m_show_subcategory_list, json[QString("show_subcategory_list")]);
    m_show_subcategory_list_isSet = !json[QString("show_subcategory_list")].isNull() && m_show_subcategory_list_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_sort_ascending_isValid = ::OpenAPI::fromJsonValue(m_sort_ascending, json[QString("sort_ascending")]);
    m_sort_ascending_isSet = !json[QString("sort_ascending")].isNull() && m_sort_ascending_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_subcategory_list_style_isValid = ::OpenAPI::fromJsonValue(m_subcategory_list_style, json[QString("subcategory_list_style")]);
    m_subcategory_list_style_isSet = !json[QString("subcategory_list_style")].isNull() && m_subcategory_list_style_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("text_color")]);
    m_text_color_isSet = !json[QString("text_color")].isNull() && m_text_color_isValid;

    m_topic_count_isValid = ::OpenAPI::fromJsonValue(m_topic_count, json[QString("topic_count")]);
    m_topic_count_isSet = !json[QString("topic_count")].isNull() && m_topic_count_isValid;

    m_topic_featured_link_allowed_isValid = ::OpenAPI::fromJsonValue(m_topic_featured_link_allowed, json[QString("topic_featured_link_allowed")]);
    m_topic_featured_link_allowed_isSet = !json[QString("topic_featured_link_allowed")].isNull() && m_topic_featured_link_allowed_isValid;

    m_topic_template_isValid = ::OpenAPI::fromJsonValue(m_topic_template, json[QString("topic_template")]);
    m_topic_template_isSet = !json[QString("topic_template")].isNull() && m_topic_template_isValid;

    m_topic_url_isValid = ::OpenAPI::fromJsonValue(m_topic_url, json[QString("topic_url")]);
    m_topic_url_isSet = !json[QString("topic_url")].isNull() && m_topic_url_isValid;

    m_uploaded_background_isValid = ::OpenAPI::fromJsonValue(m_uploaded_background, json[QString("uploaded_background")]);
    m_uploaded_background_isSet = !json[QString("uploaded_background")].isNull() && m_uploaded_background_isValid;

    m_uploaded_logo_isValid = ::OpenAPI::fromJsonValue(m_uploaded_logo, json[QString("uploaded_logo")]);
    m_uploaded_logo_isSet = !json[QString("uploaded_logo")].isNull() && m_uploaded_logo_isValid;

    m_uploaded_logo_dark_isValid = ::OpenAPI::fromJsonValue(m_uploaded_logo_dark, json[QString("uploaded_logo_dark")]);
    m_uploaded_logo_dark_isSet = !json[QString("uploaded_logo_dark")].isNull() && m_uploaded_logo_dark_isValid;
}

QString OAIUpdateCategory_200_response_category::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCategory_200_response_category::asJsonObject() const {
    QJsonObject obj;
    if (m_all_topics_wiki_isSet) {
        obj.insert(QString("all_topics_wiki"), ::OpenAPI::toJsonValue(m_all_topics_wiki));
    }
    if (m_allow_badges_isSet) {
        obj.insert(QString("allow_badges"), ::OpenAPI::toJsonValue(m_allow_badges));
    }
    if (m_allow_global_tags_isSet) {
        obj.insert(QString("allow_global_tags"), ::OpenAPI::toJsonValue(m_allow_global_tags));
    }
    if (m_allow_unlimited_owner_edits_on_first_post_isSet) {
        obj.insert(QString("allow_unlimited_owner_edits_on_first_post"), ::OpenAPI::toJsonValue(m_allow_unlimited_owner_edits_on_first_post));
    }
    if (m_allowed_tag_groups.size() > 0) {
        obj.insert(QString("allowed_tag_groups"), ::OpenAPI::toJsonValue(m_allowed_tag_groups));
    }
    if (m_allowed_tags.size() > 0) {
        obj.insert(QString("allowed_tags"), ::OpenAPI::toJsonValue(m_allowed_tags));
    }
    if (m_auto_close_based_on_last_post_isSet) {
        obj.insert(QString("auto_close_based_on_last_post"), ::OpenAPI::toJsonValue(m_auto_close_based_on_last_post));
    }
    if (m_auto_close_hours_isSet) {
        obj.insert(QString("auto_close_hours"), ::OpenAPI::toJsonValue(m_auto_close_hours));
    }
    if (m_available_groups.size() > 0) {
        obj.insert(QString("available_groups"), ::OpenAPI::toJsonValue(m_available_groups));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("can_delete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_category_setting_isSet) {
        obj.insert(QString("category_setting"), ::OpenAPI::toJsonValue(m_category_setting));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_default_list_filter_isSet) {
        obj.insert(QString("default_list_filter"), ::OpenAPI::toJsonValue(m_default_list_filter));
    }
    if (m_default_slow_mode_seconds_isSet) {
        obj.insert(QString("default_slow_mode_seconds"), ::OpenAPI::toJsonValue(m_default_slow_mode_seconds));
    }
    if (m_default_top_period_isSet) {
        obj.insert(QString("default_top_period"), ::OpenAPI::toJsonValue(m_default_top_period));
    }
    if (m_default_view_isSet) {
        obj.insert(QString("default_view"), ::OpenAPI::toJsonValue(m_default_view));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_excerpt_isSet) {
        obj.insert(QString("description_excerpt"), ::OpenAPI::toJsonValue(m_description_excerpt));
    }
    if (m_description_text_isSet) {
        obj.insert(QString("description_text"), ::OpenAPI::toJsonValue(m_description_text));
    }
    if (m_email_in_isSet) {
        obj.insert(QString("email_in"), ::OpenAPI::toJsonValue(m_email_in));
    }
    if (m_email_in_allow_strangers_isSet) {
        obj.insert(QString("email_in_allow_strangers"), ::OpenAPI::toJsonValue(m_email_in_allow_strangers));
    }
    if (m_form_template_ids.size() > 0) {
        obj.insert(QString("form_template_ids"), ::OpenAPI::toJsonValue(m_form_template_ids));
    }
    if (m_group_permissions.size() > 0) {
        obj.insert(QString("group_permissions"), ::OpenAPI::toJsonValue(m_group_permissions));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("has_children"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mailinglist_mirror_isSet) {
        obj.insert(QString("mailinglist_mirror"), ::OpenAPI::toJsonValue(m_mailinglist_mirror));
    }
    if (m_minimum_required_tags_isSet) {
        obj.insert(QString("minimum_required_tags"), ::OpenAPI::toJsonValue(m_minimum_required_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_navigate_to_first_post_after_read_isSet) {
        obj.insert(QString("navigate_to_first_post_after_read"), ::OpenAPI::toJsonValue(m_navigate_to_first_post_after_read));
    }
    if (m_notification_level_isSet) {
        obj.insert(QString("notification_level"), ::OpenAPI::toJsonValue(m_notification_level));
    }
    if (m_num_featured_topics_isSet) {
        obj.insert(QString("num_featured_topics"), ::OpenAPI::toJsonValue(m_num_featured_topics));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_post_count_isSet) {
        obj.insert(QString("post_count"), ::OpenAPI::toJsonValue(m_post_count));
    }
    if (m_read_only_banner_isSet) {
        obj.insert(QString("read_only_banner"), ::OpenAPI::toJsonValue(m_read_only_banner));
    }
    if (m_read_restricted_isSet) {
        obj.insert(QString("read_restricted"), ::OpenAPI::toJsonValue(m_read_restricted));
    }
    if (m_required_tag_groups.size() > 0) {
        obj.insert(QString("required_tag_groups"), ::OpenAPI::toJsonValue(m_required_tag_groups));
    }
    if (m_search_priority_isSet) {
        obj.insert(QString("search_priority"), ::OpenAPI::toJsonValue(m_search_priority));
    }
    if (m_show_subcategory_list_isSet) {
        obj.insert(QString("show_subcategory_list"), ::OpenAPI::toJsonValue(m_show_subcategory_list));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_sort_ascending_isSet) {
        obj.insert(QString("sort_ascending"), ::OpenAPI::toJsonValue(m_sort_ascending));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_subcategory_list_style_isSet) {
        obj.insert(QString("subcategory_list_style"), ::OpenAPI::toJsonValue(m_subcategory_list_style));
    }
    if (m_text_color_isSet) {
        obj.insert(QString("text_color"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_topic_count_isSet) {
        obj.insert(QString("topic_count"), ::OpenAPI::toJsonValue(m_topic_count));
    }
    if (m_topic_featured_link_allowed_isSet) {
        obj.insert(QString("topic_featured_link_allowed"), ::OpenAPI::toJsonValue(m_topic_featured_link_allowed));
    }
    if (m_topic_template_isSet) {
        obj.insert(QString("topic_template"), ::OpenAPI::toJsonValue(m_topic_template));
    }
    if (m_topic_url_isSet) {
        obj.insert(QString("topic_url"), ::OpenAPI::toJsonValue(m_topic_url));
    }
    if (m_uploaded_background_isSet) {
        obj.insert(QString("uploaded_background"), ::OpenAPI::toJsonValue(m_uploaded_background));
    }
    if (m_uploaded_logo_isSet) {
        obj.insert(QString("uploaded_logo"), ::OpenAPI::toJsonValue(m_uploaded_logo));
    }
    if (m_uploaded_logo_dark_isSet) {
        obj.insert(QString("uploaded_logo_dark"), ::OpenAPI::toJsonValue(m_uploaded_logo_dark));
    }
    return obj;
}

bool OAIUpdateCategory_200_response_category::isAllTopicsWiki() const {
    return m_all_topics_wiki;
}
void OAIUpdateCategory_200_response_category::setAllTopicsWiki(const bool &all_topics_wiki) {
    m_all_topics_wiki = all_topics_wiki;
    m_all_topics_wiki_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_all_topics_wiki_Set() const{
    return m_all_topics_wiki_isSet;
}

bool OAIUpdateCategory_200_response_category::is_all_topics_wiki_Valid() const{
    return m_all_topics_wiki_isValid;
}

bool OAIUpdateCategory_200_response_category::isAllowBadges() const {
    return m_allow_badges;
}
void OAIUpdateCategory_200_response_category::setAllowBadges(const bool &allow_badges) {
    m_allow_badges = allow_badges;
    m_allow_badges_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_allow_badges_Set() const{
    return m_allow_badges_isSet;
}

bool OAIUpdateCategory_200_response_category::is_allow_badges_Valid() const{
    return m_allow_badges_isValid;
}

bool OAIUpdateCategory_200_response_category::isAllowGlobalTags() const {
    return m_allow_global_tags;
}
void OAIUpdateCategory_200_response_category::setAllowGlobalTags(const bool &allow_global_tags) {
    m_allow_global_tags = allow_global_tags;
    m_allow_global_tags_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_allow_global_tags_Set() const{
    return m_allow_global_tags_isSet;
}

bool OAIUpdateCategory_200_response_category::is_allow_global_tags_Valid() const{
    return m_allow_global_tags_isValid;
}

bool OAIUpdateCategory_200_response_category::isAllowUnlimitedOwnerEditsOnFirstPost() const {
    return m_allow_unlimited_owner_edits_on_first_post;
}
void OAIUpdateCategory_200_response_category::setAllowUnlimitedOwnerEditsOnFirstPost(const bool &allow_unlimited_owner_edits_on_first_post) {
    m_allow_unlimited_owner_edits_on_first_post = allow_unlimited_owner_edits_on_first_post;
    m_allow_unlimited_owner_edits_on_first_post_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_allow_unlimited_owner_edits_on_first_post_Set() const{
    return m_allow_unlimited_owner_edits_on_first_post_isSet;
}

bool OAIUpdateCategory_200_response_category::is_allow_unlimited_owner_edits_on_first_post_Valid() const{
    return m_allow_unlimited_owner_edits_on_first_post_isValid;
}

QList<QJsonValue> OAIUpdateCategory_200_response_category::getAllowedTagGroups() const {
    return m_allowed_tag_groups;
}
void OAIUpdateCategory_200_response_category::setAllowedTagGroups(const QList<QJsonValue> &allowed_tag_groups) {
    m_allowed_tag_groups = allowed_tag_groups;
    m_allowed_tag_groups_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_allowed_tag_groups_Set() const{
    return m_allowed_tag_groups_isSet;
}

bool OAIUpdateCategory_200_response_category::is_allowed_tag_groups_Valid() const{
    return m_allowed_tag_groups_isValid;
}

QList<QJsonValue> OAIUpdateCategory_200_response_category::getAllowedTags() const {
    return m_allowed_tags;
}
void OAIUpdateCategory_200_response_category::setAllowedTags(const QList<QJsonValue> &allowed_tags) {
    m_allowed_tags = allowed_tags;
    m_allowed_tags_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_allowed_tags_Set() const{
    return m_allowed_tags_isSet;
}

bool OAIUpdateCategory_200_response_category::is_allowed_tags_Valid() const{
    return m_allowed_tags_isValid;
}

bool OAIUpdateCategory_200_response_category::isAutoCloseBasedOnLastPost() const {
    return m_auto_close_based_on_last_post;
}
void OAIUpdateCategory_200_response_category::setAutoCloseBasedOnLastPost(const bool &auto_close_based_on_last_post) {
    m_auto_close_based_on_last_post = auto_close_based_on_last_post;
    m_auto_close_based_on_last_post_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_auto_close_based_on_last_post_Set() const{
    return m_auto_close_based_on_last_post_isSet;
}

bool OAIUpdateCategory_200_response_category::is_auto_close_based_on_last_post_Valid() const{
    return m_auto_close_based_on_last_post_isValid;
}

QString OAIUpdateCategory_200_response_category::getAutoCloseHours() const {
    return m_auto_close_hours;
}
void OAIUpdateCategory_200_response_category::setAutoCloseHours(const QString &auto_close_hours) {
    m_auto_close_hours = auto_close_hours;
    m_auto_close_hours_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_auto_close_hours_Set() const{
    return m_auto_close_hours_isSet;
}

bool OAIUpdateCategory_200_response_category::is_auto_close_hours_Valid() const{
    return m_auto_close_hours_isValid;
}

QList<QJsonValue> OAIUpdateCategory_200_response_category::getAvailableGroups() const {
    return m_available_groups;
}
void OAIUpdateCategory_200_response_category::setAvailableGroups(const QList<QJsonValue> &available_groups) {
    m_available_groups = available_groups;
    m_available_groups_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_available_groups_Set() const{
    return m_available_groups_isSet;
}

bool OAIUpdateCategory_200_response_category::is_available_groups_Valid() const{
    return m_available_groups_isValid;
}

bool OAIUpdateCategory_200_response_category::isCanDelete() const {
    return m_can_delete;
}
void OAIUpdateCategory_200_response_category::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIUpdateCategory_200_response_category::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIUpdateCategory_200_response_category::isCanEdit() const {
    return m_can_edit;
}
void OAIUpdateCategory_200_response_category::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIUpdateCategory_200_response_category::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

QJsonValue OAIUpdateCategory_200_response_category::getCategorySetting() const {
    return m_category_setting;
}
void OAIUpdateCategory_200_response_category::setCategorySetting(const QJsonValue &category_setting) {
    m_category_setting = category_setting;
    m_category_setting_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_category_setting_Set() const{
    return m_category_setting_isSet;
}

bool OAIUpdateCategory_200_response_category::is_category_setting_Valid() const{
    return m_category_setting_isValid;
}

QString OAIUpdateCategory_200_response_category::getColor() const {
    return m_color;
}
void OAIUpdateCategory_200_response_category::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_color_Set() const{
    return m_color_isSet;
}

bool OAIUpdateCategory_200_response_category::is_color_Valid() const{
    return m_color_isValid;
}

QMap<QString, QJsonValue> OAIUpdateCategory_200_response_category::getCustomFields() const {
    return m_custom_fields;
}
void OAIUpdateCategory_200_response_category::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIUpdateCategory_200_response_category::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIUpdateCategory_200_response_category::getDefaultListFilter() const {
    return m_default_list_filter;
}
void OAIUpdateCategory_200_response_category::setDefaultListFilter(const QString &default_list_filter) {
    m_default_list_filter = default_list_filter;
    m_default_list_filter_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_default_list_filter_Set() const{
    return m_default_list_filter_isSet;
}

bool OAIUpdateCategory_200_response_category::is_default_list_filter_Valid() const{
    return m_default_list_filter_isValid;
}

QString OAIUpdateCategory_200_response_category::getDefaultSlowModeSeconds() const {
    return m_default_slow_mode_seconds;
}
void OAIUpdateCategory_200_response_category::setDefaultSlowModeSeconds(const QString &default_slow_mode_seconds) {
    m_default_slow_mode_seconds = default_slow_mode_seconds;
    m_default_slow_mode_seconds_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_default_slow_mode_seconds_Set() const{
    return m_default_slow_mode_seconds_isSet;
}

bool OAIUpdateCategory_200_response_category::is_default_slow_mode_seconds_Valid() const{
    return m_default_slow_mode_seconds_isValid;
}

QString OAIUpdateCategory_200_response_category::getDefaultTopPeriod() const {
    return m_default_top_period;
}
void OAIUpdateCategory_200_response_category::setDefaultTopPeriod(const QString &default_top_period) {
    m_default_top_period = default_top_period;
    m_default_top_period_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_default_top_period_Set() const{
    return m_default_top_period_isSet;
}

bool OAIUpdateCategory_200_response_category::is_default_top_period_Valid() const{
    return m_default_top_period_isValid;
}

QString OAIUpdateCategory_200_response_category::getDefaultView() const {
    return m_default_view;
}
void OAIUpdateCategory_200_response_category::setDefaultView(const QString &default_view) {
    m_default_view = default_view;
    m_default_view_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_default_view_Set() const{
    return m_default_view_isSet;
}

bool OAIUpdateCategory_200_response_category::is_default_view_Valid() const{
    return m_default_view_isValid;
}

QString OAIUpdateCategory_200_response_category::getDescription() const {
    return m_description;
}
void OAIUpdateCategory_200_response_category::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateCategory_200_response_category::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateCategory_200_response_category::getDescriptionExcerpt() const {
    return m_description_excerpt;
}
void OAIUpdateCategory_200_response_category::setDescriptionExcerpt(const QString &description_excerpt) {
    m_description_excerpt = description_excerpt;
    m_description_excerpt_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_description_excerpt_Set() const{
    return m_description_excerpt_isSet;
}

bool OAIUpdateCategory_200_response_category::is_description_excerpt_Valid() const{
    return m_description_excerpt_isValid;
}

QString OAIUpdateCategory_200_response_category::getDescriptionText() const {
    return m_description_text;
}
void OAIUpdateCategory_200_response_category::setDescriptionText(const QString &description_text) {
    m_description_text = description_text;
    m_description_text_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_description_text_Set() const{
    return m_description_text_isSet;
}

bool OAIUpdateCategory_200_response_category::is_description_text_Valid() const{
    return m_description_text_isValid;
}

QString OAIUpdateCategory_200_response_category::getEmailIn() const {
    return m_email_in;
}
void OAIUpdateCategory_200_response_category::setEmailIn(const QString &email_in) {
    m_email_in = email_in;
    m_email_in_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_email_in_Set() const{
    return m_email_in_isSet;
}

bool OAIUpdateCategory_200_response_category::is_email_in_Valid() const{
    return m_email_in_isValid;
}

bool OAIUpdateCategory_200_response_category::isEmailInAllowStrangers() const {
    return m_email_in_allow_strangers;
}
void OAIUpdateCategory_200_response_category::setEmailInAllowStrangers(const bool &email_in_allow_strangers) {
    m_email_in_allow_strangers = email_in_allow_strangers;
    m_email_in_allow_strangers_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_email_in_allow_strangers_Set() const{
    return m_email_in_allow_strangers_isSet;
}

bool OAIUpdateCategory_200_response_category::is_email_in_allow_strangers_Valid() const{
    return m_email_in_allow_strangers_isValid;
}

QList<QJsonValue> OAIUpdateCategory_200_response_category::getFormTemplateIds() const {
    return m_form_template_ids;
}
void OAIUpdateCategory_200_response_category::setFormTemplateIds(const QList<QJsonValue> &form_template_ids) {
    m_form_template_ids = form_template_ids;
    m_form_template_ids_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_form_template_ids_Set() const{
    return m_form_template_ids_isSet;
}

bool OAIUpdateCategory_200_response_category::is_form_template_ids_Valid() const{
    return m_form_template_ids_isValid;
}

QList<OAIGetCategory_200_response_category_group_permissions_inner> OAIUpdateCategory_200_response_category::getGroupPermissions() const {
    return m_group_permissions;
}
void OAIUpdateCategory_200_response_category::setGroupPermissions(const QList<OAIGetCategory_200_response_category_group_permissions_inner> &group_permissions) {
    m_group_permissions = group_permissions;
    m_group_permissions_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_group_permissions_Set() const{
    return m_group_permissions_isSet;
}

bool OAIUpdateCategory_200_response_category::is_group_permissions_Valid() const{
    return m_group_permissions_isValid;
}

QString OAIUpdateCategory_200_response_category::getHasChildren() const {
    return m_has_children;
}
void OAIUpdateCategory_200_response_category::setHasChildren(const QString &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIUpdateCategory_200_response_category::is_has_children_Valid() const{
    return m_has_children_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getId() const {
    return m_id;
}
void OAIUpdateCategory_200_response_category::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateCategory_200_response_category::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUpdateCategory_200_response_category::isMailinglistMirror() const {
    return m_mailinglist_mirror;
}
void OAIUpdateCategory_200_response_category::setMailinglistMirror(const bool &mailinglist_mirror) {
    m_mailinglist_mirror = mailinglist_mirror;
    m_mailinglist_mirror_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_mailinglist_mirror_Set() const{
    return m_mailinglist_mirror_isSet;
}

bool OAIUpdateCategory_200_response_category::is_mailinglist_mirror_Valid() const{
    return m_mailinglist_mirror_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getMinimumRequiredTags() const {
    return m_minimum_required_tags;
}
void OAIUpdateCategory_200_response_category::setMinimumRequiredTags(const qint32 &minimum_required_tags) {
    m_minimum_required_tags = minimum_required_tags;
    m_minimum_required_tags_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_minimum_required_tags_Set() const{
    return m_minimum_required_tags_isSet;
}

bool OAIUpdateCategory_200_response_category::is_minimum_required_tags_Valid() const{
    return m_minimum_required_tags_isValid;
}

QString OAIUpdateCategory_200_response_category::getName() const {
    return m_name;
}
void OAIUpdateCategory_200_response_category::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateCategory_200_response_category::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateCategory_200_response_category::isNavigateToFirstPostAfterRead() const {
    return m_navigate_to_first_post_after_read;
}
void OAIUpdateCategory_200_response_category::setNavigateToFirstPostAfterRead(const bool &navigate_to_first_post_after_read) {
    m_navigate_to_first_post_after_read = navigate_to_first_post_after_read;
    m_navigate_to_first_post_after_read_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_navigate_to_first_post_after_read_Set() const{
    return m_navigate_to_first_post_after_read_isSet;
}

bool OAIUpdateCategory_200_response_category::is_navigate_to_first_post_after_read_Valid() const{
    return m_navigate_to_first_post_after_read_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getNotificationLevel() const {
    return m_notification_level;
}
void OAIUpdateCategory_200_response_category::setNotificationLevel(const qint32 &notification_level) {
    m_notification_level = notification_level;
    m_notification_level_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_notification_level_Set() const{
    return m_notification_level_isSet;
}

bool OAIUpdateCategory_200_response_category::is_notification_level_Valid() const{
    return m_notification_level_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getNumFeaturedTopics() const {
    return m_num_featured_topics;
}
void OAIUpdateCategory_200_response_category::setNumFeaturedTopics(const qint32 &num_featured_topics) {
    m_num_featured_topics = num_featured_topics;
    m_num_featured_topics_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_num_featured_topics_Set() const{
    return m_num_featured_topics_isSet;
}

bool OAIUpdateCategory_200_response_category::is_num_featured_topics_Valid() const{
    return m_num_featured_topics_isValid;
}

QString OAIUpdateCategory_200_response_category::getPermission() const {
    return m_permission;
}
void OAIUpdateCategory_200_response_category::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIUpdateCategory_200_response_category::is_permission_Valid() const{
    return m_permission_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getPosition() const {
    return m_position;
}
void OAIUpdateCategory_200_response_category::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_position_Set() const{
    return m_position_isSet;
}

bool OAIUpdateCategory_200_response_category::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getPostCount() const {
    return m_post_count;
}
void OAIUpdateCategory_200_response_category::setPostCount(const qint32 &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool OAIUpdateCategory_200_response_category::is_post_count_Valid() const{
    return m_post_count_isValid;
}

QString OAIUpdateCategory_200_response_category::getReadOnlyBanner() const {
    return m_read_only_banner;
}
void OAIUpdateCategory_200_response_category::setReadOnlyBanner(const QString &read_only_banner) {
    m_read_only_banner = read_only_banner;
    m_read_only_banner_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_read_only_banner_Set() const{
    return m_read_only_banner_isSet;
}

bool OAIUpdateCategory_200_response_category::is_read_only_banner_Valid() const{
    return m_read_only_banner_isValid;
}

bool OAIUpdateCategory_200_response_category::isReadRestricted() const {
    return m_read_restricted;
}
void OAIUpdateCategory_200_response_category::setReadRestricted(const bool &read_restricted) {
    m_read_restricted = read_restricted;
    m_read_restricted_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_read_restricted_Set() const{
    return m_read_restricted_isSet;
}

bool OAIUpdateCategory_200_response_category::is_read_restricted_Valid() const{
    return m_read_restricted_isValid;
}

QList<OAIGetCategory_200_response_category_required_tag_groups_inner> OAIUpdateCategory_200_response_category::getRequiredTagGroups() const {
    return m_required_tag_groups;
}
void OAIUpdateCategory_200_response_category::setRequiredTagGroups(const QList<OAIGetCategory_200_response_category_required_tag_groups_inner> &required_tag_groups) {
    m_required_tag_groups = required_tag_groups;
    m_required_tag_groups_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_required_tag_groups_Set() const{
    return m_required_tag_groups_isSet;
}

bool OAIUpdateCategory_200_response_category::is_required_tag_groups_Valid() const{
    return m_required_tag_groups_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getSearchPriority() const {
    return m_search_priority;
}
void OAIUpdateCategory_200_response_category::setSearchPriority(const qint32 &search_priority) {
    m_search_priority = search_priority;
    m_search_priority_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_search_priority_Set() const{
    return m_search_priority_isSet;
}

bool OAIUpdateCategory_200_response_category::is_search_priority_Valid() const{
    return m_search_priority_isValid;
}

bool OAIUpdateCategory_200_response_category::isShowSubcategoryList() const {
    return m_show_subcategory_list;
}
void OAIUpdateCategory_200_response_category::setShowSubcategoryList(const bool &show_subcategory_list) {
    m_show_subcategory_list = show_subcategory_list;
    m_show_subcategory_list_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_show_subcategory_list_Set() const{
    return m_show_subcategory_list_isSet;
}

bool OAIUpdateCategory_200_response_category::is_show_subcategory_list_Valid() const{
    return m_show_subcategory_list_isValid;
}

QString OAIUpdateCategory_200_response_category::getSlug() const {
    return m_slug;
}
void OAIUpdateCategory_200_response_category::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIUpdateCategory_200_response_category::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIUpdateCategory_200_response_category::getSortAscending() const {
    return m_sort_ascending;
}
void OAIUpdateCategory_200_response_category::setSortAscending(const QString &sort_ascending) {
    m_sort_ascending = sort_ascending;
    m_sort_ascending_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_sort_ascending_Set() const{
    return m_sort_ascending_isSet;
}

bool OAIUpdateCategory_200_response_category::is_sort_ascending_Valid() const{
    return m_sort_ascending_isValid;
}

QString OAIUpdateCategory_200_response_category::getSortOrder() const {
    return m_sort_order;
}
void OAIUpdateCategory_200_response_category::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIUpdateCategory_200_response_category::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIUpdateCategory_200_response_category::getSubcategoryListStyle() const {
    return m_subcategory_list_style;
}
void OAIUpdateCategory_200_response_category::setSubcategoryListStyle(const QString &subcategory_list_style) {
    m_subcategory_list_style = subcategory_list_style;
    m_subcategory_list_style_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_subcategory_list_style_Set() const{
    return m_subcategory_list_style_isSet;
}

bool OAIUpdateCategory_200_response_category::is_subcategory_list_style_Valid() const{
    return m_subcategory_list_style_isValid;
}

QString OAIUpdateCategory_200_response_category::getTextColor() const {
    return m_text_color;
}
void OAIUpdateCategory_200_response_category::setTextColor(const QString &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIUpdateCategory_200_response_category::is_text_color_Valid() const{
    return m_text_color_isValid;
}

qint32 OAIUpdateCategory_200_response_category::getTopicCount() const {
    return m_topic_count;
}
void OAIUpdateCategory_200_response_category::setTopicCount(const qint32 &topic_count) {
    m_topic_count = topic_count;
    m_topic_count_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_topic_count_Set() const{
    return m_topic_count_isSet;
}

bool OAIUpdateCategory_200_response_category::is_topic_count_Valid() const{
    return m_topic_count_isValid;
}

bool OAIUpdateCategory_200_response_category::isTopicFeaturedLinkAllowed() const {
    return m_topic_featured_link_allowed;
}
void OAIUpdateCategory_200_response_category::setTopicFeaturedLinkAllowed(const bool &topic_featured_link_allowed) {
    m_topic_featured_link_allowed = topic_featured_link_allowed;
    m_topic_featured_link_allowed_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_topic_featured_link_allowed_Set() const{
    return m_topic_featured_link_allowed_isSet;
}

bool OAIUpdateCategory_200_response_category::is_topic_featured_link_allowed_Valid() const{
    return m_topic_featured_link_allowed_isValid;
}

QString OAIUpdateCategory_200_response_category::getTopicTemplate() const {
    return m_topic_template;
}
void OAIUpdateCategory_200_response_category::setTopicTemplate(const QString &topic_template) {
    m_topic_template = topic_template;
    m_topic_template_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_topic_template_Set() const{
    return m_topic_template_isSet;
}

bool OAIUpdateCategory_200_response_category::is_topic_template_Valid() const{
    return m_topic_template_isValid;
}

QString OAIUpdateCategory_200_response_category::getTopicUrl() const {
    return m_topic_url;
}
void OAIUpdateCategory_200_response_category::setTopicUrl(const QString &topic_url) {
    m_topic_url = topic_url;
    m_topic_url_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_topic_url_Set() const{
    return m_topic_url_isSet;
}

bool OAIUpdateCategory_200_response_category::is_topic_url_Valid() const{
    return m_topic_url_isValid;
}

QString OAIUpdateCategory_200_response_category::getUploadedBackground() const {
    return m_uploaded_background;
}
void OAIUpdateCategory_200_response_category::setUploadedBackground(const QString &uploaded_background) {
    m_uploaded_background = uploaded_background;
    m_uploaded_background_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_uploaded_background_Set() const{
    return m_uploaded_background_isSet;
}

bool OAIUpdateCategory_200_response_category::is_uploaded_background_Valid() const{
    return m_uploaded_background_isValid;
}

QString OAIUpdateCategory_200_response_category::getUploadedLogo() const {
    return m_uploaded_logo;
}
void OAIUpdateCategory_200_response_category::setUploadedLogo(const QString &uploaded_logo) {
    m_uploaded_logo = uploaded_logo;
    m_uploaded_logo_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_uploaded_logo_Set() const{
    return m_uploaded_logo_isSet;
}

bool OAIUpdateCategory_200_response_category::is_uploaded_logo_Valid() const{
    return m_uploaded_logo_isValid;
}

QString OAIUpdateCategory_200_response_category::getUploadedLogoDark() const {
    return m_uploaded_logo_dark;
}
void OAIUpdateCategory_200_response_category::setUploadedLogoDark(const QString &uploaded_logo_dark) {
    m_uploaded_logo_dark = uploaded_logo_dark;
    m_uploaded_logo_dark_isSet = true;
}

bool OAIUpdateCategory_200_response_category::is_uploaded_logo_dark_Set() const{
    return m_uploaded_logo_dark_isSet;
}

bool OAIUpdateCategory_200_response_category::is_uploaded_logo_dark_Valid() const{
    return m_uploaded_logo_dark_isValid;
}

bool OAIUpdateCategory_200_response_category::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_topics_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_badges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_global_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_unlimited_owner_edits_on_first_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_tag_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_close_based_on_last_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_close_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_list_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_slow_mode_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_top_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_in_allow_strangers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_template_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailinglist_mirror_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_required_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigate_to_first_post_after_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_featured_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_tag_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_subcategory_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_ascending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategory_list_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_featured_link_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_logo_dark_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCategory_200_response_category::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_topics_wiki_isValid && m_allow_badges_isValid && m_allow_unlimited_owner_edits_on_first_post_isValid && m_auto_close_based_on_last_post_isValid && m_auto_close_hours_isValid && m_available_groups_isValid && m_can_delete_isValid && m_can_edit_isValid && m_color_isValid && m_custom_fields_isValid && m_default_list_filter_isValid && m_default_slow_mode_seconds_isValid && m_default_top_period_isValid && m_default_view_isValid && m_description_isValid && m_description_excerpt_isValid && m_description_text_isValid && m_email_in_isValid && m_email_in_allow_strangers_isValid && m_form_template_ids_isValid && m_group_permissions_isValid && m_has_children_isValid && m_id_isValid && m_mailinglist_mirror_isValid && m_minimum_required_tags_isValid && m_name_isValid && m_navigate_to_first_post_after_read_isValid && m_notification_level_isValid && m_num_featured_topics_isValid && m_permission_isValid && m_position_isValid && m_post_count_isValid && m_read_only_banner_isValid && m_read_restricted_isValid && m_required_tag_groups_isValid && m_search_priority_isValid && m_show_subcategory_list_isValid && m_slug_isValid && m_sort_ascending_isValid && m_sort_order_isValid && m_subcategory_list_style_isValid && m_text_color_isValid && m_topic_count_isValid && m_topic_featured_link_allowed_isValid && m_topic_template_isValid && m_topic_url_isValid && m_uploaded_background_isValid && m_uploaded_logo_isValid && m_uploaded_logo_dark_isValid && true;
}

} // namespace OpenAPI
