/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTopic_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTopic_200_response::OAIGetTopic_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTopic_200_response::OAIGetTopic_200_response() {
    this->initializeModel();
}

OAIGetTopic_200_response::~OAIGetTopic_200_response() {}

void OAIGetTopic_200_response::initializeModel() {

    m_actions_summary_isSet = false;
    m_actions_summary_isValid = false;

    m_archetype_isSet = false;
    m_archetype_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_bookmarked_isSet = false;
    m_bookmarked_isValid = false;

    m_bookmarks_isSet = false;
    m_bookmarks_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_chunk_size_isSet = false;
    m_chunk_size_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_post_number_isSet = false;
    m_current_post_number_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_deleted_by_isSet = false;
    m_deleted_by_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_draft_key_isSet = false;
    m_draft_key_isValid = false;

    m_draft_sequence_isSet = false;
    m_draft_sequence_isValid = false;

    m_fancy_title_isSet = false;
    m_fancy_title_isValid = false;

    m_featured_link_isSet = false;
    m_featured_link_isValid = false;

    m_has_deleted_isSet = false;
    m_has_deleted_isValid = false;

    m_has_summary_isSet = false;
    m_has_summary_isValid = false;

    m_highest_post_number_isSet = false;
    m_highest_post_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_last_posted_at_isSet = false;
    m_last_posted_at_isValid = false;

    m_like_count_isSet = false;
    m_like_count_isValid = false;

    m_message_bus_last_id_isSet = false;
    m_message_bus_last_id_isValid = false;

    m_participant_count_isSet = false;
    m_participant_count_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_pinned_at_isSet = false;
    m_pinned_at_isValid = false;

    m_pinned_globally_isSet = false;
    m_pinned_globally_isValid = false;

    m_pinned_until_isSet = false;
    m_pinned_until_isValid = false;

    m_post_stream_isSet = false;
    m_post_stream_isValid = false;

    m_posts_count_isSet = false;
    m_posts_count_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_show_read_indicator_isSet = false;
    m_show_read_indicator_isValid = false;

    m_slow_mode_enabled_until_isSet = false;
    m_slow_mode_enabled_until_isValid = false;

    m_slow_mode_seconds_isSet = false;
    m_slow_mode_seconds_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_suggested_topics_isSet = false;
    m_suggested_topics_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tags_descriptions_isSet = false;
    m_tags_descriptions_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_timeline_lookup_isSet = false;
    m_timeline_lookup_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topic_timer_isSet = false;
    m_topic_timer_isValid = false;

    m_unpinned_isSet = false;
    m_unpinned_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIGetTopic_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTopic_200_response::fromJsonObject(QJsonObject json) {

    m_actions_summary_isValid = ::OpenAPI::fromJsonValue(m_actions_summary, json[QString("actions_summary")]);
    m_actions_summary_isSet = !json[QString("actions_summary")].isNull() && m_actions_summary_isValid;

    m_archetype_isValid = ::OpenAPI::fromJsonValue(m_archetype, json[QString("archetype")]);
    m_archetype_isSet = !json[QString("archetype")].isNull() && m_archetype_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_bookmarked_isValid = ::OpenAPI::fromJsonValue(m_bookmarked, json[QString("bookmarked")]);
    m_bookmarked_isSet = !json[QString("bookmarked")].isNull() && m_bookmarked_isValid;

    m_bookmarks_isValid = ::OpenAPI::fromJsonValue(m_bookmarks, json[QString("bookmarks")]);
    m_bookmarks_isSet = !json[QString("bookmarks")].isNull() && m_bookmarks_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_chunk_size_isValid = ::OpenAPI::fromJsonValue(m_chunk_size, json[QString("chunk_size")]);
    m_chunk_size_isSet = !json[QString("chunk_size")].isNull() && m_chunk_size_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_post_number_isValid = ::OpenAPI::fromJsonValue(m_current_post_number, json[QString("current_post_number")]);
    m_current_post_number_isSet = !json[QString("current_post_number")].isNull() && m_current_post_number_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_deleted_by_isValid = ::OpenAPI::fromJsonValue(m_deleted_by, json[QString("deleted_by")]);
    m_deleted_by_isSet = !json[QString("deleted_by")].isNull() && m_deleted_by_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_draft_key_isValid = ::OpenAPI::fromJsonValue(m_draft_key, json[QString("draft_key")]);
    m_draft_key_isSet = !json[QString("draft_key")].isNull() && m_draft_key_isValid;

    m_draft_sequence_isValid = ::OpenAPI::fromJsonValue(m_draft_sequence, json[QString("draft_sequence")]);
    m_draft_sequence_isSet = !json[QString("draft_sequence")].isNull() && m_draft_sequence_isValid;

    m_fancy_title_isValid = ::OpenAPI::fromJsonValue(m_fancy_title, json[QString("fancy_title")]);
    m_fancy_title_isSet = !json[QString("fancy_title")].isNull() && m_fancy_title_isValid;

    m_featured_link_isValid = ::OpenAPI::fromJsonValue(m_featured_link, json[QString("featured_link")]);
    m_featured_link_isSet = !json[QString("featured_link")].isNull() && m_featured_link_isValid;

    m_has_deleted_isValid = ::OpenAPI::fromJsonValue(m_has_deleted, json[QString("has_deleted")]);
    m_has_deleted_isSet = !json[QString("has_deleted")].isNull() && m_has_deleted_isValid;

    m_has_summary_isValid = ::OpenAPI::fromJsonValue(m_has_summary, json[QString("has_summary")]);
    m_has_summary_isSet = !json[QString("has_summary")].isNull() && m_has_summary_isValid;

    m_highest_post_number_isValid = ::OpenAPI::fromJsonValue(m_highest_post_number, json[QString("highest_post_number")]);
    m_highest_post_number_isSet = !json[QString("highest_post_number")].isNull() && m_highest_post_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_last_posted_at_isValid = ::OpenAPI::fromJsonValue(m_last_posted_at, json[QString("last_posted_at")]);
    m_last_posted_at_isSet = !json[QString("last_posted_at")].isNull() && m_last_posted_at_isValid;

    m_like_count_isValid = ::OpenAPI::fromJsonValue(m_like_count, json[QString("like_count")]);
    m_like_count_isSet = !json[QString("like_count")].isNull() && m_like_count_isValid;

    m_message_bus_last_id_isValid = ::OpenAPI::fromJsonValue(m_message_bus_last_id, json[QString("message_bus_last_id")]);
    m_message_bus_last_id_isSet = !json[QString("message_bus_last_id")].isNull() && m_message_bus_last_id_isValid;

    m_participant_count_isValid = ::OpenAPI::fromJsonValue(m_participant_count, json[QString("participant_count")]);
    m_participant_count_isSet = !json[QString("participant_count")].isNull() && m_participant_count_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_pinned_at_isValid = ::OpenAPI::fromJsonValue(m_pinned_at, json[QString("pinned_at")]);
    m_pinned_at_isSet = !json[QString("pinned_at")].isNull() && m_pinned_at_isValid;

    m_pinned_globally_isValid = ::OpenAPI::fromJsonValue(m_pinned_globally, json[QString("pinned_globally")]);
    m_pinned_globally_isSet = !json[QString("pinned_globally")].isNull() && m_pinned_globally_isValid;

    m_pinned_until_isValid = ::OpenAPI::fromJsonValue(m_pinned_until, json[QString("pinned_until")]);
    m_pinned_until_isSet = !json[QString("pinned_until")].isNull() && m_pinned_until_isValid;

    m_post_stream_isValid = ::OpenAPI::fromJsonValue(m_post_stream, json[QString("post_stream")]);
    m_post_stream_isSet = !json[QString("post_stream")].isNull() && m_post_stream_isValid;

    m_posts_count_isValid = ::OpenAPI::fromJsonValue(m_posts_count, json[QString("posts_count")]);
    m_posts_count_isSet = !json[QString("posts_count")].isNull() && m_posts_count_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("reply_count")]);
    m_reply_count_isSet = !json[QString("reply_count")].isNull() && m_reply_count_isValid;

    m_show_read_indicator_isValid = ::OpenAPI::fromJsonValue(m_show_read_indicator, json[QString("show_read_indicator")]);
    m_show_read_indicator_isSet = !json[QString("show_read_indicator")].isNull() && m_show_read_indicator_isValid;

    m_slow_mode_enabled_until_isValid = ::OpenAPI::fromJsonValue(m_slow_mode_enabled_until, json[QString("slow_mode_enabled_until")]);
    m_slow_mode_enabled_until_isSet = !json[QString("slow_mode_enabled_until")].isNull() && m_slow_mode_enabled_until_isValid;

    m_slow_mode_seconds_isValid = ::OpenAPI::fromJsonValue(m_slow_mode_seconds, json[QString("slow_mode_seconds")]);
    m_slow_mode_seconds_isSet = !json[QString("slow_mode_seconds")].isNull() && m_slow_mode_seconds_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_suggested_topics_isValid = ::OpenAPI::fromJsonValue(m_suggested_topics, json[QString("suggested_topics")]);
    m_suggested_topics_isSet = !json[QString("suggested_topics")].isNull() && m_suggested_topics_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tags_descriptions_isValid = ::OpenAPI::fromJsonValue(m_tags_descriptions, json[QString("tags_descriptions")]);
    m_tags_descriptions_isSet = !json[QString("tags_descriptions")].isNull() && m_tags_descriptions_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_timeline_lookup_isValid = ::OpenAPI::fromJsonValue(m_timeline_lookup, json[QString("timeline_lookup")]);
    m_timeline_lookup_isSet = !json[QString("timeline_lookup")].isNull() && m_timeline_lookup_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topic_timer_isValid = ::OpenAPI::fromJsonValue(m_topic_timer, json[QString("topic_timer")]);
    m_topic_timer_isSet = !json[QString("topic_timer")].isNull() && m_topic_timer_isValid;

    m_unpinned_isValid = ::OpenAPI::fromJsonValue(m_unpinned, json[QString("unpinned")]);
    m_unpinned_isSet = !json[QString("unpinned")].isNull() && m_unpinned_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIGetTopic_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTopic_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_actions_summary.size() > 0) {
        obj.insert(QString("actions_summary"), ::OpenAPI::toJsonValue(m_actions_summary));
    }
    if (m_archetype_isSet) {
        obj.insert(QString("archetype"), ::OpenAPI::toJsonValue(m_archetype));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_bookmarked_isSet) {
        obj.insert(QString("bookmarked"), ::OpenAPI::toJsonValue(m_bookmarked));
    }
    if (m_bookmarks.size() > 0) {
        obj.insert(QString("bookmarks"), ::OpenAPI::toJsonValue(m_bookmarks));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_chunk_size_isSet) {
        obj.insert(QString("chunk_size"), ::OpenAPI::toJsonValue(m_chunk_size));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_post_number_isSet) {
        obj.insert(QString("current_post_number"), ::OpenAPI::toJsonValue(m_current_post_number));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_deleted_by_isSet) {
        obj.insert(QString("deleted_by"), ::OpenAPI::toJsonValue(m_deleted_by));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_draft_key_isSet) {
        obj.insert(QString("draft_key"), ::OpenAPI::toJsonValue(m_draft_key));
    }
    if (m_draft_sequence_isSet) {
        obj.insert(QString("draft_sequence"), ::OpenAPI::toJsonValue(m_draft_sequence));
    }
    if (m_fancy_title_isSet) {
        obj.insert(QString("fancy_title"), ::OpenAPI::toJsonValue(m_fancy_title));
    }
    if (m_featured_link_isSet) {
        obj.insert(QString("featured_link"), ::OpenAPI::toJsonValue(m_featured_link));
    }
    if (m_has_deleted_isSet) {
        obj.insert(QString("has_deleted"), ::OpenAPI::toJsonValue(m_has_deleted));
    }
    if (m_has_summary_isSet) {
        obj.insert(QString("has_summary"), ::OpenAPI::toJsonValue(m_has_summary));
    }
    if (m_highest_post_number_isSet) {
        obj.insert(QString("highest_post_number"), ::OpenAPI::toJsonValue(m_highest_post_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_last_posted_at_isSet) {
        obj.insert(QString("last_posted_at"), ::OpenAPI::toJsonValue(m_last_posted_at));
    }
    if (m_like_count_isSet) {
        obj.insert(QString("like_count"), ::OpenAPI::toJsonValue(m_like_count));
    }
    if (m_message_bus_last_id_isSet) {
        obj.insert(QString("message_bus_last_id"), ::OpenAPI::toJsonValue(m_message_bus_last_id));
    }
    if (m_participant_count_isSet) {
        obj.insert(QString("participant_count"), ::OpenAPI::toJsonValue(m_participant_count));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_pinned_at_isSet) {
        obj.insert(QString("pinned_at"), ::OpenAPI::toJsonValue(m_pinned_at));
    }
    if (m_pinned_globally_isSet) {
        obj.insert(QString("pinned_globally"), ::OpenAPI::toJsonValue(m_pinned_globally));
    }
    if (m_pinned_until_isSet) {
        obj.insert(QString("pinned_until"), ::OpenAPI::toJsonValue(m_pinned_until));
    }
    if (m_post_stream.isSet()) {
        obj.insert(QString("post_stream"), ::OpenAPI::toJsonValue(m_post_stream));
    }
    if (m_posts_count_isSet) {
        obj.insert(QString("posts_count"), ::OpenAPI::toJsonValue(m_posts_count));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("reply_count"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_show_read_indicator_isSet) {
        obj.insert(QString("show_read_indicator"), ::OpenAPI::toJsonValue(m_show_read_indicator));
    }
    if (m_slow_mode_enabled_until_isSet) {
        obj.insert(QString("slow_mode_enabled_until"), ::OpenAPI::toJsonValue(m_slow_mode_enabled_until));
    }
    if (m_slow_mode_seconds_isSet) {
        obj.insert(QString("slow_mode_seconds"), ::OpenAPI::toJsonValue(m_slow_mode_seconds));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_suggested_topics.size() > 0) {
        obj.insert(QString("suggested_topics"), ::OpenAPI::toJsonValue(m_suggested_topics));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tags_descriptions.size() > 0) {
        obj.insert(QString("tags_descriptions"), ::OpenAPI::toJsonValue(m_tags_descriptions));
    }
    if (m_thumbnails_isSet) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_timeline_lookup.size() > 0) {
        obj.insert(QString("timeline_lookup"), ::OpenAPI::toJsonValue(m_timeline_lookup));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topic_timer_isSet) {
        obj.insert(QString("topic_timer"), ::OpenAPI::toJsonValue(m_topic_timer));
    }
    if (m_unpinned_isSet) {
        obj.insert(QString("unpinned"), ::OpenAPI::toJsonValue(m_unpinned));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

QList<OAIGetTopic_200_response_actions_summary_inner> OAIGetTopic_200_response::getActionsSummary() const {
    return m_actions_summary;
}
void OAIGetTopic_200_response::setActionsSummary(const QList<OAIGetTopic_200_response_actions_summary_inner> &actions_summary) {
    m_actions_summary = actions_summary;
    m_actions_summary_isSet = true;
}

bool OAIGetTopic_200_response::is_actions_summary_Set() const{
    return m_actions_summary_isSet;
}

bool OAIGetTopic_200_response::is_actions_summary_Valid() const{
    return m_actions_summary_isValid;
}

QString OAIGetTopic_200_response::getArchetype() const {
    return m_archetype;
}
void OAIGetTopic_200_response::setArchetype(const QString &archetype) {
    m_archetype = archetype;
    m_archetype_isSet = true;
}

bool OAIGetTopic_200_response::is_archetype_Set() const{
    return m_archetype_isSet;
}

bool OAIGetTopic_200_response::is_archetype_Valid() const{
    return m_archetype_isValid;
}

bool OAIGetTopic_200_response::isArchived() const {
    return m_archived;
}
void OAIGetTopic_200_response::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIGetTopic_200_response::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIGetTopic_200_response::is_archived_Valid() const{
    return m_archived_isValid;
}

bool OAIGetTopic_200_response::isBookmarked() const {
    return m_bookmarked;
}
void OAIGetTopic_200_response::setBookmarked(const bool &bookmarked) {
    m_bookmarked = bookmarked;
    m_bookmarked_isSet = true;
}

bool OAIGetTopic_200_response::is_bookmarked_Set() const{
    return m_bookmarked_isSet;
}

bool OAIGetTopic_200_response::is_bookmarked_Valid() const{
    return m_bookmarked_isValid;
}

QList<QJsonValue> OAIGetTopic_200_response::getBookmarks() const {
    return m_bookmarks;
}
void OAIGetTopic_200_response::setBookmarks(const QList<QJsonValue> &bookmarks) {
    m_bookmarks = bookmarks;
    m_bookmarks_isSet = true;
}

bool OAIGetTopic_200_response::is_bookmarks_Set() const{
    return m_bookmarks_isSet;
}

bool OAIGetTopic_200_response::is_bookmarks_Valid() const{
    return m_bookmarks_isValid;
}

qint32 OAIGetTopic_200_response::getCategoryId() const {
    return m_category_id;
}
void OAIGetTopic_200_response::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIGetTopic_200_response::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIGetTopic_200_response::is_category_id_Valid() const{
    return m_category_id_isValid;
}

qint32 OAIGetTopic_200_response::getChunkSize() const {
    return m_chunk_size;
}
void OAIGetTopic_200_response::setChunkSize(const qint32 &chunk_size) {
    m_chunk_size = chunk_size;
    m_chunk_size_isSet = true;
}

bool OAIGetTopic_200_response::is_chunk_size_Set() const{
    return m_chunk_size_isSet;
}

bool OAIGetTopic_200_response::is_chunk_size_Valid() const{
    return m_chunk_size_isValid;
}

bool OAIGetTopic_200_response::isClosed() const {
    return m_closed;
}
void OAIGetTopic_200_response::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIGetTopic_200_response::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIGetTopic_200_response::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIGetTopic_200_response::getCreatedAt() const {
    return m_created_at;
}
void OAIGetTopic_200_response::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetTopic_200_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetTopic_200_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIGetTopic_200_response::getCurrentPostNumber() const {
    return m_current_post_number;
}
void OAIGetTopic_200_response::setCurrentPostNumber(const qint32 &current_post_number) {
    m_current_post_number = current_post_number;
    m_current_post_number_isSet = true;
}

bool OAIGetTopic_200_response::is_current_post_number_Set() const{
    return m_current_post_number_isSet;
}

bool OAIGetTopic_200_response::is_current_post_number_Valid() const{
    return m_current_post_number_isValid;
}

QString OAIGetTopic_200_response::getDeletedAt() const {
    return m_deleted_at;
}
void OAIGetTopic_200_response::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIGetTopic_200_response::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIGetTopic_200_response::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAIGetTopic_200_response::getDeletedBy() const {
    return m_deleted_by;
}
void OAIGetTopic_200_response::setDeletedBy(const QString &deleted_by) {
    m_deleted_by = deleted_by;
    m_deleted_by_isSet = true;
}

bool OAIGetTopic_200_response::is_deleted_by_Set() const{
    return m_deleted_by_isSet;
}

bool OAIGetTopic_200_response::is_deleted_by_Valid() const{
    return m_deleted_by_isValid;
}

OAIGetTopic_200_response_details OAIGetTopic_200_response::getDetails() const {
    return m_details;
}
void OAIGetTopic_200_response::setDetails(const OAIGetTopic_200_response_details &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIGetTopic_200_response::is_details_Set() const{
    return m_details_isSet;
}

bool OAIGetTopic_200_response::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIGetTopic_200_response::getDraft() const {
    return m_draft;
}
void OAIGetTopic_200_response::setDraft(const QString &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIGetTopic_200_response::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIGetTopic_200_response::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAIGetTopic_200_response::getDraftKey() const {
    return m_draft_key;
}
void OAIGetTopic_200_response::setDraftKey(const QString &draft_key) {
    m_draft_key = draft_key;
    m_draft_key_isSet = true;
}

bool OAIGetTopic_200_response::is_draft_key_Set() const{
    return m_draft_key_isSet;
}

bool OAIGetTopic_200_response::is_draft_key_Valid() const{
    return m_draft_key_isValid;
}

qint32 OAIGetTopic_200_response::getDraftSequence() const {
    return m_draft_sequence;
}
void OAIGetTopic_200_response::setDraftSequence(const qint32 &draft_sequence) {
    m_draft_sequence = draft_sequence;
    m_draft_sequence_isSet = true;
}

bool OAIGetTopic_200_response::is_draft_sequence_Set() const{
    return m_draft_sequence_isSet;
}

bool OAIGetTopic_200_response::is_draft_sequence_Valid() const{
    return m_draft_sequence_isValid;
}

QString OAIGetTopic_200_response::getFancyTitle() const {
    return m_fancy_title;
}
void OAIGetTopic_200_response::setFancyTitle(const QString &fancy_title) {
    m_fancy_title = fancy_title;
    m_fancy_title_isSet = true;
}

bool OAIGetTopic_200_response::is_fancy_title_Set() const{
    return m_fancy_title_isSet;
}

bool OAIGetTopic_200_response::is_fancy_title_Valid() const{
    return m_fancy_title_isValid;
}

QString OAIGetTopic_200_response::getFeaturedLink() const {
    return m_featured_link;
}
void OAIGetTopic_200_response::setFeaturedLink(const QString &featured_link) {
    m_featured_link = featured_link;
    m_featured_link_isSet = true;
}

bool OAIGetTopic_200_response::is_featured_link_Set() const{
    return m_featured_link_isSet;
}

bool OAIGetTopic_200_response::is_featured_link_Valid() const{
    return m_featured_link_isValid;
}

bool OAIGetTopic_200_response::isHasDeleted() const {
    return m_has_deleted;
}
void OAIGetTopic_200_response::setHasDeleted(const bool &has_deleted) {
    m_has_deleted = has_deleted;
    m_has_deleted_isSet = true;
}

bool OAIGetTopic_200_response::is_has_deleted_Set() const{
    return m_has_deleted_isSet;
}

bool OAIGetTopic_200_response::is_has_deleted_Valid() const{
    return m_has_deleted_isValid;
}

bool OAIGetTopic_200_response::isHasSummary() const {
    return m_has_summary;
}
void OAIGetTopic_200_response::setHasSummary(const bool &has_summary) {
    m_has_summary = has_summary;
    m_has_summary_isSet = true;
}

bool OAIGetTopic_200_response::is_has_summary_Set() const{
    return m_has_summary_isSet;
}

bool OAIGetTopic_200_response::is_has_summary_Valid() const{
    return m_has_summary_isValid;
}

qint32 OAIGetTopic_200_response::getHighestPostNumber() const {
    return m_highest_post_number;
}
void OAIGetTopic_200_response::setHighestPostNumber(const qint32 &highest_post_number) {
    m_highest_post_number = highest_post_number;
    m_highest_post_number_isSet = true;
}

bool OAIGetTopic_200_response::is_highest_post_number_Set() const{
    return m_highest_post_number_isSet;
}

bool OAIGetTopic_200_response::is_highest_post_number_Valid() const{
    return m_highest_post_number_isValid;
}

qint32 OAIGetTopic_200_response::getId() const {
    return m_id;
}
void OAIGetTopic_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetTopic_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetTopic_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetTopic_200_response::getImageUrl() const {
    return m_image_url;
}
void OAIGetTopic_200_response::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGetTopic_200_response::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGetTopic_200_response::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGetTopic_200_response::getLastPostedAt() const {
    return m_last_posted_at;
}
void OAIGetTopic_200_response::setLastPostedAt(const QString &last_posted_at) {
    m_last_posted_at = last_posted_at;
    m_last_posted_at_isSet = true;
}

bool OAIGetTopic_200_response::is_last_posted_at_Set() const{
    return m_last_posted_at_isSet;
}

bool OAIGetTopic_200_response::is_last_posted_at_Valid() const{
    return m_last_posted_at_isValid;
}

qint32 OAIGetTopic_200_response::getLikeCount() const {
    return m_like_count;
}
void OAIGetTopic_200_response::setLikeCount(const qint32 &like_count) {
    m_like_count = like_count;
    m_like_count_isSet = true;
}

bool OAIGetTopic_200_response::is_like_count_Set() const{
    return m_like_count_isSet;
}

bool OAIGetTopic_200_response::is_like_count_Valid() const{
    return m_like_count_isValid;
}

qint32 OAIGetTopic_200_response::getMessageBusLastId() const {
    return m_message_bus_last_id;
}
void OAIGetTopic_200_response::setMessageBusLastId(const qint32 &message_bus_last_id) {
    m_message_bus_last_id = message_bus_last_id;
    m_message_bus_last_id_isSet = true;
}

bool OAIGetTopic_200_response::is_message_bus_last_id_Set() const{
    return m_message_bus_last_id_isSet;
}

bool OAIGetTopic_200_response::is_message_bus_last_id_Valid() const{
    return m_message_bus_last_id_isValid;
}

qint32 OAIGetTopic_200_response::getParticipantCount() const {
    return m_participant_count;
}
void OAIGetTopic_200_response::setParticipantCount(const qint32 &participant_count) {
    m_participant_count = participant_count;
    m_participant_count_isSet = true;
}

bool OAIGetTopic_200_response::is_participant_count_Set() const{
    return m_participant_count_isSet;
}

bool OAIGetTopic_200_response::is_participant_count_Valid() const{
    return m_participant_count_isValid;
}

bool OAIGetTopic_200_response::isPinned() const {
    return m_pinned;
}
void OAIGetTopic_200_response::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAIGetTopic_200_response::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAIGetTopic_200_response::is_pinned_Valid() const{
    return m_pinned_isValid;
}

QString OAIGetTopic_200_response::getPinnedAt() const {
    return m_pinned_at;
}
void OAIGetTopic_200_response::setPinnedAt(const QString &pinned_at) {
    m_pinned_at = pinned_at;
    m_pinned_at_isSet = true;
}

bool OAIGetTopic_200_response::is_pinned_at_Set() const{
    return m_pinned_at_isSet;
}

bool OAIGetTopic_200_response::is_pinned_at_Valid() const{
    return m_pinned_at_isValid;
}

bool OAIGetTopic_200_response::isPinnedGlobally() const {
    return m_pinned_globally;
}
void OAIGetTopic_200_response::setPinnedGlobally(const bool &pinned_globally) {
    m_pinned_globally = pinned_globally;
    m_pinned_globally_isSet = true;
}

bool OAIGetTopic_200_response::is_pinned_globally_Set() const{
    return m_pinned_globally_isSet;
}

bool OAIGetTopic_200_response::is_pinned_globally_Valid() const{
    return m_pinned_globally_isValid;
}

QString OAIGetTopic_200_response::getPinnedUntil() const {
    return m_pinned_until;
}
void OAIGetTopic_200_response::setPinnedUntil(const QString &pinned_until) {
    m_pinned_until = pinned_until;
    m_pinned_until_isSet = true;
}

bool OAIGetTopic_200_response::is_pinned_until_Set() const{
    return m_pinned_until_isSet;
}

bool OAIGetTopic_200_response::is_pinned_until_Valid() const{
    return m_pinned_until_isValid;
}

OAIGetTopic_200_response_post_stream OAIGetTopic_200_response::getPostStream() const {
    return m_post_stream;
}
void OAIGetTopic_200_response::setPostStream(const OAIGetTopic_200_response_post_stream &post_stream) {
    m_post_stream = post_stream;
    m_post_stream_isSet = true;
}

bool OAIGetTopic_200_response::is_post_stream_Set() const{
    return m_post_stream_isSet;
}

bool OAIGetTopic_200_response::is_post_stream_Valid() const{
    return m_post_stream_isValid;
}

qint32 OAIGetTopic_200_response::getPostsCount() const {
    return m_posts_count;
}
void OAIGetTopic_200_response::setPostsCount(const qint32 &posts_count) {
    m_posts_count = posts_count;
    m_posts_count_isSet = true;
}

bool OAIGetTopic_200_response::is_posts_count_Set() const{
    return m_posts_count_isSet;
}

bool OAIGetTopic_200_response::is_posts_count_Valid() const{
    return m_posts_count_isValid;
}

qint32 OAIGetTopic_200_response::getReplyCount() const {
    return m_reply_count;
}
void OAIGetTopic_200_response::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAIGetTopic_200_response::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAIGetTopic_200_response::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

bool OAIGetTopic_200_response::isShowReadIndicator() const {
    return m_show_read_indicator;
}
void OAIGetTopic_200_response::setShowReadIndicator(const bool &show_read_indicator) {
    m_show_read_indicator = show_read_indicator;
    m_show_read_indicator_isSet = true;
}

bool OAIGetTopic_200_response::is_show_read_indicator_Set() const{
    return m_show_read_indicator_isSet;
}

bool OAIGetTopic_200_response::is_show_read_indicator_Valid() const{
    return m_show_read_indicator_isValid;
}

QString OAIGetTopic_200_response::getSlowModeEnabledUntil() const {
    return m_slow_mode_enabled_until;
}
void OAIGetTopic_200_response::setSlowModeEnabledUntil(const QString &slow_mode_enabled_until) {
    m_slow_mode_enabled_until = slow_mode_enabled_until;
    m_slow_mode_enabled_until_isSet = true;
}

bool OAIGetTopic_200_response::is_slow_mode_enabled_until_Set() const{
    return m_slow_mode_enabled_until_isSet;
}

bool OAIGetTopic_200_response::is_slow_mode_enabled_until_Valid() const{
    return m_slow_mode_enabled_until_isValid;
}

qint32 OAIGetTopic_200_response::getSlowModeSeconds() const {
    return m_slow_mode_seconds;
}
void OAIGetTopic_200_response::setSlowModeSeconds(const qint32 &slow_mode_seconds) {
    m_slow_mode_seconds = slow_mode_seconds;
    m_slow_mode_seconds_isSet = true;
}

bool OAIGetTopic_200_response::is_slow_mode_seconds_Set() const{
    return m_slow_mode_seconds_isSet;
}

bool OAIGetTopic_200_response::is_slow_mode_seconds_Valid() const{
    return m_slow_mode_seconds_isValid;
}

QString OAIGetTopic_200_response::getSlug() const {
    return m_slug;
}
void OAIGetTopic_200_response::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIGetTopic_200_response::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIGetTopic_200_response::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<OAIGetTopic_200_response_suggested_topics_inner> OAIGetTopic_200_response::getSuggestedTopics() const {
    return m_suggested_topics;
}
void OAIGetTopic_200_response::setSuggestedTopics(const QList<OAIGetTopic_200_response_suggested_topics_inner> &suggested_topics) {
    m_suggested_topics = suggested_topics;
    m_suggested_topics_isSet = true;
}

bool OAIGetTopic_200_response::is_suggested_topics_Set() const{
    return m_suggested_topics_isSet;
}

bool OAIGetTopic_200_response::is_suggested_topics_Valid() const{
    return m_suggested_topics_isValid;
}

QList<QJsonValue> OAIGetTopic_200_response::getTags() const {
    return m_tags;
}
void OAIGetTopic_200_response::setTags(const QList<QJsonValue> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetTopic_200_response::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetTopic_200_response::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap<QString, QJsonValue> OAIGetTopic_200_response::getTagsDescriptions() const {
    return m_tags_descriptions;
}
void OAIGetTopic_200_response::setTagsDescriptions(const QMap<QString, QJsonValue> &tags_descriptions) {
    m_tags_descriptions = tags_descriptions;
    m_tags_descriptions_isSet = true;
}

bool OAIGetTopic_200_response::is_tags_descriptions_Set() const{
    return m_tags_descriptions_isSet;
}

bool OAIGetTopic_200_response::is_tags_descriptions_Valid() const{
    return m_tags_descriptions_isValid;
}

QString OAIGetTopic_200_response::getThumbnails() const {
    return m_thumbnails;
}
void OAIGetTopic_200_response::setThumbnails(const QString &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAIGetTopic_200_response::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAIGetTopic_200_response::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

QList<QJsonValue> OAIGetTopic_200_response::getTimelineLookup() const {
    return m_timeline_lookup;
}
void OAIGetTopic_200_response::setTimelineLookup(const QList<QJsonValue> &timeline_lookup) {
    m_timeline_lookup = timeline_lookup;
    m_timeline_lookup_isSet = true;
}

bool OAIGetTopic_200_response::is_timeline_lookup_Set() const{
    return m_timeline_lookup_isSet;
}

bool OAIGetTopic_200_response::is_timeline_lookup_Valid() const{
    return m_timeline_lookup_isValid;
}

QString OAIGetTopic_200_response::getTitle() const {
    return m_title;
}
void OAIGetTopic_200_response::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetTopic_200_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetTopic_200_response::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGetTopic_200_response::getTopicTimer() const {
    return m_topic_timer;
}
void OAIGetTopic_200_response::setTopicTimer(const QString &topic_timer) {
    m_topic_timer = topic_timer;
    m_topic_timer_isSet = true;
}

bool OAIGetTopic_200_response::is_topic_timer_Set() const{
    return m_topic_timer_isSet;
}

bool OAIGetTopic_200_response::is_topic_timer_Valid() const{
    return m_topic_timer_isValid;
}

QString OAIGetTopic_200_response::getUnpinned() const {
    return m_unpinned;
}
void OAIGetTopic_200_response::setUnpinned(const QString &unpinned) {
    m_unpinned = unpinned;
    m_unpinned_isSet = true;
}

bool OAIGetTopic_200_response::is_unpinned_Set() const{
    return m_unpinned_isSet;
}

bool OAIGetTopic_200_response::is_unpinned_Valid() const{
    return m_unpinned_isValid;
}

qint32 OAIGetTopic_200_response::getUserId() const {
    return m_user_id;
}
void OAIGetTopic_200_response::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetTopic_200_response::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetTopic_200_response::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 OAIGetTopic_200_response::getViews() const {
    return m_views;
}
void OAIGetTopic_200_response::setViews(const qint32 &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIGetTopic_200_response::is_views_Set() const{
    return m_views_isSet;
}

bool OAIGetTopic_200_response::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIGetTopic_200_response::isVisible() const {
    return m_visible;
}
void OAIGetTopic_200_response::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIGetTopic_200_response::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIGetTopic_200_response::is_visible_Valid() const{
    return m_visible_isValid;
}

qint32 OAIGetTopic_200_response::getWordCount() const {
    return m_word_count;
}
void OAIGetTopic_200_response::setWordCount(const qint32 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIGetTopic_200_response::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIGetTopic_200_response::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIGetTopic_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_archetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmarked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmarks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_post_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fancy_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_post_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_posted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_bus_last_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_globally_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_stream.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_read_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_mode_enabled_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_mode_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_lookup.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTopic_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_summary_isValid && m_archetype_isValid && m_archived_isValid && m_bookmarked_isValid && m_bookmarks_isValid && m_category_id_isValid && m_chunk_size_isValid && m_closed_isValid && m_created_at_isValid && m_deleted_at_isValid && m_deleted_by_isValid && m_details_isValid && m_draft_isValid && m_draft_key_isValid && m_draft_sequence_isValid && m_fancy_title_isValid && m_featured_link_isValid && m_has_deleted_isValid && m_has_summary_isValid && m_highest_post_number_isValid && m_id_isValid && m_image_url_isValid && m_last_posted_at_isValid && m_like_count_isValid && m_message_bus_last_id_isValid && m_participant_count_isValid && m_pinned_isValid && m_pinned_at_isValid && m_pinned_globally_isValid && m_pinned_until_isValid && m_post_stream_isValid && m_posts_count_isValid && m_reply_count_isValid && m_show_read_indicator_isValid && m_slow_mode_enabled_until_isValid && m_slow_mode_seconds_isValid && m_slug_isValid && m_suggested_topics_isValid && m_tags_isValid && m_tags_descriptions_isValid && m_thumbnails_isValid && m_timeline_lookup_isValid && m_title_isValid && m_topic_timer_isValid && m_unpinned_isValid && m_user_id_isValid && m_views_isValid && m_visible_isValid && m_word_count_isValid && true;
}

} // namespace OpenAPI
