/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCategories_200_response_category_list_categories_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCategories_200_response_category_list_categories_inner::OAIListCategories_200_response_category_list_categories_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCategories_200_response_category_list_categories_inner::OAIListCategories_200_response_category_list_categories_inner() {
    this->initializeModel();
}

OAIListCategories_200_response_category_list_categories_inner::~OAIListCategories_200_response_category_list_categories_inner() {}

void OAIListCategories_200_response_category_list_categories_inner::initializeModel() {

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_default_list_filter_isSet = false;
    m_default_list_filter_isValid = false;

    m_default_top_period_isSet = false;
    m_default_top_period_isValid = false;

    m_default_view_isSet = false;
    m_default_view_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_excerpt_isSet = false;
    m_description_excerpt_isValid = false;

    m_description_text_isSet = false;
    m_description_text_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_uncategorized_isSet = false;
    m_is_uncategorized_isValid = false;

    m_minimum_required_tags_isSet = false;
    m_minimum_required_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_navigate_to_first_post_after_read_isSet = false;
    m_navigate_to_first_post_after_read_isValid = false;

    m_notification_level_isSet = false;
    m_notification_level_isValid = false;

    m_num_featured_topics_isSet = false;
    m_num_featured_topics_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_read_restricted_isSet = false;
    m_read_restricted_isValid = false;

    m_show_subcategory_list_isSet = false;
    m_show_subcategory_list_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_sort_ascending_isSet = false;
    m_sort_ascending_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_subcategory_ids_isSet = false;
    m_subcategory_ids_isValid = false;

    m_subcategory_list_isSet = false;
    m_subcategory_list_isValid = false;

    m_subcategory_list_style_isSet = false;
    m_subcategory_list_style_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_topic_count_isSet = false;
    m_topic_count_isValid = false;

    m_topic_template_isSet = false;
    m_topic_template_isValid = false;

    m_topic_url_isSet = false;
    m_topic_url_isValid = false;

    m_topics_all_time_isSet = false;
    m_topics_all_time_isValid = false;

    m_topics_day_isSet = false;
    m_topics_day_isValid = false;

    m_topics_month_isSet = false;
    m_topics_month_isValid = false;

    m_topics_week_isSet = false;
    m_topics_week_isValid = false;

    m_topics_year_isSet = false;
    m_topics_year_isValid = false;

    m_uploaded_background_isSet = false;
    m_uploaded_background_isValid = false;

    m_uploaded_logo_isSet = false;
    m_uploaded_logo_isValid = false;

    m_uploaded_logo_dark_isSet = false;
    m_uploaded_logo_dark_isValid = false;
}

void OAIListCategories_200_response_category_list_categories_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCategories_200_response_category_list_categories_inner::fromJsonObject(QJsonObject json) {

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_default_list_filter_isValid = ::OpenAPI::fromJsonValue(m_default_list_filter, json[QString("default_list_filter")]);
    m_default_list_filter_isSet = !json[QString("default_list_filter")].isNull() && m_default_list_filter_isValid;

    m_default_top_period_isValid = ::OpenAPI::fromJsonValue(m_default_top_period, json[QString("default_top_period")]);
    m_default_top_period_isSet = !json[QString("default_top_period")].isNull() && m_default_top_period_isValid;

    m_default_view_isValid = ::OpenAPI::fromJsonValue(m_default_view, json[QString("default_view")]);
    m_default_view_isSet = !json[QString("default_view")].isNull() && m_default_view_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_excerpt_isValid = ::OpenAPI::fromJsonValue(m_description_excerpt, json[QString("description_excerpt")]);
    m_description_excerpt_isSet = !json[QString("description_excerpt")].isNull() && m_description_excerpt_isValid;

    m_description_text_isValid = ::OpenAPI::fromJsonValue(m_description_text, json[QString("description_text")]);
    m_description_text_isSet = !json[QString("description_text")].isNull() && m_description_text_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("has_children")]);
    m_has_children_isSet = !json[QString("has_children")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_uncategorized_isValid = ::OpenAPI::fromJsonValue(m_is_uncategorized, json[QString("is_uncategorized")]);
    m_is_uncategorized_isSet = !json[QString("is_uncategorized")].isNull() && m_is_uncategorized_isValid;

    m_minimum_required_tags_isValid = ::OpenAPI::fromJsonValue(m_minimum_required_tags, json[QString("minimum_required_tags")]);
    m_minimum_required_tags_isSet = !json[QString("minimum_required_tags")].isNull() && m_minimum_required_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_navigate_to_first_post_after_read_isValid = ::OpenAPI::fromJsonValue(m_navigate_to_first_post_after_read, json[QString("navigate_to_first_post_after_read")]);
    m_navigate_to_first_post_after_read_isSet = !json[QString("navigate_to_first_post_after_read")].isNull() && m_navigate_to_first_post_after_read_isValid;

    m_notification_level_isValid = ::OpenAPI::fromJsonValue(m_notification_level, json[QString("notification_level")]);
    m_notification_level_isSet = !json[QString("notification_level")].isNull() && m_notification_level_isValid;

    m_num_featured_topics_isValid = ::OpenAPI::fromJsonValue(m_num_featured_topics, json[QString("num_featured_topics")]);
    m_num_featured_topics_isSet = !json[QString("num_featured_topics")].isNull() && m_num_featured_topics_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_post_count_isValid = ::OpenAPI::fromJsonValue(m_post_count, json[QString("post_count")]);
    m_post_count_isSet = !json[QString("post_count")].isNull() && m_post_count_isValid;

    m_read_restricted_isValid = ::OpenAPI::fromJsonValue(m_read_restricted, json[QString("read_restricted")]);
    m_read_restricted_isSet = !json[QString("read_restricted")].isNull() && m_read_restricted_isValid;

    m_show_subcategory_list_isValid = ::OpenAPI::fromJsonValue(m_show_subcategory_list, json[QString("show_subcategory_list")]);
    m_show_subcategory_list_isSet = !json[QString("show_subcategory_list")].isNull() && m_show_subcategory_list_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_sort_ascending_isValid = ::OpenAPI::fromJsonValue(m_sort_ascending, json[QString("sort_ascending")]);
    m_sort_ascending_isSet = !json[QString("sort_ascending")].isNull() && m_sort_ascending_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_subcategory_ids_isValid = ::OpenAPI::fromJsonValue(m_subcategory_ids, json[QString("subcategory_ids")]);
    m_subcategory_ids_isSet = !json[QString("subcategory_ids")].isNull() && m_subcategory_ids_isValid;

    m_subcategory_list_isValid = ::OpenAPI::fromJsonValue(m_subcategory_list, json[QString("subcategory_list")]);
    m_subcategory_list_isSet = !json[QString("subcategory_list")].isNull() && m_subcategory_list_isValid;

    m_subcategory_list_style_isValid = ::OpenAPI::fromJsonValue(m_subcategory_list_style, json[QString("subcategory_list_style")]);
    m_subcategory_list_style_isSet = !json[QString("subcategory_list_style")].isNull() && m_subcategory_list_style_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("text_color")]);
    m_text_color_isSet = !json[QString("text_color")].isNull() && m_text_color_isValid;

    m_topic_count_isValid = ::OpenAPI::fromJsonValue(m_topic_count, json[QString("topic_count")]);
    m_topic_count_isSet = !json[QString("topic_count")].isNull() && m_topic_count_isValid;

    m_topic_template_isValid = ::OpenAPI::fromJsonValue(m_topic_template, json[QString("topic_template")]);
    m_topic_template_isSet = !json[QString("topic_template")].isNull() && m_topic_template_isValid;

    m_topic_url_isValid = ::OpenAPI::fromJsonValue(m_topic_url, json[QString("topic_url")]);
    m_topic_url_isSet = !json[QString("topic_url")].isNull() && m_topic_url_isValid;

    m_topics_all_time_isValid = ::OpenAPI::fromJsonValue(m_topics_all_time, json[QString("topics_all_time")]);
    m_topics_all_time_isSet = !json[QString("topics_all_time")].isNull() && m_topics_all_time_isValid;

    m_topics_day_isValid = ::OpenAPI::fromJsonValue(m_topics_day, json[QString("topics_day")]);
    m_topics_day_isSet = !json[QString("topics_day")].isNull() && m_topics_day_isValid;

    m_topics_month_isValid = ::OpenAPI::fromJsonValue(m_topics_month, json[QString("topics_month")]);
    m_topics_month_isSet = !json[QString("topics_month")].isNull() && m_topics_month_isValid;

    m_topics_week_isValid = ::OpenAPI::fromJsonValue(m_topics_week, json[QString("topics_week")]);
    m_topics_week_isSet = !json[QString("topics_week")].isNull() && m_topics_week_isValid;

    m_topics_year_isValid = ::OpenAPI::fromJsonValue(m_topics_year, json[QString("topics_year")]);
    m_topics_year_isSet = !json[QString("topics_year")].isNull() && m_topics_year_isValid;

    m_uploaded_background_isValid = ::OpenAPI::fromJsonValue(m_uploaded_background, json[QString("uploaded_background")]);
    m_uploaded_background_isSet = !json[QString("uploaded_background")].isNull() && m_uploaded_background_isValid;

    m_uploaded_logo_isValid = ::OpenAPI::fromJsonValue(m_uploaded_logo, json[QString("uploaded_logo")]);
    m_uploaded_logo_isSet = !json[QString("uploaded_logo")].isNull() && m_uploaded_logo_isValid;

    m_uploaded_logo_dark_isValid = ::OpenAPI::fromJsonValue(m_uploaded_logo_dark, json[QString("uploaded_logo_dark")]);
    m_uploaded_logo_dark_isSet = !json[QString("uploaded_logo_dark")].isNull() && m_uploaded_logo_dark_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCategories_200_response_category_list_categories_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_default_list_filter_isSet) {
        obj.insert(QString("default_list_filter"), ::OpenAPI::toJsonValue(m_default_list_filter));
    }
    if (m_default_top_period_isSet) {
        obj.insert(QString("default_top_period"), ::OpenAPI::toJsonValue(m_default_top_period));
    }
    if (m_default_view_isSet) {
        obj.insert(QString("default_view"), ::OpenAPI::toJsonValue(m_default_view));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_excerpt_isSet) {
        obj.insert(QString("description_excerpt"), ::OpenAPI::toJsonValue(m_description_excerpt));
    }
    if (m_description_text_isSet) {
        obj.insert(QString("description_text"), ::OpenAPI::toJsonValue(m_description_text));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("has_children"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_uncategorized_isSet) {
        obj.insert(QString("is_uncategorized"), ::OpenAPI::toJsonValue(m_is_uncategorized));
    }
    if (m_minimum_required_tags_isSet) {
        obj.insert(QString("minimum_required_tags"), ::OpenAPI::toJsonValue(m_minimum_required_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_navigate_to_first_post_after_read_isSet) {
        obj.insert(QString("navigate_to_first_post_after_read"), ::OpenAPI::toJsonValue(m_navigate_to_first_post_after_read));
    }
    if (m_notification_level_isSet) {
        obj.insert(QString("notification_level"), ::OpenAPI::toJsonValue(m_notification_level));
    }
    if (m_num_featured_topics_isSet) {
        obj.insert(QString("num_featured_topics"), ::OpenAPI::toJsonValue(m_num_featured_topics));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_post_count_isSet) {
        obj.insert(QString("post_count"), ::OpenAPI::toJsonValue(m_post_count));
    }
    if (m_read_restricted_isSet) {
        obj.insert(QString("read_restricted"), ::OpenAPI::toJsonValue(m_read_restricted));
    }
    if (m_show_subcategory_list_isSet) {
        obj.insert(QString("show_subcategory_list"), ::OpenAPI::toJsonValue(m_show_subcategory_list));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_sort_ascending_isSet) {
        obj.insert(QString("sort_ascending"), ::OpenAPI::toJsonValue(m_sort_ascending));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_subcategory_ids.size() > 0) {
        obj.insert(QString("subcategory_ids"), ::OpenAPI::toJsonValue(m_subcategory_ids));
    }
    if (m_subcategory_list.size() > 0) {
        obj.insert(QString("subcategory_list"), ::OpenAPI::toJsonValue(m_subcategory_list));
    }
    if (m_subcategory_list_style_isSet) {
        obj.insert(QString("subcategory_list_style"), ::OpenAPI::toJsonValue(m_subcategory_list_style));
    }
    if (m_text_color_isSet) {
        obj.insert(QString("text_color"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_topic_count_isSet) {
        obj.insert(QString("topic_count"), ::OpenAPI::toJsonValue(m_topic_count));
    }
    if (m_topic_template_isSet) {
        obj.insert(QString("topic_template"), ::OpenAPI::toJsonValue(m_topic_template));
    }
    if (m_topic_url_isSet) {
        obj.insert(QString("topic_url"), ::OpenAPI::toJsonValue(m_topic_url));
    }
    if (m_topics_all_time_isSet) {
        obj.insert(QString("topics_all_time"), ::OpenAPI::toJsonValue(m_topics_all_time));
    }
    if (m_topics_day_isSet) {
        obj.insert(QString("topics_day"), ::OpenAPI::toJsonValue(m_topics_day));
    }
    if (m_topics_month_isSet) {
        obj.insert(QString("topics_month"), ::OpenAPI::toJsonValue(m_topics_month));
    }
    if (m_topics_week_isSet) {
        obj.insert(QString("topics_week"), ::OpenAPI::toJsonValue(m_topics_week));
    }
    if (m_topics_year_isSet) {
        obj.insert(QString("topics_year"), ::OpenAPI::toJsonValue(m_topics_year));
    }
    if (m_uploaded_background_isSet) {
        obj.insert(QString("uploaded_background"), ::OpenAPI::toJsonValue(m_uploaded_background));
    }
    if (m_uploaded_logo_isSet) {
        obj.insert(QString("uploaded_logo"), ::OpenAPI::toJsonValue(m_uploaded_logo));
    }
    if (m_uploaded_logo_dark_isSet) {
        obj.insert(QString("uploaded_logo_dark"), ::OpenAPI::toJsonValue(m_uploaded_logo_dark));
    }
    return obj;
}

bool OAIListCategories_200_response_category_list_categories_inner::isCanEdit() const {
    return m_can_edit;
}
void OAIListCategories_200_response_category_list_categories_inner::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getColor() const {
    return m_color;
}
void OAIListCategories_200_response_category_list_categories_inner::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_color_Set() const{
    return m_color_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getDefaultListFilter() const {
    return m_default_list_filter;
}
void OAIListCategories_200_response_category_list_categories_inner::setDefaultListFilter(const QString &default_list_filter) {
    m_default_list_filter = default_list_filter;
    m_default_list_filter_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_default_list_filter_Set() const{
    return m_default_list_filter_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_default_list_filter_Valid() const{
    return m_default_list_filter_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getDefaultTopPeriod() const {
    return m_default_top_period;
}
void OAIListCategories_200_response_category_list_categories_inner::setDefaultTopPeriod(const QString &default_top_period) {
    m_default_top_period = default_top_period;
    m_default_top_period_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_default_top_period_Set() const{
    return m_default_top_period_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_default_top_period_Valid() const{
    return m_default_top_period_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getDefaultView() const {
    return m_default_view;
}
void OAIListCategories_200_response_category_list_categories_inner::setDefaultView(const QString &default_view) {
    m_default_view = default_view;
    m_default_view_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_default_view_Set() const{
    return m_default_view_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_default_view_Valid() const{
    return m_default_view_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getDescription() const {
    return m_description;
}
void OAIListCategories_200_response_category_list_categories_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getDescriptionExcerpt() const {
    return m_description_excerpt;
}
void OAIListCategories_200_response_category_list_categories_inner::setDescriptionExcerpt(const QString &description_excerpt) {
    m_description_excerpt = description_excerpt;
    m_description_excerpt_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_description_excerpt_Set() const{
    return m_description_excerpt_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_description_excerpt_Valid() const{
    return m_description_excerpt_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getDescriptionText() const {
    return m_description_text;
}
void OAIListCategories_200_response_category_list_categories_inner::setDescriptionText(const QString &description_text) {
    m_description_text = description_text;
    m_description_text_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_description_text_Set() const{
    return m_description_text_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_description_text_Valid() const{
    return m_description_text_isValid;
}

bool OAIListCategories_200_response_category_list_categories_inner::isHasChildren() const {
    return m_has_children;
}
void OAIListCategories_200_response_category_list_categories_inner::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_has_children_Valid() const{
    return m_has_children_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getId() const {
    return m_id;
}
void OAIListCategories_200_response_category_list_categories_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIListCategories_200_response_category_list_categories_inner::isIsUncategorized() const {
    return m_is_uncategorized;
}
void OAIListCategories_200_response_category_list_categories_inner::setIsUncategorized(const bool &is_uncategorized) {
    m_is_uncategorized = is_uncategorized;
    m_is_uncategorized_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_is_uncategorized_Set() const{
    return m_is_uncategorized_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_is_uncategorized_Valid() const{
    return m_is_uncategorized_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getMinimumRequiredTags() const {
    return m_minimum_required_tags;
}
void OAIListCategories_200_response_category_list_categories_inner::setMinimumRequiredTags(const qint32 &minimum_required_tags) {
    m_minimum_required_tags = minimum_required_tags;
    m_minimum_required_tags_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_minimum_required_tags_Set() const{
    return m_minimum_required_tags_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_minimum_required_tags_Valid() const{
    return m_minimum_required_tags_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getName() const {
    return m_name;
}
void OAIListCategories_200_response_category_list_categories_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIListCategories_200_response_category_list_categories_inner::isNavigateToFirstPostAfterRead() const {
    return m_navigate_to_first_post_after_read;
}
void OAIListCategories_200_response_category_list_categories_inner::setNavigateToFirstPostAfterRead(const bool &navigate_to_first_post_after_read) {
    m_navigate_to_first_post_after_read = navigate_to_first_post_after_read;
    m_navigate_to_first_post_after_read_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_navigate_to_first_post_after_read_Set() const{
    return m_navigate_to_first_post_after_read_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_navigate_to_first_post_after_read_Valid() const{
    return m_navigate_to_first_post_after_read_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getNotificationLevel() const {
    return m_notification_level;
}
void OAIListCategories_200_response_category_list_categories_inner::setNotificationLevel(const qint32 &notification_level) {
    m_notification_level = notification_level;
    m_notification_level_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_notification_level_Set() const{
    return m_notification_level_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_notification_level_Valid() const{
    return m_notification_level_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getNumFeaturedTopics() const {
    return m_num_featured_topics;
}
void OAIListCategories_200_response_category_list_categories_inner::setNumFeaturedTopics(const qint32 &num_featured_topics) {
    m_num_featured_topics = num_featured_topics;
    m_num_featured_topics_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_num_featured_topics_Set() const{
    return m_num_featured_topics_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_num_featured_topics_Valid() const{
    return m_num_featured_topics_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getPermission() const {
    return m_permission;
}
void OAIListCategories_200_response_category_list_categories_inner::setPermission(const qint32 &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_permission_Valid() const{
    return m_permission_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getPosition() const {
    return m_position;
}
void OAIListCategories_200_response_category_list_categories_inner::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getPostCount() const {
    return m_post_count;
}
void OAIListCategories_200_response_category_list_categories_inner::setPostCount(const qint32 &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_post_count_Valid() const{
    return m_post_count_isValid;
}

bool OAIListCategories_200_response_category_list_categories_inner::isReadRestricted() const {
    return m_read_restricted;
}
void OAIListCategories_200_response_category_list_categories_inner::setReadRestricted(const bool &read_restricted) {
    m_read_restricted = read_restricted;
    m_read_restricted_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_read_restricted_Set() const{
    return m_read_restricted_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_read_restricted_Valid() const{
    return m_read_restricted_isValid;
}

bool OAIListCategories_200_response_category_list_categories_inner::isShowSubcategoryList() const {
    return m_show_subcategory_list;
}
void OAIListCategories_200_response_category_list_categories_inner::setShowSubcategoryList(const bool &show_subcategory_list) {
    m_show_subcategory_list = show_subcategory_list;
    m_show_subcategory_list_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_show_subcategory_list_Set() const{
    return m_show_subcategory_list_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_show_subcategory_list_Valid() const{
    return m_show_subcategory_list_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getSlug() const {
    return m_slug;
}
void OAIListCategories_200_response_category_list_categories_inner::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getSortAscending() const {
    return m_sort_ascending;
}
void OAIListCategories_200_response_category_list_categories_inner::setSortAscending(const QString &sort_ascending) {
    m_sort_ascending = sort_ascending;
    m_sort_ascending_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_sort_ascending_Set() const{
    return m_sort_ascending_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_sort_ascending_Valid() const{
    return m_sort_ascending_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getSortOrder() const {
    return m_sort_order;
}
void OAIListCategories_200_response_category_list_categories_inner::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QList<QJsonValue> OAIListCategories_200_response_category_list_categories_inner::getSubcategoryIds() const {
    return m_subcategory_ids;
}
void OAIListCategories_200_response_category_list_categories_inner::setSubcategoryIds(const QList<QJsonValue> &subcategory_ids) {
    m_subcategory_ids = subcategory_ids;
    m_subcategory_ids_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_subcategory_ids_Set() const{
    return m_subcategory_ids_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_subcategory_ids_Valid() const{
    return m_subcategory_ids_isValid;
}

QList<QJsonValue> OAIListCategories_200_response_category_list_categories_inner::getSubcategoryList() const {
    return m_subcategory_list;
}
void OAIListCategories_200_response_category_list_categories_inner::setSubcategoryList(const QList<QJsonValue> &subcategory_list) {
    m_subcategory_list = subcategory_list;
    m_subcategory_list_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_subcategory_list_Set() const{
    return m_subcategory_list_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_subcategory_list_Valid() const{
    return m_subcategory_list_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getSubcategoryListStyle() const {
    return m_subcategory_list_style;
}
void OAIListCategories_200_response_category_list_categories_inner::setSubcategoryListStyle(const QString &subcategory_list_style) {
    m_subcategory_list_style = subcategory_list_style;
    m_subcategory_list_style_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_subcategory_list_style_Set() const{
    return m_subcategory_list_style_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_subcategory_list_style_Valid() const{
    return m_subcategory_list_style_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getTextColor() const {
    return m_text_color;
}
void OAIListCategories_200_response_category_list_categories_inner::setTextColor(const QString &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_text_color_Valid() const{
    return m_text_color_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getTopicCount() const {
    return m_topic_count;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicCount(const qint32 &topic_count) {
    m_topic_count = topic_count;
    m_topic_count_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topic_count_Set() const{
    return m_topic_count_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topic_count_Valid() const{
    return m_topic_count_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getTopicTemplate() const {
    return m_topic_template;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicTemplate(const QString &topic_template) {
    m_topic_template = topic_template;
    m_topic_template_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topic_template_Set() const{
    return m_topic_template_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topic_template_Valid() const{
    return m_topic_template_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getTopicUrl() const {
    return m_topic_url;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicUrl(const QString &topic_url) {
    m_topic_url = topic_url;
    m_topic_url_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topic_url_Set() const{
    return m_topic_url_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topic_url_Valid() const{
    return m_topic_url_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getTopicsAllTime() const {
    return m_topics_all_time;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicsAllTime(const qint32 &topics_all_time) {
    m_topics_all_time = topics_all_time;
    m_topics_all_time_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_all_time_Set() const{
    return m_topics_all_time_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_all_time_Valid() const{
    return m_topics_all_time_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getTopicsDay() const {
    return m_topics_day;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicsDay(const qint32 &topics_day) {
    m_topics_day = topics_day;
    m_topics_day_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_day_Set() const{
    return m_topics_day_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_day_Valid() const{
    return m_topics_day_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getTopicsMonth() const {
    return m_topics_month;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicsMonth(const qint32 &topics_month) {
    m_topics_month = topics_month;
    m_topics_month_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_month_Set() const{
    return m_topics_month_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_month_Valid() const{
    return m_topics_month_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getTopicsWeek() const {
    return m_topics_week;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicsWeek(const qint32 &topics_week) {
    m_topics_week = topics_week;
    m_topics_week_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_week_Set() const{
    return m_topics_week_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_week_Valid() const{
    return m_topics_week_isValid;
}

qint32 OAIListCategories_200_response_category_list_categories_inner::getTopicsYear() const {
    return m_topics_year;
}
void OAIListCategories_200_response_category_list_categories_inner::setTopicsYear(const qint32 &topics_year) {
    m_topics_year = topics_year;
    m_topics_year_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_year_Set() const{
    return m_topics_year_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_topics_year_Valid() const{
    return m_topics_year_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getUploadedBackground() const {
    return m_uploaded_background;
}
void OAIListCategories_200_response_category_list_categories_inner::setUploadedBackground(const QString &uploaded_background) {
    m_uploaded_background = uploaded_background;
    m_uploaded_background_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_uploaded_background_Set() const{
    return m_uploaded_background_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_uploaded_background_Valid() const{
    return m_uploaded_background_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getUploadedLogo() const {
    return m_uploaded_logo;
}
void OAIListCategories_200_response_category_list_categories_inner::setUploadedLogo(const QString &uploaded_logo) {
    m_uploaded_logo = uploaded_logo;
    m_uploaded_logo_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_uploaded_logo_Set() const{
    return m_uploaded_logo_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_uploaded_logo_Valid() const{
    return m_uploaded_logo_isValid;
}

QString OAIListCategories_200_response_category_list_categories_inner::getUploadedLogoDark() const {
    return m_uploaded_logo_dark;
}
void OAIListCategories_200_response_category_list_categories_inner::setUploadedLogoDark(const QString &uploaded_logo_dark) {
    m_uploaded_logo_dark = uploaded_logo_dark;
    m_uploaded_logo_dark_isSet = true;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_uploaded_logo_dark_Set() const{
    return m_uploaded_logo_dark_isSet;
}

bool OAIListCategories_200_response_category_list_categories_inner::is_uploaded_logo_dark_Valid() const{
    return m_uploaded_logo_dark_isValid;
}

bool OAIListCategories_200_response_category_list_categories_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_list_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_top_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_uncategorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_required_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigate_to_first_post_after_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_featured_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_subcategory_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_ascending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategory_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategory_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategory_list_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_all_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_logo_dark_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCategories_200_response_category_list_categories_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_can_edit_isValid && m_color_isValid && m_default_list_filter_isValid && m_default_top_period_isValid && m_default_view_isValid && m_description_isValid && m_description_excerpt_isValid && m_description_text_isValid && m_has_children_isValid && m_id_isValid && m_minimum_required_tags_isValid && m_name_isValid && m_navigate_to_first_post_after_read_isValid && m_notification_level_isValid && m_num_featured_topics_isValid && m_permission_isValid && m_position_isValid && m_post_count_isValid && m_read_restricted_isValid && m_show_subcategory_list_isValid && m_slug_isValid && m_sort_ascending_isValid && m_sort_order_isValid && m_subcategory_ids_isValid && m_subcategory_list_style_isValid && m_text_color_isValid && m_topic_count_isValid && m_topic_template_isValid && m_topic_url_isValid && m_topics_all_time_isValid && m_topics_day_isValid && m_topics_month_isValid && m_topics_week_isValid && m_topics_year_isValid && m_uploaded_background_isValid && m_uploaded_logo_isValid && m_uploaded_logo_dark_isValid && true;
}

} // namespace OpenAPI
