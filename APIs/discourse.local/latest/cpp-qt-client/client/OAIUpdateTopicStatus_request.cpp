/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTopicStatus_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTopicStatus_request::OAIUpdateTopicStatus_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTopicStatus_request::OAIUpdateTopicStatus_request() {
    this->initializeModel();
}

OAIUpdateTopicStatus_request::~OAIUpdateTopicStatus_request() {}

void OAIUpdateTopicStatus_request::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_until_isSet = false;
    m_until_isValid = false;
}

void OAIUpdateTopicStatus_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTopicStatus_request::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_until_isValid = ::OpenAPI::fromJsonValue(m_until, json[QString("until")]);
    m_until_isSet = !json[QString("until")].isNull() && m_until_isValid;
}

QString OAIUpdateTopicStatus_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTopicStatus_request::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_until_isSet) {
        obj.insert(QString("until"), ::OpenAPI::toJsonValue(m_until));
    }
    return obj;
}

QString OAIUpdateTopicStatus_request::getEnabled() const {
    return m_enabled;
}
void OAIUpdateTopicStatus_request::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateTopicStatus_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateTopicStatus_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIUpdateTopicStatus_request::getStatus() const {
    return m_status;
}
void OAIUpdateTopicStatus_request::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateTopicStatus_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateTopicStatus_request::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateTopicStatus_request::getUntil() const {
    return m_until;
}
void OAIUpdateTopicStatus_request::setUntil(const QString &until) {
    m_until = until;
    m_until_isSet = true;
}

bool OAIUpdateTopicStatus_request::is_until_Set() const{
    return m_until_isSet;
}

bool OAIUpdateTopicStatus_request::is_until_Valid() const{
    return m_until_isValid;
}

bool OAIUpdateTopicStatus_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTopicStatus_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
