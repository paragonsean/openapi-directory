/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdminGetUser_200_response.h"
#include "OAIAdminListUsers_200_response_inner.h"
#include "OAIAnonymizeUser_200_response.h"
#include "OAIChangePassword_request.h"
#include "OAICreateUser_200_response.h"
#include "OAICreateUser_request.h"
#include "OAIDeleteGroup_200_response.h"
#include "OAIDeleteUser_200_response.h"
#include "OAIDeleteUser_request.h"
#include "OAIGetUserEmails_200_response.h"
#include "OAIGetUserExternalId_200_response.h"
#include "OAIListUserActions_200_response.h"
#include "OAIListUserBadges_200_response.h"
#include "OAIListUsersPublic_200_response.h"
#include "OAIRefreshGravatar_200_response.h"
#include "OAISendPasswordResetEmail_200_response.h"
#include "OAISendPasswordResetEmail_request.h"
#include "OAISilenceUser_200_response.h"
#include "OAISilenceUser_request.h"
#include "OAISuspendUser_200_response.h"
#include "OAISuspendUser_request.h"
#include "OAIUpdateAvatar_request.h"
#include "OAIUpdateEmail_request.h"
#include "OAIUpdateUser_200_response.h"
#include "OAIUpdateUser_request.h"
#include "OAIUpdateUsername_request.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void adminGetUser(const qint32 &id);

    /**
    * @param[in]  flag QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  asc QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  show_emails bool [optional]
    */
    virtual void adminListUsers(const QString &flag, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &show_emails = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void anonymizeUser(const qint32 &id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  oai_change_password_request OAIChangePassword_request [optional]
    */
    virtual void changePassword(const QString &token, const ::OpenAPI::OptionalParam<OAIChangePassword_request> &oai_change_password_request = ::OpenAPI::OptionalParam<OAIChangePassword_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  oai_create_user_request OAICreateUser_request [optional]
    */
    virtual void createUser(const QString &api_key, const QString &api_username, const ::OpenAPI::OptionalParam<OAICreateUser_request> &oai_create_user_request = ::OpenAPI::OptionalParam<OAICreateUser_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_delete_user_request OAIDeleteUser_request [optional]
    */
    virtual void deleteUser(const qint32 &id, const ::OpenAPI::OptionalParam<OAIDeleteUser_request> &oai_delete_user_request = ::OpenAPI::OptionalParam<OAIDeleteUser_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  username QString [required]
    */
    virtual void getUser(const QString &api_key, const QString &api_username, const QString &username);

    /**
    * @param[in]  username QString [required]
    */
    virtual void getUserEmails(const QString &username);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  external_id QString [required]
    */
    virtual void getUserExternalId(const QString &api_key, const QString &api_username, const QString &external_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  external_id QString [required]
    */
    virtual void getUserIdentiyProviderExternalId(const QString &api_key, const QString &api_username, const QString &provider, const QString &external_id);

    /**
    * @param[in]  offset qint32 [required]
    * @param[in]  username QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void listUserActions(const qint32 &offset, const QString &username, const QString &filter);

    /**
    * @param[in]  username QString [required]
    */
    virtual void listUserBadges(const QString &username);

    /**
    * @param[in]  period QString [required]
    * @param[in]  order QString [required]
    * @param[in]  asc QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void listUsersPublic(const QString &period, const QString &order, const ::OpenAPI::OptionalParam<QString> &asc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void logOutUser(const qint32 &id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void refreshGravatar(const QString &username);

    /**
    * @param[in]  oai_send_password_reset_email_request OAISendPasswordResetEmail_request [optional]
    */
    virtual void sendPasswordResetEmail(const ::OpenAPI::OptionalParam<OAISendPasswordResetEmail_request> &oai_send_password_reset_email_request = ::OpenAPI::OptionalParam<OAISendPasswordResetEmail_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_silence_user_request OAISilenceUser_request [optional]
    */
    virtual void silenceUser(const qint32 &id, const ::OpenAPI::OptionalParam<OAISilenceUser_request> &oai_silence_user_request = ::OpenAPI::OptionalParam<OAISilenceUser_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_suspend_user_request OAISuspendUser_request [optional]
    */
    virtual void suspendUser(const qint32 &id, const ::OpenAPI::OptionalParam<OAISuspendUser_request> &oai_suspend_user_request = ::OpenAPI::OptionalParam<OAISuspendUser_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_update_avatar_request OAIUpdateAvatar_request [optional]
    */
    virtual void updateAvatar(const QString &username, const ::OpenAPI::OptionalParam<OAIUpdateAvatar_request> &oai_update_avatar_request = ::OpenAPI::OptionalParam<OAIUpdateAvatar_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_update_email_request OAIUpdateEmail_request [optional]
    */
    virtual void updateEmail(const QString &username, const ::OpenAPI::OptionalParam<OAIUpdateEmail_request> &oai_update_email_request = ::OpenAPI::OptionalParam<OAIUpdateEmail_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_update_user_request OAIUpdateUser_request [optional]
    */
    virtual void updateUser(const QString &api_key, const QString &api_username, const QString &username, const ::OpenAPI::OptionalParam<OAIUpdateUser_request> &oai_update_user_request = ::OpenAPI::OptionalParam<OAIUpdateUser_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_update_username_request OAIUpdateUsername_request [optional]
    */
    virtual void updateUsername(const QString &username, const ::OpenAPI::OptionalParam<OAIUpdateUsername_request> &oai_update_username_request = ::OpenAPI::OptionalParam<OAIUpdateUsername_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminGetUserCallback(OAIHttpRequestWorker *worker);
    void adminListUsersCallback(OAIHttpRequestWorker *worker);
    void anonymizeUserCallback(OAIHttpRequestWorker *worker);
    void changePasswordCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserEmailsCallback(OAIHttpRequestWorker *worker);
    void getUserExternalIdCallback(OAIHttpRequestWorker *worker);
    void getUserIdentiyProviderExternalIdCallback(OAIHttpRequestWorker *worker);
    void listUserActionsCallback(OAIHttpRequestWorker *worker);
    void listUserBadgesCallback(OAIHttpRequestWorker *worker);
    void listUsersPublicCallback(OAIHttpRequestWorker *worker);
    void logOutUserCallback(OAIHttpRequestWorker *worker);
    void refreshGravatarCallback(OAIHttpRequestWorker *worker);
    void sendPasswordResetEmailCallback(OAIHttpRequestWorker *worker);
    void silenceUserCallback(OAIHttpRequestWorker *worker);
    void suspendUserCallback(OAIHttpRequestWorker *worker);
    void updateAvatarCallback(OAIHttpRequestWorker *worker);
    void updateEmailCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateUsernameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminGetUserSignal(OAIAdminGetUser_200_response summary);
    void adminListUsersSignal(QSet<OAIAdminListUsers_200_response_inner> summary);
    void anonymizeUserSignal(OAIAnonymizeUser_200_response summary);
    void changePasswordSignal();
    void createUserSignal(OAICreateUser_200_response summary);
    void deleteUserSignal(OAIDeleteUser_200_response summary);
    void getUserSignal(OAIGetUserExternalId_200_response summary);
    void getUserEmailsSignal(OAIGetUserEmails_200_response summary);
    void getUserExternalIdSignal(OAIGetUserExternalId_200_response summary);
    void getUserIdentiyProviderExternalIdSignal(OAIGetUserExternalId_200_response summary);
    void listUserActionsSignal(OAIListUserActions_200_response summary);
    void listUserBadgesSignal(OAIListUserBadges_200_response summary);
    void listUsersPublicSignal(OAIListUsersPublic_200_response summary);
    void logOutUserSignal(OAIDeleteGroup_200_response summary);
    void refreshGravatarSignal(OAIRefreshGravatar_200_response summary);
    void sendPasswordResetEmailSignal(OAISendPasswordResetEmail_200_response summary);
    void silenceUserSignal(OAISilenceUser_200_response summary);
    void suspendUserSignal(OAISuspendUser_200_response summary);
    void updateAvatarSignal(OAIDeleteGroup_200_response summary);
    void updateEmailSignal();
    void updateUserSignal(OAIUpdateUser_200_response summary);
    void updateUsernameSignal();


    void adminGetUserSignalFull(OAIHttpRequestWorker *worker, OAIAdminGetUser_200_response summary);
    void adminListUsersSignalFull(OAIHttpRequestWorker *worker, QSet<OAIAdminListUsers_200_response_inner> summary);
    void anonymizeUserSignalFull(OAIHttpRequestWorker *worker, OAIAnonymizeUser_200_response summary);
    void changePasswordSignalFull(OAIHttpRequestWorker *worker);
    void createUserSignalFull(OAIHttpRequestWorker *worker, OAICreateUser_200_response summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUser_200_response summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIGetUserExternalId_200_response summary);
    void getUserEmailsSignalFull(OAIHttpRequestWorker *worker, OAIGetUserEmails_200_response summary);
    void getUserExternalIdSignalFull(OAIHttpRequestWorker *worker, OAIGetUserExternalId_200_response summary);
    void getUserIdentiyProviderExternalIdSignalFull(OAIHttpRequestWorker *worker, OAIGetUserExternalId_200_response summary);
    void listUserActionsSignalFull(OAIHttpRequestWorker *worker, OAIListUserActions_200_response summary);
    void listUserBadgesSignalFull(OAIHttpRequestWorker *worker, OAIListUserBadges_200_response summary);
    void listUsersPublicSignalFull(OAIHttpRequestWorker *worker, OAIListUsersPublic_200_response summary);
    void logOutUserSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGroup_200_response summary);
    void refreshGravatarSignalFull(OAIHttpRequestWorker *worker, OAIRefreshGravatar_200_response summary);
    void sendPasswordResetEmailSignalFull(OAIHttpRequestWorker *worker, OAISendPasswordResetEmail_200_response summary);
    void silenceUserSignalFull(OAIHttpRequestWorker *worker, OAISilenceUser_200_response summary);
    void suspendUserSignalFull(OAIHttpRequestWorker *worker, OAISuspendUser_200_response summary);
    void updateAvatarSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGroup_200_response summary);
    void updateEmailSignalFull(OAIHttpRequestWorker *worker);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUpdateUser_200_response summary);
    void updateUsernameSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use adminGetUserSignalError() instead")
    void adminGetUserSignalE(OAIAdminGetUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetUserSignalError(OAIAdminGetUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminListUsersSignalError() instead")
    void adminListUsersSignalE(QSet<OAIAdminListUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminListUsersSignalError(QSet<OAIAdminListUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anonymizeUserSignalError() instead")
    void anonymizeUserSignalE(OAIAnonymizeUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void anonymizeUserSignalError(OAIAnonymizeUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordSignalError() instead")
    void changePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAICreateUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAICreateUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIDeleteUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIDeleteUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIGetUserExternalId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIGetUserExternalId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEmailsSignalError() instead")
    void getUserEmailsSignalE(OAIGetUserEmails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEmailsSignalError(OAIGetUserEmails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserExternalIdSignalError() instead")
    void getUserExternalIdSignalE(OAIGetUserExternalId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserExternalIdSignalError(OAIGetUserExternalId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserIdentiyProviderExternalIdSignalError() instead")
    void getUserIdentiyProviderExternalIdSignalE(OAIGetUserExternalId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserIdentiyProviderExternalIdSignalError(OAIGetUserExternalId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserActionsSignalError() instead")
    void listUserActionsSignalE(OAIListUserActions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserActionsSignalError(OAIListUserActions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserBadgesSignalError() instead")
    void listUserBadgesSignalE(OAIListUserBadges_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserBadgesSignalError(OAIListUserBadges_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersPublicSignalError() instead")
    void listUsersPublicSignalE(OAIListUsersPublic_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersPublicSignalError(OAIListUsersPublic_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logOutUserSignalError() instead")
    void logOutUserSignalE(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logOutUserSignalError(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshGravatarSignalError() instead")
    void refreshGravatarSignalE(OAIRefreshGravatar_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshGravatarSignalError(OAIRefreshGravatar_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPasswordResetEmailSignalError() instead")
    void sendPasswordResetEmailSignalE(OAISendPasswordResetEmail_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPasswordResetEmailSignalError(OAISendPasswordResetEmail_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use silenceUserSignalError() instead")
    void silenceUserSignalE(OAISilenceUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void silenceUserSignalError(OAISilenceUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalError() instead")
    void suspendUserSignalE(OAISuspendUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalError(OAISuspendUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAvatarSignalError() instead")
    void updateAvatarSignalE(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAvatarSignalError(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailSignalError() instead")
    void updateEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUpdateUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUpdateUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsernameSignalError() instead")
    void updateUsernameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsernameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminGetUserSignalErrorFull() instead")
    void adminGetUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminGetUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminListUsersSignalErrorFull() instead")
    void adminListUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminListUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anonymizeUserSignalErrorFull() instead")
    void anonymizeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anonymizeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordSignalErrorFull() instead")
    void changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEmailsSignalErrorFull() instead")
    void getUserEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserExternalIdSignalErrorFull() instead")
    void getUserExternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserExternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserIdentiyProviderExternalIdSignalErrorFull() instead")
    void getUserIdentiyProviderExternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserIdentiyProviderExternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserActionsSignalErrorFull() instead")
    void listUserActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserBadgesSignalErrorFull() instead")
    void listUserBadgesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserBadgesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersPublicSignalErrorFull() instead")
    void listUsersPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logOutUserSignalErrorFull() instead")
    void logOutUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logOutUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshGravatarSignalErrorFull() instead")
    void refreshGravatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshGravatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPasswordResetEmailSignalErrorFull() instead")
    void sendPasswordResetEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPasswordResetEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use silenceUserSignalErrorFull() instead")
    void silenceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void silenceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalErrorFull() instead")
    void suspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAvatarSignalErrorFull() instead")
    void updateAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailSignalErrorFull() instead")
    void updateEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsernameSignalErrorFull() instead")
    void updateUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
