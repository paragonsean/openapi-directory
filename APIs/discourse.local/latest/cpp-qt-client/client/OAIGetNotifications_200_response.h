/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNotifications_200_response.h
 *
 * 
 */

#ifndef OAIGetNotifications_200_response_H
#define OAIGetNotifications_200_response_H

#include <QJsonObject>

#include "OAIGetNotifications_200_response_notifications_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNotifications_200_response_notifications_inner;

class OAIGetNotifications_200_response : public OAIObject {
public:
    OAIGetNotifications_200_response();
    OAIGetNotifications_200_response(QString json);
    ~OAIGetNotifications_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLoadMoreNotifications() const;
    void setLoadMoreNotifications(const QString &load_more_notifications);
    bool is_load_more_notifications_Set() const;
    bool is_load_more_notifications_Valid() const;

    QList<OAIGetNotifications_200_response_notifications_inner> getNotifications() const;
    void setNotifications(const QList<OAIGetNotifications_200_response_notifications_inner> &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    qint32 getSeenNotificationId() const;
    void setSeenNotificationId(const qint32 &seen_notification_id);
    bool is_seen_notification_id_Set() const;
    bool is_seen_notification_id_Valid() const;

    qint32 getTotalRowsNotifications() const;
    void setTotalRowsNotifications(const qint32 &total_rows_notifications);
    bool is_total_rows_notifications_Set() const;
    bool is_total_rows_notifications_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_load_more_notifications;
    bool m_load_more_notifications_isSet;
    bool m_load_more_notifications_isValid;

    QList<OAIGetNotifications_200_response_notifications_inner> m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    qint32 m_seen_notification_id;
    bool m_seen_notification_id_isSet;
    bool m_seen_notification_id_isValid;

    qint32 m_total_rows_notifications;
    bool m_total_rows_notifications_isSet;
    bool m_total_rows_notifications_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNotifications_200_response)

#endif // OAIGetNotifications_200_response_H
