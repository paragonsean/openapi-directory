/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTopic_200_response_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTopic_200_response_details::OAIGetTopic_200_response_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTopic_200_response_details::OAIGetTopic_200_response_details() {
    this->initializeModel();
}

OAIGetTopic_200_response_details::~OAIGetTopic_200_response_details() {}

void OAIGetTopic_200_response_details::initializeModel() {

    m_can_archive_topic_isSet = false;
    m_can_archive_topic_isValid = false;

    m_can_close_topic_isSet = false;
    m_can_close_topic_isValid = false;

    m_can_convert_topic_isSet = false;
    m_can_convert_topic_isValid = false;

    m_can_create_post_isSet = false;
    m_can_create_post_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_edit_staff_notes_isSet = false;
    m_can_edit_staff_notes_isValid = false;

    m_can_flag_topic_isSet = false;
    m_can_flag_topic_isValid = false;

    m_can_invite_to_isSet = false;
    m_can_invite_to_isValid = false;

    m_can_invite_via_email_isSet = false;
    m_can_invite_via_email_isValid = false;

    m_can_moderate_category_isSet = false;
    m_can_moderate_category_isValid = false;

    m_can_move_posts_isSet = false;
    m_can_move_posts_isValid = false;

    m_can_pin_unpin_topic_isSet = false;
    m_can_pin_unpin_topic_isValid = false;

    m_can_remove_allowed_users_isSet = false;
    m_can_remove_allowed_users_isValid = false;

    m_can_remove_self_id_isSet = false;
    m_can_remove_self_id_isValid = false;

    m_can_reply_as_new_topic_isSet = false;
    m_can_reply_as_new_topic_isValid = false;

    m_can_review_topic_isSet = false;
    m_can_review_topic_isValid = false;

    m_can_split_merge_topic_isSet = false;
    m_can_split_merge_topic_isValid = false;

    m_can_toggle_topic_visibility_isSet = false;
    m_can_toggle_topic_visibility_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_poster_isSet = false;
    m_last_poster_isValid = false;

    m_notification_level_isSet = false;
    m_notification_level_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;
}

void OAIGetTopic_200_response_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTopic_200_response_details::fromJsonObject(QJsonObject json) {

    m_can_archive_topic_isValid = ::OpenAPI::fromJsonValue(m_can_archive_topic, json[QString("can_archive_topic")]);
    m_can_archive_topic_isSet = !json[QString("can_archive_topic")].isNull() && m_can_archive_topic_isValid;

    m_can_close_topic_isValid = ::OpenAPI::fromJsonValue(m_can_close_topic, json[QString("can_close_topic")]);
    m_can_close_topic_isSet = !json[QString("can_close_topic")].isNull() && m_can_close_topic_isValid;

    m_can_convert_topic_isValid = ::OpenAPI::fromJsonValue(m_can_convert_topic, json[QString("can_convert_topic")]);
    m_can_convert_topic_isSet = !json[QString("can_convert_topic")].isNull() && m_can_convert_topic_isValid;

    m_can_create_post_isValid = ::OpenAPI::fromJsonValue(m_can_create_post, json[QString("can_create_post")]);
    m_can_create_post_isSet = !json[QString("can_create_post")].isNull() && m_can_create_post_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("can_delete")]);
    m_can_delete_isSet = !json[QString("can_delete")].isNull() && m_can_delete_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_can_edit_staff_notes_isValid = ::OpenAPI::fromJsonValue(m_can_edit_staff_notes, json[QString("can_edit_staff_notes")]);
    m_can_edit_staff_notes_isSet = !json[QString("can_edit_staff_notes")].isNull() && m_can_edit_staff_notes_isValid;

    m_can_flag_topic_isValid = ::OpenAPI::fromJsonValue(m_can_flag_topic, json[QString("can_flag_topic")]);
    m_can_flag_topic_isSet = !json[QString("can_flag_topic")].isNull() && m_can_flag_topic_isValid;

    m_can_invite_to_isValid = ::OpenAPI::fromJsonValue(m_can_invite_to, json[QString("can_invite_to")]);
    m_can_invite_to_isSet = !json[QString("can_invite_to")].isNull() && m_can_invite_to_isValid;

    m_can_invite_via_email_isValid = ::OpenAPI::fromJsonValue(m_can_invite_via_email, json[QString("can_invite_via_email")]);
    m_can_invite_via_email_isSet = !json[QString("can_invite_via_email")].isNull() && m_can_invite_via_email_isValid;

    m_can_moderate_category_isValid = ::OpenAPI::fromJsonValue(m_can_moderate_category, json[QString("can_moderate_category")]);
    m_can_moderate_category_isSet = !json[QString("can_moderate_category")].isNull() && m_can_moderate_category_isValid;

    m_can_move_posts_isValid = ::OpenAPI::fromJsonValue(m_can_move_posts, json[QString("can_move_posts")]);
    m_can_move_posts_isSet = !json[QString("can_move_posts")].isNull() && m_can_move_posts_isValid;

    m_can_pin_unpin_topic_isValid = ::OpenAPI::fromJsonValue(m_can_pin_unpin_topic, json[QString("can_pin_unpin_topic")]);
    m_can_pin_unpin_topic_isSet = !json[QString("can_pin_unpin_topic")].isNull() && m_can_pin_unpin_topic_isValid;

    m_can_remove_allowed_users_isValid = ::OpenAPI::fromJsonValue(m_can_remove_allowed_users, json[QString("can_remove_allowed_users")]);
    m_can_remove_allowed_users_isSet = !json[QString("can_remove_allowed_users")].isNull() && m_can_remove_allowed_users_isValid;

    m_can_remove_self_id_isValid = ::OpenAPI::fromJsonValue(m_can_remove_self_id, json[QString("can_remove_self_id")]);
    m_can_remove_self_id_isSet = !json[QString("can_remove_self_id")].isNull() && m_can_remove_self_id_isValid;

    m_can_reply_as_new_topic_isValid = ::OpenAPI::fromJsonValue(m_can_reply_as_new_topic, json[QString("can_reply_as_new_topic")]);
    m_can_reply_as_new_topic_isSet = !json[QString("can_reply_as_new_topic")].isNull() && m_can_reply_as_new_topic_isValid;

    m_can_review_topic_isValid = ::OpenAPI::fromJsonValue(m_can_review_topic, json[QString("can_review_topic")]);
    m_can_review_topic_isSet = !json[QString("can_review_topic")].isNull() && m_can_review_topic_isValid;

    m_can_split_merge_topic_isValid = ::OpenAPI::fromJsonValue(m_can_split_merge_topic, json[QString("can_split_merge_topic")]);
    m_can_split_merge_topic_isSet = !json[QString("can_split_merge_topic")].isNull() && m_can_split_merge_topic_isValid;

    m_can_toggle_topic_visibility_isValid = ::OpenAPI::fromJsonValue(m_can_toggle_topic_visibility, json[QString("can_toggle_topic_visibility")]);
    m_can_toggle_topic_visibility_isSet = !json[QString("can_toggle_topic_visibility")].isNull() && m_can_toggle_topic_visibility_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_last_poster_isValid = ::OpenAPI::fromJsonValue(m_last_poster, json[QString("last_poster")]);
    m_last_poster_isSet = !json[QString("last_poster")].isNull() && m_last_poster_isValid;

    m_notification_level_isValid = ::OpenAPI::fromJsonValue(m_notification_level, json[QString("notification_level")]);
    m_notification_level_isSet = !json[QString("notification_level")].isNull() && m_notification_level_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;
}

QString OAIGetTopic_200_response_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTopic_200_response_details::asJsonObject() const {
    QJsonObject obj;
    if (m_can_archive_topic_isSet) {
        obj.insert(QString("can_archive_topic"), ::OpenAPI::toJsonValue(m_can_archive_topic));
    }
    if (m_can_close_topic_isSet) {
        obj.insert(QString("can_close_topic"), ::OpenAPI::toJsonValue(m_can_close_topic));
    }
    if (m_can_convert_topic_isSet) {
        obj.insert(QString("can_convert_topic"), ::OpenAPI::toJsonValue(m_can_convert_topic));
    }
    if (m_can_create_post_isSet) {
        obj.insert(QString("can_create_post"), ::OpenAPI::toJsonValue(m_can_create_post));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("can_delete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_edit_staff_notes_isSet) {
        obj.insert(QString("can_edit_staff_notes"), ::OpenAPI::toJsonValue(m_can_edit_staff_notes));
    }
    if (m_can_flag_topic_isSet) {
        obj.insert(QString("can_flag_topic"), ::OpenAPI::toJsonValue(m_can_flag_topic));
    }
    if (m_can_invite_to_isSet) {
        obj.insert(QString("can_invite_to"), ::OpenAPI::toJsonValue(m_can_invite_to));
    }
    if (m_can_invite_via_email_isSet) {
        obj.insert(QString("can_invite_via_email"), ::OpenAPI::toJsonValue(m_can_invite_via_email));
    }
    if (m_can_moderate_category_isSet) {
        obj.insert(QString("can_moderate_category"), ::OpenAPI::toJsonValue(m_can_moderate_category));
    }
    if (m_can_move_posts_isSet) {
        obj.insert(QString("can_move_posts"), ::OpenAPI::toJsonValue(m_can_move_posts));
    }
    if (m_can_pin_unpin_topic_isSet) {
        obj.insert(QString("can_pin_unpin_topic"), ::OpenAPI::toJsonValue(m_can_pin_unpin_topic));
    }
    if (m_can_remove_allowed_users_isSet) {
        obj.insert(QString("can_remove_allowed_users"), ::OpenAPI::toJsonValue(m_can_remove_allowed_users));
    }
    if (m_can_remove_self_id_isSet) {
        obj.insert(QString("can_remove_self_id"), ::OpenAPI::toJsonValue(m_can_remove_self_id));
    }
    if (m_can_reply_as_new_topic_isSet) {
        obj.insert(QString("can_reply_as_new_topic"), ::OpenAPI::toJsonValue(m_can_reply_as_new_topic));
    }
    if (m_can_review_topic_isSet) {
        obj.insert(QString("can_review_topic"), ::OpenAPI::toJsonValue(m_can_review_topic));
    }
    if (m_can_split_merge_topic_isSet) {
        obj.insert(QString("can_split_merge_topic"), ::OpenAPI::toJsonValue(m_can_split_merge_topic));
    }
    if (m_can_toggle_topic_visibility_isSet) {
        obj.insert(QString("can_toggle_topic_visibility"), ::OpenAPI::toJsonValue(m_can_toggle_topic_visibility));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_poster.isSet()) {
        obj.insert(QString("last_poster"), ::OpenAPI::toJsonValue(m_last_poster));
    }
    if (m_notification_level_isSet) {
        obj.insert(QString("notification_level"), ::OpenAPI::toJsonValue(m_notification_level));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    return obj;
}

bool OAIGetTopic_200_response_details::isCanArchiveTopic() const {
    return m_can_archive_topic;
}
void OAIGetTopic_200_response_details::setCanArchiveTopic(const bool &can_archive_topic) {
    m_can_archive_topic = can_archive_topic;
    m_can_archive_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_archive_topic_Set() const{
    return m_can_archive_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_archive_topic_Valid() const{
    return m_can_archive_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanCloseTopic() const {
    return m_can_close_topic;
}
void OAIGetTopic_200_response_details::setCanCloseTopic(const bool &can_close_topic) {
    m_can_close_topic = can_close_topic;
    m_can_close_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_close_topic_Set() const{
    return m_can_close_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_close_topic_Valid() const{
    return m_can_close_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanConvertTopic() const {
    return m_can_convert_topic;
}
void OAIGetTopic_200_response_details::setCanConvertTopic(const bool &can_convert_topic) {
    m_can_convert_topic = can_convert_topic;
    m_can_convert_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_convert_topic_Set() const{
    return m_can_convert_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_convert_topic_Valid() const{
    return m_can_convert_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanCreatePost() const {
    return m_can_create_post;
}
void OAIGetTopic_200_response_details::setCanCreatePost(const bool &can_create_post) {
    m_can_create_post = can_create_post;
    m_can_create_post_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_create_post_Set() const{
    return m_can_create_post_isSet;
}

bool OAIGetTopic_200_response_details::is_can_create_post_Valid() const{
    return m_can_create_post_isValid;
}

bool OAIGetTopic_200_response_details::isCanDelete() const {
    return m_can_delete;
}
void OAIGetTopic_200_response_details::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIGetTopic_200_response_details::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIGetTopic_200_response_details::isCanEdit() const {
    return m_can_edit;
}
void OAIGetTopic_200_response_details::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIGetTopic_200_response_details::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAIGetTopic_200_response_details::isCanEditStaffNotes() const {
    return m_can_edit_staff_notes;
}
void OAIGetTopic_200_response_details::setCanEditStaffNotes(const bool &can_edit_staff_notes) {
    m_can_edit_staff_notes = can_edit_staff_notes;
    m_can_edit_staff_notes_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_edit_staff_notes_Set() const{
    return m_can_edit_staff_notes_isSet;
}

bool OAIGetTopic_200_response_details::is_can_edit_staff_notes_Valid() const{
    return m_can_edit_staff_notes_isValid;
}

bool OAIGetTopic_200_response_details::isCanFlagTopic() const {
    return m_can_flag_topic;
}
void OAIGetTopic_200_response_details::setCanFlagTopic(const bool &can_flag_topic) {
    m_can_flag_topic = can_flag_topic;
    m_can_flag_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_flag_topic_Set() const{
    return m_can_flag_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_flag_topic_Valid() const{
    return m_can_flag_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanInviteTo() const {
    return m_can_invite_to;
}
void OAIGetTopic_200_response_details::setCanInviteTo(const bool &can_invite_to) {
    m_can_invite_to = can_invite_to;
    m_can_invite_to_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_invite_to_Set() const{
    return m_can_invite_to_isSet;
}

bool OAIGetTopic_200_response_details::is_can_invite_to_Valid() const{
    return m_can_invite_to_isValid;
}

bool OAIGetTopic_200_response_details::isCanInviteViaEmail() const {
    return m_can_invite_via_email;
}
void OAIGetTopic_200_response_details::setCanInviteViaEmail(const bool &can_invite_via_email) {
    m_can_invite_via_email = can_invite_via_email;
    m_can_invite_via_email_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_invite_via_email_Set() const{
    return m_can_invite_via_email_isSet;
}

bool OAIGetTopic_200_response_details::is_can_invite_via_email_Valid() const{
    return m_can_invite_via_email_isValid;
}

bool OAIGetTopic_200_response_details::isCanModerateCategory() const {
    return m_can_moderate_category;
}
void OAIGetTopic_200_response_details::setCanModerateCategory(const bool &can_moderate_category) {
    m_can_moderate_category = can_moderate_category;
    m_can_moderate_category_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_moderate_category_Set() const{
    return m_can_moderate_category_isSet;
}

bool OAIGetTopic_200_response_details::is_can_moderate_category_Valid() const{
    return m_can_moderate_category_isValid;
}

bool OAIGetTopic_200_response_details::isCanMovePosts() const {
    return m_can_move_posts;
}
void OAIGetTopic_200_response_details::setCanMovePosts(const bool &can_move_posts) {
    m_can_move_posts = can_move_posts;
    m_can_move_posts_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_move_posts_Set() const{
    return m_can_move_posts_isSet;
}

bool OAIGetTopic_200_response_details::is_can_move_posts_Valid() const{
    return m_can_move_posts_isValid;
}

bool OAIGetTopic_200_response_details::isCanPinUnpinTopic() const {
    return m_can_pin_unpin_topic;
}
void OAIGetTopic_200_response_details::setCanPinUnpinTopic(const bool &can_pin_unpin_topic) {
    m_can_pin_unpin_topic = can_pin_unpin_topic;
    m_can_pin_unpin_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_pin_unpin_topic_Set() const{
    return m_can_pin_unpin_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_pin_unpin_topic_Valid() const{
    return m_can_pin_unpin_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanRemoveAllowedUsers() const {
    return m_can_remove_allowed_users;
}
void OAIGetTopic_200_response_details::setCanRemoveAllowedUsers(const bool &can_remove_allowed_users) {
    m_can_remove_allowed_users = can_remove_allowed_users;
    m_can_remove_allowed_users_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_remove_allowed_users_Set() const{
    return m_can_remove_allowed_users_isSet;
}

bool OAIGetTopic_200_response_details::is_can_remove_allowed_users_Valid() const{
    return m_can_remove_allowed_users_isValid;
}

qint32 OAIGetTopic_200_response_details::getCanRemoveSelfId() const {
    return m_can_remove_self_id;
}
void OAIGetTopic_200_response_details::setCanRemoveSelfId(const qint32 &can_remove_self_id) {
    m_can_remove_self_id = can_remove_self_id;
    m_can_remove_self_id_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_remove_self_id_Set() const{
    return m_can_remove_self_id_isSet;
}

bool OAIGetTopic_200_response_details::is_can_remove_self_id_Valid() const{
    return m_can_remove_self_id_isValid;
}

bool OAIGetTopic_200_response_details::isCanReplyAsNewTopic() const {
    return m_can_reply_as_new_topic;
}
void OAIGetTopic_200_response_details::setCanReplyAsNewTopic(const bool &can_reply_as_new_topic) {
    m_can_reply_as_new_topic = can_reply_as_new_topic;
    m_can_reply_as_new_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_reply_as_new_topic_Set() const{
    return m_can_reply_as_new_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_reply_as_new_topic_Valid() const{
    return m_can_reply_as_new_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanReviewTopic() const {
    return m_can_review_topic;
}
void OAIGetTopic_200_response_details::setCanReviewTopic(const bool &can_review_topic) {
    m_can_review_topic = can_review_topic;
    m_can_review_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_review_topic_Set() const{
    return m_can_review_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_review_topic_Valid() const{
    return m_can_review_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanSplitMergeTopic() const {
    return m_can_split_merge_topic;
}
void OAIGetTopic_200_response_details::setCanSplitMergeTopic(const bool &can_split_merge_topic) {
    m_can_split_merge_topic = can_split_merge_topic;
    m_can_split_merge_topic_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_split_merge_topic_Set() const{
    return m_can_split_merge_topic_isSet;
}

bool OAIGetTopic_200_response_details::is_can_split_merge_topic_Valid() const{
    return m_can_split_merge_topic_isValid;
}

bool OAIGetTopic_200_response_details::isCanToggleTopicVisibility() const {
    return m_can_toggle_topic_visibility;
}
void OAIGetTopic_200_response_details::setCanToggleTopicVisibility(const bool &can_toggle_topic_visibility) {
    m_can_toggle_topic_visibility = can_toggle_topic_visibility;
    m_can_toggle_topic_visibility_isSet = true;
}

bool OAIGetTopic_200_response_details::is_can_toggle_topic_visibility_Set() const{
    return m_can_toggle_topic_visibility_isSet;
}

bool OAIGetTopic_200_response_details::is_can_toggle_topic_visibility_Valid() const{
    return m_can_toggle_topic_visibility_isValid;
}

OAIAdminGetUser_200_response_approved_by OAIGetTopic_200_response_details::getCreatedBy() const {
    return m_created_by;
}
void OAIGetTopic_200_response_details::setCreatedBy(const OAIAdminGetUser_200_response_approved_by &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGetTopic_200_response_details::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGetTopic_200_response_details::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIAdminGetUser_200_response_approved_by OAIGetTopic_200_response_details::getLastPoster() const {
    return m_last_poster;
}
void OAIGetTopic_200_response_details::setLastPoster(const OAIAdminGetUser_200_response_approved_by &last_poster) {
    m_last_poster = last_poster;
    m_last_poster_isSet = true;
}

bool OAIGetTopic_200_response_details::is_last_poster_Set() const{
    return m_last_poster_isSet;
}

bool OAIGetTopic_200_response_details::is_last_poster_Valid() const{
    return m_last_poster_isValid;
}

qint32 OAIGetTopic_200_response_details::getNotificationLevel() const {
    return m_notification_level;
}
void OAIGetTopic_200_response_details::setNotificationLevel(const qint32 &notification_level) {
    m_notification_level = notification_level;
    m_notification_level_isSet = true;
}

bool OAIGetTopic_200_response_details::is_notification_level_Set() const{
    return m_notification_level_isSet;
}

bool OAIGetTopic_200_response_details::is_notification_level_Valid() const{
    return m_notification_level_isValid;
}

QList<OAIGetTopic_200_response_details_participants_inner> OAIGetTopic_200_response_details::getParticipants() const {
    return m_participants;
}
void OAIGetTopic_200_response_details::setParticipants(const QList<OAIGetTopic_200_response_details_participants_inner> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIGetTopic_200_response_details::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIGetTopic_200_response_details::is_participants_Valid() const{
    return m_participants_isValid;
}

bool OAIGetTopic_200_response_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_archive_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_close_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_convert_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_staff_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_flag_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_invite_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_invite_via_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_moderate_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_pin_unpin_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_allowed_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_self_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_reply_as_new_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_review_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_split_merge_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_toggle_topic_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_poster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTopic_200_response_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_can_archive_topic_isValid && m_can_close_topic_isValid && m_can_convert_topic_isValid && m_can_create_post_isValid && m_can_delete_isValid && m_can_edit_isValid && m_can_edit_staff_notes_isValid && m_can_moderate_category_isValid && m_can_move_posts_isValid && m_can_pin_unpin_topic_isValid && m_can_remove_allowed_users_isValid && m_can_remove_self_id_isValid && m_can_reply_as_new_topic_isValid && m_can_review_topic_isValid && m_can_split_merge_topic_isValid && m_can_toggle_topic_visibility_isValid && m_created_by_isValid && m_last_poster_isValid && m_notification_level_isValid && true;
}

} // namespace OpenAPI
