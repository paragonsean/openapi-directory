/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUserPrivateMessages_200_response_topic_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUserPrivateMessages_200_response_topic_list::OAIListUserPrivateMessages_200_response_topic_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUserPrivateMessages_200_response_topic_list::OAIListUserPrivateMessages_200_response_topic_list() {
    this->initializeModel();
}

OAIListUserPrivateMessages_200_response_topic_list::~OAIListUserPrivateMessages_200_response_topic_list() {}

void OAIListUserPrivateMessages_200_response_topic_list::initializeModel() {

    m_can_create_topic_isSet = false;
    m_can_create_topic_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_draft_key_isSet = false;
    m_draft_key_isValid = false;

    m_draft_sequence_isSet = false;
    m_draft_sequence_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;
}

void OAIListUserPrivateMessages_200_response_topic_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUserPrivateMessages_200_response_topic_list::fromJsonObject(QJsonObject json) {

    m_can_create_topic_isValid = ::OpenAPI::fromJsonValue(m_can_create_topic, json[QString("can_create_topic")]);
    m_can_create_topic_isSet = !json[QString("can_create_topic")].isNull() && m_can_create_topic_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_draft_key_isValid = ::OpenAPI::fromJsonValue(m_draft_key, json[QString("draft_key")]);
    m_draft_key_isSet = !json[QString("draft_key")].isNull() && m_draft_key_isValid;

    m_draft_sequence_isValid = ::OpenAPI::fromJsonValue(m_draft_sequence, json[QString("draft_sequence")]);
    m_draft_sequence_isSet = !json[QString("draft_sequence")].isNull() && m_draft_sequence_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;
}

QString OAIListUserPrivateMessages_200_response_topic_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUserPrivateMessages_200_response_topic_list::asJsonObject() const {
    QJsonObject obj;
    if (m_can_create_topic_isSet) {
        obj.insert(QString("can_create_topic"), ::OpenAPI::toJsonValue(m_can_create_topic));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_draft_key_isSet) {
        obj.insert(QString("draft_key"), ::OpenAPI::toJsonValue(m_draft_key));
    }
    if (m_draft_sequence_isSet) {
        obj.insert(QString("draft_sequence"), ::OpenAPI::toJsonValue(m_draft_sequence));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    return obj;
}

bool OAIListUserPrivateMessages_200_response_topic_list::isCanCreateTopic() const {
    return m_can_create_topic;
}
void OAIListUserPrivateMessages_200_response_topic_list::setCanCreateTopic(const bool &can_create_topic) {
    m_can_create_topic = can_create_topic;
    m_can_create_topic_isSet = true;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_can_create_topic_Set() const{
    return m_can_create_topic_isSet;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_can_create_topic_Valid() const{
    return m_can_create_topic_isValid;
}

QString OAIListUserPrivateMessages_200_response_topic_list::getDraft() const {
    return m_draft;
}
void OAIListUserPrivateMessages_200_response_topic_list::setDraft(const QString &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAIListUserPrivateMessages_200_response_topic_list::getDraftKey() const {
    return m_draft_key;
}
void OAIListUserPrivateMessages_200_response_topic_list::setDraftKey(const QString &draft_key) {
    m_draft_key = draft_key;
    m_draft_key_isSet = true;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_draft_key_Set() const{
    return m_draft_key_isSet;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_draft_key_Valid() const{
    return m_draft_key_isValid;
}

qint32 OAIListUserPrivateMessages_200_response_topic_list::getDraftSequence() const {
    return m_draft_sequence;
}
void OAIListUserPrivateMessages_200_response_topic_list::setDraftSequence(const qint32 &draft_sequence) {
    m_draft_sequence = draft_sequence;
    m_draft_sequence_isSet = true;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_draft_sequence_Set() const{
    return m_draft_sequence_isSet;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_draft_sequence_Valid() const{
    return m_draft_sequence_isValid;
}

qint32 OAIListUserPrivateMessages_200_response_topic_list::getPerPage() const {
    return m_per_page;
}
void OAIListUserPrivateMessages_200_response_topic_list::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_per_page_Valid() const{
    return m_per_page_isValid;
}

QList<OAIListUserPrivateMessages_200_response_topic_list_topics_inner> OAIListUserPrivateMessages_200_response_topic_list::getTopics() const {
    return m_topics;
}
void OAIListUserPrivateMessages_200_response_topic_list::setTopics(const QList<OAIListUserPrivateMessages_200_response_topic_list_topics_inner> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIListUserPrivateMessages_200_response_topic_list::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAIListUserPrivateMessages_200_response_topic_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_create_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUserPrivateMessages_200_response_topic_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
