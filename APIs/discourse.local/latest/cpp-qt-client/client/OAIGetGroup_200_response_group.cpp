/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetGroup_200_response_group.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetGroup_200_response_group::OAIGetGroup_200_response_group(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetGroup_200_response_group::OAIGetGroup_200_response_group() {
    this->initializeModel();
}

OAIGetGroup_200_response_group::~OAIGetGroup_200_response_group() {}

void OAIGetGroup_200_response_group::initializeModel() {

    m_allow_membership_requests_isSet = false;
    m_allow_membership_requests_isValid = false;

    m_allow_unknown_sender_topic_replies_isSet = false;
    m_allow_unknown_sender_topic_replies_isValid = false;

    m_associated_group_ids_isSet = false;
    m_associated_group_ids_isValid = false;

    m_automatic_isSet = false;
    m_automatic_isValid = false;

    m_automatic_membership_email_domains_isSet = false;
    m_automatic_membership_email_domains_isValid = false;

    m_bio_cooked_isSet = false;
    m_bio_cooked_isValid = false;

    m_bio_excerpt_isSet = false;
    m_bio_excerpt_isValid = false;

    m_bio_raw_isSet = false;
    m_bio_raw_isValid = false;

    m_can_admin_group_isSet = false;
    m_can_admin_group_isValid = false;

    m_can_edit_group_isSet = false;
    m_can_edit_group_isValid = false;

    m_can_see_members_isSet = false;
    m_can_see_members_isValid = false;

    m_default_notification_level_isSet = false;
    m_default_notification_level_isValid = false;

    m_email_from_alias_isSet = false;
    m_email_from_alias_isValid = false;

    m_email_password_isSet = false;
    m_email_password_isValid = false;

    m_email_username_isSet = false;
    m_email_username_isValid = false;

    m_flair_bg_color_isSet = false;
    m_flair_bg_color_isValid = false;

    m_flair_color_isSet = false;
    m_flair_color_isValid = false;

    m_flair_url_isSet = false;
    m_flair_url_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_grant_trust_level_isSet = false;
    m_grant_trust_level_isValid = false;

    m_has_messages_isSet = false;
    m_has_messages_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_imap_enabled_isSet = false;
    m_imap_enabled_isValid = false;

    m_imap_last_error_isSet = false;
    m_imap_last_error_isValid = false;

    m_imap_mailbox_name_isSet = false;
    m_imap_mailbox_name_isValid = false;

    m_imap_mailboxes_isSet = false;
    m_imap_mailboxes_isValid = false;

    m_imap_new_emails_isSet = false;
    m_imap_new_emails_isValid = false;

    m_imap_old_emails_isSet = false;
    m_imap_old_emails_isValid = false;

    m_imap_port_isSet = false;
    m_imap_port_isValid = false;

    m_imap_server_isSet = false;
    m_imap_server_isValid = false;

    m_imap_ssl_isSet = false;
    m_imap_ssl_isValid = false;

    m_imap_updated_at_isSet = false;
    m_imap_updated_at_isValid = false;

    m_imap_updated_by_isSet = false;
    m_imap_updated_by_isValid = false;

    m_incoming_email_isSet = false;
    m_incoming_email_isValid = false;

    m_is_group_owner_display_isSet = false;
    m_is_group_owner_display_isValid = false;

    m_is_group_user_isSet = false;
    m_is_group_user_isValid = false;

    m_members_visibility_level_isSet = false;
    m_members_visibility_level_isValid = false;

    m_membership_request_template_isSet = false;
    m_membership_request_template_isValid = false;

    m_mentionable_isSet = false;
    m_mentionable_isValid = false;

    m_mentionable_level_isSet = false;
    m_mentionable_level_isValid = false;

    m_message_count_isSet = false;
    m_message_count_isValid = false;

    m_messageable_isSet = false;
    m_messageable_isValid = false;

    m_messageable_level_isSet = false;
    m_messageable_level_isValid = false;

    m_muted_category_ids_isSet = false;
    m_muted_category_ids_isValid = false;

    m_muted_tags_isSet = false;
    m_muted_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_group_isSet = false;
    m_primary_group_isValid = false;

    m_public_admission_isSet = false;
    m_public_admission_isValid = false;

    m_public_exit_isSet = false;
    m_public_exit_isValid = false;

    m_publish_read_state_isSet = false;
    m_publish_read_state_isValid = false;

    m_regular_category_ids_isSet = false;
    m_regular_category_ids_isValid = false;

    m_regular_tags_isSet = false;
    m_regular_tags_isValid = false;

    m_smtp_enabled_isSet = false;
    m_smtp_enabled_isValid = false;

    m_smtp_port_isSet = false;
    m_smtp_port_isValid = false;

    m_smtp_server_isSet = false;
    m_smtp_server_isValid = false;

    m_smtp_ssl_isSet = false;
    m_smtp_ssl_isValid = false;

    m_smtp_updated_at_isSet = false;
    m_smtp_updated_at_isValid = false;

    m_smtp_updated_by_isSet = false;
    m_smtp_updated_by_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracking_category_ids_isSet = false;
    m_tracking_category_ids_isValid = false;

    m_tracking_tags_isSet = false;
    m_tracking_tags_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_visibility_level_isSet = false;
    m_visibility_level_isValid = false;

    m_watching_category_ids_isSet = false;
    m_watching_category_ids_isValid = false;

    m_watching_first_post_category_ids_isSet = false;
    m_watching_first_post_category_ids_isValid = false;

    m_watching_first_post_tags_isSet = false;
    m_watching_first_post_tags_isValid = false;

    m_watching_tags_isSet = false;
    m_watching_tags_isValid = false;
}

void OAIGetGroup_200_response_group::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetGroup_200_response_group::fromJsonObject(QJsonObject json) {

    m_allow_membership_requests_isValid = ::OpenAPI::fromJsonValue(m_allow_membership_requests, json[QString("allow_membership_requests")]);
    m_allow_membership_requests_isSet = !json[QString("allow_membership_requests")].isNull() && m_allow_membership_requests_isValid;

    m_allow_unknown_sender_topic_replies_isValid = ::OpenAPI::fromJsonValue(m_allow_unknown_sender_topic_replies, json[QString("allow_unknown_sender_topic_replies")]);
    m_allow_unknown_sender_topic_replies_isSet = !json[QString("allow_unknown_sender_topic_replies")].isNull() && m_allow_unknown_sender_topic_replies_isValid;

    m_associated_group_ids_isValid = ::OpenAPI::fromJsonValue(m_associated_group_ids, json[QString("associated_group_ids")]);
    m_associated_group_ids_isSet = !json[QString("associated_group_ids")].isNull() && m_associated_group_ids_isValid;

    m_automatic_isValid = ::OpenAPI::fromJsonValue(m_automatic, json[QString("automatic")]);
    m_automatic_isSet = !json[QString("automatic")].isNull() && m_automatic_isValid;

    m_automatic_membership_email_domains_isValid = ::OpenAPI::fromJsonValue(m_automatic_membership_email_domains, json[QString("automatic_membership_email_domains")]);
    m_automatic_membership_email_domains_isSet = !json[QString("automatic_membership_email_domains")].isNull() && m_automatic_membership_email_domains_isValid;

    m_bio_cooked_isValid = ::OpenAPI::fromJsonValue(m_bio_cooked, json[QString("bio_cooked")]);
    m_bio_cooked_isSet = !json[QString("bio_cooked")].isNull() && m_bio_cooked_isValid;

    m_bio_excerpt_isValid = ::OpenAPI::fromJsonValue(m_bio_excerpt, json[QString("bio_excerpt")]);
    m_bio_excerpt_isSet = !json[QString("bio_excerpt")].isNull() && m_bio_excerpt_isValid;

    m_bio_raw_isValid = ::OpenAPI::fromJsonValue(m_bio_raw, json[QString("bio_raw")]);
    m_bio_raw_isSet = !json[QString("bio_raw")].isNull() && m_bio_raw_isValid;

    m_can_admin_group_isValid = ::OpenAPI::fromJsonValue(m_can_admin_group, json[QString("can_admin_group")]);
    m_can_admin_group_isSet = !json[QString("can_admin_group")].isNull() && m_can_admin_group_isValid;

    m_can_edit_group_isValid = ::OpenAPI::fromJsonValue(m_can_edit_group, json[QString("can_edit_group")]);
    m_can_edit_group_isSet = !json[QString("can_edit_group")].isNull() && m_can_edit_group_isValid;

    m_can_see_members_isValid = ::OpenAPI::fromJsonValue(m_can_see_members, json[QString("can_see_members")]);
    m_can_see_members_isSet = !json[QString("can_see_members")].isNull() && m_can_see_members_isValid;

    m_default_notification_level_isValid = ::OpenAPI::fromJsonValue(m_default_notification_level, json[QString("default_notification_level")]);
    m_default_notification_level_isSet = !json[QString("default_notification_level")].isNull() && m_default_notification_level_isValid;

    m_email_from_alias_isValid = ::OpenAPI::fromJsonValue(m_email_from_alias, json[QString("email_from_alias")]);
    m_email_from_alias_isSet = !json[QString("email_from_alias")].isNull() && m_email_from_alias_isValid;

    m_email_password_isValid = ::OpenAPI::fromJsonValue(m_email_password, json[QString("email_password")]);
    m_email_password_isSet = !json[QString("email_password")].isNull() && m_email_password_isValid;

    m_email_username_isValid = ::OpenAPI::fromJsonValue(m_email_username, json[QString("email_username")]);
    m_email_username_isSet = !json[QString("email_username")].isNull() && m_email_username_isValid;

    m_flair_bg_color_isValid = ::OpenAPI::fromJsonValue(m_flair_bg_color, json[QString("flair_bg_color")]);
    m_flair_bg_color_isSet = !json[QString("flair_bg_color")].isNull() && m_flair_bg_color_isValid;

    m_flair_color_isValid = ::OpenAPI::fromJsonValue(m_flair_color, json[QString("flair_color")]);
    m_flair_color_isSet = !json[QString("flair_color")].isNull() && m_flair_color_isValid;

    m_flair_url_isValid = ::OpenAPI::fromJsonValue(m_flair_url, json[QString("flair_url")]);
    m_flair_url_isSet = !json[QString("flair_url")].isNull() && m_flair_url_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_grant_trust_level_isValid = ::OpenAPI::fromJsonValue(m_grant_trust_level, json[QString("grant_trust_level")]);
    m_grant_trust_level_isSet = !json[QString("grant_trust_level")].isNull() && m_grant_trust_level_isValid;

    m_has_messages_isValid = ::OpenAPI::fromJsonValue(m_has_messages, json[QString("has_messages")]);
    m_has_messages_isSet = !json[QString("has_messages")].isNull() && m_has_messages_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_imap_enabled_isValid = ::OpenAPI::fromJsonValue(m_imap_enabled, json[QString("imap_enabled")]);
    m_imap_enabled_isSet = !json[QString("imap_enabled")].isNull() && m_imap_enabled_isValid;

    m_imap_last_error_isValid = ::OpenAPI::fromJsonValue(m_imap_last_error, json[QString("imap_last_error")]);
    m_imap_last_error_isSet = !json[QString("imap_last_error")].isNull() && m_imap_last_error_isValid;

    m_imap_mailbox_name_isValid = ::OpenAPI::fromJsonValue(m_imap_mailbox_name, json[QString("imap_mailbox_name")]);
    m_imap_mailbox_name_isSet = !json[QString("imap_mailbox_name")].isNull() && m_imap_mailbox_name_isValid;

    m_imap_mailboxes_isValid = ::OpenAPI::fromJsonValue(m_imap_mailboxes, json[QString("imap_mailboxes")]);
    m_imap_mailboxes_isSet = !json[QString("imap_mailboxes")].isNull() && m_imap_mailboxes_isValid;

    m_imap_new_emails_isValid = ::OpenAPI::fromJsonValue(m_imap_new_emails, json[QString("imap_new_emails")]);
    m_imap_new_emails_isSet = !json[QString("imap_new_emails")].isNull() && m_imap_new_emails_isValid;

    m_imap_old_emails_isValid = ::OpenAPI::fromJsonValue(m_imap_old_emails, json[QString("imap_old_emails")]);
    m_imap_old_emails_isSet = !json[QString("imap_old_emails")].isNull() && m_imap_old_emails_isValid;

    m_imap_port_isValid = ::OpenAPI::fromJsonValue(m_imap_port, json[QString("imap_port")]);
    m_imap_port_isSet = !json[QString("imap_port")].isNull() && m_imap_port_isValid;

    m_imap_server_isValid = ::OpenAPI::fromJsonValue(m_imap_server, json[QString("imap_server")]);
    m_imap_server_isSet = !json[QString("imap_server")].isNull() && m_imap_server_isValid;

    m_imap_ssl_isValid = ::OpenAPI::fromJsonValue(m_imap_ssl, json[QString("imap_ssl")]);
    m_imap_ssl_isSet = !json[QString("imap_ssl")].isNull() && m_imap_ssl_isValid;

    m_imap_updated_at_isValid = ::OpenAPI::fromJsonValue(m_imap_updated_at, json[QString("imap_updated_at")]);
    m_imap_updated_at_isSet = !json[QString("imap_updated_at")].isNull() && m_imap_updated_at_isValid;

    m_imap_updated_by_isValid = ::OpenAPI::fromJsonValue(m_imap_updated_by, json[QString("imap_updated_by")]);
    m_imap_updated_by_isSet = !json[QString("imap_updated_by")].isNull() && m_imap_updated_by_isValid;

    m_incoming_email_isValid = ::OpenAPI::fromJsonValue(m_incoming_email, json[QString("incoming_email")]);
    m_incoming_email_isSet = !json[QString("incoming_email")].isNull() && m_incoming_email_isValid;

    m_is_group_owner_display_isValid = ::OpenAPI::fromJsonValue(m_is_group_owner_display, json[QString("is_group_owner_display")]);
    m_is_group_owner_display_isSet = !json[QString("is_group_owner_display")].isNull() && m_is_group_owner_display_isValid;

    m_is_group_user_isValid = ::OpenAPI::fromJsonValue(m_is_group_user, json[QString("is_group_user")]);
    m_is_group_user_isSet = !json[QString("is_group_user")].isNull() && m_is_group_user_isValid;

    m_members_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_members_visibility_level, json[QString("members_visibility_level")]);
    m_members_visibility_level_isSet = !json[QString("members_visibility_level")].isNull() && m_members_visibility_level_isValid;

    m_membership_request_template_isValid = ::OpenAPI::fromJsonValue(m_membership_request_template, json[QString("membership_request_template")]);
    m_membership_request_template_isSet = !json[QString("membership_request_template")].isNull() && m_membership_request_template_isValid;

    m_mentionable_isValid = ::OpenAPI::fromJsonValue(m_mentionable, json[QString("mentionable")]);
    m_mentionable_isSet = !json[QString("mentionable")].isNull() && m_mentionable_isValid;

    m_mentionable_level_isValid = ::OpenAPI::fromJsonValue(m_mentionable_level, json[QString("mentionable_level")]);
    m_mentionable_level_isSet = !json[QString("mentionable_level")].isNull() && m_mentionable_level_isValid;

    m_message_count_isValid = ::OpenAPI::fromJsonValue(m_message_count, json[QString("message_count")]);
    m_message_count_isSet = !json[QString("message_count")].isNull() && m_message_count_isValid;

    m_messageable_isValid = ::OpenAPI::fromJsonValue(m_messageable, json[QString("messageable")]);
    m_messageable_isSet = !json[QString("messageable")].isNull() && m_messageable_isValid;

    m_messageable_level_isValid = ::OpenAPI::fromJsonValue(m_messageable_level, json[QString("messageable_level")]);
    m_messageable_level_isSet = !json[QString("messageable_level")].isNull() && m_messageable_level_isValid;

    m_muted_category_ids_isValid = ::OpenAPI::fromJsonValue(m_muted_category_ids, json[QString("muted_category_ids")]);
    m_muted_category_ids_isSet = !json[QString("muted_category_ids")].isNull() && m_muted_category_ids_isValid;

    m_muted_tags_isValid = ::OpenAPI::fromJsonValue(m_muted_tags, json[QString("muted_tags")]);
    m_muted_tags_isSet = !json[QString("muted_tags")].isNull() && m_muted_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_group_isValid = ::OpenAPI::fromJsonValue(m_primary_group, json[QString("primary_group")]);
    m_primary_group_isSet = !json[QString("primary_group")].isNull() && m_primary_group_isValid;

    m_public_admission_isValid = ::OpenAPI::fromJsonValue(m_public_admission, json[QString("public_admission")]);
    m_public_admission_isSet = !json[QString("public_admission")].isNull() && m_public_admission_isValid;

    m_public_exit_isValid = ::OpenAPI::fromJsonValue(m_public_exit, json[QString("public_exit")]);
    m_public_exit_isSet = !json[QString("public_exit")].isNull() && m_public_exit_isValid;

    m_publish_read_state_isValid = ::OpenAPI::fromJsonValue(m_publish_read_state, json[QString("publish_read_state")]);
    m_publish_read_state_isSet = !json[QString("publish_read_state")].isNull() && m_publish_read_state_isValid;

    m_regular_category_ids_isValid = ::OpenAPI::fromJsonValue(m_regular_category_ids, json[QString("regular_category_ids")]);
    m_regular_category_ids_isSet = !json[QString("regular_category_ids")].isNull() && m_regular_category_ids_isValid;

    m_regular_tags_isValid = ::OpenAPI::fromJsonValue(m_regular_tags, json[QString("regular_tags")]);
    m_regular_tags_isSet = !json[QString("regular_tags")].isNull() && m_regular_tags_isValid;

    m_smtp_enabled_isValid = ::OpenAPI::fromJsonValue(m_smtp_enabled, json[QString("smtp_enabled")]);
    m_smtp_enabled_isSet = !json[QString("smtp_enabled")].isNull() && m_smtp_enabled_isValid;

    m_smtp_port_isValid = ::OpenAPI::fromJsonValue(m_smtp_port, json[QString("smtp_port")]);
    m_smtp_port_isSet = !json[QString("smtp_port")].isNull() && m_smtp_port_isValid;

    m_smtp_server_isValid = ::OpenAPI::fromJsonValue(m_smtp_server, json[QString("smtp_server")]);
    m_smtp_server_isSet = !json[QString("smtp_server")].isNull() && m_smtp_server_isValid;

    m_smtp_ssl_isValid = ::OpenAPI::fromJsonValue(m_smtp_ssl, json[QString("smtp_ssl")]);
    m_smtp_ssl_isSet = !json[QString("smtp_ssl")].isNull() && m_smtp_ssl_isValid;

    m_smtp_updated_at_isValid = ::OpenAPI::fromJsonValue(m_smtp_updated_at, json[QString("smtp_updated_at")]);
    m_smtp_updated_at_isSet = !json[QString("smtp_updated_at")].isNull() && m_smtp_updated_at_isValid;

    m_smtp_updated_by_isValid = ::OpenAPI::fromJsonValue(m_smtp_updated_by, json[QString("smtp_updated_by")]);
    m_smtp_updated_by_isSet = !json[QString("smtp_updated_by")].isNull() && m_smtp_updated_by_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracking_category_ids_isValid = ::OpenAPI::fromJsonValue(m_tracking_category_ids, json[QString("tracking_category_ids")]);
    m_tracking_category_ids_isSet = !json[QString("tracking_category_ids")].isNull() && m_tracking_category_ids_isValid;

    m_tracking_tags_isValid = ::OpenAPI::fromJsonValue(m_tracking_tags, json[QString("tracking_tags")]);
    m_tracking_tags_isSet = !json[QString("tracking_tags")].isNull() && m_tracking_tags_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("user_count")]);
    m_user_count_isSet = !json[QString("user_count")].isNull() && m_user_count_isValid;

    m_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_visibility_level, json[QString("visibility_level")]);
    m_visibility_level_isSet = !json[QString("visibility_level")].isNull() && m_visibility_level_isValid;

    m_watching_category_ids_isValid = ::OpenAPI::fromJsonValue(m_watching_category_ids, json[QString("watching_category_ids")]);
    m_watching_category_ids_isSet = !json[QString("watching_category_ids")].isNull() && m_watching_category_ids_isValid;

    m_watching_first_post_category_ids_isValid = ::OpenAPI::fromJsonValue(m_watching_first_post_category_ids, json[QString("watching_first_post_category_ids")]);
    m_watching_first_post_category_ids_isSet = !json[QString("watching_first_post_category_ids")].isNull() && m_watching_first_post_category_ids_isValid;

    m_watching_first_post_tags_isValid = ::OpenAPI::fromJsonValue(m_watching_first_post_tags, json[QString("watching_first_post_tags")]);
    m_watching_first_post_tags_isSet = !json[QString("watching_first_post_tags")].isNull() && m_watching_first_post_tags_isValid;

    m_watching_tags_isValid = ::OpenAPI::fromJsonValue(m_watching_tags, json[QString("watching_tags")]);
    m_watching_tags_isSet = !json[QString("watching_tags")].isNull() && m_watching_tags_isValid;
}

QString OAIGetGroup_200_response_group::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetGroup_200_response_group::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_membership_requests_isSet) {
        obj.insert(QString("allow_membership_requests"), ::OpenAPI::toJsonValue(m_allow_membership_requests));
    }
    if (m_allow_unknown_sender_topic_replies_isSet) {
        obj.insert(QString("allow_unknown_sender_topic_replies"), ::OpenAPI::toJsonValue(m_allow_unknown_sender_topic_replies));
    }
    if (m_associated_group_ids.size() > 0) {
        obj.insert(QString("associated_group_ids"), ::OpenAPI::toJsonValue(m_associated_group_ids));
    }
    if (m_automatic_isSet) {
        obj.insert(QString("automatic"), ::OpenAPI::toJsonValue(m_automatic));
    }
    if (m_automatic_membership_email_domains_isSet) {
        obj.insert(QString("automatic_membership_email_domains"), ::OpenAPI::toJsonValue(m_automatic_membership_email_domains));
    }
    if (m_bio_cooked_isSet) {
        obj.insert(QString("bio_cooked"), ::OpenAPI::toJsonValue(m_bio_cooked));
    }
    if (m_bio_excerpt_isSet) {
        obj.insert(QString("bio_excerpt"), ::OpenAPI::toJsonValue(m_bio_excerpt));
    }
    if (m_bio_raw_isSet) {
        obj.insert(QString("bio_raw"), ::OpenAPI::toJsonValue(m_bio_raw));
    }
    if (m_can_admin_group_isSet) {
        obj.insert(QString("can_admin_group"), ::OpenAPI::toJsonValue(m_can_admin_group));
    }
    if (m_can_edit_group_isSet) {
        obj.insert(QString("can_edit_group"), ::OpenAPI::toJsonValue(m_can_edit_group));
    }
    if (m_can_see_members_isSet) {
        obj.insert(QString("can_see_members"), ::OpenAPI::toJsonValue(m_can_see_members));
    }
    if (m_default_notification_level_isSet) {
        obj.insert(QString("default_notification_level"), ::OpenAPI::toJsonValue(m_default_notification_level));
    }
    if (m_email_from_alias_isSet) {
        obj.insert(QString("email_from_alias"), ::OpenAPI::toJsonValue(m_email_from_alias));
    }
    if (m_email_password_isSet) {
        obj.insert(QString("email_password"), ::OpenAPI::toJsonValue(m_email_password));
    }
    if (m_email_username_isSet) {
        obj.insert(QString("email_username"), ::OpenAPI::toJsonValue(m_email_username));
    }
    if (m_flair_bg_color_isSet) {
        obj.insert(QString("flair_bg_color"), ::OpenAPI::toJsonValue(m_flair_bg_color));
    }
    if (m_flair_color_isSet) {
        obj.insert(QString("flair_color"), ::OpenAPI::toJsonValue(m_flair_color));
    }
    if (m_flair_url_isSet) {
        obj.insert(QString("flair_url"), ::OpenAPI::toJsonValue(m_flair_url));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_grant_trust_level_isSet) {
        obj.insert(QString("grant_trust_level"), ::OpenAPI::toJsonValue(m_grant_trust_level));
    }
    if (m_has_messages_isSet) {
        obj.insert(QString("has_messages"), ::OpenAPI::toJsonValue(m_has_messages));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_imap_enabled_isSet) {
        obj.insert(QString("imap_enabled"), ::OpenAPI::toJsonValue(m_imap_enabled));
    }
    if (m_imap_last_error_isSet) {
        obj.insert(QString("imap_last_error"), ::OpenAPI::toJsonValue(m_imap_last_error));
    }
    if (m_imap_mailbox_name_isSet) {
        obj.insert(QString("imap_mailbox_name"), ::OpenAPI::toJsonValue(m_imap_mailbox_name));
    }
    if (m_imap_mailboxes.size() > 0) {
        obj.insert(QString("imap_mailboxes"), ::OpenAPI::toJsonValue(m_imap_mailboxes));
    }
    if (m_imap_new_emails_isSet) {
        obj.insert(QString("imap_new_emails"), ::OpenAPI::toJsonValue(m_imap_new_emails));
    }
    if (m_imap_old_emails_isSet) {
        obj.insert(QString("imap_old_emails"), ::OpenAPI::toJsonValue(m_imap_old_emails));
    }
    if (m_imap_port_isSet) {
        obj.insert(QString("imap_port"), ::OpenAPI::toJsonValue(m_imap_port));
    }
    if (m_imap_server_isSet) {
        obj.insert(QString("imap_server"), ::OpenAPI::toJsonValue(m_imap_server));
    }
    if (m_imap_ssl_isSet) {
        obj.insert(QString("imap_ssl"), ::OpenAPI::toJsonValue(m_imap_ssl));
    }
    if (m_imap_updated_at_isSet) {
        obj.insert(QString("imap_updated_at"), ::OpenAPI::toJsonValue(m_imap_updated_at));
    }
    if (m_imap_updated_by.isSet()) {
        obj.insert(QString("imap_updated_by"), ::OpenAPI::toJsonValue(m_imap_updated_by));
    }
    if (m_incoming_email_isSet) {
        obj.insert(QString("incoming_email"), ::OpenAPI::toJsonValue(m_incoming_email));
    }
    if (m_is_group_owner_display_isSet) {
        obj.insert(QString("is_group_owner_display"), ::OpenAPI::toJsonValue(m_is_group_owner_display));
    }
    if (m_is_group_user_isSet) {
        obj.insert(QString("is_group_user"), ::OpenAPI::toJsonValue(m_is_group_user));
    }
    if (m_members_visibility_level_isSet) {
        obj.insert(QString("members_visibility_level"), ::OpenAPI::toJsonValue(m_members_visibility_level));
    }
    if (m_membership_request_template_isSet) {
        obj.insert(QString("membership_request_template"), ::OpenAPI::toJsonValue(m_membership_request_template));
    }
    if (m_mentionable_isSet) {
        obj.insert(QString("mentionable"), ::OpenAPI::toJsonValue(m_mentionable));
    }
    if (m_mentionable_level_isSet) {
        obj.insert(QString("mentionable_level"), ::OpenAPI::toJsonValue(m_mentionable_level));
    }
    if (m_message_count_isSet) {
        obj.insert(QString("message_count"), ::OpenAPI::toJsonValue(m_message_count));
    }
    if (m_messageable_isSet) {
        obj.insert(QString("messageable"), ::OpenAPI::toJsonValue(m_messageable));
    }
    if (m_messageable_level_isSet) {
        obj.insert(QString("messageable_level"), ::OpenAPI::toJsonValue(m_messageable_level));
    }
    if (m_muted_category_ids.size() > 0) {
        obj.insert(QString("muted_category_ids"), ::OpenAPI::toJsonValue(m_muted_category_ids));
    }
    if (m_muted_tags.size() > 0) {
        obj.insert(QString("muted_tags"), ::OpenAPI::toJsonValue(m_muted_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_group_isSet) {
        obj.insert(QString("primary_group"), ::OpenAPI::toJsonValue(m_primary_group));
    }
    if (m_public_admission_isSet) {
        obj.insert(QString("public_admission"), ::OpenAPI::toJsonValue(m_public_admission));
    }
    if (m_public_exit_isSet) {
        obj.insert(QString("public_exit"), ::OpenAPI::toJsonValue(m_public_exit));
    }
    if (m_publish_read_state_isSet) {
        obj.insert(QString("publish_read_state"), ::OpenAPI::toJsonValue(m_publish_read_state));
    }
    if (m_regular_category_ids.size() > 0) {
        obj.insert(QString("regular_category_ids"), ::OpenAPI::toJsonValue(m_regular_category_ids));
    }
    if (m_regular_tags.size() > 0) {
        obj.insert(QString("regular_tags"), ::OpenAPI::toJsonValue(m_regular_tags));
    }
    if (m_smtp_enabled_isSet) {
        obj.insert(QString("smtp_enabled"), ::OpenAPI::toJsonValue(m_smtp_enabled));
    }
    if (m_smtp_port_isSet) {
        obj.insert(QString("smtp_port"), ::OpenAPI::toJsonValue(m_smtp_port));
    }
    if (m_smtp_server_isSet) {
        obj.insert(QString("smtp_server"), ::OpenAPI::toJsonValue(m_smtp_server));
    }
    if (m_smtp_ssl_isSet) {
        obj.insert(QString("smtp_ssl"), ::OpenAPI::toJsonValue(m_smtp_ssl));
    }
    if (m_smtp_updated_at_isSet) {
        obj.insert(QString("smtp_updated_at"), ::OpenAPI::toJsonValue(m_smtp_updated_at));
    }
    if (m_smtp_updated_by.isSet()) {
        obj.insert(QString("smtp_updated_by"), ::OpenAPI::toJsonValue(m_smtp_updated_by));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracking_category_ids.size() > 0) {
        obj.insert(QString("tracking_category_ids"), ::OpenAPI::toJsonValue(m_tracking_category_ids));
    }
    if (m_tracking_tags.size() > 0) {
        obj.insert(QString("tracking_tags"), ::OpenAPI::toJsonValue(m_tracking_tags));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("user_count"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_visibility_level_isSet) {
        obj.insert(QString("visibility_level"), ::OpenAPI::toJsonValue(m_visibility_level));
    }
    if (m_watching_category_ids.size() > 0) {
        obj.insert(QString("watching_category_ids"), ::OpenAPI::toJsonValue(m_watching_category_ids));
    }
    if (m_watching_first_post_category_ids.size() > 0) {
        obj.insert(QString("watching_first_post_category_ids"), ::OpenAPI::toJsonValue(m_watching_first_post_category_ids));
    }
    if (m_watching_first_post_tags.size() > 0) {
        obj.insert(QString("watching_first_post_tags"), ::OpenAPI::toJsonValue(m_watching_first_post_tags));
    }
    if (m_watching_tags.size() > 0) {
        obj.insert(QString("watching_tags"), ::OpenAPI::toJsonValue(m_watching_tags));
    }
    return obj;
}

bool OAIGetGroup_200_response_group::isAllowMembershipRequests() const {
    return m_allow_membership_requests;
}
void OAIGetGroup_200_response_group::setAllowMembershipRequests(const bool &allow_membership_requests) {
    m_allow_membership_requests = allow_membership_requests;
    m_allow_membership_requests_isSet = true;
}

bool OAIGetGroup_200_response_group::is_allow_membership_requests_Set() const{
    return m_allow_membership_requests_isSet;
}

bool OAIGetGroup_200_response_group::is_allow_membership_requests_Valid() const{
    return m_allow_membership_requests_isValid;
}

bool OAIGetGroup_200_response_group::isAllowUnknownSenderTopicReplies() const {
    return m_allow_unknown_sender_topic_replies;
}
void OAIGetGroup_200_response_group::setAllowUnknownSenderTopicReplies(const bool &allow_unknown_sender_topic_replies) {
    m_allow_unknown_sender_topic_replies = allow_unknown_sender_topic_replies;
    m_allow_unknown_sender_topic_replies_isSet = true;
}

bool OAIGetGroup_200_response_group::is_allow_unknown_sender_topic_replies_Set() const{
    return m_allow_unknown_sender_topic_replies_isSet;
}

bool OAIGetGroup_200_response_group::is_allow_unknown_sender_topic_replies_Valid() const{
    return m_allow_unknown_sender_topic_replies_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getAssociatedGroupIds() const {
    return m_associated_group_ids;
}
void OAIGetGroup_200_response_group::setAssociatedGroupIds(const QList<QJsonValue> &associated_group_ids) {
    m_associated_group_ids = associated_group_ids;
    m_associated_group_ids_isSet = true;
}

bool OAIGetGroup_200_response_group::is_associated_group_ids_Set() const{
    return m_associated_group_ids_isSet;
}

bool OAIGetGroup_200_response_group::is_associated_group_ids_Valid() const{
    return m_associated_group_ids_isValid;
}

bool OAIGetGroup_200_response_group::isAutomatic() const {
    return m_automatic;
}
void OAIGetGroup_200_response_group::setAutomatic(const bool &automatic) {
    m_automatic = automatic;
    m_automatic_isSet = true;
}

bool OAIGetGroup_200_response_group::is_automatic_Set() const{
    return m_automatic_isSet;
}

bool OAIGetGroup_200_response_group::is_automatic_Valid() const{
    return m_automatic_isValid;
}

QString OAIGetGroup_200_response_group::getAutomaticMembershipEmailDomains() const {
    return m_automatic_membership_email_domains;
}
void OAIGetGroup_200_response_group::setAutomaticMembershipEmailDomains(const QString &automatic_membership_email_domains) {
    m_automatic_membership_email_domains = automatic_membership_email_domains;
    m_automatic_membership_email_domains_isSet = true;
}

bool OAIGetGroup_200_response_group::is_automatic_membership_email_domains_Set() const{
    return m_automatic_membership_email_domains_isSet;
}

bool OAIGetGroup_200_response_group::is_automatic_membership_email_domains_Valid() const{
    return m_automatic_membership_email_domains_isValid;
}

QString OAIGetGroup_200_response_group::getBioCooked() const {
    return m_bio_cooked;
}
void OAIGetGroup_200_response_group::setBioCooked(const QString &bio_cooked) {
    m_bio_cooked = bio_cooked;
    m_bio_cooked_isSet = true;
}

bool OAIGetGroup_200_response_group::is_bio_cooked_Set() const{
    return m_bio_cooked_isSet;
}

bool OAIGetGroup_200_response_group::is_bio_cooked_Valid() const{
    return m_bio_cooked_isValid;
}

QString OAIGetGroup_200_response_group::getBioExcerpt() const {
    return m_bio_excerpt;
}
void OAIGetGroup_200_response_group::setBioExcerpt(const QString &bio_excerpt) {
    m_bio_excerpt = bio_excerpt;
    m_bio_excerpt_isSet = true;
}

bool OAIGetGroup_200_response_group::is_bio_excerpt_Set() const{
    return m_bio_excerpt_isSet;
}

bool OAIGetGroup_200_response_group::is_bio_excerpt_Valid() const{
    return m_bio_excerpt_isValid;
}

QString OAIGetGroup_200_response_group::getBioRaw() const {
    return m_bio_raw;
}
void OAIGetGroup_200_response_group::setBioRaw(const QString &bio_raw) {
    m_bio_raw = bio_raw;
    m_bio_raw_isSet = true;
}

bool OAIGetGroup_200_response_group::is_bio_raw_Set() const{
    return m_bio_raw_isSet;
}

bool OAIGetGroup_200_response_group::is_bio_raw_Valid() const{
    return m_bio_raw_isValid;
}

bool OAIGetGroup_200_response_group::isCanAdminGroup() const {
    return m_can_admin_group;
}
void OAIGetGroup_200_response_group::setCanAdminGroup(const bool &can_admin_group) {
    m_can_admin_group = can_admin_group;
    m_can_admin_group_isSet = true;
}

bool OAIGetGroup_200_response_group::is_can_admin_group_Set() const{
    return m_can_admin_group_isSet;
}

bool OAIGetGroup_200_response_group::is_can_admin_group_Valid() const{
    return m_can_admin_group_isValid;
}

bool OAIGetGroup_200_response_group::isCanEditGroup() const {
    return m_can_edit_group;
}
void OAIGetGroup_200_response_group::setCanEditGroup(const bool &can_edit_group) {
    m_can_edit_group = can_edit_group;
    m_can_edit_group_isSet = true;
}

bool OAIGetGroup_200_response_group::is_can_edit_group_Set() const{
    return m_can_edit_group_isSet;
}

bool OAIGetGroup_200_response_group::is_can_edit_group_Valid() const{
    return m_can_edit_group_isValid;
}

bool OAIGetGroup_200_response_group::isCanSeeMembers() const {
    return m_can_see_members;
}
void OAIGetGroup_200_response_group::setCanSeeMembers(const bool &can_see_members) {
    m_can_see_members = can_see_members;
    m_can_see_members_isSet = true;
}

bool OAIGetGroup_200_response_group::is_can_see_members_Set() const{
    return m_can_see_members_isSet;
}

bool OAIGetGroup_200_response_group::is_can_see_members_Valid() const{
    return m_can_see_members_isValid;
}

qint32 OAIGetGroup_200_response_group::getDefaultNotificationLevel() const {
    return m_default_notification_level;
}
void OAIGetGroup_200_response_group::setDefaultNotificationLevel(const qint32 &default_notification_level) {
    m_default_notification_level = default_notification_level;
    m_default_notification_level_isSet = true;
}

bool OAIGetGroup_200_response_group::is_default_notification_level_Set() const{
    return m_default_notification_level_isSet;
}

bool OAIGetGroup_200_response_group::is_default_notification_level_Valid() const{
    return m_default_notification_level_isValid;
}

QString OAIGetGroup_200_response_group::getEmailFromAlias() const {
    return m_email_from_alias;
}
void OAIGetGroup_200_response_group::setEmailFromAlias(const QString &email_from_alias) {
    m_email_from_alias = email_from_alias;
    m_email_from_alias_isSet = true;
}

bool OAIGetGroup_200_response_group::is_email_from_alias_Set() const{
    return m_email_from_alias_isSet;
}

bool OAIGetGroup_200_response_group::is_email_from_alias_Valid() const{
    return m_email_from_alias_isValid;
}

QString OAIGetGroup_200_response_group::getEmailPassword() const {
    return m_email_password;
}
void OAIGetGroup_200_response_group::setEmailPassword(const QString &email_password) {
    m_email_password = email_password;
    m_email_password_isSet = true;
}

bool OAIGetGroup_200_response_group::is_email_password_Set() const{
    return m_email_password_isSet;
}

bool OAIGetGroup_200_response_group::is_email_password_Valid() const{
    return m_email_password_isValid;
}

QString OAIGetGroup_200_response_group::getEmailUsername() const {
    return m_email_username;
}
void OAIGetGroup_200_response_group::setEmailUsername(const QString &email_username) {
    m_email_username = email_username;
    m_email_username_isSet = true;
}

bool OAIGetGroup_200_response_group::is_email_username_Set() const{
    return m_email_username_isSet;
}

bool OAIGetGroup_200_response_group::is_email_username_Valid() const{
    return m_email_username_isValid;
}

QString OAIGetGroup_200_response_group::getFlairBgColor() const {
    return m_flair_bg_color;
}
void OAIGetGroup_200_response_group::setFlairBgColor(const QString &flair_bg_color) {
    m_flair_bg_color = flair_bg_color;
    m_flair_bg_color_isSet = true;
}

bool OAIGetGroup_200_response_group::is_flair_bg_color_Set() const{
    return m_flair_bg_color_isSet;
}

bool OAIGetGroup_200_response_group::is_flair_bg_color_Valid() const{
    return m_flair_bg_color_isValid;
}

QString OAIGetGroup_200_response_group::getFlairColor() const {
    return m_flair_color;
}
void OAIGetGroup_200_response_group::setFlairColor(const QString &flair_color) {
    m_flair_color = flair_color;
    m_flair_color_isSet = true;
}

bool OAIGetGroup_200_response_group::is_flair_color_Set() const{
    return m_flair_color_isSet;
}

bool OAIGetGroup_200_response_group::is_flair_color_Valid() const{
    return m_flair_color_isValid;
}

QString OAIGetGroup_200_response_group::getFlairUrl() const {
    return m_flair_url;
}
void OAIGetGroup_200_response_group::setFlairUrl(const QString &flair_url) {
    m_flair_url = flair_url;
    m_flair_url_isSet = true;
}

bool OAIGetGroup_200_response_group::is_flair_url_Set() const{
    return m_flair_url_isSet;
}

bool OAIGetGroup_200_response_group::is_flair_url_Valid() const{
    return m_flair_url_isValid;
}

QString OAIGetGroup_200_response_group::getFullName() const {
    return m_full_name;
}
void OAIGetGroup_200_response_group::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIGetGroup_200_response_group::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIGetGroup_200_response_group::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIGetGroup_200_response_group::getGrantTrustLevel() const {
    return m_grant_trust_level;
}
void OAIGetGroup_200_response_group::setGrantTrustLevel(const QString &grant_trust_level) {
    m_grant_trust_level = grant_trust_level;
    m_grant_trust_level_isSet = true;
}

bool OAIGetGroup_200_response_group::is_grant_trust_level_Set() const{
    return m_grant_trust_level_isSet;
}

bool OAIGetGroup_200_response_group::is_grant_trust_level_Valid() const{
    return m_grant_trust_level_isValid;
}

bool OAIGetGroup_200_response_group::isHasMessages() const {
    return m_has_messages;
}
void OAIGetGroup_200_response_group::setHasMessages(const bool &has_messages) {
    m_has_messages = has_messages;
    m_has_messages_isSet = true;
}

bool OAIGetGroup_200_response_group::is_has_messages_Set() const{
    return m_has_messages_isSet;
}

bool OAIGetGroup_200_response_group::is_has_messages_Valid() const{
    return m_has_messages_isValid;
}

qint32 OAIGetGroup_200_response_group::getId() const {
    return m_id;
}
void OAIGetGroup_200_response_group::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetGroup_200_response_group::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetGroup_200_response_group::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetGroup_200_response_group::isImapEnabled() const {
    return m_imap_enabled;
}
void OAIGetGroup_200_response_group::setImapEnabled(const bool &imap_enabled) {
    m_imap_enabled = imap_enabled;
    m_imap_enabled_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_enabled_Set() const{
    return m_imap_enabled_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_enabled_Valid() const{
    return m_imap_enabled_isValid;
}

QString OAIGetGroup_200_response_group::getImapLastError() const {
    return m_imap_last_error;
}
void OAIGetGroup_200_response_group::setImapLastError(const QString &imap_last_error) {
    m_imap_last_error = imap_last_error;
    m_imap_last_error_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_last_error_Set() const{
    return m_imap_last_error_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_last_error_Valid() const{
    return m_imap_last_error_isValid;
}

QString OAIGetGroup_200_response_group::getImapMailboxName() const {
    return m_imap_mailbox_name;
}
void OAIGetGroup_200_response_group::setImapMailboxName(const QString &imap_mailbox_name) {
    m_imap_mailbox_name = imap_mailbox_name;
    m_imap_mailbox_name_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_mailbox_name_Set() const{
    return m_imap_mailbox_name_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_mailbox_name_Valid() const{
    return m_imap_mailbox_name_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getImapMailboxes() const {
    return m_imap_mailboxes;
}
void OAIGetGroup_200_response_group::setImapMailboxes(const QList<QJsonValue> &imap_mailboxes) {
    m_imap_mailboxes = imap_mailboxes;
    m_imap_mailboxes_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_mailboxes_Set() const{
    return m_imap_mailboxes_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_mailboxes_Valid() const{
    return m_imap_mailboxes_isValid;
}

QString OAIGetGroup_200_response_group::getImapNewEmails() const {
    return m_imap_new_emails;
}
void OAIGetGroup_200_response_group::setImapNewEmails(const QString &imap_new_emails) {
    m_imap_new_emails = imap_new_emails;
    m_imap_new_emails_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_new_emails_Set() const{
    return m_imap_new_emails_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_new_emails_Valid() const{
    return m_imap_new_emails_isValid;
}

QString OAIGetGroup_200_response_group::getImapOldEmails() const {
    return m_imap_old_emails;
}
void OAIGetGroup_200_response_group::setImapOldEmails(const QString &imap_old_emails) {
    m_imap_old_emails = imap_old_emails;
    m_imap_old_emails_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_old_emails_Set() const{
    return m_imap_old_emails_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_old_emails_Valid() const{
    return m_imap_old_emails_isValid;
}

QString OAIGetGroup_200_response_group::getImapPort() const {
    return m_imap_port;
}
void OAIGetGroup_200_response_group::setImapPort(const QString &imap_port) {
    m_imap_port = imap_port;
    m_imap_port_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_port_Set() const{
    return m_imap_port_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_port_Valid() const{
    return m_imap_port_isValid;
}

QString OAIGetGroup_200_response_group::getImapServer() const {
    return m_imap_server;
}
void OAIGetGroup_200_response_group::setImapServer(const QString &imap_server) {
    m_imap_server = imap_server;
    m_imap_server_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_server_Set() const{
    return m_imap_server_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_server_Valid() const{
    return m_imap_server_isValid;
}

QString OAIGetGroup_200_response_group::getImapSsl() const {
    return m_imap_ssl;
}
void OAIGetGroup_200_response_group::setImapSsl(const QString &imap_ssl) {
    m_imap_ssl = imap_ssl;
    m_imap_ssl_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_ssl_Set() const{
    return m_imap_ssl_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_ssl_Valid() const{
    return m_imap_ssl_isValid;
}

QString OAIGetGroup_200_response_group::getImapUpdatedAt() const {
    return m_imap_updated_at;
}
void OAIGetGroup_200_response_group::setImapUpdatedAt(const QString &imap_updated_at) {
    m_imap_updated_at = imap_updated_at;
    m_imap_updated_at_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_updated_at_Set() const{
    return m_imap_updated_at_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_updated_at_Valid() const{
    return m_imap_updated_at_isValid;
}

OAIObject OAIGetGroup_200_response_group::getImapUpdatedBy() const {
    return m_imap_updated_by;
}
void OAIGetGroup_200_response_group::setImapUpdatedBy(const OAIObject &imap_updated_by) {
    m_imap_updated_by = imap_updated_by;
    m_imap_updated_by_isSet = true;
}

bool OAIGetGroup_200_response_group::is_imap_updated_by_Set() const{
    return m_imap_updated_by_isSet;
}

bool OAIGetGroup_200_response_group::is_imap_updated_by_Valid() const{
    return m_imap_updated_by_isValid;
}

QString OAIGetGroup_200_response_group::getIncomingEmail() const {
    return m_incoming_email;
}
void OAIGetGroup_200_response_group::setIncomingEmail(const QString &incoming_email) {
    m_incoming_email = incoming_email;
    m_incoming_email_isSet = true;
}

bool OAIGetGroup_200_response_group::is_incoming_email_Set() const{
    return m_incoming_email_isSet;
}

bool OAIGetGroup_200_response_group::is_incoming_email_Valid() const{
    return m_incoming_email_isValid;
}

bool OAIGetGroup_200_response_group::isIsGroupOwnerDisplay() const {
    return m_is_group_owner_display;
}
void OAIGetGroup_200_response_group::setIsGroupOwnerDisplay(const bool &is_group_owner_display) {
    m_is_group_owner_display = is_group_owner_display;
    m_is_group_owner_display_isSet = true;
}

bool OAIGetGroup_200_response_group::is_is_group_owner_display_Set() const{
    return m_is_group_owner_display_isSet;
}

bool OAIGetGroup_200_response_group::is_is_group_owner_display_Valid() const{
    return m_is_group_owner_display_isValid;
}

bool OAIGetGroup_200_response_group::isIsGroupUser() const {
    return m_is_group_user;
}
void OAIGetGroup_200_response_group::setIsGroupUser(const bool &is_group_user) {
    m_is_group_user = is_group_user;
    m_is_group_user_isSet = true;
}

bool OAIGetGroup_200_response_group::is_is_group_user_Set() const{
    return m_is_group_user_isSet;
}

bool OAIGetGroup_200_response_group::is_is_group_user_Valid() const{
    return m_is_group_user_isValid;
}

qint32 OAIGetGroup_200_response_group::getMembersVisibilityLevel() const {
    return m_members_visibility_level;
}
void OAIGetGroup_200_response_group::setMembersVisibilityLevel(const qint32 &members_visibility_level) {
    m_members_visibility_level = members_visibility_level;
    m_members_visibility_level_isSet = true;
}

bool OAIGetGroup_200_response_group::is_members_visibility_level_Set() const{
    return m_members_visibility_level_isSet;
}

bool OAIGetGroup_200_response_group::is_members_visibility_level_Valid() const{
    return m_members_visibility_level_isValid;
}

QString OAIGetGroup_200_response_group::getMembershipRequestTemplate() const {
    return m_membership_request_template;
}
void OAIGetGroup_200_response_group::setMembershipRequestTemplate(const QString &membership_request_template) {
    m_membership_request_template = membership_request_template;
    m_membership_request_template_isSet = true;
}

bool OAIGetGroup_200_response_group::is_membership_request_template_Set() const{
    return m_membership_request_template_isSet;
}

bool OAIGetGroup_200_response_group::is_membership_request_template_Valid() const{
    return m_membership_request_template_isValid;
}

bool OAIGetGroup_200_response_group::isMentionable() const {
    return m_mentionable;
}
void OAIGetGroup_200_response_group::setMentionable(const bool &mentionable) {
    m_mentionable = mentionable;
    m_mentionable_isSet = true;
}

bool OAIGetGroup_200_response_group::is_mentionable_Set() const{
    return m_mentionable_isSet;
}

bool OAIGetGroup_200_response_group::is_mentionable_Valid() const{
    return m_mentionable_isValid;
}

qint32 OAIGetGroup_200_response_group::getMentionableLevel() const {
    return m_mentionable_level;
}
void OAIGetGroup_200_response_group::setMentionableLevel(const qint32 &mentionable_level) {
    m_mentionable_level = mentionable_level;
    m_mentionable_level_isSet = true;
}

bool OAIGetGroup_200_response_group::is_mentionable_level_Set() const{
    return m_mentionable_level_isSet;
}

bool OAIGetGroup_200_response_group::is_mentionable_level_Valid() const{
    return m_mentionable_level_isValid;
}

qint32 OAIGetGroup_200_response_group::getMessageCount() const {
    return m_message_count;
}
void OAIGetGroup_200_response_group::setMessageCount(const qint32 &message_count) {
    m_message_count = message_count;
    m_message_count_isSet = true;
}

bool OAIGetGroup_200_response_group::is_message_count_Set() const{
    return m_message_count_isSet;
}

bool OAIGetGroup_200_response_group::is_message_count_Valid() const{
    return m_message_count_isValid;
}

bool OAIGetGroup_200_response_group::isMessageable() const {
    return m_messageable;
}
void OAIGetGroup_200_response_group::setMessageable(const bool &messageable) {
    m_messageable = messageable;
    m_messageable_isSet = true;
}

bool OAIGetGroup_200_response_group::is_messageable_Set() const{
    return m_messageable_isSet;
}

bool OAIGetGroup_200_response_group::is_messageable_Valid() const{
    return m_messageable_isValid;
}

qint32 OAIGetGroup_200_response_group::getMessageableLevel() const {
    return m_messageable_level;
}
void OAIGetGroup_200_response_group::setMessageableLevel(const qint32 &messageable_level) {
    m_messageable_level = messageable_level;
    m_messageable_level_isSet = true;
}

bool OAIGetGroup_200_response_group::is_messageable_level_Set() const{
    return m_messageable_level_isSet;
}

bool OAIGetGroup_200_response_group::is_messageable_level_Valid() const{
    return m_messageable_level_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getMutedCategoryIds() const {
    return m_muted_category_ids;
}
void OAIGetGroup_200_response_group::setMutedCategoryIds(const QList<QJsonValue> &muted_category_ids) {
    m_muted_category_ids = muted_category_ids;
    m_muted_category_ids_isSet = true;
}

bool OAIGetGroup_200_response_group::is_muted_category_ids_Set() const{
    return m_muted_category_ids_isSet;
}

bool OAIGetGroup_200_response_group::is_muted_category_ids_Valid() const{
    return m_muted_category_ids_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getMutedTags() const {
    return m_muted_tags;
}
void OAIGetGroup_200_response_group::setMutedTags(const QList<QJsonValue> &muted_tags) {
    m_muted_tags = muted_tags;
    m_muted_tags_isSet = true;
}

bool OAIGetGroup_200_response_group::is_muted_tags_Set() const{
    return m_muted_tags_isSet;
}

bool OAIGetGroup_200_response_group::is_muted_tags_Valid() const{
    return m_muted_tags_isValid;
}

QString OAIGetGroup_200_response_group::getName() const {
    return m_name;
}
void OAIGetGroup_200_response_group::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetGroup_200_response_group::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetGroup_200_response_group::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetGroup_200_response_group::isPrimaryGroup() const {
    return m_primary_group;
}
void OAIGetGroup_200_response_group::setPrimaryGroup(const bool &primary_group) {
    m_primary_group = primary_group;
    m_primary_group_isSet = true;
}

bool OAIGetGroup_200_response_group::is_primary_group_Set() const{
    return m_primary_group_isSet;
}

bool OAIGetGroup_200_response_group::is_primary_group_Valid() const{
    return m_primary_group_isValid;
}

bool OAIGetGroup_200_response_group::isPublicAdmission() const {
    return m_public_admission;
}
void OAIGetGroup_200_response_group::setPublicAdmission(const bool &public_admission) {
    m_public_admission = public_admission;
    m_public_admission_isSet = true;
}

bool OAIGetGroup_200_response_group::is_public_admission_Set() const{
    return m_public_admission_isSet;
}

bool OAIGetGroup_200_response_group::is_public_admission_Valid() const{
    return m_public_admission_isValid;
}

bool OAIGetGroup_200_response_group::isPublicExit() const {
    return m_public_exit;
}
void OAIGetGroup_200_response_group::setPublicExit(const bool &public_exit) {
    m_public_exit = public_exit;
    m_public_exit_isSet = true;
}

bool OAIGetGroup_200_response_group::is_public_exit_Set() const{
    return m_public_exit_isSet;
}

bool OAIGetGroup_200_response_group::is_public_exit_Valid() const{
    return m_public_exit_isValid;
}

bool OAIGetGroup_200_response_group::isPublishReadState() const {
    return m_publish_read_state;
}
void OAIGetGroup_200_response_group::setPublishReadState(const bool &publish_read_state) {
    m_publish_read_state = publish_read_state;
    m_publish_read_state_isSet = true;
}

bool OAIGetGroup_200_response_group::is_publish_read_state_Set() const{
    return m_publish_read_state_isSet;
}

bool OAIGetGroup_200_response_group::is_publish_read_state_Valid() const{
    return m_publish_read_state_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getRegularCategoryIds() const {
    return m_regular_category_ids;
}
void OAIGetGroup_200_response_group::setRegularCategoryIds(const QList<QJsonValue> &regular_category_ids) {
    m_regular_category_ids = regular_category_ids;
    m_regular_category_ids_isSet = true;
}

bool OAIGetGroup_200_response_group::is_regular_category_ids_Set() const{
    return m_regular_category_ids_isSet;
}

bool OAIGetGroup_200_response_group::is_regular_category_ids_Valid() const{
    return m_regular_category_ids_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getRegularTags() const {
    return m_regular_tags;
}
void OAIGetGroup_200_response_group::setRegularTags(const QList<QJsonValue> &regular_tags) {
    m_regular_tags = regular_tags;
    m_regular_tags_isSet = true;
}

bool OAIGetGroup_200_response_group::is_regular_tags_Set() const{
    return m_regular_tags_isSet;
}

bool OAIGetGroup_200_response_group::is_regular_tags_Valid() const{
    return m_regular_tags_isValid;
}

bool OAIGetGroup_200_response_group::isSmtpEnabled() const {
    return m_smtp_enabled;
}
void OAIGetGroup_200_response_group::setSmtpEnabled(const bool &smtp_enabled) {
    m_smtp_enabled = smtp_enabled;
    m_smtp_enabled_isSet = true;
}

bool OAIGetGroup_200_response_group::is_smtp_enabled_Set() const{
    return m_smtp_enabled_isSet;
}

bool OAIGetGroup_200_response_group::is_smtp_enabled_Valid() const{
    return m_smtp_enabled_isValid;
}

QString OAIGetGroup_200_response_group::getSmtpPort() const {
    return m_smtp_port;
}
void OAIGetGroup_200_response_group::setSmtpPort(const QString &smtp_port) {
    m_smtp_port = smtp_port;
    m_smtp_port_isSet = true;
}

bool OAIGetGroup_200_response_group::is_smtp_port_Set() const{
    return m_smtp_port_isSet;
}

bool OAIGetGroup_200_response_group::is_smtp_port_Valid() const{
    return m_smtp_port_isValid;
}

QString OAIGetGroup_200_response_group::getSmtpServer() const {
    return m_smtp_server;
}
void OAIGetGroup_200_response_group::setSmtpServer(const QString &smtp_server) {
    m_smtp_server = smtp_server;
    m_smtp_server_isSet = true;
}

bool OAIGetGroup_200_response_group::is_smtp_server_Set() const{
    return m_smtp_server_isSet;
}

bool OAIGetGroup_200_response_group::is_smtp_server_Valid() const{
    return m_smtp_server_isValid;
}

QString OAIGetGroup_200_response_group::getSmtpSsl() const {
    return m_smtp_ssl;
}
void OAIGetGroup_200_response_group::setSmtpSsl(const QString &smtp_ssl) {
    m_smtp_ssl = smtp_ssl;
    m_smtp_ssl_isSet = true;
}

bool OAIGetGroup_200_response_group::is_smtp_ssl_Set() const{
    return m_smtp_ssl_isSet;
}

bool OAIGetGroup_200_response_group::is_smtp_ssl_Valid() const{
    return m_smtp_ssl_isValid;
}

QString OAIGetGroup_200_response_group::getSmtpUpdatedAt() const {
    return m_smtp_updated_at;
}
void OAIGetGroup_200_response_group::setSmtpUpdatedAt(const QString &smtp_updated_at) {
    m_smtp_updated_at = smtp_updated_at;
    m_smtp_updated_at_isSet = true;
}

bool OAIGetGroup_200_response_group::is_smtp_updated_at_Set() const{
    return m_smtp_updated_at_isSet;
}

bool OAIGetGroup_200_response_group::is_smtp_updated_at_Valid() const{
    return m_smtp_updated_at_isValid;
}

OAIObject OAIGetGroup_200_response_group::getSmtpUpdatedBy() const {
    return m_smtp_updated_by;
}
void OAIGetGroup_200_response_group::setSmtpUpdatedBy(const OAIObject &smtp_updated_by) {
    m_smtp_updated_by = smtp_updated_by;
    m_smtp_updated_by_isSet = true;
}

bool OAIGetGroup_200_response_group::is_smtp_updated_by_Set() const{
    return m_smtp_updated_by_isSet;
}

bool OAIGetGroup_200_response_group::is_smtp_updated_by_Valid() const{
    return m_smtp_updated_by_isValid;
}

QString OAIGetGroup_200_response_group::getTitle() const {
    return m_title;
}
void OAIGetGroup_200_response_group::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetGroup_200_response_group::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetGroup_200_response_group::is_title_Valid() const{
    return m_title_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getTrackingCategoryIds() const {
    return m_tracking_category_ids;
}
void OAIGetGroup_200_response_group::setTrackingCategoryIds(const QList<QJsonValue> &tracking_category_ids) {
    m_tracking_category_ids = tracking_category_ids;
    m_tracking_category_ids_isSet = true;
}

bool OAIGetGroup_200_response_group::is_tracking_category_ids_Set() const{
    return m_tracking_category_ids_isSet;
}

bool OAIGetGroup_200_response_group::is_tracking_category_ids_Valid() const{
    return m_tracking_category_ids_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getTrackingTags() const {
    return m_tracking_tags;
}
void OAIGetGroup_200_response_group::setTrackingTags(const QList<QJsonValue> &tracking_tags) {
    m_tracking_tags = tracking_tags;
    m_tracking_tags_isSet = true;
}

bool OAIGetGroup_200_response_group::is_tracking_tags_Set() const{
    return m_tracking_tags_isSet;
}

bool OAIGetGroup_200_response_group::is_tracking_tags_Valid() const{
    return m_tracking_tags_isValid;
}

qint32 OAIGetGroup_200_response_group::getUserCount() const {
    return m_user_count;
}
void OAIGetGroup_200_response_group::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIGetGroup_200_response_group::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIGetGroup_200_response_group::is_user_count_Valid() const{
    return m_user_count_isValid;
}

qint32 OAIGetGroup_200_response_group::getVisibilityLevel() const {
    return m_visibility_level;
}
void OAIGetGroup_200_response_group::setVisibilityLevel(const qint32 &visibility_level) {
    m_visibility_level = visibility_level;
    m_visibility_level_isSet = true;
}

bool OAIGetGroup_200_response_group::is_visibility_level_Set() const{
    return m_visibility_level_isSet;
}

bool OAIGetGroup_200_response_group::is_visibility_level_Valid() const{
    return m_visibility_level_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getWatchingCategoryIds() const {
    return m_watching_category_ids;
}
void OAIGetGroup_200_response_group::setWatchingCategoryIds(const QList<QJsonValue> &watching_category_ids) {
    m_watching_category_ids = watching_category_ids;
    m_watching_category_ids_isSet = true;
}

bool OAIGetGroup_200_response_group::is_watching_category_ids_Set() const{
    return m_watching_category_ids_isSet;
}

bool OAIGetGroup_200_response_group::is_watching_category_ids_Valid() const{
    return m_watching_category_ids_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getWatchingFirstPostCategoryIds() const {
    return m_watching_first_post_category_ids;
}
void OAIGetGroup_200_response_group::setWatchingFirstPostCategoryIds(const QList<QJsonValue> &watching_first_post_category_ids) {
    m_watching_first_post_category_ids = watching_first_post_category_ids;
    m_watching_first_post_category_ids_isSet = true;
}

bool OAIGetGroup_200_response_group::is_watching_first_post_category_ids_Set() const{
    return m_watching_first_post_category_ids_isSet;
}

bool OAIGetGroup_200_response_group::is_watching_first_post_category_ids_Valid() const{
    return m_watching_first_post_category_ids_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getWatchingFirstPostTags() const {
    return m_watching_first_post_tags;
}
void OAIGetGroup_200_response_group::setWatchingFirstPostTags(const QList<QJsonValue> &watching_first_post_tags) {
    m_watching_first_post_tags = watching_first_post_tags;
    m_watching_first_post_tags_isSet = true;
}

bool OAIGetGroup_200_response_group::is_watching_first_post_tags_Set() const{
    return m_watching_first_post_tags_isSet;
}

bool OAIGetGroup_200_response_group::is_watching_first_post_tags_Valid() const{
    return m_watching_first_post_tags_isValid;
}

QList<QJsonValue> OAIGetGroup_200_response_group::getWatchingTags() const {
    return m_watching_tags;
}
void OAIGetGroup_200_response_group::setWatchingTags(const QList<QJsonValue> &watching_tags) {
    m_watching_tags = watching_tags;
    m_watching_tags_isSet = true;
}

bool OAIGetGroup_200_response_group::is_watching_tags_Set() const{
    return m_watching_tags_isSet;
}

bool OAIGetGroup_200_response_group::is_watching_tags_Valid() const{
    return m_watching_tags_isValid;
}

bool OAIGetGroup_200_response_group::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_membership_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_unknown_sender_topic_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_membership_email_domains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_cooked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_admin_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_see_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_notification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_from_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_bg_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_last_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_mailbox_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_mailboxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_new_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_old_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imap_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_group_owner_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_group_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_request_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentionable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentionable_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messageable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messageable_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_admission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_exit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_read_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_first_post_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_first_post_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetGroup_200_response_group::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_membership_requests_isValid && m_allow_unknown_sender_topic_replies_isValid && m_automatic_isValid && m_automatic_membership_email_domains_isValid && m_bio_cooked_isValid && m_bio_excerpt_isValid && m_bio_raw_isValid && m_can_admin_group_isValid && m_can_see_members_isValid && m_default_notification_level_isValid && m_email_password_isValid && m_email_username_isValid && m_flair_bg_color_isValid && m_flair_color_isValid && m_flair_url_isValid && m_full_name_isValid && m_grant_trust_level_isValid && m_has_messages_isValid && m_id_isValid && m_imap_last_error_isValid && m_imap_mailbox_name_isValid && m_imap_mailboxes_isValid && m_imap_new_emails_isValid && m_imap_old_emails_isValid && m_imap_port_isValid && m_imap_server_isValid && m_imap_ssl_isValid && m_incoming_email_isValid && m_is_group_owner_display_isValid && m_is_group_user_isValid && m_members_visibility_level_isValid && m_membership_request_template_isValid && m_mentionable_isValid && m_mentionable_level_isValid && m_message_count_isValid && m_messageable_isValid && m_messageable_level_isValid && m_muted_category_ids_isValid && m_name_isValid && m_primary_group_isValid && m_public_admission_isValid && m_public_exit_isValid && m_publish_read_state_isValid && m_regular_category_ids_isValid && m_smtp_port_isValid && m_smtp_server_isValid && m_smtp_ssl_isValid && m_title_isValid && m_tracking_category_ids_isValid && m_user_count_isValid && m_visibility_level_isValid && m_watching_category_ids_isValid && m_watching_first_post_category_ids_isValid && true;
}

} // namespace OpenAPI
