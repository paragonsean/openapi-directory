/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneratePresignedPut_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneratePresignedPut_request::OAIGeneratePresignedPut_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneratePresignedPut_request::OAIGeneratePresignedPut_request() {
    this->initializeModel();
}

OAIGeneratePresignedPut_request::~OAIGeneratePresignedPut_request() {}

void OAIGeneratePresignedPut_request::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGeneratePresignedPut_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneratePresignedPut_request::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGeneratePresignedPut_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneratePresignedPut_request::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGeneratePresignedPut_request::getFileName() const {
    return m_file_name;
}
void OAIGeneratePresignedPut_request::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIGeneratePresignedPut_request::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIGeneratePresignedPut_request::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAIGeneratePresignedPut_request::getFileSize() const {
    return m_file_size;
}
void OAIGeneratePresignedPut_request::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIGeneratePresignedPut_request::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIGeneratePresignedPut_request::is_file_size_Valid() const{
    return m_file_size_isValid;
}

OAICreateMultipartUpload_request_metadata OAIGeneratePresignedPut_request::getMetadata() const {
    return m_metadata;
}
void OAIGeneratePresignedPut_request::setMetadata(const OAICreateMultipartUpload_request_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGeneratePresignedPut_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGeneratePresignedPut_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGeneratePresignedPut_request::getType() const {
    return m_type;
}
void OAIGeneratePresignedPut_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeneratePresignedPut_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeneratePresignedPut_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGeneratePresignedPut_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneratePresignedPut_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && m_file_size_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
