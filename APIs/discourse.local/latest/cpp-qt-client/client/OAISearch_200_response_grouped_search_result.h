/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearch_200_response_grouped_search_result.h
 *
 * 
 */

#ifndef OAISearch_200_response_grouped_search_result_H
#define OAISearch_200_response_grouped_search_result_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISearch_200_response_grouped_search_result : public OAIObject {
public:
    OAISearch_200_response_grouped_search_result();
    OAISearch_200_response_grouped_search_result(QString json);
    ~OAISearch_200_response_grouped_search_result() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanCreateTopic() const;
    void setCanCreateTopic(const bool &can_create_topic);
    bool is_can_create_topic_Set() const;
    bool is_can_create_topic_Valid() const;

    QList<QJsonValue> getCategoryIds() const;
    void setCategoryIds(const QList<QJsonValue> &category_ids);
    bool is_category_ids_Set() const;
    bool is_category_ids_Valid() const;

    QString getError() const;
    void setError(const QString &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QList<QJsonValue> getGroupIds() const;
    void setGroupIds(const QList<QJsonValue> &group_ids);
    bool is_group_ids_Set() const;
    bool is_group_ids_Valid() const;

    QString getMoreCategories() const;
    void setMoreCategories(const QString &more_categories);
    bool is_more_categories_Set() const;
    bool is_more_categories_Valid() const;

    QString getMoreFullPageResults() const;
    void setMoreFullPageResults(const QString &more_full_page_results);
    bool is_more_full_page_results_Set() const;
    bool is_more_full_page_results_Valid() const;

    QString getMorePosts() const;
    void setMorePosts(const QString &more_posts);
    bool is_more_posts_Set() const;
    bool is_more_posts_Valid() const;

    QString getMoreUsers() const;
    void setMoreUsers(const QString &more_users);
    bool is_more_users_Set() const;
    bool is_more_users_Valid() const;

    QList<QJsonValue> getPostIds() const;
    void setPostIds(const QList<QJsonValue> &post_ids);
    bool is_post_ids_Set() const;
    bool is_post_ids_Valid() const;

    qint32 getSearchLogId() const;
    void setSearchLogId(const qint32 &search_log_id);
    bool is_search_log_id_Set() const;
    bool is_search_log_id_Valid() const;

    QList<QJsonValue> getTagIds() const;
    void setTagIds(const QList<QJsonValue> &tag_ids);
    bool is_tag_ids_Set() const;
    bool is_tag_ids_Valid() const;

    QString getTerm() const;
    void setTerm(const QString &term);
    bool is_term_Set() const;
    bool is_term_Valid() const;

    QList<QJsonValue> getUserIds() const;
    void setUserIds(const QList<QJsonValue> &user_ids);
    bool is_user_ids_Set() const;
    bool is_user_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_create_topic;
    bool m_can_create_topic_isSet;
    bool m_can_create_topic_isValid;

    QList<QJsonValue> m_category_ids;
    bool m_category_ids_isSet;
    bool m_category_ids_isValid;

    QString m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QList<QJsonValue> m_group_ids;
    bool m_group_ids_isSet;
    bool m_group_ids_isValid;

    QString m_more_categories;
    bool m_more_categories_isSet;
    bool m_more_categories_isValid;

    QString m_more_full_page_results;
    bool m_more_full_page_results_isSet;
    bool m_more_full_page_results_isValid;

    QString m_more_posts;
    bool m_more_posts_isSet;
    bool m_more_posts_isValid;

    QString m_more_users;
    bool m_more_users_isSet;
    bool m_more_users_isValid;

    QList<QJsonValue> m_post_ids;
    bool m_post_ids_isSet;
    bool m_post_ids_isValid;

    qint32 m_search_log_id;
    bool m_search_log_id_isSet;
    bool m_search_log_id_isValid;

    QList<QJsonValue> m_tag_ids;
    bool m_tag_ids_isSet;
    bool m_tag_ids_isValid;

    QString m_term;
    bool m_term_isSet;
    bool m_term_isValid;

    QList<QJsonValue> m_user_ids;
    bool m_user_ids_isSet;
    bool m_user_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearch_200_response_grouped_search_result)

#endif // OAISearch_200_response_grouped_search_result_H
