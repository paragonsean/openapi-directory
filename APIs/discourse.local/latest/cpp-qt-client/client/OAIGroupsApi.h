/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddGroupMembers_200_response.h"
#include "OAIAddGroupMembers_request.h"
#include "OAICreateGroup_200_response.h"
#include "OAICreateGroup_request.h"
#include "OAIDeleteGroup_200_response.h"
#include "OAIGetGroup_200_response.h"
#include "OAIListGroupMembers_200_response.h"
#include "OAIListGroups_200_response.h"
#include "OAIRemoveGroupMembers_200_response.h"
#include "OAIUpdateGroup_200_response.h"
#include "OAIUpdateGroup_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_add_group_members_request OAIAddGroupMembers_request [optional]
    */
    virtual void addGroupMembers(const qint32 &id, const ::OpenAPI::OptionalParam<OAIAddGroupMembers_request> &oai_add_group_members_request = ::OpenAPI::OptionalParam<OAIAddGroupMembers_request>());

    /**
    * @param[in]  oai_create_group_request OAICreateGroup_request [optional]
    */
    virtual void createGroup(const ::OpenAPI::OptionalParam<OAICreateGroup_request> &oai_create_group_request = ::OpenAPI::OptionalParam<OAICreateGroup_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteGroup(const qint32 &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getGroup(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void listGroupMembers(const QString &id);


    virtual void listGroups();

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_add_group_members_request OAIAddGroupMembers_request [optional]
    */
    virtual void removeGroupMembers(const qint32 &id, const ::OpenAPI::OptionalParam<OAIAddGroupMembers_request> &oai_add_group_members_request = ::OpenAPI::OptionalParam<OAIAddGroupMembers_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_update_group_request OAIUpdateGroup_request [optional]
    */
    virtual void updateGroup(const qint32 &id, const ::OpenAPI::OptionalParam<OAIUpdateGroup_request> &oai_update_group_request = ::OpenAPI::OptionalParam<OAIUpdateGroup_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addGroupMembersCallback(OAIHttpRequestWorker *worker);
    void createGroupCallback(OAIHttpRequestWorker *worker);
    void deleteGroupCallback(OAIHttpRequestWorker *worker);
    void getGroupCallback(OAIHttpRequestWorker *worker);
    void listGroupMembersCallback(OAIHttpRequestWorker *worker);
    void listGroupsCallback(OAIHttpRequestWorker *worker);
    void removeGroupMembersCallback(OAIHttpRequestWorker *worker);
    void updateGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addGroupMembersSignal(OAIAddGroupMembers_200_response summary);
    void createGroupSignal(OAICreateGroup_200_response summary);
    void deleteGroupSignal(OAIDeleteGroup_200_response summary);
    void getGroupSignal(OAIGetGroup_200_response summary);
    void listGroupMembersSignal(OAIListGroupMembers_200_response summary);
    void listGroupsSignal(OAIListGroups_200_response summary);
    void removeGroupMembersSignal(OAIRemoveGroupMembers_200_response summary);
    void updateGroupSignal(OAIUpdateGroup_200_response summary);


    void addGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIAddGroupMembers_200_response summary);
    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateGroup_200_response summary);
    void deleteGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGroup_200_response summary);
    void getGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetGroup_200_response summary);
    void listGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIListGroupMembers_200_response summary);
    void listGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListGroups_200_response summary);
    void removeGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIRemoveGroupMembers_200_response summary);
    void updateGroupSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGroup_200_response summary);

    Q_DECL_DEPRECATED_X("Use addGroupMembersSignalError() instead")
    void addGroupMembersSignalE(OAIAddGroupMembers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupMembersSignalError(OAIAddGroupMembers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAICreateGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAICreateGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupSignalError() instead")
    void deleteGroupSignalE(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupSignalError(OAIDeleteGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalError() instead")
    void getGroupSignalE(OAIGetGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalError(OAIGetGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupMembersSignalError() instead")
    void listGroupMembersSignalE(OAIListGroupMembers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupMembersSignalError(OAIListGroupMembers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupsSignalError() instead")
    void listGroupsSignalE(OAIListGroups_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupsSignalError(OAIListGroups_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupMembersSignalError() instead")
    void removeGroupMembersSignalE(OAIRemoveGroupMembers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupMembersSignalError(OAIRemoveGroupMembers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalError() instead")
    void updateGroupSignalE(OAIUpdateGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalError(OAIUpdateGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addGroupMembersSignalErrorFull() instead")
    void addGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupSignalErrorFull() instead")
    void deleteGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalErrorFull() instead")
    void getGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupMembersSignalErrorFull() instead")
    void listGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupsSignalErrorFull() instead")
    void listGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupMembersSignalErrorFull() instead")
    void removeGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalErrorFull() instead")
    void updateGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
