/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPostsApi_H
#define OAI_OAIPostsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTopicPostPM_200_response.h"
#include "OAICreateTopicPostPM_request.h"
#include "OAIDeletePost_request.h"
#include "OAIGetPost_200_response.h"
#include "OAIListPosts_200_response.h"
#include "OAILockPost_200_response.h"
#include "OAILockPost_request.h"
#include "OAIPerformPostAction_200_response.h"
#include "OAIPerformPostAction_request.h"
#include "OAIPostReplies_200_response_inner.h"
#include "OAIUpdatePost_200_response.h"
#include "OAIUpdatePost_request.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPostsApi : public QObject {
    Q_OBJECT

public:
    OAIPostsApi(const int timeOut = 0);
    ~OAIPostsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_topic_post_pm_request OAICreateTopicPostPM_request [optional]
    */
    virtual void createTopicPostPM(const ::OpenAPI::OptionalParam<OAICreateTopicPostPM_request> &oai_create_topic_post_pm_request = ::OpenAPI::OptionalParam<OAICreateTopicPostPM_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_delete_post_request OAIDeletePost_request [optional]
    */
    virtual void deletePost(const qint32 &id, const ::OpenAPI::OptionalParam<OAIDeletePost_request> &oai_delete_post_request = ::OpenAPI::OptionalParam<OAIDeletePost_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getPost(const QString &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  before QString [optional]
    */
    virtual void listPosts(const QString &api_key, const QString &api_username, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_lock_post_request OAILockPost_request [optional]
    */
    virtual void lockPost(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAILockPost_request> &oai_lock_post_request = ::OpenAPI::OptionalParam<OAILockPost_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  oai_perform_post_action_request OAIPerformPostAction_request [optional]
    */
    virtual void performPostAction(const QString &api_key, const QString &api_username, const ::OpenAPI::OptionalParam<OAIPerformPostAction_request> &oai_perform_post_action_request = ::OpenAPI::OptionalParam<OAIPerformPostAction_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void postReplies(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_post_request OAIUpdatePost_request [optional]
    */
    virtual void updatePost(const QString &id, const ::OpenAPI::OptionalParam<OAIUpdatePost_request> &oai_update_post_request = ::OpenAPI::OptionalParam<OAIUpdatePost_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTopicPostPMCallback(OAIHttpRequestWorker *worker);
    void deletePostCallback(OAIHttpRequestWorker *worker);
    void getPostCallback(OAIHttpRequestWorker *worker);
    void listPostsCallback(OAIHttpRequestWorker *worker);
    void lockPostCallback(OAIHttpRequestWorker *worker);
    void performPostActionCallback(OAIHttpRequestWorker *worker);
    void postRepliesCallback(OAIHttpRequestWorker *worker);
    void updatePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTopicPostPMSignal(OAICreateTopicPostPM_200_response summary);
    void deletePostSignal();
    void getPostSignal(OAIGetPost_200_response summary);
    void listPostsSignal(OAIListPosts_200_response summary);
    void lockPostSignal(OAILockPost_200_response summary);
    void performPostActionSignal(OAIPerformPostAction_200_response summary);
    void postRepliesSignal(QSet<OAIPostReplies_200_response_inner> summary);
    void updatePostSignal(OAIUpdatePost_200_response summary);


    void createTopicPostPMSignalFull(OAIHttpRequestWorker *worker, OAICreateTopicPostPM_200_response summary);
    void deletePostSignalFull(OAIHttpRequestWorker *worker);
    void getPostSignalFull(OAIHttpRequestWorker *worker, OAIGetPost_200_response summary);
    void listPostsSignalFull(OAIHttpRequestWorker *worker, OAIListPosts_200_response summary);
    void lockPostSignalFull(OAIHttpRequestWorker *worker, OAILockPost_200_response summary);
    void performPostActionSignalFull(OAIHttpRequestWorker *worker, OAIPerformPostAction_200_response summary);
    void postRepliesSignalFull(OAIHttpRequestWorker *worker, QSet<OAIPostReplies_200_response_inner> summary);
    void updatePostSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePost_200_response summary);

    Q_DECL_DEPRECATED_X("Use createTopicPostPMSignalError() instead")
    void createTopicPostPMSignalE(OAICreateTopicPostPM_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicPostPMSignalError(OAICreateTopicPostPM_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePostSignalError() instead")
    void deletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostSignalError() instead")
    void getPostSignalE(OAIGetPost_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostSignalError(OAIGetPost_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPostsSignalError() instead")
    void listPostsSignalE(OAIListPosts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPostsSignalError(OAIListPosts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockPostSignalError() instead")
    void lockPostSignalE(OAILockPost_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lockPostSignalError(OAILockPost_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use performPostActionSignalError() instead")
    void performPostActionSignalE(OAIPerformPostAction_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void performPostActionSignalError(OAIPerformPostAction_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRepliesSignalError() instead")
    void postRepliesSignalE(QSet<OAIPostReplies_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRepliesSignalError(QSet<OAIPostReplies_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePostSignalError() instead")
    void updatePostSignalE(OAIUpdatePost_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePostSignalError(OAIUpdatePost_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTopicPostPMSignalErrorFull() instead")
    void createTopicPostPMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicPostPMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePostSignalErrorFull() instead")
    void deletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostSignalErrorFull() instead")
    void getPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPostsSignalErrorFull() instead")
    void listPostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockPostSignalErrorFull() instead")
    void lockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use performPostActionSignalErrorFull() instead")
    void performPostActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void performPostActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRepliesSignalErrorFull() instead")
    void postRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePostSignalErrorFull() instead")
    void updatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
