/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdminListBadges_200_response_admin_badges_triggers.h
 *
 * 
 */

#ifndef OAIAdminListBadges_200_response_admin_badges_triggers_H
#define OAIAdminListBadges_200_response_admin_badges_triggers_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdminListBadges_200_response_admin_badges_triggers : public OAIObject {
public:
    OAIAdminListBadges_200_response_admin_badges_triggers();
    OAIAdminListBadges_200_response_admin_badges_triggers(QString json);
    ~OAIAdminListBadges_200_response_admin_badges_triggers() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getNone() const;
    void setNone(const qint32 &none);
    bool is_none_Set() const;
    bool is_none_Valid() const;

    qint32 getPostAction() const;
    void setPostAction(const qint32 &post_action);
    bool is_post_action_Set() const;
    bool is_post_action_Valid() const;

    qint32 getPostRevision() const;
    void setPostRevision(const qint32 &post_revision);
    bool is_post_revision_Set() const;
    bool is_post_revision_Valid() const;

    qint32 getTrustLevelChange() const;
    void setTrustLevelChange(const qint32 &trust_level_change);
    bool is_trust_level_change_Set() const;
    bool is_trust_level_change_Valid() const;

    qint32 getUserChange() const;
    void setUserChange(const qint32 &user_change);
    bool is_user_change_Set() const;
    bool is_user_change_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_none;
    bool m_none_isSet;
    bool m_none_isValid;

    qint32 m_post_action;
    bool m_post_action_isSet;
    bool m_post_action_isValid;

    qint32 m_post_revision;
    bool m_post_revision_isSet;
    bool m_post_revision_isValid;

    qint32 m_trust_level_change;
    bool m_trust_level_change_isSet;
    bool m_trust_level_change_isValid;

    qint32 m_user_change;
    bool m_user_change_isSet;
    bool m_user_change_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdminListBadges_200_response_admin_badges_triggers)

#endif // OAIAdminListBadges_200_response_admin_badges_triggers_H
