/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTag_200_response_topic_list.h
 *
 * 
 */

#ifndef OAIGetTag_200_response_topic_list_H
#define OAIGetTag_200_response_topic_list_H

#include <QJsonObject>

#include "OAIGetTag_200_response_topic_list_tags_inner.h"
#include "OAIGetTag_200_response_topic_list_topics_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTag_200_response_topic_list_tags_inner;
class OAIGetTag_200_response_topic_list_topics_inner;

class OAIGetTag_200_response_topic_list : public OAIObject {
public:
    OAIGetTag_200_response_topic_list();
    OAIGetTag_200_response_topic_list(QString json);
    ~OAIGetTag_200_response_topic_list() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanCreateTopic() const;
    void setCanCreateTopic(const bool &can_create_topic);
    bool is_can_create_topic_Set() const;
    bool is_can_create_topic_Valid() const;

    QString getDraft() const;
    void setDraft(const QString &draft);
    bool is_draft_Set() const;
    bool is_draft_Valid() const;

    QString getDraftKey() const;
    void setDraftKey(const QString &draft_key);
    bool is_draft_key_Set() const;
    bool is_draft_key_Valid() const;

    qint32 getDraftSequence() const;
    void setDraftSequence(const qint32 &draft_sequence);
    bool is_draft_sequence_Set() const;
    bool is_draft_sequence_Valid() const;

    qint32 getPerPage() const;
    void setPerPage(const qint32 &per_page);
    bool is_per_page_Set() const;
    bool is_per_page_Valid() const;

    QList<OAIGetTag_200_response_topic_list_tags_inner> getTags() const;
    void setTags(const QList<OAIGetTag_200_response_topic_list_tags_inner> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList<OAIGetTag_200_response_topic_list_topics_inner> getTopics() const;
    void setTopics(const QList<OAIGetTag_200_response_topic_list_topics_inner> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_create_topic;
    bool m_can_create_topic_isSet;
    bool m_can_create_topic_isValid;

    QString m_draft;
    bool m_draft_isSet;
    bool m_draft_isValid;

    QString m_draft_key;
    bool m_draft_key_isSet;
    bool m_draft_key_isValid;

    qint32 m_draft_sequence;
    bool m_draft_sequence_isSet;
    bool m_draft_sequence_isValid;

    qint32 m_per_page;
    bool m_per_page_isSet;
    bool m_per_page_isValid;

    QList<OAIGetTag_200_response_topic_list_tags_inner> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList<OAIGetTag_200_response_topic_list_topics_inner> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTag_200_response_topic_list)

#endif // OAIGetTag_200_response_topic_list_H
