/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSite_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSite_200_response::OAIGetSite_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSite_200_response::OAIGetSite_200_response() {
    this->initializeModel();
}

OAIGetSite_200_response::~OAIGetSite_200_response() {}

void OAIGetSite_200_response::initializeModel() {

    m_anonymous_top_menu_items_isSet = false;
    m_anonymous_top_menu_items_isValid = false;

    m_archetypes_isSet = false;
    m_archetypes_isValid = false;

    m_auth_providers_isSet = false;
    m_auth_providers_isValid = false;

    m_can_associate_groups_isSet = false;
    m_can_associate_groups_isValid = false;

    m_can_create_tag_isSet = false;
    m_can_create_tag_isValid = false;

    m_can_tag_pms_isSet = false;
    m_can_tag_pms_isValid = false;

    m_can_tag_topics_isSet = false;
    m_can_tag_topics_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_censored_regexp_isSet = false;
    m_censored_regexp_isValid = false;

    m_custom_emoji_translation_isSet = false;
    m_custom_emoji_translation_isValid = false;

    m_default_archetype_isSet = false;
    m_default_archetype_isValid = false;

    m_default_dark_color_scheme_isSet = false;
    m_default_dark_color_scheme_isValid = false;

    m_denied_emojis_isSet = false;
    m_denied_emojis_isValid = false;

    m_displayed_about_plugin_stat_groups_isSet = false;
    m_displayed_about_plugin_stat_groups_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_hashtag_configurations_isSet = false;
    m_hashtag_configurations_isValid = false;

    m_hashtag_icons_isSet = false;
    m_hashtag_icons_isValid = false;

    m_markdown_additional_options_isSet = false;
    m_markdown_additional_options_isValid = false;

    m_notification_types_isSet = false;
    m_notification_types_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_post_action_types_isSet = false;
    m_post_action_types_isValid = false;

    m_post_types_isSet = false;
    m_post_types_isValid = false;

    m_show_welcome_topic_banner_isSet = false;
    m_show_welcome_topic_banner_isValid = false;

    m_tags_filter_regexp_isSet = false;
    m_tags_filter_regexp_isValid = false;

    m_top_menu_items_isSet = false;
    m_top_menu_items_isValid = false;

    m_top_tags_isSet = false;
    m_top_tags_isValid = false;

    m_topic_featured_link_allowed_category_ids_isSet = false;
    m_topic_featured_link_allowed_category_ids_isValid = false;

    m_topic_flag_types_isSet = false;
    m_topic_flag_types_isValid = false;

    m_trust_levels_isSet = false;
    m_trust_levels_isValid = false;

    m_uncategorized_category_id_isSet = false;
    m_uncategorized_category_id_isValid = false;

    m_user_color_schemes_isSet = false;
    m_user_color_schemes_isValid = false;

    m_user_field_max_length_isSet = false;
    m_user_field_max_length_isValid = false;

    m_user_fields_isSet = false;
    m_user_fields_isValid = false;

    m_user_themes_isSet = false;
    m_user_themes_isValid = false;

    m_watched_words_link_isSet = false;
    m_watched_words_link_isValid = false;

    m_watched_words_replace_isSet = false;
    m_watched_words_replace_isValid = false;

    m_whispers_allowed_groups_names_isSet = false;
    m_whispers_allowed_groups_names_isValid = false;

    m_wizard_required_isSet = false;
    m_wizard_required_isValid = false;
}

void OAIGetSite_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSite_200_response::fromJsonObject(QJsonObject json) {

    m_anonymous_top_menu_items_isValid = ::OpenAPI::fromJsonValue(m_anonymous_top_menu_items, json[QString("anonymous_top_menu_items")]);
    m_anonymous_top_menu_items_isSet = !json[QString("anonymous_top_menu_items")].isNull() && m_anonymous_top_menu_items_isValid;

    m_archetypes_isValid = ::OpenAPI::fromJsonValue(m_archetypes, json[QString("archetypes")]);
    m_archetypes_isSet = !json[QString("archetypes")].isNull() && m_archetypes_isValid;

    m_auth_providers_isValid = ::OpenAPI::fromJsonValue(m_auth_providers, json[QString("auth_providers")]);
    m_auth_providers_isSet = !json[QString("auth_providers")].isNull() && m_auth_providers_isValid;

    m_can_associate_groups_isValid = ::OpenAPI::fromJsonValue(m_can_associate_groups, json[QString("can_associate_groups")]);
    m_can_associate_groups_isSet = !json[QString("can_associate_groups")].isNull() && m_can_associate_groups_isValid;

    m_can_create_tag_isValid = ::OpenAPI::fromJsonValue(m_can_create_tag, json[QString("can_create_tag")]);
    m_can_create_tag_isSet = !json[QString("can_create_tag")].isNull() && m_can_create_tag_isValid;

    m_can_tag_pms_isValid = ::OpenAPI::fromJsonValue(m_can_tag_pms, json[QString("can_tag_pms")]);
    m_can_tag_pms_isSet = !json[QString("can_tag_pms")].isNull() && m_can_tag_pms_isValid;

    m_can_tag_topics_isValid = ::OpenAPI::fromJsonValue(m_can_tag_topics, json[QString("can_tag_topics")]);
    m_can_tag_topics_isSet = !json[QString("can_tag_topics")].isNull() && m_can_tag_topics_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_censored_regexp_isValid = ::OpenAPI::fromJsonValue(m_censored_regexp, json[QString("censored_regexp")]);
    m_censored_regexp_isSet = !json[QString("censored_regexp")].isNull() && m_censored_regexp_isValid;

    m_custom_emoji_translation_isValid = ::OpenAPI::fromJsonValue(m_custom_emoji_translation, json[QString("custom_emoji_translation")]);
    m_custom_emoji_translation_isSet = !json[QString("custom_emoji_translation")].isNull() && m_custom_emoji_translation_isValid;

    m_default_archetype_isValid = ::OpenAPI::fromJsonValue(m_default_archetype, json[QString("default_archetype")]);
    m_default_archetype_isSet = !json[QString("default_archetype")].isNull() && m_default_archetype_isValid;

    m_default_dark_color_scheme_isValid = ::OpenAPI::fromJsonValue(m_default_dark_color_scheme, json[QString("default_dark_color_scheme")]);
    m_default_dark_color_scheme_isSet = !json[QString("default_dark_color_scheme")].isNull() && m_default_dark_color_scheme_isValid;

    m_denied_emojis_isValid = ::OpenAPI::fromJsonValue(m_denied_emojis, json[QString("denied_emojis")]);
    m_denied_emojis_isSet = !json[QString("denied_emojis")].isNull() && m_denied_emojis_isValid;

    m_displayed_about_plugin_stat_groups_isValid = ::OpenAPI::fromJsonValue(m_displayed_about_plugin_stat_groups, json[QString("displayed_about_plugin_stat_groups")]);
    m_displayed_about_plugin_stat_groups_isSet = !json[QString("displayed_about_plugin_stat_groups")].isNull() && m_displayed_about_plugin_stat_groups_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_hashtag_configurations_isValid = ::OpenAPI::fromJsonValue(m_hashtag_configurations, json[QString("hashtag_configurations")]);
    m_hashtag_configurations_isSet = !json[QString("hashtag_configurations")].isNull() && m_hashtag_configurations_isValid;

    m_hashtag_icons_isValid = ::OpenAPI::fromJsonValue(m_hashtag_icons, json[QString("hashtag_icons")]);
    m_hashtag_icons_isSet = !json[QString("hashtag_icons")].isNull() && m_hashtag_icons_isValid;

    m_markdown_additional_options_isValid = ::OpenAPI::fromJsonValue(m_markdown_additional_options, json[QString("markdown_additional_options")]);
    m_markdown_additional_options_isSet = !json[QString("markdown_additional_options")].isNull() && m_markdown_additional_options_isValid;

    m_notification_types_isValid = ::OpenAPI::fromJsonValue(m_notification_types, json[QString("notification_types")]);
    m_notification_types_isSet = !json[QString("notification_types")].isNull() && m_notification_types_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_post_action_types_isValid = ::OpenAPI::fromJsonValue(m_post_action_types, json[QString("post_action_types")]);
    m_post_action_types_isSet = !json[QString("post_action_types")].isNull() && m_post_action_types_isValid;

    m_post_types_isValid = ::OpenAPI::fromJsonValue(m_post_types, json[QString("post_types")]);
    m_post_types_isSet = !json[QString("post_types")].isNull() && m_post_types_isValid;

    m_show_welcome_topic_banner_isValid = ::OpenAPI::fromJsonValue(m_show_welcome_topic_banner, json[QString("show_welcome_topic_banner")]);
    m_show_welcome_topic_banner_isSet = !json[QString("show_welcome_topic_banner")].isNull() && m_show_welcome_topic_banner_isValid;

    m_tags_filter_regexp_isValid = ::OpenAPI::fromJsonValue(m_tags_filter_regexp, json[QString("tags_filter_regexp")]);
    m_tags_filter_regexp_isSet = !json[QString("tags_filter_regexp")].isNull() && m_tags_filter_regexp_isValid;

    m_top_menu_items_isValid = ::OpenAPI::fromJsonValue(m_top_menu_items, json[QString("top_menu_items")]);
    m_top_menu_items_isSet = !json[QString("top_menu_items")].isNull() && m_top_menu_items_isValid;

    m_top_tags_isValid = ::OpenAPI::fromJsonValue(m_top_tags, json[QString("top_tags")]);
    m_top_tags_isSet = !json[QString("top_tags")].isNull() && m_top_tags_isValid;

    m_topic_featured_link_allowed_category_ids_isValid = ::OpenAPI::fromJsonValue(m_topic_featured_link_allowed_category_ids, json[QString("topic_featured_link_allowed_category_ids")]);
    m_topic_featured_link_allowed_category_ids_isSet = !json[QString("topic_featured_link_allowed_category_ids")].isNull() && m_topic_featured_link_allowed_category_ids_isValid;

    m_topic_flag_types_isValid = ::OpenAPI::fromJsonValue(m_topic_flag_types, json[QString("topic_flag_types")]);
    m_topic_flag_types_isSet = !json[QString("topic_flag_types")].isNull() && m_topic_flag_types_isValid;

    m_trust_levels_isValid = ::OpenAPI::fromJsonValue(m_trust_levels, json[QString("trust_levels")]);
    m_trust_levels_isSet = !json[QString("trust_levels")].isNull() && m_trust_levels_isValid;

    m_uncategorized_category_id_isValid = ::OpenAPI::fromJsonValue(m_uncategorized_category_id, json[QString("uncategorized_category_id")]);
    m_uncategorized_category_id_isSet = !json[QString("uncategorized_category_id")].isNull() && m_uncategorized_category_id_isValid;

    m_user_color_schemes_isValid = ::OpenAPI::fromJsonValue(m_user_color_schemes, json[QString("user_color_schemes")]);
    m_user_color_schemes_isSet = !json[QString("user_color_schemes")].isNull() && m_user_color_schemes_isValid;

    m_user_field_max_length_isValid = ::OpenAPI::fromJsonValue(m_user_field_max_length, json[QString("user_field_max_length")]);
    m_user_field_max_length_isSet = !json[QString("user_field_max_length")].isNull() && m_user_field_max_length_isValid;

    m_user_fields_isValid = ::OpenAPI::fromJsonValue(m_user_fields, json[QString("user_fields")]);
    m_user_fields_isSet = !json[QString("user_fields")].isNull() && m_user_fields_isValid;

    m_user_themes_isValid = ::OpenAPI::fromJsonValue(m_user_themes, json[QString("user_themes")]);
    m_user_themes_isSet = !json[QString("user_themes")].isNull() && m_user_themes_isValid;

    m_watched_words_link_isValid = ::OpenAPI::fromJsonValue(m_watched_words_link, json[QString("watched_words_link")]);
    m_watched_words_link_isSet = !json[QString("watched_words_link")].isNull() && m_watched_words_link_isValid;

    m_watched_words_replace_isValid = ::OpenAPI::fromJsonValue(m_watched_words_replace, json[QString("watched_words_replace")]);
    m_watched_words_replace_isSet = !json[QString("watched_words_replace")].isNull() && m_watched_words_replace_isValid;

    m_whispers_allowed_groups_names_isValid = ::OpenAPI::fromJsonValue(m_whispers_allowed_groups_names, json[QString("whispers_allowed_groups_names")]);
    m_whispers_allowed_groups_names_isSet = !json[QString("whispers_allowed_groups_names")].isNull() && m_whispers_allowed_groups_names_isValid;

    m_wizard_required_isValid = ::OpenAPI::fromJsonValue(m_wizard_required, json[QString("wizard_required")]);
    m_wizard_required_isSet = !json[QString("wizard_required")].isNull() && m_wizard_required_isValid;
}

QString OAIGetSite_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSite_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_anonymous_top_menu_items.size() > 0) {
        obj.insert(QString("anonymous_top_menu_items"), ::OpenAPI::toJsonValue(m_anonymous_top_menu_items));
    }
    if (m_archetypes.size() > 0) {
        obj.insert(QString("archetypes"), ::OpenAPI::toJsonValue(m_archetypes));
    }
    if (m_auth_providers.size() > 0) {
        obj.insert(QString("auth_providers"), ::OpenAPI::toJsonValue(m_auth_providers));
    }
    if (m_can_associate_groups_isSet) {
        obj.insert(QString("can_associate_groups"), ::OpenAPI::toJsonValue(m_can_associate_groups));
    }
    if (m_can_create_tag_isSet) {
        obj.insert(QString("can_create_tag"), ::OpenAPI::toJsonValue(m_can_create_tag));
    }
    if (m_can_tag_pms_isSet) {
        obj.insert(QString("can_tag_pms"), ::OpenAPI::toJsonValue(m_can_tag_pms));
    }
    if (m_can_tag_topics_isSet) {
        obj.insert(QString("can_tag_topics"), ::OpenAPI::toJsonValue(m_can_tag_topics));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_censored_regexp.size() > 0) {
        obj.insert(QString("censored_regexp"), ::OpenAPI::toJsonValue(m_censored_regexp));
    }
    if (m_custom_emoji_translation.size() > 0) {
        obj.insert(QString("custom_emoji_translation"), ::OpenAPI::toJsonValue(m_custom_emoji_translation));
    }
    if (m_default_archetype_isSet) {
        obj.insert(QString("default_archetype"), ::OpenAPI::toJsonValue(m_default_archetype));
    }
    if (m_default_dark_color_scheme.isSet()) {
        obj.insert(QString("default_dark_color_scheme"), ::OpenAPI::toJsonValue(m_default_dark_color_scheme));
    }
    if (m_denied_emojis.size() > 0) {
        obj.insert(QString("denied_emojis"), ::OpenAPI::toJsonValue(m_denied_emojis));
    }
    if (m_displayed_about_plugin_stat_groups.size() > 0) {
        obj.insert(QString("displayed_about_plugin_stat_groups"), ::OpenAPI::toJsonValue(m_displayed_about_plugin_stat_groups));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_hashtag_configurations_isSet) {
        obj.insert(QString("hashtag_configurations"), ::OpenAPI::toJsonValue(m_hashtag_configurations));
    }
    if (m_hashtag_icons.size() > 0) {
        obj.insert(QString("hashtag_icons"), ::OpenAPI::toJsonValue(m_hashtag_icons));
    }
    if (m_markdown_additional_options_isSet) {
        obj.insert(QString("markdown_additional_options"), ::OpenAPI::toJsonValue(m_markdown_additional_options));
    }
    if (m_notification_types.isSet()) {
        obj.insert(QString("notification_types"), ::OpenAPI::toJsonValue(m_notification_types));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_post_action_types.size() > 0) {
        obj.insert(QString("post_action_types"), ::OpenAPI::toJsonValue(m_post_action_types));
    }
    if (m_post_types.isSet()) {
        obj.insert(QString("post_types"), ::OpenAPI::toJsonValue(m_post_types));
    }
    if (m_show_welcome_topic_banner_isSet) {
        obj.insert(QString("show_welcome_topic_banner"), ::OpenAPI::toJsonValue(m_show_welcome_topic_banner));
    }
    if (m_tags_filter_regexp_isSet) {
        obj.insert(QString("tags_filter_regexp"), ::OpenAPI::toJsonValue(m_tags_filter_regexp));
    }
    if (m_top_menu_items.size() > 0) {
        obj.insert(QString("top_menu_items"), ::OpenAPI::toJsonValue(m_top_menu_items));
    }
    if (m_top_tags.size() > 0) {
        obj.insert(QString("top_tags"), ::OpenAPI::toJsonValue(m_top_tags));
    }
    if (m_topic_featured_link_allowed_category_ids.size() > 0) {
        obj.insert(QString("topic_featured_link_allowed_category_ids"), ::OpenAPI::toJsonValue(m_topic_featured_link_allowed_category_ids));
    }
    if (m_topic_flag_types.size() > 0) {
        obj.insert(QString("topic_flag_types"), ::OpenAPI::toJsonValue(m_topic_flag_types));
    }
    if (m_trust_levels.isSet()) {
        obj.insert(QString("trust_levels"), ::OpenAPI::toJsonValue(m_trust_levels));
    }
    if (m_uncategorized_category_id_isSet) {
        obj.insert(QString("uncategorized_category_id"), ::OpenAPI::toJsonValue(m_uncategorized_category_id));
    }
    if (m_user_color_schemes.size() > 0) {
        obj.insert(QString("user_color_schemes"), ::OpenAPI::toJsonValue(m_user_color_schemes));
    }
    if (m_user_field_max_length_isSet) {
        obj.insert(QString("user_field_max_length"), ::OpenAPI::toJsonValue(m_user_field_max_length));
    }
    if (m_user_fields.size() > 0) {
        obj.insert(QString("user_fields"), ::OpenAPI::toJsonValue(m_user_fields));
    }
    if (m_user_themes.size() > 0) {
        obj.insert(QString("user_themes"), ::OpenAPI::toJsonValue(m_user_themes));
    }
    if (m_watched_words_link_isSet) {
        obj.insert(QString("watched_words_link"), ::OpenAPI::toJsonValue(m_watched_words_link));
    }
    if (m_watched_words_replace_isSet) {
        obj.insert(QString("watched_words_replace"), ::OpenAPI::toJsonValue(m_watched_words_replace));
    }
    if (m_whispers_allowed_groups_names.size() > 0) {
        obj.insert(QString("whispers_allowed_groups_names"), ::OpenAPI::toJsonValue(m_whispers_allowed_groups_names));
    }
    if (m_wizard_required_isSet) {
        obj.insert(QString("wizard_required"), ::OpenAPI::toJsonValue(m_wizard_required));
    }
    return obj;
}

QList<QJsonValue> OAIGetSite_200_response::getAnonymousTopMenuItems() const {
    return m_anonymous_top_menu_items;
}
void OAIGetSite_200_response::setAnonymousTopMenuItems(const QList<QJsonValue> &anonymous_top_menu_items) {
    m_anonymous_top_menu_items = anonymous_top_menu_items;
    m_anonymous_top_menu_items_isSet = true;
}

bool OAIGetSite_200_response::is_anonymous_top_menu_items_Set() const{
    return m_anonymous_top_menu_items_isSet;
}

bool OAIGetSite_200_response::is_anonymous_top_menu_items_Valid() const{
    return m_anonymous_top_menu_items_isValid;
}

QList<OAIGetSite_200_response_archetypes_inner> OAIGetSite_200_response::getArchetypes() const {
    return m_archetypes;
}
void OAIGetSite_200_response::setArchetypes(const QList<OAIGetSite_200_response_archetypes_inner> &archetypes) {
    m_archetypes = archetypes;
    m_archetypes_isSet = true;
}

bool OAIGetSite_200_response::is_archetypes_Set() const{
    return m_archetypes_isSet;
}

bool OAIGetSite_200_response::is_archetypes_Valid() const{
    return m_archetypes_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getAuthProviders() const {
    return m_auth_providers;
}
void OAIGetSite_200_response::setAuthProviders(const QList<QJsonValue> &auth_providers) {
    m_auth_providers = auth_providers;
    m_auth_providers_isSet = true;
}

bool OAIGetSite_200_response::is_auth_providers_Set() const{
    return m_auth_providers_isSet;
}

bool OAIGetSite_200_response::is_auth_providers_Valid() const{
    return m_auth_providers_isValid;
}

bool OAIGetSite_200_response::isCanAssociateGroups() const {
    return m_can_associate_groups;
}
void OAIGetSite_200_response::setCanAssociateGroups(const bool &can_associate_groups) {
    m_can_associate_groups = can_associate_groups;
    m_can_associate_groups_isSet = true;
}

bool OAIGetSite_200_response::is_can_associate_groups_Set() const{
    return m_can_associate_groups_isSet;
}

bool OAIGetSite_200_response::is_can_associate_groups_Valid() const{
    return m_can_associate_groups_isValid;
}

bool OAIGetSite_200_response::isCanCreateTag() const {
    return m_can_create_tag;
}
void OAIGetSite_200_response::setCanCreateTag(const bool &can_create_tag) {
    m_can_create_tag = can_create_tag;
    m_can_create_tag_isSet = true;
}

bool OAIGetSite_200_response::is_can_create_tag_Set() const{
    return m_can_create_tag_isSet;
}

bool OAIGetSite_200_response::is_can_create_tag_Valid() const{
    return m_can_create_tag_isValid;
}

bool OAIGetSite_200_response::isCanTagPms() const {
    return m_can_tag_pms;
}
void OAIGetSite_200_response::setCanTagPms(const bool &can_tag_pms) {
    m_can_tag_pms = can_tag_pms;
    m_can_tag_pms_isSet = true;
}

bool OAIGetSite_200_response::is_can_tag_pms_Set() const{
    return m_can_tag_pms_isSet;
}

bool OAIGetSite_200_response::is_can_tag_pms_Valid() const{
    return m_can_tag_pms_isValid;
}

bool OAIGetSite_200_response::isCanTagTopics() const {
    return m_can_tag_topics;
}
void OAIGetSite_200_response::setCanTagTopics(const bool &can_tag_topics) {
    m_can_tag_topics = can_tag_topics;
    m_can_tag_topics_isSet = true;
}

bool OAIGetSite_200_response::is_can_tag_topics_Set() const{
    return m_can_tag_topics_isSet;
}

bool OAIGetSite_200_response::is_can_tag_topics_Valid() const{
    return m_can_tag_topics_isValid;
}

QList<OAIGetSite_200_response_categories_inner> OAIGetSite_200_response::getCategories() const {
    return m_categories;
}
void OAIGetSite_200_response::setCategories(const QList<OAIGetSite_200_response_categories_inner> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGetSite_200_response::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGetSite_200_response::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<OAIObject> OAIGetSite_200_response::getCensoredRegexp() const {
    return m_censored_regexp;
}
void OAIGetSite_200_response::setCensoredRegexp(const QList<OAIObject> &censored_regexp) {
    m_censored_regexp = censored_regexp;
    m_censored_regexp_isSet = true;
}

bool OAIGetSite_200_response::is_censored_regexp_Set() const{
    return m_censored_regexp_isSet;
}

bool OAIGetSite_200_response::is_censored_regexp_Valid() const{
    return m_censored_regexp_isValid;
}

QMap<QString, QJsonValue> OAIGetSite_200_response::getCustomEmojiTranslation() const {
    return m_custom_emoji_translation;
}
void OAIGetSite_200_response::setCustomEmojiTranslation(const QMap<QString, QJsonValue> &custom_emoji_translation) {
    m_custom_emoji_translation = custom_emoji_translation;
    m_custom_emoji_translation_isSet = true;
}

bool OAIGetSite_200_response::is_custom_emoji_translation_Set() const{
    return m_custom_emoji_translation_isSet;
}

bool OAIGetSite_200_response::is_custom_emoji_translation_Valid() const{
    return m_custom_emoji_translation_isValid;
}

QString OAIGetSite_200_response::getDefaultArchetype() const {
    return m_default_archetype;
}
void OAIGetSite_200_response::setDefaultArchetype(const QString &default_archetype) {
    m_default_archetype = default_archetype;
    m_default_archetype_isSet = true;
}

bool OAIGetSite_200_response::is_default_archetype_Set() const{
    return m_default_archetype_isSet;
}

bool OAIGetSite_200_response::is_default_archetype_Valid() const{
    return m_default_archetype_isValid;
}

OAIObject OAIGetSite_200_response::getDefaultDarkColorScheme() const {
    return m_default_dark_color_scheme;
}
void OAIGetSite_200_response::setDefaultDarkColorScheme(const OAIObject &default_dark_color_scheme) {
    m_default_dark_color_scheme = default_dark_color_scheme;
    m_default_dark_color_scheme_isSet = true;
}

bool OAIGetSite_200_response::is_default_dark_color_scheme_Set() const{
    return m_default_dark_color_scheme_isSet;
}

bool OAIGetSite_200_response::is_default_dark_color_scheme_Valid() const{
    return m_default_dark_color_scheme_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getDeniedEmojis() const {
    return m_denied_emojis;
}
void OAIGetSite_200_response::setDeniedEmojis(const QList<QJsonValue> &denied_emojis) {
    m_denied_emojis = denied_emojis;
    m_denied_emojis_isSet = true;
}

bool OAIGetSite_200_response::is_denied_emojis_Set() const{
    return m_denied_emojis_isSet;
}

bool OAIGetSite_200_response::is_denied_emojis_Valid() const{
    return m_denied_emojis_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getDisplayedAboutPluginStatGroups() const {
    return m_displayed_about_plugin_stat_groups;
}
void OAIGetSite_200_response::setDisplayedAboutPluginStatGroups(const QList<QJsonValue> &displayed_about_plugin_stat_groups) {
    m_displayed_about_plugin_stat_groups = displayed_about_plugin_stat_groups;
    m_displayed_about_plugin_stat_groups_isSet = true;
}

bool OAIGetSite_200_response::is_displayed_about_plugin_stat_groups_Set() const{
    return m_displayed_about_plugin_stat_groups_isSet;
}

bool OAIGetSite_200_response::is_displayed_about_plugin_stat_groups_Valid() const{
    return m_displayed_about_plugin_stat_groups_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getFilters() const {
    return m_filters;
}
void OAIGetSite_200_response::setFilters(const QList<QJsonValue> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIGetSite_200_response::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIGetSite_200_response::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<OAIGetSite_200_response_groups_inner> OAIGetSite_200_response::getGroups() const {
    return m_groups;
}
void OAIGetSite_200_response::setGroups(const QList<OAIGetSite_200_response_groups_inner> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIGetSite_200_response::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIGetSite_200_response::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIObject OAIGetSite_200_response::getHashtagConfigurations() const {
    return m_hashtag_configurations;
}
void OAIGetSite_200_response::setHashtagConfigurations(const OAIObject &hashtag_configurations) {
    m_hashtag_configurations = hashtag_configurations;
    m_hashtag_configurations_isSet = true;
}

bool OAIGetSite_200_response::is_hashtag_configurations_Set() const{
    return m_hashtag_configurations_isSet;
}

bool OAIGetSite_200_response::is_hashtag_configurations_Valid() const{
    return m_hashtag_configurations_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getHashtagIcons() const {
    return m_hashtag_icons;
}
void OAIGetSite_200_response::setHashtagIcons(const QList<QJsonValue> &hashtag_icons) {
    m_hashtag_icons = hashtag_icons;
    m_hashtag_icons_isSet = true;
}

bool OAIGetSite_200_response::is_hashtag_icons_Set() const{
    return m_hashtag_icons_isSet;
}

bool OAIGetSite_200_response::is_hashtag_icons_Valid() const{
    return m_hashtag_icons_isValid;
}

OAIObject OAIGetSite_200_response::getMarkdownAdditionalOptions() const {
    return m_markdown_additional_options;
}
void OAIGetSite_200_response::setMarkdownAdditionalOptions(const OAIObject &markdown_additional_options) {
    m_markdown_additional_options = markdown_additional_options;
    m_markdown_additional_options_isSet = true;
}

bool OAIGetSite_200_response::is_markdown_additional_options_Set() const{
    return m_markdown_additional_options_isSet;
}

bool OAIGetSite_200_response::is_markdown_additional_options_Valid() const{
    return m_markdown_additional_options_isValid;
}

OAIGetSite_200_response_notification_types OAIGetSite_200_response::getNotificationTypes() const {
    return m_notification_types;
}
void OAIGetSite_200_response::setNotificationTypes(const OAIGetSite_200_response_notification_types &notification_types) {
    m_notification_types = notification_types;
    m_notification_types_isSet = true;
}

bool OAIGetSite_200_response::is_notification_types_Set() const{
    return m_notification_types_isSet;
}

bool OAIGetSite_200_response::is_notification_types_Valid() const{
    return m_notification_types_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getPeriods() const {
    return m_periods;
}
void OAIGetSite_200_response::setPeriods(const QList<QJsonValue> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIGetSite_200_response::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIGetSite_200_response::is_periods_Valid() const{
    return m_periods_isValid;
}

QList<OAIGetSite_200_response_post_action_types_inner> OAIGetSite_200_response::getPostActionTypes() const {
    return m_post_action_types;
}
void OAIGetSite_200_response::setPostActionTypes(const QList<OAIGetSite_200_response_post_action_types_inner> &post_action_types) {
    m_post_action_types = post_action_types;
    m_post_action_types_isSet = true;
}

bool OAIGetSite_200_response::is_post_action_types_Set() const{
    return m_post_action_types_isSet;
}

bool OAIGetSite_200_response::is_post_action_types_Valid() const{
    return m_post_action_types_isValid;
}

OAIGetSite_200_response_post_types OAIGetSite_200_response::getPostTypes() const {
    return m_post_types;
}
void OAIGetSite_200_response::setPostTypes(const OAIGetSite_200_response_post_types &post_types) {
    m_post_types = post_types;
    m_post_types_isSet = true;
}

bool OAIGetSite_200_response::is_post_types_Set() const{
    return m_post_types_isSet;
}

bool OAIGetSite_200_response::is_post_types_Valid() const{
    return m_post_types_isValid;
}

bool OAIGetSite_200_response::isShowWelcomeTopicBanner() const {
    return m_show_welcome_topic_banner;
}
void OAIGetSite_200_response::setShowWelcomeTopicBanner(const bool &show_welcome_topic_banner) {
    m_show_welcome_topic_banner = show_welcome_topic_banner;
    m_show_welcome_topic_banner_isSet = true;
}

bool OAIGetSite_200_response::is_show_welcome_topic_banner_Set() const{
    return m_show_welcome_topic_banner_isSet;
}

bool OAIGetSite_200_response::is_show_welcome_topic_banner_Valid() const{
    return m_show_welcome_topic_banner_isValid;
}

QString OAIGetSite_200_response::getTagsFilterRegexp() const {
    return m_tags_filter_regexp;
}
void OAIGetSite_200_response::setTagsFilterRegexp(const QString &tags_filter_regexp) {
    m_tags_filter_regexp = tags_filter_regexp;
    m_tags_filter_regexp_isSet = true;
}

bool OAIGetSite_200_response::is_tags_filter_regexp_Set() const{
    return m_tags_filter_regexp_isSet;
}

bool OAIGetSite_200_response::is_tags_filter_regexp_Valid() const{
    return m_tags_filter_regexp_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getTopMenuItems() const {
    return m_top_menu_items;
}
void OAIGetSite_200_response::setTopMenuItems(const QList<QJsonValue> &top_menu_items) {
    m_top_menu_items = top_menu_items;
    m_top_menu_items_isSet = true;
}

bool OAIGetSite_200_response::is_top_menu_items_Set() const{
    return m_top_menu_items_isSet;
}

bool OAIGetSite_200_response::is_top_menu_items_Valid() const{
    return m_top_menu_items_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getTopTags() const {
    return m_top_tags;
}
void OAIGetSite_200_response::setTopTags(const QList<QJsonValue> &top_tags) {
    m_top_tags = top_tags;
    m_top_tags_isSet = true;
}

bool OAIGetSite_200_response::is_top_tags_Set() const{
    return m_top_tags_isSet;
}

bool OAIGetSite_200_response::is_top_tags_Valid() const{
    return m_top_tags_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getTopicFeaturedLinkAllowedCategoryIds() const {
    return m_topic_featured_link_allowed_category_ids;
}
void OAIGetSite_200_response::setTopicFeaturedLinkAllowedCategoryIds(const QList<QJsonValue> &topic_featured_link_allowed_category_ids) {
    m_topic_featured_link_allowed_category_ids = topic_featured_link_allowed_category_ids;
    m_topic_featured_link_allowed_category_ids_isSet = true;
}

bool OAIGetSite_200_response::is_topic_featured_link_allowed_category_ids_Set() const{
    return m_topic_featured_link_allowed_category_ids_isSet;
}

bool OAIGetSite_200_response::is_topic_featured_link_allowed_category_ids_Valid() const{
    return m_topic_featured_link_allowed_category_ids_isValid;
}

QList<OAIGetSite_200_response_post_action_types_inner> OAIGetSite_200_response::getTopicFlagTypes() const {
    return m_topic_flag_types;
}
void OAIGetSite_200_response::setTopicFlagTypes(const QList<OAIGetSite_200_response_post_action_types_inner> &topic_flag_types) {
    m_topic_flag_types = topic_flag_types;
    m_topic_flag_types_isSet = true;
}

bool OAIGetSite_200_response::is_topic_flag_types_Set() const{
    return m_topic_flag_types_isSet;
}

bool OAIGetSite_200_response::is_topic_flag_types_Valid() const{
    return m_topic_flag_types_isValid;
}

OAIGetSite_200_response_trust_levels OAIGetSite_200_response::getTrustLevels() const {
    return m_trust_levels;
}
void OAIGetSite_200_response::setTrustLevels(const OAIGetSite_200_response_trust_levels &trust_levels) {
    m_trust_levels = trust_levels;
    m_trust_levels_isSet = true;
}

bool OAIGetSite_200_response::is_trust_levels_Set() const{
    return m_trust_levels_isSet;
}

bool OAIGetSite_200_response::is_trust_levels_Valid() const{
    return m_trust_levels_isValid;
}

qint32 OAIGetSite_200_response::getUncategorizedCategoryId() const {
    return m_uncategorized_category_id;
}
void OAIGetSite_200_response::setUncategorizedCategoryId(const qint32 &uncategorized_category_id) {
    m_uncategorized_category_id = uncategorized_category_id;
    m_uncategorized_category_id_isSet = true;
}

bool OAIGetSite_200_response::is_uncategorized_category_id_Set() const{
    return m_uncategorized_category_id_isSet;
}

bool OAIGetSite_200_response::is_uncategorized_category_id_Valid() const{
    return m_uncategorized_category_id_isValid;
}

QList<OAIGetSite_200_response_user_color_schemes_inner> OAIGetSite_200_response::getUserColorSchemes() const {
    return m_user_color_schemes;
}
void OAIGetSite_200_response::setUserColorSchemes(const QList<OAIGetSite_200_response_user_color_schemes_inner> &user_color_schemes) {
    m_user_color_schemes = user_color_schemes;
    m_user_color_schemes_isSet = true;
}

bool OAIGetSite_200_response::is_user_color_schemes_Set() const{
    return m_user_color_schemes_isSet;
}

bool OAIGetSite_200_response::is_user_color_schemes_Valid() const{
    return m_user_color_schemes_isValid;
}

qint32 OAIGetSite_200_response::getUserFieldMaxLength() const {
    return m_user_field_max_length;
}
void OAIGetSite_200_response::setUserFieldMaxLength(const qint32 &user_field_max_length) {
    m_user_field_max_length = user_field_max_length;
    m_user_field_max_length_isSet = true;
}

bool OAIGetSite_200_response::is_user_field_max_length_Set() const{
    return m_user_field_max_length_isSet;
}

bool OAIGetSite_200_response::is_user_field_max_length_Valid() const{
    return m_user_field_max_length_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getUserFields() const {
    return m_user_fields;
}
void OAIGetSite_200_response::setUserFields(const QList<QJsonValue> &user_fields) {
    m_user_fields = user_fields;
    m_user_fields_isSet = true;
}

bool OAIGetSite_200_response::is_user_fields_Set() const{
    return m_user_fields_isSet;
}

bool OAIGetSite_200_response::is_user_fields_Valid() const{
    return m_user_fields_isValid;
}

QList<OAIGetSite_200_response_user_themes_inner> OAIGetSite_200_response::getUserThemes() const {
    return m_user_themes;
}
void OAIGetSite_200_response::setUserThemes(const QList<OAIGetSite_200_response_user_themes_inner> &user_themes) {
    m_user_themes = user_themes;
    m_user_themes_isSet = true;
}

bool OAIGetSite_200_response::is_user_themes_Set() const{
    return m_user_themes_isSet;
}

bool OAIGetSite_200_response::is_user_themes_Valid() const{
    return m_user_themes_isValid;
}

QString OAIGetSite_200_response::getWatchedWordsLink() const {
    return m_watched_words_link;
}
void OAIGetSite_200_response::setWatchedWordsLink(const QString &watched_words_link) {
    m_watched_words_link = watched_words_link;
    m_watched_words_link_isSet = true;
}

bool OAIGetSite_200_response::is_watched_words_link_Set() const{
    return m_watched_words_link_isSet;
}

bool OAIGetSite_200_response::is_watched_words_link_Valid() const{
    return m_watched_words_link_isValid;
}

QString OAIGetSite_200_response::getWatchedWordsReplace() const {
    return m_watched_words_replace;
}
void OAIGetSite_200_response::setWatchedWordsReplace(const QString &watched_words_replace) {
    m_watched_words_replace = watched_words_replace;
    m_watched_words_replace_isSet = true;
}

bool OAIGetSite_200_response::is_watched_words_replace_Set() const{
    return m_watched_words_replace_isSet;
}

bool OAIGetSite_200_response::is_watched_words_replace_Valid() const{
    return m_watched_words_replace_isValid;
}

QList<QJsonValue> OAIGetSite_200_response::getWhispersAllowedGroupsNames() const {
    return m_whispers_allowed_groups_names;
}
void OAIGetSite_200_response::setWhispersAllowedGroupsNames(const QList<QJsonValue> &whispers_allowed_groups_names) {
    m_whispers_allowed_groups_names = whispers_allowed_groups_names;
    m_whispers_allowed_groups_names_isSet = true;
}

bool OAIGetSite_200_response::is_whispers_allowed_groups_names_Set() const{
    return m_whispers_allowed_groups_names_isSet;
}

bool OAIGetSite_200_response::is_whispers_allowed_groups_names_Valid() const{
    return m_whispers_allowed_groups_names_isValid;
}

bool OAIGetSite_200_response::isWizardRequired() const {
    return m_wizard_required;
}
void OAIGetSite_200_response::setWizardRequired(const bool &wizard_required) {
    m_wizard_required = wizard_required;
    m_wizard_required_isSet = true;
}

bool OAIGetSite_200_response::is_wizard_required_Set() const{
    return m_wizard_required_isSet;
}

bool OAIGetSite_200_response::is_wizard_required_Valid() const{
    return m_wizard_required_isValid;
}

bool OAIGetSite_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anonymous_top_menu_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_archetypes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_associate_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_tag_pms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_tag_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_censored_regexp.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_emoji_translation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_archetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_dark_color_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_denied_emojis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayed_about_plugin_stat_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hashtag_configurations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hashtag_icons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_markdown_additional_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_action_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_welcome_topic_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_filter_regexp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_menu_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_featured_link_allowed_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_flag_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_levels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncategorized_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_color_schemes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_field_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_words_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_words_replace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whispers_allowed_groups_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wizard_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSite_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anonymous_top_menu_items_isValid && m_archetypes_isValid && m_auth_providers_isValid && m_can_create_tag_isValid && m_can_tag_pms_isValid && m_can_tag_topics_isValid && m_categories_isValid && m_censored_regexp_isValid && m_custom_emoji_translation_isValid && m_default_archetype_isValid && m_default_dark_color_scheme_isValid && m_filters_isValid && m_groups_isValid && m_notification_types_isValid && m_periods_isValid && m_post_action_types_isValid && m_post_types_isValid && m_tags_filter_regexp_isValid && m_top_menu_items_isValid && m_top_tags_isValid && m_topic_featured_link_allowed_category_ids_isValid && m_topic_flag_types_isValid && m_trust_levels_isValid && m_uncategorized_category_id_isValid && m_user_color_schemes_isValid && m_user_field_max_length_isValid && m_user_fields_isValid && m_user_themes_isValid && m_watched_words_link_isValid && m_watched_words_replace_isValid && true;
}

} // namespace OpenAPI
