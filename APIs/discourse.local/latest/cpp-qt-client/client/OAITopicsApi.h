/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITopicsApi_H
#define OAI_OAITopicsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTopicPostPM_200_response.h"
#include "OAICreateTopicPostPM_request.h"
#include "OAICreateTopicTimer_200_response.h"
#include "OAICreateTopicTimer_request.h"
#include "OAIGetSpecificPostsFromTopic_200_response.h"
#include "OAIGetSpecificPostsFromTopic_request.h"
#include "OAIGetTopic_200_response.h"
#include "OAIInviteToTopic_200_response.h"
#include "OAIInviteToTopic_request.h"
#include "OAIListLatestTopics_200_response.h"
#include "OAIListTopTopics_200_response.h"
#include "OAISetNotificationLevel_request.h"
#include "OAIUpdateGroup_200_response.h"
#include "OAIUpdateTopicStatus_200_response.h"
#include "OAIUpdateTopicStatus_request.h"
#include "OAIUpdateTopicTimestamp_request.h"
#include "OAIUpdateTopic_200_response.h"
#include "OAIUpdateTopic_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITopicsApi : public QObject {
    Q_OBJECT

public:
    OAITopicsApi(const int timeOut = 0);
    ~OAITopicsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    */
    virtual void bookmarkTopic(const QString &api_key, const QString &api_username, const QString &id);

    /**
    * @param[in]  oai_create_topic_post_pm_request OAICreateTopicPostPM_request [optional]
    */
    virtual void createTopicPostPM(const ::OpenAPI::OptionalParam<OAICreateTopicPostPM_request> &oai_create_topic_post_pm_request = ::OpenAPI::OptionalParam<OAICreateTopicPostPM_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_create_topic_timer_request OAICreateTopicTimer_request [optional]
    */
    virtual void createTopicTimer(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAICreateTopicTimer_request> &oai_create_topic_timer_request = ::OpenAPI::OptionalParam<OAICreateTopicTimer_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_get_specific_posts_from_topic_request OAIGetSpecificPostsFromTopic_request [optional]
    */
    virtual void getSpecificPostsFromTopic(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAIGetSpecificPostsFromTopic_request> &oai_get_specific_posts_from_topic_request = ::OpenAPI::OptionalParam<OAIGetSpecificPostsFromTopic_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getTopic(const QString &api_key, const QString &api_username, const QString &id);

    /**
    * @param[in]  external_id QString [required]
    */
    virtual void getTopicByExternalId(const QString &external_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_invite_to_topic_request OAIInviteToTopic_request [optional]
    */
    virtual void inviteToTopic(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAIInviteToTopic_request> &oai_invite_to_topic_request = ::OpenAPI::OptionalParam<OAIInviteToTopic_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  ascending QString [optional]
    */
    virtual void listLatestTopics(const QString &api_key, const QString &api_username, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ascending = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  period QString [optional]
    */
    virtual void listTopTopics(const QString &api_key, const QString &api_username, const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    */
    virtual void removeTopic(const QString &api_key, const QString &api_username, const QString &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_set_notification_level_request OAISetNotificationLevel_request [optional]
    */
    virtual void setNotificationLevel(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAISetNotificationLevel_request> &oai_set_notification_level_request = ::OpenAPI::OptionalParam<OAISetNotificationLevel_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_topic_request OAIUpdateTopic_request [optional]
    */
    virtual void updateTopic(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateTopic_request> &oai_update_topic_request = ::OpenAPI::OptionalParam<OAIUpdateTopic_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_topic_status_request OAIUpdateTopicStatus_request [optional]
    */
    virtual void updateTopicStatus(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateTopicStatus_request> &oai_update_topic_status_request = ::OpenAPI::OptionalParam<OAIUpdateTopicStatus_request>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_username QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_topic_timestamp_request OAIUpdateTopicTimestamp_request [optional]
    */
    virtual void updateTopicTimestamp(const QString &api_key, const QString &api_username, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateTopicTimestamp_request> &oai_update_topic_timestamp_request = ::OpenAPI::OptionalParam<OAIUpdateTopicTimestamp_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bookmarkTopicCallback(OAIHttpRequestWorker *worker);
    void createTopicPostPMCallback(OAIHttpRequestWorker *worker);
    void createTopicTimerCallback(OAIHttpRequestWorker *worker);
    void getSpecificPostsFromTopicCallback(OAIHttpRequestWorker *worker);
    void getTopicCallback(OAIHttpRequestWorker *worker);
    void getTopicByExternalIdCallback(OAIHttpRequestWorker *worker);
    void inviteToTopicCallback(OAIHttpRequestWorker *worker);
    void listLatestTopicsCallback(OAIHttpRequestWorker *worker);
    void listTopTopicsCallback(OAIHttpRequestWorker *worker);
    void removeTopicCallback(OAIHttpRequestWorker *worker);
    void setNotificationLevelCallback(OAIHttpRequestWorker *worker);
    void updateTopicCallback(OAIHttpRequestWorker *worker);
    void updateTopicStatusCallback(OAIHttpRequestWorker *worker);
    void updateTopicTimestampCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bookmarkTopicSignal();
    void createTopicPostPMSignal(OAICreateTopicPostPM_200_response summary);
    void createTopicTimerSignal(OAICreateTopicTimer_200_response summary);
    void getSpecificPostsFromTopicSignal(OAIGetSpecificPostsFromTopic_200_response summary);
    void getTopicSignal(OAIGetTopic_200_response summary);
    void getTopicByExternalIdSignal();
    void inviteToTopicSignal(OAIInviteToTopic_200_response summary);
    void listLatestTopicsSignal(OAIListLatestTopics_200_response summary);
    void listTopTopicsSignal(OAIListTopTopics_200_response summary);
    void removeTopicSignal();
    void setNotificationLevelSignal(OAIUpdateGroup_200_response summary);
    void updateTopicSignal(OAIUpdateTopic_200_response summary);
    void updateTopicStatusSignal(OAIUpdateTopicStatus_200_response summary);
    void updateTopicTimestampSignal(OAIUpdateGroup_200_response summary);


    void bookmarkTopicSignalFull(OAIHttpRequestWorker *worker);
    void createTopicPostPMSignalFull(OAIHttpRequestWorker *worker, OAICreateTopicPostPM_200_response summary);
    void createTopicTimerSignalFull(OAIHttpRequestWorker *worker, OAICreateTopicTimer_200_response summary);
    void getSpecificPostsFromTopicSignalFull(OAIHttpRequestWorker *worker, OAIGetSpecificPostsFromTopic_200_response summary);
    void getTopicSignalFull(OAIHttpRequestWorker *worker, OAIGetTopic_200_response summary);
    void getTopicByExternalIdSignalFull(OAIHttpRequestWorker *worker);
    void inviteToTopicSignalFull(OAIHttpRequestWorker *worker, OAIInviteToTopic_200_response summary);
    void listLatestTopicsSignalFull(OAIHttpRequestWorker *worker, OAIListLatestTopics_200_response summary);
    void listTopTopicsSignalFull(OAIHttpRequestWorker *worker, OAIListTopTopics_200_response summary);
    void removeTopicSignalFull(OAIHttpRequestWorker *worker);
    void setNotificationLevelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGroup_200_response summary);
    void updateTopicSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTopic_200_response summary);
    void updateTopicStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTopicStatus_200_response summary);
    void updateTopicTimestampSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGroup_200_response summary);

    Q_DECL_DEPRECATED_X("Use bookmarkTopicSignalError() instead")
    void bookmarkTopicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bookmarkTopicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicPostPMSignalError() instead")
    void createTopicPostPMSignalE(OAICreateTopicPostPM_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicPostPMSignalError(OAICreateTopicPostPM_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicTimerSignalError() instead")
    void createTopicTimerSignalE(OAICreateTopicTimer_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicTimerSignalError(OAICreateTopicTimer_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecificPostsFromTopicSignalError() instead")
    void getSpecificPostsFromTopicSignalE(OAIGetSpecificPostsFromTopic_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecificPostsFromTopicSignalError(OAIGetSpecificPostsFromTopic_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopicSignalError() instead")
    void getTopicSignalE(OAIGetTopic_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopicSignalError(OAIGetTopic_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopicByExternalIdSignalError() instead")
    void getTopicByExternalIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTopicByExternalIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteToTopicSignalError() instead")
    void inviteToTopicSignalE(OAIInviteToTopic_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteToTopicSignalError(OAIInviteToTopic_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLatestTopicsSignalError() instead")
    void listLatestTopicsSignalE(OAIListLatestTopics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLatestTopicsSignalError(OAIListLatestTopics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTopTopicsSignalError() instead")
    void listTopTopicsSignalE(OAIListTopTopics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTopTopicsSignalError(OAIListTopTopics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTopicSignalError() instead")
    void removeTopicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeTopicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNotificationLevelSignalError() instead")
    void setNotificationLevelSignalE(OAIUpdateGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setNotificationLevelSignalError(OAIUpdateGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicSignalError() instead")
    void updateTopicSignalE(OAIUpdateTopic_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicSignalError(OAIUpdateTopic_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicStatusSignalError() instead")
    void updateTopicStatusSignalE(OAIUpdateTopicStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicStatusSignalError(OAIUpdateTopicStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicTimestampSignalError() instead")
    void updateTopicTimestampSignalE(OAIUpdateGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicTimestampSignalError(OAIUpdateGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bookmarkTopicSignalErrorFull() instead")
    void bookmarkTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookmarkTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicPostPMSignalErrorFull() instead")
    void createTopicPostPMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicPostPMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicTimerSignalErrorFull() instead")
    void createTopicTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecificPostsFromTopicSignalErrorFull() instead")
    void getSpecificPostsFromTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecificPostsFromTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopicSignalErrorFull() instead")
    void getTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopicByExternalIdSignalErrorFull() instead")
    void getTopicByExternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopicByExternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteToTopicSignalErrorFull() instead")
    void inviteToTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteToTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLatestTopicsSignalErrorFull() instead")
    void listLatestTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLatestTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTopTopicsSignalErrorFull() instead")
    void listTopTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTopTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTopicSignalErrorFull() instead")
    void removeTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNotificationLevelSignalErrorFull() instead")
    void setNotificationLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setNotificationLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicSignalErrorFull() instead")
    void updateTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicStatusSignalErrorFull() instead")
    void updateTopicStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicTimestampSignalErrorFull() instead")
    void updateTopicTimestampSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicTimestampSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
