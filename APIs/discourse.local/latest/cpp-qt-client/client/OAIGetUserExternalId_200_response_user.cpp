/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUserExternalId_200_response_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUserExternalId_200_response_user::OAIGetUserExternalId_200_response_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUserExternalId_200_response_user::OAIGetUserExternalId_200_response_user() {
    this->initializeModel();
}

OAIGetUserExternalId_200_response_user::~OAIGetUserExternalId_200_response_user() {}

void OAIGetUserExternalId_200_response_user::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_allowed_pm_usernames_isSet = false;
    m_allowed_pm_usernames_isValid = false;

    m_avatar_template_isSet = false;
    m_avatar_template_isValid = false;

    m_badge_count_isSet = false;
    m_badge_count_isValid = false;

    m_can_be_deleted_isSet = false;
    m_can_be_deleted_isValid = false;

    m_can_change_bio_isSet = false;
    m_can_change_bio_isValid = false;

    m_can_change_location_isSet = false;
    m_can_change_location_isValid = false;

    m_can_change_tracking_preferences_isSet = false;
    m_can_change_tracking_preferences_isValid = false;

    m_can_change_website_isSet = false;
    m_can_change_website_isValid = false;

    m_can_delete_all_posts_isSet = false;
    m_can_delete_all_posts_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_edit_email_isSet = false;
    m_can_edit_email_isValid = false;

    m_can_edit_name_isSet = false;
    m_can_edit_name_isValid = false;

    m_can_edit_username_isSet = false;
    m_can_edit_username_isValid = false;

    m_can_ignore_user_isSet = false;
    m_can_ignore_user_isValid = false;

    m_can_mute_user_isSet = false;
    m_can_mute_user_isValid = false;

    m_can_send_private_message_to_user_isSet = false;
    m_can_send_private_message_to_user_isValid = false;

    m_can_send_private_messages_isSet = false;
    m_can_send_private_messages_isValid = false;

    m_can_upload_profile_header_isSet = false;
    m_can_upload_profile_header_isValid = false;

    m_can_upload_user_card_background_isSet = false;
    m_can_upload_user_card_background_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_featured_topic_isSet = false;
    m_featured_topic_isValid = false;

    m_featured_user_badge_ids_isSet = false;
    m_featured_user_badge_ids_isValid = false;

    m_flair_bg_color_isSet = false;
    m_flair_bg_color_isValid = false;

    m_flair_color_isSet = false;
    m_flair_color_isValid = false;

    m_flair_group_id_isSet = false;
    m_flair_group_id_isValid = false;

    m_flair_name_isSet = false;
    m_flair_name_isValid = false;

    m_flair_url_isSet = false;
    m_flair_url_isValid = false;

    m_group_users_isSet = false;
    m_group_users_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_has_title_badges_isSet = false;
    m_has_title_badges_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignored_isSet = false;
    m_ignored_isValid = false;

    m_ignored_usernames_isSet = false;
    m_ignored_usernames_isValid = false;

    m_invited_by_isSet = false;
    m_invited_by_isValid = false;

    m_last_posted_at_isSet = false;
    m_last_posted_at_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_mailing_list_posts_per_day_isSet = false;
    m_mailing_list_posts_per_day_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;

    m_muted_category_ids_isSet = false;
    m_muted_category_ids_isValid = false;

    m_muted_tags_isSet = false;
    m_muted_tags_isValid = false;

    m_muted_usernames_isSet = false;
    m_muted_usernames_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_count_isSet = false;
    m_pending_count_isValid = false;

    m_pending_posts_count_isSet = false;
    m_pending_posts_count_isValid = false;

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_primary_group_id_isSet = false;
    m_primary_group_id_isValid = false;

    m_primary_group_name_isSet = false;
    m_primary_group_name_isValid = false;

    m_profile_view_count_isSet = false;
    m_profile_view_count_isValid = false;

    m_recent_time_read_isSet = false;
    m_recent_time_read_isValid = false;

    m_regular_category_ids_isSet = false;
    m_regular_category_ids_isValid = false;

    m_second_factor_backup_enabled_isSet = false;
    m_second_factor_backup_enabled_isValid = false;

    m_second_factor_enabled_isSet = false;
    m_second_factor_enabled_isValid = false;

    m_staged_isSet = false;
    m_staged_isValid = false;

    m_system_avatar_template_isSet = false;
    m_system_avatar_template_isValid = false;

    m_system_avatar_upload_id_isSet = false;
    m_system_avatar_upload_id_isValid = false;

    m_time_read_isSet = false;
    m_time_read_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracked_category_ids_isSet = false;
    m_tracked_category_ids_isValid = false;

    m_tracked_tags_isSet = false;
    m_tracked_tags_isValid = false;

    m_trust_level_isSet = false;
    m_trust_level_isValid = false;

    m_uploaded_avatar_id_isSet = false;
    m_uploaded_avatar_id_isValid = false;

    m_use_logo_small_as_avatar_isSet = false;
    m_use_logo_small_as_avatar_isValid = false;

    m_user_api_keys_isSet = false;
    m_user_api_keys_isValid = false;

    m_user_auth_tokens_isSet = false;
    m_user_auth_tokens_isValid = false;

    m_user_fields_isSet = false;
    m_user_fields_isValid = false;

    m_user_notification_schedule_isSet = false;
    m_user_notification_schedule_isValid = false;

    m_user_option_isSet = false;
    m_user_option_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_watched_category_ids_isSet = false;
    m_watched_category_ids_isValid = false;

    m_watched_first_post_category_ids_isSet = false;
    m_watched_first_post_category_ids_isValid = false;

    m_watched_tags_isSet = false;
    m_watched_tags_isValid = false;

    m_watching_first_post_tags_isSet = false;
    m_watching_first_post_tags_isValid = false;
}

void OAIGetUserExternalId_200_response_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUserExternalId_200_response_user::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_allowed_pm_usernames_isValid = ::OpenAPI::fromJsonValue(m_allowed_pm_usernames, json[QString("allowed_pm_usernames")]);
    m_allowed_pm_usernames_isSet = !json[QString("allowed_pm_usernames")].isNull() && m_allowed_pm_usernames_isValid;

    m_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_avatar_template, json[QString("avatar_template")]);
    m_avatar_template_isSet = !json[QString("avatar_template")].isNull() && m_avatar_template_isValid;

    m_badge_count_isValid = ::OpenAPI::fromJsonValue(m_badge_count, json[QString("badge_count")]);
    m_badge_count_isSet = !json[QString("badge_count")].isNull() && m_badge_count_isValid;

    m_can_be_deleted_isValid = ::OpenAPI::fromJsonValue(m_can_be_deleted, json[QString("can_be_deleted")]);
    m_can_be_deleted_isSet = !json[QString("can_be_deleted")].isNull() && m_can_be_deleted_isValid;

    m_can_change_bio_isValid = ::OpenAPI::fromJsonValue(m_can_change_bio, json[QString("can_change_bio")]);
    m_can_change_bio_isSet = !json[QString("can_change_bio")].isNull() && m_can_change_bio_isValid;

    m_can_change_location_isValid = ::OpenAPI::fromJsonValue(m_can_change_location, json[QString("can_change_location")]);
    m_can_change_location_isSet = !json[QString("can_change_location")].isNull() && m_can_change_location_isValid;

    m_can_change_tracking_preferences_isValid = ::OpenAPI::fromJsonValue(m_can_change_tracking_preferences, json[QString("can_change_tracking_preferences")]);
    m_can_change_tracking_preferences_isSet = !json[QString("can_change_tracking_preferences")].isNull() && m_can_change_tracking_preferences_isValid;

    m_can_change_website_isValid = ::OpenAPI::fromJsonValue(m_can_change_website, json[QString("can_change_website")]);
    m_can_change_website_isSet = !json[QString("can_change_website")].isNull() && m_can_change_website_isValid;

    m_can_delete_all_posts_isValid = ::OpenAPI::fromJsonValue(m_can_delete_all_posts, json[QString("can_delete_all_posts")]);
    m_can_delete_all_posts_isSet = !json[QString("can_delete_all_posts")].isNull() && m_can_delete_all_posts_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_can_edit_email_isValid = ::OpenAPI::fromJsonValue(m_can_edit_email, json[QString("can_edit_email")]);
    m_can_edit_email_isSet = !json[QString("can_edit_email")].isNull() && m_can_edit_email_isValid;

    m_can_edit_name_isValid = ::OpenAPI::fromJsonValue(m_can_edit_name, json[QString("can_edit_name")]);
    m_can_edit_name_isSet = !json[QString("can_edit_name")].isNull() && m_can_edit_name_isValid;

    m_can_edit_username_isValid = ::OpenAPI::fromJsonValue(m_can_edit_username, json[QString("can_edit_username")]);
    m_can_edit_username_isSet = !json[QString("can_edit_username")].isNull() && m_can_edit_username_isValid;

    m_can_ignore_user_isValid = ::OpenAPI::fromJsonValue(m_can_ignore_user, json[QString("can_ignore_user")]);
    m_can_ignore_user_isSet = !json[QString("can_ignore_user")].isNull() && m_can_ignore_user_isValid;

    m_can_mute_user_isValid = ::OpenAPI::fromJsonValue(m_can_mute_user, json[QString("can_mute_user")]);
    m_can_mute_user_isSet = !json[QString("can_mute_user")].isNull() && m_can_mute_user_isValid;

    m_can_send_private_message_to_user_isValid = ::OpenAPI::fromJsonValue(m_can_send_private_message_to_user, json[QString("can_send_private_message_to_user")]);
    m_can_send_private_message_to_user_isSet = !json[QString("can_send_private_message_to_user")].isNull() && m_can_send_private_message_to_user_isValid;

    m_can_send_private_messages_isValid = ::OpenAPI::fromJsonValue(m_can_send_private_messages, json[QString("can_send_private_messages")]);
    m_can_send_private_messages_isSet = !json[QString("can_send_private_messages")].isNull() && m_can_send_private_messages_isValid;

    m_can_upload_profile_header_isValid = ::OpenAPI::fromJsonValue(m_can_upload_profile_header, json[QString("can_upload_profile_header")]);
    m_can_upload_profile_header_isSet = !json[QString("can_upload_profile_header")].isNull() && m_can_upload_profile_header_isValid;

    m_can_upload_user_card_background_isValid = ::OpenAPI::fromJsonValue(m_can_upload_user_card_background, json[QString("can_upload_user_card_background")]);
    m_can_upload_user_card_background_isSet = !json[QString("can_upload_user_card_background")].isNull() && m_can_upload_user_card_background_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_featured_topic_isValid = ::OpenAPI::fromJsonValue(m_featured_topic, json[QString("featured_topic")]);
    m_featured_topic_isSet = !json[QString("featured_topic")].isNull() && m_featured_topic_isValid;

    m_featured_user_badge_ids_isValid = ::OpenAPI::fromJsonValue(m_featured_user_badge_ids, json[QString("featured_user_badge_ids")]);
    m_featured_user_badge_ids_isSet = !json[QString("featured_user_badge_ids")].isNull() && m_featured_user_badge_ids_isValid;

    m_flair_bg_color_isValid = ::OpenAPI::fromJsonValue(m_flair_bg_color, json[QString("flair_bg_color")]);
    m_flair_bg_color_isSet = !json[QString("flair_bg_color")].isNull() && m_flair_bg_color_isValid;

    m_flair_color_isValid = ::OpenAPI::fromJsonValue(m_flair_color, json[QString("flair_color")]);
    m_flair_color_isSet = !json[QString("flair_color")].isNull() && m_flair_color_isValid;

    m_flair_group_id_isValid = ::OpenAPI::fromJsonValue(m_flair_group_id, json[QString("flair_group_id")]);
    m_flair_group_id_isSet = !json[QString("flair_group_id")].isNull() && m_flair_group_id_isValid;

    m_flair_name_isValid = ::OpenAPI::fromJsonValue(m_flair_name, json[QString("flair_name")]);
    m_flair_name_isSet = !json[QString("flair_name")].isNull() && m_flair_name_isValid;

    m_flair_url_isValid = ::OpenAPI::fromJsonValue(m_flair_url, json[QString("flair_url")]);
    m_flair_url_isSet = !json[QString("flair_url")].isNull() && m_flair_url_isValid;

    m_group_users_isValid = ::OpenAPI::fromJsonValue(m_group_users, json[QString("group_users")]);
    m_group_users_isSet = !json[QString("group_users")].isNull() && m_group_users_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_has_title_badges_isValid = ::OpenAPI::fromJsonValue(m_has_title_badges, json[QString("has_title_badges")]);
    m_has_title_badges_isSet = !json[QString("has_title_badges")].isNull() && m_has_title_badges_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignored_isValid = ::OpenAPI::fromJsonValue(m_ignored, json[QString("ignored")]);
    m_ignored_isSet = !json[QString("ignored")].isNull() && m_ignored_isValid;

    m_ignored_usernames_isValid = ::OpenAPI::fromJsonValue(m_ignored_usernames, json[QString("ignored_usernames")]);
    m_ignored_usernames_isSet = !json[QString("ignored_usernames")].isNull() && m_ignored_usernames_isValid;

    m_invited_by_isValid = ::OpenAPI::fromJsonValue(m_invited_by, json[QString("invited_by")]);
    m_invited_by_isSet = !json[QString("invited_by")].isNull() && m_invited_by_isValid;

    m_last_posted_at_isValid = ::OpenAPI::fromJsonValue(m_last_posted_at, json[QString("last_posted_at")]);
    m_last_posted_at_isSet = !json[QString("last_posted_at")].isNull() && m_last_posted_at_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_mailing_list_posts_per_day_isValid = ::OpenAPI::fromJsonValue(m_mailing_list_posts_per_day, json[QString("mailing_list_posts_per_day")]);
    m_mailing_list_posts_per_day_isSet = !json[QString("mailing_list_posts_per_day")].isNull() && m_mailing_list_posts_per_day_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;

    m_muted_category_ids_isValid = ::OpenAPI::fromJsonValue(m_muted_category_ids, json[QString("muted_category_ids")]);
    m_muted_category_ids_isSet = !json[QString("muted_category_ids")].isNull() && m_muted_category_ids_isValid;

    m_muted_tags_isValid = ::OpenAPI::fromJsonValue(m_muted_tags, json[QString("muted_tags")]);
    m_muted_tags_isSet = !json[QString("muted_tags")].isNull() && m_muted_tags_isValid;

    m_muted_usernames_isValid = ::OpenAPI::fromJsonValue(m_muted_usernames, json[QString("muted_usernames")]);
    m_muted_usernames_isSet = !json[QString("muted_usernames")].isNull() && m_muted_usernames_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_count_isValid = ::OpenAPI::fromJsonValue(m_pending_count, json[QString("pending_count")]);
    m_pending_count_isSet = !json[QString("pending_count")].isNull() && m_pending_count_isValid;

    m_pending_posts_count_isValid = ::OpenAPI::fromJsonValue(m_pending_posts_count, json[QString("pending_posts_count")]);
    m_pending_posts_count_isSet = !json[QString("pending_posts_count")].isNull() && m_pending_posts_count_isValid;

    m_post_count_isValid = ::OpenAPI::fromJsonValue(m_post_count, json[QString("post_count")]);
    m_post_count_isSet = !json[QString("post_count")].isNull() && m_post_count_isValid;

    m_primary_group_id_isValid = ::OpenAPI::fromJsonValue(m_primary_group_id, json[QString("primary_group_id")]);
    m_primary_group_id_isSet = !json[QString("primary_group_id")].isNull() && m_primary_group_id_isValid;

    m_primary_group_name_isValid = ::OpenAPI::fromJsonValue(m_primary_group_name, json[QString("primary_group_name")]);
    m_primary_group_name_isSet = !json[QString("primary_group_name")].isNull() && m_primary_group_name_isValid;

    m_profile_view_count_isValid = ::OpenAPI::fromJsonValue(m_profile_view_count, json[QString("profile_view_count")]);
    m_profile_view_count_isSet = !json[QString("profile_view_count")].isNull() && m_profile_view_count_isValid;

    m_recent_time_read_isValid = ::OpenAPI::fromJsonValue(m_recent_time_read, json[QString("recent_time_read")]);
    m_recent_time_read_isSet = !json[QString("recent_time_read")].isNull() && m_recent_time_read_isValid;

    m_regular_category_ids_isValid = ::OpenAPI::fromJsonValue(m_regular_category_ids, json[QString("regular_category_ids")]);
    m_regular_category_ids_isSet = !json[QString("regular_category_ids")].isNull() && m_regular_category_ids_isValid;

    m_second_factor_backup_enabled_isValid = ::OpenAPI::fromJsonValue(m_second_factor_backup_enabled, json[QString("second_factor_backup_enabled")]);
    m_second_factor_backup_enabled_isSet = !json[QString("second_factor_backup_enabled")].isNull() && m_second_factor_backup_enabled_isValid;

    m_second_factor_enabled_isValid = ::OpenAPI::fromJsonValue(m_second_factor_enabled, json[QString("second_factor_enabled")]);
    m_second_factor_enabled_isSet = !json[QString("second_factor_enabled")].isNull() && m_second_factor_enabled_isValid;

    m_staged_isValid = ::OpenAPI::fromJsonValue(m_staged, json[QString("staged")]);
    m_staged_isSet = !json[QString("staged")].isNull() && m_staged_isValid;

    m_system_avatar_template_isValid = ::OpenAPI::fromJsonValue(m_system_avatar_template, json[QString("system_avatar_template")]);
    m_system_avatar_template_isSet = !json[QString("system_avatar_template")].isNull() && m_system_avatar_template_isValid;

    m_system_avatar_upload_id_isValid = ::OpenAPI::fromJsonValue(m_system_avatar_upload_id, json[QString("system_avatar_upload_id")]);
    m_system_avatar_upload_id_isSet = !json[QString("system_avatar_upload_id")].isNull() && m_system_avatar_upload_id_isValid;

    m_time_read_isValid = ::OpenAPI::fromJsonValue(m_time_read, json[QString("time_read")]);
    m_time_read_isSet = !json[QString("time_read")].isNull() && m_time_read_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracked_category_ids_isValid = ::OpenAPI::fromJsonValue(m_tracked_category_ids, json[QString("tracked_category_ids")]);
    m_tracked_category_ids_isSet = !json[QString("tracked_category_ids")].isNull() && m_tracked_category_ids_isValid;

    m_tracked_tags_isValid = ::OpenAPI::fromJsonValue(m_tracked_tags, json[QString("tracked_tags")]);
    m_tracked_tags_isSet = !json[QString("tracked_tags")].isNull() && m_tracked_tags_isValid;

    m_trust_level_isValid = ::OpenAPI::fromJsonValue(m_trust_level, json[QString("trust_level")]);
    m_trust_level_isSet = !json[QString("trust_level")].isNull() && m_trust_level_isValid;

    m_uploaded_avatar_id_isValid = ::OpenAPI::fromJsonValue(m_uploaded_avatar_id, json[QString("uploaded_avatar_id")]);
    m_uploaded_avatar_id_isSet = !json[QString("uploaded_avatar_id")].isNull() && m_uploaded_avatar_id_isValid;

    m_use_logo_small_as_avatar_isValid = ::OpenAPI::fromJsonValue(m_use_logo_small_as_avatar, json[QString("use_logo_small_as_avatar")]);
    m_use_logo_small_as_avatar_isSet = !json[QString("use_logo_small_as_avatar")].isNull() && m_use_logo_small_as_avatar_isValid;

    m_user_api_keys_isValid = ::OpenAPI::fromJsonValue(m_user_api_keys, json[QString("user_api_keys")]);
    m_user_api_keys_isSet = !json[QString("user_api_keys")].isNull() && m_user_api_keys_isValid;

    m_user_auth_tokens_isValid = ::OpenAPI::fromJsonValue(m_user_auth_tokens, json[QString("user_auth_tokens")]);
    m_user_auth_tokens_isSet = !json[QString("user_auth_tokens")].isNull() && m_user_auth_tokens_isValid;

    m_user_fields_isValid = ::OpenAPI::fromJsonValue(m_user_fields, json[QString("user_fields")]);
    m_user_fields_isSet = !json[QString("user_fields")].isNull() && m_user_fields_isValid;

    m_user_notification_schedule_isValid = ::OpenAPI::fromJsonValue(m_user_notification_schedule, json[QString("user_notification_schedule")]);
    m_user_notification_schedule_isSet = !json[QString("user_notification_schedule")].isNull() && m_user_notification_schedule_isValid;

    m_user_option_isValid = ::OpenAPI::fromJsonValue(m_user_option, json[QString("user_option")]);
    m_user_option_isSet = !json[QString("user_option")].isNull() && m_user_option_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_watched_category_ids_isValid = ::OpenAPI::fromJsonValue(m_watched_category_ids, json[QString("watched_category_ids")]);
    m_watched_category_ids_isSet = !json[QString("watched_category_ids")].isNull() && m_watched_category_ids_isValid;

    m_watched_first_post_category_ids_isValid = ::OpenAPI::fromJsonValue(m_watched_first_post_category_ids, json[QString("watched_first_post_category_ids")]);
    m_watched_first_post_category_ids_isSet = !json[QString("watched_first_post_category_ids")].isNull() && m_watched_first_post_category_ids_isValid;

    m_watched_tags_isValid = ::OpenAPI::fromJsonValue(m_watched_tags, json[QString("watched_tags")]);
    m_watched_tags_isSet = !json[QString("watched_tags")].isNull() && m_watched_tags_isValid;

    m_watching_first_post_tags_isValid = ::OpenAPI::fromJsonValue(m_watching_first_post_tags, json[QString("watching_first_post_tags")]);
    m_watching_first_post_tags_isSet = !json[QString("watching_first_post_tags")].isNull() && m_watching_first_post_tags_isValid;
}

QString OAIGetUserExternalId_200_response_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUserExternalId_200_response_user::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_allowed_pm_usernames.size() > 0) {
        obj.insert(QString("allowed_pm_usernames"), ::OpenAPI::toJsonValue(m_allowed_pm_usernames));
    }
    if (m_avatar_template_isSet) {
        obj.insert(QString("avatar_template"), ::OpenAPI::toJsonValue(m_avatar_template));
    }
    if (m_badge_count_isSet) {
        obj.insert(QString("badge_count"), ::OpenAPI::toJsonValue(m_badge_count));
    }
    if (m_can_be_deleted_isSet) {
        obj.insert(QString("can_be_deleted"), ::OpenAPI::toJsonValue(m_can_be_deleted));
    }
    if (m_can_change_bio_isSet) {
        obj.insert(QString("can_change_bio"), ::OpenAPI::toJsonValue(m_can_change_bio));
    }
    if (m_can_change_location_isSet) {
        obj.insert(QString("can_change_location"), ::OpenAPI::toJsonValue(m_can_change_location));
    }
    if (m_can_change_tracking_preferences_isSet) {
        obj.insert(QString("can_change_tracking_preferences"), ::OpenAPI::toJsonValue(m_can_change_tracking_preferences));
    }
    if (m_can_change_website_isSet) {
        obj.insert(QString("can_change_website"), ::OpenAPI::toJsonValue(m_can_change_website));
    }
    if (m_can_delete_all_posts_isSet) {
        obj.insert(QString("can_delete_all_posts"), ::OpenAPI::toJsonValue(m_can_delete_all_posts));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_edit_email_isSet) {
        obj.insert(QString("can_edit_email"), ::OpenAPI::toJsonValue(m_can_edit_email));
    }
    if (m_can_edit_name_isSet) {
        obj.insert(QString("can_edit_name"), ::OpenAPI::toJsonValue(m_can_edit_name));
    }
    if (m_can_edit_username_isSet) {
        obj.insert(QString("can_edit_username"), ::OpenAPI::toJsonValue(m_can_edit_username));
    }
    if (m_can_ignore_user_isSet) {
        obj.insert(QString("can_ignore_user"), ::OpenAPI::toJsonValue(m_can_ignore_user));
    }
    if (m_can_mute_user_isSet) {
        obj.insert(QString("can_mute_user"), ::OpenAPI::toJsonValue(m_can_mute_user));
    }
    if (m_can_send_private_message_to_user_isSet) {
        obj.insert(QString("can_send_private_message_to_user"), ::OpenAPI::toJsonValue(m_can_send_private_message_to_user));
    }
    if (m_can_send_private_messages_isSet) {
        obj.insert(QString("can_send_private_messages"), ::OpenAPI::toJsonValue(m_can_send_private_messages));
    }
    if (m_can_upload_profile_header_isSet) {
        obj.insert(QString("can_upload_profile_header"), ::OpenAPI::toJsonValue(m_can_upload_profile_header));
    }
    if (m_can_upload_user_card_background_isSet) {
        obj.insert(QString("can_upload_user_card_background"), ::OpenAPI::toJsonValue(m_can_upload_user_card_background));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_fields.isSet()) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_featured_topic_isSet) {
        obj.insert(QString("featured_topic"), ::OpenAPI::toJsonValue(m_featured_topic));
    }
    if (m_featured_user_badge_ids.size() > 0) {
        obj.insert(QString("featured_user_badge_ids"), ::OpenAPI::toJsonValue(m_featured_user_badge_ids));
    }
    if (m_flair_bg_color_isSet) {
        obj.insert(QString("flair_bg_color"), ::OpenAPI::toJsonValue(m_flair_bg_color));
    }
    if (m_flair_color_isSet) {
        obj.insert(QString("flair_color"), ::OpenAPI::toJsonValue(m_flair_color));
    }
    if (m_flair_group_id_isSet) {
        obj.insert(QString("flair_group_id"), ::OpenAPI::toJsonValue(m_flair_group_id));
    }
    if (m_flair_name_isSet) {
        obj.insert(QString("flair_name"), ::OpenAPI::toJsonValue(m_flair_name));
    }
    if (m_flair_url_isSet) {
        obj.insert(QString("flair_url"), ::OpenAPI::toJsonValue(m_flair_url));
    }
    if (m_group_users.size() > 0) {
        obj.insert(QString("group_users"), ::OpenAPI::toJsonValue(m_group_users));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_has_title_badges_isSet) {
        obj.insert(QString("has_title_badges"), ::OpenAPI::toJsonValue(m_has_title_badges));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignored_isSet) {
        obj.insert(QString("ignored"), ::OpenAPI::toJsonValue(m_ignored));
    }
    if (m_ignored_usernames.size() > 0) {
        obj.insert(QString("ignored_usernames"), ::OpenAPI::toJsonValue(m_ignored_usernames));
    }
    if (m_invited_by_isSet) {
        obj.insert(QString("invited_by"), ::OpenAPI::toJsonValue(m_invited_by));
    }
    if (m_last_posted_at_isSet) {
        obj.insert(QString("last_posted_at"), ::OpenAPI::toJsonValue(m_last_posted_at));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_mailing_list_posts_per_day_isSet) {
        obj.insert(QString("mailing_list_posts_per_day"), ::OpenAPI::toJsonValue(m_mailing_list_posts_per_day));
    }
    if (m_moderator_isSet) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    if (m_muted_category_ids.size() > 0) {
        obj.insert(QString("muted_category_ids"), ::OpenAPI::toJsonValue(m_muted_category_ids));
    }
    if (m_muted_tags.size() > 0) {
        obj.insert(QString("muted_tags"), ::OpenAPI::toJsonValue(m_muted_tags));
    }
    if (m_muted_usernames.size() > 0) {
        obj.insert(QString("muted_usernames"), ::OpenAPI::toJsonValue(m_muted_usernames));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_count_isSet) {
        obj.insert(QString("pending_count"), ::OpenAPI::toJsonValue(m_pending_count));
    }
    if (m_pending_posts_count_isSet) {
        obj.insert(QString("pending_posts_count"), ::OpenAPI::toJsonValue(m_pending_posts_count));
    }
    if (m_post_count_isSet) {
        obj.insert(QString("post_count"), ::OpenAPI::toJsonValue(m_post_count));
    }
    if (m_primary_group_id_isSet) {
        obj.insert(QString("primary_group_id"), ::OpenAPI::toJsonValue(m_primary_group_id));
    }
    if (m_primary_group_name_isSet) {
        obj.insert(QString("primary_group_name"), ::OpenAPI::toJsonValue(m_primary_group_name));
    }
    if (m_profile_view_count_isSet) {
        obj.insert(QString("profile_view_count"), ::OpenAPI::toJsonValue(m_profile_view_count));
    }
    if (m_recent_time_read_isSet) {
        obj.insert(QString("recent_time_read"), ::OpenAPI::toJsonValue(m_recent_time_read));
    }
    if (m_regular_category_ids.size() > 0) {
        obj.insert(QString("regular_category_ids"), ::OpenAPI::toJsonValue(m_regular_category_ids));
    }
    if (m_second_factor_backup_enabled_isSet) {
        obj.insert(QString("second_factor_backup_enabled"), ::OpenAPI::toJsonValue(m_second_factor_backup_enabled));
    }
    if (m_second_factor_enabled_isSet) {
        obj.insert(QString("second_factor_enabled"), ::OpenAPI::toJsonValue(m_second_factor_enabled));
    }
    if (m_staged_isSet) {
        obj.insert(QString("staged"), ::OpenAPI::toJsonValue(m_staged));
    }
    if (m_system_avatar_template_isSet) {
        obj.insert(QString("system_avatar_template"), ::OpenAPI::toJsonValue(m_system_avatar_template));
    }
    if (m_system_avatar_upload_id_isSet) {
        obj.insert(QString("system_avatar_upload_id"), ::OpenAPI::toJsonValue(m_system_avatar_upload_id));
    }
    if (m_time_read_isSet) {
        obj.insert(QString("time_read"), ::OpenAPI::toJsonValue(m_time_read));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracked_category_ids.size() > 0) {
        obj.insert(QString("tracked_category_ids"), ::OpenAPI::toJsonValue(m_tracked_category_ids));
    }
    if (m_tracked_tags.size() > 0) {
        obj.insert(QString("tracked_tags"), ::OpenAPI::toJsonValue(m_tracked_tags));
    }
    if (m_trust_level_isSet) {
        obj.insert(QString("trust_level"), ::OpenAPI::toJsonValue(m_trust_level));
    }
    if (m_uploaded_avatar_id_isSet) {
        obj.insert(QString("uploaded_avatar_id"), ::OpenAPI::toJsonValue(m_uploaded_avatar_id));
    }
    if (m_use_logo_small_as_avatar_isSet) {
        obj.insert(QString("use_logo_small_as_avatar"), ::OpenAPI::toJsonValue(m_use_logo_small_as_avatar));
    }
    if (m_user_api_keys_isSet) {
        obj.insert(QString("user_api_keys"), ::OpenAPI::toJsonValue(m_user_api_keys));
    }
    if (m_user_auth_tokens.size() > 0) {
        obj.insert(QString("user_auth_tokens"), ::OpenAPI::toJsonValue(m_user_auth_tokens));
    }
    if (m_user_fields.isSet()) {
        obj.insert(QString("user_fields"), ::OpenAPI::toJsonValue(m_user_fields));
    }
    if (m_user_notification_schedule.isSet()) {
        obj.insert(QString("user_notification_schedule"), ::OpenAPI::toJsonValue(m_user_notification_schedule));
    }
    if (m_user_option.isSet()) {
        obj.insert(QString("user_option"), ::OpenAPI::toJsonValue(m_user_option));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_watched_category_ids.size() > 0) {
        obj.insert(QString("watched_category_ids"), ::OpenAPI::toJsonValue(m_watched_category_ids));
    }
    if (m_watched_first_post_category_ids.size() > 0) {
        obj.insert(QString("watched_first_post_category_ids"), ::OpenAPI::toJsonValue(m_watched_first_post_category_ids));
    }
    if (m_watched_tags.size() > 0) {
        obj.insert(QString("watched_tags"), ::OpenAPI::toJsonValue(m_watched_tags));
    }
    if (m_watching_first_post_tags.size() > 0) {
        obj.insert(QString("watching_first_post_tags"), ::OpenAPI::toJsonValue(m_watching_first_post_tags));
    }
    return obj;
}

bool OAIGetUserExternalId_200_response_user::isAdmin() const {
    return m_admin;
}
void OAIGetUserExternalId_200_response_user::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_admin_Valid() const{
    return m_admin_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getAllowedPmUsernames() const {
    return m_allowed_pm_usernames;
}
void OAIGetUserExternalId_200_response_user::setAllowedPmUsernames(const QList<QJsonValue> &allowed_pm_usernames) {
    m_allowed_pm_usernames = allowed_pm_usernames;
    m_allowed_pm_usernames_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_allowed_pm_usernames_Set() const{
    return m_allowed_pm_usernames_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_allowed_pm_usernames_Valid() const{
    return m_allowed_pm_usernames_isValid;
}

QString OAIGetUserExternalId_200_response_user::getAvatarTemplate() const {
    return m_avatar_template;
}
void OAIGetUserExternalId_200_response_user::setAvatarTemplate(const QString &avatar_template) {
    m_avatar_template = avatar_template;
    m_avatar_template_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_avatar_template_Set() const{
    return m_avatar_template_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_avatar_template_Valid() const{
    return m_avatar_template_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getBadgeCount() const {
    return m_badge_count;
}
void OAIGetUserExternalId_200_response_user::setBadgeCount(const qint32 &badge_count) {
    m_badge_count = badge_count;
    m_badge_count_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_badge_count_Set() const{
    return m_badge_count_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_badge_count_Valid() const{
    return m_badge_count_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanBeDeleted() const {
    return m_can_be_deleted;
}
void OAIGetUserExternalId_200_response_user::setCanBeDeleted(const bool &can_be_deleted) {
    m_can_be_deleted = can_be_deleted;
    m_can_be_deleted_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_be_deleted_Set() const{
    return m_can_be_deleted_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_be_deleted_Valid() const{
    return m_can_be_deleted_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanChangeBio() const {
    return m_can_change_bio;
}
void OAIGetUserExternalId_200_response_user::setCanChangeBio(const bool &can_change_bio) {
    m_can_change_bio = can_change_bio;
    m_can_change_bio_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_bio_Set() const{
    return m_can_change_bio_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_bio_Valid() const{
    return m_can_change_bio_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanChangeLocation() const {
    return m_can_change_location;
}
void OAIGetUserExternalId_200_response_user::setCanChangeLocation(const bool &can_change_location) {
    m_can_change_location = can_change_location;
    m_can_change_location_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_location_Set() const{
    return m_can_change_location_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_location_Valid() const{
    return m_can_change_location_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanChangeTrackingPreferences() const {
    return m_can_change_tracking_preferences;
}
void OAIGetUserExternalId_200_response_user::setCanChangeTrackingPreferences(const bool &can_change_tracking_preferences) {
    m_can_change_tracking_preferences = can_change_tracking_preferences;
    m_can_change_tracking_preferences_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_tracking_preferences_Set() const{
    return m_can_change_tracking_preferences_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_tracking_preferences_Valid() const{
    return m_can_change_tracking_preferences_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanChangeWebsite() const {
    return m_can_change_website;
}
void OAIGetUserExternalId_200_response_user::setCanChangeWebsite(const bool &can_change_website) {
    m_can_change_website = can_change_website;
    m_can_change_website_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_website_Set() const{
    return m_can_change_website_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_change_website_Valid() const{
    return m_can_change_website_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanDeleteAllPosts() const {
    return m_can_delete_all_posts;
}
void OAIGetUserExternalId_200_response_user::setCanDeleteAllPosts(const bool &can_delete_all_posts) {
    m_can_delete_all_posts = can_delete_all_posts;
    m_can_delete_all_posts_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_delete_all_posts_Set() const{
    return m_can_delete_all_posts_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_delete_all_posts_Valid() const{
    return m_can_delete_all_posts_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanEdit() const {
    return m_can_edit;
}
void OAIGetUserExternalId_200_response_user::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanEditEmail() const {
    return m_can_edit_email;
}
void OAIGetUserExternalId_200_response_user::setCanEditEmail(const bool &can_edit_email) {
    m_can_edit_email = can_edit_email;
    m_can_edit_email_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_email_Set() const{
    return m_can_edit_email_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_email_Valid() const{
    return m_can_edit_email_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanEditName() const {
    return m_can_edit_name;
}
void OAIGetUserExternalId_200_response_user::setCanEditName(const bool &can_edit_name) {
    m_can_edit_name = can_edit_name;
    m_can_edit_name_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_name_Set() const{
    return m_can_edit_name_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_name_Valid() const{
    return m_can_edit_name_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanEditUsername() const {
    return m_can_edit_username;
}
void OAIGetUserExternalId_200_response_user::setCanEditUsername(const bool &can_edit_username) {
    m_can_edit_username = can_edit_username;
    m_can_edit_username_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_username_Set() const{
    return m_can_edit_username_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_edit_username_Valid() const{
    return m_can_edit_username_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanIgnoreUser() const {
    return m_can_ignore_user;
}
void OAIGetUserExternalId_200_response_user::setCanIgnoreUser(const bool &can_ignore_user) {
    m_can_ignore_user = can_ignore_user;
    m_can_ignore_user_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_ignore_user_Set() const{
    return m_can_ignore_user_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_ignore_user_Valid() const{
    return m_can_ignore_user_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanMuteUser() const {
    return m_can_mute_user;
}
void OAIGetUserExternalId_200_response_user::setCanMuteUser(const bool &can_mute_user) {
    m_can_mute_user = can_mute_user;
    m_can_mute_user_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_mute_user_Set() const{
    return m_can_mute_user_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_mute_user_Valid() const{
    return m_can_mute_user_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanSendPrivateMessageToUser() const {
    return m_can_send_private_message_to_user;
}
void OAIGetUserExternalId_200_response_user::setCanSendPrivateMessageToUser(const bool &can_send_private_message_to_user) {
    m_can_send_private_message_to_user = can_send_private_message_to_user;
    m_can_send_private_message_to_user_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_send_private_message_to_user_Set() const{
    return m_can_send_private_message_to_user_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_send_private_message_to_user_Valid() const{
    return m_can_send_private_message_to_user_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanSendPrivateMessages() const {
    return m_can_send_private_messages;
}
void OAIGetUserExternalId_200_response_user::setCanSendPrivateMessages(const bool &can_send_private_messages) {
    m_can_send_private_messages = can_send_private_messages;
    m_can_send_private_messages_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_send_private_messages_Set() const{
    return m_can_send_private_messages_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_send_private_messages_Valid() const{
    return m_can_send_private_messages_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanUploadProfileHeader() const {
    return m_can_upload_profile_header;
}
void OAIGetUserExternalId_200_response_user::setCanUploadProfileHeader(const bool &can_upload_profile_header) {
    m_can_upload_profile_header = can_upload_profile_header;
    m_can_upload_profile_header_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_upload_profile_header_Set() const{
    return m_can_upload_profile_header_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_upload_profile_header_Valid() const{
    return m_can_upload_profile_header_isValid;
}

bool OAIGetUserExternalId_200_response_user::isCanUploadUserCardBackground() const {
    return m_can_upload_user_card_background;
}
void OAIGetUserExternalId_200_response_user::setCanUploadUserCardBackground(const bool &can_upload_user_card_background) {
    m_can_upload_user_card_background = can_upload_user_card_background;
    m_can_upload_user_card_background_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_can_upload_user_card_background_Set() const{
    return m_can_upload_user_card_background_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_can_upload_user_card_background_Valid() const{
    return m_can_upload_user_card_background_isValid;
}

QString OAIGetUserExternalId_200_response_user::getCreatedAt() const {
    return m_created_at;
}
void OAIGetUserExternalId_200_response_user::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIGetUserExternalId_200_response_user_custom_fields OAIGetUserExternalId_200_response_user::getCustomFields() const {
    return m_custom_fields;
}
void OAIGetUserExternalId_200_response_user::setCustomFields(const OAIGetUserExternalId_200_response_user_custom_fields &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIGetUserExternalId_200_response_user::getFeaturedTopic() const {
    return m_featured_topic;
}
void OAIGetUserExternalId_200_response_user::setFeaturedTopic(const QString &featured_topic) {
    m_featured_topic = featured_topic;
    m_featured_topic_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_featured_topic_Set() const{
    return m_featured_topic_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_featured_topic_Valid() const{
    return m_featured_topic_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getFeaturedUserBadgeIds() const {
    return m_featured_user_badge_ids;
}
void OAIGetUserExternalId_200_response_user::setFeaturedUserBadgeIds(const QList<QJsonValue> &featured_user_badge_ids) {
    m_featured_user_badge_ids = featured_user_badge_ids;
    m_featured_user_badge_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_featured_user_badge_ids_Set() const{
    return m_featured_user_badge_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_featured_user_badge_ids_Valid() const{
    return m_featured_user_badge_ids_isValid;
}

QString OAIGetUserExternalId_200_response_user::getFlairBgColor() const {
    return m_flair_bg_color;
}
void OAIGetUserExternalId_200_response_user::setFlairBgColor(const QString &flair_bg_color) {
    m_flair_bg_color = flair_bg_color;
    m_flair_bg_color_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_flair_bg_color_Set() const{
    return m_flair_bg_color_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_flair_bg_color_Valid() const{
    return m_flair_bg_color_isValid;
}

QString OAIGetUserExternalId_200_response_user::getFlairColor() const {
    return m_flair_color;
}
void OAIGetUserExternalId_200_response_user::setFlairColor(const QString &flair_color) {
    m_flair_color = flair_color;
    m_flair_color_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_flair_color_Set() const{
    return m_flair_color_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_flair_color_Valid() const{
    return m_flair_color_isValid;
}

QString OAIGetUserExternalId_200_response_user::getFlairGroupId() const {
    return m_flair_group_id;
}
void OAIGetUserExternalId_200_response_user::setFlairGroupId(const QString &flair_group_id) {
    m_flair_group_id = flair_group_id;
    m_flair_group_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_flair_group_id_Set() const{
    return m_flair_group_id_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_flair_group_id_Valid() const{
    return m_flair_group_id_isValid;
}

QString OAIGetUserExternalId_200_response_user::getFlairName() const {
    return m_flair_name;
}
void OAIGetUserExternalId_200_response_user::setFlairName(const QString &flair_name) {
    m_flair_name = flair_name;
    m_flair_name_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_flair_name_Set() const{
    return m_flair_name_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_flair_name_Valid() const{
    return m_flair_name_isValid;
}

QString OAIGetUserExternalId_200_response_user::getFlairUrl() const {
    return m_flair_url;
}
void OAIGetUserExternalId_200_response_user::setFlairUrl(const QString &flair_url) {
    m_flair_url = flair_url;
    m_flair_url_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_flair_url_Set() const{
    return m_flair_url_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_flair_url_Valid() const{
    return m_flair_url_isValid;
}

QList<OAIGetUserExternalId_200_response_user_group_users_inner> OAIGetUserExternalId_200_response_user::getGroupUsers() const {
    return m_group_users;
}
void OAIGetUserExternalId_200_response_user::setGroupUsers(const QList<OAIGetUserExternalId_200_response_user_group_users_inner> &group_users) {
    m_group_users = group_users;
    m_group_users_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_group_users_Set() const{
    return m_group_users_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_group_users_Valid() const{
    return m_group_users_isValid;
}

QList<OAIAdminGetUser_200_response_groups_inner> OAIGetUserExternalId_200_response_user::getGroups() const {
    return m_groups;
}
void OAIGetUserExternalId_200_response_user::setGroups(const QList<OAIAdminGetUser_200_response_groups_inner> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIGetUserExternalId_200_response_user::isHasTitleBadges() const {
    return m_has_title_badges;
}
void OAIGetUserExternalId_200_response_user::setHasTitleBadges(const bool &has_title_badges) {
    m_has_title_badges = has_title_badges;
    m_has_title_badges_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_has_title_badges_Set() const{
    return m_has_title_badges_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_has_title_badges_Valid() const{
    return m_has_title_badges_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getId() const {
    return m_id;
}
void OAIGetUserExternalId_200_response_user::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetUserExternalId_200_response_user::isIgnored() const {
    return m_ignored;
}
void OAIGetUserExternalId_200_response_user::setIgnored(const bool &ignored) {
    m_ignored = ignored;
    m_ignored_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_ignored_Set() const{
    return m_ignored_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_ignored_Valid() const{
    return m_ignored_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getIgnoredUsernames() const {
    return m_ignored_usernames;
}
void OAIGetUserExternalId_200_response_user::setIgnoredUsernames(const QList<QJsonValue> &ignored_usernames) {
    m_ignored_usernames = ignored_usernames;
    m_ignored_usernames_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_ignored_usernames_Set() const{
    return m_ignored_usernames_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_ignored_usernames_Valid() const{
    return m_ignored_usernames_isValid;
}

QString OAIGetUserExternalId_200_response_user::getInvitedBy() const {
    return m_invited_by;
}
void OAIGetUserExternalId_200_response_user::setInvitedBy(const QString &invited_by) {
    m_invited_by = invited_by;
    m_invited_by_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_invited_by_Set() const{
    return m_invited_by_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_invited_by_Valid() const{
    return m_invited_by_isValid;
}

QString OAIGetUserExternalId_200_response_user::getLastPostedAt() const {
    return m_last_posted_at;
}
void OAIGetUserExternalId_200_response_user::setLastPostedAt(const QString &last_posted_at) {
    m_last_posted_at = last_posted_at;
    m_last_posted_at_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_last_posted_at_Set() const{
    return m_last_posted_at_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_last_posted_at_Valid() const{
    return m_last_posted_at_isValid;
}

QString OAIGetUserExternalId_200_response_user::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIGetUserExternalId_200_response_user::setLastSeenAt(const QString &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIGetUserExternalId_200_response_user::getLocale() const {
    return m_locale;
}
void OAIGetUserExternalId_200_response_user::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getMailingListPostsPerDay() const {
    return m_mailing_list_posts_per_day;
}
void OAIGetUserExternalId_200_response_user::setMailingListPostsPerDay(const qint32 &mailing_list_posts_per_day) {
    m_mailing_list_posts_per_day = mailing_list_posts_per_day;
    m_mailing_list_posts_per_day_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_mailing_list_posts_per_day_Set() const{
    return m_mailing_list_posts_per_day_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_mailing_list_posts_per_day_Valid() const{
    return m_mailing_list_posts_per_day_isValid;
}

bool OAIGetUserExternalId_200_response_user::isModerator() const {
    return m_moderator;
}
void OAIGetUserExternalId_200_response_user::setModerator(const bool &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_moderator_Valid() const{
    return m_moderator_isValid;
}

bool OAIGetUserExternalId_200_response_user::isMuted() const {
    return m_muted;
}
void OAIGetUserExternalId_200_response_user::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_muted_Valid() const{
    return m_muted_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getMutedCategoryIds() const {
    return m_muted_category_ids;
}
void OAIGetUserExternalId_200_response_user::setMutedCategoryIds(const QList<QJsonValue> &muted_category_ids) {
    m_muted_category_ids = muted_category_ids;
    m_muted_category_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_muted_category_ids_Set() const{
    return m_muted_category_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_muted_category_ids_Valid() const{
    return m_muted_category_ids_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getMutedTags() const {
    return m_muted_tags;
}
void OAIGetUserExternalId_200_response_user::setMutedTags(const QList<QJsonValue> &muted_tags) {
    m_muted_tags = muted_tags;
    m_muted_tags_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_muted_tags_Set() const{
    return m_muted_tags_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_muted_tags_Valid() const{
    return m_muted_tags_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getMutedUsernames() const {
    return m_muted_usernames;
}
void OAIGetUserExternalId_200_response_user::setMutedUsernames(const QList<QJsonValue> &muted_usernames) {
    m_muted_usernames = muted_usernames;
    m_muted_usernames_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_muted_usernames_Set() const{
    return m_muted_usernames_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_muted_usernames_Valid() const{
    return m_muted_usernames_isValid;
}

QString OAIGetUserExternalId_200_response_user::getName() const {
    return m_name;
}
void OAIGetUserExternalId_200_response_user::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getPendingCount() const {
    return m_pending_count;
}
void OAIGetUserExternalId_200_response_user::setPendingCount(const qint32 &pending_count) {
    m_pending_count = pending_count;
    m_pending_count_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_pending_count_Set() const{
    return m_pending_count_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_pending_count_Valid() const{
    return m_pending_count_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getPendingPostsCount() const {
    return m_pending_posts_count;
}
void OAIGetUserExternalId_200_response_user::setPendingPostsCount(const qint32 &pending_posts_count) {
    m_pending_posts_count = pending_posts_count;
    m_pending_posts_count_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_pending_posts_count_Set() const{
    return m_pending_posts_count_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_pending_posts_count_Valid() const{
    return m_pending_posts_count_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getPostCount() const {
    return m_post_count;
}
void OAIGetUserExternalId_200_response_user::setPostCount(const qint32 &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_post_count_Valid() const{
    return m_post_count_isValid;
}

QString OAIGetUserExternalId_200_response_user::getPrimaryGroupId() const {
    return m_primary_group_id;
}
void OAIGetUserExternalId_200_response_user::setPrimaryGroupId(const QString &primary_group_id) {
    m_primary_group_id = primary_group_id;
    m_primary_group_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_primary_group_id_Set() const{
    return m_primary_group_id_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_primary_group_id_Valid() const{
    return m_primary_group_id_isValid;
}

QString OAIGetUserExternalId_200_response_user::getPrimaryGroupName() const {
    return m_primary_group_name;
}
void OAIGetUserExternalId_200_response_user::setPrimaryGroupName(const QString &primary_group_name) {
    m_primary_group_name = primary_group_name;
    m_primary_group_name_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_primary_group_name_Set() const{
    return m_primary_group_name_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_primary_group_name_Valid() const{
    return m_primary_group_name_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getProfileViewCount() const {
    return m_profile_view_count;
}
void OAIGetUserExternalId_200_response_user::setProfileViewCount(const qint32 &profile_view_count) {
    m_profile_view_count = profile_view_count;
    m_profile_view_count_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_profile_view_count_Set() const{
    return m_profile_view_count_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_profile_view_count_Valid() const{
    return m_profile_view_count_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getRecentTimeRead() const {
    return m_recent_time_read;
}
void OAIGetUserExternalId_200_response_user::setRecentTimeRead(const qint32 &recent_time_read) {
    m_recent_time_read = recent_time_read;
    m_recent_time_read_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_recent_time_read_Set() const{
    return m_recent_time_read_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_recent_time_read_Valid() const{
    return m_recent_time_read_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getRegularCategoryIds() const {
    return m_regular_category_ids;
}
void OAIGetUserExternalId_200_response_user::setRegularCategoryIds(const QList<QJsonValue> &regular_category_ids) {
    m_regular_category_ids = regular_category_ids;
    m_regular_category_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_regular_category_ids_Set() const{
    return m_regular_category_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_regular_category_ids_Valid() const{
    return m_regular_category_ids_isValid;
}

bool OAIGetUserExternalId_200_response_user::isSecondFactorBackupEnabled() const {
    return m_second_factor_backup_enabled;
}
void OAIGetUserExternalId_200_response_user::setSecondFactorBackupEnabled(const bool &second_factor_backup_enabled) {
    m_second_factor_backup_enabled = second_factor_backup_enabled;
    m_second_factor_backup_enabled_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_second_factor_backup_enabled_Set() const{
    return m_second_factor_backup_enabled_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_second_factor_backup_enabled_Valid() const{
    return m_second_factor_backup_enabled_isValid;
}

bool OAIGetUserExternalId_200_response_user::isSecondFactorEnabled() const {
    return m_second_factor_enabled;
}
void OAIGetUserExternalId_200_response_user::setSecondFactorEnabled(const bool &second_factor_enabled) {
    m_second_factor_enabled = second_factor_enabled;
    m_second_factor_enabled_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_second_factor_enabled_Set() const{
    return m_second_factor_enabled_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_second_factor_enabled_Valid() const{
    return m_second_factor_enabled_isValid;
}

bool OAIGetUserExternalId_200_response_user::isStaged() const {
    return m_staged;
}
void OAIGetUserExternalId_200_response_user::setStaged(const bool &staged) {
    m_staged = staged;
    m_staged_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_staged_Set() const{
    return m_staged_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_staged_Valid() const{
    return m_staged_isValid;
}

QString OAIGetUserExternalId_200_response_user::getSystemAvatarTemplate() const {
    return m_system_avatar_template;
}
void OAIGetUserExternalId_200_response_user::setSystemAvatarTemplate(const QString &system_avatar_template) {
    m_system_avatar_template = system_avatar_template;
    m_system_avatar_template_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_system_avatar_template_Set() const{
    return m_system_avatar_template_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_system_avatar_template_Valid() const{
    return m_system_avatar_template_isValid;
}

QString OAIGetUserExternalId_200_response_user::getSystemAvatarUploadId() const {
    return m_system_avatar_upload_id;
}
void OAIGetUserExternalId_200_response_user::setSystemAvatarUploadId(const QString &system_avatar_upload_id) {
    m_system_avatar_upload_id = system_avatar_upload_id;
    m_system_avatar_upload_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_system_avatar_upload_id_Set() const{
    return m_system_avatar_upload_id_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_system_avatar_upload_id_Valid() const{
    return m_system_avatar_upload_id_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getTimeRead() const {
    return m_time_read;
}
void OAIGetUserExternalId_200_response_user::setTimeRead(const qint32 &time_read) {
    m_time_read = time_read;
    m_time_read_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_time_read_Set() const{
    return m_time_read_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_time_read_Valid() const{
    return m_time_read_isValid;
}

QString OAIGetUserExternalId_200_response_user::getTitle() const {
    return m_title;
}
void OAIGetUserExternalId_200_response_user::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_title_Valid() const{
    return m_title_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getTrackedCategoryIds() const {
    return m_tracked_category_ids;
}
void OAIGetUserExternalId_200_response_user::setTrackedCategoryIds(const QList<QJsonValue> &tracked_category_ids) {
    m_tracked_category_ids = tracked_category_ids;
    m_tracked_category_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_tracked_category_ids_Set() const{
    return m_tracked_category_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_tracked_category_ids_Valid() const{
    return m_tracked_category_ids_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getTrackedTags() const {
    return m_tracked_tags;
}
void OAIGetUserExternalId_200_response_user::setTrackedTags(const QList<QJsonValue> &tracked_tags) {
    m_tracked_tags = tracked_tags;
    m_tracked_tags_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_tracked_tags_Set() const{
    return m_tracked_tags_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_tracked_tags_Valid() const{
    return m_tracked_tags_isValid;
}

qint32 OAIGetUserExternalId_200_response_user::getTrustLevel() const {
    return m_trust_level;
}
void OAIGetUserExternalId_200_response_user::setTrustLevel(const qint32 &trust_level) {
    m_trust_level = trust_level;
    m_trust_level_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_trust_level_Set() const{
    return m_trust_level_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_trust_level_Valid() const{
    return m_trust_level_isValid;
}

QString OAIGetUserExternalId_200_response_user::getUploadedAvatarId() const {
    return m_uploaded_avatar_id;
}
void OAIGetUserExternalId_200_response_user::setUploadedAvatarId(const QString &uploaded_avatar_id) {
    m_uploaded_avatar_id = uploaded_avatar_id;
    m_uploaded_avatar_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_uploaded_avatar_id_Set() const{
    return m_uploaded_avatar_id_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_uploaded_avatar_id_Valid() const{
    return m_uploaded_avatar_id_isValid;
}

bool OAIGetUserExternalId_200_response_user::isUseLogoSmallAsAvatar() const {
    return m_use_logo_small_as_avatar;
}
void OAIGetUserExternalId_200_response_user::setUseLogoSmallAsAvatar(const bool &use_logo_small_as_avatar) {
    m_use_logo_small_as_avatar = use_logo_small_as_avatar;
    m_use_logo_small_as_avatar_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_use_logo_small_as_avatar_Set() const{
    return m_use_logo_small_as_avatar_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_use_logo_small_as_avatar_Valid() const{
    return m_use_logo_small_as_avatar_isValid;
}

QString OAIGetUserExternalId_200_response_user::getUserApiKeys() const {
    return m_user_api_keys;
}
void OAIGetUserExternalId_200_response_user::setUserApiKeys(const QString &user_api_keys) {
    m_user_api_keys = user_api_keys;
    m_user_api_keys_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_user_api_keys_Set() const{
    return m_user_api_keys_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_user_api_keys_Valid() const{
    return m_user_api_keys_isValid;
}

QList<OAIGetUserExternalId_200_response_user_user_auth_tokens_inner> OAIGetUserExternalId_200_response_user::getUserAuthTokens() const {
    return m_user_auth_tokens;
}
void OAIGetUserExternalId_200_response_user::setUserAuthTokens(const QList<OAIGetUserExternalId_200_response_user_user_auth_tokens_inner> &user_auth_tokens) {
    m_user_auth_tokens = user_auth_tokens;
    m_user_auth_tokens_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_user_auth_tokens_Set() const{
    return m_user_auth_tokens_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_user_auth_tokens_Valid() const{
    return m_user_auth_tokens_isValid;
}

OAIGetUserExternalId_200_response_user_user_fields OAIGetUserExternalId_200_response_user::getUserFields() const {
    return m_user_fields;
}
void OAIGetUserExternalId_200_response_user::setUserFields(const OAIGetUserExternalId_200_response_user_user_fields &user_fields) {
    m_user_fields = user_fields;
    m_user_fields_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_user_fields_Set() const{
    return m_user_fields_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_user_fields_Valid() const{
    return m_user_fields_isValid;
}

OAIGetUserExternalId_200_response_user_user_notification_schedule OAIGetUserExternalId_200_response_user::getUserNotificationSchedule() const {
    return m_user_notification_schedule;
}
void OAIGetUserExternalId_200_response_user::setUserNotificationSchedule(const OAIGetUserExternalId_200_response_user_user_notification_schedule &user_notification_schedule) {
    m_user_notification_schedule = user_notification_schedule;
    m_user_notification_schedule_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_user_notification_schedule_Set() const{
    return m_user_notification_schedule_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_user_notification_schedule_Valid() const{
    return m_user_notification_schedule_isValid;
}

OAIGetUserExternalId_200_response_user_user_option OAIGetUserExternalId_200_response_user::getUserOption() const {
    return m_user_option;
}
void OAIGetUserExternalId_200_response_user::setUserOption(const OAIGetUserExternalId_200_response_user_user_option &user_option) {
    m_user_option = user_option;
    m_user_option_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_user_option_Set() const{
    return m_user_option_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_user_option_Valid() const{
    return m_user_option_isValid;
}

QString OAIGetUserExternalId_200_response_user::getUsername() const {
    return m_username;
}
void OAIGetUserExternalId_200_response_user::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_username_Valid() const{
    return m_username_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getWatchedCategoryIds() const {
    return m_watched_category_ids;
}
void OAIGetUserExternalId_200_response_user::setWatchedCategoryIds(const QList<QJsonValue> &watched_category_ids) {
    m_watched_category_ids = watched_category_ids;
    m_watched_category_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_watched_category_ids_Set() const{
    return m_watched_category_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_watched_category_ids_Valid() const{
    return m_watched_category_ids_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getWatchedFirstPostCategoryIds() const {
    return m_watched_first_post_category_ids;
}
void OAIGetUserExternalId_200_response_user::setWatchedFirstPostCategoryIds(const QList<QJsonValue> &watched_first_post_category_ids) {
    m_watched_first_post_category_ids = watched_first_post_category_ids;
    m_watched_first_post_category_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_watched_first_post_category_ids_Set() const{
    return m_watched_first_post_category_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_watched_first_post_category_ids_Valid() const{
    return m_watched_first_post_category_ids_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getWatchedTags() const {
    return m_watched_tags;
}
void OAIGetUserExternalId_200_response_user::setWatchedTags(const QList<QJsonValue> &watched_tags) {
    m_watched_tags = watched_tags;
    m_watched_tags_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_watched_tags_Set() const{
    return m_watched_tags_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_watched_tags_Valid() const{
    return m_watched_tags_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user::getWatchingFirstPostTags() const {
    return m_watching_first_post_tags;
}
void OAIGetUserExternalId_200_response_user::setWatchingFirstPostTags(const QList<QJsonValue> &watching_first_post_tags) {
    m_watching_first_post_tags = watching_first_post_tags;
    m_watching_first_post_tags_isSet = true;
}

bool OAIGetUserExternalId_200_response_user::is_watching_first_post_tags_Set() const{
    return m_watching_first_post_tags_isSet;
}

bool OAIGetUserExternalId_200_response_user::is_watching_first_post_tags_Valid() const{
    return m_watching_first_post_tags_isValid;
}

bool OAIGetUserExternalId_200_response_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_pm_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_tracking_preferences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_all_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_ignore_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_mute_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_private_message_to_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_send_private_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_upload_profile_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_upload_user_card_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_user_badge_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_bg_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_title_badges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_posted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_list_posts_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_posts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_time_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_factor_backup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_factor_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_avatar_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_avatar_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_avatar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_logo_small_as_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_api_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_auth_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_notification_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_first_post_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watching_first_post_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUserExternalId_200_response_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_isValid && m_allowed_pm_usernames_isValid && m_avatar_template_isValid && m_badge_count_isValid && m_can_be_deleted_isValid && m_can_change_bio_isValid && m_can_change_location_isValid && m_can_change_tracking_preferences_isValid && m_can_change_website_isValid && m_can_delete_all_posts_isValid && m_can_edit_isValid && m_can_edit_email_isValid && m_can_edit_name_isValid && m_can_edit_username_isValid && m_can_ignore_user_isValid && m_can_mute_user_isValid && m_can_send_private_message_to_user_isValid && m_can_send_private_messages_isValid && m_can_upload_profile_header_isValid && m_can_upload_user_card_background_isValid && m_created_at_isValid && m_custom_fields_isValid && m_featured_topic_isValid && m_featured_user_badge_ids_isValid && m_flair_bg_color_isValid && m_flair_color_isValid && m_flair_group_id_isValid && m_flair_name_isValid && m_flair_url_isValid && m_group_users_isValid && m_groups_isValid && m_has_title_badges_isValid && m_id_isValid && m_ignored_isValid && m_ignored_usernames_isValid && m_invited_by_isValid && m_last_posted_at_isValid && m_last_seen_at_isValid && m_locale_isValid && m_mailing_list_posts_per_day_isValid && m_moderator_isValid && m_muted_isValid && m_muted_category_ids_isValid && m_muted_tags_isValid && m_muted_usernames_isValid && m_name_isValid && m_pending_count_isValid && m_post_count_isValid && m_primary_group_id_isValid && m_primary_group_name_isValid && m_profile_view_count_isValid && m_recent_time_read_isValid && m_regular_category_ids_isValid && m_second_factor_enabled_isValid && m_staged_isValid && m_system_avatar_template_isValid && m_system_avatar_upload_id_isValid && m_time_read_isValid && m_title_isValid && m_tracked_category_ids_isValid && m_tracked_tags_isValid && m_trust_level_isValid && m_uploaded_avatar_id_isValid && m_use_logo_small_as_avatar_isValid && m_user_api_keys_isValid && m_user_auth_tokens_isValid && m_user_notification_schedule_isValid && m_user_option_isValid && m_username_isValid && m_watched_category_ids_isValid && m_watched_first_post_category_ids_isValid && m_watched_tags_isValid && m_watching_first_post_tags_isValid && true;
}

} // namespace OpenAPI
