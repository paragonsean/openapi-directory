/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminListBadges_200_response_badge_groupings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminListBadges_200_response_badge_groupings_inner::OAIAdminListBadges_200_response_badge_groupings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminListBadges_200_response_badge_groupings_inner::OAIAdminListBadges_200_response_badge_groupings_inner() {
    this->initializeModel();
}

OAIAdminListBadges_200_response_badge_groupings_inner::~OAIAdminListBadges_200_response_badge_groupings_inner() {}

void OAIAdminListBadges_200_response_badge_groupings_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;
}

void OAIAdminListBadges_200_response_badge_groupings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminListBadges_200_response_badge_groupings_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;
}

QString OAIAdminListBadges_200_response_badge_groupings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminListBadges_200_response_badge_groupings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    return obj;
}

QString OAIAdminListBadges_200_response_badge_groupings_inner::getDescription() const {
    return m_description;
}
void OAIAdminListBadges_200_response_badge_groupings_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAdminListBadges_200_response_badge_groupings_inner::getId() const {
    return m_id;
}
void OAIAdminListBadges_200_response_badge_groupings_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdminListBadges_200_response_badge_groupings_inner::getName() const {
    return m_name;
}
void OAIAdminListBadges_200_response_badge_groupings_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAdminListBadges_200_response_badge_groupings_inner::getPosition() const {
    return m_position;
}
void OAIAdminListBadges_200_response_badge_groupings_inner::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::isSystem() const {
    return m_system;
}
void OAIAdminListBadges_200_response_badge_groupings_inner::setSystem(const bool &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_system_Set() const{
    return m_system_isSet;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::is_system_Valid() const{
    return m_system_isValid;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminListBadges_200_response_badge_groupings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_id_isValid && m_name_isValid && m_position_isValid && m_system_isValid && true;
}

} // namespace OpenAPI
