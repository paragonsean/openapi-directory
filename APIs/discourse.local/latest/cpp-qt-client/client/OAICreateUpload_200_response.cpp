/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpload_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpload_200_response::OAICreateUpload_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpload_200_response::OAICreateUpload_200_response() {
    this->initializeModel();
}

OAICreateUpload_200_response::~OAICreateUpload_200_response() {}

void OAICreateUpload_200_response::initializeModel() {

    m_dominant_color_isSet = false;
    m_dominant_color_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_filesize_isSet = false;
    m_filesize_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_human_filesize_isSet = false;
    m_human_filesize_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_filename_isSet = false;
    m_original_filename_isValid = false;

    m_retain_hours_isSet = false;
    m_retain_hours_isValid = false;

    m_short_path_isSet = false;
    m_short_path_isValid = false;

    m_short_url_isSet = false;
    m_short_url_isValid = false;

    m_thumbnail_height_isSet = false;
    m_thumbnail_height_isValid = false;

    m_thumbnail_width_isSet = false;
    m_thumbnail_width_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICreateUpload_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpload_200_response::fromJsonObject(QJsonObject json) {

    m_dominant_color_isValid = ::OpenAPI::fromJsonValue(m_dominant_color, json[QString("dominant_color")]);
    m_dominant_color_isSet = !json[QString("dominant_color")].isNull() && m_dominant_color_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_filesize_isValid = ::OpenAPI::fromJsonValue(m_filesize, json[QString("filesize")]);
    m_filesize_isSet = !json[QString("filesize")].isNull() && m_filesize_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_human_filesize_isValid = ::OpenAPI::fromJsonValue(m_human_filesize, json[QString("human_filesize")]);
    m_human_filesize_isSet = !json[QString("human_filesize")].isNull() && m_human_filesize_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_filename_isValid = ::OpenAPI::fromJsonValue(m_original_filename, json[QString("original_filename")]);
    m_original_filename_isSet = !json[QString("original_filename")].isNull() && m_original_filename_isValid;

    m_retain_hours_isValid = ::OpenAPI::fromJsonValue(m_retain_hours, json[QString("retain_hours")]);
    m_retain_hours_isSet = !json[QString("retain_hours")].isNull() && m_retain_hours_isValid;

    m_short_path_isValid = ::OpenAPI::fromJsonValue(m_short_path, json[QString("short_path")]);
    m_short_path_isSet = !json[QString("short_path")].isNull() && m_short_path_isValid;

    m_short_url_isValid = ::OpenAPI::fromJsonValue(m_short_url, json[QString("short_url")]);
    m_short_url_isSet = !json[QString("short_url")].isNull() && m_short_url_isValid;

    m_thumbnail_height_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_height, json[QString("thumbnail_height")]);
    m_thumbnail_height_isSet = !json[QString("thumbnail_height")].isNull() && m_thumbnail_height_isValid;

    m_thumbnail_width_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_width, json[QString("thumbnail_width")]);
    m_thumbnail_width_isSet = !json[QString("thumbnail_width")].isNull() && m_thumbnail_width_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAICreateUpload_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpload_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_dominant_color_isSet) {
        obj.insert(QString("dominant_color"), ::OpenAPI::toJsonValue(m_dominant_color));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_filesize_isSet) {
        obj.insert(QString("filesize"), ::OpenAPI::toJsonValue(m_filesize));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_human_filesize_isSet) {
        obj.insert(QString("human_filesize"), ::OpenAPI::toJsonValue(m_human_filesize));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_filename_isSet) {
        obj.insert(QString("original_filename"), ::OpenAPI::toJsonValue(m_original_filename));
    }
    if (m_retain_hours_isSet) {
        obj.insert(QString("retain_hours"), ::OpenAPI::toJsonValue(m_retain_hours));
    }
    if (m_short_path_isSet) {
        obj.insert(QString("short_path"), ::OpenAPI::toJsonValue(m_short_path));
    }
    if (m_short_url_isSet) {
        obj.insert(QString("short_url"), ::OpenAPI::toJsonValue(m_short_url));
    }
    if (m_thumbnail_height_isSet) {
        obj.insert(QString("thumbnail_height"), ::OpenAPI::toJsonValue(m_thumbnail_height));
    }
    if (m_thumbnail_width_isSet) {
        obj.insert(QString("thumbnail_width"), ::OpenAPI::toJsonValue(m_thumbnail_width));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAICreateUpload_200_response::getDominantColor() const {
    return m_dominant_color;
}
void OAICreateUpload_200_response::setDominantColor(const QString &dominant_color) {
    m_dominant_color = dominant_color;
    m_dominant_color_isSet = true;
}

bool OAICreateUpload_200_response::is_dominant_color_Set() const{
    return m_dominant_color_isSet;
}

bool OAICreateUpload_200_response::is_dominant_color_Valid() const{
    return m_dominant_color_isValid;
}

QString OAICreateUpload_200_response::getExtension() const {
    return m_extension;
}
void OAICreateUpload_200_response::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAICreateUpload_200_response::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAICreateUpload_200_response::is_extension_Valid() const{
    return m_extension_isValid;
}

qint32 OAICreateUpload_200_response::getFilesize() const {
    return m_filesize;
}
void OAICreateUpload_200_response::setFilesize(const qint32 &filesize) {
    m_filesize = filesize;
    m_filesize_isSet = true;
}

bool OAICreateUpload_200_response::is_filesize_Set() const{
    return m_filesize_isSet;
}

bool OAICreateUpload_200_response::is_filesize_Valid() const{
    return m_filesize_isValid;
}

qint32 OAICreateUpload_200_response::getHeight() const {
    return m_height;
}
void OAICreateUpload_200_response::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICreateUpload_200_response::is_height_Set() const{
    return m_height_isSet;
}

bool OAICreateUpload_200_response::is_height_Valid() const{
    return m_height_isValid;
}

QString OAICreateUpload_200_response::getHumanFilesize() const {
    return m_human_filesize;
}
void OAICreateUpload_200_response::setHumanFilesize(const QString &human_filesize) {
    m_human_filesize = human_filesize;
    m_human_filesize_isSet = true;
}

bool OAICreateUpload_200_response::is_human_filesize_Set() const{
    return m_human_filesize_isSet;
}

bool OAICreateUpload_200_response::is_human_filesize_Valid() const{
    return m_human_filesize_isValid;
}

qint32 OAICreateUpload_200_response::getId() const {
    return m_id;
}
void OAICreateUpload_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateUpload_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateUpload_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateUpload_200_response::getOriginalFilename() const {
    return m_original_filename;
}
void OAICreateUpload_200_response::setOriginalFilename(const QString &original_filename) {
    m_original_filename = original_filename;
    m_original_filename_isSet = true;
}

bool OAICreateUpload_200_response::is_original_filename_Set() const{
    return m_original_filename_isSet;
}

bool OAICreateUpload_200_response::is_original_filename_Valid() const{
    return m_original_filename_isValid;
}

QString OAICreateUpload_200_response::getRetainHours() const {
    return m_retain_hours;
}
void OAICreateUpload_200_response::setRetainHours(const QString &retain_hours) {
    m_retain_hours = retain_hours;
    m_retain_hours_isSet = true;
}

bool OAICreateUpload_200_response::is_retain_hours_Set() const{
    return m_retain_hours_isSet;
}

bool OAICreateUpload_200_response::is_retain_hours_Valid() const{
    return m_retain_hours_isValid;
}

QString OAICreateUpload_200_response::getShortPath() const {
    return m_short_path;
}
void OAICreateUpload_200_response::setShortPath(const QString &short_path) {
    m_short_path = short_path;
    m_short_path_isSet = true;
}

bool OAICreateUpload_200_response::is_short_path_Set() const{
    return m_short_path_isSet;
}

bool OAICreateUpload_200_response::is_short_path_Valid() const{
    return m_short_path_isValid;
}

QString OAICreateUpload_200_response::getShortUrl() const {
    return m_short_url;
}
void OAICreateUpload_200_response::setShortUrl(const QString &short_url) {
    m_short_url = short_url;
    m_short_url_isSet = true;
}

bool OAICreateUpload_200_response::is_short_url_Set() const{
    return m_short_url_isSet;
}

bool OAICreateUpload_200_response::is_short_url_Valid() const{
    return m_short_url_isValid;
}

qint32 OAICreateUpload_200_response::getThumbnailHeight() const {
    return m_thumbnail_height;
}
void OAICreateUpload_200_response::setThumbnailHeight(const qint32 &thumbnail_height) {
    m_thumbnail_height = thumbnail_height;
    m_thumbnail_height_isSet = true;
}

bool OAICreateUpload_200_response::is_thumbnail_height_Set() const{
    return m_thumbnail_height_isSet;
}

bool OAICreateUpload_200_response::is_thumbnail_height_Valid() const{
    return m_thumbnail_height_isValid;
}

qint32 OAICreateUpload_200_response::getThumbnailWidth() const {
    return m_thumbnail_width;
}
void OAICreateUpload_200_response::setThumbnailWidth(const qint32 &thumbnail_width) {
    m_thumbnail_width = thumbnail_width;
    m_thumbnail_width_isSet = true;
}

bool OAICreateUpload_200_response::is_thumbnail_width_Set() const{
    return m_thumbnail_width_isSet;
}

bool OAICreateUpload_200_response::is_thumbnail_width_Valid() const{
    return m_thumbnail_width_isValid;
}

QString OAICreateUpload_200_response::getUrl() const {
    return m_url;
}
void OAICreateUpload_200_response::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateUpload_200_response::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateUpload_200_response::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAICreateUpload_200_response::getWidth() const {
    return m_width;
}
void OAICreateUpload_200_response::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICreateUpload_200_response::is_width_Set() const{
    return m_width_isSet;
}

bool OAICreateUpload_200_response::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICreateUpload_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dominant_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filesize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_filesize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpload_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_extension_isValid && m_filesize_isValid && m_height_isValid && m_human_filesize_isValid && m_id_isValid && m_original_filename_isValid && m_retain_hours_isValid && m_short_path_isValid && m_short_url_isValid && m_thumbnail_height_isValid && m_thumbnail_width_isValid && m_url_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
