/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetUserExternalId_200_response_user_user_option.h
 *
 * 
 */

#ifndef OAIGetUserExternalId_200_response_user_user_option_H
#define OAIGetUserExternalId_200_response_user_user_option_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetUserExternalId_200_response_user_user_option : public OAIObject {
public:
    OAIGetUserExternalId_200_response_user_user_option();
    OAIGetUserExternalId_200_response_user_user_option(QString json);
    ~OAIGetUserExternalId_200_response_user_user_option() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowPrivateMessages() const;
    void setAllowPrivateMessages(const bool &allow_private_messages);
    bool is_allow_private_messages_Set() const;
    bool is_allow_private_messages_Valid() const;

    qint32 getAutoTrackTopicsAfterMsecs() const;
    void setAutoTrackTopicsAfterMsecs(const qint32 &auto_track_topics_after_msecs);
    bool is_auto_track_topics_after_msecs_Set() const;
    bool is_auto_track_topics_after_msecs_Valid() const;

    bool isAutomaticallyUnpinTopics() const;
    void setAutomaticallyUnpinTopics(const bool &automatically_unpin_topics);
    bool is_automatically_unpin_topics_Set() const;
    bool is_automatically_unpin_topics_Valid() const;

    qint32 getBookmarkAutoDeletePreference() const;
    void setBookmarkAutoDeletePreference(const qint32 &bookmark_auto_delete_preference);
    bool is_bookmark_auto_delete_preference_Set() const;
    bool is_bookmark_auto_delete_preference_Valid() const;

    QString getColorSchemeId() const;
    void setColorSchemeId(const QString &color_scheme_id);
    bool is_color_scheme_id_Set() const;
    bool is_color_scheme_id_Valid() const;

    QString getDarkSchemeId() const;
    void setDarkSchemeId(const QString &dark_scheme_id);
    bool is_dark_scheme_id_Set() const;
    bool is_dark_scheme_id_Valid() const;

    QString getDefaultCalendar() const;
    void setDefaultCalendar(const QString &default_calendar);
    bool is_default_calendar_Set() const;
    bool is_default_calendar_Valid() const;

    qint32 getDigestAfterMinutes() const;
    void setDigestAfterMinutes(const qint32 &digest_after_minutes);
    bool is_digest_after_minutes_Set() const;
    bool is_digest_after_minutes_Valid() const;

    bool isDynamicFavicon() const;
    void setDynamicFavicon(const bool &dynamic_favicon);
    bool is_dynamic_favicon_Set() const;
    bool is_dynamic_favicon_Valid() const;

    bool isEmailDigests() const;
    void setEmailDigests(const bool &email_digests);
    bool is_email_digests_Set() const;
    bool is_email_digests_Valid() const;

    bool isEmailInReplyTo() const;
    void setEmailInReplyTo(const bool &email_in_reply_to);
    bool is_email_in_reply_to_Set() const;
    bool is_email_in_reply_to_Valid() const;

    qint32 getEmailLevel() const;
    void setEmailLevel(const qint32 &email_level);
    bool is_email_level_Set() const;
    bool is_email_level_Valid() const;

    qint32 getEmailMessagesLevel() const;
    void setEmailMessagesLevel(const qint32 &email_messages_level);
    bool is_email_messages_level_Set() const;
    bool is_email_messages_level_Valid() const;

    qint32 getEmailPreviousReplies() const;
    void setEmailPreviousReplies(const qint32 &email_previous_replies);
    bool is_email_previous_replies_Set() const;
    bool is_email_previous_replies_Valid() const;

    bool isEnableAllowedPmUsers() const;
    void setEnableAllowedPmUsers(const bool &enable_allowed_pm_users);
    bool is_enable_allowed_pm_users_Set() const;
    bool is_enable_allowed_pm_users_Valid() const;

    bool isEnableDefer() const;
    void setEnableDefer(const bool &enable_defer);
    bool is_enable_defer_Set() const;
    bool is_enable_defer_Valid() const;

    bool isEnableQuoting() const;
    void setEnableQuoting(const bool &enable_quoting);
    bool is_enable_quoting_Set() const;
    bool is_enable_quoting_Valid() const;

    bool isExternalLinksInNewTab() const;
    void setExternalLinksInNewTab(const bool &external_links_in_new_tab);
    bool is_external_links_in_new_tab_Set() const;
    bool is_external_links_in_new_tab_Valid() const;

    bool isHideProfileAndPresence() const;
    void setHideProfileAndPresence(const bool &hide_profile_and_presence);
    bool is_hide_profile_and_presence_Set() const;
    bool is_hide_profile_and_presence_Valid() const;

    QString getHomepageId() const;
    void setHomepageId(const QString &homepage_id);
    bool is_homepage_id_Set() const;
    bool is_homepage_id_Valid() const;

    bool isIncludeTl0InDigests() const;
    void setIncludeTl0InDigests(const bool &include_tl0_in_digests);
    bool is_include_tl0_in_digests_Set() const;
    bool is_include_tl0_in_digests_Valid() const;

    qint32 getLikeNotificationFrequency() const;
    void setLikeNotificationFrequency(const qint32 &like_notification_frequency);
    bool is_like_notification_frequency_Set() const;
    bool is_like_notification_frequency_Valid() const;

    bool isMailingListMode() const;
    void setMailingListMode(const bool &mailing_list_mode);
    bool is_mailing_list_mode_Set() const;
    bool is_mailing_list_mode_Valid() const;

    qint32 getMailingListModeFrequency() const;
    void setMailingListModeFrequency(const qint32 &mailing_list_mode_frequency);
    bool is_mailing_list_mode_frequency_Set() const;
    bool is_mailing_list_mode_frequency_Valid() const;

    qint32 getNewTopicDurationMinutes() const;
    void setNewTopicDurationMinutes(const qint32 &new_topic_duration_minutes);
    bool is_new_topic_duration_minutes_Set() const;
    bool is_new_topic_duration_minutes_Valid() const;

    qint32 getNotificationLevelWhenReplying() const;
    void setNotificationLevelWhenReplying(const qint32 &notification_level_when_replying);
    bool is_notification_level_when_replying_Set() const;
    bool is_notification_level_when_replying_Valid() const;

    QString getOldestSearchLogDate() const;
    void setOldestSearchLogDate(const QString &oldest_search_log_date);
    bool is_oldest_search_log_date_Set() const;
    bool is_oldest_search_log_date_Valid() const;

    QList<QJsonValue> getSeenPopups() const;
    void setSeenPopups(const QList<QJsonValue> &seen_popups);
    bool is_seen_popups_Set() const;
    bool is_seen_popups_Valid() const;

    QString getSidebarListDestination() const;
    void setSidebarListDestination(const QString &sidebar_list_destination);
    bool is_sidebar_list_destination_Set() const;
    bool is_sidebar_list_destination_Valid() const;

    bool isSkipNewUserTips() const;
    void setSkipNewUserTips(const bool &skip_new_user_tips);
    bool is_skip_new_user_tips_Set() const;
    bool is_skip_new_user_tips_Valid() const;

    QString getTextSize() const;
    void setTextSize(const QString &text_size);
    bool is_text_size_Set() const;
    bool is_text_size_Valid() const;

    qint32 getTextSizeSeq() const;
    void setTextSizeSeq(const qint32 &text_size_seq);
    bool is_text_size_seq_Set() const;
    bool is_text_size_seq_Valid() const;

    QList<QJsonValue> getThemeIds() const;
    void setThemeIds(const QList<QJsonValue> &theme_ids);
    bool is_theme_ids_Set() const;
    bool is_theme_ids_Valid() const;

    qint32 getThemeKeySeq() const;
    void setThemeKeySeq(const qint32 &theme_key_seq);
    bool is_theme_key_seq_Set() const;
    bool is_theme_key_seq_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getTitleCountMode() const;
    void setTitleCountMode(const QString &title_count_mode);
    bool is_title_count_mode_Set() const;
    bool is_title_count_mode_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_private_messages;
    bool m_allow_private_messages_isSet;
    bool m_allow_private_messages_isValid;

    qint32 m_auto_track_topics_after_msecs;
    bool m_auto_track_topics_after_msecs_isSet;
    bool m_auto_track_topics_after_msecs_isValid;

    bool m_automatically_unpin_topics;
    bool m_automatically_unpin_topics_isSet;
    bool m_automatically_unpin_topics_isValid;

    qint32 m_bookmark_auto_delete_preference;
    bool m_bookmark_auto_delete_preference_isSet;
    bool m_bookmark_auto_delete_preference_isValid;

    QString m_color_scheme_id;
    bool m_color_scheme_id_isSet;
    bool m_color_scheme_id_isValid;

    QString m_dark_scheme_id;
    bool m_dark_scheme_id_isSet;
    bool m_dark_scheme_id_isValid;

    QString m_default_calendar;
    bool m_default_calendar_isSet;
    bool m_default_calendar_isValid;

    qint32 m_digest_after_minutes;
    bool m_digest_after_minutes_isSet;
    bool m_digest_after_minutes_isValid;

    bool m_dynamic_favicon;
    bool m_dynamic_favicon_isSet;
    bool m_dynamic_favicon_isValid;

    bool m_email_digests;
    bool m_email_digests_isSet;
    bool m_email_digests_isValid;

    bool m_email_in_reply_to;
    bool m_email_in_reply_to_isSet;
    bool m_email_in_reply_to_isValid;

    qint32 m_email_level;
    bool m_email_level_isSet;
    bool m_email_level_isValid;

    qint32 m_email_messages_level;
    bool m_email_messages_level_isSet;
    bool m_email_messages_level_isValid;

    qint32 m_email_previous_replies;
    bool m_email_previous_replies_isSet;
    bool m_email_previous_replies_isValid;

    bool m_enable_allowed_pm_users;
    bool m_enable_allowed_pm_users_isSet;
    bool m_enable_allowed_pm_users_isValid;

    bool m_enable_defer;
    bool m_enable_defer_isSet;
    bool m_enable_defer_isValid;

    bool m_enable_quoting;
    bool m_enable_quoting_isSet;
    bool m_enable_quoting_isValid;

    bool m_external_links_in_new_tab;
    bool m_external_links_in_new_tab_isSet;
    bool m_external_links_in_new_tab_isValid;

    bool m_hide_profile_and_presence;
    bool m_hide_profile_and_presence_isSet;
    bool m_hide_profile_and_presence_isValid;

    QString m_homepage_id;
    bool m_homepage_id_isSet;
    bool m_homepage_id_isValid;

    bool m_include_tl0_in_digests;
    bool m_include_tl0_in_digests_isSet;
    bool m_include_tl0_in_digests_isValid;

    qint32 m_like_notification_frequency;
    bool m_like_notification_frequency_isSet;
    bool m_like_notification_frequency_isValid;

    bool m_mailing_list_mode;
    bool m_mailing_list_mode_isSet;
    bool m_mailing_list_mode_isValid;

    qint32 m_mailing_list_mode_frequency;
    bool m_mailing_list_mode_frequency_isSet;
    bool m_mailing_list_mode_frequency_isValid;

    qint32 m_new_topic_duration_minutes;
    bool m_new_topic_duration_minutes_isSet;
    bool m_new_topic_duration_minutes_isValid;

    qint32 m_notification_level_when_replying;
    bool m_notification_level_when_replying_isSet;
    bool m_notification_level_when_replying_isValid;

    QString m_oldest_search_log_date;
    bool m_oldest_search_log_date_isSet;
    bool m_oldest_search_log_date_isValid;

    QList<QJsonValue> m_seen_popups;
    bool m_seen_popups_isSet;
    bool m_seen_popups_isValid;

    QString m_sidebar_list_destination;
    bool m_sidebar_list_destination_isSet;
    bool m_sidebar_list_destination_isValid;

    bool m_skip_new_user_tips;
    bool m_skip_new_user_tips_isSet;
    bool m_skip_new_user_tips_isValid;

    QString m_text_size;
    bool m_text_size_isSet;
    bool m_text_size_isValid;

    qint32 m_text_size_seq;
    bool m_text_size_seq_isSet;
    bool m_text_size_seq_isValid;

    QList<QJsonValue> m_theme_ids;
    bool m_theme_ids_isSet;
    bool m_theme_ids_isValid;

    qint32 m_theme_key_seq;
    bool m_theme_key_seq_isSet;
    bool m_theme_key_seq_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_title_count_mode;
    bool m_title_count_mode_isSet;
    bool m_title_count_mode_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetUserExternalId_200_response_user_user_option)

#endif // OAIGetUserExternalId_200_response_user_user_option_H
