/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListUserBadges_200_response_user_badges_inner.h
 *
 * 
 */

#ifndef OAIListUserBadges_200_response_user_badges_inner_H
#define OAIListUserBadges_200_response_user_badges_inner_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListUserBadges_200_response_user_badges_inner : public OAIObject {
public:
    OAIListUserBadges_200_response_user_badges_inner();
    OAIListUserBadges_200_response_user_badges_inner(QString json);
    ~OAIListUserBadges_200_response_user_badges_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBadgeId() const;
    void setBadgeId(const qint32 &badge_id);
    bool is_badge_id_Set() const;
    bool is_badge_id_Valid() const;

    bool isCanFavorite() const;
    void setCanFavorite(const bool &can_favorite);
    bool is_can_favorite_Set() const;
    bool is_can_favorite_Valid() const;

    QString getGrantedAt() const;
    void setGrantedAt(const QString &granted_at);
    bool is_granted_at_Set() const;
    bool is_granted_at_Valid() const;

    qint32 getGrantedById() const;
    void setGrantedById(const qint32 &granted_by_id);
    bool is_granted_by_id_Set() const;
    bool is_granted_by_id_Valid() const;

    qint32 getGroupingPosition() const;
    void setGroupingPosition(const qint32 &grouping_position);
    bool is_grouping_position_Set() const;
    bool is_grouping_position_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIsFavorite() const;
    void setIsFavorite(const QString &is_favorite);
    bool is_is_favorite_Set() const;
    bool is_is_favorite_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_badge_id;
    bool m_badge_id_isSet;
    bool m_badge_id_isValid;

    bool m_can_favorite;
    bool m_can_favorite_isSet;
    bool m_can_favorite_isValid;

    QString m_granted_at;
    bool m_granted_at_isSet;
    bool m_granted_at_isValid;

    qint32 m_granted_by_id;
    bool m_granted_by_id_isSet;
    bool m_granted_by_id_isValid;

    qint32 m_grouping_position;
    bool m_grouping_position_isSet;
    bool m_grouping_position_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_is_favorite;
    bool m_is_favorite_isSet;
    bool m_is_favorite_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListUserBadges_200_response_user_badges_inner)

#endif // OAIListUserBadges_200_response_user_badges_inner_H
