/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateCategory_request.h
 *
 * 
 */

#ifndef OAICreateCategory_request_H
#define OAICreateCategory_request_H

#include <QJsonObject>

#include "OAICreateCategory_request_permissions.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateCategory_request : public OAIObject {
public:
    OAICreateCategory_request();
    OAICreateCategory_request(QString json);
    ~OAICreateCategory_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowBadges() const;
    void setAllowBadges(const bool &allow_badges);
    bool is_allow_badges_Set() const;
    bool is_allow_badges_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    QList<QJsonValue> getFormTemplateIds() const;
    void setFormTemplateIds(const QList<QJsonValue> &form_template_ids);
    bool is_form_template_ids_Set() const;
    bool is_form_template_ids_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getParentCategoryId() const;
    void setParentCategoryId(const qint32 &parent_category_id);
    bool is_parent_category_id_Set() const;
    bool is_parent_category_id_Valid() const;

    OAICreateCategory_request_permissions getPermissions() const;
    void setPermissions(const OAICreateCategory_request_permissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    qint32 getSearchPriority() const;
    void setSearchPriority(const qint32 &search_priority);
    bool is_search_priority_Set() const;
    bool is_search_priority_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QString getTextColor() const;
    void setTextColor(const QString &text_color);
    bool is_text_color_Set() const;
    bool is_text_color_Valid() const;

    bool isTopicFeaturedLinksAllowed() const;
    void setTopicFeaturedLinksAllowed(const bool &topic_featured_links_allowed);
    bool is_topic_featured_links_allowed_Set() const;
    bool is_topic_featured_links_allowed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_badges;
    bool m_allow_badges_isSet;
    bool m_allow_badges_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    QList<QJsonValue> m_form_template_ids;
    bool m_form_template_ids_isSet;
    bool m_form_template_ids_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_parent_category_id;
    bool m_parent_category_id_isSet;
    bool m_parent_category_id_isValid;

    OAICreateCategory_request_permissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    qint32 m_search_priority;
    bool m_search_priority_isSet;
    bool m_search_priority_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QString m_text_color;
    bool m_text_color_isSet;
    bool m_text_color_isValid;

    bool m_topic_featured_links_allowed;
    bool m_topic_featured_links_allowed_isSet;
    bool m_topic_featured_links_allowed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateCategory_request)

#endif // OAICreateCategory_request_H
