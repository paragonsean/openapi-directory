/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUserExternalId_200_response_user_user_option.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUserExternalId_200_response_user_user_option::OAIGetUserExternalId_200_response_user_user_option(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUserExternalId_200_response_user_user_option::OAIGetUserExternalId_200_response_user_user_option() {
    this->initializeModel();
}

OAIGetUserExternalId_200_response_user_user_option::~OAIGetUserExternalId_200_response_user_user_option() {}

void OAIGetUserExternalId_200_response_user_user_option::initializeModel() {

    m_allow_private_messages_isSet = false;
    m_allow_private_messages_isValid = false;

    m_auto_track_topics_after_msecs_isSet = false;
    m_auto_track_topics_after_msecs_isValid = false;

    m_automatically_unpin_topics_isSet = false;
    m_automatically_unpin_topics_isValid = false;

    m_bookmark_auto_delete_preference_isSet = false;
    m_bookmark_auto_delete_preference_isValid = false;

    m_color_scheme_id_isSet = false;
    m_color_scheme_id_isValid = false;

    m_dark_scheme_id_isSet = false;
    m_dark_scheme_id_isValid = false;

    m_default_calendar_isSet = false;
    m_default_calendar_isValid = false;

    m_digest_after_minutes_isSet = false;
    m_digest_after_minutes_isValid = false;

    m_dynamic_favicon_isSet = false;
    m_dynamic_favicon_isValid = false;

    m_email_digests_isSet = false;
    m_email_digests_isValid = false;

    m_email_in_reply_to_isSet = false;
    m_email_in_reply_to_isValid = false;

    m_email_level_isSet = false;
    m_email_level_isValid = false;

    m_email_messages_level_isSet = false;
    m_email_messages_level_isValid = false;

    m_email_previous_replies_isSet = false;
    m_email_previous_replies_isValid = false;

    m_enable_allowed_pm_users_isSet = false;
    m_enable_allowed_pm_users_isValid = false;

    m_enable_defer_isSet = false;
    m_enable_defer_isValid = false;

    m_enable_quoting_isSet = false;
    m_enable_quoting_isValid = false;

    m_external_links_in_new_tab_isSet = false;
    m_external_links_in_new_tab_isValid = false;

    m_hide_profile_and_presence_isSet = false;
    m_hide_profile_and_presence_isValid = false;

    m_homepage_id_isSet = false;
    m_homepage_id_isValid = false;

    m_include_tl0_in_digests_isSet = false;
    m_include_tl0_in_digests_isValid = false;

    m_like_notification_frequency_isSet = false;
    m_like_notification_frequency_isValid = false;

    m_mailing_list_mode_isSet = false;
    m_mailing_list_mode_isValid = false;

    m_mailing_list_mode_frequency_isSet = false;
    m_mailing_list_mode_frequency_isValid = false;

    m_new_topic_duration_minutes_isSet = false;
    m_new_topic_duration_minutes_isValid = false;

    m_notification_level_when_replying_isSet = false;
    m_notification_level_when_replying_isValid = false;

    m_oldest_search_log_date_isSet = false;
    m_oldest_search_log_date_isValid = false;

    m_seen_popups_isSet = false;
    m_seen_popups_isValid = false;

    m_sidebar_list_destination_isSet = false;
    m_sidebar_list_destination_isValid = false;

    m_skip_new_user_tips_isSet = false;
    m_skip_new_user_tips_isValid = false;

    m_text_size_isSet = false;
    m_text_size_isValid = false;

    m_text_size_seq_isSet = false;
    m_text_size_seq_isValid = false;

    m_theme_ids_isSet = false;
    m_theme_ids_isValid = false;

    m_theme_key_seq_isSet = false;
    m_theme_key_seq_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_title_count_mode_isSet = false;
    m_title_count_mode_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGetUserExternalId_200_response_user_user_option::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUserExternalId_200_response_user_user_option::fromJsonObject(QJsonObject json) {

    m_allow_private_messages_isValid = ::OpenAPI::fromJsonValue(m_allow_private_messages, json[QString("allow_private_messages")]);
    m_allow_private_messages_isSet = !json[QString("allow_private_messages")].isNull() && m_allow_private_messages_isValid;

    m_auto_track_topics_after_msecs_isValid = ::OpenAPI::fromJsonValue(m_auto_track_topics_after_msecs, json[QString("auto_track_topics_after_msecs")]);
    m_auto_track_topics_after_msecs_isSet = !json[QString("auto_track_topics_after_msecs")].isNull() && m_auto_track_topics_after_msecs_isValid;

    m_automatically_unpin_topics_isValid = ::OpenAPI::fromJsonValue(m_automatically_unpin_topics, json[QString("automatically_unpin_topics")]);
    m_automatically_unpin_topics_isSet = !json[QString("automatically_unpin_topics")].isNull() && m_automatically_unpin_topics_isValid;

    m_bookmark_auto_delete_preference_isValid = ::OpenAPI::fromJsonValue(m_bookmark_auto_delete_preference, json[QString("bookmark_auto_delete_preference")]);
    m_bookmark_auto_delete_preference_isSet = !json[QString("bookmark_auto_delete_preference")].isNull() && m_bookmark_auto_delete_preference_isValid;

    m_color_scheme_id_isValid = ::OpenAPI::fromJsonValue(m_color_scheme_id, json[QString("color_scheme_id")]);
    m_color_scheme_id_isSet = !json[QString("color_scheme_id")].isNull() && m_color_scheme_id_isValid;

    m_dark_scheme_id_isValid = ::OpenAPI::fromJsonValue(m_dark_scheme_id, json[QString("dark_scheme_id")]);
    m_dark_scheme_id_isSet = !json[QString("dark_scheme_id")].isNull() && m_dark_scheme_id_isValid;

    m_default_calendar_isValid = ::OpenAPI::fromJsonValue(m_default_calendar, json[QString("default_calendar")]);
    m_default_calendar_isSet = !json[QString("default_calendar")].isNull() && m_default_calendar_isValid;

    m_digest_after_minutes_isValid = ::OpenAPI::fromJsonValue(m_digest_after_minutes, json[QString("digest_after_minutes")]);
    m_digest_after_minutes_isSet = !json[QString("digest_after_minutes")].isNull() && m_digest_after_minutes_isValid;

    m_dynamic_favicon_isValid = ::OpenAPI::fromJsonValue(m_dynamic_favicon, json[QString("dynamic_favicon")]);
    m_dynamic_favicon_isSet = !json[QString("dynamic_favicon")].isNull() && m_dynamic_favicon_isValid;

    m_email_digests_isValid = ::OpenAPI::fromJsonValue(m_email_digests, json[QString("email_digests")]);
    m_email_digests_isSet = !json[QString("email_digests")].isNull() && m_email_digests_isValid;

    m_email_in_reply_to_isValid = ::OpenAPI::fromJsonValue(m_email_in_reply_to, json[QString("email_in_reply_to")]);
    m_email_in_reply_to_isSet = !json[QString("email_in_reply_to")].isNull() && m_email_in_reply_to_isValid;

    m_email_level_isValid = ::OpenAPI::fromJsonValue(m_email_level, json[QString("email_level")]);
    m_email_level_isSet = !json[QString("email_level")].isNull() && m_email_level_isValid;

    m_email_messages_level_isValid = ::OpenAPI::fromJsonValue(m_email_messages_level, json[QString("email_messages_level")]);
    m_email_messages_level_isSet = !json[QString("email_messages_level")].isNull() && m_email_messages_level_isValid;

    m_email_previous_replies_isValid = ::OpenAPI::fromJsonValue(m_email_previous_replies, json[QString("email_previous_replies")]);
    m_email_previous_replies_isSet = !json[QString("email_previous_replies")].isNull() && m_email_previous_replies_isValid;

    m_enable_allowed_pm_users_isValid = ::OpenAPI::fromJsonValue(m_enable_allowed_pm_users, json[QString("enable_allowed_pm_users")]);
    m_enable_allowed_pm_users_isSet = !json[QString("enable_allowed_pm_users")].isNull() && m_enable_allowed_pm_users_isValid;

    m_enable_defer_isValid = ::OpenAPI::fromJsonValue(m_enable_defer, json[QString("enable_defer")]);
    m_enable_defer_isSet = !json[QString("enable_defer")].isNull() && m_enable_defer_isValid;

    m_enable_quoting_isValid = ::OpenAPI::fromJsonValue(m_enable_quoting, json[QString("enable_quoting")]);
    m_enable_quoting_isSet = !json[QString("enable_quoting")].isNull() && m_enable_quoting_isValid;

    m_external_links_in_new_tab_isValid = ::OpenAPI::fromJsonValue(m_external_links_in_new_tab, json[QString("external_links_in_new_tab")]);
    m_external_links_in_new_tab_isSet = !json[QString("external_links_in_new_tab")].isNull() && m_external_links_in_new_tab_isValid;

    m_hide_profile_and_presence_isValid = ::OpenAPI::fromJsonValue(m_hide_profile_and_presence, json[QString("hide_profile_and_presence")]);
    m_hide_profile_and_presence_isSet = !json[QString("hide_profile_and_presence")].isNull() && m_hide_profile_and_presence_isValid;

    m_homepage_id_isValid = ::OpenAPI::fromJsonValue(m_homepage_id, json[QString("homepage_id")]);
    m_homepage_id_isSet = !json[QString("homepage_id")].isNull() && m_homepage_id_isValid;

    m_include_tl0_in_digests_isValid = ::OpenAPI::fromJsonValue(m_include_tl0_in_digests, json[QString("include_tl0_in_digests")]);
    m_include_tl0_in_digests_isSet = !json[QString("include_tl0_in_digests")].isNull() && m_include_tl0_in_digests_isValid;

    m_like_notification_frequency_isValid = ::OpenAPI::fromJsonValue(m_like_notification_frequency, json[QString("like_notification_frequency")]);
    m_like_notification_frequency_isSet = !json[QString("like_notification_frequency")].isNull() && m_like_notification_frequency_isValid;

    m_mailing_list_mode_isValid = ::OpenAPI::fromJsonValue(m_mailing_list_mode, json[QString("mailing_list_mode")]);
    m_mailing_list_mode_isSet = !json[QString("mailing_list_mode")].isNull() && m_mailing_list_mode_isValid;

    m_mailing_list_mode_frequency_isValid = ::OpenAPI::fromJsonValue(m_mailing_list_mode_frequency, json[QString("mailing_list_mode_frequency")]);
    m_mailing_list_mode_frequency_isSet = !json[QString("mailing_list_mode_frequency")].isNull() && m_mailing_list_mode_frequency_isValid;

    m_new_topic_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_new_topic_duration_minutes, json[QString("new_topic_duration_minutes")]);
    m_new_topic_duration_minutes_isSet = !json[QString("new_topic_duration_minutes")].isNull() && m_new_topic_duration_minutes_isValid;

    m_notification_level_when_replying_isValid = ::OpenAPI::fromJsonValue(m_notification_level_when_replying, json[QString("notification_level_when_replying")]);
    m_notification_level_when_replying_isSet = !json[QString("notification_level_when_replying")].isNull() && m_notification_level_when_replying_isValid;

    m_oldest_search_log_date_isValid = ::OpenAPI::fromJsonValue(m_oldest_search_log_date, json[QString("oldest_search_log_date")]);
    m_oldest_search_log_date_isSet = !json[QString("oldest_search_log_date")].isNull() && m_oldest_search_log_date_isValid;

    m_seen_popups_isValid = ::OpenAPI::fromJsonValue(m_seen_popups, json[QString("seen_popups")]);
    m_seen_popups_isSet = !json[QString("seen_popups")].isNull() && m_seen_popups_isValid;

    m_sidebar_list_destination_isValid = ::OpenAPI::fromJsonValue(m_sidebar_list_destination, json[QString("sidebar_list_destination")]);
    m_sidebar_list_destination_isSet = !json[QString("sidebar_list_destination")].isNull() && m_sidebar_list_destination_isValid;

    m_skip_new_user_tips_isValid = ::OpenAPI::fromJsonValue(m_skip_new_user_tips, json[QString("skip_new_user_tips")]);
    m_skip_new_user_tips_isSet = !json[QString("skip_new_user_tips")].isNull() && m_skip_new_user_tips_isValid;

    m_text_size_isValid = ::OpenAPI::fromJsonValue(m_text_size, json[QString("text_size")]);
    m_text_size_isSet = !json[QString("text_size")].isNull() && m_text_size_isValid;

    m_text_size_seq_isValid = ::OpenAPI::fromJsonValue(m_text_size_seq, json[QString("text_size_seq")]);
    m_text_size_seq_isSet = !json[QString("text_size_seq")].isNull() && m_text_size_seq_isValid;

    m_theme_ids_isValid = ::OpenAPI::fromJsonValue(m_theme_ids, json[QString("theme_ids")]);
    m_theme_ids_isSet = !json[QString("theme_ids")].isNull() && m_theme_ids_isValid;

    m_theme_key_seq_isValid = ::OpenAPI::fromJsonValue(m_theme_key_seq, json[QString("theme_key_seq")]);
    m_theme_key_seq_isSet = !json[QString("theme_key_seq")].isNull() && m_theme_key_seq_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_title_count_mode_isValid = ::OpenAPI::fromJsonValue(m_title_count_mode, json[QString("title_count_mode")]);
    m_title_count_mode_isSet = !json[QString("title_count_mode")].isNull() && m_title_count_mode_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUserExternalId_200_response_user_user_option::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_private_messages_isSet) {
        obj.insert(QString("allow_private_messages"), ::OpenAPI::toJsonValue(m_allow_private_messages));
    }
    if (m_auto_track_topics_after_msecs_isSet) {
        obj.insert(QString("auto_track_topics_after_msecs"), ::OpenAPI::toJsonValue(m_auto_track_topics_after_msecs));
    }
    if (m_automatically_unpin_topics_isSet) {
        obj.insert(QString("automatically_unpin_topics"), ::OpenAPI::toJsonValue(m_automatically_unpin_topics));
    }
    if (m_bookmark_auto_delete_preference_isSet) {
        obj.insert(QString("bookmark_auto_delete_preference"), ::OpenAPI::toJsonValue(m_bookmark_auto_delete_preference));
    }
    if (m_color_scheme_id_isSet) {
        obj.insert(QString("color_scheme_id"), ::OpenAPI::toJsonValue(m_color_scheme_id));
    }
    if (m_dark_scheme_id_isSet) {
        obj.insert(QString("dark_scheme_id"), ::OpenAPI::toJsonValue(m_dark_scheme_id));
    }
    if (m_default_calendar_isSet) {
        obj.insert(QString("default_calendar"), ::OpenAPI::toJsonValue(m_default_calendar));
    }
    if (m_digest_after_minutes_isSet) {
        obj.insert(QString("digest_after_minutes"), ::OpenAPI::toJsonValue(m_digest_after_minutes));
    }
    if (m_dynamic_favicon_isSet) {
        obj.insert(QString("dynamic_favicon"), ::OpenAPI::toJsonValue(m_dynamic_favicon));
    }
    if (m_email_digests_isSet) {
        obj.insert(QString("email_digests"), ::OpenAPI::toJsonValue(m_email_digests));
    }
    if (m_email_in_reply_to_isSet) {
        obj.insert(QString("email_in_reply_to"), ::OpenAPI::toJsonValue(m_email_in_reply_to));
    }
    if (m_email_level_isSet) {
        obj.insert(QString("email_level"), ::OpenAPI::toJsonValue(m_email_level));
    }
    if (m_email_messages_level_isSet) {
        obj.insert(QString("email_messages_level"), ::OpenAPI::toJsonValue(m_email_messages_level));
    }
    if (m_email_previous_replies_isSet) {
        obj.insert(QString("email_previous_replies"), ::OpenAPI::toJsonValue(m_email_previous_replies));
    }
    if (m_enable_allowed_pm_users_isSet) {
        obj.insert(QString("enable_allowed_pm_users"), ::OpenAPI::toJsonValue(m_enable_allowed_pm_users));
    }
    if (m_enable_defer_isSet) {
        obj.insert(QString("enable_defer"), ::OpenAPI::toJsonValue(m_enable_defer));
    }
    if (m_enable_quoting_isSet) {
        obj.insert(QString("enable_quoting"), ::OpenAPI::toJsonValue(m_enable_quoting));
    }
    if (m_external_links_in_new_tab_isSet) {
        obj.insert(QString("external_links_in_new_tab"), ::OpenAPI::toJsonValue(m_external_links_in_new_tab));
    }
    if (m_hide_profile_and_presence_isSet) {
        obj.insert(QString("hide_profile_and_presence"), ::OpenAPI::toJsonValue(m_hide_profile_and_presence));
    }
    if (m_homepage_id_isSet) {
        obj.insert(QString("homepage_id"), ::OpenAPI::toJsonValue(m_homepage_id));
    }
    if (m_include_tl0_in_digests_isSet) {
        obj.insert(QString("include_tl0_in_digests"), ::OpenAPI::toJsonValue(m_include_tl0_in_digests));
    }
    if (m_like_notification_frequency_isSet) {
        obj.insert(QString("like_notification_frequency"), ::OpenAPI::toJsonValue(m_like_notification_frequency));
    }
    if (m_mailing_list_mode_isSet) {
        obj.insert(QString("mailing_list_mode"), ::OpenAPI::toJsonValue(m_mailing_list_mode));
    }
    if (m_mailing_list_mode_frequency_isSet) {
        obj.insert(QString("mailing_list_mode_frequency"), ::OpenAPI::toJsonValue(m_mailing_list_mode_frequency));
    }
    if (m_new_topic_duration_minutes_isSet) {
        obj.insert(QString("new_topic_duration_minutes"), ::OpenAPI::toJsonValue(m_new_topic_duration_minutes));
    }
    if (m_notification_level_when_replying_isSet) {
        obj.insert(QString("notification_level_when_replying"), ::OpenAPI::toJsonValue(m_notification_level_when_replying));
    }
    if (m_oldest_search_log_date_isSet) {
        obj.insert(QString("oldest_search_log_date"), ::OpenAPI::toJsonValue(m_oldest_search_log_date));
    }
    if (m_seen_popups.size() > 0) {
        obj.insert(QString("seen_popups"), ::OpenAPI::toJsonValue(m_seen_popups));
    }
    if (m_sidebar_list_destination_isSet) {
        obj.insert(QString("sidebar_list_destination"), ::OpenAPI::toJsonValue(m_sidebar_list_destination));
    }
    if (m_skip_new_user_tips_isSet) {
        obj.insert(QString("skip_new_user_tips"), ::OpenAPI::toJsonValue(m_skip_new_user_tips));
    }
    if (m_text_size_isSet) {
        obj.insert(QString("text_size"), ::OpenAPI::toJsonValue(m_text_size));
    }
    if (m_text_size_seq_isSet) {
        obj.insert(QString("text_size_seq"), ::OpenAPI::toJsonValue(m_text_size_seq));
    }
    if (m_theme_ids.size() > 0) {
        obj.insert(QString("theme_ids"), ::OpenAPI::toJsonValue(m_theme_ids));
    }
    if (m_theme_key_seq_isSet) {
        obj.insert(QString("theme_key_seq"), ::OpenAPI::toJsonValue(m_theme_key_seq));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_title_count_mode_isSet) {
        obj.insert(QString("title_count_mode"), ::OpenAPI::toJsonValue(m_title_count_mode));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAIGetUserExternalId_200_response_user_user_option::isAllowPrivateMessages() const {
    return m_allow_private_messages;
}
void OAIGetUserExternalId_200_response_user_user_option::setAllowPrivateMessages(const bool &allow_private_messages) {
    m_allow_private_messages = allow_private_messages;
    m_allow_private_messages_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_allow_private_messages_Set() const{
    return m_allow_private_messages_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_allow_private_messages_Valid() const{
    return m_allow_private_messages_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getAutoTrackTopicsAfterMsecs() const {
    return m_auto_track_topics_after_msecs;
}
void OAIGetUserExternalId_200_response_user_user_option::setAutoTrackTopicsAfterMsecs(const qint32 &auto_track_topics_after_msecs) {
    m_auto_track_topics_after_msecs = auto_track_topics_after_msecs;
    m_auto_track_topics_after_msecs_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_auto_track_topics_after_msecs_Set() const{
    return m_auto_track_topics_after_msecs_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_auto_track_topics_after_msecs_Valid() const{
    return m_auto_track_topics_after_msecs_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isAutomaticallyUnpinTopics() const {
    return m_automatically_unpin_topics;
}
void OAIGetUserExternalId_200_response_user_user_option::setAutomaticallyUnpinTopics(const bool &automatically_unpin_topics) {
    m_automatically_unpin_topics = automatically_unpin_topics;
    m_automatically_unpin_topics_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_automatically_unpin_topics_Set() const{
    return m_automatically_unpin_topics_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_automatically_unpin_topics_Valid() const{
    return m_automatically_unpin_topics_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getBookmarkAutoDeletePreference() const {
    return m_bookmark_auto_delete_preference;
}
void OAIGetUserExternalId_200_response_user_user_option::setBookmarkAutoDeletePreference(const qint32 &bookmark_auto_delete_preference) {
    m_bookmark_auto_delete_preference = bookmark_auto_delete_preference;
    m_bookmark_auto_delete_preference_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_bookmark_auto_delete_preference_Set() const{
    return m_bookmark_auto_delete_preference_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_bookmark_auto_delete_preference_Valid() const{
    return m_bookmark_auto_delete_preference_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getColorSchemeId() const {
    return m_color_scheme_id;
}
void OAIGetUserExternalId_200_response_user_user_option::setColorSchemeId(const QString &color_scheme_id) {
    m_color_scheme_id = color_scheme_id;
    m_color_scheme_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_color_scheme_id_Set() const{
    return m_color_scheme_id_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_color_scheme_id_Valid() const{
    return m_color_scheme_id_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getDarkSchemeId() const {
    return m_dark_scheme_id;
}
void OAIGetUserExternalId_200_response_user_user_option::setDarkSchemeId(const QString &dark_scheme_id) {
    m_dark_scheme_id = dark_scheme_id;
    m_dark_scheme_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_dark_scheme_id_Set() const{
    return m_dark_scheme_id_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_dark_scheme_id_Valid() const{
    return m_dark_scheme_id_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getDefaultCalendar() const {
    return m_default_calendar;
}
void OAIGetUserExternalId_200_response_user_user_option::setDefaultCalendar(const QString &default_calendar) {
    m_default_calendar = default_calendar;
    m_default_calendar_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_default_calendar_Set() const{
    return m_default_calendar_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_default_calendar_Valid() const{
    return m_default_calendar_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getDigestAfterMinutes() const {
    return m_digest_after_minutes;
}
void OAIGetUserExternalId_200_response_user_user_option::setDigestAfterMinutes(const qint32 &digest_after_minutes) {
    m_digest_after_minutes = digest_after_minutes;
    m_digest_after_minutes_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_digest_after_minutes_Set() const{
    return m_digest_after_minutes_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_digest_after_minutes_Valid() const{
    return m_digest_after_minutes_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isDynamicFavicon() const {
    return m_dynamic_favicon;
}
void OAIGetUserExternalId_200_response_user_user_option::setDynamicFavicon(const bool &dynamic_favicon) {
    m_dynamic_favicon = dynamic_favicon;
    m_dynamic_favicon_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_dynamic_favicon_Set() const{
    return m_dynamic_favicon_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_dynamic_favicon_Valid() const{
    return m_dynamic_favicon_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isEmailDigests() const {
    return m_email_digests;
}
void OAIGetUserExternalId_200_response_user_user_option::setEmailDigests(const bool &email_digests) {
    m_email_digests = email_digests;
    m_email_digests_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_digests_Set() const{
    return m_email_digests_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_digests_Valid() const{
    return m_email_digests_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isEmailInReplyTo() const {
    return m_email_in_reply_to;
}
void OAIGetUserExternalId_200_response_user_user_option::setEmailInReplyTo(const bool &email_in_reply_to) {
    m_email_in_reply_to = email_in_reply_to;
    m_email_in_reply_to_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_in_reply_to_Set() const{
    return m_email_in_reply_to_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_in_reply_to_Valid() const{
    return m_email_in_reply_to_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getEmailLevel() const {
    return m_email_level;
}
void OAIGetUserExternalId_200_response_user_user_option::setEmailLevel(const qint32 &email_level) {
    m_email_level = email_level;
    m_email_level_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_level_Set() const{
    return m_email_level_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_level_Valid() const{
    return m_email_level_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getEmailMessagesLevel() const {
    return m_email_messages_level;
}
void OAIGetUserExternalId_200_response_user_user_option::setEmailMessagesLevel(const qint32 &email_messages_level) {
    m_email_messages_level = email_messages_level;
    m_email_messages_level_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_messages_level_Set() const{
    return m_email_messages_level_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_messages_level_Valid() const{
    return m_email_messages_level_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getEmailPreviousReplies() const {
    return m_email_previous_replies;
}
void OAIGetUserExternalId_200_response_user_user_option::setEmailPreviousReplies(const qint32 &email_previous_replies) {
    m_email_previous_replies = email_previous_replies;
    m_email_previous_replies_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_previous_replies_Set() const{
    return m_email_previous_replies_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_email_previous_replies_Valid() const{
    return m_email_previous_replies_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isEnableAllowedPmUsers() const {
    return m_enable_allowed_pm_users;
}
void OAIGetUserExternalId_200_response_user_user_option::setEnableAllowedPmUsers(const bool &enable_allowed_pm_users) {
    m_enable_allowed_pm_users = enable_allowed_pm_users;
    m_enable_allowed_pm_users_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_enable_allowed_pm_users_Set() const{
    return m_enable_allowed_pm_users_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_enable_allowed_pm_users_Valid() const{
    return m_enable_allowed_pm_users_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isEnableDefer() const {
    return m_enable_defer;
}
void OAIGetUserExternalId_200_response_user_user_option::setEnableDefer(const bool &enable_defer) {
    m_enable_defer = enable_defer;
    m_enable_defer_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_enable_defer_Set() const{
    return m_enable_defer_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_enable_defer_Valid() const{
    return m_enable_defer_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isEnableQuoting() const {
    return m_enable_quoting;
}
void OAIGetUserExternalId_200_response_user_user_option::setEnableQuoting(const bool &enable_quoting) {
    m_enable_quoting = enable_quoting;
    m_enable_quoting_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_enable_quoting_Set() const{
    return m_enable_quoting_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_enable_quoting_Valid() const{
    return m_enable_quoting_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isExternalLinksInNewTab() const {
    return m_external_links_in_new_tab;
}
void OAIGetUserExternalId_200_response_user_user_option::setExternalLinksInNewTab(const bool &external_links_in_new_tab) {
    m_external_links_in_new_tab = external_links_in_new_tab;
    m_external_links_in_new_tab_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_external_links_in_new_tab_Set() const{
    return m_external_links_in_new_tab_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_external_links_in_new_tab_Valid() const{
    return m_external_links_in_new_tab_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isHideProfileAndPresence() const {
    return m_hide_profile_and_presence;
}
void OAIGetUserExternalId_200_response_user_user_option::setHideProfileAndPresence(const bool &hide_profile_and_presence) {
    m_hide_profile_and_presence = hide_profile_and_presence;
    m_hide_profile_and_presence_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_hide_profile_and_presence_Set() const{
    return m_hide_profile_and_presence_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_hide_profile_and_presence_Valid() const{
    return m_hide_profile_and_presence_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getHomepageId() const {
    return m_homepage_id;
}
void OAIGetUserExternalId_200_response_user_user_option::setHomepageId(const QString &homepage_id) {
    m_homepage_id = homepage_id;
    m_homepage_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_homepage_id_Set() const{
    return m_homepage_id_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_homepage_id_Valid() const{
    return m_homepage_id_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isIncludeTl0InDigests() const {
    return m_include_tl0_in_digests;
}
void OAIGetUserExternalId_200_response_user_user_option::setIncludeTl0InDigests(const bool &include_tl0_in_digests) {
    m_include_tl0_in_digests = include_tl0_in_digests;
    m_include_tl0_in_digests_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_include_tl0_in_digests_Set() const{
    return m_include_tl0_in_digests_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_include_tl0_in_digests_Valid() const{
    return m_include_tl0_in_digests_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getLikeNotificationFrequency() const {
    return m_like_notification_frequency;
}
void OAIGetUserExternalId_200_response_user_user_option::setLikeNotificationFrequency(const qint32 &like_notification_frequency) {
    m_like_notification_frequency = like_notification_frequency;
    m_like_notification_frequency_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_like_notification_frequency_Set() const{
    return m_like_notification_frequency_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_like_notification_frequency_Valid() const{
    return m_like_notification_frequency_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isMailingListMode() const {
    return m_mailing_list_mode;
}
void OAIGetUserExternalId_200_response_user_user_option::setMailingListMode(const bool &mailing_list_mode) {
    m_mailing_list_mode = mailing_list_mode;
    m_mailing_list_mode_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_mailing_list_mode_Set() const{
    return m_mailing_list_mode_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_mailing_list_mode_Valid() const{
    return m_mailing_list_mode_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getMailingListModeFrequency() const {
    return m_mailing_list_mode_frequency;
}
void OAIGetUserExternalId_200_response_user_user_option::setMailingListModeFrequency(const qint32 &mailing_list_mode_frequency) {
    m_mailing_list_mode_frequency = mailing_list_mode_frequency;
    m_mailing_list_mode_frequency_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_mailing_list_mode_frequency_Set() const{
    return m_mailing_list_mode_frequency_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_mailing_list_mode_frequency_Valid() const{
    return m_mailing_list_mode_frequency_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getNewTopicDurationMinutes() const {
    return m_new_topic_duration_minutes;
}
void OAIGetUserExternalId_200_response_user_user_option::setNewTopicDurationMinutes(const qint32 &new_topic_duration_minutes) {
    m_new_topic_duration_minutes = new_topic_duration_minutes;
    m_new_topic_duration_minutes_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_new_topic_duration_minutes_Set() const{
    return m_new_topic_duration_minutes_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_new_topic_duration_minutes_Valid() const{
    return m_new_topic_duration_minutes_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getNotificationLevelWhenReplying() const {
    return m_notification_level_when_replying;
}
void OAIGetUserExternalId_200_response_user_user_option::setNotificationLevelWhenReplying(const qint32 &notification_level_when_replying) {
    m_notification_level_when_replying = notification_level_when_replying;
    m_notification_level_when_replying_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_notification_level_when_replying_Set() const{
    return m_notification_level_when_replying_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_notification_level_when_replying_Valid() const{
    return m_notification_level_when_replying_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getOldestSearchLogDate() const {
    return m_oldest_search_log_date;
}
void OAIGetUserExternalId_200_response_user_user_option::setOldestSearchLogDate(const QString &oldest_search_log_date) {
    m_oldest_search_log_date = oldest_search_log_date;
    m_oldest_search_log_date_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_oldest_search_log_date_Set() const{
    return m_oldest_search_log_date_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_oldest_search_log_date_Valid() const{
    return m_oldest_search_log_date_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user_user_option::getSeenPopups() const {
    return m_seen_popups;
}
void OAIGetUserExternalId_200_response_user_user_option::setSeenPopups(const QList<QJsonValue> &seen_popups) {
    m_seen_popups = seen_popups;
    m_seen_popups_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_seen_popups_Set() const{
    return m_seen_popups_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_seen_popups_Valid() const{
    return m_seen_popups_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getSidebarListDestination() const {
    return m_sidebar_list_destination;
}
void OAIGetUserExternalId_200_response_user_user_option::setSidebarListDestination(const QString &sidebar_list_destination) {
    m_sidebar_list_destination = sidebar_list_destination;
    m_sidebar_list_destination_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_sidebar_list_destination_Set() const{
    return m_sidebar_list_destination_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_sidebar_list_destination_Valid() const{
    return m_sidebar_list_destination_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isSkipNewUserTips() const {
    return m_skip_new_user_tips;
}
void OAIGetUserExternalId_200_response_user_user_option::setSkipNewUserTips(const bool &skip_new_user_tips) {
    m_skip_new_user_tips = skip_new_user_tips;
    m_skip_new_user_tips_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_skip_new_user_tips_Set() const{
    return m_skip_new_user_tips_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_skip_new_user_tips_Valid() const{
    return m_skip_new_user_tips_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getTextSize() const {
    return m_text_size;
}
void OAIGetUserExternalId_200_response_user_user_option::setTextSize(const QString &text_size) {
    m_text_size = text_size;
    m_text_size_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_text_size_Set() const{
    return m_text_size_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_text_size_Valid() const{
    return m_text_size_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getTextSizeSeq() const {
    return m_text_size_seq;
}
void OAIGetUserExternalId_200_response_user_user_option::setTextSizeSeq(const qint32 &text_size_seq) {
    m_text_size_seq = text_size_seq;
    m_text_size_seq_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_text_size_seq_Set() const{
    return m_text_size_seq_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_text_size_seq_Valid() const{
    return m_text_size_seq_isValid;
}

QList<QJsonValue> OAIGetUserExternalId_200_response_user_user_option::getThemeIds() const {
    return m_theme_ids;
}
void OAIGetUserExternalId_200_response_user_user_option::setThemeIds(const QList<QJsonValue> &theme_ids) {
    m_theme_ids = theme_ids;
    m_theme_ids_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_theme_ids_Set() const{
    return m_theme_ids_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_theme_ids_Valid() const{
    return m_theme_ids_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getThemeKeySeq() const {
    return m_theme_key_seq;
}
void OAIGetUserExternalId_200_response_user_user_option::setThemeKeySeq(const qint32 &theme_key_seq) {
    m_theme_key_seq = theme_key_seq;
    m_theme_key_seq_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_theme_key_seq_Set() const{
    return m_theme_key_seq_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_theme_key_seq_Valid() const{
    return m_theme_key_seq_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getTimezone() const {
    return m_timezone;
}
void OAIGetUserExternalId_200_response_user_user_option::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIGetUserExternalId_200_response_user_user_option::getTitleCountMode() const {
    return m_title_count_mode;
}
void OAIGetUserExternalId_200_response_user_user_option::setTitleCountMode(const QString &title_count_mode) {
    m_title_count_mode = title_count_mode;
    m_title_count_mode_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_title_count_mode_Set() const{
    return m_title_count_mode_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_title_count_mode_Valid() const{
    return m_title_count_mode_isValid;
}

qint32 OAIGetUserExternalId_200_response_user_user_option::getUserId() const {
    return m_user_id;
}
void OAIGetUserExternalId_200_response_user_user_option::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetUserExternalId_200_response_user_user_option::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGetUserExternalId_200_response_user_user_option::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_private_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_track_topics_after_msecs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatically_unpin_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmark_auto_delete_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_scheme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dark_scheme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_calendar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_after_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_favicon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_digests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_in_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_messages_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_previous_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_allowed_pm_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_defer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_quoting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_links_in_new_tab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_profile_and_presence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_tl0_in_digests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_notification_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_list_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_list_mode_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_topic_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_level_when_replying_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oldest_search_log_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seen_popups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidebar_list_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_new_user_tips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_size_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_key_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_count_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUserExternalId_200_response_user_user_option::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_private_messages_isValid && m_auto_track_topics_after_msecs_isValid && m_automatically_unpin_topics_isValid && m_color_scheme_id_isValid && m_dark_scheme_id_isValid && m_digest_after_minutes_isValid && m_dynamic_favicon_isValid && m_email_digests_isValid && m_email_in_reply_to_isValid && m_email_level_isValid && m_email_messages_level_isValid && m_email_previous_replies_isValid && m_enable_allowed_pm_users_isValid && m_enable_defer_isValid && m_enable_quoting_isValid && m_external_links_in_new_tab_isValid && m_hide_profile_and_presence_isValid && m_homepage_id_isValid && m_include_tl0_in_digests_isValid && m_like_notification_frequency_isValid && m_mailing_list_mode_isValid && m_mailing_list_mode_frequency_isValid && m_new_topic_duration_minutes_isValid && m_notification_level_when_replying_isValid && m_skip_new_user_tips_isValid && m_text_size_isValid && m_text_size_seq_isValid && m_theme_ids_isValid && m_theme_key_seq_isValid && m_timezone_isValid && m_title_count_mode_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
