/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetUserExternalId_200_response_user_user_notification_schedule.h
 *
 * 
 */

#ifndef OAIGetUserExternalId_200_response_user_user_notification_schedule_H
#define OAIGetUserExternalId_200_response_user_user_notification_schedule_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetUserExternalId_200_response_user_user_notification_schedule : public OAIObject {
public:
    OAIGetUserExternalId_200_response_user_user_notification_schedule();
    OAIGetUserExternalId_200_response_user_user_notification_schedule(QString json);
    ~OAIGetUserExternalId_200_response_user_user_notification_schedule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDay0EndTime() const;
    void setDay0EndTime(const qint32 &day_0_end_time);
    bool is_day_0_end_time_Set() const;
    bool is_day_0_end_time_Valid() const;

    qint32 getDay0StartTime() const;
    void setDay0StartTime(const qint32 &day_0_start_time);
    bool is_day_0_start_time_Set() const;
    bool is_day_0_start_time_Valid() const;

    qint32 getDay1EndTime() const;
    void setDay1EndTime(const qint32 &day_1_end_time);
    bool is_day_1_end_time_Set() const;
    bool is_day_1_end_time_Valid() const;

    qint32 getDay1StartTime() const;
    void setDay1StartTime(const qint32 &day_1_start_time);
    bool is_day_1_start_time_Set() const;
    bool is_day_1_start_time_Valid() const;

    qint32 getDay2EndTime() const;
    void setDay2EndTime(const qint32 &day_2_end_time);
    bool is_day_2_end_time_Set() const;
    bool is_day_2_end_time_Valid() const;

    qint32 getDay2StartTime() const;
    void setDay2StartTime(const qint32 &day_2_start_time);
    bool is_day_2_start_time_Set() const;
    bool is_day_2_start_time_Valid() const;

    qint32 getDay3EndTime() const;
    void setDay3EndTime(const qint32 &day_3_end_time);
    bool is_day_3_end_time_Set() const;
    bool is_day_3_end_time_Valid() const;

    qint32 getDay3StartTime() const;
    void setDay3StartTime(const qint32 &day_3_start_time);
    bool is_day_3_start_time_Set() const;
    bool is_day_3_start_time_Valid() const;

    qint32 getDay4EndTime() const;
    void setDay4EndTime(const qint32 &day_4_end_time);
    bool is_day_4_end_time_Set() const;
    bool is_day_4_end_time_Valid() const;

    qint32 getDay4StartTime() const;
    void setDay4StartTime(const qint32 &day_4_start_time);
    bool is_day_4_start_time_Set() const;
    bool is_day_4_start_time_Valid() const;

    qint32 getDay5EndTime() const;
    void setDay5EndTime(const qint32 &day_5_end_time);
    bool is_day_5_end_time_Set() const;
    bool is_day_5_end_time_Valid() const;

    qint32 getDay5StartTime() const;
    void setDay5StartTime(const qint32 &day_5_start_time);
    bool is_day_5_start_time_Set() const;
    bool is_day_5_start_time_Valid() const;

    qint32 getDay6EndTime() const;
    void setDay6EndTime(const qint32 &day_6_end_time);
    bool is_day_6_end_time_Set() const;
    bool is_day_6_end_time_Valid() const;

    qint32 getDay6StartTime() const;
    void setDay6StartTime(const qint32 &day_6_start_time);
    bool is_day_6_start_time_Set() const;
    bool is_day_6_start_time_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_day_0_end_time;
    bool m_day_0_end_time_isSet;
    bool m_day_0_end_time_isValid;

    qint32 m_day_0_start_time;
    bool m_day_0_start_time_isSet;
    bool m_day_0_start_time_isValid;

    qint32 m_day_1_end_time;
    bool m_day_1_end_time_isSet;
    bool m_day_1_end_time_isValid;

    qint32 m_day_1_start_time;
    bool m_day_1_start_time_isSet;
    bool m_day_1_start_time_isValid;

    qint32 m_day_2_end_time;
    bool m_day_2_end_time_isSet;
    bool m_day_2_end_time_isValid;

    qint32 m_day_2_start_time;
    bool m_day_2_start_time_isSet;
    bool m_day_2_start_time_isValid;

    qint32 m_day_3_end_time;
    bool m_day_3_end_time_isSet;
    bool m_day_3_end_time_isValid;

    qint32 m_day_3_start_time;
    bool m_day_3_start_time_isSet;
    bool m_day_3_start_time_isValid;

    qint32 m_day_4_end_time;
    bool m_day_4_end_time_isSet;
    bool m_day_4_end_time_isValid;

    qint32 m_day_4_start_time;
    bool m_day_4_start_time_isSet;
    bool m_day_4_start_time_isValid;

    qint32 m_day_5_end_time;
    bool m_day_5_end_time_isSet;
    bool m_day_5_end_time_isValid;

    qint32 m_day_5_start_time;
    bool m_day_5_start_time_isSet;
    bool m_day_5_start_time_isValid;

    qint32 m_day_6_end_time;
    bool m_day_6_end_time_isSet;
    bool m_day_6_end_time_isValid;

    qint32 m_day_6_start_time;
    bool m_day_6_start_time_isSet;
    bool m_day_6_start_time_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetUserExternalId_200_response_user_user_notification_schedule)

#endif // OAIGetUserExternalId_200_response_user_user_notification_schedule_H
