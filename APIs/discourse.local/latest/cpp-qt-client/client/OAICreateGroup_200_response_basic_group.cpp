/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGroup_200_response_basic_group.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGroup_200_response_basic_group::OAICreateGroup_200_response_basic_group(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGroup_200_response_basic_group::OAICreateGroup_200_response_basic_group() {
    this->initializeModel();
}

OAICreateGroup_200_response_basic_group::~OAICreateGroup_200_response_basic_group() {}

void OAICreateGroup_200_response_basic_group::initializeModel() {

    m_allow_membership_requests_isSet = false;
    m_allow_membership_requests_isValid = false;

    m_automatic_isSet = false;
    m_automatic_isValid = false;

    m_bio_cooked_isSet = false;
    m_bio_cooked_isValid = false;

    m_bio_excerpt_isSet = false;
    m_bio_excerpt_isValid = false;

    m_bio_raw_isSet = false;
    m_bio_raw_isValid = false;

    m_can_admin_group_isSet = false;
    m_can_admin_group_isValid = false;

    m_can_edit_group_isSet = false;
    m_can_edit_group_isValid = false;

    m_can_see_members_isSet = false;
    m_can_see_members_isValid = false;

    m_default_notification_level_isSet = false;
    m_default_notification_level_isValid = false;

    m_flair_bg_color_isSet = false;
    m_flair_bg_color_isValid = false;

    m_flair_color_isSet = false;
    m_flair_color_isValid = false;

    m_flair_url_isSet = false;
    m_flair_url_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_grant_trust_level_isSet = false;
    m_grant_trust_level_isValid = false;

    m_has_messages_isSet = false;
    m_has_messages_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_incoming_email_isSet = false;
    m_incoming_email_isValid = false;

    m_members_visibility_level_isSet = false;
    m_members_visibility_level_isValid = false;

    m_membership_request_template_isSet = false;
    m_membership_request_template_isValid = false;

    m_mentionable_level_isSet = false;
    m_mentionable_level_isValid = false;

    m_messageable_level_isSet = false;
    m_messageable_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_group_isSet = false;
    m_primary_group_isValid = false;

    m_public_admission_isSet = false;
    m_public_admission_isValid = false;

    m_public_exit_isSet = false;
    m_public_exit_isValid = false;

    m_publish_read_state_isSet = false;
    m_publish_read_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_visibility_level_isSet = false;
    m_visibility_level_isValid = false;
}

void OAICreateGroup_200_response_basic_group::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGroup_200_response_basic_group::fromJsonObject(QJsonObject json) {

    m_allow_membership_requests_isValid = ::OpenAPI::fromJsonValue(m_allow_membership_requests, json[QString("allow_membership_requests")]);
    m_allow_membership_requests_isSet = !json[QString("allow_membership_requests")].isNull() && m_allow_membership_requests_isValid;

    m_automatic_isValid = ::OpenAPI::fromJsonValue(m_automatic, json[QString("automatic")]);
    m_automatic_isSet = !json[QString("automatic")].isNull() && m_automatic_isValid;

    m_bio_cooked_isValid = ::OpenAPI::fromJsonValue(m_bio_cooked, json[QString("bio_cooked")]);
    m_bio_cooked_isSet = !json[QString("bio_cooked")].isNull() && m_bio_cooked_isValid;

    m_bio_excerpt_isValid = ::OpenAPI::fromJsonValue(m_bio_excerpt, json[QString("bio_excerpt")]);
    m_bio_excerpt_isSet = !json[QString("bio_excerpt")].isNull() && m_bio_excerpt_isValid;

    m_bio_raw_isValid = ::OpenAPI::fromJsonValue(m_bio_raw, json[QString("bio_raw")]);
    m_bio_raw_isSet = !json[QString("bio_raw")].isNull() && m_bio_raw_isValid;

    m_can_admin_group_isValid = ::OpenAPI::fromJsonValue(m_can_admin_group, json[QString("can_admin_group")]);
    m_can_admin_group_isSet = !json[QString("can_admin_group")].isNull() && m_can_admin_group_isValid;

    m_can_edit_group_isValid = ::OpenAPI::fromJsonValue(m_can_edit_group, json[QString("can_edit_group")]);
    m_can_edit_group_isSet = !json[QString("can_edit_group")].isNull() && m_can_edit_group_isValid;

    m_can_see_members_isValid = ::OpenAPI::fromJsonValue(m_can_see_members, json[QString("can_see_members")]);
    m_can_see_members_isSet = !json[QString("can_see_members")].isNull() && m_can_see_members_isValid;

    m_default_notification_level_isValid = ::OpenAPI::fromJsonValue(m_default_notification_level, json[QString("default_notification_level")]);
    m_default_notification_level_isSet = !json[QString("default_notification_level")].isNull() && m_default_notification_level_isValid;

    m_flair_bg_color_isValid = ::OpenAPI::fromJsonValue(m_flair_bg_color, json[QString("flair_bg_color")]);
    m_flair_bg_color_isSet = !json[QString("flair_bg_color")].isNull() && m_flair_bg_color_isValid;

    m_flair_color_isValid = ::OpenAPI::fromJsonValue(m_flair_color, json[QString("flair_color")]);
    m_flair_color_isSet = !json[QString("flair_color")].isNull() && m_flair_color_isValid;

    m_flair_url_isValid = ::OpenAPI::fromJsonValue(m_flair_url, json[QString("flair_url")]);
    m_flair_url_isSet = !json[QString("flair_url")].isNull() && m_flair_url_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_grant_trust_level_isValid = ::OpenAPI::fromJsonValue(m_grant_trust_level, json[QString("grant_trust_level")]);
    m_grant_trust_level_isSet = !json[QString("grant_trust_level")].isNull() && m_grant_trust_level_isValid;

    m_has_messages_isValid = ::OpenAPI::fromJsonValue(m_has_messages, json[QString("has_messages")]);
    m_has_messages_isSet = !json[QString("has_messages")].isNull() && m_has_messages_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_incoming_email_isValid = ::OpenAPI::fromJsonValue(m_incoming_email, json[QString("incoming_email")]);
    m_incoming_email_isSet = !json[QString("incoming_email")].isNull() && m_incoming_email_isValid;

    m_members_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_members_visibility_level, json[QString("members_visibility_level")]);
    m_members_visibility_level_isSet = !json[QString("members_visibility_level")].isNull() && m_members_visibility_level_isValid;

    m_membership_request_template_isValid = ::OpenAPI::fromJsonValue(m_membership_request_template, json[QString("membership_request_template")]);
    m_membership_request_template_isSet = !json[QString("membership_request_template")].isNull() && m_membership_request_template_isValid;

    m_mentionable_level_isValid = ::OpenAPI::fromJsonValue(m_mentionable_level, json[QString("mentionable_level")]);
    m_mentionable_level_isSet = !json[QString("mentionable_level")].isNull() && m_mentionable_level_isValid;

    m_messageable_level_isValid = ::OpenAPI::fromJsonValue(m_messageable_level, json[QString("messageable_level")]);
    m_messageable_level_isSet = !json[QString("messageable_level")].isNull() && m_messageable_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_group_isValid = ::OpenAPI::fromJsonValue(m_primary_group, json[QString("primary_group")]);
    m_primary_group_isSet = !json[QString("primary_group")].isNull() && m_primary_group_isValid;

    m_public_admission_isValid = ::OpenAPI::fromJsonValue(m_public_admission, json[QString("public_admission")]);
    m_public_admission_isSet = !json[QString("public_admission")].isNull() && m_public_admission_isValid;

    m_public_exit_isValid = ::OpenAPI::fromJsonValue(m_public_exit, json[QString("public_exit")]);
    m_public_exit_isSet = !json[QString("public_exit")].isNull() && m_public_exit_isValid;

    m_publish_read_state_isValid = ::OpenAPI::fromJsonValue(m_publish_read_state, json[QString("publish_read_state")]);
    m_publish_read_state_isSet = !json[QString("publish_read_state")].isNull() && m_publish_read_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("user_count")]);
    m_user_count_isSet = !json[QString("user_count")].isNull() && m_user_count_isValid;

    m_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_visibility_level, json[QString("visibility_level")]);
    m_visibility_level_isSet = !json[QString("visibility_level")].isNull() && m_visibility_level_isValid;
}

QString OAICreateGroup_200_response_basic_group::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGroup_200_response_basic_group::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_membership_requests_isSet) {
        obj.insert(QString("allow_membership_requests"), ::OpenAPI::toJsonValue(m_allow_membership_requests));
    }
    if (m_automatic_isSet) {
        obj.insert(QString("automatic"), ::OpenAPI::toJsonValue(m_automatic));
    }
    if (m_bio_cooked_isSet) {
        obj.insert(QString("bio_cooked"), ::OpenAPI::toJsonValue(m_bio_cooked));
    }
    if (m_bio_excerpt_isSet) {
        obj.insert(QString("bio_excerpt"), ::OpenAPI::toJsonValue(m_bio_excerpt));
    }
    if (m_bio_raw_isSet) {
        obj.insert(QString("bio_raw"), ::OpenAPI::toJsonValue(m_bio_raw));
    }
    if (m_can_admin_group_isSet) {
        obj.insert(QString("can_admin_group"), ::OpenAPI::toJsonValue(m_can_admin_group));
    }
    if (m_can_edit_group_isSet) {
        obj.insert(QString("can_edit_group"), ::OpenAPI::toJsonValue(m_can_edit_group));
    }
    if (m_can_see_members_isSet) {
        obj.insert(QString("can_see_members"), ::OpenAPI::toJsonValue(m_can_see_members));
    }
    if (m_default_notification_level_isSet) {
        obj.insert(QString("default_notification_level"), ::OpenAPI::toJsonValue(m_default_notification_level));
    }
    if (m_flair_bg_color_isSet) {
        obj.insert(QString("flair_bg_color"), ::OpenAPI::toJsonValue(m_flair_bg_color));
    }
    if (m_flair_color_isSet) {
        obj.insert(QString("flair_color"), ::OpenAPI::toJsonValue(m_flair_color));
    }
    if (m_flair_url_isSet) {
        obj.insert(QString("flair_url"), ::OpenAPI::toJsonValue(m_flair_url));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_grant_trust_level_isSet) {
        obj.insert(QString("grant_trust_level"), ::OpenAPI::toJsonValue(m_grant_trust_level));
    }
    if (m_has_messages_isSet) {
        obj.insert(QString("has_messages"), ::OpenAPI::toJsonValue(m_has_messages));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_incoming_email_isSet) {
        obj.insert(QString("incoming_email"), ::OpenAPI::toJsonValue(m_incoming_email));
    }
    if (m_members_visibility_level_isSet) {
        obj.insert(QString("members_visibility_level"), ::OpenAPI::toJsonValue(m_members_visibility_level));
    }
    if (m_membership_request_template_isSet) {
        obj.insert(QString("membership_request_template"), ::OpenAPI::toJsonValue(m_membership_request_template));
    }
    if (m_mentionable_level_isSet) {
        obj.insert(QString("mentionable_level"), ::OpenAPI::toJsonValue(m_mentionable_level));
    }
    if (m_messageable_level_isSet) {
        obj.insert(QString("messageable_level"), ::OpenAPI::toJsonValue(m_messageable_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_group_isSet) {
        obj.insert(QString("primary_group"), ::OpenAPI::toJsonValue(m_primary_group));
    }
    if (m_public_admission_isSet) {
        obj.insert(QString("public_admission"), ::OpenAPI::toJsonValue(m_public_admission));
    }
    if (m_public_exit_isSet) {
        obj.insert(QString("public_exit"), ::OpenAPI::toJsonValue(m_public_exit));
    }
    if (m_publish_read_state_isSet) {
        obj.insert(QString("publish_read_state"), ::OpenAPI::toJsonValue(m_publish_read_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("user_count"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_visibility_level_isSet) {
        obj.insert(QString("visibility_level"), ::OpenAPI::toJsonValue(m_visibility_level));
    }
    return obj;
}

bool OAICreateGroup_200_response_basic_group::isAllowMembershipRequests() const {
    return m_allow_membership_requests;
}
void OAICreateGroup_200_response_basic_group::setAllowMembershipRequests(const bool &allow_membership_requests) {
    m_allow_membership_requests = allow_membership_requests;
    m_allow_membership_requests_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_allow_membership_requests_Set() const{
    return m_allow_membership_requests_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_allow_membership_requests_Valid() const{
    return m_allow_membership_requests_isValid;
}

bool OAICreateGroup_200_response_basic_group::isAutomatic() const {
    return m_automatic;
}
void OAICreateGroup_200_response_basic_group::setAutomatic(const bool &automatic) {
    m_automatic = automatic;
    m_automatic_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_automatic_Set() const{
    return m_automatic_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_automatic_Valid() const{
    return m_automatic_isValid;
}

QString OAICreateGroup_200_response_basic_group::getBioCooked() const {
    return m_bio_cooked;
}
void OAICreateGroup_200_response_basic_group::setBioCooked(const QString &bio_cooked) {
    m_bio_cooked = bio_cooked;
    m_bio_cooked_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_bio_cooked_Set() const{
    return m_bio_cooked_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_bio_cooked_Valid() const{
    return m_bio_cooked_isValid;
}

QString OAICreateGroup_200_response_basic_group::getBioExcerpt() const {
    return m_bio_excerpt;
}
void OAICreateGroup_200_response_basic_group::setBioExcerpt(const QString &bio_excerpt) {
    m_bio_excerpt = bio_excerpt;
    m_bio_excerpt_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_bio_excerpt_Set() const{
    return m_bio_excerpt_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_bio_excerpt_Valid() const{
    return m_bio_excerpt_isValid;
}

QString OAICreateGroup_200_response_basic_group::getBioRaw() const {
    return m_bio_raw;
}
void OAICreateGroup_200_response_basic_group::setBioRaw(const QString &bio_raw) {
    m_bio_raw = bio_raw;
    m_bio_raw_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_bio_raw_Set() const{
    return m_bio_raw_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_bio_raw_Valid() const{
    return m_bio_raw_isValid;
}

bool OAICreateGroup_200_response_basic_group::isCanAdminGroup() const {
    return m_can_admin_group;
}
void OAICreateGroup_200_response_basic_group::setCanAdminGroup(const bool &can_admin_group) {
    m_can_admin_group = can_admin_group;
    m_can_admin_group_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_can_admin_group_Set() const{
    return m_can_admin_group_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_can_admin_group_Valid() const{
    return m_can_admin_group_isValid;
}

bool OAICreateGroup_200_response_basic_group::isCanEditGroup() const {
    return m_can_edit_group;
}
void OAICreateGroup_200_response_basic_group::setCanEditGroup(const bool &can_edit_group) {
    m_can_edit_group = can_edit_group;
    m_can_edit_group_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_can_edit_group_Set() const{
    return m_can_edit_group_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_can_edit_group_Valid() const{
    return m_can_edit_group_isValid;
}

bool OAICreateGroup_200_response_basic_group::isCanSeeMembers() const {
    return m_can_see_members;
}
void OAICreateGroup_200_response_basic_group::setCanSeeMembers(const bool &can_see_members) {
    m_can_see_members = can_see_members;
    m_can_see_members_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_can_see_members_Set() const{
    return m_can_see_members_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_can_see_members_Valid() const{
    return m_can_see_members_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getDefaultNotificationLevel() const {
    return m_default_notification_level;
}
void OAICreateGroup_200_response_basic_group::setDefaultNotificationLevel(const qint32 &default_notification_level) {
    m_default_notification_level = default_notification_level;
    m_default_notification_level_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_default_notification_level_Set() const{
    return m_default_notification_level_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_default_notification_level_Valid() const{
    return m_default_notification_level_isValid;
}

QString OAICreateGroup_200_response_basic_group::getFlairBgColor() const {
    return m_flair_bg_color;
}
void OAICreateGroup_200_response_basic_group::setFlairBgColor(const QString &flair_bg_color) {
    m_flair_bg_color = flair_bg_color;
    m_flair_bg_color_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_flair_bg_color_Set() const{
    return m_flair_bg_color_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_flair_bg_color_Valid() const{
    return m_flair_bg_color_isValid;
}

QString OAICreateGroup_200_response_basic_group::getFlairColor() const {
    return m_flair_color;
}
void OAICreateGroup_200_response_basic_group::setFlairColor(const QString &flair_color) {
    m_flair_color = flair_color;
    m_flair_color_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_flair_color_Set() const{
    return m_flair_color_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_flair_color_Valid() const{
    return m_flair_color_isValid;
}

QString OAICreateGroup_200_response_basic_group::getFlairUrl() const {
    return m_flair_url;
}
void OAICreateGroup_200_response_basic_group::setFlairUrl(const QString &flair_url) {
    m_flair_url = flair_url;
    m_flair_url_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_flair_url_Set() const{
    return m_flair_url_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_flair_url_Valid() const{
    return m_flair_url_isValid;
}

QString OAICreateGroup_200_response_basic_group::getFullName() const {
    return m_full_name;
}
void OAICreateGroup_200_response_basic_group::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAICreateGroup_200_response_basic_group::getGrantTrustLevel() const {
    return m_grant_trust_level;
}
void OAICreateGroup_200_response_basic_group::setGrantTrustLevel(const QString &grant_trust_level) {
    m_grant_trust_level = grant_trust_level;
    m_grant_trust_level_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_grant_trust_level_Set() const{
    return m_grant_trust_level_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_grant_trust_level_Valid() const{
    return m_grant_trust_level_isValid;
}

bool OAICreateGroup_200_response_basic_group::isHasMessages() const {
    return m_has_messages;
}
void OAICreateGroup_200_response_basic_group::setHasMessages(const bool &has_messages) {
    m_has_messages = has_messages;
    m_has_messages_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_has_messages_Set() const{
    return m_has_messages_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_has_messages_Valid() const{
    return m_has_messages_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getId() const {
    return m_id;
}
void OAICreateGroup_200_response_basic_group::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateGroup_200_response_basic_group::getIncomingEmail() const {
    return m_incoming_email;
}
void OAICreateGroup_200_response_basic_group::setIncomingEmail(const QString &incoming_email) {
    m_incoming_email = incoming_email;
    m_incoming_email_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_incoming_email_Set() const{
    return m_incoming_email_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_incoming_email_Valid() const{
    return m_incoming_email_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getMembersVisibilityLevel() const {
    return m_members_visibility_level;
}
void OAICreateGroup_200_response_basic_group::setMembersVisibilityLevel(const qint32 &members_visibility_level) {
    m_members_visibility_level = members_visibility_level;
    m_members_visibility_level_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_members_visibility_level_Set() const{
    return m_members_visibility_level_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_members_visibility_level_Valid() const{
    return m_members_visibility_level_isValid;
}

QString OAICreateGroup_200_response_basic_group::getMembershipRequestTemplate() const {
    return m_membership_request_template;
}
void OAICreateGroup_200_response_basic_group::setMembershipRequestTemplate(const QString &membership_request_template) {
    m_membership_request_template = membership_request_template;
    m_membership_request_template_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_membership_request_template_Set() const{
    return m_membership_request_template_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_membership_request_template_Valid() const{
    return m_membership_request_template_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getMentionableLevel() const {
    return m_mentionable_level;
}
void OAICreateGroup_200_response_basic_group::setMentionableLevel(const qint32 &mentionable_level) {
    m_mentionable_level = mentionable_level;
    m_mentionable_level_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_mentionable_level_Set() const{
    return m_mentionable_level_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_mentionable_level_Valid() const{
    return m_mentionable_level_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getMessageableLevel() const {
    return m_messageable_level;
}
void OAICreateGroup_200_response_basic_group::setMessageableLevel(const qint32 &messageable_level) {
    m_messageable_level = messageable_level;
    m_messageable_level_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_messageable_level_Set() const{
    return m_messageable_level_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_messageable_level_Valid() const{
    return m_messageable_level_isValid;
}

QString OAICreateGroup_200_response_basic_group::getName() const {
    return m_name;
}
void OAICreateGroup_200_response_basic_group::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateGroup_200_response_basic_group::isPrimaryGroup() const {
    return m_primary_group;
}
void OAICreateGroup_200_response_basic_group::setPrimaryGroup(const bool &primary_group) {
    m_primary_group = primary_group;
    m_primary_group_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_primary_group_Set() const{
    return m_primary_group_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_primary_group_Valid() const{
    return m_primary_group_isValid;
}

bool OAICreateGroup_200_response_basic_group::isPublicAdmission() const {
    return m_public_admission;
}
void OAICreateGroup_200_response_basic_group::setPublicAdmission(const bool &public_admission) {
    m_public_admission = public_admission;
    m_public_admission_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_public_admission_Set() const{
    return m_public_admission_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_public_admission_Valid() const{
    return m_public_admission_isValid;
}

bool OAICreateGroup_200_response_basic_group::isPublicExit() const {
    return m_public_exit;
}
void OAICreateGroup_200_response_basic_group::setPublicExit(const bool &public_exit) {
    m_public_exit = public_exit;
    m_public_exit_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_public_exit_Set() const{
    return m_public_exit_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_public_exit_Valid() const{
    return m_public_exit_isValid;
}

bool OAICreateGroup_200_response_basic_group::isPublishReadState() const {
    return m_publish_read_state;
}
void OAICreateGroup_200_response_basic_group::setPublishReadState(const bool &publish_read_state) {
    m_publish_read_state = publish_read_state;
    m_publish_read_state_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_publish_read_state_Set() const{
    return m_publish_read_state_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_publish_read_state_Valid() const{
    return m_publish_read_state_isValid;
}

QString OAICreateGroup_200_response_basic_group::getTitle() const {
    return m_title;
}
void OAICreateGroup_200_response_basic_group::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getUserCount() const {
    return m_user_count;
}
void OAICreateGroup_200_response_basic_group::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_user_count_Valid() const{
    return m_user_count_isValid;
}

qint32 OAICreateGroup_200_response_basic_group::getVisibilityLevel() const {
    return m_visibility_level;
}
void OAICreateGroup_200_response_basic_group::setVisibilityLevel(const qint32 &visibility_level) {
    m_visibility_level = visibility_level;
    m_visibility_level_isSet = true;
}

bool OAICreateGroup_200_response_basic_group::is_visibility_level_Set() const{
    return m_visibility_level_isSet;
}

bool OAICreateGroup_200_response_basic_group::is_visibility_level_Valid() const{
    return m_visibility_level_isValid;
}

bool OAICreateGroup_200_response_basic_group::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_membership_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_cooked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_admin_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_see_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_notification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_bg_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flair_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_request_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentionable_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messageable_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_admission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_exit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_read_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGroup_200_response_basic_group::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_membership_requests_isValid && m_automatic_isValid && m_bio_cooked_isValid && m_bio_excerpt_isValid && m_bio_raw_isValid && m_can_admin_group_isValid && m_can_see_members_isValid && m_default_notification_level_isValid && m_flair_bg_color_isValid && m_flair_color_isValid && m_flair_url_isValid && m_full_name_isValid && m_grant_trust_level_isValid && m_has_messages_isValid && m_id_isValid && m_incoming_email_isValid && m_members_visibility_level_isValid && m_membership_request_template_isValid && m_mentionable_level_isValid && m_messageable_level_isValid && m_name_isValid && m_primary_group_isValid && m_public_admission_isValid && m_public_exit_isValid && m_publish_read_state_isValid && m_title_isValid && m_user_count_isValid && m_visibility_level_isValid && true;
}

} // namespace OpenAPI
