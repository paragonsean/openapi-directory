/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateUpload_200_response.h
 *
 * 
 */

#ifndef OAICreateUpload_200_response_H
#define OAICreateUpload_200_response_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateUpload_200_response : public OAIObject {
public:
    OAICreateUpload_200_response();
    OAICreateUpload_200_response(QString json);
    ~OAICreateUpload_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDominantColor() const;
    void setDominantColor(const QString &dominant_color);
    bool is_dominant_color_Set() const;
    bool is_dominant_color_Valid() const;

    QString getExtension() const;
    void setExtension(const QString &extension);
    bool is_extension_Set() const;
    bool is_extension_Valid() const;

    qint32 getFilesize() const;
    void setFilesize(const qint32 &filesize);
    bool is_filesize_Set() const;
    bool is_filesize_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    QString getHumanFilesize() const;
    void setHumanFilesize(const QString &human_filesize);
    bool is_human_filesize_Set() const;
    bool is_human_filesize_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOriginalFilename() const;
    void setOriginalFilename(const QString &original_filename);
    bool is_original_filename_Set() const;
    bool is_original_filename_Valid() const;

    QString getRetainHours() const;
    void setRetainHours(const QString &retain_hours);
    bool is_retain_hours_Set() const;
    bool is_retain_hours_Valid() const;

    QString getShortPath() const;
    void setShortPath(const QString &short_path);
    bool is_short_path_Set() const;
    bool is_short_path_Valid() const;

    QString getShortUrl() const;
    void setShortUrl(const QString &short_url);
    bool is_short_url_Set() const;
    bool is_short_url_Valid() const;

    qint32 getThumbnailHeight() const;
    void setThumbnailHeight(const qint32 &thumbnail_height);
    bool is_thumbnail_height_Set() const;
    bool is_thumbnail_height_Valid() const;

    qint32 getThumbnailWidth() const;
    void setThumbnailWidth(const qint32 &thumbnail_width);
    bool is_thumbnail_width_Set() const;
    bool is_thumbnail_width_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dominant_color;
    bool m_dominant_color_isSet;
    bool m_dominant_color_isValid;

    QString m_extension;
    bool m_extension_isSet;
    bool m_extension_isValid;

    qint32 m_filesize;
    bool m_filesize_isSet;
    bool m_filesize_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    QString m_human_filesize;
    bool m_human_filesize_isSet;
    bool m_human_filesize_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_original_filename;
    bool m_original_filename_isSet;
    bool m_original_filename_isValid;

    QString m_retain_hours;
    bool m_retain_hours_isSet;
    bool m_retain_hours_isValid;

    QString m_short_path;
    bool m_short_path_isSet;
    bool m_short_path_isValid;

    QString m_short_url;
    bool m_short_url_isSet;
    bool m_short_url_isValid;

    qint32 m_thumbnail_height;
    bool m_thumbnail_height_isSet;
    bool m_thumbnail_height_isValid;

    qint32 m_thumbnail_width;
    bool m_thumbnail_width_isSet;
    bool m_thumbnail_width_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateUpload_200_response)

#endif // OAICreateUpload_200_response_H
