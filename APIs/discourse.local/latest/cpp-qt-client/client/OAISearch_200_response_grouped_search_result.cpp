/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_200_response_grouped_search_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_200_response_grouped_search_result::OAISearch_200_response_grouped_search_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_200_response_grouped_search_result::OAISearch_200_response_grouped_search_result() {
    this->initializeModel();
}

OAISearch_200_response_grouped_search_result::~OAISearch_200_response_grouped_search_result() {}

void OAISearch_200_response_grouped_search_result::initializeModel() {

    m_can_create_topic_isSet = false;
    m_can_create_topic_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_more_categories_isSet = false;
    m_more_categories_isValid = false;

    m_more_full_page_results_isSet = false;
    m_more_full_page_results_isValid = false;

    m_more_posts_isSet = false;
    m_more_posts_isValid = false;

    m_more_users_isSet = false;
    m_more_users_isValid = false;

    m_post_ids_isSet = false;
    m_post_ids_isValid = false;

    m_search_log_id_isSet = false;
    m_search_log_id_isValid = false;

    m_tag_ids_isSet = false;
    m_tag_ids_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_user_ids_isSet = false;
    m_user_ids_isValid = false;
}

void OAISearch_200_response_grouped_search_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_200_response_grouped_search_result::fromJsonObject(QJsonObject json) {

    m_can_create_topic_isValid = ::OpenAPI::fromJsonValue(m_can_create_topic, json[QString("can_create_topic")]);
    m_can_create_topic_isSet = !json[QString("can_create_topic")].isNull() && m_can_create_topic_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("category_ids")]);
    m_category_ids_isSet = !json[QString("category_ids")].isNull() && m_category_ids_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_more_categories_isValid = ::OpenAPI::fromJsonValue(m_more_categories, json[QString("more_categories")]);
    m_more_categories_isSet = !json[QString("more_categories")].isNull() && m_more_categories_isValid;

    m_more_full_page_results_isValid = ::OpenAPI::fromJsonValue(m_more_full_page_results, json[QString("more_full_page_results")]);
    m_more_full_page_results_isSet = !json[QString("more_full_page_results")].isNull() && m_more_full_page_results_isValid;

    m_more_posts_isValid = ::OpenAPI::fromJsonValue(m_more_posts, json[QString("more_posts")]);
    m_more_posts_isSet = !json[QString("more_posts")].isNull() && m_more_posts_isValid;

    m_more_users_isValid = ::OpenAPI::fromJsonValue(m_more_users, json[QString("more_users")]);
    m_more_users_isSet = !json[QString("more_users")].isNull() && m_more_users_isValid;

    m_post_ids_isValid = ::OpenAPI::fromJsonValue(m_post_ids, json[QString("post_ids")]);
    m_post_ids_isSet = !json[QString("post_ids")].isNull() && m_post_ids_isValid;

    m_search_log_id_isValid = ::OpenAPI::fromJsonValue(m_search_log_id, json[QString("search_log_id")]);
    m_search_log_id_isSet = !json[QString("search_log_id")].isNull() && m_search_log_id_isValid;

    m_tag_ids_isValid = ::OpenAPI::fromJsonValue(m_tag_ids, json[QString("tag_ids")]);
    m_tag_ids_isSet = !json[QString("tag_ids")].isNull() && m_tag_ids_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_user_ids_isValid = ::OpenAPI::fromJsonValue(m_user_ids, json[QString("user_ids")]);
    m_user_ids_isSet = !json[QString("user_ids")].isNull() && m_user_ids_isValid;
}

QString OAISearch_200_response_grouped_search_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_200_response_grouped_search_result::asJsonObject() const {
    QJsonObject obj;
    if (m_can_create_topic_isSet) {
        obj.insert(QString("can_create_topic"), ::OpenAPI::toJsonValue(m_can_create_topic));
    }
    if (m_category_ids.size() > 0) {
        obj.insert(QString("category_ids"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_group_ids.size() > 0) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_more_categories_isSet) {
        obj.insert(QString("more_categories"), ::OpenAPI::toJsonValue(m_more_categories));
    }
    if (m_more_full_page_results_isSet) {
        obj.insert(QString("more_full_page_results"), ::OpenAPI::toJsonValue(m_more_full_page_results));
    }
    if (m_more_posts_isSet) {
        obj.insert(QString("more_posts"), ::OpenAPI::toJsonValue(m_more_posts));
    }
    if (m_more_users_isSet) {
        obj.insert(QString("more_users"), ::OpenAPI::toJsonValue(m_more_users));
    }
    if (m_post_ids.size() > 0) {
        obj.insert(QString("post_ids"), ::OpenAPI::toJsonValue(m_post_ids));
    }
    if (m_search_log_id_isSet) {
        obj.insert(QString("search_log_id"), ::OpenAPI::toJsonValue(m_search_log_id));
    }
    if (m_tag_ids.size() > 0) {
        obj.insert(QString("tag_ids"), ::OpenAPI::toJsonValue(m_tag_ids));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_user_ids.size() > 0) {
        obj.insert(QString("user_ids"), ::OpenAPI::toJsonValue(m_user_ids));
    }
    return obj;
}

bool OAISearch_200_response_grouped_search_result::isCanCreateTopic() const {
    return m_can_create_topic;
}
void OAISearch_200_response_grouped_search_result::setCanCreateTopic(const bool &can_create_topic) {
    m_can_create_topic = can_create_topic;
    m_can_create_topic_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_can_create_topic_Set() const{
    return m_can_create_topic_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_can_create_topic_Valid() const{
    return m_can_create_topic_isValid;
}

QList<QJsonValue> OAISearch_200_response_grouped_search_result::getCategoryIds() const {
    return m_category_ids;
}
void OAISearch_200_response_grouped_search_result::setCategoryIds(const QList<QJsonValue> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

QString OAISearch_200_response_grouped_search_result::getError() const {
    return m_error;
}
void OAISearch_200_response_grouped_search_result::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_error_Set() const{
    return m_error_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_error_Valid() const{
    return m_error_isValid;
}

QList<QJsonValue> OAISearch_200_response_grouped_search_result::getGroupIds() const {
    return m_group_ids;
}
void OAISearch_200_response_grouped_search_result::setGroupIds(const QList<QJsonValue> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAISearch_200_response_grouped_search_result::getMoreCategories() const {
    return m_more_categories;
}
void OAISearch_200_response_grouped_search_result::setMoreCategories(const QString &more_categories) {
    m_more_categories = more_categories;
    m_more_categories_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_more_categories_Set() const{
    return m_more_categories_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_more_categories_Valid() const{
    return m_more_categories_isValid;
}

QString OAISearch_200_response_grouped_search_result::getMoreFullPageResults() const {
    return m_more_full_page_results;
}
void OAISearch_200_response_grouped_search_result::setMoreFullPageResults(const QString &more_full_page_results) {
    m_more_full_page_results = more_full_page_results;
    m_more_full_page_results_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_more_full_page_results_Set() const{
    return m_more_full_page_results_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_more_full_page_results_Valid() const{
    return m_more_full_page_results_isValid;
}

QString OAISearch_200_response_grouped_search_result::getMorePosts() const {
    return m_more_posts;
}
void OAISearch_200_response_grouped_search_result::setMorePosts(const QString &more_posts) {
    m_more_posts = more_posts;
    m_more_posts_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_more_posts_Set() const{
    return m_more_posts_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_more_posts_Valid() const{
    return m_more_posts_isValid;
}

QString OAISearch_200_response_grouped_search_result::getMoreUsers() const {
    return m_more_users;
}
void OAISearch_200_response_grouped_search_result::setMoreUsers(const QString &more_users) {
    m_more_users = more_users;
    m_more_users_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_more_users_Set() const{
    return m_more_users_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_more_users_Valid() const{
    return m_more_users_isValid;
}

QList<QJsonValue> OAISearch_200_response_grouped_search_result::getPostIds() const {
    return m_post_ids;
}
void OAISearch_200_response_grouped_search_result::setPostIds(const QList<QJsonValue> &post_ids) {
    m_post_ids = post_ids;
    m_post_ids_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_post_ids_Set() const{
    return m_post_ids_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_post_ids_Valid() const{
    return m_post_ids_isValid;
}

qint32 OAISearch_200_response_grouped_search_result::getSearchLogId() const {
    return m_search_log_id;
}
void OAISearch_200_response_grouped_search_result::setSearchLogId(const qint32 &search_log_id) {
    m_search_log_id = search_log_id;
    m_search_log_id_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_search_log_id_Set() const{
    return m_search_log_id_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_search_log_id_Valid() const{
    return m_search_log_id_isValid;
}

QList<QJsonValue> OAISearch_200_response_grouped_search_result::getTagIds() const {
    return m_tag_ids;
}
void OAISearch_200_response_grouped_search_result::setTagIds(const QList<QJsonValue> &tag_ids) {
    m_tag_ids = tag_ids;
    m_tag_ids_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_tag_ids_Set() const{
    return m_tag_ids_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_tag_ids_Valid() const{
    return m_tag_ids_isValid;
}

QString OAISearch_200_response_grouped_search_result::getTerm() const {
    return m_term;
}
void OAISearch_200_response_grouped_search_result::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_term_Set() const{
    return m_term_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_term_Valid() const{
    return m_term_isValid;
}

QList<QJsonValue> OAISearch_200_response_grouped_search_result::getUserIds() const {
    return m_user_ids;
}
void OAISearch_200_response_grouped_search_result::setUserIds(const QList<QJsonValue> &user_ids) {
    m_user_ids = user_ids;
    m_user_ids_isSet = true;
}

bool OAISearch_200_response_grouped_search_result::is_user_ids_Set() const{
    return m_user_ids_isSet;
}

bool OAISearch_200_response_grouped_search_result::is_user_ids_Valid() const{
    return m_user_ids_isValid;
}

bool OAISearch_200_response_grouped_search_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_create_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_full_page_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_posts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_200_response_grouped_search_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_can_create_topic_isValid && m_category_ids_isValid && m_error_isValid && m_group_ids_isValid && m_more_categories_isValid && m_more_full_page_results_isValid && m_more_posts_isValid && m_more_users_isValid && m_post_ids_isValid && m_search_log_id_isValid && m_tag_ids_isValid && m_term_isValid && m_user_ids_isValid && true;
}

} // namespace OpenAPI
