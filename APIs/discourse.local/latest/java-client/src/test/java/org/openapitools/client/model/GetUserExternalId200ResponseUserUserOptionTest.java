/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetUserExternalId200ResponseUserUserOption
 */
public class GetUserExternalId200ResponseUserUserOptionTest {
    private final GetUserExternalId200ResponseUserUserOption model = new GetUserExternalId200ResponseUserUserOption();

    /**
     * Model tests for GetUserExternalId200ResponseUserUserOption
     */
    @Test
    public void testGetUserExternalId200ResponseUserUserOption() {
        // TODO: test GetUserExternalId200ResponseUserUserOption
    }

    /**
     * Test the property 'allowPrivateMessages'
     */
    @Test
    public void allowPrivateMessagesTest() {
        // TODO: test allowPrivateMessages
    }

    /**
     * Test the property 'autoTrackTopicsAfterMsecs'
     */
    @Test
    public void autoTrackTopicsAfterMsecsTest() {
        // TODO: test autoTrackTopicsAfterMsecs
    }

    /**
     * Test the property 'automaticallyUnpinTopics'
     */
    @Test
    public void automaticallyUnpinTopicsTest() {
        // TODO: test automaticallyUnpinTopics
    }

    /**
     * Test the property 'bookmarkAutoDeletePreference'
     */
    @Test
    public void bookmarkAutoDeletePreferenceTest() {
        // TODO: test bookmarkAutoDeletePreference
    }

    /**
     * Test the property 'colorSchemeId'
     */
    @Test
    public void colorSchemeIdTest() {
        // TODO: test colorSchemeId
    }

    /**
     * Test the property 'darkSchemeId'
     */
    @Test
    public void darkSchemeIdTest() {
        // TODO: test darkSchemeId
    }

    /**
     * Test the property 'defaultCalendar'
     */
    @Test
    public void defaultCalendarTest() {
        // TODO: test defaultCalendar
    }

    /**
     * Test the property 'digestAfterMinutes'
     */
    @Test
    public void digestAfterMinutesTest() {
        // TODO: test digestAfterMinutes
    }

    /**
     * Test the property 'dynamicFavicon'
     */
    @Test
    public void dynamicFaviconTest() {
        // TODO: test dynamicFavicon
    }

    /**
     * Test the property 'emailDigests'
     */
    @Test
    public void emailDigestsTest() {
        // TODO: test emailDigests
    }

    /**
     * Test the property 'emailInReplyTo'
     */
    @Test
    public void emailInReplyToTest() {
        // TODO: test emailInReplyTo
    }

    /**
     * Test the property 'emailLevel'
     */
    @Test
    public void emailLevelTest() {
        // TODO: test emailLevel
    }

    /**
     * Test the property 'emailMessagesLevel'
     */
    @Test
    public void emailMessagesLevelTest() {
        // TODO: test emailMessagesLevel
    }

    /**
     * Test the property 'emailPreviousReplies'
     */
    @Test
    public void emailPreviousRepliesTest() {
        // TODO: test emailPreviousReplies
    }

    /**
     * Test the property 'enableAllowedPmUsers'
     */
    @Test
    public void enableAllowedPmUsersTest() {
        // TODO: test enableAllowedPmUsers
    }

    /**
     * Test the property 'enableDefer'
     */
    @Test
    public void enableDeferTest() {
        // TODO: test enableDefer
    }

    /**
     * Test the property 'enableQuoting'
     */
    @Test
    public void enableQuotingTest() {
        // TODO: test enableQuoting
    }

    /**
     * Test the property 'externalLinksInNewTab'
     */
    @Test
    public void externalLinksInNewTabTest() {
        // TODO: test externalLinksInNewTab
    }

    /**
     * Test the property 'hideProfileAndPresence'
     */
    @Test
    public void hideProfileAndPresenceTest() {
        // TODO: test hideProfileAndPresence
    }

    /**
     * Test the property 'homepageId'
     */
    @Test
    public void homepageIdTest() {
        // TODO: test homepageId
    }

    /**
     * Test the property 'includeTl0InDigests'
     */
    @Test
    public void includeTl0InDigestsTest() {
        // TODO: test includeTl0InDigests
    }

    /**
     * Test the property 'likeNotificationFrequency'
     */
    @Test
    public void likeNotificationFrequencyTest() {
        // TODO: test likeNotificationFrequency
    }

    /**
     * Test the property 'mailingListMode'
     */
    @Test
    public void mailingListModeTest() {
        // TODO: test mailingListMode
    }

    /**
     * Test the property 'mailingListModeFrequency'
     */
    @Test
    public void mailingListModeFrequencyTest() {
        // TODO: test mailingListModeFrequency
    }

    /**
     * Test the property 'newTopicDurationMinutes'
     */
    @Test
    public void newTopicDurationMinutesTest() {
        // TODO: test newTopicDurationMinutes
    }

    /**
     * Test the property 'notificationLevelWhenReplying'
     */
    @Test
    public void notificationLevelWhenReplyingTest() {
        // TODO: test notificationLevelWhenReplying
    }

    /**
     * Test the property 'oldestSearchLogDate'
     */
    @Test
    public void oldestSearchLogDateTest() {
        // TODO: test oldestSearchLogDate
    }

    /**
     * Test the property 'seenPopups'
     */
    @Test
    public void seenPopupsTest() {
        // TODO: test seenPopups
    }

    /**
     * Test the property 'sidebarListDestination'
     */
    @Test
    public void sidebarListDestinationTest() {
        // TODO: test sidebarListDestination
    }

    /**
     * Test the property 'skipNewUserTips'
     */
    @Test
    public void skipNewUserTipsTest() {
        // TODO: test skipNewUserTips
    }

    /**
     * Test the property 'textSize'
     */
    @Test
    public void textSizeTest() {
        // TODO: test textSize
    }

    /**
     * Test the property 'textSizeSeq'
     */
    @Test
    public void textSizeSeqTest() {
        // TODO: test textSizeSeq
    }

    /**
     * Test the property 'themeIds'
     */
    @Test
    public void themeIdsTest() {
        // TODO: test themeIds
    }

    /**
     * Test the property 'themeKeySeq'
     */
    @Test
    public void themeKeySeqTest() {
        // TODO: test themeKeySeq
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    public void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'titleCountMode'
     */
    @Test
    public void titleCountModeTest() {
        // TODO: test titleCountMode
    }

    /**
     * Test the property 'userId'
     */
    @Test
    public void userIdTest() {
        // TODO: test userId
    }

}
