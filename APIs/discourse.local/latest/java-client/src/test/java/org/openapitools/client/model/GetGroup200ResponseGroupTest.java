/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetGroup200ResponseGroup
 */
public class GetGroup200ResponseGroupTest {
    private final GetGroup200ResponseGroup model = new GetGroup200ResponseGroup();

    /**
     * Model tests for GetGroup200ResponseGroup
     */
    @Test
    public void testGetGroup200ResponseGroup() {
        // TODO: test GetGroup200ResponseGroup
    }

    /**
     * Test the property 'allowMembershipRequests'
     */
    @Test
    public void allowMembershipRequestsTest() {
        // TODO: test allowMembershipRequests
    }

    /**
     * Test the property 'allowUnknownSenderTopicReplies'
     */
    @Test
    public void allowUnknownSenderTopicRepliesTest() {
        // TODO: test allowUnknownSenderTopicReplies
    }

    /**
     * Test the property 'associatedGroupIds'
     */
    @Test
    public void associatedGroupIdsTest() {
        // TODO: test associatedGroupIds
    }

    /**
     * Test the property 'automatic'
     */
    @Test
    public void automaticTest() {
        // TODO: test automatic
    }

    /**
     * Test the property 'automaticMembershipEmailDomains'
     */
    @Test
    public void automaticMembershipEmailDomainsTest() {
        // TODO: test automaticMembershipEmailDomains
    }

    /**
     * Test the property 'bioCooked'
     */
    @Test
    public void bioCookedTest() {
        // TODO: test bioCooked
    }

    /**
     * Test the property 'bioExcerpt'
     */
    @Test
    public void bioExcerptTest() {
        // TODO: test bioExcerpt
    }

    /**
     * Test the property 'bioRaw'
     */
    @Test
    public void bioRawTest() {
        // TODO: test bioRaw
    }

    /**
     * Test the property 'canAdminGroup'
     */
    @Test
    public void canAdminGroupTest() {
        // TODO: test canAdminGroup
    }

    /**
     * Test the property 'canEditGroup'
     */
    @Test
    public void canEditGroupTest() {
        // TODO: test canEditGroup
    }

    /**
     * Test the property 'canSeeMembers'
     */
    @Test
    public void canSeeMembersTest() {
        // TODO: test canSeeMembers
    }

    /**
     * Test the property 'defaultNotificationLevel'
     */
    @Test
    public void defaultNotificationLevelTest() {
        // TODO: test defaultNotificationLevel
    }

    /**
     * Test the property 'emailFromAlias'
     */
    @Test
    public void emailFromAliasTest() {
        // TODO: test emailFromAlias
    }

    /**
     * Test the property 'emailPassword'
     */
    @Test
    public void emailPasswordTest() {
        // TODO: test emailPassword
    }

    /**
     * Test the property 'emailUsername'
     */
    @Test
    public void emailUsernameTest() {
        // TODO: test emailUsername
    }

    /**
     * Test the property 'flairBgColor'
     */
    @Test
    public void flairBgColorTest() {
        // TODO: test flairBgColor
    }

    /**
     * Test the property 'flairColor'
     */
    @Test
    public void flairColorTest() {
        // TODO: test flairColor
    }

    /**
     * Test the property 'flairUrl'
     */
    @Test
    public void flairUrlTest() {
        // TODO: test flairUrl
    }

    /**
     * Test the property 'fullName'
     */
    @Test
    public void fullNameTest() {
        // TODO: test fullName
    }

    /**
     * Test the property 'grantTrustLevel'
     */
    @Test
    public void grantTrustLevelTest() {
        // TODO: test grantTrustLevel
    }

    /**
     * Test the property 'hasMessages'
     */
    @Test
    public void hasMessagesTest() {
        // TODO: test hasMessages
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'imapEnabled'
     */
    @Test
    public void imapEnabledTest() {
        // TODO: test imapEnabled
    }

    /**
     * Test the property 'imapLastError'
     */
    @Test
    public void imapLastErrorTest() {
        // TODO: test imapLastError
    }

    /**
     * Test the property 'imapMailboxName'
     */
    @Test
    public void imapMailboxNameTest() {
        // TODO: test imapMailboxName
    }

    /**
     * Test the property 'imapMailboxes'
     */
    @Test
    public void imapMailboxesTest() {
        // TODO: test imapMailboxes
    }

    /**
     * Test the property 'imapNewEmails'
     */
    @Test
    public void imapNewEmailsTest() {
        // TODO: test imapNewEmails
    }

    /**
     * Test the property 'imapOldEmails'
     */
    @Test
    public void imapOldEmailsTest() {
        // TODO: test imapOldEmails
    }

    /**
     * Test the property 'imapPort'
     */
    @Test
    public void imapPortTest() {
        // TODO: test imapPort
    }

    /**
     * Test the property 'imapServer'
     */
    @Test
    public void imapServerTest() {
        // TODO: test imapServer
    }

    /**
     * Test the property 'imapSsl'
     */
    @Test
    public void imapSslTest() {
        // TODO: test imapSsl
    }

    /**
     * Test the property 'imapUpdatedAt'
     */
    @Test
    public void imapUpdatedAtTest() {
        // TODO: test imapUpdatedAt
    }

    /**
     * Test the property 'imapUpdatedBy'
     */
    @Test
    public void imapUpdatedByTest() {
        // TODO: test imapUpdatedBy
    }

    /**
     * Test the property 'incomingEmail'
     */
    @Test
    public void incomingEmailTest() {
        // TODO: test incomingEmail
    }

    /**
     * Test the property 'isGroupOwnerDisplay'
     */
    @Test
    public void isGroupOwnerDisplayTest() {
        // TODO: test isGroupOwnerDisplay
    }

    /**
     * Test the property 'isGroupUser'
     */
    @Test
    public void isGroupUserTest() {
        // TODO: test isGroupUser
    }

    /**
     * Test the property 'membersVisibilityLevel'
     */
    @Test
    public void membersVisibilityLevelTest() {
        // TODO: test membersVisibilityLevel
    }

    /**
     * Test the property 'membershipRequestTemplate'
     */
    @Test
    public void membershipRequestTemplateTest() {
        // TODO: test membershipRequestTemplate
    }

    /**
     * Test the property 'mentionable'
     */
    @Test
    public void mentionableTest() {
        // TODO: test mentionable
    }

    /**
     * Test the property 'mentionableLevel'
     */
    @Test
    public void mentionableLevelTest() {
        // TODO: test mentionableLevel
    }

    /**
     * Test the property 'messageCount'
     */
    @Test
    public void messageCountTest() {
        // TODO: test messageCount
    }

    /**
     * Test the property 'messageable'
     */
    @Test
    public void messageableTest() {
        // TODO: test messageable
    }

    /**
     * Test the property 'messageableLevel'
     */
    @Test
    public void messageableLevelTest() {
        // TODO: test messageableLevel
    }

    /**
     * Test the property 'mutedCategoryIds'
     */
    @Test
    public void mutedCategoryIdsTest() {
        // TODO: test mutedCategoryIds
    }

    /**
     * Test the property 'mutedTags'
     */
    @Test
    public void mutedTagsTest() {
        // TODO: test mutedTags
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'primaryGroup'
     */
    @Test
    public void primaryGroupTest() {
        // TODO: test primaryGroup
    }

    /**
     * Test the property 'publicAdmission'
     */
    @Test
    public void publicAdmissionTest() {
        // TODO: test publicAdmission
    }

    /**
     * Test the property 'publicExit'
     */
    @Test
    public void publicExitTest() {
        // TODO: test publicExit
    }

    /**
     * Test the property 'publishReadState'
     */
    @Test
    public void publishReadStateTest() {
        // TODO: test publishReadState
    }

    /**
     * Test the property 'regularCategoryIds'
     */
    @Test
    public void regularCategoryIdsTest() {
        // TODO: test regularCategoryIds
    }

    /**
     * Test the property 'regularTags'
     */
    @Test
    public void regularTagsTest() {
        // TODO: test regularTags
    }

    /**
     * Test the property 'smtpEnabled'
     */
    @Test
    public void smtpEnabledTest() {
        // TODO: test smtpEnabled
    }

    /**
     * Test the property 'smtpPort'
     */
    @Test
    public void smtpPortTest() {
        // TODO: test smtpPort
    }

    /**
     * Test the property 'smtpServer'
     */
    @Test
    public void smtpServerTest() {
        // TODO: test smtpServer
    }

    /**
     * Test the property 'smtpSsl'
     */
    @Test
    public void smtpSslTest() {
        // TODO: test smtpSsl
    }

    /**
     * Test the property 'smtpUpdatedAt'
     */
    @Test
    public void smtpUpdatedAtTest() {
        // TODO: test smtpUpdatedAt
    }

    /**
     * Test the property 'smtpUpdatedBy'
     */
    @Test
    public void smtpUpdatedByTest() {
        // TODO: test smtpUpdatedBy
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'trackingCategoryIds'
     */
    @Test
    public void trackingCategoryIdsTest() {
        // TODO: test trackingCategoryIds
    }

    /**
     * Test the property 'trackingTags'
     */
    @Test
    public void trackingTagsTest() {
        // TODO: test trackingTags
    }

    /**
     * Test the property 'userCount'
     */
    @Test
    public void userCountTest() {
        // TODO: test userCount
    }

    /**
     * Test the property 'visibilityLevel'
     */
    @Test
    public void visibilityLevelTest() {
        // TODO: test visibilityLevel
    }

    /**
     * Test the property 'watchingCategoryIds'
     */
    @Test
    public void watchingCategoryIdsTest() {
        // TODO: test watchingCategoryIds
    }

    /**
     * Test the property 'watchingFirstPostCategoryIds'
     */
    @Test
    public void watchingFirstPostCategoryIdsTest() {
        // TODO: test watchingFirstPostCategoryIds
    }

    /**
     * Test the property 'watchingFirstPostTags'
     */
    @Test
    public void watchingFirstPostTagsTest() {
        // TODO: test watchingFirstPostTags
    }

    /**
     * Test the property 'watchingTags'
     */
    @Test
    public void watchingTagsTest() {
        // TODO: test watchingTags
    }

}
