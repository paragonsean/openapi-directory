/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ListCategories200ResponseCategoryListCategoriesInner
 */
public class ListCategories200ResponseCategoryListCategoriesInnerTest {
    private final ListCategories200ResponseCategoryListCategoriesInner model = new ListCategories200ResponseCategoryListCategoriesInner();

    /**
     * Model tests for ListCategories200ResponseCategoryListCategoriesInner
     */
    @Test
    public void testListCategories200ResponseCategoryListCategoriesInner() {
        // TODO: test ListCategories200ResponseCategoryListCategoriesInner
    }

    /**
     * Test the property 'canEdit'
     */
    @Test
    public void canEditTest() {
        // TODO: test canEdit
    }

    /**
     * Test the property 'color'
     */
    @Test
    public void colorTest() {
        // TODO: test color
    }

    /**
     * Test the property 'defaultListFilter'
     */
    @Test
    public void defaultListFilterTest() {
        // TODO: test defaultListFilter
    }

    /**
     * Test the property 'defaultTopPeriod'
     */
    @Test
    public void defaultTopPeriodTest() {
        // TODO: test defaultTopPeriod
    }

    /**
     * Test the property 'defaultView'
     */
    @Test
    public void defaultViewTest() {
        // TODO: test defaultView
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'descriptionExcerpt'
     */
    @Test
    public void descriptionExcerptTest() {
        // TODO: test descriptionExcerpt
    }

    /**
     * Test the property 'descriptionText'
     */
    @Test
    public void descriptionTextTest() {
        // TODO: test descriptionText
    }

    /**
     * Test the property 'hasChildren'
     */
    @Test
    public void hasChildrenTest() {
        // TODO: test hasChildren
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isUncategorized'
     */
    @Test
    public void isUncategorizedTest() {
        // TODO: test isUncategorized
    }

    /**
     * Test the property 'minimumRequiredTags'
     */
    @Test
    public void minimumRequiredTagsTest() {
        // TODO: test minimumRequiredTags
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'navigateToFirstPostAfterRead'
     */
    @Test
    public void navigateToFirstPostAfterReadTest() {
        // TODO: test navigateToFirstPostAfterRead
    }

    /**
     * Test the property 'notificationLevel'
     */
    @Test
    public void notificationLevelTest() {
        // TODO: test notificationLevel
    }

    /**
     * Test the property 'numFeaturedTopics'
     */
    @Test
    public void numFeaturedTopicsTest() {
        // TODO: test numFeaturedTopics
    }

    /**
     * Test the property 'permission'
     */
    @Test
    public void permissionTest() {
        // TODO: test permission
    }

    /**
     * Test the property 'position'
     */
    @Test
    public void positionTest() {
        // TODO: test position
    }

    /**
     * Test the property 'postCount'
     */
    @Test
    public void postCountTest() {
        // TODO: test postCount
    }

    /**
     * Test the property 'readRestricted'
     */
    @Test
    public void readRestrictedTest() {
        // TODO: test readRestricted
    }

    /**
     * Test the property 'showSubcategoryList'
     */
    @Test
    public void showSubcategoryListTest() {
        // TODO: test showSubcategoryList
    }

    /**
     * Test the property 'slug'
     */
    @Test
    public void slugTest() {
        // TODO: test slug
    }

    /**
     * Test the property 'sortAscending'
     */
    @Test
    public void sortAscendingTest() {
        // TODO: test sortAscending
    }

    /**
     * Test the property 'sortOrder'
     */
    @Test
    public void sortOrderTest() {
        // TODO: test sortOrder
    }

    /**
     * Test the property 'subcategoryIds'
     */
    @Test
    public void subcategoryIdsTest() {
        // TODO: test subcategoryIds
    }

    /**
     * Test the property 'subcategoryList'
     */
    @Test
    public void subcategoryListTest() {
        // TODO: test subcategoryList
    }

    /**
     * Test the property 'subcategoryListStyle'
     */
    @Test
    public void subcategoryListStyleTest() {
        // TODO: test subcategoryListStyle
    }

    /**
     * Test the property 'textColor'
     */
    @Test
    public void textColorTest() {
        // TODO: test textColor
    }

    /**
     * Test the property 'topicCount'
     */
    @Test
    public void topicCountTest() {
        // TODO: test topicCount
    }

    /**
     * Test the property 'topicTemplate'
     */
    @Test
    public void topicTemplateTest() {
        // TODO: test topicTemplate
    }

    /**
     * Test the property 'topicUrl'
     */
    @Test
    public void topicUrlTest() {
        // TODO: test topicUrl
    }

    /**
     * Test the property 'topicsAllTime'
     */
    @Test
    public void topicsAllTimeTest() {
        // TODO: test topicsAllTime
    }

    /**
     * Test the property 'topicsDay'
     */
    @Test
    public void topicsDayTest() {
        // TODO: test topicsDay
    }

    /**
     * Test the property 'topicsMonth'
     */
    @Test
    public void topicsMonthTest() {
        // TODO: test topicsMonth
    }

    /**
     * Test the property 'topicsWeek'
     */
    @Test
    public void topicsWeekTest() {
        // TODO: test topicsWeek
    }

    /**
     * Test the property 'topicsYear'
     */
    @Test
    public void topicsYearTest() {
        // TODO: test topicsYear
    }

    /**
     * Test the property 'uploadedBackground'
     */
    @Test
    public void uploadedBackgroundTest() {
        // TODO: test uploadedBackground
    }

    /**
     * Test the property 'uploadedLogo'
     */
    @Test
    public void uploadedLogoTest() {
        // TODO: test uploadedLogo
    }

    /**
     * Test the property 'uploadedLogoDark'
     */
    @Test
    public void uploadedLogoDarkTest() {
        // TODO: test uploadedLogoDark
    }

}
