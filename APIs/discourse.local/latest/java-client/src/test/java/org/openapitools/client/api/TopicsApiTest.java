/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateTopicPostPM200Response;
import org.openapitools.client.model.CreateTopicPostPMRequest;
import org.openapitools.client.model.CreateTopicTimer200Response;
import org.openapitools.client.model.CreateTopicTimerRequest;
import org.openapitools.client.model.GetSpecificPostsFromTopic200Response;
import org.openapitools.client.model.GetSpecificPostsFromTopicRequest;
import org.openapitools.client.model.GetTopic200Response;
import org.openapitools.client.model.InviteToTopic200Response;
import org.openapitools.client.model.InviteToTopicRequest;
import org.openapitools.client.model.ListLatestTopics200Response;
import org.openapitools.client.model.ListTopTopics200Response;
import org.openapitools.client.model.SetNotificationLevelRequest;
import org.openapitools.client.model.UpdateGroup200Response;
import org.openapitools.client.model.UpdateTopic200Response;
import org.openapitools.client.model.UpdateTopicRequest;
import org.openapitools.client.model.UpdateTopicStatus200Response;
import org.openapitools.client.model.UpdateTopicStatusRequest;
import org.openapitools.client.model.UpdateTopicTimestampRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopicsApi
 */
@Disabled
public class TopicsApiTest {

    private final TopicsApi api = new TopicsApi();

    /**
     * Bookmark topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookmarkTopicTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        api.bookmarkTopic(apiKey, apiUsername, id);
        // TODO: test validations
    }

    /**
     * Creates a new topic, a new post, or a private message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTopicPostPM_0Test() throws ApiException {
        CreateTopicPostPMRequest createTopicPostPMRequest = null;
        CreateTopicPostPM200Response response = api.createTopicPostPM_0(createTopicPostPMRequest);
        // TODO: test validations
    }

    /**
     * Create topic timer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTopicTimerTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        CreateTopicTimerRequest createTopicTimerRequest = null;
        CreateTopicTimer200Response response = api.createTopicTimer(apiKey, apiUsername, id, createTopicTimerRequest);
        // TODO: test validations
    }

    /**
     * Get specific posts from a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificPostsFromTopicTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        GetSpecificPostsFromTopicRequest getSpecificPostsFromTopicRequest = null;
        GetSpecificPostsFromTopic200Response response = api.getSpecificPostsFromTopic(apiKey, apiUsername, id, getSpecificPostsFromTopicRequest);
        // TODO: test validations
    }

    /**
     * Get a single topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopicTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        GetTopic200Response response = api.getTopic(apiKey, apiUsername, id);
        // TODO: test validations
    }

    /**
     * Get topic by external_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopicByExternalIdTest() throws ApiException {
        String externalId = null;
        api.getTopicByExternalId(externalId);
        // TODO: test validations
    }

    /**
     * Invite to topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteToTopicTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        InviteToTopicRequest inviteToTopicRequest = null;
        InviteToTopic200Response response = api.inviteToTopic(apiKey, apiUsername, id, inviteToTopicRequest);
        // TODO: test validations
    }

    /**
     * Get the latest topics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLatestTopicsTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String order = null;
        String ascending = null;
        ListLatestTopics200Response response = api.listLatestTopics(apiKey, apiUsername, order, ascending);
        // TODO: test validations
    }

    /**
     * Get the top topics filtered by period
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopTopicsTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String period = null;
        ListTopTopics200Response response = api.listTopTopics(apiKey, apiUsername, period);
        // TODO: test validations
    }

    /**
     * Remove a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTopicTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        api.removeTopic(apiKey, apiUsername, id);
        // TODO: test validations
    }

    /**
     * Set notification level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setNotificationLevelTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        SetNotificationLevelRequest setNotificationLevelRequest = null;
        UpdateGroup200Response response = api.setNotificationLevel(apiKey, apiUsername, id, setNotificationLevelRequest);
        // TODO: test validations
    }

    /**
     * Update a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTopicTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        UpdateTopicRequest updateTopicRequest = null;
        UpdateTopic200Response response = api.updateTopic(apiKey, apiUsername, id, updateTopicRequest);
        // TODO: test validations
    }

    /**
     * Update the status of a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTopicStatusTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        UpdateTopicStatusRequest updateTopicStatusRequest = null;
        UpdateTopicStatus200Response response = api.updateTopicStatus(apiKey, apiUsername, id, updateTopicStatusRequest);
        // TODO: test validations
    }

    /**
     * Update topic timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTopicTimestampTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        UpdateTopicTimestampRequest updateTopicTimestampRequest = null;
        UpdateGroup200Response response = api.updateTopicTimestamp(apiKey, apiUsername, id, updateTopicTimestampRequest);
        // TODO: test validations
    }

}
