/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdminGetUser200Response;
import org.openapitools.client.model.AdminListUsers200ResponseInner;
import org.openapitools.client.model.AnonymizeUser200Response;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.CreateUser200Response;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.DeleteGroup200Response;
import org.openapitools.client.model.DeleteUser200Response;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.GetUserEmails200Response;
import org.openapitools.client.model.GetUserExternalId200Response;
import org.openapitools.client.model.ListUserActions200Response;
import org.openapitools.client.model.ListUserBadges200Response;
import org.openapitools.client.model.ListUsersPublic200Response;
import org.openapitools.client.model.RefreshGravatar200Response;
import org.openapitools.client.model.SendPasswordResetEmail200Response;
import org.openapitools.client.model.SendPasswordResetEmailRequest;
import java.util.Set;
import org.openapitools.client.model.SilenceUser200Response;
import org.openapitools.client.model.SilenceUserRequest;
import org.openapitools.client.model.SuspendUser200Response;
import org.openapitools.client.model.SuspendUserRequest;
import org.openapitools.client.model.UpdateAvatarRequest;
import org.openapitools.client.model.UpdateEmailRequest;
import org.openapitools.client.model.UpdateUser200Response;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUsernameRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Get a user by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminGetUserTest() throws ApiException {
        Integer id = null;
        AdminGetUser200Response response = api.adminGetUser(id);
        // TODO: test validations
    }

    /**
     * Get a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminListUsersTest() throws ApiException {
        String flag = null;
        String order = null;
        String asc = null;
        Integer page = null;
        Boolean showEmails = null;
        Set<AdminListUsers200ResponseInner> response = api.adminListUsers(flag, order, asc, page, showEmails);
        // TODO: test validations
    }

    /**
     * Anonymize a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizeUserTest() throws ApiException {
        Integer id = null;
        AnonymizeUser200Response response = api.anonymizeUser(id);
        // TODO: test validations
    }

    /**
     * Change password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        String token = null;
        ChangePasswordRequest changePasswordRequest = null;
        api.changePassword(token, changePasswordRequest);
        // TODO: test validations
    }

    /**
     * Creates a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        CreateUserRequest createUserRequest = null;
        CreateUser200Response response = api.createUser(apiKey, apiUsername, createUserRequest);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        Integer id = null;
        DeleteUserRequest deleteUserRequest = null;
        DeleteUser200Response response = api.deleteUser(id, deleteUserRequest);
        // TODO: test validations
    }

    /**
     * Get a single user by username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String username = null;
        GetUserExternalId200Response response = api.getUser(apiKey, apiUsername, username);
        // TODO: test validations
    }

    /**
     * Get email addresses belonging to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserEmailsTest() throws ApiException {
        String username = null;
        GetUserEmails200Response response = api.getUserEmails(username);
        // TODO: test validations
    }

    /**
     * Get a user by external_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserExternalIdTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String externalId = null;
        GetUserExternalId200Response response = api.getUserExternalId(apiKey, apiUsername, externalId);
        // TODO: test validations
    }

    /**
     * Get a user by identity provider external ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserIdentiyProviderExternalIdTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String provider = null;
        String externalId = null;
        GetUserExternalId200Response response = api.getUserIdentiyProviderExternalId(apiKey, apiUsername, provider, externalId);
        // TODO: test validations
    }

    /**
     * Get a list of user actions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserActionsTest() throws ApiException {
        Integer offset = null;
        String username = null;
        String filter = null;
        ListUserActions200Response response = api.listUserActions(offset, username, filter);
        // TODO: test validations
    }

    /**
     * List badges for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserBadges_0Test() throws ApiException {
        String username = null;
        ListUserBadges200Response response = api.listUserBadges_0(username);
        // TODO: test validations
    }

    /**
     * Get a public list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersPublicTest() throws ApiException {
        String period = null;
        String order = null;
        String asc = null;
        Integer page = null;
        ListUsersPublic200Response response = api.listUsersPublic(period, order, asc, page);
        // TODO: test validations
    }

    /**
     * Log a user out
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logOutUserTest() throws ApiException {
        Integer id = null;
        DeleteGroup200Response response = api.logOutUser(id);
        // TODO: test validations
    }

    /**
     * Refresh gravatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshGravatarTest() throws ApiException {
        String username = null;
        RefreshGravatar200Response response = api.refreshGravatar(username);
        // TODO: test validations
    }

    /**
     * Send password reset email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPasswordResetEmailTest() throws ApiException {
        SendPasswordResetEmailRequest sendPasswordResetEmailRequest = null;
        SendPasswordResetEmail200Response response = api.sendPasswordResetEmail(sendPasswordResetEmailRequest);
        // TODO: test validations
    }

    /**
     * Silence a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void silenceUserTest() throws ApiException {
        Integer id = null;
        SilenceUserRequest silenceUserRequest = null;
        SilenceUser200Response response = api.silenceUser(id, silenceUserRequest);
        // TODO: test validations
    }

    /**
     * Suspend a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendUserTest() throws ApiException {
        Integer id = null;
        SuspendUserRequest suspendUserRequest = null;
        SuspendUser200Response response = api.suspendUser(id, suspendUserRequest);
        // TODO: test validations
    }

    /**
     * Update avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAvatarTest() throws ApiException {
        String username = null;
        UpdateAvatarRequest updateAvatarRequest = null;
        DeleteGroup200Response response = api.updateAvatar(username, updateAvatarRequest);
        // TODO: test validations
    }

    /**
     * Update email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailTest() throws ApiException {
        String username = null;
        UpdateEmailRequest updateEmailRequest = null;
        api.updateEmail(username, updateEmailRequest);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String username = null;
        UpdateUserRequest updateUserRequest = null;
        UpdateUser200Response response = api.updateUser(apiKey, apiUsername, username, updateUserRequest);
        // TODO: test validations
    }

    /**
     * Update username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsernameTest() throws ApiException {
        String username = null;
        UpdateUsernameRequest updateUsernameRequest = null;
        api.updateUsername(username, updateUsernameRequest);
        // TODO: test validations
    }

}
