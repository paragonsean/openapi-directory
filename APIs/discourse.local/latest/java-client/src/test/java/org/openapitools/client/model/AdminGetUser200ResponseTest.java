/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdminGetUser200ResponseApprovedBy;
import org.openapitools.client.model.AdminGetUser200ResponseGroupsInner;
import org.openapitools.client.model.AdminGetUser200ResponsePenaltyCounts;
import org.openapitools.client.model.AdminGetUser200ResponseTl3Requirements;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AdminGetUser200Response
 */
public class AdminGetUser200ResponseTest {
    private final AdminGetUser200Response model = new AdminGetUser200Response();

    /**
     * Model tests for AdminGetUser200Response
     */
    @Test
    public void testAdminGetUser200Response() {
        // TODO: test AdminGetUser200Response
    }

    /**
     * Test the property 'active'
     */
    @Test
    public void activeTest() {
        // TODO: test active
    }

    /**
     * Test the property 'admin'
     */
    @Test
    public void adminTest() {
        // TODO: test admin
    }

    /**
     * Test the property 'apiKeyCount'
     */
    @Test
    public void apiKeyCountTest() {
        // TODO: test apiKeyCount
    }

    /**
     * Test the property 'approvedBy'
     */
    @Test
    public void approvedByTest() {
        // TODO: test approvedBy
    }

    /**
     * Test the property 'associatedAccounts'
     */
    @Test
    public void associatedAccountsTest() {
        // TODO: test associatedAccounts
    }

    /**
     * Test the property 'avatarTemplate'
     */
    @Test
    public void avatarTemplateTest() {
        // TODO: test avatarTemplate
    }

    /**
     * Test the property 'badgeCount'
     */
    @Test
    public void badgeCountTest() {
        // TODO: test badgeCount
    }

    /**
     * Test the property 'bounceScore'
     */
    @Test
    public void bounceScoreTest() {
        // TODO: test bounceScore
    }

    /**
     * Test the property 'canActivate'
     */
    @Test
    public void canActivateTest() {
        // TODO: test canActivate
    }

    /**
     * Test the property 'canBeAnonymized'
     */
    @Test
    public void canBeAnonymizedTest() {
        // TODO: test canBeAnonymized
    }

    /**
     * Test the property 'canBeDeleted'
     */
    @Test
    public void canBeDeletedTest() {
        // TODO: test canBeDeleted
    }

    /**
     * Test the property 'canBeMerged'
     */
    @Test
    public void canBeMergedTest() {
        // TODO: test canBeMerged
    }

    /**
     * Test the property 'canDeactivate'
     */
    @Test
    public void canDeactivateTest() {
        // TODO: test canDeactivate
    }

    /**
     * Test the property 'canDeleteAllPosts'
     */
    @Test
    public void canDeleteAllPostsTest() {
        // TODO: test canDeleteAllPosts
    }

    /**
     * Test the property 'canDeleteSsoRecord'
     */
    @Test
    public void canDeleteSsoRecordTest() {
        // TODO: test canDeleteSsoRecord
    }

    /**
     * Test the property 'canDisableSecondFactor'
     */
    @Test
    public void canDisableSecondFactorTest() {
        // TODO: test canDisableSecondFactor
    }

    /**
     * Test the property 'canGrantAdmin'
     */
    @Test
    public void canGrantAdminTest() {
        // TODO: test canGrantAdmin
    }

    /**
     * Test the property 'canGrantModeration'
     */
    @Test
    public void canGrantModerationTest() {
        // TODO: test canGrantModeration
    }

    /**
     * Test the property 'canImpersonate'
     */
    @Test
    public void canImpersonateTest() {
        // TODO: test canImpersonate
    }

    /**
     * Test the property 'canRevokeAdmin'
     */
    @Test
    public void canRevokeAdminTest() {
        // TODO: test canRevokeAdmin
    }

    /**
     * Test the property 'canRevokeModeration'
     */
    @Test
    public void canRevokeModerationTest() {
        // TODO: test canRevokeModeration
    }

    /**
     * Test the property 'canSendActivationEmail'
     */
    @Test
    public void canSendActivationEmailTest() {
        // TODO: test canSendActivationEmail
    }

    /**
     * Test the property 'canViewActionLogs'
     */
    @Test
    public void canViewActionLogsTest() {
        // TODO: test canViewActionLogs
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'createdAtAge'
     */
    @Test
    public void createdAtAgeTest() {
        // TODO: test createdAtAge
    }

    /**
     * Test the property 'daysVisited'
     */
    @Test
    public void daysVisitedTest() {
        // TODO: test daysVisited
    }

    /**
     * Test the property 'externalIds'
     */
    @Test
    public void externalIdsTest() {
        // TODO: test externalIds
    }

    /**
     * Test the property 'flagLevel'
     */
    @Test
    public void flagLevelTest() {
        // TODO: test flagLevel
    }

    /**
     * Test the property 'flagsGivenCount'
     */
    @Test
    public void flagsGivenCountTest() {
        // TODO: test flagsGivenCount
    }

    /**
     * Test the property 'flagsReceivedCount'
     */
    @Test
    public void flagsReceivedCountTest() {
        // TODO: test flagsReceivedCount
    }

    /**
     * Test the property 'fullSuspendReason'
     */
    @Test
    public void fullSuspendReasonTest() {
        // TODO: test fullSuspendReason
    }

    /**
     * Test the property 'groups'
     */
    @Test
    public void groupsTest() {
        // TODO: test groups
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'ipAddress'
     */
    @Test
    public void ipAddressTest() {
        // TODO: test ipAddress
    }

    /**
     * Test the property 'lastEmailedAge'
     */
    @Test
    public void lastEmailedAgeTest() {
        // TODO: test lastEmailedAge
    }

    /**
     * Test the property 'lastEmailedAt'
     */
    @Test
    public void lastEmailedAtTest() {
        // TODO: test lastEmailedAt
    }

    /**
     * Test the property 'lastSeenAge'
     */
    @Test
    public void lastSeenAgeTest() {
        // TODO: test lastSeenAge
    }

    /**
     * Test the property 'lastSeenAt'
     */
    @Test
    public void lastSeenAtTest() {
        // TODO: test lastSeenAt
    }

    /**
     * Test the property 'likeCount'
     */
    @Test
    public void likeCountTest() {
        // TODO: test likeCount
    }

    /**
     * Test the property 'likeGivenCount'
     */
    @Test
    public void likeGivenCountTest() {
        // TODO: test likeGivenCount
    }

    /**
     * Test the property 'manualLockedTrustLevel'
     */
    @Test
    public void manualLockedTrustLevelTest() {
        // TODO: test manualLockedTrustLevel
    }

    /**
     * Test the property 'moderator'
     */
    @Test
    public void moderatorTest() {
        // TODO: test moderator
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nextPenalty'
     */
    @Test
    public void nextPenaltyTest() {
        // TODO: test nextPenalty
    }

    /**
     * Test the property 'penaltyCounts'
     */
    @Test
    public void penaltyCountsTest() {
        // TODO: test penaltyCounts
    }

    /**
     * Test the property 'postCount'
     */
    @Test
    public void postCountTest() {
        // TODO: test postCount
    }

    /**
     * Test the property 'postEditsCount'
     */
    @Test
    public void postEditsCountTest() {
        // TODO: test postEditsCount
    }

    /**
     * Test the property 'postsReadCount'
     */
    @Test
    public void postsReadCountTest() {
        // TODO: test postsReadCount
    }

    /**
     * Test the property 'primaryGroupId'
     */
    @Test
    public void primaryGroupIdTest() {
        // TODO: test primaryGroupId
    }

    /**
     * Test the property 'privateTopicsCount'
     */
    @Test
    public void privateTopicsCountTest() {
        // TODO: test privateTopicsCount
    }

    /**
     * Test the property 'registrationIpAddress'
     */
    @Test
    public void registrationIpAddressTest() {
        // TODO: test registrationIpAddress
    }

    /**
     * Test the property 'resetBounceScoreAfter'
     */
    @Test
    public void resetBounceScoreAfterTest() {
        // TODO: test resetBounceScoreAfter
    }

    /**
     * Test the property 'silenceReason'
     */
    @Test
    public void silenceReasonTest() {
        // TODO: test silenceReason
    }

    /**
     * Test the property 'silencedBy'
     */
    @Test
    public void silencedByTest() {
        // TODO: test silencedBy
    }

    /**
     * Test the property 'singleSignOnRecord'
     */
    @Test
    public void singleSignOnRecordTest() {
        // TODO: test singleSignOnRecord
    }

    /**
     * Test the property 'staged'
     */
    @Test
    public void stagedTest() {
        // TODO: test staged
    }

    /**
     * Test the property 'suspendedBy'
     */
    @Test
    public void suspendedByTest() {
        // TODO: test suspendedBy
    }

    /**
     * Test the property 'timeRead'
     */
    @Test
    public void timeReadTest() {
        // TODO: test timeRead
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'tl3Requirements'
     */
    @Test
    public void tl3RequirementsTest() {
        // TODO: test tl3Requirements
    }

    /**
     * Test the property 'topicCount'
     */
    @Test
    public void topicCountTest() {
        // TODO: test topicCount
    }

    /**
     * Test the property 'topicsEntered'
     */
    @Test
    public void topicsEnteredTest() {
        // TODO: test topicsEntered
    }

    /**
     * Test the property 'trustLevel'
     */
    @Test
    public void trustLevelTest() {
        // TODO: test trustLevel
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        // TODO: test username
    }

    /**
     * Test the property 'warningsReceivedCount'
     */
    @Test
    public void warningsReceivedCountTest() {
        // TODO: test warningsReceivedCount
    }

}
