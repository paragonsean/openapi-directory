/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetSite200ResponseNotificationTypes
 */
public class GetSite200ResponseNotificationTypesTest {
    private final GetSite200ResponseNotificationTypes model = new GetSite200ResponseNotificationTypes();

    /**
     * Model tests for GetSite200ResponseNotificationTypes
     */
    @Test
    public void testGetSite200ResponseNotificationTypes() {
        // TODO: test GetSite200ResponseNotificationTypes
    }

    /**
     * Test the property 'assigned'
     */
    @Test
    public void assignedTest() {
        // TODO: test assigned
    }

    /**
     * Test the property 'bookmarkReminder'
     */
    @Test
    public void bookmarkReminderTest() {
        // TODO: test bookmarkReminder
    }

    /**
     * Test the property 'chatGroupMention'
     */
    @Test
    public void chatGroupMentionTest() {
        // TODO: test chatGroupMention
    }

    /**
     * Test the property 'chatInvitation'
     */
    @Test
    public void chatInvitationTest() {
        // TODO: test chatInvitation
    }

    /**
     * Test the property 'chatMention'
     */
    @Test
    public void chatMentionTest() {
        // TODO: test chatMention
    }

    /**
     * Test the property 'chatMessage'
     */
    @Test
    public void chatMessageTest() {
        // TODO: test chatMessage
    }

    /**
     * Test the property 'chatQuoted'
     */
    @Test
    public void chatQuotedTest() {
        // TODO: test chatQuoted
    }

    /**
     * Test the property 'circlesActivity'
     */
    @Test
    public void circlesActivityTest() {
        // TODO: test circlesActivity
    }

    /**
     * Test the property 'codeReviewCommitApproved'
     */
    @Test
    public void codeReviewCommitApprovedTest() {
        // TODO: test codeReviewCommitApproved
    }

    /**
     * Test the property 'custom'
     */
    @Test
    public void customTest() {
        // TODO: test custom
    }

    /**
     * Test the property 'edited'
     */
    @Test
    public void editedTest() {
        // TODO: test edited
    }

    /**
     * Test the property 'eventInvitation'
     */
    @Test
    public void eventInvitationTest() {
        // TODO: test eventInvitation
    }

    /**
     * Test the property 'eventReminder'
     */
    @Test
    public void eventReminderTest() {
        // TODO: test eventReminder
    }

    /**
     * Test the property 'following'
     */
    @Test
    public void followingTest() {
        // TODO: test following
    }

    /**
     * Test the property 'followingCreatedTopic'
     */
    @Test
    public void followingCreatedTopicTest() {
        // TODO: test followingCreatedTopic
    }

    /**
     * Test the property 'followingReplied'
     */
    @Test
    public void followingRepliedTest() {
        // TODO: test followingReplied
    }

    /**
     * Test the property 'grantedBadge'
     */
    @Test
    public void grantedBadgeTest() {
        // TODO: test grantedBadge
    }

    /**
     * Test the property 'groupMentioned'
     */
    @Test
    public void groupMentionedTest() {
        // TODO: test groupMentioned
    }

    /**
     * Test the property 'groupMessageSummary'
     */
    @Test
    public void groupMessageSummaryTest() {
        // TODO: test groupMessageSummary
    }

    /**
     * Test the property 'invitedToPrivateMessage'
     */
    @Test
    public void invitedToPrivateMessageTest() {
        // TODO: test invitedToPrivateMessage
    }

    /**
     * Test the property 'invitedToTopic'
     */
    @Test
    public void invitedToTopicTest() {
        // TODO: test invitedToTopic
    }

    /**
     * Test the property 'inviteeAccepted'
     */
    @Test
    public void inviteeAcceptedTest() {
        // TODO: test inviteeAccepted
    }

    /**
     * Test the property 'liked'
     */
    @Test
    public void likedTest() {
        // TODO: test liked
    }

    /**
     * Test the property 'likedConsolidated'
     */
    @Test
    public void likedConsolidatedTest() {
        // TODO: test likedConsolidated
    }

    /**
     * Test the property 'linked'
     */
    @Test
    public void linkedTest() {
        // TODO: test linked
    }

    /**
     * Test the property 'membershipRequestAccepted'
     */
    @Test
    public void membershipRequestAcceptedTest() {
        // TODO: test membershipRequestAccepted
    }

    /**
     * Test the property 'membershipRequestConsolidated'
     */
    @Test
    public void membershipRequestConsolidatedTest() {
        // TODO: test membershipRequestConsolidated
    }

    /**
     * Test the property 'mentioned'
     */
    @Test
    public void mentionedTest() {
        // TODO: test mentioned
    }

    /**
     * Test the property 'movedPost'
     */
    @Test
    public void movedPostTest() {
        // TODO: test movedPost
    }

    /**
     * Test the property 'newFeatures'
     */
    @Test
    public void newFeaturesTest() {
        // TODO: test newFeatures
    }

    /**
     * Test the property 'postApproved'
     */
    @Test
    public void postApprovedTest() {
        // TODO: test postApproved
    }

    /**
     * Test the property 'posted'
     */
    @Test
    public void postedTest() {
        // TODO: test posted
    }

    /**
     * Test the property 'privateMessage'
     */
    @Test
    public void privateMessageTest() {
        // TODO: test privateMessage
    }

    /**
     * Test the property 'questionAnswerUserCommented'
     */
    @Test
    public void questionAnswerUserCommentedTest() {
        // TODO: test questionAnswerUserCommented
    }

    /**
     * Test the property 'quoted'
     */
    @Test
    public void quotedTest() {
        // TODO: test quoted
    }

    /**
     * Test the property 'reaction'
     */
    @Test
    public void reactionTest() {
        // TODO: test reaction
    }

    /**
     * Test the property 'replied'
     */
    @Test
    public void repliedTest() {
        // TODO: test replied
    }

    /**
     * Test the property 'topicReminder'
     */
    @Test
    public void topicReminderTest() {
        // TODO: test topicReminder
    }

    /**
     * Test the property 'votesReleased'
     */
    @Test
    public void votesReleasedTest() {
        // TODO: test votesReleased
    }

    /**
     * Test the property 'watchingCategoryOrTag'
     */
    @Test
    public void watchingCategoryOrTagTest() {
        // TODO: test watchingCategoryOrTag
    }

    /**
     * Test the property 'watchingFirstPost'
     */
    @Test
    public void watchingFirstPostTest() {
        // TODO: test watchingFirstPost
    }

}
