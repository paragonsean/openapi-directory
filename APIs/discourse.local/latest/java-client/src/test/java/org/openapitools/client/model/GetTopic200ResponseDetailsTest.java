/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdminGetUser200ResponseApprovedBy;
import org.openapitools.client.model.GetTopic200ResponseDetailsParticipantsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetTopic200ResponseDetails
 */
public class GetTopic200ResponseDetailsTest {
    private final GetTopic200ResponseDetails model = new GetTopic200ResponseDetails();

    /**
     * Model tests for GetTopic200ResponseDetails
     */
    @Test
    public void testGetTopic200ResponseDetails() {
        // TODO: test GetTopic200ResponseDetails
    }

    /**
     * Test the property 'canArchiveTopic'
     */
    @Test
    public void canArchiveTopicTest() {
        // TODO: test canArchiveTopic
    }

    /**
     * Test the property 'canCloseTopic'
     */
    @Test
    public void canCloseTopicTest() {
        // TODO: test canCloseTopic
    }

    /**
     * Test the property 'canConvertTopic'
     */
    @Test
    public void canConvertTopicTest() {
        // TODO: test canConvertTopic
    }

    /**
     * Test the property 'canCreatePost'
     */
    @Test
    public void canCreatePostTest() {
        // TODO: test canCreatePost
    }

    /**
     * Test the property 'canDelete'
     */
    @Test
    public void canDeleteTest() {
        // TODO: test canDelete
    }

    /**
     * Test the property 'canEdit'
     */
    @Test
    public void canEditTest() {
        // TODO: test canEdit
    }

    /**
     * Test the property 'canEditStaffNotes'
     */
    @Test
    public void canEditStaffNotesTest() {
        // TODO: test canEditStaffNotes
    }

    /**
     * Test the property 'canFlagTopic'
     */
    @Test
    public void canFlagTopicTest() {
        // TODO: test canFlagTopic
    }

    /**
     * Test the property 'canInviteTo'
     */
    @Test
    public void canInviteToTest() {
        // TODO: test canInviteTo
    }

    /**
     * Test the property 'canInviteViaEmail'
     */
    @Test
    public void canInviteViaEmailTest() {
        // TODO: test canInviteViaEmail
    }

    /**
     * Test the property 'canModerateCategory'
     */
    @Test
    public void canModerateCategoryTest() {
        // TODO: test canModerateCategory
    }

    /**
     * Test the property 'canMovePosts'
     */
    @Test
    public void canMovePostsTest() {
        // TODO: test canMovePosts
    }

    /**
     * Test the property 'canPinUnpinTopic'
     */
    @Test
    public void canPinUnpinTopicTest() {
        // TODO: test canPinUnpinTopic
    }

    /**
     * Test the property 'canRemoveAllowedUsers'
     */
    @Test
    public void canRemoveAllowedUsersTest() {
        // TODO: test canRemoveAllowedUsers
    }

    /**
     * Test the property 'canRemoveSelfId'
     */
    @Test
    public void canRemoveSelfIdTest() {
        // TODO: test canRemoveSelfId
    }

    /**
     * Test the property 'canReplyAsNewTopic'
     */
    @Test
    public void canReplyAsNewTopicTest() {
        // TODO: test canReplyAsNewTopic
    }

    /**
     * Test the property 'canReviewTopic'
     */
    @Test
    public void canReviewTopicTest() {
        // TODO: test canReviewTopic
    }

    /**
     * Test the property 'canSplitMergeTopic'
     */
    @Test
    public void canSplitMergeTopicTest() {
        // TODO: test canSplitMergeTopic
    }

    /**
     * Test the property 'canToggleTopicVisibility'
     */
    @Test
    public void canToggleTopicVisibilityTest() {
        // TODO: test canToggleTopicVisibility
    }

    /**
     * Test the property 'createdBy'
     */
    @Test
    public void createdByTest() {
        // TODO: test createdBy
    }

    /**
     * Test the property 'lastPoster'
     */
    @Test
    public void lastPosterTest() {
        // TODO: test lastPoster
    }

    /**
     * Test the property 'notificationLevel'
     */
    @Test
    public void notificationLevelTest() {
        // TODO: test notificationLevel
    }

    /**
     * Test the property 'participants'
     */
    @Test
    public void participantsTest() {
        // TODO: test participants
    }

}
