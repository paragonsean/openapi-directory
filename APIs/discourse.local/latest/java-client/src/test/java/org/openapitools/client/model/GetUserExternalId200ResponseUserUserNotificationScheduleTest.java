/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetUserExternalId200ResponseUserUserNotificationSchedule
 */
public class GetUserExternalId200ResponseUserUserNotificationScheduleTest {
    private final GetUserExternalId200ResponseUserUserNotificationSchedule model = new GetUserExternalId200ResponseUserUserNotificationSchedule();

    /**
     * Model tests for GetUserExternalId200ResponseUserUserNotificationSchedule
     */
    @Test
    public void testGetUserExternalId200ResponseUserUserNotificationSchedule() {
        // TODO: test GetUserExternalId200ResponseUserUserNotificationSchedule
    }

    /**
     * Test the property 'day0EndTime'
     */
    @Test
    public void day0EndTimeTest() {
        // TODO: test day0EndTime
    }

    /**
     * Test the property 'day0StartTime'
     */
    @Test
    public void day0StartTimeTest() {
        // TODO: test day0StartTime
    }

    /**
     * Test the property 'day1EndTime'
     */
    @Test
    public void day1EndTimeTest() {
        // TODO: test day1EndTime
    }

    /**
     * Test the property 'day1StartTime'
     */
    @Test
    public void day1StartTimeTest() {
        // TODO: test day1StartTime
    }

    /**
     * Test the property 'day2EndTime'
     */
    @Test
    public void day2EndTimeTest() {
        // TODO: test day2EndTime
    }

    /**
     * Test the property 'day2StartTime'
     */
    @Test
    public void day2StartTimeTest() {
        // TODO: test day2StartTime
    }

    /**
     * Test the property 'day3EndTime'
     */
    @Test
    public void day3EndTimeTest() {
        // TODO: test day3EndTime
    }

    /**
     * Test the property 'day3StartTime'
     */
    @Test
    public void day3StartTimeTest() {
        // TODO: test day3StartTime
    }

    /**
     * Test the property 'day4EndTime'
     */
    @Test
    public void day4EndTimeTest() {
        // TODO: test day4EndTime
    }

    /**
     * Test the property 'day4StartTime'
     */
    @Test
    public void day4StartTimeTest() {
        // TODO: test day4StartTime
    }

    /**
     * Test the property 'day5EndTime'
     */
    @Test
    public void day5EndTimeTest() {
        // TODO: test day5EndTime
    }

    /**
     * Test the property 'day5StartTime'
     */
    @Test
    public void day5StartTimeTest() {
        // TODO: test day5StartTime
    }

    /**
     * Test the property 'day6EndTime'
     */
    @Test
    public void day6EndTimeTest() {
        // TODO: test day6EndTime
    }

    /**
     * Test the property 'day6StartTime'
     */
    @Test
    public void day6StartTimeTest() {
        // TODO: test day6StartTime
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

}
