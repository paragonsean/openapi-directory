/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminGetUser200ResponseTl3RequirementsPenaltyCounts;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AdminGetUser200ResponseTl3Requirements
 */
public class AdminGetUser200ResponseTl3RequirementsTest {
    private final AdminGetUser200ResponseTl3Requirements model = new AdminGetUser200ResponseTl3Requirements();

    /**
     * Model tests for AdminGetUser200ResponseTl3Requirements
     */
    @Test
    public void testAdminGetUser200ResponseTl3Requirements() {
        // TODO: test AdminGetUser200ResponseTl3Requirements
    }

    /**
     * Test the property 'daysVisited'
     */
    @Test
    public void daysVisitedTest() {
        // TODO: test daysVisited
    }

    /**
     * Test the property 'maxFlaggedByUsers'
     */
    @Test
    public void maxFlaggedByUsersTest() {
        // TODO: test maxFlaggedByUsers
    }

    /**
     * Test the property 'maxFlaggedPosts'
     */
    @Test
    public void maxFlaggedPostsTest() {
        // TODO: test maxFlaggedPosts
    }

    /**
     * Test the property 'minDaysVisited'
     */
    @Test
    public void minDaysVisitedTest() {
        // TODO: test minDaysVisited
    }

    /**
     * Test the property 'minLikesGiven'
     */
    @Test
    public void minLikesGivenTest() {
        // TODO: test minLikesGiven
    }

    /**
     * Test the property 'minLikesReceived'
     */
    @Test
    public void minLikesReceivedTest() {
        // TODO: test minLikesReceived
    }

    /**
     * Test the property 'minLikesReceivedDays'
     */
    @Test
    public void minLikesReceivedDaysTest() {
        // TODO: test minLikesReceivedDays
    }

    /**
     * Test the property 'minLikesReceivedUsers'
     */
    @Test
    public void minLikesReceivedUsersTest() {
        // TODO: test minLikesReceivedUsers
    }

    /**
     * Test the property 'minPostsRead'
     */
    @Test
    public void minPostsReadTest() {
        // TODO: test minPostsRead
    }

    /**
     * Test the property 'minPostsReadAllTime'
     */
    @Test
    public void minPostsReadAllTimeTest() {
        // TODO: test minPostsReadAllTime
    }

    /**
     * Test the property 'minTopicsRepliedTo'
     */
    @Test
    public void minTopicsRepliedToTest() {
        // TODO: test minTopicsRepliedTo
    }

    /**
     * Test the property 'minTopicsViewed'
     */
    @Test
    public void minTopicsViewedTest() {
        // TODO: test minTopicsViewed
    }

    /**
     * Test the property 'minTopicsViewedAllTime'
     */
    @Test
    public void minTopicsViewedAllTimeTest() {
        // TODO: test minTopicsViewedAllTime
    }

    /**
     * Test the property 'numFlaggedByUsers'
     */
    @Test
    public void numFlaggedByUsersTest() {
        // TODO: test numFlaggedByUsers
    }

    /**
     * Test the property 'numFlaggedPosts'
     */
    @Test
    public void numFlaggedPostsTest() {
        // TODO: test numFlaggedPosts
    }

    /**
     * Test the property 'numLikesGiven'
     */
    @Test
    public void numLikesGivenTest() {
        // TODO: test numLikesGiven
    }

    /**
     * Test the property 'numLikesReceived'
     */
    @Test
    public void numLikesReceivedTest() {
        // TODO: test numLikesReceived
    }

    /**
     * Test the property 'numLikesReceivedDays'
     */
    @Test
    public void numLikesReceivedDaysTest() {
        // TODO: test numLikesReceivedDays
    }

    /**
     * Test the property 'numLikesReceivedUsers'
     */
    @Test
    public void numLikesReceivedUsersTest() {
        // TODO: test numLikesReceivedUsers
    }

    /**
     * Test the property 'numTopicsRepliedTo'
     */
    @Test
    public void numTopicsRepliedToTest() {
        // TODO: test numTopicsRepliedTo
    }

    /**
     * Test the property 'onGracePeriod'
     */
    @Test
    public void onGracePeriodTest() {
        // TODO: test onGracePeriod
    }

    /**
     * Test the property 'penaltyCounts'
     */
    @Test
    public void penaltyCountsTest() {
        // TODO: test penaltyCounts
    }

    /**
     * Test the property 'postsRead'
     */
    @Test
    public void postsReadTest() {
        // TODO: test postsRead
    }

    /**
     * Test the property 'postsReadAllTime'
     */
    @Test
    public void postsReadAllTimeTest() {
        // TODO: test postsReadAllTime
    }

    /**
     * Test the property 'requirementsLost'
     */
    @Test
    public void requirementsLostTest() {
        // TODO: test requirementsLost
    }

    /**
     * Test the property 'requirementsMet'
     */
    @Test
    public void requirementsMetTest() {
        // TODO: test requirementsMet
    }

    /**
     * Test the property 'timePeriod'
     */
    @Test
    public void timePeriodTest() {
        // TODO: test timePeriod
    }

    /**
     * Test the property 'topicsViewed'
     */
    @Test
    public void topicsViewedTest() {
        // TODO: test topicsViewed
    }

    /**
     * Test the property 'topicsViewedAllTime'
     */
    @Test
    public void topicsViewedAllTimeTest() {
        // TODO: test topicsViewedAllTime
    }

    /**
     * Test the property 'trustLevelLocked'
     */
    @Test
    public void trustLevelLockedTest() {
        // TODO: test trustLevelLocked
    }

}
