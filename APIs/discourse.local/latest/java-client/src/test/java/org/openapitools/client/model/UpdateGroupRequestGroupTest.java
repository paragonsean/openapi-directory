/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UpdateGroupRequestGroup
 */
public class UpdateGroupRequestGroupTest {
    private final UpdateGroupRequestGroup model = new UpdateGroupRequestGroup();

    /**
     * Model tests for UpdateGroupRequestGroup
     */
    @Test
    public void testUpdateGroupRequestGroup() {
        // TODO: test UpdateGroupRequestGroup
    }

    /**
     * Test the property 'automaticMembershipEmailDomains'
     */
    @Test
    public void automaticMembershipEmailDomainsTest() {
        // TODO: test automaticMembershipEmailDomains
    }

    /**
     * Test the property 'bioRaw'
     */
    @Test
    public void bioRawTest() {
        // TODO: test bioRaw
    }

    /**
     * Test the property 'defaultNotificationLevel'
     */
    @Test
    public void defaultNotificationLevelTest() {
        // TODO: test defaultNotificationLevel
    }

    /**
     * Test the property 'flairBgColor'
     */
    @Test
    public void flairBgColorTest() {
        // TODO: test flairBgColor
    }

    /**
     * Test the property 'flairIcon'
     */
    @Test
    public void flairIconTest() {
        // TODO: test flairIcon
    }

    /**
     * Test the property 'flairUploadId'
     */
    @Test
    public void flairUploadIdTest() {
        // TODO: test flairUploadId
    }

    /**
     * Test the property 'fullName'
     */
    @Test
    public void fullNameTest() {
        // TODO: test fullName
    }

    /**
     * Test the property 'mutedCategoryIds'
     */
    @Test
    public void mutedCategoryIdsTest() {
        // TODO: test mutedCategoryIds
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'ownerUsernames'
     */
    @Test
    public void ownerUsernamesTest() {
        // TODO: test ownerUsernames
    }

    /**
     * Test the property 'primaryGroup'
     */
    @Test
    public void primaryGroupTest() {
        // TODO: test primaryGroup
    }

    /**
     * Test the property 'publicAdmission'
     */
    @Test
    public void publicAdmissionTest() {
        // TODO: test publicAdmission
    }

    /**
     * Test the property 'publicExit'
     */
    @Test
    public void publicExitTest() {
        // TODO: test publicExit
    }

    /**
     * Test the property 'regularCategoryIds'
     */
    @Test
    public void regularCategoryIdsTest() {
        // TODO: test regularCategoryIds
    }

    /**
     * Test the property 'trackingCategoryIds'
     */
    @Test
    public void trackingCategoryIdsTest() {
        // TODO: test trackingCategoryIds
    }

    /**
     * Test the property 'usernames'
     */
    @Test
    public void usernamesTest() {
        // TODO: test usernames
    }

    /**
     * Test the property 'visibilityLevel'
     */
    @Test
    public void visibilityLevelTest() {
        // TODO: test visibilityLevel
    }

    /**
     * Test the property 'watchingCategoryIds'
     */
    @Test
    public void watchingCategoryIdsTest() {
        // TODO: test watchingCategoryIds
    }

    /**
     * Test the property 'watchingFirstPostCategoryIds'
     */
    @Test
    public void watchingFirstPostCategoryIdsTest() {
        // TODO: test watchingFirstPostCategoryIds
    }

}
