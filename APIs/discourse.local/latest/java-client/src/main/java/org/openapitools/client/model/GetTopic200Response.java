/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetTopic200ResponseActionsSummaryInner;
import org.openapitools.client.model.GetTopic200ResponseDetails;
import org.openapitools.client.model.GetTopic200ResponsePostStream;
import org.openapitools.client.model.GetTopic200ResponseSuggestedTopicsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTopic200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTopic200Response {
  public static final String SERIALIZED_NAME_ACTIONS_SUMMARY = "actions_summary";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUMMARY)
  private List<GetTopic200ResponseActionsSummaryInner> actionsSummary = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARCHETYPE = "archetype";
  @SerializedName(SERIALIZED_NAME_ARCHETYPE)
  private String archetype;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_BOOKMARKED = "bookmarked";
  @SerializedName(SERIALIZED_NAME_BOOKMARKED)
  private Boolean bookmarked;

  public static final String SERIALIZED_NAME_BOOKMARKS = "bookmarks";
  @SerializedName(SERIALIZED_NAME_BOOKMARKS)
  private List<Object> bookmarks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CHUNK_SIZE = "chunk_size";
  @SerializedName(SERIALIZED_NAME_CHUNK_SIZE)
  private Integer chunkSize;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CURRENT_POST_NUMBER = "current_post_number";
  @SerializedName(SERIALIZED_NAME_CURRENT_POST_NUMBER)
  private Integer currentPostNumber;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private String deletedAt;

  public static final String SERIALIZED_NAME_DELETED_BY = "deleted_by";
  @SerializedName(SERIALIZED_NAME_DELETED_BY)
  private String deletedBy;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private GetTopic200ResponseDetails details;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private String draft;

  public static final String SERIALIZED_NAME_DRAFT_KEY = "draft_key";
  @SerializedName(SERIALIZED_NAME_DRAFT_KEY)
  private String draftKey;

  public static final String SERIALIZED_NAME_DRAFT_SEQUENCE = "draft_sequence";
  @SerializedName(SERIALIZED_NAME_DRAFT_SEQUENCE)
  private Integer draftSequence;

  public static final String SERIALIZED_NAME_FANCY_TITLE = "fancy_title";
  @SerializedName(SERIALIZED_NAME_FANCY_TITLE)
  private String fancyTitle;

  public static final String SERIALIZED_NAME_FEATURED_LINK = "featured_link";
  @SerializedName(SERIALIZED_NAME_FEATURED_LINK)
  private String featuredLink;

  public static final String SERIALIZED_NAME_HAS_DELETED = "has_deleted";
  @SerializedName(SERIALIZED_NAME_HAS_DELETED)
  private Boolean hasDeleted;

  public static final String SERIALIZED_NAME_HAS_SUMMARY = "has_summary";
  @SerializedName(SERIALIZED_NAME_HAS_SUMMARY)
  private Boolean hasSummary;

  public static final String SERIALIZED_NAME_HIGHEST_POST_NUMBER = "highest_post_number";
  @SerializedName(SERIALIZED_NAME_HIGHEST_POST_NUMBER)
  private Integer highestPostNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LAST_POSTED_AT = "last_posted_at";
  @SerializedName(SERIALIZED_NAME_LAST_POSTED_AT)
  private String lastPostedAt;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "like_count";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private Integer likeCount;

  public static final String SERIALIZED_NAME_MESSAGE_BUS_LAST_ID = "message_bus_last_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BUS_LAST_ID)
  private Integer messageBusLastId;

  public static final String SERIALIZED_NAME_PARTICIPANT_COUNT = "participant_count";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_COUNT)
  private Integer participantCount;

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  private Boolean pinned;

  public static final String SERIALIZED_NAME_PINNED_AT = "pinned_at";
  @SerializedName(SERIALIZED_NAME_PINNED_AT)
  private String pinnedAt;

  public static final String SERIALIZED_NAME_PINNED_GLOBALLY = "pinned_globally";
  @SerializedName(SERIALIZED_NAME_PINNED_GLOBALLY)
  private Boolean pinnedGlobally;

  public static final String SERIALIZED_NAME_PINNED_UNTIL = "pinned_until";
  @SerializedName(SERIALIZED_NAME_PINNED_UNTIL)
  private String pinnedUntil;

  public static final String SERIALIZED_NAME_POST_STREAM = "post_stream";
  @SerializedName(SERIALIZED_NAME_POST_STREAM)
  private GetTopic200ResponsePostStream postStream;

  public static final String SERIALIZED_NAME_POSTS_COUNT = "posts_count";
  @SerializedName(SERIALIZED_NAME_POSTS_COUNT)
  private Integer postsCount;

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_SHOW_READ_INDICATOR = "show_read_indicator";
  @SerializedName(SERIALIZED_NAME_SHOW_READ_INDICATOR)
  private Boolean showReadIndicator;

  public static final String SERIALIZED_NAME_SLOW_MODE_ENABLED_UNTIL = "slow_mode_enabled_until";
  @SerializedName(SERIALIZED_NAME_SLOW_MODE_ENABLED_UNTIL)
  private String slowModeEnabledUntil;

  public static final String SERIALIZED_NAME_SLOW_MODE_SECONDS = "slow_mode_seconds";
  @SerializedName(SERIALIZED_NAME_SLOW_MODE_SECONDS)
  private Integer slowModeSeconds;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SUGGESTED_TOPICS = "suggested_topics";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_TOPICS)
  private List<GetTopic200ResponseSuggestedTopicsInner> suggestedTopics = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS_DESCRIPTIONS = "tags_descriptions";
  @SerializedName(SERIALIZED_NAME_TAGS_DESCRIPTIONS)
  private Map<String, Object> tagsDescriptions = new HashMap<>();

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private String thumbnails;

  public static final String SERIALIZED_NAME_TIMELINE_LOOKUP = "timeline_lookup";
  @SerializedName(SERIALIZED_NAME_TIMELINE_LOOKUP)
  private List<Object> timelineLookup = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPIC_TIMER = "topic_timer";
  @SerializedName(SERIALIZED_NAME_TOPIC_TIMER)
  private String topicTimer;

  public static final String SERIALIZED_NAME_UNPINNED = "unpinned";
  @SerializedName(SERIALIZED_NAME_UNPINNED)
  private String unpinned;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private Integer views;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_WORD_COUNT = "word_count";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT)
  private Integer wordCount;

  public GetTopic200Response() {
  }

  public GetTopic200Response actionsSummary(List<GetTopic200ResponseActionsSummaryInner> actionsSummary) {
    this.actionsSummary = actionsSummary;
    return this;
  }

  public GetTopic200Response addActionsSummaryItem(GetTopic200ResponseActionsSummaryInner actionsSummaryItem) {
    if (this.actionsSummary == null) {
      this.actionsSummary = new ArrayList<>();
    }
    this.actionsSummary.add(actionsSummaryItem);
    return this;
  }

  /**
   * Get actionsSummary
   * @return actionsSummary
   */
  @javax.annotation.Nonnull
  public List<GetTopic200ResponseActionsSummaryInner> getActionsSummary() {
    return actionsSummary;
  }

  public void setActionsSummary(List<GetTopic200ResponseActionsSummaryInner> actionsSummary) {
    this.actionsSummary = actionsSummary;
  }


  public GetTopic200Response archetype(String archetype) {
    this.archetype = archetype;
    return this;
  }

  /**
   * Get archetype
   * @return archetype
   */
  @javax.annotation.Nonnull
  public String getArchetype() {
    return archetype;
  }

  public void setArchetype(String archetype) {
    this.archetype = archetype;
  }


  public GetTopic200Response archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nonnull
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public GetTopic200Response bookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
    return this;
  }

  /**
   * Get bookmarked
   * @return bookmarked
   */
  @javax.annotation.Nonnull
  public Boolean getBookmarked() {
    return bookmarked;
  }

  public void setBookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
  }


  public GetTopic200Response bookmarks(List<Object> bookmarks) {
    this.bookmarks = bookmarks;
    return this;
  }

  public GetTopic200Response addBookmarksItem(Object bookmarksItem) {
    if (this.bookmarks == null) {
      this.bookmarks = new ArrayList<>();
    }
    this.bookmarks.add(bookmarksItem);
    return this;
  }

  /**
   * Get bookmarks
   * @return bookmarks
   */
  @javax.annotation.Nonnull
  public List<Object> getBookmarks() {
    return bookmarks;
  }

  public void setBookmarks(List<Object> bookmarks) {
    this.bookmarks = bookmarks;
  }


  public GetTopic200Response categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nonnull
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public GetTopic200Response chunkSize(Integer chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }

  /**
   * Get chunkSize
   * @return chunkSize
   */
  @javax.annotation.Nonnull
  public Integer getChunkSize() {
    return chunkSize;
  }

  public void setChunkSize(Integer chunkSize) {
    this.chunkSize = chunkSize;
  }


  public GetTopic200Response closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nonnull
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public GetTopic200Response createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GetTopic200Response currentPostNumber(Integer currentPostNumber) {
    this.currentPostNumber = currentPostNumber;
    return this;
  }

  /**
   * Get currentPostNumber
   * @return currentPostNumber
   */
  @javax.annotation.Nullable
  public Integer getCurrentPostNumber() {
    return currentPostNumber;
  }

  public void setCurrentPostNumber(Integer currentPostNumber) {
    this.currentPostNumber = currentPostNumber;
  }


  public GetTopic200Response deletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public String getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
  }


  public GetTopic200Response deletedBy(String deletedBy) {
    this.deletedBy = deletedBy;
    return this;
  }

  /**
   * Get deletedBy
   * @return deletedBy
   */
  @javax.annotation.Nullable
  public String getDeletedBy() {
    return deletedBy;
  }

  public void setDeletedBy(String deletedBy) {
    this.deletedBy = deletedBy;
  }


  public GetTopic200Response details(GetTopic200ResponseDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nonnull
  public GetTopic200ResponseDetails getDetails() {
    return details;
  }

  public void setDetails(GetTopic200ResponseDetails details) {
    this.details = details;
  }


  public GetTopic200Response draft(String draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Get draft
   * @return draft
   */
  @javax.annotation.Nullable
  public String getDraft() {
    return draft;
  }

  public void setDraft(String draft) {
    this.draft = draft;
  }


  public GetTopic200Response draftKey(String draftKey) {
    this.draftKey = draftKey;
    return this;
  }

  /**
   * Get draftKey
   * @return draftKey
   */
  @javax.annotation.Nonnull
  public String getDraftKey() {
    return draftKey;
  }

  public void setDraftKey(String draftKey) {
    this.draftKey = draftKey;
  }


  public GetTopic200Response draftSequence(Integer draftSequence) {
    this.draftSequence = draftSequence;
    return this;
  }

  /**
   * Get draftSequence
   * @return draftSequence
   */
  @javax.annotation.Nonnull
  public Integer getDraftSequence() {
    return draftSequence;
  }

  public void setDraftSequence(Integer draftSequence) {
    this.draftSequence = draftSequence;
  }


  public GetTopic200Response fancyTitle(String fancyTitle) {
    this.fancyTitle = fancyTitle;
    return this;
  }

  /**
   * Get fancyTitle
   * @return fancyTitle
   */
  @javax.annotation.Nonnull
  public String getFancyTitle() {
    return fancyTitle;
  }

  public void setFancyTitle(String fancyTitle) {
    this.fancyTitle = fancyTitle;
  }


  public GetTopic200Response featuredLink(String featuredLink) {
    this.featuredLink = featuredLink;
    return this;
  }

  /**
   * Get featuredLink
   * @return featuredLink
   */
  @javax.annotation.Nullable
  public String getFeaturedLink() {
    return featuredLink;
  }

  public void setFeaturedLink(String featuredLink) {
    this.featuredLink = featuredLink;
  }


  public GetTopic200Response hasDeleted(Boolean hasDeleted) {
    this.hasDeleted = hasDeleted;
    return this;
  }

  /**
   * Get hasDeleted
   * @return hasDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getHasDeleted() {
    return hasDeleted;
  }

  public void setHasDeleted(Boolean hasDeleted) {
    this.hasDeleted = hasDeleted;
  }


  public GetTopic200Response hasSummary(Boolean hasSummary) {
    this.hasSummary = hasSummary;
    return this;
  }

  /**
   * Get hasSummary
   * @return hasSummary
   */
  @javax.annotation.Nonnull
  public Boolean getHasSummary() {
    return hasSummary;
  }

  public void setHasSummary(Boolean hasSummary) {
    this.hasSummary = hasSummary;
  }


  public GetTopic200Response highestPostNumber(Integer highestPostNumber) {
    this.highestPostNumber = highestPostNumber;
    return this;
  }

  /**
   * Get highestPostNumber
   * @return highestPostNumber
   */
  @javax.annotation.Nullable
  public Integer getHighestPostNumber() {
    return highestPostNumber;
  }

  public void setHighestPostNumber(Integer highestPostNumber) {
    this.highestPostNumber = highestPostNumber;
  }


  public GetTopic200Response id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetTopic200Response imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public GetTopic200Response lastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
    return this;
  }

  /**
   * Get lastPostedAt
   * @return lastPostedAt
   */
  @javax.annotation.Nullable
  public String getLastPostedAt() {
    return lastPostedAt;
  }

  public void setLastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
  }


  public GetTopic200Response likeCount(Integer likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * Get likeCount
   * @return likeCount
   */
  @javax.annotation.Nonnull
  public Integer getLikeCount() {
    return likeCount;
  }

  public void setLikeCount(Integer likeCount) {
    this.likeCount = likeCount;
  }


  public GetTopic200Response messageBusLastId(Integer messageBusLastId) {
    this.messageBusLastId = messageBusLastId;
    return this;
  }

  /**
   * Get messageBusLastId
   * @return messageBusLastId
   */
  @javax.annotation.Nonnull
  public Integer getMessageBusLastId() {
    return messageBusLastId;
  }

  public void setMessageBusLastId(Integer messageBusLastId) {
    this.messageBusLastId = messageBusLastId;
  }


  public GetTopic200Response participantCount(Integer participantCount) {
    this.participantCount = participantCount;
    return this;
  }

  /**
   * Get participantCount
   * @return participantCount
   */
  @javax.annotation.Nonnull
  public Integer getParticipantCount() {
    return participantCount;
  }

  public void setParticipantCount(Integer participantCount) {
    this.participantCount = participantCount;
  }


  public GetTopic200Response pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Get pinned
   * @return pinned
   */
  @javax.annotation.Nonnull
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }


  public GetTopic200Response pinnedAt(String pinnedAt) {
    this.pinnedAt = pinnedAt;
    return this;
  }

  /**
   * Get pinnedAt
   * @return pinnedAt
   */
  @javax.annotation.Nullable
  public String getPinnedAt() {
    return pinnedAt;
  }

  public void setPinnedAt(String pinnedAt) {
    this.pinnedAt = pinnedAt;
  }


  public GetTopic200Response pinnedGlobally(Boolean pinnedGlobally) {
    this.pinnedGlobally = pinnedGlobally;
    return this;
  }

  /**
   * Get pinnedGlobally
   * @return pinnedGlobally
   */
  @javax.annotation.Nonnull
  public Boolean getPinnedGlobally() {
    return pinnedGlobally;
  }

  public void setPinnedGlobally(Boolean pinnedGlobally) {
    this.pinnedGlobally = pinnedGlobally;
  }


  public GetTopic200Response pinnedUntil(String pinnedUntil) {
    this.pinnedUntil = pinnedUntil;
    return this;
  }

  /**
   * Get pinnedUntil
   * @return pinnedUntil
   */
  @javax.annotation.Nullable
  public String getPinnedUntil() {
    return pinnedUntil;
  }

  public void setPinnedUntil(String pinnedUntil) {
    this.pinnedUntil = pinnedUntil;
  }


  public GetTopic200Response postStream(GetTopic200ResponsePostStream postStream) {
    this.postStream = postStream;
    return this;
  }

  /**
   * Get postStream
   * @return postStream
   */
  @javax.annotation.Nonnull
  public GetTopic200ResponsePostStream getPostStream() {
    return postStream;
  }

  public void setPostStream(GetTopic200ResponsePostStream postStream) {
    this.postStream = postStream;
  }


  public GetTopic200Response postsCount(Integer postsCount) {
    this.postsCount = postsCount;
    return this;
  }

  /**
   * Get postsCount
   * @return postsCount
   */
  @javax.annotation.Nonnull
  public Integer getPostsCount() {
    return postsCount;
  }

  public void setPostsCount(Integer postsCount) {
    this.postsCount = postsCount;
  }


  public GetTopic200Response replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Get replyCount
   * @return replyCount
   */
  @javax.annotation.Nonnull
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public GetTopic200Response showReadIndicator(Boolean showReadIndicator) {
    this.showReadIndicator = showReadIndicator;
    return this;
  }

  /**
   * Get showReadIndicator
   * @return showReadIndicator
   */
  @javax.annotation.Nonnull
  public Boolean getShowReadIndicator() {
    return showReadIndicator;
  }

  public void setShowReadIndicator(Boolean showReadIndicator) {
    this.showReadIndicator = showReadIndicator;
  }


  public GetTopic200Response slowModeEnabledUntil(String slowModeEnabledUntil) {
    this.slowModeEnabledUntil = slowModeEnabledUntil;
    return this;
  }

  /**
   * Get slowModeEnabledUntil
   * @return slowModeEnabledUntil
   */
  @javax.annotation.Nullable
  public String getSlowModeEnabledUntil() {
    return slowModeEnabledUntil;
  }

  public void setSlowModeEnabledUntil(String slowModeEnabledUntil) {
    this.slowModeEnabledUntil = slowModeEnabledUntil;
  }


  public GetTopic200Response slowModeSeconds(Integer slowModeSeconds) {
    this.slowModeSeconds = slowModeSeconds;
    return this;
  }

  /**
   * Get slowModeSeconds
   * @return slowModeSeconds
   */
  @javax.annotation.Nonnull
  public Integer getSlowModeSeconds() {
    return slowModeSeconds;
  }

  public void setSlowModeSeconds(Integer slowModeSeconds) {
    this.slowModeSeconds = slowModeSeconds;
  }


  public GetTopic200Response slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public GetTopic200Response suggestedTopics(List<GetTopic200ResponseSuggestedTopicsInner> suggestedTopics) {
    this.suggestedTopics = suggestedTopics;
    return this;
  }

  public GetTopic200Response addSuggestedTopicsItem(GetTopic200ResponseSuggestedTopicsInner suggestedTopicsItem) {
    if (this.suggestedTopics == null) {
      this.suggestedTopics = new ArrayList<>();
    }
    this.suggestedTopics.add(suggestedTopicsItem);
    return this;
  }

  /**
   * Get suggestedTopics
   * @return suggestedTopics
   */
  @javax.annotation.Nonnull
  public List<GetTopic200ResponseSuggestedTopicsInner> getSuggestedTopics() {
    return suggestedTopics;
  }

  public void setSuggestedTopics(List<GetTopic200ResponseSuggestedTopicsInner> suggestedTopics) {
    this.suggestedTopics = suggestedTopics;
  }


  public GetTopic200Response tags(List<Object> tags) {
    this.tags = tags;
    return this;
  }

  public GetTopic200Response addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nonnull
  public List<Object> getTags() {
    return tags;
  }

  public void setTags(List<Object> tags) {
    this.tags = tags;
  }


  public GetTopic200Response tagsDescriptions(Map<String, Object> tagsDescriptions) {
    this.tagsDescriptions = tagsDescriptions;
    return this;
  }

  public GetTopic200Response putTagsDescriptionsItem(String key, Object tagsDescriptionsItem) {
    if (this.tagsDescriptions == null) {
      this.tagsDescriptions = new HashMap<>();
    }
    this.tagsDescriptions.put(key, tagsDescriptionsItem);
    return this;
  }

  /**
   * Get tagsDescriptions
   * @return tagsDescriptions
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getTagsDescriptions() {
    return tagsDescriptions;
  }

  public void setTagsDescriptions(Map<String, Object> tagsDescriptions) {
    this.tagsDescriptions = tagsDescriptions;
  }


  public GetTopic200Response thumbnails(String thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  /**
   * Get thumbnails
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public String getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(String thumbnails) {
    this.thumbnails = thumbnails;
  }


  public GetTopic200Response timelineLookup(List<Object> timelineLookup) {
    this.timelineLookup = timelineLookup;
    return this;
  }

  public GetTopic200Response addTimelineLookupItem(Object timelineLookupItem) {
    if (this.timelineLookup == null) {
      this.timelineLookup = new ArrayList<>();
    }
    this.timelineLookup.add(timelineLookupItem);
    return this;
  }

  /**
   * Get timelineLookup
   * @return timelineLookup
   */
  @javax.annotation.Nonnull
  public List<Object> getTimelineLookup() {
    return timelineLookup;
  }

  public void setTimelineLookup(List<Object> timelineLookup) {
    this.timelineLookup = timelineLookup;
  }


  public GetTopic200Response title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetTopic200Response topicTimer(String topicTimer) {
    this.topicTimer = topicTimer;
    return this;
  }

  /**
   * Get topicTimer
   * @return topicTimer
   */
  @javax.annotation.Nullable
  public String getTopicTimer() {
    return topicTimer;
  }

  public void setTopicTimer(String topicTimer) {
    this.topicTimer = topicTimer;
  }


  public GetTopic200Response unpinned(String unpinned) {
    this.unpinned = unpinned;
    return this;
  }

  /**
   * Get unpinned
   * @return unpinned
   */
  @javax.annotation.Nullable
  public String getUnpinned() {
    return unpinned;
  }

  public void setUnpinned(String unpinned) {
    this.unpinned = unpinned;
  }


  public GetTopic200Response userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public GetTopic200Response views(Integer views) {
    this.views = views;
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nonnull
  public Integer getViews() {
    return views;
  }

  public void setViews(Integer views) {
    this.views = views;
  }


  public GetTopic200Response visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nonnull
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public GetTopic200Response wordCount(Integer wordCount) {
    this.wordCount = wordCount;
    return this;
  }

  /**
   * Get wordCount
   * @return wordCount
   */
  @javax.annotation.Nullable
  public Integer getWordCount() {
    return wordCount;
  }

  public void setWordCount(Integer wordCount) {
    this.wordCount = wordCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetTopic200Response instance itself
   */
  public GetTopic200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTopic200Response getTopic200Response = (GetTopic200Response) o;
    return Objects.equals(this.actionsSummary, getTopic200Response.actionsSummary) &&
        Objects.equals(this.archetype, getTopic200Response.archetype) &&
        Objects.equals(this.archived, getTopic200Response.archived) &&
        Objects.equals(this.bookmarked, getTopic200Response.bookmarked) &&
        Objects.equals(this.bookmarks, getTopic200Response.bookmarks) &&
        Objects.equals(this.categoryId, getTopic200Response.categoryId) &&
        Objects.equals(this.chunkSize, getTopic200Response.chunkSize) &&
        Objects.equals(this.closed, getTopic200Response.closed) &&
        Objects.equals(this.createdAt, getTopic200Response.createdAt) &&
        Objects.equals(this.currentPostNumber, getTopic200Response.currentPostNumber) &&
        Objects.equals(this.deletedAt, getTopic200Response.deletedAt) &&
        Objects.equals(this.deletedBy, getTopic200Response.deletedBy) &&
        Objects.equals(this.details, getTopic200Response.details) &&
        Objects.equals(this.draft, getTopic200Response.draft) &&
        Objects.equals(this.draftKey, getTopic200Response.draftKey) &&
        Objects.equals(this.draftSequence, getTopic200Response.draftSequence) &&
        Objects.equals(this.fancyTitle, getTopic200Response.fancyTitle) &&
        Objects.equals(this.featuredLink, getTopic200Response.featuredLink) &&
        Objects.equals(this.hasDeleted, getTopic200Response.hasDeleted) &&
        Objects.equals(this.hasSummary, getTopic200Response.hasSummary) &&
        Objects.equals(this.highestPostNumber, getTopic200Response.highestPostNumber) &&
        Objects.equals(this.id, getTopic200Response.id) &&
        Objects.equals(this.imageUrl, getTopic200Response.imageUrl) &&
        Objects.equals(this.lastPostedAt, getTopic200Response.lastPostedAt) &&
        Objects.equals(this.likeCount, getTopic200Response.likeCount) &&
        Objects.equals(this.messageBusLastId, getTopic200Response.messageBusLastId) &&
        Objects.equals(this.participantCount, getTopic200Response.participantCount) &&
        Objects.equals(this.pinned, getTopic200Response.pinned) &&
        Objects.equals(this.pinnedAt, getTopic200Response.pinnedAt) &&
        Objects.equals(this.pinnedGlobally, getTopic200Response.pinnedGlobally) &&
        Objects.equals(this.pinnedUntil, getTopic200Response.pinnedUntil) &&
        Objects.equals(this.postStream, getTopic200Response.postStream) &&
        Objects.equals(this.postsCount, getTopic200Response.postsCount) &&
        Objects.equals(this.replyCount, getTopic200Response.replyCount) &&
        Objects.equals(this.showReadIndicator, getTopic200Response.showReadIndicator) &&
        Objects.equals(this.slowModeEnabledUntil, getTopic200Response.slowModeEnabledUntil) &&
        Objects.equals(this.slowModeSeconds, getTopic200Response.slowModeSeconds) &&
        Objects.equals(this.slug, getTopic200Response.slug) &&
        Objects.equals(this.suggestedTopics, getTopic200Response.suggestedTopics) &&
        Objects.equals(this.tags, getTopic200Response.tags) &&
        Objects.equals(this.tagsDescriptions, getTopic200Response.tagsDescriptions) &&
        Objects.equals(this.thumbnails, getTopic200Response.thumbnails) &&
        Objects.equals(this.timelineLookup, getTopic200Response.timelineLookup) &&
        Objects.equals(this.title, getTopic200Response.title) &&
        Objects.equals(this.topicTimer, getTopic200Response.topicTimer) &&
        Objects.equals(this.unpinned, getTopic200Response.unpinned) &&
        Objects.equals(this.userId, getTopic200Response.userId) &&
        Objects.equals(this.views, getTopic200Response.views) &&
        Objects.equals(this.visible, getTopic200Response.visible) &&
        Objects.equals(this.wordCount, getTopic200Response.wordCount)&&
        Objects.equals(this.additionalProperties, getTopic200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsSummary, archetype, archived, bookmarked, bookmarks, categoryId, chunkSize, closed, createdAt, currentPostNumber, deletedAt, deletedBy, details, draft, draftKey, draftSequence, fancyTitle, featuredLink, hasDeleted, hasSummary, highestPostNumber, id, imageUrl, lastPostedAt, likeCount, messageBusLastId, participantCount, pinned, pinnedAt, pinnedGlobally, pinnedUntil, postStream, postsCount, replyCount, showReadIndicator, slowModeEnabledUntil, slowModeSeconds, slug, suggestedTopics, tags, tagsDescriptions, thumbnails, timelineLookup, title, topicTimer, unpinned, userId, views, visible, wordCount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTopic200Response {\n");
    sb.append("    actionsSummary: ").append(toIndentedString(actionsSummary)).append("\n");
    sb.append("    archetype: ").append(toIndentedString(archetype)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    bookmarked: ").append(toIndentedString(bookmarked)).append("\n");
    sb.append("    bookmarks: ").append(toIndentedString(bookmarks)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    chunkSize: ").append(toIndentedString(chunkSize)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentPostNumber: ").append(toIndentedString(currentPostNumber)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    draftKey: ").append(toIndentedString(draftKey)).append("\n");
    sb.append("    draftSequence: ").append(toIndentedString(draftSequence)).append("\n");
    sb.append("    fancyTitle: ").append(toIndentedString(fancyTitle)).append("\n");
    sb.append("    featuredLink: ").append(toIndentedString(featuredLink)).append("\n");
    sb.append("    hasDeleted: ").append(toIndentedString(hasDeleted)).append("\n");
    sb.append("    hasSummary: ").append(toIndentedString(hasSummary)).append("\n");
    sb.append("    highestPostNumber: ").append(toIndentedString(highestPostNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    lastPostedAt: ").append(toIndentedString(lastPostedAt)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    messageBusLastId: ").append(toIndentedString(messageBusLastId)).append("\n");
    sb.append("    participantCount: ").append(toIndentedString(participantCount)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    pinnedAt: ").append(toIndentedString(pinnedAt)).append("\n");
    sb.append("    pinnedGlobally: ").append(toIndentedString(pinnedGlobally)).append("\n");
    sb.append("    pinnedUntil: ").append(toIndentedString(pinnedUntil)).append("\n");
    sb.append("    postStream: ").append(toIndentedString(postStream)).append("\n");
    sb.append("    postsCount: ").append(toIndentedString(postsCount)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    showReadIndicator: ").append(toIndentedString(showReadIndicator)).append("\n");
    sb.append("    slowModeEnabledUntil: ").append(toIndentedString(slowModeEnabledUntil)).append("\n");
    sb.append("    slowModeSeconds: ").append(toIndentedString(slowModeSeconds)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    suggestedTopics: ").append(toIndentedString(suggestedTopics)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tagsDescriptions: ").append(toIndentedString(tagsDescriptions)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    timelineLookup: ").append(toIndentedString(timelineLookup)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topicTimer: ").append(toIndentedString(topicTimer)).append("\n");
    sb.append("    unpinned: ").append(toIndentedString(unpinned)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    wordCount: ").append(toIndentedString(wordCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions_summary");
    openapiFields.add("archetype");
    openapiFields.add("archived");
    openapiFields.add("bookmarked");
    openapiFields.add("bookmarks");
    openapiFields.add("category_id");
    openapiFields.add("chunk_size");
    openapiFields.add("closed");
    openapiFields.add("created_at");
    openapiFields.add("current_post_number");
    openapiFields.add("deleted_at");
    openapiFields.add("deleted_by");
    openapiFields.add("details");
    openapiFields.add("draft");
    openapiFields.add("draft_key");
    openapiFields.add("draft_sequence");
    openapiFields.add("fancy_title");
    openapiFields.add("featured_link");
    openapiFields.add("has_deleted");
    openapiFields.add("has_summary");
    openapiFields.add("highest_post_number");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("last_posted_at");
    openapiFields.add("like_count");
    openapiFields.add("message_bus_last_id");
    openapiFields.add("participant_count");
    openapiFields.add("pinned");
    openapiFields.add("pinned_at");
    openapiFields.add("pinned_globally");
    openapiFields.add("pinned_until");
    openapiFields.add("post_stream");
    openapiFields.add("posts_count");
    openapiFields.add("reply_count");
    openapiFields.add("show_read_indicator");
    openapiFields.add("slow_mode_enabled_until");
    openapiFields.add("slow_mode_seconds");
    openapiFields.add("slug");
    openapiFields.add("suggested_topics");
    openapiFields.add("tags");
    openapiFields.add("tags_descriptions");
    openapiFields.add("thumbnails");
    openapiFields.add("timeline_lookup");
    openapiFields.add("title");
    openapiFields.add("topic_timer");
    openapiFields.add("unpinned");
    openapiFields.add("user_id");
    openapiFields.add("views");
    openapiFields.add("visible");
    openapiFields.add("word_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actions_summary");
    openapiRequiredFields.add("archetype");
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("bookmarked");
    openapiRequiredFields.add("bookmarks");
    openapiRequiredFields.add("category_id");
    openapiRequiredFields.add("chunk_size");
    openapiRequiredFields.add("closed");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("deleted_at");
    openapiRequiredFields.add("deleted_by");
    openapiRequiredFields.add("details");
    openapiRequiredFields.add("draft");
    openapiRequiredFields.add("draft_key");
    openapiRequiredFields.add("draft_sequence");
    openapiRequiredFields.add("fancy_title");
    openapiRequiredFields.add("featured_link");
    openapiRequiredFields.add("has_deleted");
    openapiRequiredFields.add("has_summary");
    openapiRequiredFields.add("highest_post_number");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("image_url");
    openapiRequiredFields.add("last_posted_at");
    openapiRequiredFields.add("like_count");
    openapiRequiredFields.add("message_bus_last_id");
    openapiRequiredFields.add("participant_count");
    openapiRequiredFields.add("pinned");
    openapiRequiredFields.add("pinned_at");
    openapiRequiredFields.add("pinned_globally");
    openapiRequiredFields.add("pinned_until");
    openapiRequiredFields.add("post_stream");
    openapiRequiredFields.add("posts_count");
    openapiRequiredFields.add("reply_count");
    openapiRequiredFields.add("show_read_indicator");
    openapiRequiredFields.add("slow_mode_enabled_until");
    openapiRequiredFields.add("slow_mode_seconds");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("suggested_topics");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("tags_descriptions");
    openapiRequiredFields.add("thumbnails");
    openapiRequiredFields.add("timeline_lookup");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("topic_timer");
    openapiRequiredFields.add("unpinned");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("views");
    openapiRequiredFields.add("visible");
    openapiRequiredFields.add("word_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTopic200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTopic200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTopic200Response is not found in the empty JSON string", GetTopic200Response.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTopic200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("actions_summary") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("actions_summary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions_summary` to be an array in the JSON string but got `%s`", jsonObj.get("actions_summary").toString()));
      }
      if (!jsonObj.get("archetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archetype").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("bookmarks") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bookmarks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookmarks` to be an array in the JSON string but got `%s`", jsonObj.get("bookmarks").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("deleted_at") != null && !jsonObj.get("deleted_at").isJsonNull()) && !jsonObj.get("deleted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_at").toString()));
      }
      if ((jsonObj.get("deleted_by") != null && !jsonObj.get("deleted_by").isJsonNull()) && !jsonObj.get("deleted_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_by").toString()));
      }
      if ((jsonObj.get("draft") != null && !jsonObj.get("draft").isJsonNull()) && !jsonObj.get("draft").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draft` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draft").toString()));
      }
      if (!jsonObj.get("draft_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draft_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draft_key").toString()));
      }
      if (!jsonObj.get("fancy_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fancy_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fancy_title").toString()));
      }
      if ((jsonObj.get("featured_link") != null && !jsonObj.get("featured_link").isJsonNull()) && !jsonObj.get("featured_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featured_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featured_link").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("last_posted_at") != null && !jsonObj.get("last_posted_at").isJsonNull()) && !jsonObj.get("last_posted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_posted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_posted_at").toString()));
      }
      if ((jsonObj.get("pinned_at") != null && !jsonObj.get("pinned_at").isJsonNull()) && !jsonObj.get("pinned_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinned_at").toString()));
      }
      if ((jsonObj.get("pinned_until") != null && !jsonObj.get("pinned_until").isJsonNull()) && !jsonObj.get("pinned_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinned_until").toString()));
      }
      if ((jsonObj.get("slow_mode_enabled_until") != null && !jsonObj.get("slow_mode_enabled_until").isJsonNull()) && !jsonObj.get("slow_mode_enabled_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slow_mode_enabled_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slow_mode_enabled_until").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("suggested_topics") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("suggested_topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggested_topics` to be an array in the JSON string but got `%s`", jsonObj.get("suggested_topics").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) && !jsonObj.get("thumbnails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("timeline_lookup") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("timeline_lookup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeline_lookup` to be an array in the JSON string but got `%s`", jsonObj.get("timeline_lookup").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("topic_timer") != null && !jsonObj.get("topic_timer").isJsonNull()) && !jsonObj.get("topic_timer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_timer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_timer").toString()));
      }
      if ((jsonObj.get("unpinned") != null && !jsonObj.get("unpinned").isJsonNull()) && !jsonObj.get("unpinned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unpinned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unpinned").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTopic200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTopic200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTopic200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTopic200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTopic200Response>() {
           @Override
           public void write(JsonWriter out, GetTopic200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTopic200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GetTopic200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTopic200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTopic200Response
   * @throws IOException if the JSON string is invalid with respect to GetTopic200Response
   */
  public static GetTopic200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTopic200Response.class);
  }

  /**
   * Convert an instance of GetTopic200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

