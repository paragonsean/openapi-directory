/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListCategoryTopics200ResponseTopicListTopicsInnerPostersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListCategoryTopics200ResponseTopicListTopicsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListCategoryTopics200ResponseTopicListTopicsInner {
  public static final String SERIALIZED_NAME_ARCHETYPE = "archetype";
  @SerializedName(SERIALIZED_NAME_ARCHETYPE)
  private String archetype;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_BOOKMARKED = "bookmarked";
  @SerializedName(SERIALIZED_NAME_BOOKMARKED)
  private String bookmarked;

  public static final String SERIALIZED_NAME_BUMPED = "bumped";
  @SerializedName(SERIALIZED_NAME_BUMPED)
  private Boolean bumped;

  public static final String SERIALIZED_NAME_BUMPED_AT = "bumped_at";
  @SerializedName(SERIALIZED_NAME_BUMPED_AT)
  private String bumpedAt;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EXCERPT = "excerpt";
  @SerializedName(SERIALIZED_NAME_EXCERPT)
  private String excerpt;

  public static final String SERIALIZED_NAME_FANCY_TITLE = "fancy_title";
  @SerializedName(SERIALIZED_NAME_FANCY_TITLE)
  private String fancyTitle;

  public static final String SERIALIZED_NAME_FEATURED_LINK = "featured_link";
  @SerializedName(SERIALIZED_NAME_FEATURED_LINK)
  private String featuredLink;

  public static final String SERIALIZED_NAME_HAS_SUMMARY = "has_summary";
  @SerializedName(SERIALIZED_NAME_HAS_SUMMARY)
  private Boolean hasSummary;

  public static final String SERIALIZED_NAME_HIGHEST_POST_NUMBER = "highest_post_number";
  @SerializedName(SERIALIZED_NAME_HIGHEST_POST_NUMBER)
  private Integer highestPostNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LAST_POSTED_AT = "last_posted_at";
  @SerializedName(SERIALIZED_NAME_LAST_POSTED_AT)
  private String lastPostedAt;

  public static final String SERIALIZED_NAME_LAST_POSTER_USERNAME = "last_poster_username";
  @SerializedName(SERIALIZED_NAME_LAST_POSTER_USERNAME)
  private String lastPosterUsername;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "like_count";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private Integer likeCount;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private String liked;

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  private Boolean pinned;

  public static final String SERIALIZED_NAME_PINNED_GLOBALLY = "pinned_globally";
  @SerializedName(SERIALIZED_NAME_PINNED_GLOBALLY)
  private Boolean pinnedGlobally;

  public static final String SERIALIZED_NAME_POSTERS = "posters";
  @SerializedName(SERIALIZED_NAME_POSTERS)
  private List<ListCategoryTopics200ResponseTopicListTopicsInnerPostersInner> posters = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTS_COUNT = "posts_count";
  @SerializedName(SERIALIZED_NAME_POSTS_COUNT)
  private Integer postsCount;

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UNPINNED = "unpinned";
  @SerializedName(SERIALIZED_NAME_UNPINNED)
  private String unpinned;

  public static final String SERIALIZED_NAME_UNSEEN = "unseen";
  @SerializedName(SERIALIZED_NAME_UNSEEN)
  private Boolean unseen;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private Integer views;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public ListCategoryTopics200ResponseTopicListTopicsInner() {
  }

  public ListCategoryTopics200ResponseTopicListTopicsInner archetype(String archetype) {
    this.archetype = archetype;
    return this;
  }

  /**
   * Get archetype
   * @return archetype
   */
  @javax.annotation.Nonnull
  public String getArchetype() {
    return archetype;
  }

  public void setArchetype(String archetype) {
    this.archetype = archetype;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nonnull
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner bookmarked(String bookmarked) {
    this.bookmarked = bookmarked;
    return this;
  }

  /**
   * Get bookmarked
   * @return bookmarked
   */
  @javax.annotation.Nullable
  public String getBookmarked() {
    return bookmarked;
  }

  public void setBookmarked(String bookmarked) {
    this.bookmarked = bookmarked;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner bumped(Boolean bumped) {
    this.bumped = bumped;
    return this;
  }

  /**
   * Get bumped
   * @return bumped
   */
  @javax.annotation.Nonnull
  public Boolean getBumped() {
    return bumped;
  }

  public void setBumped(Boolean bumped) {
    this.bumped = bumped;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner bumpedAt(String bumpedAt) {
    this.bumpedAt = bumpedAt;
    return this;
  }

  /**
   * Get bumpedAt
   * @return bumpedAt
   */
  @javax.annotation.Nonnull
  public String getBumpedAt() {
    return bumpedAt;
  }

  public void setBumpedAt(String bumpedAt) {
    this.bumpedAt = bumpedAt;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nonnull
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nonnull
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner excerpt(String excerpt) {
    this.excerpt = excerpt;
    return this;
  }

  /**
   * Get excerpt
   * @return excerpt
   */
  @javax.annotation.Nonnull
  public String getExcerpt() {
    return excerpt;
  }

  public void setExcerpt(String excerpt) {
    this.excerpt = excerpt;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner fancyTitle(String fancyTitle) {
    this.fancyTitle = fancyTitle;
    return this;
  }

  /**
   * Get fancyTitle
   * @return fancyTitle
   */
  @javax.annotation.Nonnull
  public String getFancyTitle() {
    return fancyTitle;
  }

  public void setFancyTitle(String fancyTitle) {
    this.fancyTitle = fancyTitle;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner featuredLink(String featuredLink) {
    this.featuredLink = featuredLink;
    return this;
  }

  /**
   * Get featuredLink
   * @return featuredLink
   */
  @javax.annotation.Nullable
  public String getFeaturedLink() {
    return featuredLink;
  }

  public void setFeaturedLink(String featuredLink) {
    this.featuredLink = featuredLink;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner hasSummary(Boolean hasSummary) {
    this.hasSummary = hasSummary;
    return this;
  }

  /**
   * Get hasSummary
   * @return hasSummary
   */
  @javax.annotation.Nonnull
  public Boolean getHasSummary() {
    return hasSummary;
  }

  public void setHasSummary(Boolean hasSummary) {
    this.hasSummary = hasSummary;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner highestPostNumber(Integer highestPostNumber) {
    this.highestPostNumber = highestPostNumber;
    return this;
  }

  /**
   * Get highestPostNumber
   * @return highestPostNumber
   */
  @javax.annotation.Nonnull
  public Integer getHighestPostNumber() {
    return highestPostNumber;
  }

  public void setHighestPostNumber(Integer highestPostNumber) {
    this.highestPostNumber = highestPostNumber;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner lastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
    return this;
  }

  /**
   * Get lastPostedAt
   * @return lastPostedAt
   */
  @javax.annotation.Nonnull
  public String getLastPostedAt() {
    return lastPostedAt;
  }

  public void setLastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner lastPosterUsername(String lastPosterUsername) {
    this.lastPosterUsername = lastPosterUsername;
    return this;
  }

  /**
   * Get lastPosterUsername
   * @return lastPosterUsername
   */
  @javax.annotation.Nonnull
  public String getLastPosterUsername() {
    return lastPosterUsername;
  }

  public void setLastPosterUsername(String lastPosterUsername) {
    this.lastPosterUsername = lastPosterUsername;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner likeCount(Integer likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * Get likeCount
   * @return likeCount
   */
  @javax.annotation.Nonnull
  public Integer getLikeCount() {
    return likeCount;
  }

  public void setLikeCount(Integer likeCount) {
    this.likeCount = likeCount;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner liked(String liked) {
    this.liked = liked;
    return this;
  }

  /**
   * Get liked
   * @return liked
   */
  @javax.annotation.Nullable
  public String getLiked() {
    return liked;
  }

  public void setLiked(String liked) {
    this.liked = liked;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Get pinned
   * @return pinned
   */
  @javax.annotation.Nonnull
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner pinnedGlobally(Boolean pinnedGlobally) {
    this.pinnedGlobally = pinnedGlobally;
    return this;
  }

  /**
   * Get pinnedGlobally
   * @return pinnedGlobally
   */
  @javax.annotation.Nonnull
  public Boolean getPinnedGlobally() {
    return pinnedGlobally;
  }

  public void setPinnedGlobally(Boolean pinnedGlobally) {
    this.pinnedGlobally = pinnedGlobally;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner posters(List<ListCategoryTopics200ResponseTopicListTopicsInnerPostersInner> posters) {
    this.posters = posters;
    return this;
  }

  public ListCategoryTopics200ResponseTopicListTopicsInner addPostersItem(ListCategoryTopics200ResponseTopicListTopicsInnerPostersInner postersItem) {
    if (this.posters == null) {
      this.posters = new ArrayList<>();
    }
    this.posters.add(postersItem);
    return this;
  }

  /**
   * Get posters
   * @return posters
   */
  @javax.annotation.Nonnull
  public List<ListCategoryTopics200ResponseTopicListTopicsInnerPostersInner> getPosters() {
    return posters;
  }

  public void setPosters(List<ListCategoryTopics200ResponseTopicListTopicsInnerPostersInner> posters) {
    this.posters = posters;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner postsCount(Integer postsCount) {
    this.postsCount = postsCount;
    return this;
  }

  /**
   * Get postsCount
   * @return postsCount
   */
  @javax.annotation.Nonnull
  public Integer getPostsCount() {
    return postsCount;
  }

  public void setPostsCount(Integer postsCount) {
    this.postsCount = postsCount;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Get replyCount
   * @return replyCount
   */
  @javax.annotation.Nonnull
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner unpinned(String unpinned) {
    this.unpinned = unpinned;
    return this;
  }

  /**
   * Get unpinned
   * @return unpinned
   */
  @javax.annotation.Nullable
  public String getUnpinned() {
    return unpinned;
  }

  public void setUnpinned(String unpinned) {
    this.unpinned = unpinned;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner unseen(Boolean unseen) {
    this.unseen = unseen;
    return this;
  }

  /**
   * Get unseen
   * @return unseen
   */
  @javax.annotation.Nonnull
  public Boolean getUnseen() {
    return unseen;
  }

  public void setUnseen(Boolean unseen) {
    this.unseen = unseen;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner views(Integer views) {
    this.views = views;
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nonnull
  public Integer getViews() {
    return views;
  }

  public void setViews(Integer views) {
    this.views = views;
  }


  public ListCategoryTopics200ResponseTopicListTopicsInner visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nonnull
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListCategoryTopics200ResponseTopicListTopicsInner instance itself
   */
  public ListCategoryTopics200ResponseTopicListTopicsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListCategoryTopics200ResponseTopicListTopicsInner listCategoryTopics200ResponseTopicListTopicsInner = (ListCategoryTopics200ResponseTopicListTopicsInner) o;
    return Objects.equals(this.archetype, listCategoryTopics200ResponseTopicListTopicsInner.archetype) &&
        Objects.equals(this.archived, listCategoryTopics200ResponseTopicListTopicsInner.archived) &&
        Objects.equals(this.bookmarked, listCategoryTopics200ResponseTopicListTopicsInner.bookmarked) &&
        Objects.equals(this.bumped, listCategoryTopics200ResponseTopicListTopicsInner.bumped) &&
        Objects.equals(this.bumpedAt, listCategoryTopics200ResponseTopicListTopicsInner.bumpedAt) &&
        Objects.equals(this.categoryId, listCategoryTopics200ResponseTopicListTopicsInner.categoryId) &&
        Objects.equals(this.closed, listCategoryTopics200ResponseTopicListTopicsInner.closed) &&
        Objects.equals(this.createdAt, listCategoryTopics200ResponseTopicListTopicsInner.createdAt) &&
        Objects.equals(this.excerpt, listCategoryTopics200ResponseTopicListTopicsInner.excerpt) &&
        Objects.equals(this.fancyTitle, listCategoryTopics200ResponseTopicListTopicsInner.fancyTitle) &&
        Objects.equals(this.featuredLink, listCategoryTopics200ResponseTopicListTopicsInner.featuredLink) &&
        Objects.equals(this.hasSummary, listCategoryTopics200ResponseTopicListTopicsInner.hasSummary) &&
        Objects.equals(this.highestPostNumber, listCategoryTopics200ResponseTopicListTopicsInner.highestPostNumber) &&
        Objects.equals(this.id, listCategoryTopics200ResponseTopicListTopicsInner.id) &&
        Objects.equals(this.imageUrl, listCategoryTopics200ResponseTopicListTopicsInner.imageUrl) &&
        Objects.equals(this.lastPostedAt, listCategoryTopics200ResponseTopicListTopicsInner.lastPostedAt) &&
        Objects.equals(this.lastPosterUsername, listCategoryTopics200ResponseTopicListTopicsInner.lastPosterUsername) &&
        Objects.equals(this.likeCount, listCategoryTopics200ResponseTopicListTopicsInner.likeCount) &&
        Objects.equals(this.liked, listCategoryTopics200ResponseTopicListTopicsInner.liked) &&
        Objects.equals(this.pinned, listCategoryTopics200ResponseTopicListTopicsInner.pinned) &&
        Objects.equals(this.pinnedGlobally, listCategoryTopics200ResponseTopicListTopicsInner.pinnedGlobally) &&
        Objects.equals(this.posters, listCategoryTopics200ResponseTopicListTopicsInner.posters) &&
        Objects.equals(this.postsCount, listCategoryTopics200ResponseTopicListTopicsInner.postsCount) &&
        Objects.equals(this.replyCount, listCategoryTopics200ResponseTopicListTopicsInner.replyCount) &&
        Objects.equals(this.slug, listCategoryTopics200ResponseTopicListTopicsInner.slug) &&
        Objects.equals(this.title, listCategoryTopics200ResponseTopicListTopicsInner.title) &&
        Objects.equals(this.unpinned, listCategoryTopics200ResponseTopicListTopicsInner.unpinned) &&
        Objects.equals(this.unseen, listCategoryTopics200ResponseTopicListTopicsInner.unseen) &&
        Objects.equals(this.views, listCategoryTopics200ResponseTopicListTopicsInner.views) &&
        Objects.equals(this.visible, listCategoryTopics200ResponseTopicListTopicsInner.visible)&&
        Objects.equals(this.additionalProperties, listCategoryTopics200ResponseTopicListTopicsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archetype, archived, bookmarked, bumped, bumpedAt, categoryId, closed, createdAt, excerpt, fancyTitle, featuredLink, hasSummary, highestPostNumber, id, imageUrl, lastPostedAt, lastPosterUsername, likeCount, liked, pinned, pinnedGlobally, posters, postsCount, replyCount, slug, title, unpinned, unseen, views, visible, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListCategoryTopics200ResponseTopicListTopicsInner {\n");
    sb.append("    archetype: ").append(toIndentedString(archetype)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    bookmarked: ").append(toIndentedString(bookmarked)).append("\n");
    sb.append("    bumped: ").append(toIndentedString(bumped)).append("\n");
    sb.append("    bumpedAt: ").append(toIndentedString(bumpedAt)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    excerpt: ").append(toIndentedString(excerpt)).append("\n");
    sb.append("    fancyTitle: ").append(toIndentedString(fancyTitle)).append("\n");
    sb.append("    featuredLink: ").append(toIndentedString(featuredLink)).append("\n");
    sb.append("    hasSummary: ").append(toIndentedString(hasSummary)).append("\n");
    sb.append("    highestPostNumber: ").append(toIndentedString(highestPostNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    lastPostedAt: ").append(toIndentedString(lastPostedAt)).append("\n");
    sb.append("    lastPosterUsername: ").append(toIndentedString(lastPosterUsername)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    pinnedGlobally: ").append(toIndentedString(pinnedGlobally)).append("\n");
    sb.append("    posters: ").append(toIndentedString(posters)).append("\n");
    sb.append("    postsCount: ").append(toIndentedString(postsCount)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unpinned: ").append(toIndentedString(unpinned)).append("\n");
    sb.append("    unseen: ").append(toIndentedString(unseen)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archetype");
    openapiFields.add("archived");
    openapiFields.add("bookmarked");
    openapiFields.add("bumped");
    openapiFields.add("bumped_at");
    openapiFields.add("category_id");
    openapiFields.add("closed");
    openapiFields.add("created_at");
    openapiFields.add("excerpt");
    openapiFields.add("fancy_title");
    openapiFields.add("featured_link");
    openapiFields.add("has_summary");
    openapiFields.add("highest_post_number");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("last_posted_at");
    openapiFields.add("last_poster_username");
    openapiFields.add("like_count");
    openapiFields.add("liked");
    openapiFields.add("pinned");
    openapiFields.add("pinned_globally");
    openapiFields.add("posters");
    openapiFields.add("posts_count");
    openapiFields.add("reply_count");
    openapiFields.add("slug");
    openapiFields.add("title");
    openapiFields.add("unpinned");
    openapiFields.add("unseen");
    openapiFields.add("views");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archetype");
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("bookmarked");
    openapiRequiredFields.add("bumped");
    openapiRequiredFields.add("bumped_at");
    openapiRequiredFields.add("category_id");
    openapiRequiredFields.add("closed");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("excerpt");
    openapiRequiredFields.add("fancy_title");
    openapiRequiredFields.add("featured_link");
    openapiRequiredFields.add("has_summary");
    openapiRequiredFields.add("highest_post_number");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("image_url");
    openapiRequiredFields.add("last_posted_at");
    openapiRequiredFields.add("last_poster_username");
    openapiRequiredFields.add("like_count");
    openapiRequiredFields.add("liked");
    openapiRequiredFields.add("pinned");
    openapiRequiredFields.add("pinned_globally");
    openapiRequiredFields.add("posters");
    openapiRequiredFields.add("posts_count");
    openapiRequiredFields.add("reply_count");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("unpinned");
    openapiRequiredFields.add("unseen");
    openapiRequiredFields.add("views");
    openapiRequiredFields.add("visible");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListCategoryTopics200ResponseTopicListTopicsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListCategoryTopics200ResponseTopicListTopicsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListCategoryTopics200ResponseTopicListTopicsInner is not found in the empty JSON string", ListCategoryTopics200ResponseTopicListTopicsInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListCategoryTopics200ResponseTopicListTopicsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("archetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archetype").toString()));
      }
      if ((jsonObj.get("bookmarked") != null && !jsonObj.get("bookmarked").isJsonNull()) && !jsonObj.get("bookmarked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookmarked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookmarked").toString()));
      }
      if (!jsonObj.get("bumped_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bumped_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bumped_at").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("excerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excerpt").toString()));
      }
      if (!jsonObj.get("fancy_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fancy_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fancy_title").toString()));
      }
      if ((jsonObj.get("featured_link") != null && !jsonObj.get("featured_link").isJsonNull()) && !jsonObj.get("featured_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featured_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featured_link").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("last_posted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_posted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_posted_at").toString()));
      }
      if (!jsonObj.get("last_poster_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_poster_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_poster_username").toString()));
      }
      if ((jsonObj.get("liked") != null && !jsonObj.get("liked").isJsonNull()) && !jsonObj.get("liked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liked").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("posters") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("posters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `posters` to be an array in the JSON string but got `%s`", jsonObj.get("posters").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("unpinned") != null && !jsonObj.get("unpinned").isJsonNull()) && !jsonObj.get("unpinned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unpinned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unpinned").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListCategoryTopics200ResponseTopicListTopicsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListCategoryTopics200ResponseTopicListTopicsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListCategoryTopics200ResponseTopicListTopicsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListCategoryTopics200ResponseTopicListTopicsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListCategoryTopics200ResponseTopicListTopicsInner>() {
           @Override
           public void write(JsonWriter out, ListCategoryTopics200ResponseTopicListTopicsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListCategoryTopics200ResponseTopicListTopicsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ListCategoryTopics200ResponseTopicListTopicsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListCategoryTopics200ResponseTopicListTopicsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListCategoryTopics200ResponseTopicListTopicsInner
   * @throws IOException if the JSON string is invalid with respect to ListCategoryTopics200ResponseTopicListTopicsInner
   */
  public static ListCategoryTopics200ResponseTopicListTopicsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListCategoryTopics200ResponseTopicListTopicsInner.class);
  }

  /**
   * Convert an instance of ListCategoryTopics200ResponseTopicListTopicsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

