/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSite200ResponseNotificationTypes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSite200ResponseNotificationTypes {
  public static final String SERIALIZED_NAME_ASSIGNED = "assigned";
  @SerializedName(SERIALIZED_NAME_ASSIGNED)
  private Integer assigned;

  public static final String SERIALIZED_NAME_BOOKMARK_REMINDER = "bookmark_reminder";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_REMINDER)
  private Integer bookmarkReminder;

  public static final String SERIALIZED_NAME_CHAT_GROUP_MENTION = "chat_group_mention";
  @SerializedName(SERIALIZED_NAME_CHAT_GROUP_MENTION)
  private Integer chatGroupMention;

  public static final String SERIALIZED_NAME_CHAT_INVITATION = "chat_invitation";
  @SerializedName(SERIALIZED_NAME_CHAT_INVITATION)
  private Integer chatInvitation;

  public static final String SERIALIZED_NAME_CHAT_MENTION = "chat_mention";
  @SerializedName(SERIALIZED_NAME_CHAT_MENTION)
  private Integer chatMention;

  public static final String SERIALIZED_NAME_CHAT_MESSAGE = "chat_message";
  @SerializedName(SERIALIZED_NAME_CHAT_MESSAGE)
  private Integer chatMessage;

  public static final String SERIALIZED_NAME_CHAT_QUOTED = "chat_quoted";
  @SerializedName(SERIALIZED_NAME_CHAT_QUOTED)
  private Integer chatQuoted;

  public static final String SERIALIZED_NAME_CIRCLES_ACTIVITY = "circles_activity";
  @SerializedName(SERIALIZED_NAME_CIRCLES_ACTIVITY)
  private Integer circlesActivity;

  public static final String SERIALIZED_NAME_CODE_REVIEW_COMMIT_APPROVED = "code_review_commit_approved";
  @SerializedName(SERIALIZED_NAME_CODE_REVIEW_COMMIT_APPROVED)
  private Integer codeReviewCommitApproved;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private Integer custom;

  public static final String SERIALIZED_NAME_EDITED = "edited";
  @SerializedName(SERIALIZED_NAME_EDITED)
  private Integer edited;

  public static final String SERIALIZED_NAME_EVENT_INVITATION = "event_invitation";
  @SerializedName(SERIALIZED_NAME_EVENT_INVITATION)
  private Integer eventInvitation;

  public static final String SERIALIZED_NAME_EVENT_REMINDER = "event_reminder";
  @SerializedName(SERIALIZED_NAME_EVENT_REMINDER)
  private Integer eventReminder;

  public static final String SERIALIZED_NAME_FOLLOWING = "following";
  @SerializedName(SERIALIZED_NAME_FOLLOWING)
  private Integer following;

  public static final String SERIALIZED_NAME_FOLLOWING_CREATED_TOPIC = "following_created_topic";
  @SerializedName(SERIALIZED_NAME_FOLLOWING_CREATED_TOPIC)
  private Integer followingCreatedTopic;

  public static final String SERIALIZED_NAME_FOLLOWING_REPLIED = "following_replied";
  @SerializedName(SERIALIZED_NAME_FOLLOWING_REPLIED)
  private Integer followingReplied;

  public static final String SERIALIZED_NAME_GRANTED_BADGE = "granted_badge";
  @SerializedName(SERIALIZED_NAME_GRANTED_BADGE)
  private Integer grantedBadge;

  public static final String SERIALIZED_NAME_GROUP_MENTIONED = "group_mentioned";
  @SerializedName(SERIALIZED_NAME_GROUP_MENTIONED)
  private Integer groupMentioned;

  public static final String SERIALIZED_NAME_GROUP_MESSAGE_SUMMARY = "group_message_summary";
  @SerializedName(SERIALIZED_NAME_GROUP_MESSAGE_SUMMARY)
  private Integer groupMessageSummary;

  public static final String SERIALIZED_NAME_INVITED_TO_PRIVATE_MESSAGE = "invited_to_private_message";
  @SerializedName(SERIALIZED_NAME_INVITED_TO_PRIVATE_MESSAGE)
  private Integer invitedToPrivateMessage;

  public static final String SERIALIZED_NAME_INVITED_TO_TOPIC = "invited_to_topic";
  @SerializedName(SERIALIZED_NAME_INVITED_TO_TOPIC)
  private Integer invitedToTopic;

  public static final String SERIALIZED_NAME_INVITEE_ACCEPTED = "invitee_accepted";
  @SerializedName(SERIALIZED_NAME_INVITEE_ACCEPTED)
  private Integer inviteeAccepted;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Integer liked;

  public static final String SERIALIZED_NAME_LIKED_CONSOLIDATED = "liked_consolidated";
  @SerializedName(SERIALIZED_NAME_LIKED_CONSOLIDATED)
  private Integer likedConsolidated;

  public static final String SERIALIZED_NAME_LINKED = "linked";
  @SerializedName(SERIALIZED_NAME_LINKED)
  private Integer linked;

  public static final String SERIALIZED_NAME_MEMBERSHIP_REQUEST_ACCEPTED = "membership_request_accepted";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_REQUEST_ACCEPTED)
  private Integer membershipRequestAccepted;

  public static final String SERIALIZED_NAME_MEMBERSHIP_REQUEST_CONSOLIDATED = "membership_request_consolidated";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_REQUEST_CONSOLIDATED)
  private Integer membershipRequestConsolidated;

  public static final String SERIALIZED_NAME_MENTIONED = "mentioned";
  @SerializedName(SERIALIZED_NAME_MENTIONED)
  private Integer mentioned;

  public static final String SERIALIZED_NAME_MOVED_POST = "moved_post";
  @SerializedName(SERIALIZED_NAME_MOVED_POST)
  private Integer movedPost;

  public static final String SERIALIZED_NAME_NEW_FEATURES = "new_features";
  @SerializedName(SERIALIZED_NAME_NEW_FEATURES)
  private Integer newFeatures;

  public static final String SERIALIZED_NAME_POST_APPROVED = "post_approved";
  @SerializedName(SERIALIZED_NAME_POST_APPROVED)
  private Integer postApproved;

  public static final String SERIALIZED_NAME_POSTED = "posted";
  @SerializedName(SERIALIZED_NAME_POSTED)
  private Integer posted;

  public static final String SERIALIZED_NAME_PRIVATE_MESSAGE = "private_message";
  @SerializedName(SERIALIZED_NAME_PRIVATE_MESSAGE)
  private Integer privateMessage;

  public static final String SERIALIZED_NAME_QUESTION_ANSWER_USER_COMMENTED = "question_answer_user_commented";
  @SerializedName(SERIALIZED_NAME_QUESTION_ANSWER_USER_COMMENTED)
  private Integer questionAnswerUserCommented;

  public static final String SERIALIZED_NAME_QUOTED = "quoted";
  @SerializedName(SERIALIZED_NAME_QUOTED)
  private Integer quoted;

  public static final String SERIALIZED_NAME_REACTION = "reaction";
  @SerializedName(SERIALIZED_NAME_REACTION)
  private Integer reaction;

  public static final String SERIALIZED_NAME_REPLIED = "replied";
  @SerializedName(SERIALIZED_NAME_REPLIED)
  private Integer replied;

  public static final String SERIALIZED_NAME_TOPIC_REMINDER = "topic_reminder";
  @SerializedName(SERIALIZED_NAME_TOPIC_REMINDER)
  private Integer topicReminder;

  public static final String SERIALIZED_NAME_VOTES_RELEASED = "votes_released";
  @SerializedName(SERIALIZED_NAME_VOTES_RELEASED)
  private Integer votesReleased;

  public static final String SERIALIZED_NAME_WATCHING_CATEGORY_OR_TAG = "watching_category_or_tag";
  @SerializedName(SERIALIZED_NAME_WATCHING_CATEGORY_OR_TAG)
  private Integer watchingCategoryOrTag;

  public static final String SERIALIZED_NAME_WATCHING_FIRST_POST = "watching_first_post";
  @SerializedName(SERIALIZED_NAME_WATCHING_FIRST_POST)
  private Integer watchingFirstPost;

  public GetSite200ResponseNotificationTypes() {
  }

  public GetSite200ResponseNotificationTypes assigned(Integer assigned) {
    this.assigned = assigned;
    return this;
  }

  /**
   * Get assigned
   * @return assigned
   */
  @javax.annotation.Nullable
  public Integer getAssigned() {
    return assigned;
  }

  public void setAssigned(Integer assigned) {
    this.assigned = assigned;
  }


  public GetSite200ResponseNotificationTypes bookmarkReminder(Integer bookmarkReminder) {
    this.bookmarkReminder = bookmarkReminder;
    return this;
  }

  /**
   * Get bookmarkReminder
   * @return bookmarkReminder
   */
  @javax.annotation.Nonnull
  public Integer getBookmarkReminder() {
    return bookmarkReminder;
  }

  public void setBookmarkReminder(Integer bookmarkReminder) {
    this.bookmarkReminder = bookmarkReminder;
  }


  public GetSite200ResponseNotificationTypes chatGroupMention(Integer chatGroupMention) {
    this.chatGroupMention = chatGroupMention;
    return this;
  }

  /**
   * Get chatGroupMention
   * @return chatGroupMention
   */
  @javax.annotation.Nonnull
  public Integer getChatGroupMention() {
    return chatGroupMention;
  }

  public void setChatGroupMention(Integer chatGroupMention) {
    this.chatGroupMention = chatGroupMention;
  }


  public GetSite200ResponseNotificationTypes chatInvitation(Integer chatInvitation) {
    this.chatInvitation = chatInvitation;
    return this;
  }

  /**
   * Get chatInvitation
   * @return chatInvitation
   */
  @javax.annotation.Nonnull
  public Integer getChatInvitation() {
    return chatInvitation;
  }

  public void setChatInvitation(Integer chatInvitation) {
    this.chatInvitation = chatInvitation;
  }


  public GetSite200ResponseNotificationTypes chatMention(Integer chatMention) {
    this.chatMention = chatMention;
    return this;
  }

  /**
   * Get chatMention
   * @return chatMention
   */
  @javax.annotation.Nonnull
  public Integer getChatMention() {
    return chatMention;
  }

  public void setChatMention(Integer chatMention) {
    this.chatMention = chatMention;
  }


  public GetSite200ResponseNotificationTypes chatMessage(Integer chatMessage) {
    this.chatMessage = chatMessage;
    return this;
  }

  /**
   * Get chatMessage
   * @return chatMessage
   */
  @javax.annotation.Nonnull
  public Integer getChatMessage() {
    return chatMessage;
  }

  public void setChatMessage(Integer chatMessage) {
    this.chatMessage = chatMessage;
  }


  public GetSite200ResponseNotificationTypes chatQuoted(Integer chatQuoted) {
    this.chatQuoted = chatQuoted;
    return this;
  }

  /**
   * Get chatQuoted
   * @return chatQuoted
   */
  @javax.annotation.Nullable
  public Integer getChatQuoted() {
    return chatQuoted;
  }

  public void setChatQuoted(Integer chatQuoted) {
    this.chatQuoted = chatQuoted;
  }


  public GetSite200ResponseNotificationTypes circlesActivity(Integer circlesActivity) {
    this.circlesActivity = circlesActivity;
    return this;
  }

  /**
   * Get circlesActivity
   * @return circlesActivity
   */
  @javax.annotation.Nullable
  public Integer getCirclesActivity() {
    return circlesActivity;
  }

  public void setCirclesActivity(Integer circlesActivity) {
    this.circlesActivity = circlesActivity;
  }


  public GetSite200ResponseNotificationTypes codeReviewCommitApproved(Integer codeReviewCommitApproved) {
    this.codeReviewCommitApproved = codeReviewCommitApproved;
    return this;
  }

  /**
   * Get codeReviewCommitApproved
   * @return codeReviewCommitApproved
   */
  @javax.annotation.Nonnull
  public Integer getCodeReviewCommitApproved() {
    return codeReviewCommitApproved;
  }

  public void setCodeReviewCommitApproved(Integer codeReviewCommitApproved) {
    this.codeReviewCommitApproved = codeReviewCommitApproved;
  }


  public GetSite200ResponseNotificationTypes custom(Integer custom) {
    this.custom = custom;
    return this;
  }

  /**
   * Get custom
   * @return custom
   */
  @javax.annotation.Nonnull
  public Integer getCustom() {
    return custom;
  }

  public void setCustom(Integer custom) {
    this.custom = custom;
  }


  public GetSite200ResponseNotificationTypes edited(Integer edited) {
    this.edited = edited;
    return this;
  }

  /**
   * Get edited
   * @return edited
   */
  @javax.annotation.Nonnull
  public Integer getEdited() {
    return edited;
  }

  public void setEdited(Integer edited) {
    this.edited = edited;
  }


  public GetSite200ResponseNotificationTypes eventInvitation(Integer eventInvitation) {
    this.eventInvitation = eventInvitation;
    return this;
  }

  /**
   * Get eventInvitation
   * @return eventInvitation
   */
  @javax.annotation.Nonnull
  public Integer getEventInvitation() {
    return eventInvitation;
  }

  public void setEventInvitation(Integer eventInvitation) {
    this.eventInvitation = eventInvitation;
  }


  public GetSite200ResponseNotificationTypes eventReminder(Integer eventReminder) {
    this.eventReminder = eventReminder;
    return this;
  }

  /**
   * Get eventReminder
   * @return eventReminder
   */
  @javax.annotation.Nonnull
  public Integer getEventReminder() {
    return eventReminder;
  }

  public void setEventReminder(Integer eventReminder) {
    this.eventReminder = eventReminder;
  }


  public GetSite200ResponseNotificationTypes following(Integer following) {
    this.following = following;
    return this;
  }

  /**
   * Get following
   * @return following
   */
  @javax.annotation.Nullable
  public Integer getFollowing() {
    return following;
  }

  public void setFollowing(Integer following) {
    this.following = following;
  }


  public GetSite200ResponseNotificationTypes followingCreatedTopic(Integer followingCreatedTopic) {
    this.followingCreatedTopic = followingCreatedTopic;
    return this;
  }

  /**
   * Get followingCreatedTopic
   * @return followingCreatedTopic
   */
  @javax.annotation.Nullable
  public Integer getFollowingCreatedTopic() {
    return followingCreatedTopic;
  }

  public void setFollowingCreatedTopic(Integer followingCreatedTopic) {
    this.followingCreatedTopic = followingCreatedTopic;
  }


  public GetSite200ResponseNotificationTypes followingReplied(Integer followingReplied) {
    this.followingReplied = followingReplied;
    return this;
  }

  /**
   * Get followingReplied
   * @return followingReplied
   */
  @javax.annotation.Nullable
  public Integer getFollowingReplied() {
    return followingReplied;
  }

  public void setFollowingReplied(Integer followingReplied) {
    this.followingReplied = followingReplied;
  }


  public GetSite200ResponseNotificationTypes grantedBadge(Integer grantedBadge) {
    this.grantedBadge = grantedBadge;
    return this;
  }

  /**
   * Get grantedBadge
   * @return grantedBadge
   */
  @javax.annotation.Nonnull
  public Integer getGrantedBadge() {
    return grantedBadge;
  }

  public void setGrantedBadge(Integer grantedBadge) {
    this.grantedBadge = grantedBadge;
  }


  public GetSite200ResponseNotificationTypes groupMentioned(Integer groupMentioned) {
    this.groupMentioned = groupMentioned;
    return this;
  }

  /**
   * Get groupMentioned
   * @return groupMentioned
   */
  @javax.annotation.Nonnull
  public Integer getGroupMentioned() {
    return groupMentioned;
  }

  public void setGroupMentioned(Integer groupMentioned) {
    this.groupMentioned = groupMentioned;
  }


  public GetSite200ResponseNotificationTypes groupMessageSummary(Integer groupMessageSummary) {
    this.groupMessageSummary = groupMessageSummary;
    return this;
  }

  /**
   * Get groupMessageSummary
   * @return groupMessageSummary
   */
  @javax.annotation.Nonnull
  public Integer getGroupMessageSummary() {
    return groupMessageSummary;
  }

  public void setGroupMessageSummary(Integer groupMessageSummary) {
    this.groupMessageSummary = groupMessageSummary;
  }


  public GetSite200ResponseNotificationTypes invitedToPrivateMessage(Integer invitedToPrivateMessage) {
    this.invitedToPrivateMessage = invitedToPrivateMessage;
    return this;
  }

  /**
   * Get invitedToPrivateMessage
   * @return invitedToPrivateMessage
   */
  @javax.annotation.Nonnull
  public Integer getInvitedToPrivateMessage() {
    return invitedToPrivateMessage;
  }

  public void setInvitedToPrivateMessage(Integer invitedToPrivateMessage) {
    this.invitedToPrivateMessage = invitedToPrivateMessage;
  }


  public GetSite200ResponseNotificationTypes invitedToTopic(Integer invitedToTopic) {
    this.invitedToTopic = invitedToTopic;
    return this;
  }

  /**
   * Get invitedToTopic
   * @return invitedToTopic
   */
  @javax.annotation.Nonnull
  public Integer getInvitedToTopic() {
    return invitedToTopic;
  }

  public void setInvitedToTopic(Integer invitedToTopic) {
    this.invitedToTopic = invitedToTopic;
  }


  public GetSite200ResponseNotificationTypes inviteeAccepted(Integer inviteeAccepted) {
    this.inviteeAccepted = inviteeAccepted;
    return this;
  }

  /**
   * Get inviteeAccepted
   * @return inviteeAccepted
   */
  @javax.annotation.Nonnull
  public Integer getInviteeAccepted() {
    return inviteeAccepted;
  }

  public void setInviteeAccepted(Integer inviteeAccepted) {
    this.inviteeAccepted = inviteeAccepted;
  }


  public GetSite200ResponseNotificationTypes liked(Integer liked) {
    this.liked = liked;
    return this;
  }

  /**
   * Get liked
   * @return liked
   */
  @javax.annotation.Nonnull
  public Integer getLiked() {
    return liked;
  }

  public void setLiked(Integer liked) {
    this.liked = liked;
  }


  public GetSite200ResponseNotificationTypes likedConsolidated(Integer likedConsolidated) {
    this.likedConsolidated = likedConsolidated;
    return this;
  }

  /**
   * Get likedConsolidated
   * @return likedConsolidated
   */
  @javax.annotation.Nonnull
  public Integer getLikedConsolidated() {
    return likedConsolidated;
  }

  public void setLikedConsolidated(Integer likedConsolidated) {
    this.likedConsolidated = likedConsolidated;
  }


  public GetSite200ResponseNotificationTypes linked(Integer linked) {
    this.linked = linked;
    return this;
  }

  /**
   * Get linked
   * @return linked
   */
  @javax.annotation.Nonnull
  public Integer getLinked() {
    return linked;
  }

  public void setLinked(Integer linked) {
    this.linked = linked;
  }


  public GetSite200ResponseNotificationTypes membershipRequestAccepted(Integer membershipRequestAccepted) {
    this.membershipRequestAccepted = membershipRequestAccepted;
    return this;
  }

  /**
   * Get membershipRequestAccepted
   * @return membershipRequestAccepted
   */
  @javax.annotation.Nonnull
  public Integer getMembershipRequestAccepted() {
    return membershipRequestAccepted;
  }

  public void setMembershipRequestAccepted(Integer membershipRequestAccepted) {
    this.membershipRequestAccepted = membershipRequestAccepted;
  }


  public GetSite200ResponseNotificationTypes membershipRequestConsolidated(Integer membershipRequestConsolidated) {
    this.membershipRequestConsolidated = membershipRequestConsolidated;
    return this;
  }

  /**
   * Get membershipRequestConsolidated
   * @return membershipRequestConsolidated
   */
  @javax.annotation.Nonnull
  public Integer getMembershipRequestConsolidated() {
    return membershipRequestConsolidated;
  }

  public void setMembershipRequestConsolidated(Integer membershipRequestConsolidated) {
    this.membershipRequestConsolidated = membershipRequestConsolidated;
  }


  public GetSite200ResponseNotificationTypes mentioned(Integer mentioned) {
    this.mentioned = mentioned;
    return this;
  }

  /**
   * Get mentioned
   * @return mentioned
   */
  @javax.annotation.Nonnull
  public Integer getMentioned() {
    return mentioned;
  }

  public void setMentioned(Integer mentioned) {
    this.mentioned = mentioned;
  }


  public GetSite200ResponseNotificationTypes movedPost(Integer movedPost) {
    this.movedPost = movedPost;
    return this;
  }

  /**
   * Get movedPost
   * @return movedPost
   */
  @javax.annotation.Nonnull
  public Integer getMovedPost() {
    return movedPost;
  }

  public void setMovedPost(Integer movedPost) {
    this.movedPost = movedPost;
  }


  public GetSite200ResponseNotificationTypes newFeatures(Integer newFeatures) {
    this.newFeatures = newFeatures;
    return this;
  }

  /**
   * Get newFeatures
   * @return newFeatures
   */
  @javax.annotation.Nullable
  public Integer getNewFeatures() {
    return newFeatures;
  }

  public void setNewFeatures(Integer newFeatures) {
    this.newFeatures = newFeatures;
  }


  public GetSite200ResponseNotificationTypes postApproved(Integer postApproved) {
    this.postApproved = postApproved;
    return this;
  }

  /**
   * Get postApproved
   * @return postApproved
   */
  @javax.annotation.Nonnull
  public Integer getPostApproved() {
    return postApproved;
  }

  public void setPostApproved(Integer postApproved) {
    this.postApproved = postApproved;
  }


  public GetSite200ResponseNotificationTypes posted(Integer posted) {
    this.posted = posted;
    return this;
  }

  /**
   * Get posted
   * @return posted
   */
  @javax.annotation.Nonnull
  public Integer getPosted() {
    return posted;
  }

  public void setPosted(Integer posted) {
    this.posted = posted;
  }


  public GetSite200ResponseNotificationTypes privateMessage(Integer privateMessage) {
    this.privateMessage = privateMessage;
    return this;
  }

  /**
   * Get privateMessage
   * @return privateMessage
   */
  @javax.annotation.Nonnull
  public Integer getPrivateMessage() {
    return privateMessage;
  }

  public void setPrivateMessage(Integer privateMessage) {
    this.privateMessage = privateMessage;
  }


  public GetSite200ResponseNotificationTypes questionAnswerUserCommented(Integer questionAnswerUserCommented) {
    this.questionAnswerUserCommented = questionAnswerUserCommented;
    return this;
  }

  /**
   * Get questionAnswerUserCommented
   * @return questionAnswerUserCommented
   */
  @javax.annotation.Nullable
  public Integer getQuestionAnswerUserCommented() {
    return questionAnswerUserCommented;
  }

  public void setQuestionAnswerUserCommented(Integer questionAnswerUserCommented) {
    this.questionAnswerUserCommented = questionAnswerUserCommented;
  }


  public GetSite200ResponseNotificationTypes quoted(Integer quoted) {
    this.quoted = quoted;
    return this;
  }

  /**
   * Get quoted
   * @return quoted
   */
  @javax.annotation.Nonnull
  public Integer getQuoted() {
    return quoted;
  }

  public void setQuoted(Integer quoted) {
    this.quoted = quoted;
  }


  public GetSite200ResponseNotificationTypes reaction(Integer reaction) {
    this.reaction = reaction;
    return this;
  }

  /**
   * Get reaction
   * @return reaction
   */
  @javax.annotation.Nonnull
  public Integer getReaction() {
    return reaction;
  }

  public void setReaction(Integer reaction) {
    this.reaction = reaction;
  }


  public GetSite200ResponseNotificationTypes replied(Integer replied) {
    this.replied = replied;
    return this;
  }

  /**
   * Get replied
   * @return replied
   */
  @javax.annotation.Nonnull
  public Integer getReplied() {
    return replied;
  }

  public void setReplied(Integer replied) {
    this.replied = replied;
  }


  public GetSite200ResponseNotificationTypes topicReminder(Integer topicReminder) {
    this.topicReminder = topicReminder;
    return this;
  }

  /**
   * Get topicReminder
   * @return topicReminder
   */
  @javax.annotation.Nonnull
  public Integer getTopicReminder() {
    return topicReminder;
  }

  public void setTopicReminder(Integer topicReminder) {
    this.topicReminder = topicReminder;
  }


  public GetSite200ResponseNotificationTypes votesReleased(Integer votesReleased) {
    this.votesReleased = votesReleased;
    return this;
  }

  /**
   * Get votesReleased
   * @return votesReleased
   */
  @javax.annotation.Nonnull
  public Integer getVotesReleased() {
    return votesReleased;
  }

  public void setVotesReleased(Integer votesReleased) {
    this.votesReleased = votesReleased;
  }


  public GetSite200ResponseNotificationTypes watchingCategoryOrTag(Integer watchingCategoryOrTag) {
    this.watchingCategoryOrTag = watchingCategoryOrTag;
    return this;
  }

  /**
   * Get watchingCategoryOrTag
   * @return watchingCategoryOrTag
   */
  @javax.annotation.Nonnull
  public Integer getWatchingCategoryOrTag() {
    return watchingCategoryOrTag;
  }

  public void setWatchingCategoryOrTag(Integer watchingCategoryOrTag) {
    this.watchingCategoryOrTag = watchingCategoryOrTag;
  }


  public GetSite200ResponseNotificationTypes watchingFirstPost(Integer watchingFirstPost) {
    this.watchingFirstPost = watchingFirstPost;
    return this;
  }

  /**
   * Get watchingFirstPost
   * @return watchingFirstPost
   */
  @javax.annotation.Nonnull
  public Integer getWatchingFirstPost() {
    return watchingFirstPost;
  }

  public void setWatchingFirstPost(Integer watchingFirstPost) {
    this.watchingFirstPost = watchingFirstPost;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetSite200ResponseNotificationTypes instance itself
   */
  public GetSite200ResponseNotificationTypes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSite200ResponseNotificationTypes getSite200ResponseNotificationTypes = (GetSite200ResponseNotificationTypes) o;
    return Objects.equals(this.assigned, getSite200ResponseNotificationTypes.assigned) &&
        Objects.equals(this.bookmarkReminder, getSite200ResponseNotificationTypes.bookmarkReminder) &&
        Objects.equals(this.chatGroupMention, getSite200ResponseNotificationTypes.chatGroupMention) &&
        Objects.equals(this.chatInvitation, getSite200ResponseNotificationTypes.chatInvitation) &&
        Objects.equals(this.chatMention, getSite200ResponseNotificationTypes.chatMention) &&
        Objects.equals(this.chatMessage, getSite200ResponseNotificationTypes.chatMessage) &&
        Objects.equals(this.chatQuoted, getSite200ResponseNotificationTypes.chatQuoted) &&
        Objects.equals(this.circlesActivity, getSite200ResponseNotificationTypes.circlesActivity) &&
        Objects.equals(this.codeReviewCommitApproved, getSite200ResponseNotificationTypes.codeReviewCommitApproved) &&
        Objects.equals(this.custom, getSite200ResponseNotificationTypes.custom) &&
        Objects.equals(this.edited, getSite200ResponseNotificationTypes.edited) &&
        Objects.equals(this.eventInvitation, getSite200ResponseNotificationTypes.eventInvitation) &&
        Objects.equals(this.eventReminder, getSite200ResponseNotificationTypes.eventReminder) &&
        Objects.equals(this.following, getSite200ResponseNotificationTypes.following) &&
        Objects.equals(this.followingCreatedTopic, getSite200ResponseNotificationTypes.followingCreatedTopic) &&
        Objects.equals(this.followingReplied, getSite200ResponseNotificationTypes.followingReplied) &&
        Objects.equals(this.grantedBadge, getSite200ResponseNotificationTypes.grantedBadge) &&
        Objects.equals(this.groupMentioned, getSite200ResponseNotificationTypes.groupMentioned) &&
        Objects.equals(this.groupMessageSummary, getSite200ResponseNotificationTypes.groupMessageSummary) &&
        Objects.equals(this.invitedToPrivateMessage, getSite200ResponseNotificationTypes.invitedToPrivateMessage) &&
        Objects.equals(this.invitedToTopic, getSite200ResponseNotificationTypes.invitedToTopic) &&
        Objects.equals(this.inviteeAccepted, getSite200ResponseNotificationTypes.inviteeAccepted) &&
        Objects.equals(this.liked, getSite200ResponseNotificationTypes.liked) &&
        Objects.equals(this.likedConsolidated, getSite200ResponseNotificationTypes.likedConsolidated) &&
        Objects.equals(this.linked, getSite200ResponseNotificationTypes.linked) &&
        Objects.equals(this.membershipRequestAccepted, getSite200ResponseNotificationTypes.membershipRequestAccepted) &&
        Objects.equals(this.membershipRequestConsolidated, getSite200ResponseNotificationTypes.membershipRequestConsolidated) &&
        Objects.equals(this.mentioned, getSite200ResponseNotificationTypes.mentioned) &&
        Objects.equals(this.movedPost, getSite200ResponseNotificationTypes.movedPost) &&
        Objects.equals(this.newFeatures, getSite200ResponseNotificationTypes.newFeatures) &&
        Objects.equals(this.postApproved, getSite200ResponseNotificationTypes.postApproved) &&
        Objects.equals(this.posted, getSite200ResponseNotificationTypes.posted) &&
        Objects.equals(this.privateMessage, getSite200ResponseNotificationTypes.privateMessage) &&
        Objects.equals(this.questionAnswerUserCommented, getSite200ResponseNotificationTypes.questionAnswerUserCommented) &&
        Objects.equals(this.quoted, getSite200ResponseNotificationTypes.quoted) &&
        Objects.equals(this.reaction, getSite200ResponseNotificationTypes.reaction) &&
        Objects.equals(this.replied, getSite200ResponseNotificationTypes.replied) &&
        Objects.equals(this.topicReminder, getSite200ResponseNotificationTypes.topicReminder) &&
        Objects.equals(this.votesReleased, getSite200ResponseNotificationTypes.votesReleased) &&
        Objects.equals(this.watchingCategoryOrTag, getSite200ResponseNotificationTypes.watchingCategoryOrTag) &&
        Objects.equals(this.watchingFirstPost, getSite200ResponseNotificationTypes.watchingFirstPost)&&
        Objects.equals(this.additionalProperties, getSite200ResponseNotificationTypes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigned, bookmarkReminder, chatGroupMention, chatInvitation, chatMention, chatMessage, chatQuoted, circlesActivity, codeReviewCommitApproved, custom, edited, eventInvitation, eventReminder, following, followingCreatedTopic, followingReplied, grantedBadge, groupMentioned, groupMessageSummary, invitedToPrivateMessage, invitedToTopic, inviteeAccepted, liked, likedConsolidated, linked, membershipRequestAccepted, membershipRequestConsolidated, mentioned, movedPost, newFeatures, postApproved, posted, privateMessage, questionAnswerUserCommented, quoted, reaction, replied, topicReminder, votesReleased, watchingCategoryOrTag, watchingFirstPost, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSite200ResponseNotificationTypes {\n");
    sb.append("    assigned: ").append(toIndentedString(assigned)).append("\n");
    sb.append("    bookmarkReminder: ").append(toIndentedString(bookmarkReminder)).append("\n");
    sb.append("    chatGroupMention: ").append(toIndentedString(chatGroupMention)).append("\n");
    sb.append("    chatInvitation: ").append(toIndentedString(chatInvitation)).append("\n");
    sb.append("    chatMention: ").append(toIndentedString(chatMention)).append("\n");
    sb.append("    chatMessage: ").append(toIndentedString(chatMessage)).append("\n");
    sb.append("    chatQuoted: ").append(toIndentedString(chatQuoted)).append("\n");
    sb.append("    circlesActivity: ").append(toIndentedString(circlesActivity)).append("\n");
    sb.append("    codeReviewCommitApproved: ").append(toIndentedString(codeReviewCommitApproved)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    edited: ").append(toIndentedString(edited)).append("\n");
    sb.append("    eventInvitation: ").append(toIndentedString(eventInvitation)).append("\n");
    sb.append("    eventReminder: ").append(toIndentedString(eventReminder)).append("\n");
    sb.append("    following: ").append(toIndentedString(following)).append("\n");
    sb.append("    followingCreatedTopic: ").append(toIndentedString(followingCreatedTopic)).append("\n");
    sb.append("    followingReplied: ").append(toIndentedString(followingReplied)).append("\n");
    sb.append("    grantedBadge: ").append(toIndentedString(grantedBadge)).append("\n");
    sb.append("    groupMentioned: ").append(toIndentedString(groupMentioned)).append("\n");
    sb.append("    groupMessageSummary: ").append(toIndentedString(groupMessageSummary)).append("\n");
    sb.append("    invitedToPrivateMessage: ").append(toIndentedString(invitedToPrivateMessage)).append("\n");
    sb.append("    invitedToTopic: ").append(toIndentedString(invitedToTopic)).append("\n");
    sb.append("    inviteeAccepted: ").append(toIndentedString(inviteeAccepted)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likedConsolidated: ").append(toIndentedString(likedConsolidated)).append("\n");
    sb.append("    linked: ").append(toIndentedString(linked)).append("\n");
    sb.append("    membershipRequestAccepted: ").append(toIndentedString(membershipRequestAccepted)).append("\n");
    sb.append("    membershipRequestConsolidated: ").append(toIndentedString(membershipRequestConsolidated)).append("\n");
    sb.append("    mentioned: ").append(toIndentedString(mentioned)).append("\n");
    sb.append("    movedPost: ").append(toIndentedString(movedPost)).append("\n");
    sb.append("    newFeatures: ").append(toIndentedString(newFeatures)).append("\n");
    sb.append("    postApproved: ").append(toIndentedString(postApproved)).append("\n");
    sb.append("    posted: ").append(toIndentedString(posted)).append("\n");
    sb.append("    privateMessage: ").append(toIndentedString(privateMessage)).append("\n");
    sb.append("    questionAnswerUserCommented: ").append(toIndentedString(questionAnswerUserCommented)).append("\n");
    sb.append("    quoted: ").append(toIndentedString(quoted)).append("\n");
    sb.append("    reaction: ").append(toIndentedString(reaction)).append("\n");
    sb.append("    replied: ").append(toIndentedString(replied)).append("\n");
    sb.append("    topicReminder: ").append(toIndentedString(topicReminder)).append("\n");
    sb.append("    votesReleased: ").append(toIndentedString(votesReleased)).append("\n");
    sb.append("    watchingCategoryOrTag: ").append(toIndentedString(watchingCategoryOrTag)).append("\n");
    sb.append("    watchingFirstPost: ").append(toIndentedString(watchingFirstPost)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigned");
    openapiFields.add("bookmark_reminder");
    openapiFields.add("chat_group_mention");
    openapiFields.add("chat_invitation");
    openapiFields.add("chat_mention");
    openapiFields.add("chat_message");
    openapiFields.add("chat_quoted");
    openapiFields.add("circles_activity");
    openapiFields.add("code_review_commit_approved");
    openapiFields.add("custom");
    openapiFields.add("edited");
    openapiFields.add("event_invitation");
    openapiFields.add("event_reminder");
    openapiFields.add("following");
    openapiFields.add("following_created_topic");
    openapiFields.add("following_replied");
    openapiFields.add("granted_badge");
    openapiFields.add("group_mentioned");
    openapiFields.add("group_message_summary");
    openapiFields.add("invited_to_private_message");
    openapiFields.add("invited_to_topic");
    openapiFields.add("invitee_accepted");
    openapiFields.add("liked");
    openapiFields.add("liked_consolidated");
    openapiFields.add("linked");
    openapiFields.add("membership_request_accepted");
    openapiFields.add("membership_request_consolidated");
    openapiFields.add("mentioned");
    openapiFields.add("moved_post");
    openapiFields.add("new_features");
    openapiFields.add("post_approved");
    openapiFields.add("posted");
    openapiFields.add("private_message");
    openapiFields.add("question_answer_user_commented");
    openapiFields.add("quoted");
    openapiFields.add("reaction");
    openapiFields.add("replied");
    openapiFields.add("topic_reminder");
    openapiFields.add("votes_released");
    openapiFields.add("watching_category_or_tag");
    openapiFields.add("watching_first_post");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bookmark_reminder");
    openapiRequiredFields.add("chat_group_mention");
    openapiRequiredFields.add("chat_invitation");
    openapiRequiredFields.add("chat_mention");
    openapiRequiredFields.add("chat_message");
    openapiRequiredFields.add("code_review_commit_approved");
    openapiRequiredFields.add("custom");
    openapiRequiredFields.add("edited");
    openapiRequiredFields.add("event_invitation");
    openapiRequiredFields.add("event_reminder");
    openapiRequiredFields.add("granted_badge");
    openapiRequiredFields.add("group_mentioned");
    openapiRequiredFields.add("group_message_summary");
    openapiRequiredFields.add("invited_to_private_message");
    openapiRequiredFields.add("invited_to_topic");
    openapiRequiredFields.add("invitee_accepted");
    openapiRequiredFields.add("liked");
    openapiRequiredFields.add("liked_consolidated");
    openapiRequiredFields.add("linked");
    openapiRequiredFields.add("membership_request_accepted");
    openapiRequiredFields.add("membership_request_consolidated");
    openapiRequiredFields.add("mentioned");
    openapiRequiredFields.add("moved_post");
    openapiRequiredFields.add("post_approved");
    openapiRequiredFields.add("posted");
    openapiRequiredFields.add("private_message");
    openapiRequiredFields.add("quoted");
    openapiRequiredFields.add("reaction");
    openapiRequiredFields.add("replied");
    openapiRequiredFields.add("topic_reminder");
    openapiRequiredFields.add("votes_released");
    openapiRequiredFields.add("watching_category_or_tag");
    openapiRequiredFields.add("watching_first_post");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSite200ResponseNotificationTypes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSite200ResponseNotificationTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSite200ResponseNotificationTypes is not found in the empty JSON string", GetSite200ResponseNotificationTypes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSite200ResponseNotificationTypes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSite200ResponseNotificationTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSite200ResponseNotificationTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSite200ResponseNotificationTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSite200ResponseNotificationTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSite200ResponseNotificationTypes>() {
           @Override
           public void write(JsonWriter out, GetSite200ResponseNotificationTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSite200ResponseNotificationTypes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GetSite200ResponseNotificationTypes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSite200ResponseNotificationTypes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSite200ResponseNotificationTypes
   * @throws IOException if the JSON string is invalid with respect to GetSite200ResponseNotificationTypes
   */
  public static GetSite200ResponseNotificationTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSite200ResponseNotificationTypes.class);
  }

  /**
   * Convert an instance of GetSite200ResponseNotificationTypes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

