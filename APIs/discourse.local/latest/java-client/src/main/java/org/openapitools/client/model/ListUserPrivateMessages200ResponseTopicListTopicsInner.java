/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListLatestTopics200ResponseTopicListTopicsInnerPostersInner;
import org.openapitools.client.model.ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListUserPrivateMessages200ResponseTopicListTopicsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListUserPrivateMessages200ResponseTopicListTopicsInner {
  public static final String SERIALIZED_NAME_ALLOWED_USER_COUNT = "allowed_user_count";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USER_COUNT)
  private Integer allowedUserCount;

  public static final String SERIALIZED_NAME_ARCHETYPE = "archetype";
  @SerializedName(SERIALIZED_NAME_ARCHETYPE)
  private String archetype;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_BOOKMARKED = "bookmarked";
  @SerializedName(SERIALIZED_NAME_BOOKMARKED)
  private Boolean bookmarked;

  public static final String SERIALIZED_NAME_BUMPED = "bumped";
  @SerializedName(SERIALIZED_NAME_BUMPED)
  private Boolean bumped;

  public static final String SERIALIZED_NAME_BUMPED_AT = "bumped_at";
  @SerializedName(SERIALIZED_NAME_BUMPED_AT)
  private String bumpedAt;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_FANCY_TITLE = "fancy_title";
  @SerializedName(SERIALIZED_NAME_FANCY_TITLE)
  private String fancyTitle;

  public static final String SERIALIZED_NAME_FEATURED_LINK = "featured_link";
  @SerializedName(SERIALIZED_NAME_FEATURED_LINK)
  private String featuredLink;

  public static final String SERIALIZED_NAME_HAS_SUMMARY = "has_summary";
  @SerializedName(SERIALIZED_NAME_HAS_SUMMARY)
  private Boolean hasSummary;

  public static final String SERIALIZED_NAME_HIGHEST_POST_NUMBER = "highest_post_number";
  @SerializedName(SERIALIZED_NAME_HIGHEST_POST_NUMBER)
  private Integer highestPostNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LAST_POSTED_AT = "last_posted_at";
  @SerializedName(SERIALIZED_NAME_LAST_POSTED_AT)
  private String lastPostedAt;

  public static final String SERIALIZED_NAME_LAST_POSTER_USERNAME = "last_poster_username";
  @SerializedName(SERIALIZED_NAME_LAST_POSTER_USERNAME)
  private String lastPosterUsername;

  public static final String SERIALIZED_NAME_LAST_READ_POST_NUMBER = "last_read_post_number";
  @SerializedName(SERIALIZED_NAME_LAST_READ_POST_NUMBER)
  private Integer lastReadPostNumber;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "like_count";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private Integer likeCount;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_NOTIFICATION_LEVEL = "notification_level";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_LEVEL)
  private Integer notificationLevel;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  private Boolean pinned;

  public static final String SERIALIZED_NAME_PINNED_GLOBALLY = "pinned_globally";
  @SerializedName(SERIALIZED_NAME_PINNED_GLOBALLY)
  private Boolean pinnedGlobally;

  public static final String SERIALIZED_NAME_POSTERS = "posters";
  @SerializedName(SERIALIZED_NAME_POSTERS)
  private List<ListLatestTopics200ResponseTopicListTopicsInnerPostersInner> posters = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTS_COUNT = "posts_count";
  @SerializedName(SERIALIZED_NAME_POSTS_COUNT)
  private Integer postsCount;

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UNPINNED = "unpinned";
  @SerializedName(SERIALIZED_NAME_UNPINNED)
  private String unpinned;

  public static final String SERIALIZED_NAME_UNREAD_POSTS = "unread_posts";
  @SerializedName(SERIALIZED_NAME_UNREAD_POSTS)
  private Integer unreadPosts;

  public static final String SERIALIZED_NAME_UNSEEN = "unseen";
  @SerializedName(SERIALIZED_NAME_UNSEEN)
  private Boolean unseen;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private Integer views;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public ListUserPrivateMessages200ResponseTopicListTopicsInner() {
  }

  public ListUserPrivateMessages200ResponseTopicListTopicsInner allowedUserCount(Integer allowedUserCount) {
    this.allowedUserCount = allowedUserCount;
    return this;
  }

  /**
   * Get allowedUserCount
   * @return allowedUserCount
   */
  @javax.annotation.Nullable
  public Integer getAllowedUserCount() {
    return allowedUserCount;
  }

  public void setAllowedUserCount(Integer allowedUserCount) {
    this.allowedUserCount = allowedUserCount;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner archetype(String archetype) {
    this.archetype = archetype;
    return this;
  }

  /**
   * Get archetype
   * @return archetype
   */
  @javax.annotation.Nullable
  public String getArchetype() {
    return archetype;
  }

  public void setArchetype(String archetype) {
    this.archetype = archetype;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner bookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
    return this;
  }

  /**
   * Get bookmarked
   * @return bookmarked
   */
  @javax.annotation.Nullable
  public Boolean getBookmarked() {
    return bookmarked;
  }

  public void setBookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner bumped(Boolean bumped) {
    this.bumped = bumped;
    return this;
  }

  /**
   * Get bumped
   * @return bumped
   */
  @javax.annotation.Nullable
  public Boolean getBumped() {
    return bumped;
  }

  public void setBumped(Boolean bumped) {
    this.bumped = bumped;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner bumpedAt(String bumpedAt) {
    this.bumpedAt = bumpedAt;
    return this;
  }

  /**
   * Get bumpedAt
   * @return bumpedAt
   */
  @javax.annotation.Nullable
  public String getBumpedAt() {
    return bumpedAt;
  }

  public void setBumpedAt(String bumpedAt) {
    this.bumpedAt = bumpedAt;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner fancyTitle(String fancyTitle) {
    this.fancyTitle = fancyTitle;
    return this;
  }

  /**
   * Get fancyTitle
   * @return fancyTitle
   */
  @javax.annotation.Nullable
  public String getFancyTitle() {
    return fancyTitle;
  }

  public void setFancyTitle(String fancyTitle) {
    this.fancyTitle = fancyTitle;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner featuredLink(String featuredLink) {
    this.featuredLink = featuredLink;
    return this;
  }

  /**
   * Get featuredLink
   * @return featuredLink
   */
  @javax.annotation.Nullable
  public String getFeaturedLink() {
    return featuredLink;
  }

  public void setFeaturedLink(String featuredLink) {
    this.featuredLink = featuredLink;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner hasSummary(Boolean hasSummary) {
    this.hasSummary = hasSummary;
    return this;
  }

  /**
   * Get hasSummary
   * @return hasSummary
   */
  @javax.annotation.Nullable
  public Boolean getHasSummary() {
    return hasSummary;
  }

  public void setHasSummary(Boolean hasSummary) {
    this.hasSummary = hasSummary;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner highestPostNumber(Integer highestPostNumber) {
    this.highestPostNumber = highestPostNumber;
    return this;
  }

  /**
   * Get highestPostNumber
   * @return highestPostNumber
   */
  @javax.annotation.Nullable
  public Integer getHighestPostNumber() {
    return highestPostNumber;
  }

  public void setHighestPostNumber(Integer highestPostNumber) {
    this.highestPostNumber = highestPostNumber;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner lastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
    return this;
  }

  /**
   * Get lastPostedAt
   * @return lastPostedAt
   */
  @javax.annotation.Nullable
  public String getLastPostedAt() {
    return lastPostedAt;
  }

  public void setLastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner lastPosterUsername(String lastPosterUsername) {
    this.lastPosterUsername = lastPosterUsername;
    return this;
  }

  /**
   * Get lastPosterUsername
   * @return lastPosterUsername
   */
  @javax.annotation.Nullable
  public String getLastPosterUsername() {
    return lastPosterUsername;
  }

  public void setLastPosterUsername(String lastPosterUsername) {
    this.lastPosterUsername = lastPosterUsername;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner lastReadPostNumber(Integer lastReadPostNumber) {
    this.lastReadPostNumber = lastReadPostNumber;
    return this;
  }

  /**
   * Get lastReadPostNumber
   * @return lastReadPostNumber
   */
  @javax.annotation.Nullable
  public Integer getLastReadPostNumber() {
    return lastReadPostNumber;
  }

  public void setLastReadPostNumber(Integer lastReadPostNumber) {
    this.lastReadPostNumber = lastReadPostNumber;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner likeCount(Integer likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * Get likeCount
   * @return likeCount
   */
  @javax.annotation.Nullable
  public Integer getLikeCount() {
    return likeCount;
  }

  public void setLikeCount(Integer likeCount) {
    this.likeCount = likeCount;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner liked(Boolean liked) {
    this.liked = liked;
    return this;
  }

  /**
   * Get liked
   * @return liked
   */
  @javax.annotation.Nullable
  public Boolean getLiked() {
    return liked;
  }

  public void setLiked(Boolean liked) {
    this.liked = liked;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner notificationLevel(Integer notificationLevel) {
    this.notificationLevel = notificationLevel;
    return this;
  }

  /**
   * Get notificationLevel
   * @return notificationLevel
   */
  @javax.annotation.Nullable
  public Integer getNotificationLevel() {
    return notificationLevel;
  }

  public void setNotificationLevel(Integer notificationLevel) {
    this.notificationLevel = notificationLevel;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner participants(List<ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner> participants) {
    this.participants = participants;
    return this;
  }

  public ListUserPrivateMessages200ResponseTopicListTopicsInner addParticipantsItem(ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Get participants
   * @return participants
   */
  @javax.annotation.Nullable
  public List<ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner> getParticipants() {
    return participants;
  }

  public void setParticipants(List<ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner> participants) {
    this.participants = participants;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Get pinned
   * @return pinned
   */
  @javax.annotation.Nullable
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner pinnedGlobally(Boolean pinnedGlobally) {
    this.pinnedGlobally = pinnedGlobally;
    return this;
  }

  /**
   * Get pinnedGlobally
   * @return pinnedGlobally
   */
  @javax.annotation.Nullable
  public Boolean getPinnedGlobally() {
    return pinnedGlobally;
  }

  public void setPinnedGlobally(Boolean pinnedGlobally) {
    this.pinnedGlobally = pinnedGlobally;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner posters(List<ListLatestTopics200ResponseTopicListTopicsInnerPostersInner> posters) {
    this.posters = posters;
    return this;
  }

  public ListUserPrivateMessages200ResponseTopicListTopicsInner addPostersItem(ListLatestTopics200ResponseTopicListTopicsInnerPostersInner postersItem) {
    if (this.posters == null) {
      this.posters = new ArrayList<>();
    }
    this.posters.add(postersItem);
    return this;
  }

  /**
   * Get posters
   * @return posters
   */
  @javax.annotation.Nullable
  public List<ListLatestTopics200ResponseTopicListTopicsInnerPostersInner> getPosters() {
    return posters;
  }

  public void setPosters(List<ListLatestTopics200ResponseTopicListTopicsInnerPostersInner> posters) {
    this.posters = posters;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner postsCount(Integer postsCount) {
    this.postsCount = postsCount;
    return this;
  }

  /**
   * Get postsCount
   * @return postsCount
   */
  @javax.annotation.Nullable
  public Integer getPostsCount() {
    return postsCount;
  }

  public void setPostsCount(Integer postsCount) {
    this.postsCount = postsCount;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Get replyCount
   * @return replyCount
   */
  @javax.annotation.Nullable
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner unpinned(String unpinned) {
    this.unpinned = unpinned;
    return this;
  }

  /**
   * Get unpinned
   * @return unpinned
   */
  @javax.annotation.Nullable
  public String getUnpinned() {
    return unpinned;
  }

  public void setUnpinned(String unpinned) {
    this.unpinned = unpinned;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner unreadPosts(Integer unreadPosts) {
    this.unreadPosts = unreadPosts;
    return this;
  }

  /**
   * Get unreadPosts
   * @return unreadPosts
   */
  @javax.annotation.Nullable
  public Integer getUnreadPosts() {
    return unreadPosts;
  }

  public void setUnreadPosts(Integer unreadPosts) {
    this.unreadPosts = unreadPosts;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner unseen(Boolean unseen) {
    this.unseen = unseen;
    return this;
  }

  /**
   * Get unseen
   * @return unseen
   */
  @javax.annotation.Nullable
  public Boolean getUnseen() {
    return unseen;
  }

  public void setUnseen(Boolean unseen) {
    this.unseen = unseen;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner views(Integer views) {
    this.views = views;
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nullable
  public Integer getViews() {
    return views;
  }

  public void setViews(Integer views) {
    this.views = views;
  }


  public ListUserPrivateMessages200ResponseTopicListTopicsInner visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListUserPrivateMessages200ResponseTopicListTopicsInner listUserPrivateMessages200ResponseTopicListTopicsInner = (ListUserPrivateMessages200ResponseTopicListTopicsInner) o;
    return Objects.equals(this.allowedUserCount, listUserPrivateMessages200ResponseTopicListTopicsInner.allowedUserCount) &&
        Objects.equals(this.archetype, listUserPrivateMessages200ResponseTopicListTopicsInner.archetype) &&
        Objects.equals(this.archived, listUserPrivateMessages200ResponseTopicListTopicsInner.archived) &&
        Objects.equals(this.bookmarked, listUserPrivateMessages200ResponseTopicListTopicsInner.bookmarked) &&
        Objects.equals(this.bumped, listUserPrivateMessages200ResponseTopicListTopicsInner.bumped) &&
        Objects.equals(this.bumpedAt, listUserPrivateMessages200ResponseTopicListTopicsInner.bumpedAt) &&
        Objects.equals(this.categoryId, listUserPrivateMessages200ResponseTopicListTopicsInner.categoryId) &&
        Objects.equals(this.closed, listUserPrivateMessages200ResponseTopicListTopicsInner.closed) &&
        Objects.equals(this.createdAt, listUserPrivateMessages200ResponseTopicListTopicsInner.createdAt) &&
        Objects.equals(this.fancyTitle, listUserPrivateMessages200ResponseTopicListTopicsInner.fancyTitle) &&
        Objects.equals(this.featuredLink, listUserPrivateMessages200ResponseTopicListTopicsInner.featuredLink) &&
        Objects.equals(this.hasSummary, listUserPrivateMessages200ResponseTopicListTopicsInner.hasSummary) &&
        Objects.equals(this.highestPostNumber, listUserPrivateMessages200ResponseTopicListTopicsInner.highestPostNumber) &&
        Objects.equals(this.id, listUserPrivateMessages200ResponseTopicListTopicsInner.id) &&
        Objects.equals(this.imageUrl, listUserPrivateMessages200ResponseTopicListTopicsInner.imageUrl) &&
        Objects.equals(this.lastPostedAt, listUserPrivateMessages200ResponseTopicListTopicsInner.lastPostedAt) &&
        Objects.equals(this.lastPosterUsername, listUserPrivateMessages200ResponseTopicListTopicsInner.lastPosterUsername) &&
        Objects.equals(this.lastReadPostNumber, listUserPrivateMessages200ResponseTopicListTopicsInner.lastReadPostNumber) &&
        Objects.equals(this.likeCount, listUserPrivateMessages200ResponseTopicListTopicsInner.likeCount) &&
        Objects.equals(this.liked, listUserPrivateMessages200ResponseTopicListTopicsInner.liked) &&
        Objects.equals(this.notificationLevel, listUserPrivateMessages200ResponseTopicListTopicsInner.notificationLevel) &&
        Objects.equals(this.participants, listUserPrivateMessages200ResponseTopicListTopicsInner.participants) &&
        Objects.equals(this.pinned, listUserPrivateMessages200ResponseTopicListTopicsInner.pinned) &&
        Objects.equals(this.pinnedGlobally, listUserPrivateMessages200ResponseTopicListTopicsInner.pinnedGlobally) &&
        Objects.equals(this.posters, listUserPrivateMessages200ResponseTopicListTopicsInner.posters) &&
        Objects.equals(this.postsCount, listUserPrivateMessages200ResponseTopicListTopicsInner.postsCount) &&
        Objects.equals(this.replyCount, listUserPrivateMessages200ResponseTopicListTopicsInner.replyCount) &&
        Objects.equals(this.slug, listUserPrivateMessages200ResponseTopicListTopicsInner.slug) &&
        Objects.equals(this.title, listUserPrivateMessages200ResponseTopicListTopicsInner.title) &&
        Objects.equals(this.unpinned, listUserPrivateMessages200ResponseTopicListTopicsInner.unpinned) &&
        Objects.equals(this.unreadPosts, listUserPrivateMessages200ResponseTopicListTopicsInner.unreadPosts) &&
        Objects.equals(this.unseen, listUserPrivateMessages200ResponseTopicListTopicsInner.unseen) &&
        Objects.equals(this.views, listUserPrivateMessages200ResponseTopicListTopicsInner.views) &&
        Objects.equals(this.visible, listUserPrivateMessages200ResponseTopicListTopicsInner.visible);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUserCount, archetype, archived, bookmarked, bumped, bumpedAt, categoryId, closed, createdAt, fancyTitle, featuredLink, hasSummary, highestPostNumber, id, imageUrl, lastPostedAt, lastPosterUsername, lastReadPostNumber, likeCount, liked, notificationLevel, participants, pinned, pinnedGlobally, posters, postsCount, replyCount, slug, title, unpinned, unreadPosts, unseen, views, visible);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListUserPrivateMessages200ResponseTopicListTopicsInner {\n");
    sb.append("    allowedUserCount: ").append(toIndentedString(allowedUserCount)).append("\n");
    sb.append("    archetype: ").append(toIndentedString(archetype)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    bookmarked: ").append(toIndentedString(bookmarked)).append("\n");
    sb.append("    bumped: ").append(toIndentedString(bumped)).append("\n");
    sb.append("    bumpedAt: ").append(toIndentedString(bumpedAt)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    fancyTitle: ").append(toIndentedString(fancyTitle)).append("\n");
    sb.append("    featuredLink: ").append(toIndentedString(featuredLink)).append("\n");
    sb.append("    hasSummary: ").append(toIndentedString(hasSummary)).append("\n");
    sb.append("    highestPostNumber: ").append(toIndentedString(highestPostNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    lastPostedAt: ").append(toIndentedString(lastPostedAt)).append("\n");
    sb.append("    lastPosterUsername: ").append(toIndentedString(lastPosterUsername)).append("\n");
    sb.append("    lastReadPostNumber: ").append(toIndentedString(lastReadPostNumber)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    notificationLevel: ").append(toIndentedString(notificationLevel)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    pinnedGlobally: ").append(toIndentedString(pinnedGlobally)).append("\n");
    sb.append("    posters: ").append(toIndentedString(posters)).append("\n");
    sb.append("    postsCount: ").append(toIndentedString(postsCount)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unpinned: ").append(toIndentedString(unpinned)).append("\n");
    sb.append("    unreadPosts: ").append(toIndentedString(unreadPosts)).append("\n");
    sb.append("    unseen: ").append(toIndentedString(unseen)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_user_count");
    openapiFields.add("archetype");
    openapiFields.add("archived");
    openapiFields.add("bookmarked");
    openapiFields.add("bumped");
    openapiFields.add("bumped_at");
    openapiFields.add("category_id");
    openapiFields.add("closed");
    openapiFields.add("created_at");
    openapiFields.add("fancy_title");
    openapiFields.add("featured_link");
    openapiFields.add("has_summary");
    openapiFields.add("highest_post_number");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("last_posted_at");
    openapiFields.add("last_poster_username");
    openapiFields.add("last_read_post_number");
    openapiFields.add("like_count");
    openapiFields.add("liked");
    openapiFields.add("notification_level");
    openapiFields.add("participants");
    openapiFields.add("pinned");
    openapiFields.add("pinned_globally");
    openapiFields.add("posters");
    openapiFields.add("posts_count");
    openapiFields.add("reply_count");
    openapiFields.add("slug");
    openapiFields.add("title");
    openapiFields.add("unpinned");
    openapiFields.add("unread_posts");
    openapiFields.add("unseen");
    openapiFields.add("views");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListUserPrivateMessages200ResponseTopicListTopicsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListUserPrivateMessages200ResponseTopicListTopicsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListUserPrivateMessages200ResponseTopicListTopicsInner is not found in the empty JSON string", ListUserPrivateMessages200ResponseTopicListTopicsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListUserPrivateMessages200ResponseTopicListTopicsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListUserPrivateMessages200ResponseTopicListTopicsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("archetype") != null && !jsonObj.get("archetype").isJsonNull()) && !jsonObj.get("archetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archetype").toString()));
      }
      if ((jsonObj.get("bumped_at") != null && !jsonObj.get("bumped_at").isJsonNull()) && !jsonObj.get("bumped_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bumped_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bumped_at").toString()));
      }
      if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("fancy_title") != null && !jsonObj.get("fancy_title").isJsonNull()) && !jsonObj.get("fancy_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fancy_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fancy_title").toString()));
      }
      if ((jsonObj.get("featured_link") != null && !jsonObj.get("featured_link").isJsonNull()) && !jsonObj.get("featured_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featured_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featured_link").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("last_posted_at") != null && !jsonObj.get("last_posted_at").isJsonNull()) && !jsonObj.get("last_posted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_posted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_posted_at").toString()));
      }
      if ((jsonObj.get("last_poster_username") != null && !jsonObj.get("last_poster_username").isJsonNull()) && !jsonObj.get("last_poster_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_poster_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_poster_username").toString()));
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            ListUserPrivateMessages200ResponseTopicListTopicsInnerParticipantsInner.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
      if (jsonObj.get("posters") != null && !jsonObj.get("posters").isJsonNull()) {
        JsonArray jsonArrayposters = jsonObj.getAsJsonArray("posters");
        if (jsonArrayposters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("posters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `posters` to be an array in the JSON string but got `%s`", jsonObj.get("posters").toString()));
          }

          // validate the optional field `posters` (array)
          for (int i = 0; i < jsonArrayposters.size(); i++) {
            ListLatestTopics200ResponseTopicListTopicsInnerPostersInner.validateJsonElement(jsonArrayposters.get(i));
          };
        }
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("unpinned") != null && !jsonObj.get("unpinned").isJsonNull()) && !jsonObj.get("unpinned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unpinned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unpinned").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListUserPrivateMessages200ResponseTopicListTopicsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListUserPrivateMessages200ResponseTopicListTopicsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListUserPrivateMessages200ResponseTopicListTopicsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListUserPrivateMessages200ResponseTopicListTopicsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListUserPrivateMessages200ResponseTopicListTopicsInner>() {
           @Override
           public void write(JsonWriter out, ListUserPrivateMessages200ResponseTopicListTopicsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListUserPrivateMessages200ResponseTopicListTopicsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListUserPrivateMessages200ResponseTopicListTopicsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListUserPrivateMessages200ResponseTopicListTopicsInner
   * @throws IOException if the JSON string is invalid with respect to ListUserPrivateMessages200ResponseTopicListTopicsInner
   */
  public static ListUserPrivateMessages200ResponseTopicListTopicsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListUserPrivateMessages200ResponseTopicListTopicsInner.class);
  }

  /**
   * Convert an instance of ListUserPrivateMessages200ResponseTopicListTopicsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

