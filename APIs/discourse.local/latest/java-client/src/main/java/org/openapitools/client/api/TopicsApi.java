/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateTopicPostPM200Response;
import org.openapitools.client.model.CreateTopicPostPMRequest;
import org.openapitools.client.model.CreateTopicTimer200Response;
import org.openapitools.client.model.CreateTopicTimerRequest;
import org.openapitools.client.model.GetSpecificPostsFromTopic200Response;
import org.openapitools.client.model.GetSpecificPostsFromTopicRequest;
import org.openapitools.client.model.GetTopic200Response;
import org.openapitools.client.model.InviteToTopic200Response;
import org.openapitools.client.model.InviteToTopicRequest;
import org.openapitools.client.model.ListLatestTopics200Response;
import org.openapitools.client.model.ListTopTopics200Response;
import org.openapitools.client.model.SetNotificationLevelRequest;
import org.openapitools.client.model.UpdateGroup200Response;
import org.openapitools.client.model.UpdateTopic200Response;
import org.openapitools.client.model.UpdateTopicRequest;
import org.openapitools.client.model.UpdateTopicStatus200Response;
import org.openapitools.client.model.UpdateTopicStatusRequest;
import org.openapitools.client.model.UpdateTopicTimestampRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopicsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bookmarkTopic
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookmarkTopicCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{id}/bookmark.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookmarkTopicValidateBeforeCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling bookmarkTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling bookmarkTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bookmarkTopic(Async)");
        }

        return bookmarkTopicCall(apiKey, apiUsername, id, _callback);

    }

    /**
     * Bookmark topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public void bookmarkTopic(String apiKey, String apiUsername, String id) throws ApiException {
        bookmarkTopicWithHttpInfo(apiKey, apiUsername, id);
    }

    /**
     * Bookmark topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bookmarkTopicWithHttpInfo(String apiKey, String apiUsername, String id) throws ApiException {
        okhttp3.Call localVarCall = bookmarkTopicValidateBeforeCall(apiKey, apiUsername, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bookmark topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookmarkTopicAsync(String apiKey, String apiUsername, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookmarkTopicValidateBeforeCall(apiKey, apiUsername, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTopicPostPM_0
     * @param createTopicPostPMRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicPostPM_0Call(CreateTopicPostPMRequest createTopicPostPMRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTopicPostPMRequest;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicPostPM_0ValidateBeforeCall(CreateTopicPostPMRequest createTopicPostPMRequest, final ApiCallback _callback) throws ApiException {
        return createTopicPostPM_0Call(createTopicPostPMRequest, _callback);

    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @param createTopicPostPMRequest  (optional)
     * @return CreateTopicPostPM200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicPostPM200Response createTopicPostPM_0(CreateTopicPostPMRequest createTopicPostPMRequest) throws ApiException {
        ApiResponse<CreateTopicPostPM200Response> localVarResp = createTopicPostPM_0WithHttpInfo(createTopicPostPMRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @param createTopicPostPMRequest  (optional)
     * @return ApiResponse&lt;CreateTopicPostPM200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTopicPostPM200Response> createTopicPostPM_0WithHttpInfo(CreateTopicPostPMRequest createTopicPostPMRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicPostPM_0ValidateBeforeCall(createTopicPostPMRequest, null);
        Type localVarReturnType = new TypeToken<CreateTopicPostPM200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new topic, a new post, or a private message (asynchronously)
     * 
     * @param createTopicPostPMRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicPostPM_0Async(CreateTopicPostPMRequest createTopicPostPMRequest, final ApiCallback<CreateTopicPostPM200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicPostPM_0ValidateBeforeCall(createTopicPostPMRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTopicPostPM200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTopicTimer
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param createTopicTimerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicTimerCall(String apiKey, String apiUsername, String id, CreateTopicTimerRequest createTopicTimerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTopicTimerRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/timer.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicTimerValidateBeforeCall(String apiKey, String apiUsername, String id, CreateTopicTimerRequest createTopicTimerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createTopicTimer(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling createTopicTimer(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTopicTimer(Async)");
        }

        return createTopicTimerCall(apiKey, apiUsername, id, createTopicTimerRequest, _callback);

    }

    /**
     * Create topic timer
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param createTopicTimerRequest  (optional)
     * @return CreateTopicTimer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicTimer200Response createTopicTimer(String apiKey, String apiUsername, String id, CreateTopicTimerRequest createTopicTimerRequest) throws ApiException {
        ApiResponse<CreateTopicTimer200Response> localVarResp = createTopicTimerWithHttpInfo(apiKey, apiUsername, id, createTopicTimerRequest);
        return localVarResp.getData();
    }

    /**
     * Create topic timer
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param createTopicTimerRequest  (optional)
     * @return ApiResponse&lt;CreateTopicTimer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTopicTimer200Response> createTopicTimerWithHttpInfo(String apiKey, String apiUsername, String id, CreateTopicTimerRequest createTopicTimerRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicTimerValidateBeforeCall(apiKey, apiUsername, id, createTopicTimerRequest, null);
        Type localVarReturnType = new TypeToken<CreateTopicTimer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create topic timer (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param createTopicTimerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicTimerAsync(String apiKey, String apiUsername, String id, CreateTopicTimerRequest createTopicTimerRequest, final ApiCallback<CreateTopicTimer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicTimerValidateBeforeCall(apiKey, apiUsername, id, createTopicTimerRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTopicTimer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpecificPostsFromTopic
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param getSpecificPostsFromTopicRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificPostsFromTopicCall(String apiKey, String apiUsername, String id, GetSpecificPostsFromTopicRequest getSpecificPostsFromTopicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSpecificPostsFromTopicRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/posts.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPostsFromTopicValidateBeforeCall(String apiKey, String apiUsername, String id, GetSpecificPostsFromTopicRequest getSpecificPostsFromTopicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSpecificPostsFromTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getSpecificPostsFromTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificPostsFromTopic(Async)");
        }

        return getSpecificPostsFromTopicCall(apiKey, apiUsername, id, getSpecificPostsFromTopicRequest, _callback);

    }

    /**
     * Get specific posts from a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param getSpecificPostsFromTopicRequest  (optional)
     * @return GetSpecificPostsFromTopic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPostsFromTopic200Response getSpecificPostsFromTopic(String apiKey, String apiUsername, String id, GetSpecificPostsFromTopicRequest getSpecificPostsFromTopicRequest) throws ApiException {
        ApiResponse<GetSpecificPostsFromTopic200Response> localVarResp = getSpecificPostsFromTopicWithHttpInfo(apiKey, apiUsername, id, getSpecificPostsFromTopicRequest);
        return localVarResp.getData();
    }

    /**
     * Get specific posts from a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param getSpecificPostsFromTopicRequest  (optional)
     * @return ApiResponse&lt;GetSpecificPostsFromTopic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSpecificPostsFromTopic200Response> getSpecificPostsFromTopicWithHttpInfo(String apiKey, String apiUsername, String id, GetSpecificPostsFromTopicRequest getSpecificPostsFromTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPostsFromTopicValidateBeforeCall(apiKey, apiUsername, id, getSpecificPostsFromTopicRequest, null);
        Type localVarReturnType = new TypeToken<GetSpecificPostsFromTopic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific posts from a topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param getSpecificPostsFromTopicRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificPostsFromTopicAsync(String apiKey, String apiUsername, String id, GetSpecificPostsFromTopicRequest getSpecificPostsFromTopicRequest, final ApiCallback<GetSpecificPostsFromTopic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPostsFromTopicValidateBeforeCall(apiKey, apiUsername, id, getSpecificPostsFromTopicRequest, _callback);
        Type localVarReturnType = new TypeToken<GetSpecificPostsFromTopic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopic
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopicValidateBeforeCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTopic(Async)");
        }

        return getTopicCall(apiKey, apiUsername, id, _callback);

    }

    /**
     * Get a single topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return GetTopic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public GetTopic200Response getTopic(String apiKey, String apiUsername, String id) throws ApiException {
        ApiResponse<GetTopic200Response> localVarResp = getTopicWithHttpInfo(apiKey, apiUsername, id);
        return localVarResp.getData();
    }

    /**
     * Get a single topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return ApiResponse&lt;GetTopic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTopic200Response> getTopicWithHttpInfo(String apiKey, String apiUsername, String id) throws ApiException {
        okhttp3.Call localVarCall = getTopicValidateBeforeCall(apiKey, apiUsername, id, null);
        Type localVarReturnType = new TypeToken<GetTopic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicAsync(String apiKey, String apiUsername, String id, final ApiCallback<GetTopic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopicValidateBeforeCall(apiKey, apiUsername, id, _callback);
        Type localVarReturnType = new TypeToken<GetTopic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopicByExternalId
     * @param externalId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicByExternalIdCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/external_id/{external_id}.json"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopicByExternalIdValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getTopicByExternalId(Async)");
        }

        return getTopicByExternalIdCall(externalId, _callback);

    }

    /**
     * Get topic by external_id
     * 
     * @param externalId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
     </table>
     */
    public void getTopicByExternalId(String externalId) throws ApiException {
        getTopicByExternalIdWithHttpInfo(externalId);
    }

    /**
     * Get topic by external_id
     * 
     * @param externalId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTopicByExternalIdWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = getTopicByExternalIdValidateBeforeCall(externalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get topic by external_id (asynchronously)
     * 
     * @param externalId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicByExternalIdAsync(String externalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopicByExternalIdValidateBeforeCall(externalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteToTopic
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param inviteToTopicRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteToTopicCall(String apiKey, String apiUsername, String id, InviteToTopicRequest inviteToTopicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteToTopicRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/invite.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteToTopicValidateBeforeCall(String apiKey, String apiUsername, String id, InviteToTopicRequest inviteToTopicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling inviteToTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling inviteToTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inviteToTopic(Async)");
        }

        return inviteToTopicCall(apiKey, apiUsername, id, inviteToTopicRequest, _callback);

    }

    /**
     * Invite to topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param inviteToTopicRequest  (optional)
     * @return InviteToTopic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public InviteToTopic200Response inviteToTopic(String apiKey, String apiUsername, String id, InviteToTopicRequest inviteToTopicRequest) throws ApiException {
        ApiResponse<InviteToTopic200Response> localVarResp = inviteToTopicWithHttpInfo(apiKey, apiUsername, id, inviteToTopicRequest);
        return localVarResp.getData();
    }

    /**
     * Invite to topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param inviteToTopicRequest  (optional)
     * @return ApiResponse&lt;InviteToTopic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InviteToTopic200Response> inviteToTopicWithHttpInfo(String apiKey, String apiUsername, String id, InviteToTopicRequest inviteToTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteToTopicValidateBeforeCall(apiKey, apiUsername, id, inviteToTopicRequest, null);
        Type localVarReturnType = new TypeToken<InviteToTopic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite to topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param inviteToTopicRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteToTopicAsync(String apiKey, String apiUsername, String id, InviteToTopicRequest inviteToTopicRequest, final ApiCallback<InviteToTopic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteToTopicValidateBeforeCall(apiKey, apiUsername, id, inviteToTopicRequest, _callback);
        Type localVarReturnType = new TypeToken<InviteToTopic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLatestTopics
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param order Enum: &#x60;default&#x60;, &#x60;created&#x60;, &#x60;activity&#x60;, &#x60;views&#x60;, &#x60;posts&#x60;, &#x60;category&#x60;, &#x60;likes&#x60;, &#x60;op_likes&#x60;, &#x60;posters&#x60; (optional)
     * @param ascending Defaults to &#x60;desc&#x60;, add &#x60;ascending&#x3D;true&#x60; to sort asc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLatestTopicsCall(String apiKey, String apiUsername, String order, String ascending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/latest.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLatestTopicsValidateBeforeCall(String apiKey, String apiUsername, String order, String ascending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling listLatestTopics(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling listLatestTopics(Async)");
        }

        return listLatestTopicsCall(apiKey, apiUsername, order, ascending, _callback);

    }

    /**
     * Get the latest topics
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param order Enum: &#x60;default&#x60;, &#x60;created&#x60;, &#x60;activity&#x60;, &#x60;views&#x60;, &#x60;posts&#x60;, &#x60;category&#x60;, &#x60;likes&#x60;, &#x60;op_likes&#x60;, &#x60;posters&#x60; (optional)
     * @param ascending Defaults to &#x60;desc&#x60;, add &#x60;ascending&#x3D;true&#x60; to sort asc (optional)
     * @return ListLatestTopics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ListLatestTopics200Response listLatestTopics(String apiKey, String apiUsername, String order, String ascending) throws ApiException {
        ApiResponse<ListLatestTopics200Response> localVarResp = listLatestTopicsWithHttpInfo(apiKey, apiUsername, order, ascending);
        return localVarResp.getData();
    }

    /**
     * Get the latest topics
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param order Enum: &#x60;default&#x60;, &#x60;created&#x60;, &#x60;activity&#x60;, &#x60;views&#x60;, &#x60;posts&#x60;, &#x60;category&#x60;, &#x60;likes&#x60;, &#x60;op_likes&#x60;, &#x60;posters&#x60; (optional)
     * @param ascending Defaults to &#x60;desc&#x60;, add &#x60;ascending&#x3D;true&#x60; to sort asc (optional)
     * @return ApiResponse&lt;ListLatestTopics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListLatestTopics200Response> listLatestTopicsWithHttpInfo(String apiKey, String apiUsername, String order, String ascending) throws ApiException {
        okhttp3.Call localVarCall = listLatestTopicsValidateBeforeCall(apiKey, apiUsername, order, ascending, null);
        Type localVarReturnType = new TypeToken<ListLatestTopics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest topics (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param order Enum: &#x60;default&#x60;, &#x60;created&#x60;, &#x60;activity&#x60;, &#x60;views&#x60;, &#x60;posts&#x60;, &#x60;category&#x60;, &#x60;likes&#x60;, &#x60;op_likes&#x60;, &#x60;posters&#x60; (optional)
     * @param ascending Defaults to &#x60;desc&#x60;, add &#x60;ascending&#x3D;true&#x60; to sort asc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLatestTopicsAsync(String apiKey, String apiUsername, String order, String ascending, final ApiCallback<ListLatestTopics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLatestTopicsValidateBeforeCall(apiKey, apiUsername, order, ascending, _callback);
        Type localVarReturnType = new TypeToken<ListLatestTopics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTopTopics
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param period Enum: &#x60;all&#x60;, &#x60;yearly&#x60;, &#x60;quarterly&#x60;, &#x60;monthly&#x60;, &#x60;weekly&#x60;, &#x60;daily&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTopTopicsCall(String apiKey, String apiUsername, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/top.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTopTopicsValidateBeforeCall(String apiKey, String apiUsername, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling listTopTopics(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling listTopTopics(Async)");
        }

        return listTopTopicsCall(apiKey, apiUsername, period, _callback);

    }

    /**
     * Get the top topics filtered by period
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param period Enum: &#x60;all&#x60;, &#x60;yearly&#x60;, &#x60;quarterly&#x60;, &#x60;monthly&#x60;, &#x60;weekly&#x60;, &#x60;daily&#x60; (optional)
     * @return ListTopTopics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ListTopTopics200Response listTopTopics(String apiKey, String apiUsername, String period) throws ApiException {
        ApiResponse<ListTopTopics200Response> localVarResp = listTopTopicsWithHttpInfo(apiKey, apiUsername, period);
        return localVarResp.getData();
    }

    /**
     * Get the top topics filtered by period
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param period Enum: &#x60;all&#x60;, &#x60;yearly&#x60;, &#x60;quarterly&#x60;, &#x60;monthly&#x60;, &#x60;weekly&#x60;, &#x60;daily&#x60; (optional)
     * @return ApiResponse&lt;ListTopTopics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTopTopics200Response> listTopTopicsWithHttpInfo(String apiKey, String apiUsername, String period) throws ApiException {
        okhttp3.Call localVarCall = listTopTopicsValidateBeforeCall(apiKey, apiUsername, period, null);
        Type localVarReturnType = new TypeToken<ListTopTopics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the top topics filtered by period (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param period Enum: &#x60;all&#x60;, &#x60;yearly&#x60;, &#x60;quarterly&#x60;, &#x60;monthly&#x60;, &#x60;weekly&#x60;, &#x60;daily&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTopTopicsAsync(String apiKey, String apiUsername, String period, final ApiCallback<ListTopTopics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTopTopicsValidateBeforeCall(apiKey, apiUsername, period, _callback);
        Type localVarReturnType = new TypeToken<ListTopTopics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTopic
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTopicCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTopicValidateBeforeCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling removeTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling removeTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeTopic(Async)");
        }

        return removeTopicCall(apiKey, apiUsername, id, _callback);

    }

    /**
     * Remove a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public void removeTopic(String apiKey, String apiUsername, String id) throws ApiException {
        removeTopicWithHttpInfo(apiKey, apiUsername, id);
    }

    /**
     * Remove a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeTopicWithHttpInfo(String apiKey, String apiUsername, String id) throws ApiException {
        okhttp3.Call localVarCall = removeTopicValidateBeforeCall(apiKey, apiUsername, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTopicAsync(String apiKey, String apiUsername, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTopicValidateBeforeCall(apiKey, apiUsername, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setNotificationLevel
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param setNotificationLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setNotificationLevelCall(String apiKey, String apiUsername, String id, SetNotificationLevelRequest setNotificationLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setNotificationLevelRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/notifications.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNotificationLevelValidateBeforeCall(String apiKey, String apiUsername, String id, SetNotificationLevelRequest setNotificationLevelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling setNotificationLevel(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling setNotificationLevel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setNotificationLevel(Async)");
        }

        return setNotificationLevelCall(apiKey, apiUsername, id, setNotificationLevelRequest, _callback);

    }

    /**
     * Set notification level
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param setNotificationLevelRequest  (optional)
     * @return UpdateGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroup200Response setNotificationLevel(String apiKey, String apiUsername, String id, SetNotificationLevelRequest setNotificationLevelRequest) throws ApiException {
        ApiResponse<UpdateGroup200Response> localVarResp = setNotificationLevelWithHttpInfo(apiKey, apiUsername, id, setNotificationLevelRequest);
        return localVarResp.getData();
    }

    /**
     * Set notification level
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param setNotificationLevelRequest  (optional)
     * @return ApiResponse&lt;UpdateGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGroup200Response> setNotificationLevelWithHttpInfo(String apiKey, String apiUsername, String id, SetNotificationLevelRequest setNotificationLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = setNotificationLevelValidateBeforeCall(apiKey, apiUsername, id, setNotificationLevelRequest, null);
        Type localVarReturnType = new TypeToken<UpdateGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set notification level (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param setNotificationLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setNotificationLevelAsync(String apiKey, String apiUsername, String id, SetNotificationLevelRequest setNotificationLevelRequest, final ApiCallback<UpdateGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNotificationLevelValidateBeforeCall(apiKey, apiUsername, id, setNotificationLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTopic
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicCall(String apiKey, String apiUsername, String id, UpdateTopicRequest updateTopicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTopicRequest;

        // create path and map variables
        String localVarPath = "/t/-/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicValidateBeforeCall(String apiKey, String apiUsername, String id, UpdateTopicRequest updateTopicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTopic(Async)");
        }

        return updateTopicCall(apiKey, apiUsername, id, updateTopicRequest, _callback);

    }

    /**
     * Update a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicRequest  (optional)
     * @return UpdateTopic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTopic200Response updateTopic(String apiKey, String apiUsername, String id, UpdateTopicRequest updateTopicRequest) throws ApiException {
        ApiResponse<UpdateTopic200Response> localVarResp = updateTopicWithHttpInfo(apiKey, apiUsername, id, updateTopicRequest);
        return localVarResp.getData();
    }

    /**
     * Update a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicRequest  (optional)
     * @return ApiResponse&lt;UpdateTopic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTopic200Response> updateTopicWithHttpInfo(String apiKey, String apiUsername, String id, UpdateTopicRequest updateTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTopicValidateBeforeCall(apiKey, apiUsername, id, updateTopicRequest, null);
        Type localVarReturnType = new TypeToken<UpdateTopic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicAsync(String apiKey, String apiUsername, String id, UpdateTopicRequest updateTopicRequest, final ApiCallback<UpdateTopic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicValidateBeforeCall(apiKey, apiUsername, id, updateTopicRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateTopic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTopicStatus
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicStatusRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicStatusCall(String apiKey, String apiUsername, String id, UpdateTopicStatusRequest updateTopicStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTopicStatusRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/status.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicStatusValidateBeforeCall(String apiKey, String apiUsername, String id, UpdateTopicStatusRequest updateTopicStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateTopicStatus(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateTopicStatus(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTopicStatus(Async)");
        }

        return updateTopicStatusCall(apiKey, apiUsername, id, updateTopicStatusRequest, _callback);

    }

    /**
     * Update the status of a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicStatusRequest  (optional)
     * @return UpdateTopicStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTopicStatus200Response updateTopicStatus(String apiKey, String apiUsername, String id, UpdateTopicStatusRequest updateTopicStatusRequest) throws ApiException {
        ApiResponse<UpdateTopicStatus200Response> localVarResp = updateTopicStatusWithHttpInfo(apiKey, apiUsername, id, updateTopicStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update the status of a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicStatusRequest  (optional)
     * @return ApiResponse&lt;UpdateTopicStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTopicStatus200Response> updateTopicStatusWithHttpInfo(String apiKey, String apiUsername, String id, UpdateTopicStatusRequest updateTopicStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTopicStatusValidateBeforeCall(apiKey, apiUsername, id, updateTopicStatusRequest, null);
        Type localVarReturnType = new TypeToken<UpdateTopicStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the status of a topic (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicStatusRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicStatusAsync(String apiKey, String apiUsername, String id, UpdateTopicStatusRequest updateTopicStatusRequest, final ApiCallback<UpdateTopicStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicStatusValidateBeforeCall(apiKey, apiUsername, id, updateTopicStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateTopicStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTopicTimestamp
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicTimestampRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicTimestampCall(String apiKey, String apiUsername, String id, UpdateTopicTimestampRequest updateTopicTimestampRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTopicTimestampRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/change-timestamp.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicTimestampValidateBeforeCall(String apiKey, String apiUsername, String id, UpdateTopicTimestampRequest updateTopicTimestampRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateTopicTimestamp(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateTopicTimestamp(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTopicTimestamp(Async)");
        }

        return updateTopicTimestampCall(apiKey, apiUsername, id, updateTopicTimestampRequest, _callback);

    }

    /**
     * Update topic timestamp
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicTimestampRequest  (optional)
     * @return UpdateGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroup200Response updateTopicTimestamp(String apiKey, String apiUsername, String id, UpdateTopicTimestampRequest updateTopicTimestampRequest) throws ApiException {
        ApiResponse<UpdateGroup200Response> localVarResp = updateTopicTimestampWithHttpInfo(apiKey, apiUsername, id, updateTopicTimestampRequest);
        return localVarResp.getData();
    }

    /**
     * Update topic timestamp
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicTimestampRequest  (optional)
     * @return ApiResponse&lt;UpdateGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGroup200Response> updateTopicTimestampWithHttpInfo(String apiKey, String apiUsername, String id, UpdateTopicTimestampRequest updateTopicTimestampRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTopicTimestampValidateBeforeCall(apiKey, apiUsername, id, updateTopicTimestampRequest, null);
        Type localVarReturnType = new TypeToken<UpdateGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update topic timestamp (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param updateTopicTimestampRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicTimestampAsync(String apiKey, String apiUsername, String id, UpdateTopicTimestampRequest updateTopicTimestampRequest, final ApiCallback<UpdateGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicTimestampValidateBeforeCall(apiKey, apiUsername, id, updateTopicTimestampRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
