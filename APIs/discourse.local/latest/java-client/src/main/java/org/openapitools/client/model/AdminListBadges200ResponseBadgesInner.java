/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdminListBadges200ResponseBadgesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminListBadges200ResponseBadgesInner {
  public static final String SERIALIZED_NAME_ALLOW_TITLE = "allow_title";
  @SerializedName(SERIALIZED_NAME_ALLOW_TITLE)
  private Boolean allowTitle;

  public static final String SERIALIZED_NAME_AUTO_REVOKE = "auto_revoke";
  @SerializedName(SERIALIZED_NAME_AUTO_REVOKE)
  private Boolean autoRevoke;

  public static final String SERIALIZED_NAME_BADGE_GROUPING_ID = "badge_grouping_id";
  @SerializedName(SERIALIZED_NAME_BADGE_GROUPING_ID)
  private Integer badgeGroupingId;

  public static final String SERIALIZED_NAME_BADGE_TYPE_ID = "badge_type_id";
  @SerializedName(SERIALIZED_NAME_BADGE_TYPE_ID)
  private Integer badgeTypeId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_GRANT_COUNT = "grant_count";
  @SerializedName(SERIALIZED_NAME_GRANT_COUNT)
  private Integer grantCount;

  public static final String SERIALIZED_NAME_I18N_NAME = "i18n_name";
  @SerializedName(SERIALIZED_NAME_I18N_NAME)
  private String i18nName;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LISTABLE = "listable";
  @SerializedName(SERIALIZED_NAME_LISTABLE)
  private Boolean listable;

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "long_description";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_MANUALLY_GRANTABLE = "manually_grantable";
  @SerializedName(SERIALIZED_NAME_MANUALLY_GRANTABLE)
  private Boolean manuallyGrantable;

  public static final String SERIALIZED_NAME_MULTIPLE_GRANT = "multiple_grant";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_GRANT)
  private Boolean multipleGrant;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SHOW_POSTS = "show_posts";
  @SerializedName(SERIALIZED_NAME_SHOW_POSTS)
  private Boolean showPosts;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_TARGET_POSTS = "target_posts";
  @SerializedName(SERIALIZED_NAME_TARGET_POSTS)
  private Boolean targetPosts;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private Integer trigger;

  public AdminListBadges200ResponseBadgesInner() {
  }

  public AdminListBadges200ResponseBadgesInner allowTitle(Boolean allowTitle) {
    this.allowTitle = allowTitle;
    return this;
  }

  /**
   * Get allowTitle
   * @return allowTitle
   */
  @javax.annotation.Nonnull
  public Boolean getAllowTitle() {
    return allowTitle;
  }

  public void setAllowTitle(Boolean allowTitle) {
    this.allowTitle = allowTitle;
  }


  public AdminListBadges200ResponseBadgesInner autoRevoke(Boolean autoRevoke) {
    this.autoRevoke = autoRevoke;
    return this;
  }

  /**
   * Get autoRevoke
   * @return autoRevoke
   */
  @javax.annotation.Nonnull
  public Boolean getAutoRevoke() {
    return autoRevoke;
  }

  public void setAutoRevoke(Boolean autoRevoke) {
    this.autoRevoke = autoRevoke;
  }


  public AdminListBadges200ResponseBadgesInner badgeGroupingId(Integer badgeGroupingId) {
    this.badgeGroupingId = badgeGroupingId;
    return this;
  }

  /**
   * Get badgeGroupingId
   * @return badgeGroupingId
   */
  @javax.annotation.Nonnull
  public Integer getBadgeGroupingId() {
    return badgeGroupingId;
  }

  public void setBadgeGroupingId(Integer badgeGroupingId) {
    this.badgeGroupingId = badgeGroupingId;
  }


  public AdminListBadges200ResponseBadgesInner badgeTypeId(Integer badgeTypeId) {
    this.badgeTypeId = badgeTypeId;
    return this;
  }

  /**
   * Get badgeTypeId
   * @return badgeTypeId
   */
  @javax.annotation.Nonnull
  public Integer getBadgeTypeId() {
    return badgeTypeId;
  }

  public void setBadgeTypeId(Integer badgeTypeId) {
    this.badgeTypeId = badgeTypeId;
  }


  public AdminListBadges200ResponseBadgesInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AdminListBadges200ResponseBadgesInner enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AdminListBadges200ResponseBadgesInner grantCount(Integer grantCount) {
    this.grantCount = grantCount;
    return this;
  }

  /**
   * Get grantCount
   * @return grantCount
   */
  @javax.annotation.Nonnull
  public Integer getGrantCount() {
    return grantCount;
  }

  public void setGrantCount(Integer grantCount) {
    this.grantCount = grantCount;
  }


  public AdminListBadges200ResponseBadgesInner i18nName(String i18nName) {
    this.i18nName = i18nName;
    return this;
  }

  /**
   * Get i18nName
   * @return i18nName
   */
  @javax.annotation.Nullable
  public String getI18nName() {
    return i18nName;
  }

  public void setI18nName(String i18nName) {
    this.i18nName = i18nName;
  }


  public AdminListBadges200ResponseBadgesInner icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nonnull
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public AdminListBadges200ResponseBadgesInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public AdminListBadges200ResponseBadgesInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public AdminListBadges200ResponseBadgesInner listable(Boolean listable) {
    this.listable = listable;
    return this;
  }

  /**
   * Get listable
   * @return listable
   */
  @javax.annotation.Nonnull
  public Boolean getListable() {
    return listable;
  }

  public void setListable(Boolean listable) {
    this.listable = listable;
  }


  public AdminListBadges200ResponseBadgesInner longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

  /**
   * Get longDescription
   * @return longDescription
   */
  @javax.annotation.Nonnull
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public AdminListBadges200ResponseBadgesInner manuallyGrantable(Boolean manuallyGrantable) {
    this.manuallyGrantable = manuallyGrantable;
    return this;
  }

  /**
   * Get manuallyGrantable
   * @return manuallyGrantable
   */
  @javax.annotation.Nonnull
  public Boolean getManuallyGrantable() {
    return manuallyGrantable;
  }

  public void setManuallyGrantable(Boolean manuallyGrantable) {
    this.manuallyGrantable = manuallyGrantable;
  }


  public AdminListBadges200ResponseBadgesInner multipleGrant(Boolean multipleGrant) {
    this.multipleGrant = multipleGrant;
    return this;
  }

  /**
   * Get multipleGrant
   * @return multipleGrant
   */
  @javax.annotation.Nonnull
  public Boolean getMultipleGrant() {
    return multipleGrant;
  }

  public void setMultipleGrant(Boolean multipleGrant) {
    this.multipleGrant = multipleGrant;
  }


  public AdminListBadges200ResponseBadgesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdminListBadges200ResponseBadgesInner query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public AdminListBadges200ResponseBadgesInner showPosts(Boolean showPosts) {
    this.showPosts = showPosts;
    return this;
  }

  /**
   * Get showPosts
   * @return showPosts
   */
  @javax.annotation.Nonnull
  public Boolean getShowPosts() {
    return showPosts;
  }

  public void setShowPosts(Boolean showPosts) {
    this.showPosts = showPosts;
  }


  public AdminListBadges200ResponseBadgesInner slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public AdminListBadges200ResponseBadgesInner system(Boolean system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nonnull
  public Boolean getSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }


  public AdminListBadges200ResponseBadgesInner targetPosts(Boolean targetPosts) {
    this.targetPosts = targetPosts;
    return this;
  }

  /**
   * Get targetPosts
   * @return targetPosts
   */
  @javax.annotation.Nonnull
  public Boolean getTargetPosts() {
    return targetPosts;
  }

  public void setTargetPosts(Boolean targetPosts) {
    this.targetPosts = targetPosts;
  }


  public AdminListBadges200ResponseBadgesInner trigger(Integer trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nonnull
  public Integer getTrigger() {
    return trigger;
  }

  public void setTrigger(Integer trigger) {
    this.trigger = trigger;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AdminListBadges200ResponseBadgesInner instance itself
   */
  public AdminListBadges200ResponseBadgesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminListBadges200ResponseBadgesInner adminListBadges200ResponseBadgesInner = (AdminListBadges200ResponseBadgesInner) o;
    return Objects.equals(this.allowTitle, adminListBadges200ResponseBadgesInner.allowTitle) &&
        Objects.equals(this.autoRevoke, adminListBadges200ResponseBadgesInner.autoRevoke) &&
        Objects.equals(this.badgeGroupingId, adminListBadges200ResponseBadgesInner.badgeGroupingId) &&
        Objects.equals(this.badgeTypeId, adminListBadges200ResponseBadgesInner.badgeTypeId) &&
        Objects.equals(this.description, adminListBadges200ResponseBadgesInner.description) &&
        Objects.equals(this.enabled, adminListBadges200ResponseBadgesInner.enabled) &&
        Objects.equals(this.grantCount, adminListBadges200ResponseBadgesInner.grantCount) &&
        Objects.equals(this.i18nName, adminListBadges200ResponseBadgesInner.i18nName) &&
        Objects.equals(this.icon, adminListBadges200ResponseBadgesInner.icon) &&
        Objects.equals(this.id, adminListBadges200ResponseBadgesInner.id) &&
        Objects.equals(this.imageUrl, adminListBadges200ResponseBadgesInner.imageUrl) &&
        Objects.equals(this.listable, adminListBadges200ResponseBadgesInner.listable) &&
        Objects.equals(this.longDescription, adminListBadges200ResponseBadgesInner.longDescription) &&
        Objects.equals(this.manuallyGrantable, adminListBadges200ResponseBadgesInner.manuallyGrantable) &&
        Objects.equals(this.multipleGrant, adminListBadges200ResponseBadgesInner.multipleGrant) &&
        Objects.equals(this.name, adminListBadges200ResponseBadgesInner.name) &&
        Objects.equals(this.query, adminListBadges200ResponseBadgesInner.query) &&
        Objects.equals(this.showPosts, adminListBadges200ResponseBadgesInner.showPosts) &&
        Objects.equals(this.slug, adminListBadges200ResponseBadgesInner.slug) &&
        Objects.equals(this.system, adminListBadges200ResponseBadgesInner.system) &&
        Objects.equals(this.targetPosts, adminListBadges200ResponseBadgesInner.targetPosts) &&
        Objects.equals(this.trigger, adminListBadges200ResponseBadgesInner.trigger)&&
        Objects.equals(this.additionalProperties, adminListBadges200ResponseBadgesInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowTitle, autoRevoke, badgeGroupingId, badgeTypeId, description, enabled, grantCount, i18nName, icon, id, imageUrl, listable, longDescription, manuallyGrantable, multipleGrant, name, query, showPosts, slug, system, targetPosts, trigger, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminListBadges200ResponseBadgesInner {\n");
    sb.append("    allowTitle: ").append(toIndentedString(allowTitle)).append("\n");
    sb.append("    autoRevoke: ").append(toIndentedString(autoRevoke)).append("\n");
    sb.append("    badgeGroupingId: ").append(toIndentedString(badgeGroupingId)).append("\n");
    sb.append("    badgeTypeId: ").append(toIndentedString(badgeTypeId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    grantCount: ").append(toIndentedString(grantCount)).append("\n");
    sb.append("    i18nName: ").append(toIndentedString(i18nName)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    listable: ").append(toIndentedString(listable)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    manuallyGrantable: ").append(toIndentedString(manuallyGrantable)).append("\n");
    sb.append("    multipleGrant: ").append(toIndentedString(multipleGrant)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    showPosts: ").append(toIndentedString(showPosts)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    targetPosts: ").append(toIndentedString(targetPosts)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_title");
    openapiFields.add("auto_revoke");
    openapiFields.add("badge_grouping_id");
    openapiFields.add("badge_type_id");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("grant_count");
    openapiFields.add("i18n_name");
    openapiFields.add("icon");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("listable");
    openapiFields.add("long_description");
    openapiFields.add("manually_grantable");
    openapiFields.add("multiple_grant");
    openapiFields.add("name");
    openapiFields.add("query");
    openapiFields.add("show_posts");
    openapiFields.add("slug");
    openapiFields.add("system");
    openapiFields.add("target_posts");
    openapiFields.add("trigger");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allow_title");
    openapiRequiredFields.add("auto_revoke");
    openapiRequiredFields.add("badge_grouping_id");
    openapiRequiredFields.add("badge_type_id");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("grant_count");
    openapiRequiredFields.add("icon");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("image_url");
    openapiRequiredFields.add("listable");
    openapiRequiredFields.add("long_description");
    openapiRequiredFields.add("manually_grantable");
    openapiRequiredFields.add("multiple_grant");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("query");
    openapiRequiredFields.add("show_posts");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("system");
    openapiRequiredFields.add("target_posts");
    openapiRequiredFields.add("trigger");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminListBadges200ResponseBadgesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminListBadges200ResponseBadgesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminListBadges200ResponseBadgesInner is not found in the empty JSON string", AdminListBadges200ResponseBadgesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdminListBadges200ResponseBadgesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("i18n_name") != null && !jsonObj.get("i18n_name").isJsonNull()) && !jsonObj.get("i18n_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i18n_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i18n_name").toString()));
      }
      if (!jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("long_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `long_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("long_description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminListBadges200ResponseBadgesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminListBadges200ResponseBadgesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminListBadges200ResponseBadgesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminListBadges200ResponseBadgesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminListBadges200ResponseBadgesInner>() {
           @Override
           public void write(JsonWriter out, AdminListBadges200ResponseBadgesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminListBadges200ResponseBadgesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AdminListBadges200ResponseBadgesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminListBadges200ResponseBadgesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminListBadges200ResponseBadgesInner
   * @throws IOException if the JSON string is invalid with respect to AdminListBadges200ResponseBadgesInner
   */
  public static AdminListBadges200ResponseBadgesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminListBadges200ResponseBadgesInner.class);
  }

  /**
   * Convert an instance of AdminListBadges200ResponseBadgesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

