/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateTopicPostPM200Response;
import org.openapitools.client.model.CreateTopicPostPMRequest;
import org.openapitools.client.model.DeletePostRequest;
import org.openapitools.client.model.GetPost200Response;
import org.openapitools.client.model.ListPosts200Response;
import org.openapitools.client.model.LockPost200Response;
import org.openapitools.client.model.LockPostRequest;
import org.openapitools.client.model.PerformPostAction200Response;
import org.openapitools.client.model.PerformPostActionRequest;
import org.openapitools.client.model.PostReplies200ResponseInner;
import java.util.Set;
import org.openapitools.client.model.UpdatePost200Response;
import org.openapitools.client.model.UpdatePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTopicPostPM
     * @param createTopicPostPMRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicPostPMCall(CreateTopicPostPMRequest createTopicPostPMRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTopicPostPMRequest;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicPostPMValidateBeforeCall(CreateTopicPostPMRequest createTopicPostPMRequest, final ApiCallback _callback) throws ApiException {
        return createTopicPostPMCall(createTopicPostPMRequest, _callback);

    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @param createTopicPostPMRequest  (optional)
     * @return CreateTopicPostPM200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicPostPM200Response createTopicPostPM(CreateTopicPostPMRequest createTopicPostPMRequest) throws ApiException {
        ApiResponse<CreateTopicPostPM200Response> localVarResp = createTopicPostPMWithHttpInfo(createTopicPostPMRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @param createTopicPostPMRequest  (optional)
     * @return ApiResponse&lt;CreateTopicPostPM200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTopicPostPM200Response> createTopicPostPMWithHttpInfo(CreateTopicPostPMRequest createTopicPostPMRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicPostPMValidateBeforeCall(createTopicPostPMRequest, null);
        Type localVarReturnType = new TypeToken<CreateTopicPostPM200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new topic, a new post, or a private message (asynchronously)
     * 
     * @param createTopicPostPMRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicPostPMAsync(CreateTopicPostPMRequest createTopicPostPMRequest, final ApiCallback<CreateTopicPostPM200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicPostPMValidateBeforeCall(createTopicPostPMRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTopicPostPM200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePost
     * @param id  (required)
     * @param deletePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePostCall(Integer id, DeletePostRequest deletePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePostRequest;

        // create path and map variables
        String localVarPath = "/posts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePostValidateBeforeCall(Integer id, DeletePostRequest deletePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePost(Async)");
        }

        return deletePostCall(id, deletePostRequest, _callback);

    }

    /**
     * delete a single post
     * 
     * @param id  (required)
     * @param deletePostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public void deletePost(Integer id, DeletePostRequest deletePostRequest) throws ApiException {
        deletePostWithHttpInfo(id, deletePostRequest);
    }

    /**
     * delete a single post
     * 
     * @param id  (required)
     * @param deletePostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePostWithHttpInfo(Integer id, DeletePostRequest deletePostRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePostValidateBeforeCall(id, deletePostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete a single post (asynchronously)
     * 
     * @param id  (required)
     * @param deletePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePostAsync(Integer id, DeletePostRequest deletePostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePostValidateBeforeCall(id, deletePostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPost
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPost(Async)");
        }

        return getPostCall(id, _callback);

    }

    /**
     * Retrieve a single post
     * This endpoint can be used to get the number of likes on a post using the &#x60;actions_summary&#x60; property in the response. &#x60;actions_summary&#x60; responses with the id of &#x60;2&#x60; signify a &#x60;like&#x60;. If there are no &#x60;actions_summary&#x60; items with the id of &#x60;2&#x60;, that means there are 0 likes. Other ids likely refer to various different flag types. 
     * @param id  (required)
     * @return GetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
     </table>
     */
    public GetPost200Response getPost(String id) throws ApiException {
        ApiResponse<GetPost200Response> localVarResp = getPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single post
     * This endpoint can be used to get the number of likes on a post using the &#x60;actions_summary&#x60; property in the response. &#x60;actions_summary&#x60; responses with the id of &#x60;2&#x60; signify a &#x60;like&#x60;. If there are no &#x60;actions_summary&#x60; items with the id of &#x60;2&#x60;, that means there are 0 likes. Other ids likely refer to various different flag types. 
     * @param id  (required)
     * @return ApiResponse&lt;GetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPost200Response> getPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single post (asynchronously)
     * This endpoint can be used to get the number of likes on a post using the &#x60;actions_summary&#x60; property in the response. &#x60;actions_summary&#x60; responses with the id of &#x60;2&#x60; signify a &#x60;like&#x60;. If there are no &#x60;actions_summary&#x60; items with the id of &#x60;2&#x60;, that means there are 0 likes. Other ids likely refer to various different flag types. 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostAsync(String id, final ApiCallback<GetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPosts
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param before Load posts with an id lower than this value. Useful for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPostsCall(String apiKey, String apiUsername, String before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPostsValidateBeforeCall(String apiKey, String apiUsername, String before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling listPosts(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling listPosts(Async)");
        }

        return listPostsCall(apiKey, apiUsername, before, _callback);

    }

    /**
     * List latest posts across topics
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param before Load posts with an id lower than this value. Useful for pagination. (optional)
     * @return ListPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
     </table>
     */
    public ListPosts200Response listPosts(String apiKey, String apiUsername, String before) throws ApiException {
        ApiResponse<ListPosts200Response> localVarResp = listPostsWithHttpInfo(apiKey, apiUsername, before);
        return localVarResp.getData();
    }

    /**
     * List latest posts across topics
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param before Load posts with an id lower than this value. Useful for pagination. (optional)
     * @return ApiResponse&lt;ListPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPosts200Response> listPostsWithHttpInfo(String apiKey, String apiUsername, String before) throws ApiException {
        okhttp3.Call localVarCall = listPostsValidateBeforeCall(apiKey, apiUsername, before, null);
        Type localVarReturnType = new TypeToken<ListPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List latest posts across topics (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param before Load posts with an id lower than this value. Useful for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPostsAsync(String apiKey, String apiUsername, String before, final ApiCallback<ListPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPostsValidateBeforeCall(apiKey, apiUsername, before, _callback);
        Type localVarReturnType = new TypeToken<ListPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockPost
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param lockPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockPostCall(String apiKey, String apiUsername, String id, LockPostRequest lockPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lockPostRequest;

        // create path and map variables
        String localVarPath = "/posts/{id}/locked.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockPostValidateBeforeCall(String apiKey, String apiUsername, String id, LockPostRequest lockPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling lockPost(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling lockPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lockPost(Async)");
        }

        return lockPostCall(apiKey, apiUsername, id, lockPostRequest, _callback);

    }

    /**
     * Lock a post from being edited
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param lockPostRequest  (optional)
     * @return LockPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public LockPost200Response lockPost(String apiKey, String apiUsername, String id, LockPostRequest lockPostRequest) throws ApiException {
        ApiResponse<LockPost200Response> localVarResp = lockPostWithHttpInfo(apiKey, apiUsername, id, lockPostRequest);
        return localVarResp.getData();
    }

    /**
     * Lock a post from being edited
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param lockPostRequest  (optional)
     * @return ApiResponse&lt;LockPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LockPost200Response> lockPostWithHttpInfo(String apiKey, String apiUsername, String id, LockPostRequest lockPostRequest) throws ApiException {
        okhttp3.Call localVarCall = lockPostValidateBeforeCall(apiKey, apiUsername, id, lockPostRequest, null);
        Type localVarReturnType = new TypeToken<LockPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lock a post from being edited (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @param lockPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockPostAsync(String apiKey, String apiUsername, String id, LockPostRequest lockPostRequest, final ApiCallback<LockPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockPostValidateBeforeCall(apiKey, apiUsername, id, lockPostRequest, _callback);
        Type localVarReturnType = new TypeToken<LockPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performPostAction
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param performPostActionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPostActionCall(String apiKey, String apiUsername, PerformPostActionRequest performPostActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = performPostActionRequest;

        // create path and map variables
        String localVarPath = "/post_actions.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performPostActionValidateBeforeCall(String apiKey, String apiUsername, PerformPostActionRequest performPostActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling performPostAction(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling performPostAction(Async)");
        }

        return performPostActionCall(apiKey, apiUsername, performPostActionRequest, _callback);

    }

    /**
     * Like a post and other actions
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param performPostActionRequest  (optional)
     * @return PerformPostAction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public PerformPostAction200Response performPostAction(String apiKey, String apiUsername, PerformPostActionRequest performPostActionRequest) throws ApiException {
        ApiResponse<PerformPostAction200Response> localVarResp = performPostActionWithHttpInfo(apiKey, apiUsername, performPostActionRequest);
        return localVarResp.getData();
    }

    /**
     * Like a post and other actions
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param performPostActionRequest  (optional)
     * @return ApiResponse&lt;PerformPostAction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PerformPostAction200Response> performPostActionWithHttpInfo(String apiKey, String apiUsername, PerformPostActionRequest performPostActionRequest) throws ApiException {
        okhttp3.Call localVarCall = performPostActionValidateBeforeCall(apiKey, apiUsername, performPostActionRequest, null);
        Type localVarReturnType = new TypeToken<PerformPostAction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Like a post and other actions (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param performPostActionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPostActionAsync(String apiKey, String apiUsername, PerformPostActionRequest performPostActionRequest, final ApiCallback<PerformPostAction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = performPostActionValidateBeforeCall(apiKey, apiUsername, performPostActionRequest, _callback);
        Type localVarReturnType = new TypeToken<PerformPostAction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postReplies
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRepliesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{id}/replies.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postRepliesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postReplies(Async)");
        }

        return postRepliesCall(id, _callback);

    }

    /**
     * List replies to a post
     * 
     * @param id  (required)
     * @return Set&lt;PostReplies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
     </table>
     */
    public Set<PostReplies200ResponseInner> postReplies(String id) throws ApiException {
        ApiResponse<Set<PostReplies200ResponseInner>> localVarResp = postRepliesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List replies to a post
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Set&lt;PostReplies200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<PostReplies200ResponseInner>> postRepliesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postRepliesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Set<PostReplies200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List replies to a post (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRepliesAsync(String id, final ApiCallback<Set<PostReplies200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postRepliesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Set<PostReplies200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePost
     * @param id  (required)
     * @param updatePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostCall(String id, UpdatePostRequest updatePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePostRequest;

        // create path and map variables
        String localVarPath = "/posts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePostValidateBeforeCall(String id, UpdatePostRequest updatePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePost(Async)");
        }

        return updatePostCall(id, updatePostRequest, _callback);

    }

    /**
     * Update a single post
     * 
     * @param id  (required)
     * @param updatePostRequest  (optional)
     * @return UpdatePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePost200Response updatePost(String id, UpdatePostRequest updatePostRequest) throws ApiException {
        ApiResponse<UpdatePost200Response> localVarResp = updatePostWithHttpInfo(id, updatePostRequest);
        return localVarResp.getData();
    }

    /**
     * Update a single post
     * 
     * @param id  (required)
     * @param updatePostRequest  (optional)
     * @return ApiResponse&lt;UpdatePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePost200Response> updatePostWithHttpInfo(String id, UpdatePostRequest updatePostRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePostValidateBeforeCall(id, updatePostRequest, null);
        Type localVarReturnType = new TypeToken<UpdatePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a single post (asynchronously)
     * 
     * @param id  (required)
     * @param updatePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostAsync(String id, UpdatePostRequest updatePostRequest, final ApiCallback<UpdatePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePostValidateBeforeCall(id, updatePostRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdatePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
