/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListTagGroups200ResponseTagGroupsInnerPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTagGroups200ResponseTagGroupsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTagGroups200ResponseTagGroupsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONE_PER_TOPIC = "one_per_topic";
  @SerializedName(SERIALIZED_NAME_ONE_PER_TOPIC)
  private Boolean onePerTopic;

  public static final String SERIALIZED_NAME_PARENT_TAG_NAME = "parent_tag_name";
  @SerializedName(SERIALIZED_NAME_PARENT_TAG_NAME)
  private List<Object> parentTagName = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private ListTagGroups200ResponseTagGroupsInnerPermissions permissions;

  public static final String SERIALIZED_NAME_TAG_NAMES = "tag_names";
  @SerializedName(SERIALIZED_NAME_TAG_NAMES)
  private List<Object> tagNames = new ArrayList<>();

  public ListTagGroups200ResponseTagGroupsInner() {
  }

  public ListTagGroups200ResponseTagGroupsInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ListTagGroups200ResponseTagGroupsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListTagGroups200ResponseTagGroupsInner onePerTopic(Boolean onePerTopic) {
    this.onePerTopic = onePerTopic;
    return this;
  }

  /**
   * Get onePerTopic
   * @return onePerTopic
   */
  @javax.annotation.Nullable
  public Boolean getOnePerTopic() {
    return onePerTopic;
  }

  public void setOnePerTopic(Boolean onePerTopic) {
    this.onePerTopic = onePerTopic;
  }


  public ListTagGroups200ResponseTagGroupsInner parentTagName(List<Object> parentTagName) {
    this.parentTagName = parentTagName;
    return this;
  }

  public ListTagGroups200ResponseTagGroupsInner addParentTagNameItem(Object parentTagNameItem) {
    if (this.parentTagName == null) {
      this.parentTagName = new ArrayList<>();
    }
    this.parentTagName.add(parentTagNameItem);
    return this;
  }

  /**
   * Get parentTagName
   * @return parentTagName
   */
  @javax.annotation.Nullable
  public List<Object> getParentTagName() {
    return parentTagName;
  }

  public void setParentTagName(List<Object> parentTagName) {
    this.parentTagName = parentTagName;
  }


  public ListTagGroups200ResponseTagGroupsInner permissions(ListTagGroups200ResponseTagGroupsInnerPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public ListTagGroups200ResponseTagGroupsInnerPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(ListTagGroups200ResponseTagGroupsInnerPermissions permissions) {
    this.permissions = permissions;
  }


  public ListTagGroups200ResponseTagGroupsInner tagNames(List<Object> tagNames) {
    this.tagNames = tagNames;
    return this;
  }

  public ListTagGroups200ResponseTagGroupsInner addTagNamesItem(Object tagNamesItem) {
    if (this.tagNames == null) {
      this.tagNames = new ArrayList<>();
    }
    this.tagNames.add(tagNamesItem);
    return this;
  }

  /**
   * Get tagNames
   * @return tagNames
   */
  @javax.annotation.Nullable
  public List<Object> getTagNames() {
    return tagNames;
  }

  public void setTagNames(List<Object> tagNames) {
    this.tagNames = tagNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTagGroups200ResponseTagGroupsInner listTagGroups200ResponseTagGroupsInner = (ListTagGroups200ResponseTagGroupsInner) o;
    return Objects.equals(this.id, listTagGroups200ResponseTagGroupsInner.id) &&
        Objects.equals(this.name, listTagGroups200ResponseTagGroupsInner.name) &&
        Objects.equals(this.onePerTopic, listTagGroups200ResponseTagGroupsInner.onePerTopic) &&
        Objects.equals(this.parentTagName, listTagGroups200ResponseTagGroupsInner.parentTagName) &&
        Objects.equals(this.permissions, listTagGroups200ResponseTagGroupsInner.permissions) &&
        Objects.equals(this.tagNames, listTagGroups200ResponseTagGroupsInner.tagNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, onePerTopic, parentTagName, permissions, tagNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTagGroups200ResponseTagGroupsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onePerTopic: ").append(toIndentedString(onePerTopic)).append("\n");
    sb.append("    parentTagName: ").append(toIndentedString(parentTagName)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    tagNames: ").append(toIndentedString(tagNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("one_per_topic");
    openapiFields.add("parent_tag_name");
    openapiFields.add("permissions");
    openapiFields.add("tag_names");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTagGroups200ResponseTagGroupsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTagGroups200ResponseTagGroupsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTagGroups200ResponseTagGroupsInner is not found in the empty JSON string", ListTagGroups200ResponseTagGroupsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTagGroups200ResponseTagGroupsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTagGroups200ResponseTagGroupsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parent_tag_name") != null && !jsonObj.get("parent_tag_name").isJsonNull() && !jsonObj.get("parent_tag_name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_tag_name` to be an array in the JSON string but got `%s`", jsonObj.get("parent_tag_name").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        ListTagGroups200ResponseTagGroupsInnerPermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag_names") != null && !jsonObj.get("tag_names").isJsonNull() && !jsonObj.get("tag_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_names` to be an array in the JSON string but got `%s`", jsonObj.get("tag_names").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTagGroups200ResponseTagGroupsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTagGroups200ResponseTagGroupsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTagGroups200ResponseTagGroupsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTagGroups200ResponseTagGroupsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTagGroups200ResponseTagGroupsInner>() {
           @Override
           public void write(JsonWriter out, ListTagGroups200ResponseTagGroupsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTagGroups200ResponseTagGroupsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTagGroups200ResponseTagGroupsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTagGroups200ResponseTagGroupsInner
   * @throws IOException if the JSON string is invalid with respect to ListTagGroups200ResponseTagGroupsInner
   */
  public static ListTagGroups200ResponseTagGroupsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTagGroups200ResponseTagGroupsInner.class);
  }

  /**
   * Convert an instance of ListTagGroups200ResponseTagGroupsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

