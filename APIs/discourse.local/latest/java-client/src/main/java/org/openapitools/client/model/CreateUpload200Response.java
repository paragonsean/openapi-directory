/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUpload200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUpload200Response {
  public static final String SERIALIZED_NAME_DOMINANT_COLOR = "dominant_color";
  @SerializedName(SERIALIZED_NAME_DOMINANT_COLOR)
  private String dominantColor;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private Integer filesize;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HUMAN_FILESIZE = "human_filesize";
  @SerializedName(SERIALIZED_NAME_HUMAN_FILESIZE)
  private String humanFilesize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ORIGINAL_FILENAME = "original_filename";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILENAME)
  private String originalFilename;

  public static final String SERIALIZED_NAME_RETAIN_HOURS = "retain_hours";
  @SerializedName(SERIALIZED_NAME_RETAIN_HOURS)
  private String retainHours;

  public static final String SERIALIZED_NAME_SHORT_PATH = "short_path";
  @SerializedName(SERIALIZED_NAME_SHORT_PATH)
  private String shortPath;

  public static final String SERIALIZED_NAME_SHORT_URL = "short_url";
  @SerializedName(SERIALIZED_NAME_SHORT_URL)
  private String shortUrl;

  public static final String SERIALIZED_NAME_THUMBNAIL_HEIGHT = "thumbnail_height";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HEIGHT)
  private Integer thumbnailHeight;

  public static final String SERIALIZED_NAME_THUMBNAIL_WIDTH = "thumbnail_width";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_WIDTH)
  private Integer thumbnailWidth;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public CreateUpload200Response() {
  }

  public CreateUpload200Response dominantColor(String dominantColor) {
    this.dominantColor = dominantColor;
    return this;
  }

  /**
   * Get dominantColor
   * @return dominantColor
   */
  @javax.annotation.Nullable
  public String getDominantColor() {
    return dominantColor;
  }

  public void setDominantColor(String dominantColor) {
    this.dominantColor = dominantColor;
  }


  public CreateUpload200Response extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Get extension
   * @return extension
   */
  @javax.annotation.Nonnull
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public CreateUpload200Response filesize(Integer filesize) {
    this.filesize = filesize;
    return this;
  }

  /**
   * Get filesize
   * @return filesize
   */
  @javax.annotation.Nonnull
  public Integer getFilesize() {
    return filesize;
  }

  public void setFilesize(Integer filesize) {
    this.filesize = filesize;
  }


  public CreateUpload200Response height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nonnull
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public CreateUpload200Response humanFilesize(String humanFilesize) {
    this.humanFilesize = humanFilesize;
    return this;
  }

  /**
   * Get humanFilesize
   * @return humanFilesize
   */
  @javax.annotation.Nonnull
  public String getHumanFilesize() {
    return humanFilesize;
  }

  public void setHumanFilesize(String humanFilesize) {
    this.humanFilesize = humanFilesize;
  }


  public CreateUpload200Response id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CreateUpload200Response originalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
    return this;
  }

  /**
   * Get originalFilename
   * @return originalFilename
   */
  @javax.annotation.Nonnull
  public String getOriginalFilename() {
    return originalFilename;
  }

  public void setOriginalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
  }


  public CreateUpload200Response retainHours(String retainHours) {
    this.retainHours = retainHours;
    return this;
  }

  /**
   * Get retainHours
   * @return retainHours
   */
  @javax.annotation.Nullable
  public String getRetainHours() {
    return retainHours;
  }

  public void setRetainHours(String retainHours) {
    this.retainHours = retainHours;
  }


  public CreateUpload200Response shortPath(String shortPath) {
    this.shortPath = shortPath;
    return this;
  }

  /**
   * Get shortPath
   * @return shortPath
   */
  @javax.annotation.Nonnull
  public String getShortPath() {
    return shortPath;
  }

  public void setShortPath(String shortPath) {
    this.shortPath = shortPath;
  }


  public CreateUpload200Response shortUrl(String shortUrl) {
    this.shortUrl = shortUrl;
    return this;
  }

  /**
   * Get shortUrl
   * @return shortUrl
   */
  @javax.annotation.Nonnull
  public String getShortUrl() {
    return shortUrl;
  }

  public void setShortUrl(String shortUrl) {
    this.shortUrl = shortUrl;
  }


  public CreateUpload200Response thumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
    return this;
  }

  /**
   * Get thumbnailHeight
   * @return thumbnailHeight
   */
  @javax.annotation.Nonnull
  public Integer getThumbnailHeight() {
    return thumbnailHeight;
  }

  public void setThumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
  }


  public CreateUpload200Response thumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
    return this;
  }

  /**
   * Get thumbnailWidth
   * @return thumbnailWidth
   */
  @javax.annotation.Nonnull
  public Integer getThumbnailWidth() {
    return thumbnailWidth;
  }

  public void setThumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
  }


  public CreateUpload200Response url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CreateUpload200Response width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nonnull
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateUpload200Response instance itself
   */
  public CreateUpload200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpload200Response createUpload200Response = (CreateUpload200Response) o;
    return Objects.equals(this.dominantColor, createUpload200Response.dominantColor) &&
        Objects.equals(this.extension, createUpload200Response.extension) &&
        Objects.equals(this.filesize, createUpload200Response.filesize) &&
        Objects.equals(this.height, createUpload200Response.height) &&
        Objects.equals(this.humanFilesize, createUpload200Response.humanFilesize) &&
        Objects.equals(this.id, createUpload200Response.id) &&
        Objects.equals(this.originalFilename, createUpload200Response.originalFilename) &&
        Objects.equals(this.retainHours, createUpload200Response.retainHours) &&
        Objects.equals(this.shortPath, createUpload200Response.shortPath) &&
        Objects.equals(this.shortUrl, createUpload200Response.shortUrl) &&
        Objects.equals(this.thumbnailHeight, createUpload200Response.thumbnailHeight) &&
        Objects.equals(this.thumbnailWidth, createUpload200Response.thumbnailWidth) &&
        Objects.equals(this.url, createUpload200Response.url) &&
        Objects.equals(this.width, createUpload200Response.width)&&
        Objects.equals(this.additionalProperties, createUpload200Response.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dominantColor, extension, filesize, height, humanFilesize, id, originalFilename, retainHours, shortPath, shortUrl, thumbnailHeight, thumbnailWidth, url, width, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpload200Response {\n");
    sb.append("    dominantColor: ").append(toIndentedString(dominantColor)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    humanFilesize: ").append(toIndentedString(humanFilesize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    originalFilename: ").append(toIndentedString(originalFilename)).append("\n");
    sb.append("    retainHours: ").append(toIndentedString(retainHours)).append("\n");
    sb.append("    shortPath: ").append(toIndentedString(shortPath)).append("\n");
    sb.append("    shortUrl: ").append(toIndentedString(shortUrl)).append("\n");
    sb.append("    thumbnailHeight: ").append(toIndentedString(thumbnailHeight)).append("\n");
    sb.append("    thumbnailWidth: ").append(toIndentedString(thumbnailWidth)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dominant_color");
    openapiFields.add("extension");
    openapiFields.add("filesize");
    openapiFields.add("height");
    openapiFields.add("human_filesize");
    openapiFields.add("id");
    openapiFields.add("original_filename");
    openapiFields.add("retain_hours");
    openapiFields.add("short_path");
    openapiFields.add("short_url");
    openapiFields.add("thumbnail_height");
    openapiFields.add("thumbnail_width");
    openapiFields.add("url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("extension");
    openapiRequiredFields.add("filesize");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("human_filesize");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("original_filename");
    openapiRequiredFields.add("retain_hours");
    openapiRequiredFields.add("short_path");
    openapiRequiredFields.add("short_url");
    openapiRequiredFields.add("thumbnail_height");
    openapiRequiredFields.add("thumbnail_width");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUpload200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUpload200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpload200Response is not found in the empty JSON string", CreateUpload200Response.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUpload200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dominant_color") != null && !jsonObj.get("dominant_color").isJsonNull()) && !jsonObj.get("dominant_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominant_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dominant_color").toString()));
      }
      if (!jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if (!jsonObj.get("human_filesize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `human_filesize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("human_filesize").toString()));
      }
      if (!jsonObj.get("original_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_filename").toString()));
      }
      if ((jsonObj.get("retain_hours") != null && !jsonObj.get("retain_hours").isJsonNull()) && !jsonObj.get("retain_hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retain_hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retain_hours").toString()));
      }
      if (!jsonObj.get("short_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_path").toString()));
      }
      if (!jsonObj.get("short_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpload200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpload200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpload200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpload200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpload200Response>() {
           @Override
           public void write(JsonWriter out, CreateUpload200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpload200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CreateUpload200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUpload200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUpload200Response
   * @throws IOException if the JSON string is invalid with respect to CreateUpload200Response
   */
  public static CreateUpload200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpload200Response.class);
  }

  /**
   * Convert an instance of CreateUpload200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

