/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Search200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for search
     * @param q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;messages&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;group:&#x60;: group_name or group_id - &#x60;group_messages:&#x60;: group_name or group_id - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60;  (optional)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String q, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String q, Integer page, final ApiCallback _callback) throws ApiException {
        return searchCall(q, page, _callback);

    }

    /**
     * Search for a term
     * 
     * @param q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;messages&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;group:&#x60;: group_name or group_id - &#x60;group_messages:&#x60;: group_name or group_id - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60;  (optional)
     * @param page  (optional)
     * @return Search200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public Search200Response search(String q, Integer page) throws ApiException {
        ApiResponse<Search200Response> localVarResp = searchWithHttpInfo(q, page);
        return localVarResp.getData();
    }

    /**
     * Search for a term
     * 
     * @param q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;messages&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;group:&#x60;: group_name or group_id - &#x60;group_messages:&#x60;: group_name or group_id - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60;  (optional)
     * @param page  (optional)
     * @return ApiResponse&lt;Search200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Search200Response> searchWithHttpInfo(String q, Integer page) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(q, page, null);
        Type localVarReturnType = new TypeToken<Search200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a term (asynchronously)
     * 
     * @param q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;messages&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;group:&#x60;: group_name or group_id - &#x60;group_messages:&#x60;: group_name or group_id - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60;  (optional)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String q, Integer page, final ApiCallback<Search200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(q, page, _callback);
        Type localVarReturnType = new TypeToken<Search200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
