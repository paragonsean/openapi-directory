/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdminGetUser200ResponseGroupsInner;
import org.openapitools.client.model.GetUserExternalId200ResponseUserCustomFields;
import org.openapitools.client.model.GetUserExternalId200ResponseUserGroupUsersInner;
import org.openapitools.client.model.GetUserExternalId200ResponseUserUserAuthTokensInner;
import org.openapitools.client.model.GetUserExternalId200ResponseUserUserFields;
import org.openapitools.client.model.GetUserExternalId200ResponseUserUserNotificationSchedule;
import org.openapitools.client.model.GetUserExternalId200ResponseUserUserOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUserExternalId200ResponseUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUserExternalId200ResponseUser {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_ALLOWED_PM_USERNAMES = "allowed_pm_usernames";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PM_USERNAMES)
  private List<Object> allowedPmUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVATAR_TEMPLATE = "avatar_template";
  @SerializedName(SERIALIZED_NAME_AVATAR_TEMPLATE)
  private String avatarTemplate;

  public static final String SERIALIZED_NAME_BADGE_COUNT = "badge_count";
  @SerializedName(SERIALIZED_NAME_BADGE_COUNT)
  private Integer badgeCount;

  public static final String SERIALIZED_NAME_CAN_BE_DELETED = "can_be_deleted";
  @SerializedName(SERIALIZED_NAME_CAN_BE_DELETED)
  private Boolean canBeDeleted;

  public static final String SERIALIZED_NAME_CAN_CHANGE_BIO = "can_change_bio";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_BIO)
  private Boolean canChangeBio;

  public static final String SERIALIZED_NAME_CAN_CHANGE_LOCATION = "can_change_location";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_LOCATION)
  private Boolean canChangeLocation;

  public static final String SERIALIZED_NAME_CAN_CHANGE_TRACKING_PREFERENCES = "can_change_tracking_preferences";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_TRACKING_PREFERENCES)
  private Boolean canChangeTrackingPreferences;

  public static final String SERIALIZED_NAME_CAN_CHANGE_WEBSITE = "can_change_website";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_WEBSITE)
  private Boolean canChangeWebsite;

  public static final String SERIALIZED_NAME_CAN_DELETE_ALL_POSTS = "can_delete_all_posts";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_ALL_POSTS)
  private Boolean canDeleteAllPosts;

  public static final String SERIALIZED_NAME_CAN_EDIT = "can_edit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CAN_EDIT_EMAIL = "can_edit_email";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_EMAIL)
  private Boolean canEditEmail;

  public static final String SERIALIZED_NAME_CAN_EDIT_NAME = "can_edit_name";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_NAME)
  private Boolean canEditName;

  public static final String SERIALIZED_NAME_CAN_EDIT_USERNAME = "can_edit_username";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_USERNAME)
  private Boolean canEditUsername;

  public static final String SERIALIZED_NAME_CAN_IGNORE_USER = "can_ignore_user";
  @SerializedName(SERIALIZED_NAME_CAN_IGNORE_USER)
  private Boolean canIgnoreUser;

  public static final String SERIALIZED_NAME_CAN_MUTE_USER = "can_mute_user";
  @SerializedName(SERIALIZED_NAME_CAN_MUTE_USER)
  private Boolean canMuteUser;

  public static final String SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGE_TO_USER = "can_send_private_message_to_user";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGE_TO_USER)
  private Boolean canSendPrivateMessageToUser;

  public static final String SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGES = "can_send_private_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGES)
  private Boolean canSendPrivateMessages;

  public static final String SERIALIZED_NAME_CAN_UPLOAD_PROFILE_HEADER = "can_upload_profile_header";
  @SerializedName(SERIALIZED_NAME_CAN_UPLOAD_PROFILE_HEADER)
  private Boolean canUploadProfileHeader;

  public static final String SERIALIZED_NAME_CAN_UPLOAD_USER_CARD_BACKGROUND = "can_upload_user_card_background";
  @SerializedName(SERIALIZED_NAME_CAN_UPLOAD_USER_CARD_BACKGROUND)
  private Boolean canUploadUserCardBackground;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private GetUserExternalId200ResponseUserCustomFields customFields;

  public static final String SERIALIZED_NAME_FEATURED_TOPIC = "featured_topic";
  @SerializedName(SERIALIZED_NAME_FEATURED_TOPIC)
  private String featuredTopic;

  public static final String SERIALIZED_NAME_FEATURED_USER_BADGE_IDS = "featured_user_badge_ids";
  @SerializedName(SERIALIZED_NAME_FEATURED_USER_BADGE_IDS)
  private List<Object> featuredUserBadgeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLAIR_BG_COLOR = "flair_bg_color";
  @SerializedName(SERIALIZED_NAME_FLAIR_BG_COLOR)
  private String flairBgColor;

  public static final String SERIALIZED_NAME_FLAIR_COLOR = "flair_color";
  @SerializedName(SERIALIZED_NAME_FLAIR_COLOR)
  private String flairColor;

  public static final String SERIALIZED_NAME_FLAIR_GROUP_ID = "flair_group_id";
  @SerializedName(SERIALIZED_NAME_FLAIR_GROUP_ID)
  private String flairGroupId;

  public static final String SERIALIZED_NAME_FLAIR_NAME = "flair_name";
  @SerializedName(SERIALIZED_NAME_FLAIR_NAME)
  private String flairName;

  public static final String SERIALIZED_NAME_FLAIR_URL = "flair_url";
  @SerializedName(SERIALIZED_NAME_FLAIR_URL)
  private String flairUrl;

  public static final String SERIALIZED_NAME_GROUP_USERS = "group_users";
  @SerializedName(SERIALIZED_NAME_GROUP_USERS)
  private List<GetUserExternalId200ResponseUserGroupUsersInner> groupUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<AdminGetUser200ResponseGroupsInner> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_TITLE_BADGES = "has_title_badges";
  @SerializedName(SERIALIZED_NAME_HAS_TITLE_BADGES)
  private Boolean hasTitleBadges;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IGNORED = "ignored";
  @SerializedName(SERIALIZED_NAME_IGNORED)
  private Boolean ignored;

  public static final String SERIALIZED_NAME_IGNORED_USERNAMES = "ignored_usernames";
  @SerializedName(SERIALIZED_NAME_IGNORED_USERNAMES)
  private List<Object> ignoredUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVITED_BY = "invited_by";
  @SerializedName(SERIALIZED_NAME_INVITED_BY)
  private String invitedBy;

  public static final String SERIALIZED_NAME_LAST_POSTED_AT = "last_posted_at";
  @SerializedName(SERIALIZED_NAME_LAST_POSTED_AT)
  private String lastPostedAt;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private String lastSeenAt;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MAILING_LIST_POSTS_PER_DAY = "mailing_list_posts_per_day";
  @SerializedName(SERIALIZED_NAME_MAILING_LIST_POSTS_PER_DAY)
  private Integer mailingListPostsPerDay;

  public static final String SERIALIZED_NAME_MODERATOR = "moderator";
  @SerializedName(SERIALIZED_NAME_MODERATOR)
  private Boolean moderator;

  public static final String SERIALIZED_NAME_MUTED = "muted";
  @SerializedName(SERIALIZED_NAME_MUTED)
  private Boolean muted;

  public static final String SERIALIZED_NAME_MUTED_CATEGORY_IDS = "muted_category_ids";
  @SerializedName(SERIALIZED_NAME_MUTED_CATEGORY_IDS)
  private List<Object> mutedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MUTED_TAGS = "muted_tags";
  @SerializedName(SERIALIZED_NAME_MUTED_TAGS)
  private List<Object> mutedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_MUTED_USERNAMES = "muted_usernames";
  @SerializedName(SERIALIZED_NAME_MUTED_USERNAMES)
  private List<Object> mutedUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PENDING_COUNT = "pending_count";
  @SerializedName(SERIALIZED_NAME_PENDING_COUNT)
  private Integer pendingCount;

  public static final String SERIALIZED_NAME_PENDING_POSTS_COUNT = "pending_posts_count";
  @SerializedName(SERIALIZED_NAME_PENDING_POSTS_COUNT)
  private Integer pendingPostsCount;

  public static final String SERIALIZED_NAME_POST_COUNT = "post_count";
  @SerializedName(SERIALIZED_NAME_POST_COUNT)
  private Integer postCount;

  public static final String SERIALIZED_NAME_PRIMARY_GROUP_ID = "primary_group_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUP_ID)
  private String primaryGroupId;

  public static final String SERIALIZED_NAME_PRIMARY_GROUP_NAME = "primary_group_name";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUP_NAME)
  private String primaryGroupName;

  public static final String SERIALIZED_NAME_PROFILE_VIEW_COUNT = "profile_view_count";
  @SerializedName(SERIALIZED_NAME_PROFILE_VIEW_COUNT)
  private Integer profileViewCount;

  public static final String SERIALIZED_NAME_RECENT_TIME_READ = "recent_time_read";
  @SerializedName(SERIALIZED_NAME_RECENT_TIME_READ)
  private Integer recentTimeRead;

  public static final String SERIALIZED_NAME_REGULAR_CATEGORY_IDS = "regular_category_ids";
  @SerializedName(SERIALIZED_NAME_REGULAR_CATEGORY_IDS)
  private List<Object> regularCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECOND_FACTOR_BACKUP_ENABLED = "second_factor_backup_enabled";
  @SerializedName(SERIALIZED_NAME_SECOND_FACTOR_BACKUP_ENABLED)
  private Boolean secondFactorBackupEnabled;

  public static final String SERIALIZED_NAME_SECOND_FACTOR_ENABLED = "second_factor_enabled";
  @SerializedName(SERIALIZED_NAME_SECOND_FACTOR_ENABLED)
  private Boolean secondFactorEnabled;

  public static final String SERIALIZED_NAME_STAGED = "staged";
  @SerializedName(SERIALIZED_NAME_STAGED)
  private Boolean staged;

  public static final String SERIALIZED_NAME_SYSTEM_AVATAR_TEMPLATE = "system_avatar_template";
  @SerializedName(SERIALIZED_NAME_SYSTEM_AVATAR_TEMPLATE)
  private String systemAvatarTemplate;

  public static final String SERIALIZED_NAME_SYSTEM_AVATAR_UPLOAD_ID = "system_avatar_upload_id";
  @SerializedName(SERIALIZED_NAME_SYSTEM_AVATAR_UPLOAD_ID)
  private String systemAvatarUploadId;

  public static final String SERIALIZED_NAME_TIME_READ = "time_read";
  @SerializedName(SERIALIZED_NAME_TIME_READ)
  private Integer timeRead;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRACKED_CATEGORY_IDS = "tracked_category_ids";
  @SerializedName(SERIALIZED_NAME_TRACKED_CATEGORY_IDS)
  private List<Object> trackedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKED_TAGS = "tracked_tags";
  @SerializedName(SERIALIZED_NAME_TRACKED_TAGS)
  private List<Object> trackedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRUST_LEVEL = "trust_level";
  @SerializedName(SERIALIZED_NAME_TRUST_LEVEL)
  private Integer trustLevel;

  public static final String SERIALIZED_NAME_UPLOADED_AVATAR_ID = "uploaded_avatar_id";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AVATAR_ID)
  private String uploadedAvatarId;

  public static final String SERIALIZED_NAME_USE_LOGO_SMALL_AS_AVATAR = "use_logo_small_as_avatar";
  @SerializedName(SERIALIZED_NAME_USE_LOGO_SMALL_AS_AVATAR)
  private Boolean useLogoSmallAsAvatar;

  public static final String SERIALIZED_NAME_USER_API_KEYS = "user_api_keys";
  @SerializedName(SERIALIZED_NAME_USER_API_KEYS)
  private String userApiKeys;

  public static final String SERIALIZED_NAME_USER_AUTH_TOKENS = "user_auth_tokens";
  @SerializedName(SERIALIZED_NAME_USER_AUTH_TOKENS)
  private List<GetUserExternalId200ResponseUserUserAuthTokensInner> userAuthTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FIELDS = "user_fields";
  @SerializedName(SERIALIZED_NAME_USER_FIELDS)
  private GetUserExternalId200ResponseUserUserFields userFields;

  public static final String SERIALIZED_NAME_USER_NOTIFICATION_SCHEDULE = "user_notification_schedule";
  @SerializedName(SERIALIZED_NAME_USER_NOTIFICATION_SCHEDULE)
  private GetUserExternalId200ResponseUserUserNotificationSchedule userNotificationSchedule;

  public static final String SERIALIZED_NAME_USER_OPTION = "user_option";
  @SerializedName(SERIALIZED_NAME_USER_OPTION)
  private GetUserExternalId200ResponseUserUserOption userOption;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WATCHED_CATEGORY_IDS = "watched_category_ids";
  @SerializedName(SERIALIZED_NAME_WATCHED_CATEGORY_IDS)
  private List<Object> watchedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHED_FIRST_POST_CATEGORY_IDS = "watched_first_post_category_ids";
  @SerializedName(SERIALIZED_NAME_WATCHED_FIRST_POST_CATEGORY_IDS)
  private List<Object> watchedFirstPostCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHED_TAGS = "watched_tags";
  @SerializedName(SERIALIZED_NAME_WATCHED_TAGS)
  private List<Object> watchedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHING_FIRST_POST_TAGS = "watching_first_post_tags";
  @SerializedName(SERIALIZED_NAME_WATCHING_FIRST_POST_TAGS)
  private List<Object> watchingFirstPostTags = new ArrayList<>();

  public GetUserExternalId200ResponseUser() {
  }

  public GetUserExternalId200ResponseUser admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Get admin
   * @return admin
   */
  @javax.annotation.Nonnull
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public GetUserExternalId200ResponseUser allowedPmUsernames(List<Object> allowedPmUsernames) {
    this.allowedPmUsernames = allowedPmUsernames;
    return this;
  }

  public GetUserExternalId200ResponseUser addAllowedPmUsernamesItem(Object allowedPmUsernamesItem) {
    if (this.allowedPmUsernames == null) {
      this.allowedPmUsernames = new ArrayList<>();
    }
    this.allowedPmUsernames.add(allowedPmUsernamesItem);
    return this;
  }

  /**
   * Get allowedPmUsernames
   * @return allowedPmUsernames
   */
  @javax.annotation.Nonnull
  public List<Object> getAllowedPmUsernames() {
    return allowedPmUsernames;
  }

  public void setAllowedPmUsernames(List<Object> allowedPmUsernames) {
    this.allowedPmUsernames = allowedPmUsernames;
  }


  public GetUserExternalId200ResponseUser avatarTemplate(String avatarTemplate) {
    this.avatarTemplate = avatarTemplate;
    return this;
  }

  /**
   * Get avatarTemplate
   * @return avatarTemplate
   */
  @javax.annotation.Nonnull
  public String getAvatarTemplate() {
    return avatarTemplate;
  }

  public void setAvatarTemplate(String avatarTemplate) {
    this.avatarTemplate = avatarTemplate;
  }


  public GetUserExternalId200ResponseUser badgeCount(Integer badgeCount) {
    this.badgeCount = badgeCount;
    return this;
  }

  /**
   * Get badgeCount
   * @return badgeCount
   */
  @javax.annotation.Nonnull
  public Integer getBadgeCount() {
    return badgeCount;
  }

  public void setBadgeCount(Integer badgeCount) {
    this.badgeCount = badgeCount;
  }


  public GetUserExternalId200ResponseUser canBeDeleted(Boolean canBeDeleted) {
    this.canBeDeleted = canBeDeleted;
    return this;
  }

  /**
   * Get canBeDeleted
   * @return canBeDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getCanBeDeleted() {
    return canBeDeleted;
  }

  public void setCanBeDeleted(Boolean canBeDeleted) {
    this.canBeDeleted = canBeDeleted;
  }


  public GetUserExternalId200ResponseUser canChangeBio(Boolean canChangeBio) {
    this.canChangeBio = canChangeBio;
    return this;
  }

  /**
   * Get canChangeBio
   * @return canChangeBio
   */
  @javax.annotation.Nonnull
  public Boolean getCanChangeBio() {
    return canChangeBio;
  }

  public void setCanChangeBio(Boolean canChangeBio) {
    this.canChangeBio = canChangeBio;
  }


  public GetUserExternalId200ResponseUser canChangeLocation(Boolean canChangeLocation) {
    this.canChangeLocation = canChangeLocation;
    return this;
  }

  /**
   * Get canChangeLocation
   * @return canChangeLocation
   */
  @javax.annotation.Nonnull
  public Boolean getCanChangeLocation() {
    return canChangeLocation;
  }

  public void setCanChangeLocation(Boolean canChangeLocation) {
    this.canChangeLocation = canChangeLocation;
  }


  public GetUserExternalId200ResponseUser canChangeTrackingPreferences(Boolean canChangeTrackingPreferences) {
    this.canChangeTrackingPreferences = canChangeTrackingPreferences;
    return this;
  }

  /**
   * Get canChangeTrackingPreferences
   * @return canChangeTrackingPreferences
   */
  @javax.annotation.Nonnull
  public Boolean getCanChangeTrackingPreferences() {
    return canChangeTrackingPreferences;
  }

  public void setCanChangeTrackingPreferences(Boolean canChangeTrackingPreferences) {
    this.canChangeTrackingPreferences = canChangeTrackingPreferences;
  }


  public GetUserExternalId200ResponseUser canChangeWebsite(Boolean canChangeWebsite) {
    this.canChangeWebsite = canChangeWebsite;
    return this;
  }

  /**
   * Get canChangeWebsite
   * @return canChangeWebsite
   */
  @javax.annotation.Nonnull
  public Boolean getCanChangeWebsite() {
    return canChangeWebsite;
  }

  public void setCanChangeWebsite(Boolean canChangeWebsite) {
    this.canChangeWebsite = canChangeWebsite;
  }


  public GetUserExternalId200ResponseUser canDeleteAllPosts(Boolean canDeleteAllPosts) {
    this.canDeleteAllPosts = canDeleteAllPosts;
    return this;
  }

  /**
   * Get canDeleteAllPosts
   * @return canDeleteAllPosts
   */
  @javax.annotation.Nonnull
  public Boolean getCanDeleteAllPosts() {
    return canDeleteAllPosts;
  }

  public void setCanDeleteAllPosts(Boolean canDeleteAllPosts) {
    this.canDeleteAllPosts = canDeleteAllPosts;
  }


  public GetUserExternalId200ResponseUser canEdit(Boolean canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  /**
   * Get canEdit
   * @return canEdit
   */
  @javax.annotation.Nonnull
  public Boolean getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Boolean canEdit) {
    this.canEdit = canEdit;
  }


  public GetUserExternalId200ResponseUser canEditEmail(Boolean canEditEmail) {
    this.canEditEmail = canEditEmail;
    return this;
  }

  /**
   * Get canEditEmail
   * @return canEditEmail
   */
  @javax.annotation.Nonnull
  public Boolean getCanEditEmail() {
    return canEditEmail;
  }

  public void setCanEditEmail(Boolean canEditEmail) {
    this.canEditEmail = canEditEmail;
  }


  public GetUserExternalId200ResponseUser canEditName(Boolean canEditName) {
    this.canEditName = canEditName;
    return this;
  }

  /**
   * Get canEditName
   * @return canEditName
   */
  @javax.annotation.Nonnull
  public Boolean getCanEditName() {
    return canEditName;
  }

  public void setCanEditName(Boolean canEditName) {
    this.canEditName = canEditName;
  }


  public GetUserExternalId200ResponseUser canEditUsername(Boolean canEditUsername) {
    this.canEditUsername = canEditUsername;
    return this;
  }

  /**
   * Get canEditUsername
   * @return canEditUsername
   */
  @javax.annotation.Nonnull
  public Boolean getCanEditUsername() {
    return canEditUsername;
  }

  public void setCanEditUsername(Boolean canEditUsername) {
    this.canEditUsername = canEditUsername;
  }


  public GetUserExternalId200ResponseUser canIgnoreUser(Boolean canIgnoreUser) {
    this.canIgnoreUser = canIgnoreUser;
    return this;
  }

  /**
   * Get canIgnoreUser
   * @return canIgnoreUser
   */
  @javax.annotation.Nonnull
  public Boolean getCanIgnoreUser() {
    return canIgnoreUser;
  }

  public void setCanIgnoreUser(Boolean canIgnoreUser) {
    this.canIgnoreUser = canIgnoreUser;
  }


  public GetUserExternalId200ResponseUser canMuteUser(Boolean canMuteUser) {
    this.canMuteUser = canMuteUser;
    return this;
  }

  /**
   * Get canMuteUser
   * @return canMuteUser
   */
  @javax.annotation.Nonnull
  public Boolean getCanMuteUser() {
    return canMuteUser;
  }

  public void setCanMuteUser(Boolean canMuteUser) {
    this.canMuteUser = canMuteUser;
  }


  public GetUserExternalId200ResponseUser canSendPrivateMessageToUser(Boolean canSendPrivateMessageToUser) {
    this.canSendPrivateMessageToUser = canSendPrivateMessageToUser;
    return this;
  }

  /**
   * Get canSendPrivateMessageToUser
   * @return canSendPrivateMessageToUser
   */
  @javax.annotation.Nonnull
  public Boolean getCanSendPrivateMessageToUser() {
    return canSendPrivateMessageToUser;
  }

  public void setCanSendPrivateMessageToUser(Boolean canSendPrivateMessageToUser) {
    this.canSendPrivateMessageToUser = canSendPrivateMessageToUser;
  }


  public GetUserExternalId200ResponseUser canSendPrivateMessages(Boolean canSendPrivateMessages) {
    this.canSendPrivateMessages = canSendPrivateMessages;
    return this;
  }

  /**
   * Get canSendPrivateMessages
   * @return canSendPrivateMessages
   */
  @javax.annotation.Nonnull
  public Boolean getCanSendPrivateMessages() {
    return canSendPrivateMessages;
  }

  public void setCanSendPrivateMessages(Boolean canSendPrivateMessages) {
    this.canSendPrivateMessages = canSendPrivateMessages;
  }


  public GetUserExternalId200ResponseUser canUploadProfileHeader(Boolean canUploadProfileHeader) {
    this.canUploadProfileHeader = canUploadProfileHeader;
    return this;
  }

  /**
   * Get canUploadProfileHeader
   * @return canUploadProfileHeader
   */
  @javax.annotation.Nonnull
  public Boolean getCanUploadProfileHeader() {
    return canUploadProfileHeader;
  }

  public void setCanUploadProfileHeader(Boolean canUploadProfileHeader) {
    this.canUploadProfileHeader = canUploadProfileHeader;
  }


  public GetUserExternalId200ResponseUser canUploadUserCardBackground(Boolean canUploadUserCardBackground) {
    this.canUploadUserCardBackground = canUploadUserCardBackground;
    return this;
  }

  /**
   * Get canUploadUserCardBackground
   * @return canUploadUserCardBackground
   */
  @javax.annotation.Nonnull
  public Boolean getCanUploadUserCardBackground() {
    return canUploadUserCardBackground;
  }

  public void setCanUploadUserCardBackground(Boolean canUploadUserCardBackground) {
    this.canUploadUserCardBackground = canUploadUserCardBackground;
  }


  public GetUserExternalId200ResponseUser createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GetUserExternalId200ResponseUser customFields(GetUserExternalId200ResponseUserCustomFields customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nonnull
  public GetUserExternalId200ResponseUserCustomFields getCustomFields() {
    return customFields;
  }

  public void setCustomFields(GetUserExternalId200ResponseUserCustomFields customFields) {
    this.customFields = customFields;
  }


  public GetUserExternalId200ResponseUser featuredTopic(String featuredTopic) {
    this.featuredTopic = featuredTopic;
    return this;
  }

  /**
   * Get featuredTopic
   * @return featuredTopic
   */
  @javax.annotation.Nullable
  public String getFeaturedTopic() {
    return featuredTopic;
  }

  public void setFeaturedTopic(String featuredTopic) {
    this.featuredTopic = featuredTopic;
  }


  public GetUserExternalId200ResponseUser featuredUserBadgeIds(List<Object> featuredUserBadgeIds) {
    this.featuredUserBadgeIds = featuredUserBadgeIds;
    return this;
  }

  public GetUserExternalId200ResponseUser addFeaturedUserBadgeIdsItem(Object featuredUserBadgeIdsItem) {
    if (this.featuredUserBadgeIds == null) {
      this.featuredUserBadgeIds = new ArrayList<>();
    }
    this.featuredUserBadgeIds.add(featuredUserBadgeIdsItem);
    return this;
  }

  /**
   * Get featuredUserBadgeIds
   * @return featuredUserBadgeIds
   */
  @javax.annotation.Nonnull
  public List<Object> getFeaturedUserBadgeIds() {
    return featuredUserBadgeIds;
  }

  public void setFeaturedUserBadgeIds(List<Object> featuredUserBadgeIds) {
    this.featuredUserBadgeIds = featuredUserBadgeIds;
  }


  public GetUserExternalId200ResponseUser flairBgColor(String flairBgColor) {
    this.flairBgColor = flairBgColor;
    return this;
  }

  /**
   * Get flairBgColor
   * @return flairBgColor
   */
  @javax.annotation.Nullable
  public String getFlairBgColor() {
    return flairBgColor;
  }

  public void setFlairBgColor(String flairBgColor) {
    this.flairBgColor = flairBgColor;
  }


  public GetUserExternalId200ResponseUser flairColor(String flairColor) {
    this.flairColor = flairColor;
    return this;
  }

  /**
   * Get flairColor
   * @return flairColor
   */
  @javax.annotation.Nullable
  public String getFlairColor() {
    return flairColor;
  }

  public void setFlairColor(String flairColor) {
    this.flairColor = flairColor;
  }


  public GetUserExternalId200ResponseUser flairGroupId(String flairGroupId) {
    this.flairGroupId = flairGroupId;
    return this;
  }

  /**
   * Get flairGroupId
   * @return flairGroupId
   */
  @javax.annotation.Nullable
  public String getFlairGroupId() {
    return flairGroupId;
  }

  public void setFlairGroupId(String flairGroupId) {
    this.flairGroupId = flairGroupId;
  }


  public GetUserExternalId200ResponseUser flairName(String flairName) {
    this.flairName = flairName;
    return this;
  }

  /**
   * Get flairName
   * @return flairName
   */
  @javax.annotation.Nullable
  public String getFlairName() {
    return flairName;
  }

  public void setFlairName(String flairName) {
    this.flairName = flairName;
  }


  public GetUserExternalId200ResponseUser flairUrl(String flairUrl) {
    this.flairUrl = flairUrl;
    return this;
  }

  /**
   * Get flairUrl
   * @return flairUrl
   */
  @javax.annotation.Nullable
  public String getFlairUrl() {
    return flairUrl;
  }

  public void setFlairUrl(String flairUrl) {
    this.flairUrl = flairUrl;
  }


  public GetUserExternalId200ResponseUser groupUsers(List<GetUserExternalId200ResponseUserGroupUsersInner> groupUsers) {
    this.groupUsers = groupUsers;
    return this;
  }

  public GetUserExternalId200ResponseUser addGroupUsersItem(GetUserExternalId200ResponseUserGroupUsersInner groupUsersItem) {
    if (this.groupUsers == null) {
      this.groupUsers = new ArrayList<>();
    }
    this.groupUsers.add(groupUsersItem);
    return this;
  }

  /**
   * Get groupUsers
   * @return groupUsers
   */
  @javax.annotation.Nonnull
  public List<GetUserExternalId200ResponseUserGroupUsersInner> getGroupUsers() {
    return groupUsers;
  }

  public void setGroupUsers(List<GetUserExternalId200ResponseUserGroupUsersInner> groupUsers) {
    this.groupUsers = groupUsers;
  }


  public GetUserExternalId200ResponseUser groups(List<AdminGetUser200ResponseGroupsInner> groups) {
    this.groups = groups;
    return this;
  }

  public GetUserExternalId200ResponseUser addGroupsItem(AdminGetUser200ResponseGroupsInner groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nonnull
  public List<AdminGetUser200ResponseGroupsInner> getGroups() {
    return groups;
  }

  public void setGroups(List<AdminGetUser200ResponseGroupsInner> groups) {
    this.groups = groups;
  }


  public GetUserExternalId200ResponseUser hasTitleBadges(Boolean hasTitleBadges) {
    this.hasTitleBadges = hasTitleBadges;
    return this;
  }

  /**
   * Get hasTitleBadges
   * @return hasTitleBadges
   */
  @javax.annotation.Nonnull
  public Boolean getHasTitleBadges() {
    return hasTitleBadges;
  }

  public void setHasTitleBadges(Boolean hasTitleBadges) {
    this.hasTitleBadges = hasTitleBadges;
  }


  public GetUserExternalId200ResponseUser id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetUserExternalId200ResponseUser ignored(Boolean ignored) {
    this.ignored = ignored;
    return this;
  }

  /**
   * Get ignored
   * @return ignored
   */
  @javax.annotation.Nonnull
  public Boolean getIgnored() {
    return ignored;
  }

  public void setIgnored(Boolean ignored) {
    this.ignored = ignored;
  }


  public GetUserExternalId200ResponseUser ignoredUsernames(List<Object> ignoredUsernames) {
    this.ignoredUsernames = ignoredUsernames;
    return this;
  }

  public GetUserExternalId200ResponseUser addIgnoredUsernamesItem(Object ignoredUsernamesItem) {
    if (this.ignoredUsernames == null) {
      this.ignoredUsernames = new ArrayList<>();
    }
    this.ignoredUsernames.add(ignoredUsernamesItem);
    return this;
  }

  /**
   * Get ignoredUsernames
   * @return ignoredUsernames
   */
  @javax.annotation.Nonnull
  public List<Object> getIgnoredUsernames() {
    return ignoredUsernames;
  }

  public void setIgnoredUsernames(List<Object> ignoredUsernames) {
    this.ignoredUsernames = ignoredUsernames;
  }


  public GetUserExternalId200ResponseUser invitedBy(String invitedBy) {
    this.invitedBy = invitedBy;
    return this;
  }

  /**
   * Get invitedBy
   * @return invitedBy
   */
  @javax.annotation.Nullable
  public String getInvitedBy() {
    return invitedBy;
  }

  public void setInvitedBy(String invitedBy) {
    this.invitedBy = invitedBy;
  }


  public GetUserExternalId200ResponseUser lastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
    return this;
  }

  /**
   * Get lastPostedAt
   * @return lastPostedAt
   */
  @javax.annotation.Nullable
  public String getLastPostedAt() {
    return lastPostedAt;
  }

  public void setLastPostedAt(String lastPostedAt) {
    this.lastPostedAt = lastPostedAt;
  }


  public GetUserExternalId200ResponseUser lastSeenAt(String lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
    return this;
  }

  /**
   * Get lastSeenAt
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public String getLastSeenAt() {
    return lastSeenAt;
  }

  public void setLastSeenAt(String lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
  }


  public GetUserExternalId200ResponseUser locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public GetUserExternalId200ResponseUser mailingListPostsPerDay(Integer mailingListPostsPerDay) {
    this.mailingListPostsPerDay = mailingListPostsPerDay;
    return this;
  }

  /**
   * Get mailingListPostsPerDay
   * @return mailingListPostsPerDay
   */
  @javax.annotation.Nonnull
  public Integer getMailingListPostsPerDay() {
    return mailingListPostsPerDay;
  }

  public void setMailingListPostsPerDay(Integer mailingListPostsPerDay) {
    this.mailingListPostsPerDay = mailingListPostsPerDay;
  }


  public GetUserExternalId200ResponseUser moderator(Boolean moderator) {
    this.moderator = moderator;
    return this;
  }

  /**
   * Get moderator
   * @return moderator
   */
  @javax.annotation.Nonnull
  public Boolean getModerator() {
    return moderator;
  }

  public void setModerator(Boolean moderator) {
    this.moderator = moderator;
  }


  public GetUserExternalId200ResponseUser muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

  /**
   * Get muted
   * @return muted
   */
  @javax.annotation.Nonnull
  public Boolean getMuted() {
    return muted;
  }

  public void setMuted(Boolean muted) {
    this.muted = muted;
  }


  public GetUserExternalId200ResponseUser mutedCategoryIds(List<Object> mutedCategoryIds) {
    this.mutedCategoryIds = mutedCategoryIds;
    return this;
  }

  public GetUserExternalId200ResponseUser addMutedCategoryIdsItem(Object mutedCategoryIdsItem) {
    if (this.mutedCategoryIds == null) {
      this.mutedCategoryIds = new ArrayList<>();
    }
    this.mutedCategoryIds.add(mutedCategoryIdsItem);
    return this;
  }

  /**
   * Get mutedCategoryIds
   * @return mutedCategoryIds
   */
  @javax.annotation.Nonnull
  public List<Object> getMutedCategoryIds() {
    return mutedCategoryIds;
  }

  public void setMutedCategoryIds(List<Object> mutedCategoryIds) {
    this.mutedCategoryIds = mutedCategoryIds;
  }


  public GetUserExternalId200ResponseUser mutedTags(List<Object> mutedTags) {
    this.mutedTags = mutedTags;
    return this;
  }

  public GetUserExternalId200ResponseUser addMutedTagsItem(Object mutedTagsItem) {
    if (this.mutedTags == null) {
      this.mutedTags = new ArrayList<>();
    }
    this.mutedTags.add(mutedTagsItem);
    return this;
  }

  /**
   * Get mutedTags
   * @return mutedTags
   */
  @javax.annotation.Nonnull
  public List<Object> getMutedTags() {
    return mutedTags;
  }

  public void setMutedTags(List<Object> mutedTags) {
    this.mutedTags = mutedTags;
  }


  public GetUserExternalId200ResponseUser mutedUsernames(List<Object> mutedUsernames) {
    this.mutedUsernames = mutedUsernames;
    return this;
  }

  public GetUserExternalId200ResponseUser addMutedUsernamesItem(Object mutedUsernamesItem) {
    if (this.mutedUsernames == null) {
      this.mutedUsernames = new ArrayList<>();
    }
    this.mutedUsernames.add(mutedUsernamesItem);
    return this;
  }

  /**
   * Get mutedUsernames
   * @return mutedUsernames
   */
  @javax.annotation.Nonnull
  public List<Object> getMutedUsernames() {
    return mutedUsernames;
  }

  public void setMutedUsernames(List<Object> mutedUsernames) {
    this.mutedUsernames = mutedUsernames;
  }


  public GetUserExternalId200ResponseUser name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetUserExternalId200ResponseUser pendingCount(Integer pendingCount) {
    this.pendingCount = pendingCount;
    return this;
  }

  /**
   * Get pendingCount
   * @return pendingCount
   */
  @javax.annotation.Nonnull
  public Integer getPendingCount() {
    return pendingCount;
  }

  public void setPendingCount(Integer pendingCount) {
    this.pendingCount = pendingCount;
  }


  public GetUserExternalId200ResponseUser pendingPostsCount(Integer pendingPostsCount) {
    this.pendingPostsCount = pendingPostsCount;
    return this;
  }

  /**
   * Get pendingPostsCount
   * @return pendingPostsCount
   */
  @javax.annotation.Nullable
  public Integer getPendingPostsCount() {
    return pendingPostsCount;
  }

  public void setPendingPostsCount(Integer pendingPostsCount) {
    this.pendingPostsCount = pendingPostsCount;
  }


  public GetUserExternalId200ResponseUser postCount(Integer postCount) {
    this.postCount = postCount;
    return this;
  }

  /**
   * Get postCount
   * @return postCount
   */
  @javax.annotation.Nonnull
  public Integer getPostCount() {
    return postCount;
  }

  public void setPostCount(Integer postCount) {
    this.postCount = postCount;
  }


  public GetUserExternalId200ResponseUser primaryGroupId(String primaryGroupId) {
    this.primaryGroupId = primaryGroupId;
    return this;
  }

  /**
   * Get primaryGroupId
   * @return primaryGroupId
   */
  @javax.annotation.Nullable
  public String getPrimaryGroupId() {
    return primaryGroupId;
  }

  public void setPrimaryGroupId(String primaryGroupId) {
    this.primaryGroupId = primaryGroupId;
  }


  public GetUserExternalId200ResponseUser primaryGroupName(String primaryGroupName) {
    this.primaryGroupName = primaryGroupName;
    return this;
  }

  /**
   * Get primaryGroupName
   * @return primaryGroupName
   */
  @javax.annotation.Nullable
  public String getPrimaryGroupName() {
    return primaryGroupName;
  }

  public void setPrimaryGroupName(String primaryGroupName) {
    this.primaryGroupName = primaryGroupName;
  }


  public GetUserExternalId200ResponseUser profileViewCount(Integer profileViewCount) {
    this.profileViewCount = profileViewCount;
    return this;
  }

  /**
   * Get profileViewCount
   * @return profileViewCount
   */
  @javax.annotation.Nonnull
  public Integer getProfileViewCount() {
    return profileViewCount;
  }

  public void setProfileViewCount(Integer profileViewCount) {
    this.profileViewCount = profileViewCount;
  }


  public GetUserExternalId200ResponseUser recentTimeRead(Integer recentTimeRead) {
    this.recentTimeRead = recentTimeRead;
    return this;
  }

  /**
   * Get recentTimeRead
   * @return recentTimeRead
   */
  @javax.annotation.Nonnull
  public Integer getRecentTimeRead() {
    return recentTimeRead;
  }

  public void setRecentTimeRead(Integer recentTimeRead) {
    this.recentTimeRead = recentTimeRead;
  }


  public GetUserExternalId200ResponseUser regularCategoryIds(List<Object> regularCategoryIds) {
    this.regularCategoryIds = regularCategoryIds;
    return this;
  }

  public GetUserExternalId200ResponseUser addRegularCategoryIdsItem(Object regularCategoryIdsItem) {
    if (this.regularCategoryIds == null) {
      this.regularCategoryIds = new ArrayList<>();
    }
    this.regularCategoryIds.add(regularCategoryIdsItem);
    return this;
  }

  /**
   * Get regularCategoryIds
   * @return regularCategoryIds
   */
  @javax.annotation.Nonnull
  public List<Object> getRegularCategoryIds() {
    return regularCategoryIds;
  }

  public void setRegularCategoryIds(List<Object> regularCategoryIds) {
    this.regularCategoryIds = regularCategoryIds;
  }


  public GetUserExternalId200ResponseUser secondFactorBackupEnabled(Boolean secondFactorBackupEnabled) {
    this.secondFactorBackupEnabled = secondFactorBackupEnabled;
    return this;
  }

  /**
   * Get secondFactorBackupEnabled
   * @return secondFactorBackupEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSecondFactorBackupEnabled() {
    return secondFactorBackupEnabled;
  }

  public void setSecondFactorBackupEnabled(Boolean secondFactorBackupEnabled) {
    this.secondFactorBackupEnabled = secondFactorBackupEnabled;
  }


  public GetUserExternalId200ResponseUser secondFactorEnabled(Boolean secondFactorEnabled) {
    this.secondFactorEnabled = secondFactorEnabled;
    return this;
  }

  /**
   * Get secondFactorEnabled
   * @return secondFactorEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getSecondFactorEnabled() {
    return secondFactorEnabled;
  }

  public void setSecondFactorEnabled(Boolean secondFactorEnabled) {
    this.secondFactorEnabled = secondFactorEnabled;
  }


  public GetUserExternalId200ResponseUser staged(Boolean staged) {
    this.staged = staged;
    return this;
  }

  /**
   * Get staged
   * @return staged
   */
  @javax.annotation.Nonnull
  public Boolean getStaged() {
    return staged;
  }

  public void setStaged(Boolean staged) {
    this.staged = staged;
  }


  public GetUserExternalId200ResponseUser systemAvatarTemplate(String systemAvatarTemplate) {
    this.systemAvatarTemplate = systemAvatarTemplate;
    return this;
  }

  /**
   * Get systemAvatarTemplate
   * @return systemAvatarTemplate
   */
  @javax.annotation.Nonnull
  public String getSystemAvatarTemplate() {
    return systemAvatarTemplate;
  }

  public void setSystemAvatarTemplate(String systemAvatarTemplate) {
    this.systemAvatarTemplate = systemAvatarTemplate;
  }


  public GetUserExternalId200ResponseUser systemAvatarUploadId(String systemAvatarUploadId) {
    this.systemAvatarUploadId = systemAvatarUploadId;
    return this;
  }

  /**
   * Get systemAvatarUploadId
   * @return systemAvatarUploadId
   */
  @javax.annotation.Nullable
  public String getSystemAvatarUploadId() {
    return systemAvatarUploadId;
  }

  public void setSystemAvatarUploadId(String systemAvatarUploadId) {
    this.systemAvatarUploadId = systemAvatarUploadId;
  }


  public GetUserExternalId200ResponseUser timeRead(Integer timeRead) {
    this.timeRead = timeRead;
    return this;
  }

  /**
   * Get timeRead
   * @return timeRead
   */
  @javax.annotation.Nonnull
  public Integer getTimeRead() {
    return timeRead;
  }

  public void setTimeRead(Integer timeRead) {
    this.timeRead = timeRead;
  }


  public GetUserExternalId200ResponseUser title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetUserExternalId200ResponseUser trackedCategoryIds(List<Object> trackedCategoryIds) {
    this.trackedCategoryIds = trackedCategoryIds;
    return this;
  }

  public GetUserExternalId200ResponseUser addTrackedCategoryIdsItem(Object trackedCategoryIdsItem) {
    if (this.trackedCategoryIds == null) {
      this.trackedCategoryIds = new ArrayList<>();
    }
    this.trackedCategoryIds.add(trackedCategoryIdsItem);
    return this;
  }

  /**
   * Get trackedCategoryIds
   * @return trackedCategoryIds
   */
  @javax.annotation.Nonnull
  public List<Object> getTrackedCategoryIds() {
    return trackedCategoryIds;
  }

  public void setTrackedCategoryIds(List<Object> trackedCategoryIds) {
    this.trackedCategoryIds = trackedCategoryIds;
  }


  public GetUserExternalId200ResponseUser trackedTags(List<Object> trackedTags) {
    this.trackedTags = trackedTags;
    return this;
  }

  public GetUserExternalId200ResponseUser addTrackedTagsItem(Object trackedTagsItem) {
    if (this.trackedTags == null) {
      this.trackedTags = new ArrayList<>();
    }
    this.trackedTags.add(trackedTagsItem);
    return this;
  }

  /**
   * Get trackedTags
   * @return trackedTags
   */
  @javax.annotation.Nonnull
  public List<Object> getTrackedTags() {
    return trackedTags;
  }

  public void setTrackedTags(List<Object> trackedTags) {
    this.trackedTags = trackedTags;
  }


  public GetUserExternalId200ResponseUser trustLevel(Integer trustLevel) {
    this.trustLevel = trustLevel;
    return this;
  }

  /**
   * Get trustLevel
   * @return trustLevel
   */
  @javax.annotation.Nonnull
  public Integer getTrustLevel() {
    return trustLevel;
  }

  public void setTrustLevel(Integer trustLevel) {
    this.trustLevel = trustLevel;
  }


  public GetUserExternalId200ResponseUser uploadedAvatarId(String uploadedAvatarId) {
    this.uploadedAvatarId = uploadedAvatarId;
    return this;
  }

  /**
   * Get uploadedAvatarId
   * @return uploadedAvatarId
   */
  @javax.annotation.Nullable
  public String getUploadedAvatarId() {
    return uploadedAvatarId;
  }

  public void setUploadedAvatarId(String uploadedAvatarId) {
    this.uploadedAvatarId = uploadedAvatarId;
  }


  public GetUserExternalId200ResponseUser useLogoSmallAsAvatar(Boolean useLogoSmallAsAvatar) {
    this.useLogoSmallAsAvatar = useLogoSmallAsAvatar;
    return this;
  }

  /**
   * Get useLogoSmallAsAvatar
   * @return useLogoSmallAsAvatar
   */
  @javax.annotation.Nonnull
  public Boolean getUseLogoSmallAsAvatar() {
    return useLogoSmallAsAvatar;
  }

  public void setUseLogoSmallAsAvatar(Boolean useLogoSmallAsAvatar) {
    this.useLogoSmallAsAvatar = useLogoSmallAsAvatar;
  }


  public GetUserExternalId200ResponseUser userApiKeys(String userApiKeys) {
    this.userApiKeys = userApiKeys;
    return this;
  }

  /**
   * Get userApiKeys
   * @return userApiKeys
   */
  @javax.annotation.Nullable
  public String getUserApiKeys() {
    return userApiKeys;
  }

  public void setUserApiKeys(String userApiKeys) {
    this.userApiKeys = userApiKeys;
  }


  public GetUserExternalId200ResponseUser userAuthTokens(List<GetUserExternalId200ResponseUserUserAuthTokensInner> userAuthTokens) {
    this.userAuthTokens = userAuthTokens;
    return this;
  }

  public GetUserExternalId200ResponseUser addUserAuthTokensItem(GetUserExternalId200ResponseUserUserAuthTokensInner userAuthTokensItem) {
    if (this.userAuthTokens == null) {
      this.userAuthTokens = new ArrayList<>();
    }
    this.userAuthTokens.add(userAuthTokensItem);
    return this;
  }

  /**
   * Get userAuthTokens
   * @return userAuthTokens
   */
  @javax.annotation.Nonnull
  public List<GetUserExternalId200ResponseUserUserAuthTokensInner> getUserAuthTokens() {
    return userAuthTokens;
  }

  public void setUserAuthTokens(List<GetUserExternalId200ResponseUserUserAuthTokensInner> userAuthTokens) {
    this.userAuthTokens = userAuthTokens;
  }


  public GetUserExternalId200ResponseUser userFields(GetUserExternalId200ResponseUserUserFields userFields) {
    this.userFields = userFields;
    return this;
  }

  /**
   * Get userFields
   * @return userFields
   */
  @javax.annotation.Nullable
  public GetUserExternalId200ResponseUserUserFields getUserFields() {
    return userFields;
  }

  public void setUserFields(GetUserExternalId200ResponseUserUserFields userFields) {
    this.userFields = userFields;
  }


  public GetUserExternalId200ResponseUser userNotificationSchedule(GetUserExternalId200ResponseUserUserNotificationSchedule userNotificationSchedule) {
    this.userNotificationSchedule = userNotificationSchedule;
    return this;
  }

  /**
   * Get userNotificationSchedule
   * @return userNotificationSchedule
   */
  @javax.annotation.Nonnull
  public GetUserExternalId200ResponseUserUserNotificationSchedule getUserNotificationSchedule() {
    return userNotificationSchedule;
  }

  public void setUserNotificationSchedule(GetUserExternalId200ResponseUserUserNotificationSchedule userNotificationSchedule) {
    this.userNotificationSchedule = userNotificationSchedule;
  }


  public GetUserExternalId200ResponseUser userOption(GetUserExternalId200ResponseUserUserOption userOption) {
    this.userOption = userOption;
    return this;
  }

  /**
   * Get userOption
   * @return userOption
   */
  @javax.annotation.Nonnull
  public GetUserExternalId200ResponseUserUserOption getUserOption() {
    return userOption;
  }

  public void setUserOption(GetUserExternalId200ResponseUserUserOption userOption) {
    this.userOption = userOption;
  }


  public GetUserExternalId200ResponseUser username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public GetUserExternalId200ResponseUser watchedCategoryIds(List<Object> watchedCategoryIds) {
    this.watchedCategoryIds = watchedCategoryIds;
    return this;
  }

  public GetUserExternalId200ResponseUser addWatchedCategoryIdsItem(Object watchedCategoryIdsItem) {
    if (this.watchedCategoryIds == null) {
      this.watchedCategoryIds = new ArrayList<>();
    }
    this.watchedCategoryIds.add(watchedCategoryIdsItem);
    return this;
  }

  /**
   * Get watchedCategoryIds
   * @return watchedCategoryIds
   */
  @javax.annotation.Nonnull
  public List<Object> getWatchedCategoryIds() {
    return watchedCategoryIds;
  }

  public void setWatchedCategoryIds(List<Object> watchedCategoryIds) {
    this.watchedCategoryIds = watchedCategoryIds;
  }


  public GetUserExternalId200ResponseUser watchedFirstPostCategoryIds(List<Object> watchedFirstPostCategoryIds) {
    this.watchedFirstPostCategoryIds = watchedFirstPostCategoryIds;
    return this;
  }

  public GetUserExternalId200ResponseUser addWatchedFirstPostCategoryIdsItem(Object watchedFirstPostCategoryIdsItem) {
    if (this.watchedFirstPostCategoryIds == null) {
      this.watchedFirstPostCategoryIds = new ArrayList<>();
    }
    this.watchedFirstPostCategoryIds.add(watchedFirstPostCategoryIdsItem);
    return this;
  }

  /**
   * Get watchedFirstPostCategoryIds
   * @return watchedFirstPostCategoryIds
   */
  @javax.annotation.Nonnull
  public List<Object> getWatchedFirstPostCategoryIds() {
    return watchedFirstPostCategoryIds;
  }

  public void setWatchedFirstPostCategoryIds(List<Object> watchedFirstPostCategoryIds) {
    this.watchedFirstPostCategoryIds = watchedFirstPostCategoryIds;
  }


  public GetUserExternalId200ResponseUser watchedTags(List<Object> watchedTags) {
    this.watchedTags = watchedTags;
    return this;
  }

  public GetUserExternalId200ResponseUser addWatchedTagsItem(Object watchedTagsItem) {
    if (this.watchedTags == null) {
      this.watchedTags = new ArrayList<>();
    }
    this.watchedTags.add(watchedTagsItem);
    return this;
  }

  /**
   * Get watchedTags
   * @return watchedTags
   */
  @javax.annotation.Nonnull
  public List<Object> getWatchedTags() {
    return watchedTags;
  }

  public void setWatchedTags(List<Object> watchedTags) {
    this.watchedTags = watchedTags;
  }


  public GetUserExternalId200ResponseUser watchingFirstPostTags(List<Object> watchingFirstPostTags) {
    this.watchingFirstPostTags = watchingFirstPostTags;
    return this;
  }

  public GetUserExternalId200ResponseUser addWatchingFirstPostTagsItem(Object watchingFirstPostTagsItem) {
    if (this.watchingFirstPostTags == null) {
      this.watchingFirstPostTags = new ArrayList<>();
    }
    this.watchingFirstPostTags.add(watchingFirstPostTagsItem);
    return this;
  }

  /**
   * Get watchingFirstPostTags
   * @return watchingFirstPostTags
   */
  @javax.annotation.Nonnull
  public List<Object> getWatchingFirstPostTags() {
    return watchingFirstPostTags;
  }

  public void setWatchingFirstPostTags(List<Object> watchingFirstPostTags) {
    this.watchingFirstPostTags = watchingFirstPostTags;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetUserExternalId200ResponseUser instance itself
   */
  public GetUserExternalId200ResponseUser putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUserExternalId200ResponseUser getUserExternalId200ResponseUser = (GetUserExternalId200ResponseUser) o;
    return Objects.equals(this.admin, getUserExternalId200ResponseUser.admin) &&
        Objects.equals(this.allowedPmUsernames, getUserExternalId200ResponseUser.allowedPmUsernames) &&
        Objects.equals(this.avatarTemplate, getUserExternalId200ResponseUser.avatarTemplate) &&
        Objects.equals(this.badgeCount, getUserExternalId200ResponseUser.badgeCount) &&
        Objects.equals(this.canBeDeleted, getUserExternalId200ResponseUser.canBeDeleted) &&
        Objects.equals(this.canChangeBio, getUserExternalId200ResponseUser.canChangeBio) &&
        Objects.equals(this.canChangeLocation, getUserExternalId200ResponseUser.canChangeLocation) &&
        Objects.equals(this.canChangeTrackingPreferences, getUserExternalId200ResponseUser.canChangeTrackingPreferences) &&
        Objects.equals(this.canChangeWebsite, getUserExternalId200ResponseUser.canChangeWebsite) &&
        Objects.equals(this.canDeleteAllPosts, getUserExternalId200ResponseUser.canDeleteAllPosts) &&
        Objects.equals(this.canEdit, getUserExternalId200ResponseUser.canEdit) &&
        Objects.equals(this.canEditEmail, getUserExternalId200ResponseUser.canEditEmail) &&
        Objects.equals(this.canEditName, getUserExternalId200ResponseUser.canEditName) &&
        Objects.equals(this.canEditUsername, getUserExternalId200ResponseUser.canEditUsername) &&
        Objects.equals(this.canIgnoreUser, getUserExternalId200ResponseUser.canIgnoreUser) &&
        Objects.equals(this.canMuteUser, getUserExternalId200ResponseUser.canMuteUser) &&
        Objects.equals(this.canSendPrivateMessageToUser, getUserExternalId200ResponseUser.canSendPrivateMessageToUser) &&
        Objects.equals(this.canSendPrivateMessages, getUserExternalId200ResponseUser.canSendPrivateMessages) &&
        Objects.equals(this.canUploadProfileHeader, getUserExternalId200ResponseUser.canUploadProfileHeader) &&
        Objects.equals(this.canUploadUserCardBackground, getUserExternalId200ResponseUser.canUploadUserCardBackground) &&
        Objects.equals(this.createdAt, getUserExternalId200ResponseUser.createdAt) &&
        Objects.equals(this.customFields, getUserExternalId200ResponseUser.customFields) &&
        Objects.equals(this.featuredTopic, getUserExternalId200ResponseUser.featuredTopic) &&
        Objects.equals(this.featuredUserBadgeIds, getUserExternalId200ResponseUser.featuredUserBadgeIds) &&
        Objects.equals(this.flairBgColor, getUserExternalId200ResponseUser.flairBgColor) &&
        Objects.equals(this.flairColor, getUserExternalId200ResponseUser.flairColor) &&
        Objects.equals(this.flairGroupId, getUserExternalId200ResponseUser.flairGroupId) &&
        Objects.equals(this.flairName, getUserExternalId200ResponseUser.flairName) &&
        Objects.equals(this.flairUrl, getUserExternalId200ResponseUser.flairUrl) &&
        Objects.equals(this.groupUsers, getUserExternalId200ResponseUser.groupUsers) &&
        Objects.equals(this.groups, getUserExternalId200ResponseUser.groups) &&
        Objects.equals(this.hasTitleBadges, getUserExternalId200ResponseUser.hasTitleBadges) &&
        Objects.equals(this.id, getUserExternalId200ResponseUser.id) &&
        Objects.equals(this.ignored, getUserExternalId200ResponseUser.ignored) &&
        Objects.equals(this.ignoredUsernames, getUserExternalId200ResponseUser.ignoredUsernames) &&
        Objects.equals(this.invitedBy, getUserExternalId200ResponseUser.invitedBy) &&
        Objects.equals(this.lastPostedAt, getUserExternalId200ResponseUser.lastPostedAt) &&
        Objects.equals(this.lastSeenAt, getUserExternalId200ResponseUser.lastSeenAt) &&
        Objects.equals(this.locale, getUserExternalId200ResponseUser.locale) &&
        Objects.equals(this.mailingListPostsPerDay, getUserExternalId200ResponseUser.mailingListPostsPerDay) &&
        Objects.equals(this.moderator, getUserExternalId200ResponseUser.moderator) &&
        Objects.equals(this.muted, getUserExternalId200ResponseUser.muted) &&
        Objects.equals(this.mutedCategoryIds, getUserExternalId200ResponseUser.mutedCategoryIds) &&
        Objects.equals(this.mutedTags, getUserExternalId200ResponseUser.mutedTags) &&
        Objects.equals(this.mutedUsernames, getUserExternalId200ResponseUser.mutedUsernames) &&
        Objects.equals(this.name, getUserExternalId200ResponseUser.name) &&
        Objects.equals(this.pendingCount, getUserExternalId200ResponseUser.pendingCount) &&
        Objects.equals(this.pendingPostsCount, getUserExternalId200ResponseUser.pendingPostsCount) &&
        Objects.equals(this.postCount, getUserExternalId200ResponseUser.postCount) &&
        Objects.equals(this.primaryGroupId, getUserExternalId200ResponseUser.primaryGroupId) &&
        Objects.equals(this.primaryGroupName, getUserExternalId200ResponseUser.primaryGroupName) &&
        Objects.equals(this.profileViewCount, getUserExternalId200ResponseUser.profileViewCount) &&
        Objects.equals(this.recentTimeRead, getUserExternalId200ResponseUser.recentTimeRead) &&
        Objects.equals(this.regularCategoryIds, getUserExternalId200ResponseUser.regularCategoryIds) &&
        Objects.equals(this.secondFactorBackupEnabled, getUserExternalId200ResponseUser.secondFactorBackupEnabled) &&
        Objects.equals(this.secondFactorEnabled, getUserExternalId200ResponseUser.secondFactorEnabled) &&
        Objects.equals(this.staged, getUserExternalId200ResponseUser.staged) &&
        Objects.equals(this.systemAvatarTemplate, getUserExternalId200ResponseUser.systemAvatarTemplate) &&
        Objects.equals(this.systemAvatarUploadId, getUserExternalId200ResponseUser.systemAvatarUploadId) &&
        Objects.equals(this.timeRead, getUserExternalId200ResponseUser.timeRead) &&
        Objects.equals(this.title, getUserExternalId200ResponseUser.title) &&
        Objects.equals(this.trackedCategoryIds, getUserExternalId200ResponseUser.trackedCategoryIds) &&
        Objects.equals(this.trackedTags, getUserExternalId200ResponseUser.trackedTags) &&
        Objects.equals(this.trustLevel, getUserExternalId200ResponseUser.trustLevel) &&
        Objects.equals(this.uploadedAvatarId, getUserExternalId200ResponseUser.uploadedAvatarId) &&
        Objects.equals(this.useLogoSmallAsAvatar, getUserExternalId200ResponseUser.useLogoSmallAsAvatar) &&
        Objects.equals(this.userApiKeys, getUserExternalId200ResponseUser.userApiKeys) &&
        Objects.equals(this.userAuthTokens, getUserExternalId200ResponseUser.userAuthTokens) &&
        Objects.equals(this.userFields, getUserExternalId200ResponseUser.userFields) &&
        Objects.equals(this.userNotificationSchedule, getUserExternalId200ResponseUser.userNotificationSchedule) &&
        Objects.equals(this.userOption, getUserExternalId200ResponseUser.userOption) &&
        Objects.equals(this.username, getUserExternalId200ResponseUser.username) &&
        Objects.equals(this.watchedCategoryIds, getUserExternalId200ResponseUser.watchedCategoryIds) &&
        Objects.equals(this.watchedFirstPostCategoryIds, getUserExternalId200ResponseUser.watchedFirstPostCategoryIds) &&
        Objects.equals(this.watchedTags, getUserExternalId200ResponseUser.watchedTags) &&
        Objects.equals(this.watchingFirstPostTags, getUserExternalId200ResponseUser.watchingFirstPostTags)&&
        Objects.equals(this.additionalProperties, getUserExternalId200ResponseUser.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, allowedPmUsernames, avatarTemplate, badgeCount, canBeDeleted, canChangeBio, canChangeLocation, canChangeTrackingPreferences, canChangeWebsite, canDeleteAllPosts, canEdit, canEditEmail, canEditName, canEditUsername, canIgnoreUser, canMuteUser, canSendPrivateMessageToUser, canSendPrivateMessages, canUploadProfileHeader, canUploadUserCardBackground, createdAt, customFields, featuredTopic, featuredUserBadgeIds, flairBgColor, flairColor, flairGroupId, flairName, flairUrl, groupUsers, groups, hasTitleBadges, id, ignored, ignoredUsernames, invitedBy, lastPostedAt, lastSeenAt, locale, mailingListPostsPerDay, moderator, muted, mutedCategoryIds, mutedTags, mutedUsernames, name, pendingCount, pendingPostsCount, postCount, primaryGroupId, primaryGroupName, profileViewCount, recentTimeRead, regularCategoryIds, secondFactorBackupEnabled, secondFactorEnabled, staged, systemAvatarTemplate, systemAvatarUploadId, timeRead, title, trackedCategoryIds, trackedTags, trustLevel, uploadedAvatarId, useLogoSmallAsAvatar, userApiKeys, userAuthTokens, userFields, userNotificationSchedule, userOption, username, watchedCategoryIds, watchedFirstPostCategoryIds, watchedTags, watchingFirstPostTags, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUserExternalId200ResponseUser {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    allowedPmUsernames: ").append(toIndentedString(allowedPmUsernames)).append("\n");
    sb.append("    avatarTemplate: ").append(toIndentedString(avatarTemplate)).append("\n");
    sb.append("    badgeCount: ").append(toIndentedString(badgeCount)).append("\n");
    sb.append("    canBeDeleted: ").append(toIndentedString(canBeDeleted)).append("\n");
    sb.append("    canChangeBio: ").append(toIndentedString(canChangeBio)).append("\n");
    sb.append("    canChangeLocation: ").append(toIndentedString(canChangeLocation)).append("\n");
    sb.append("    canChangeTrackingPreferences: ").append(toIndentedString(canChangeTrackingPreferences)).append("\n");
    sb.append("    canChangeWebsite: ").append(toIndentedString(canChangeWebsite)).append("\n");
    sb.append("    canDeleteAllPosts: ").append(toIndentedString(canDeleteAllPosts)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    canEditEmail: ").append(toIndentedString(canEditEmail)).append("\n");
    sb.append("    canEditName: ").append(toIndentedString(canEditName)).append("\n");
    sb.append("    canEditUsername: ").append(toIndentedString(canEditUsername)).append("\n");
    sb.append("    canIgnoreUser: ").append(toIndentedString(canIgnoreUser)).append("\n");
    sb.append("    canMuteUser: ").append(toIndentedString(canMuteUser)).append("\n");
    sb.append("    canSendPrivateMessageToUser: ").append(toIndentedString(canSendPrivateMessageToUser)).append("\n");
    sb.append("    canSendPrivateMessages: ").append(toIndentedString(canSendPrivateMessages)).append("\n");
    sb.append("    canUploadProfileHeader: ").append(toIndentedString(canUploadProfileHeader)).append("\n");
    sb.append("    canUploadUserCardBackground: ").append(toIndentedString(canUploadUserCardBackground)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    featuredTopic: ").append(toIndentedString(featuredTopic)).append("\n");
    sb.append("    featuredUserBadgeIds: ").append(toIndentedString(featuredUserBadgeIds)).append("\n");
    sb.append("    flairBgColor: ").append(toIndentedString(flairBgColor)).append("\n");
    sb.append("    flairColor: ").append(toIndentedString(flairColor)).append("\n");
    sb.append("    flairGroupId: ").append(toIndentedString(flairGroupId)).append("\n");
    sb.append("    flairName: ").append(toIndentedString(flairName)).append("\n");
    sb.append("    flairUrl: ").append(toIndentedString(flairUrl)).append("\n");
    sb.append("    groupUsers: ").append(toIndentedString(groupUsers)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    hasTitleBadges: ").append(toIndentedString(hasTitleBadges)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("    ignoredUsernames: ").append(toIndentedString(ignoredUsernames)).append("\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    lastPostedAt: ").append(toIndentedString(lastPostedAt)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    mailingListPostsPerDay: ").append(toIndentedString(mailingListPostsPerDay)).append("\n");
    sb.append("    moderator: ").append(toIndentedString(moderator)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    mutedCategoryIds: ").append(toIndentedString(mutedCategoryIds)).append("\n");
    sb.append("    mutedTags: ").append(toIndentedString(mutedTags)).append("\n");
    sb.append("    mutedUsernames: ").append(toIndentedString(mutedUsernames)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pendingCount: ").append(toIndentedString(pendingCount)).append("\n");
    sb.append("    pendingPostsCount: ").append(toIndentedString(pendingPostsCount)).append("\n");
    sb.append("    postCount: ").append(toIndentedString(postCount)).append("\n");
    sb.append("    primaryGroupId: ").append(toIndentedString(primaryGroupId)).append("\n");
    sb.append("    primaryGroupName: ").append(toIndentedString(primaryGroupName)).append("\n");
    sb.append("    profileViewCount: ").append(toIndentedString(profileViewCount)).append("\n");
    sb.append("    recentTimeRead: ").append(toIndentedString(recentTimeRead)).append("\n");
    sb.append("    regularCategoryIds: ").append(toIndentedString(regularCategoryIds)).append("\n");
    sb.append("    secondFactorBackupEnabled: ").append(toIndentedString(secondFactorBackupEnabled)).append("\n");
    sb.append("    secondFactorEnabled: ").append(toIndentedString(secondFactorEnabled)).append("\n");
    sb.append("    staged: ").append(toIndentedString(staged)).append("\n");
    sb.append("    systemAvatarTemplate: ").append(toIndentedString(systemAvatarTemplate)).append("\n");
    sb.append("    systemAvatarUploadId: ").append(toIndentedString(systemAvatarUploadId)).append("\n");
    sb.append("    timeRead: ").append(toIndentedString(timeRead)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trackedCategoryIds: ").append(toIndentedString(trackedCategoryIds)).append("\n");
    sb.append("    trackedTags: ").append(toIndentedString(trackedTags)).append("\n");
    sb.append("    trustLevel: ").append(toIndentedString(trustLevel)).append("\n");
    sb.append("    uploadedAvatarId: ").append(toIndentedString(uploadedAvatarId)).append("\n");
    sb.append("    useLogoSmallAsAvatar: ").append(toIndentedString(useLogoSmallAsAvatar)).append("\n");
    sb.append("    userApiKeys: ").append(toIndentedString(userApiKeys)).append("\n");
    sb.append("    userAuthTokens: ").append(toIndentedString(userAuthTokens)).append("\n");
    sb.append("    userFields: ").append(toIndentedString(userFields)).append("\n");
    sb.append("    userNotificationSchedule: ").append(toIndentedString(userNotificationSchedule)).append("\n");
    sb.append("    userOption: ").append(toIndentedString(userOption)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    watchedCategoryIds: ").append(toIndentedString(watchedCategoryIds)).append("\n");
    sb.append("    watchedFirstPostCategoryIds: ").append(toIndentedString(watchedFirstPostCategoryIds)).append("\n");
    sb.append("    watchedTags: ").append(toIndentedString(watchedTags)).append("\n");
    sb.append("    watchingFirstPostTags: ").append(toIndentedString(watchingFirstPostTags)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("allowed_pm_usernames");
    openapiFields.add("avatar_template");
    openapiFields.add("badge_count");
    openapiFields.add("can_be_deleted");
    openapiFields.add("can_change_bio");
    openapiFields.add("can_change_location");
    openapiFields.add("can_change_tracking_preferences");
    openapiFields.add("can_change_website");
    openapiFields.add("can_delete_all_posts");
    openapiFields.add("can_edit");
    openapiFields.add("can_edit_email");
    openapiFields.add("can_edit_name");
    openapiFields.add("can_edit_username");
    openapiFields.add("can_ignore_user");
    openapiFields.add("can_mute_user");
    openapiFields.add("can_send_private_message_to_user");
    openapiFields.add("can_send_private_messages");
    openapiFields.add("can_upload_profile_header");
    openapiFields.add("can_upload_user_card_background");
    openapiFields.add("created_at");
    openapiFields.add("custom_fields");
    openapiFields.add("featured_topic");
    openapiFields.add("featured_user_badge_ids");
    openapiFields.add("flair_bg_color");
    openapiFields.add("flair_color");
    openapiFields.add("flair_group_id");
    openapiFields.add("flair_name");
    openapiFields.add("flair_url");
    openapiFields.add("group_users");
    openapiFields.add("groups");
    openapiFields.add("has_title_badges");
    openapiFields.add("id");
    openapiFields.add("ignored");
    openapiFields.add("ignored_usernames");
    openapiFields.add("invited_by");
    openapiFields.add("last_posted_at");
    openapiFields.add("last_seen_at");
    openapiFields.add("locale");
    openapiFields.add("mailing_list_posts_per_day");
    openapiFields.add("moderator");
    openapiFields.add("muted");
    openapiFields.add("muted_category_ids");
    openapiFields.add("muted_tags");
    openapiFields.add("muted_usernames");
    openapiFields.add("name");
    openapiFields.add("pending_count");
    openapiFields.add("pending_posts_count");
    openapiFields.add("post_count");
    openapiFields.add("primary_group_id");
    openapiFields.add("primary_group_name");
    openapiFields.add("profile_view_count");
    openapiFields.add("recent_time_read");
    openapiFields.add("regular_category_ids");
    openapiFields.add("second_factor_backup_enabled");
    openapiFields.add("second_factor_enabled");
    openapiFields.add("staged");
    openapiFields.add("system_avatar_template");
    openapiFields.add("system_avatar_upload_id");
    openapiFields.add("time_read");
    openapiFields.add("title");
    openapiFields.add("tracked_category_ids");
    openapiFields.add("tracked_tags");
    openapiFields.add("trust_level");
    openapiFields.add("uploaded_avatar_id");
    openapiFields.add("use_logo_small_as_avatar");
    openapiFields.add("user_api_keys");
    openapiFields.add("user_auth_tokens");
    openapiFields.add("user_fields");
    openapiFields.add("user_notification_schedule");
    openapiFields.add("user_option");
    openapiFields.add("username");
    openapiFields.add("watched_category_ids");
    openapiFields.add("watched_first_post_category_ids");
    openapiFields.add("watched_tags");
    openapiFields.add("watching_first_post_tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("admin");
    openapiRequiredFields.add("allowed_pm_usernames");
    openapiRequiredFields.add("avatar_template");
    openapiRequiredFields.add("badge_count");
    openapiRequiredFields.add("can_be_deleted");
    openapiRequiredFields.add("can_change_bio");
    openapiRequiredFields.add("can_change_location");
    openapiRequiredFields.add("can_change_tracking_preferences");
    openapiRequiredFields.add("can_change_website");
    openapiRequiredFields.add("can_delete_all_posts");
    openapiRequiredFields.add("can_edit");
    openapiRequiredFields.add("can_edit_email");
    openapiRequiredFields.add("can_edit_name");
    openapiRequiredFields.add("can_edit_username");
    openapiRequiredFields.add("can_ignore_user");
    openapiRequiredFields.add("can_mute_user");
    openapiRequiredFields.add("can_send_private_message_to_user");
    openapiRequiredFields.add("can_send_private_messages");
    openapiRequiredFields.add("can_upload_profile_header");
    openapiRequiredFields.add("can_upload_user_card_background");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("custom_fields");
    openapiRequiredFields.add("featured_topic");
    openapiRequiredFields.add("featured_user_badge_ids");
    openapiRequiredFields.add("flair_bg_color");
    openapiRequiredFields.add("flair_color");
    openapiRequiredFields.add("flair_group_id");
    openapiRequiredFields.add("flair_name");
    openapiRequiredFields.add("flair_url");
    openapiRequiredFields.add("group_users");
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("has_title_badges");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ignored");
    openapiRequiredFields.add("ignored_usernames");
    openapiRequiredFields.add("invited_by");
    openapiRequiredFields.add("last_posted_at");
    openapiRequiredFields.add("last_seen_at");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("mailing_list_posts_per_day");
    openapiRequiredFields.add("moderator");
    openapiRequiredFields.add("muted");
    openapiRequiredFields.add("muted_category_ids");
    openapiRequiredFields.add("muted_tags");
    openapiRequiredFields.add("muted_usernames");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pending_count");
    openapiRequiredFields.add("post_count");
    openapiRequiredFields.add("primary_group_id");
    openapiRequiredFields.add("primary_group_name");
    openapiRequiredFields.add("profile_view_count");
    openapiRequiredFields.add("recent_time_read");
    openapiRequiredFields.add("regular_category_ids");
    openapiRequiredFields.add("second_factor_enabled");
    openapiRequiredFields.add("staged");
    openapiRequiredFields.add("system_avatar_template");
    openapiRequiredFields.add("system_avatar_upload_id");
    openapiRequiredFields.add("time_read");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("tracked_category_ids");
    openapiRequiredFields.add("tracked_tags");
    openapiRequiredFields.add("trust_level");
    openapiRequiredFields.add("uploaded_avatar_id");
    openapiRequiredFields.add("use_logo_small_as_avatar");
    openapiRequiredFields.add("user_api_keys");
    openapiRequiredFields.add("user_auth_tokens");
    openapiRequiredFields.add("user_notification_schedule");
    openapiRequiredFields.add("user_option");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("watched_category_ids");
    openapiRequiredFields.add("watched_first_post_category_ids");
    openapiRequiredFields.add("watched_tags");
    openapiRequiredFields.add("watching_first_post_tags");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUserExternalId200ResponseUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUserExternalId200ResponseUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUserExternalId200ResponseUser is not found in the empty JSON string", GetUserExternalId200ResponseUser.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUserExternalId200ResponseUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowed_pm_usernames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_pm_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_pm_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_pm_usernames").toString()));
      }
      if (!jsonObj.get("avatar_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_template").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("featured_topic") != null && !jsonObj.get("featured_topic").isJsonNull()) && !jsonObj.get("featured_topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featured_topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featured_topic").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("featured_user_badge_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("featured_user_badge_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `featured_user_badge_ids` to be an array in the JSON string but got `%s`", jsonObj.get("featured_user_badge_ids").toString()));
      }
      if ((jsonObj.get("flair_bg_color") != null && !jsonObj.get("flair_bg_color").isJsonNull()) && !jsonObj.get("flair_bg_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_bg_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_bg_color").toString()));
      }
      if ((jsonObj.get("flair_color") != null && !jsonObj.get("flair_color").isJsonNull()) && !jsonObj.get("flair_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_color").toString()));
      }
      if ((jsonObj.get("flair_group_id") != null && !jsonObj.get("flair_group_id").isJsonNull()) && !jsonObj.get("flair_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_group_id").toString()));
      }
      if ((jsonObj.get("flair_name") != null && !jsonObj.get("flair_name").isJsonNull()) && !jsonObj.get("flair_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_name").toString()));
      }
      if ((jsonObj.get("flair_url") != null && !jsonObj.get("flair_url").isJsonNull()) && !jsonObj.get("flair_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("group_users") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("group_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_users` to be an array in the JSON string but got `%s`", jsonObj.get("group_users").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("groups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ignored_usernames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ignored_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignored_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("ignored_usernames").toString()));
      }
      if ((jsonObj.get("invited_by") != null && !jsonObj.get("invited_by").isJsonNull()) && !jsonObj.get("invited_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invited_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invited_by").toString()));
      }
      if ((jsonObj.get("last_posted_at") != null && !jsonObj.get("last_posted_at").isJsonNull()) && !jsonObj.get("last_posted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_posted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_posted_at").toString()));
      }
      if ((jsonObj.get("last_seen_at") != null && !jsonObj.get("last_seen_at").isJsonNull()) && !jsonObj.get("last_seen_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen_at").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("muted_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("muted_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muted_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("muted_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("muted_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("muted_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muted_tags` to be an array in the JSON string but got `%s`", jsonObj.get("muted_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("muted_usernames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("muted_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muted_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("muted_usernames").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primary_group_id") != null && !jsonObj.get("primary_group_id").isJsonNull()) && !jsonObj.get("primary_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_group_id").toString()));
      }
      if ((jsonObj.get("primary_group_name") != null && !jsonObj.get("primary_group_name").isJsonNull()) && !jsonObj.get("primary_group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_group_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("regular_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("regular_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regular_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("regular_category_ids").toString()));
      }
      if (!jsonObj.get("system_avatar_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_avatar_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_avatar_template").toString()));
      }
      if ((jsonObj.get("system_avatar_upload_id") != null && !jsonObj.get("system_avatar_upload_id").isJsonNull()) && !jsonObj.get("system_avatar_upload_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_avatar_upload_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_avatar_upload_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tracked_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tracked_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracked_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("tracked_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tracked_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tracked_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracked_tags` to be an array in the JSON string but got `%s`", jsonObj.get("tracked_tags").toString()));
      }
      if ((jsonObj.get("uploaded_avatar_id") != null && !jsonObj.get("uploaded_avatar_id").isJsonNull()) && !jsonObj.get("uploaded_avatar_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_avatar_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_avatar_id").toString()));
      }
      if ((jsonObj.get("user_api_keys") != null && !jsonObj.get("user_api_keys").isJsonNull()) && !jsonObj.get("user_api_keys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_api_keys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_api_keys").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_auth_tokens") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_auth_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_auth_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("user_auth_tokens").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watched_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watched_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("watched_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watched_first_post_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watched_first_post_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_first_post_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("watched_first_post_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watched_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watched_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_tags` to be an array in the JSON string but got `%s`", jsonObj.get("watched_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watching_first_post_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watching_first_post_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watching_first_post_tags` to be an array in the JSON string but got `%s`", jsonObj.get("watching_first_post_tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUserExternalId200ResponseUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUserExternalId200ResponseUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUserExternalId200ResponseUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUserExternalId200ResponseUser.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUserExternalId200ResponseUser>() {
           @Override
           public void write(JsonWriter out, GetUserExternalId200ResponseUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUserExternalId200ResponseUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GetUserExternalId200ResponseUser instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUserExternalId200ResponseUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUserExternalId200ResponseUser
   * @throws IOException if the JSON string is invalid with respect to GetUserExternalId200ResponseUser
   */
  public static GetUserExternalId200ResponseUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUserExternalId200ResponseUser.class);
  }

  /**
   * Convert an instance of GetUserExternalId200ResponseUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

