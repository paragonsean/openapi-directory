/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetCategory200ResponseCategoryRequiredTagGroupsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSite200ResponseCategoriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSite200ResponseCategoriesInner {
  public static final String SERIALIZED_NAME_ALLOW_GLOBAL_TAGS = "allow_global_tags";
  @SerializedName(SERIALIZED_NAME_ALLOW_GLOBAL_TAGS)
  private Boolean allowGlobalTags;

  public static final String SERIALIZED_NAME_ALLOWED_TAG_GROUPS = "allowed_tag_groups";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TAG_GROUPS)
  private List<Object> allowedTagGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_TAGS = "allowed_tags";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TAGS)
  private List<Object> allowedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAN_EDIT = "can_edit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_LIST_FILTER = "default_list_filter";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LIST_FILTER)
  private String defaultListFilter;

  public static final String SERIALIZED_NAME_DEFAULT_TOP_PERIOD = "default_top_period";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TOP_PERIOD)
  private String defaultTopPeriod;

  public static final String SERIALIZED_NAME_DEFAULT_VIEW = "default_view";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VIEW)
  private String defaultView;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_EXCERPT = "description_excerpt";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_EXCERPT)
  private String descriptionExcerpt;

  public static final String SERIALIZED_NAME_DESCRIPTION_TEXT = "description_text";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TEXT)
  private String descriptionText;

  public static final String SERIALIZED_NAME_FORM_TEMPLATE_IDS = "form_template_ids";
  @SerializedName(SERIALIZED_NAME_FORM_TEMPLATE_IDS)
  private List<Object> formTemplateIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "has_children";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MINIMUM_REQUIRED_TAGS = "minimum_required_tags";
  @SerializedName(SERIALIZED_NAME_MINIMUM_REQUIRED_TAGS)
  private Integer minimumRequiredTags;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAVIGATE_TO_FIRST_POST_AFTER_READ = "navigate_to_first_post_after_read";
  @SerializedName(SERIALIZED_NAME_NAVIGATE_TO_FIRST_POST_AFTER_READ)
  private Boolean navigateToFirstPostAfterRead;

  public static final String SERIALIZED_NAME_NOTIFICATION_LEVEL = "notification_level";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_LEVEL)
  private Integer notificationLevel;

  public static final String SERIALIZED_NAME_NUM_FEATURED_TOPICS = "num_featured_topics";
  @SerializedName(SERIALIZED_NAME_NUM_FEATURED_TOPICS)
  private Integer numFeaturedTopics;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY_ID = "parent_category_id";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY_ID)
  private Integer parentCategoryId;

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private Integer permission;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_POST_COUNT = "post_count";
  @SerializedName(SERIALIZED_NAME_POST_COUNT)
  private Integer postCount;

  public static final String SERIALIZED_NAME_READ_ONLY_BANNER = "read_only_banner";
  @SerializedName(SERIALIZED_NAME_READ_ONLY_BANNER)
  private String readOnlyBanner;

  public static final String SERIALIZED_NAME_READ_RESTRICTED = "read_restricted";
  @SerializedName(SERIALIZED_NAME_READ_RESTRICTED)
  private Boolean readRestricted;

  public static final String SERIALIZED_NAME_REQUIRED_TAG_GROUPS = "required_tag_groups";
  @SerializedName(SERIALIZED_NAME_REQUIRED_TAG_GROUPS)
  private List<GetCategory200ResponseCategoryRequiredTagGroupsInner> requiredTagGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_SUBCATEGORY_LIST = "show_subcategory_list";
  @SerializedName(SERIALIZED_NAME_SHOW_SUBCATEGORY_LIST)
  private Boolean showSubcategoryList;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SORT_ASCENDING = "sort_ascending";
  @SerializedName(SERIALIZED_NAME_SORT_ASCENDING)
  private String sortAscending;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private String sortOrder;

  public static final String SERIALIZED_NAME_SUBCATEGORY_LIST_STYLE = "subcategory_list_style";
  @SerializedName(SERIALIZED_NAME_SUBCATEGORY_LIST_STYLE)
  private String subcategoryListStyle;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "text_color";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor;

  public static final String SERIALIZED_NAME_TOPIC_COUNT = "topic_count";
  @SerializedName(SERIALIZED_NAME_TOPIC_COUNT)
  private Integer topicCount;

  public static final String SERIALIZED_NAME_TOPIC_TEMPLATE = "topic_template";
  @SerializedName(SERIALIZED_NAME_TOPIC_TEMPLATE)
  private String topicTemplate;

  public static final String SERIALIZED_NAME_TOPIC_URL = "topic_url";
  @SerializedName(SERIALIZED_NAME_TOPIC_URL)
  private String topicUrl;

  public static final String SERIALIZED_NAME_UPLOADED_BACKGROUND = "uploaded_background";
  @SerializedName(SERIALIZED_NAME_UPLOADED_BACKGROUND)
  private String uploadedBackground;

  public static final String SERIALIZED_NAME_UPLOADED_LOGO = "uploaded_logo";
  @SerializedName(SERIALIZED_NAME_UPLOADED_LOGO)
  private String uploadedLogo;

  public static final String SERIALIZED_NAME_UPLOADED_LOGO_DARK = "uploaded_logo_dark";
  @SerializedName(SERIALIZED_NAME_UPLOADED_LOGO_DARK)
  private String uploadedLogoDark;

  public GetSite200ResponseCategoriesInner() {
  }

  public GetSite200ResponseCategoriesInner allowGlobalTags(Boolean allowGlobalTags) {
    this.allowGlobalTags = allowGlobalTags;
    return this;
  }

  /**
   * Get allowGlobalTags
   * @return allowGlobalTags
   */
  @javax.annotation.Nonnull
  public Boolean getAllowGlobalTags() {
    return allowGlobalTags;
  }

  public void setAllowGlobalTags(Boolean allowGlobalTags) {
    this.allowGlobalTags = allowGlobalTags;
  }


  public GetSite200ResponseCategoriesInner allowedTagGroups(List<Object> allowedTagGroups) {
    this.allowedTagGroups = allowedTagGroups;
    return this;
  }

  public GetSite200ResponseCategoriesInner addAllowedTagGroupsItem(Object allowedTagGroupsItem) {
    if (this.allowedTagGroups == null) {
      this.allowedTagGroups = new ArrayList<>();
    }
    this.allowedTagGroups.add(allowedTagGroupsItem);
    return this;
  }

  /**
   * Get allowedTagGroups
   * @return allowedTagGroups
   */
  @javax.annotation.Nonnull
  public List<Object> getAllowedTagGroups() {
    return allowedTagGroups;
  }

  public void setAllowedTagGroups(List<Object> allowedTagGroups) {
    this.allowedTagGroups = allowedTagGroups;
  }


  public GetSite200ResponseCategoriesInner allowedTags(List<Object> allowedTags) {
    this.allowedTags = allowedTags;
    return this;
  }

  public GetSite200ResponseCategoriesInner addAllowedTagsItem(Object allowedTagsItem) {
    if (this.allowedTags == null) {
      this.allowedTags = new ArrayList<>();
    }
    this.allowedTags.add(allowedTagsItem);
    return this;
  }

  /**
   * Get allowedTags
   * @return allowedTags
   */
  @javax.annotation.Nonnull
  public List<Object> getAllowedTags() {
    return allowedTags;
  }

  public void setAllowedTags(List<Object> allowedTags) {
    this.allowedTags = allowedTags;
  }


  public GetSite200ResponseCategoriesInner canEdit(Boolean canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  /**
   * Get canEdit
   * @return canEdit
   */
  @javax.annotation.Nonnull
  public Boolean getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Boolean canEdit) {
    this.canEdit = canEdit;
  }


  public GetSite200ResponseCategoriesInner color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nonnull
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public GetSite200ResponseCategoriesInner customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public GetSite200ResponseCategoriesInner putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public GetSite200ResponseCategoriesInner defaultListFilter(String defaultListFilter) {
    this.defaultListFilter = defaultListFilter;
    return this;
  }

  /**
   * Get defaultListFilter
   * @return defaultListFilter
   */
  @javax.annotation.Nonnull
  public String getDefaultListFilter() {
    return defaultListFilter;
  }

  public void setDefaultListFilter(String defaultListFilter) {
    this.defaultListFilter = defaultListFilter;
  }


  public GetSite200ResponseCategoriesInner defaultTopPeriod(String defaultTopPeriod) {
    this.defaultTopPeriod = defaultTopPeriod;
    return this;
  }

  /**
   * Get defaultTopPeriod
   * @return defaultTopPeriod
   */
  @javax.annotation.Nonnull
  public String getDefaultTopPeriod() {
    return defaultTopPeriod;
  }

  public void setDefaultTopPeriod(String defaultTopPeriod) {
    this.defaultTopPeriod = defaultTopPeriod;
  }


  public GetSite200ResponseCategoriesInner defaultView(String defaultView) {
    this.defaultView = defaultView;
    return this;
  }

  /**
   * Get defaultView
   * @return defaultView
   */
  @javax.annotation.Nullable
  public String getDefaultView() {
    return defaultView;
  }

  public void setDefaultView(String defaultView) {
    this.defaultView = defaultView;
  }


  public GetSite200ResponseCategoriesInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetSite200ResponseCategoriesInner descriptionExcerpt(String descriptionExcerpt) {
    this.descriptionExcerpt = descriptionExcerpt;
    return this;
  }

  /**
   * Get descriptionExcerpt
   * @return descriptionExcerpt
   */
  @javax.annotation.Nullable
  public String getDescriptionExcerpt() {
    return descriptionExcerpt;
  }

  public void setDescriptionExcerpt(String descriptionExcerpt) {
    this.descriptionExcerpt = descriptionExcerpt;
  }


  public GetSite200ResponseCategoriesInner descriptionText(String descriptionText) {
    this.descriptionText = descriptionText;
    return this;
  }

  /**
   * Get descriptionText
   * @return descriptionText
   */
  @javax.annotation.Nullable
  public String getDescriptionText() {
    return descriptionText;
  }

  public void setDescriptionText(String descriptionText) {
    this.descriptionText = descriptionText;
  }


  public GetSite200ResponseCategoriesInner formTemplateIds(List<Object> formTemplateIds) {
    this.formTemplateIds = formTemplateIds;
    return this;
  }

  public GetSite200ResponseCategoriesInner addFormTemplateIdsItem(Object formTemplateIdsItem) {
    if (this.formTemplateIds == null) {
      this.formTemplateIds = new ArrayList<>();
    }
    this.formTemplateIds.add(formTemplateIdsItem);
    return this;
  }

  /**
   * Get formTemplateIds
   * @return formTemplateIds
   */
  @javax.annotation.Nullable
  public List<Object> getFormTemplateIds() {
    return formTemplateIds;
  }

  public void setFormTemplateIds(List<Object> formTemplateIds) {
    this.formTemplateIds = formTemplateIds;
  }


  public GetSite200ResponseCategoriesInner hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nonnull
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public GetSite200ResponseCategoriesInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetSite200ResponseCategoriesInner minimumRequiredTags(Integer minimumRequiredTags) {
    this.minimumRequiredTags = minimumRequiredTags;
    return this;
  }

  /**
   * Get minimumRequiredTags
   * @return minimumRequiredTags
   */
  @javax.annotation.Nonnull
  public Integer getMinimumRequiredTags() {
    return minimumRequiredTags;
  }

  public void setMinimumRequiredTags(Integer minimumRequiredTags) {
    this.minimumRequiredTags = minimumRequiredTags;
  }


  public GetSite200ResponseCategoriesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetSite200ResponseCategoriesInner navigateToFirstPostAfterRead(Boolean navigateToFirstPostAfterRead) {
    this.navigateToFirstPostAfterRead = navigateToFirstPostAfterRead;
    return this;
  }

  /**
   * Get navigateToFirstPostAfterRead
   * @return navigateToFirstPostAfterRead
   */
  @javax.annotation.Nonnull
  public Boolean getNavigateToFirstPostAfterRead() {
    return navigateToFirstPostAfterRead;
  }

  public void setNavigateToFirstPostAfterRead(Boolean navigateToFirstPostAfterRead) {
    this.navigateToFirstPostAfterRead = navigateToFirstPostAfterRead;
  }


  public GetSite200ResponseCategoriesInner notificationLevel(Integer notificationLevel) {
    this.notificationLevel = notificationLevel;
    return this;
  }

  /**
   * Get notificationLevel
   * @return notificationLevel
   */
  @javax.annotation.Nonnull
  public Integer getNotificationLevel() {
    return notificationLevel;
  }

  public void setNotificationLevel(Integer notificationLevel) {
    this.notificationLevel = notificationLevel;
  }


  public GetSite200ResponseCategoriesInner numFeaturedTopics(Integer numFeaturedTopics) {
    this.numFeaturedTopics = numFeaturedTopics;
    return this;
  }

  /**
   * Get numFeaturedTopics
   * @return numFeaturedTopics
   */
  @javax.annotation.Nonnull
  public Integer getNumFeaturedTopics() {
    return numFeaturedTopics;
  }

  public void setNumFeaturedTopics(Integer numFeaturedTopics) {
    this.numFeaturedTopics = numFeaturedTopics;
  }


  public GetSite200ResponseCategoriesInner parentCategoryId(Integer parentCategoryId) {
    this.parentCategoryId = parentCategoryId;
    return this;
  }

  /**
   * Get parentCategoryId
   * @return parentCategoryId
   */
  @javax.annotation.Nullable
  public Integer getParentCategoryId() {
    return parentCategoryId;
  }

  public void setParentCategoryId(Integer parentCategoryId) {
    this.parentCategoryId = parentCategoryId;
  }


  public GetSite200ResponseCategoriesInner permission(Integer permission) {
    this.permission = permission;
    return this;
  }

  /**
   * Get permission
   * @return permission
   */
  @javax.annotation.Nonnull
  public Integer getPermission() {
    return permission;
  }

  public void setPermission(Integer permission) {
    this.permission = permission;
  }


  public GetSite200ResponseCategoriesInner position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public GetSite200ResponseCategoriesInner postCount(Integer postCount) {
    this.postCount = postCount;
    return this;
  }

  /**
   * Get postCount
   * @return postCount
   */
  @javax.annotation.Nonnull
  public Integer getPostCount() {
    return postCount;
  }

  public void setPostCount(Integer postCount) {
    this.postCount = postCount;
  }


  public GetSite200ResponseCategoriesInner readOnlyBanner(String readOnlyBanner) {
    this.readOnlyBanner = readOnlyBanner;
    return this;
  }

  /**
   * Get readOnlyBanner
   * @return readOnlyBanner
   */
  @javax.annotation.Nullable
  public String getReadOnlyBanner() {
    return readOnlyBanner;
  }

  public void setReadOnlyBanner(String readOnlyBanner) {
    this.readOnlyBanner = readOnlyBanner;
  }


  public GetSite200ResponseCategoriesInner readRestricted(Boolean readRestricted) {
    this.readRestricted = readRestricted;
    return this;
  }

  /**
   * Get readRestricted
   * @return readRestricted
   */
  @javax.annotation.Nonnull
  public Boolean getReadRestricted() {
    return readRestricted;
  }

  public void setReadRestricted(Boolean readRestricted) {
    this.readRestricted = readRestricted;
  }


  public GetSite200ResponseCategoriesInner requiredTagGroups(List<GetCategory200ResponseCategoryRequiredTagGroupsInner> requiredTagGroups) {
    this.requiredTagGroups = requiredTagGroups;
    return this;
  }

  public GetSite200ResponseCategoriesInner addRequiredTagGroupsItem(GetCategory200ResponseCategoryRequiredTagGroupsInner requiredTagGroupsItem) {
    if (this.requiredTagGroups == null) {
      this.requiredTagGroups = new ArrayList<>();
    }
    this.requiredTagGroups.add(requiredTagGroupsItem);
    return this;
  }

  /**
   * Get requiredTagGroups
   * @return requiredTagGroups
   */
  @javax.annotation.Nonnull
  public List<GetCategory200ResponseCategoryRequiredTagGroupsInner> getRequiredTagGroups() {
    return requiredTagGroups;
  }

  public void setRequiredTagGroups(List<GetCategory200ResponseCategoryRequiredTagGroupsInner> requiredTagGroups) {
    this.requiredTagGroups = requiredTagGroups;
  }


  public GetSite200ResponseCategoriesInner showSubcategoryList(Boolean showSubcategoryList) {
    this.showSubcategoryList = showSubcategoryList;
    return this;
  }

  /**
   * Get showSubcategoryList
   * @return showSubcategoryList
   */
  @javax.annotation.Nonnull
  public Boolean getShowSubcategoryList() {
    return showSubcategoryList;
  }

  public void setShowSubcategoryList(Boolean showSubcategoryList) {
    this.showSubcategoryList = showSubcategoryList;
  }


  public GetSite200ResponseCategoriesInner slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public GetSite200ResponseCategoriesInner sortAscending(String sortAscending) {
    this.sortAscending = sortAscending;
    return this;
  }

  /**
   * Get sortAscending
   * @return sortAscending
   */
  @javax.annotation.Nullable
  public String getSortAscending() {
    return sortAscending;
  }

  public void setSortAscending(String sortAscending) {
    this.sortAscending = sortAscending;
  }


  public GetSite200ResponseCategoriesInner sortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public String getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
  }


  public GetSite200ResponseCategoriesInner subcategoryListStyle(String subcategoryListStyle) {
    this.subcategoryListStyle = subcategoryListStyle;
    return this;
  }

  /**
   * Get subcategoryListStyle
   * @return subcategoryListStyle
   */
  @javax.annotation.Nonnull
  public String getSubcategoryListStyle() {
    return subcategoryListStyle;
  }

  public void setSubcategoryListStyle(String subcategoryListStyle) {
    this.subcategoryListStyle = subcategoryListStyle;
  }


  public GetSite200ResponseCategoriesInner textColor(String textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * Get textColor
   * @return textColor
   */
  @javax.annotation.Nonnull
  public String getTextColor() {
    return textColor;
  }

  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }


  public GetSite200ResponseCategoriesInner topicCount(Integer topicCount) {
    this.topicCount = topicCount;
    return this;
  }

  /**
   * Get topicCount
   * @return topicCount
   */
  @javax.annotation.Nonnull
  public Integer getTopicCount() {
    return topicCount;
  }

  public void setTopicCount(Integer topicCount) {
    this.topicCount = topicCount;
  }


  public GetSite200ResponseCategoriesInner topicTemplate(String topicTemplate) {
    this.topicTemplate = topicTemplate;
    return this;
  }

  /**
   * Get topicTemplate
   * @return topicTemplate
   */
  @javax.annotation.Nullable
  public String getTopicTemplate() {
    return topicTemplate;
  }

  public void setTopicTemplate(String topicTemplate) {
    this.topicTemplate = topicTemplate;
  }


  public GetSite200ResponseCategoriesInner topicUrl(String topicUrl) {
    this.topicUrl = topicUrl;
    return this;
  }

  /**
   * Get topicUrl
   * @return topicUrl
   */
  @javax.annotation.Nonnull
  public String getTopicUrl() {
    return topicUrl;
  }

  public void setTopicUrl(String topicUrl) {
    this.topicUrl = topicUrl;
  }


  public GetSite200ResponseCategoriesInner uploadedBackground(String uploadedBackground) {
    this.uploadedBackground = uploadedBackground;
    return this;
  }

  /**
   * Get uploadedBackground
   * @return uploadedBackground
   */
  @javax.annotation.Nullable
  public String getUploadedBackground() {
    return uploadedBackground;
  }

  public void setUploadedBackground(String uploadedBackground) {
    this.uploadedBackground = uploadedBackground;
  }


  public GetSite200ResponseCategoriesInner uploadedLogo(String uploadedLogo) {
    this.uploadedLogo = uploadedLogo;
    return this;
  }

  /**
   * Get uploadedLogo
   * @return uploadedLogo
   */
  @javax.annotation.Nullable
  public String getUploadedLogo() {
    return uploadedLogo;
  }

  public void setUploadedLogo(String uploadedLogo) {
    this.uploadedLogo = uploadedLogo;
  }


  public GetSite200ResponseCategoriesInner uploadedLogoDark(String uploadedLogoDark) {
    this.uploadedLogoDark = uploadedLogoDark;
    return this;
  }

  /**
   * Get uploadedLogoDark
   * @return uploadedLogoDark
   */
  @javax.annotation.Nullable
  public String getUploadedLogoDark() {
    return uploadedLogoDark;
  }

  public void setUploadedLogoDark(String uploadedLogoDark) {
    this.uploadedLogoDark = uploadedLogoDark;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetSite200ResponseCategoriesInner instance itself
   */
  public GetSite200ResponseCategoriesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSite200ResponseCategoriesInner getSite200ResponseCategoriesInner = (GetSite200ResponseCategoriesInner) o;
    return Objects.equals(this.allowGlobalTags, getSite200ResponseCategoriesInner.allowGlobalTags) &&
        Objects.equals(this.allowedTagGroups, getSite200ResponseCategoriesInner.allowedTagGroups) &&
        Objects.equals(this.allowedTags, getSite200ResponseCategoriesInner.allowedTags) &&
        Objects.equals(this.canEdit, getSite200ResponseCategoriesInner.canEdit) &&
        Objects.equals(this.color, getSite200ResponseCategoriesInner.color) &&
        Objects.equals(this.customFields, getSite200ResponseCategoriesInner.customFields) &&
        Objects.equals(this.defaultListFilter, getSite200ResponseCategoriesInner.defaultListFilter) &&
        Objects.equals(this.defaultTopPeriod, getSite200ResponseCategoriesInner.defaultTopPeriod) &&
        Objects.equals(this.defaultView, getSite200ResponseCategoriesInner.defaultView) &&
        Objects.equals(this.description, getSite200ResponseCategoriesInner.description) &&
        Objects.equals(this.descriptionExcerpt, getSite200ResponseCategoriesInner.descriptionExcerpt) &&
        Objects.equals(this.descriptionText, getSite200ResponseCategoriesInner.descriptionText) &&
        Objects.equals(this.formTemplateIds, getSite200ResponseCategoriesInner.formTemplateIds) &&
        Objects.equals(this.hasChildren, getSite200ResponseCategoriesInner.hasChildren) &&
        Objects.equals(this.id, getSite200ResponseCategoriesInner.id) &&
        Objects.equals(this.minimumRequiredTags, getSite200ResponseCategoriesInner.minimumRequiredTags) &&
        Objects.equals(this.name, getSite200ResponseCategoriesInner.name) &&
        Objects.equals(this.navigateToFirstPostAfterRead, getSite200ResponseCategoriesInner.navigateToFirstPostAfterRead) &&
        Objects.equals(this.notificationLevel, getSite200ResponseCategoriesInner.notificationLevel) &&
        Objects.equals(this.numFeaturedTopics, getSite200ResponseCategoriesInner.numFeaturedTopics) &&
        Objects.equals(this.parentCategoryId, getSite200ResponseCategoriesInner.parentCategoryId) &&
        Objects.equals(this.permission, getSite200ResponseCategoriesInner.permission) &&
        Objects.equals(this.position, getSite200ResponseCategoriesInner.position) &&
        Objects.equals(this.postCount, getSite200ResponseCategoriesInner.postCount) &&
        Objects.equals(this.readOnlyBanner, getSite200ResponseCategoriesInner.readOnlyBanner) &&
        Objects.equals(this.readRestricted, getSite200ResponseCategoriesInner.readRestricted) &&
        Objects.equals(this.requiredTagGroups, getSite200ResponseCategoriesInner.requiredTagGroups) &&
        Objects.equals(this.showSubcategoryList, getSite200ResponseCategoriesInner.showSubcategoryList) &&
        Objects.equals(this.slug, getSite200ResponseCategoriesInner.slug) &&
        Objects.equals(this.sortAscending, getSite200ResponseCategoriesInner.sortAscending) &&
        Objects.equals(this.sortOrder, getSite200ResponseCategoriesInner.sortOrder) &&
        Objects.equals(this.subcategoryListStyle, getSite200ResponseCategoriesInner.subcategoryListStyle) &&
        Objects.equals(this.textColor, getSite200ResponseCategoriesInner.textColor) &&
        Objects.equals(this.topicCount, getSite200ResponseCategoriesInner.topicCount) &&
        Objects.equals(this.topicTemplate, getSite200ResponseCategoriesInner.topicTemplate) &&
        Objects.equals(this.topicUrl, getSite200ResponseCategoriesInner.topicUrl) &&
        Objects.equals(this.uploadedBackground, getSite200ResponseCategoriesInner.uploadedBackground) &&
        Objects.equals(this.uploadedLogo, getSite200ResponseCategoriesInner.uploadedLogo) &&
        Objects.equals(this.uploadedLogoDark, getSite200ResponseCategoriesInner.uploadedLogoDark)&&
        Objects.equals(this.additionalProperties, getSite200ResponseCategoriesInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowGlobalTags, allowedTagGroups, allowedTags, canEdit, color, customFields, defaultListFilter, defaultTopPeriod, defaultView, description, descriptionExcerpt, descriptionText, formTemplateIds, hasChildren, id, minimumRequiredTags, name, navigateToFirstPostAfterRead, notificationLevel, numFeaturedTopics, parentCategoryId, permission, position, postCount, readOnlyBanner, readRestricted, requiredTagGroups, showSubcategoryList, slug, sortAscending, sortOrder, subcategoryListStyle, textColor, topicCount, topicTemplate, topicUrl, uploadedBackground, uploadedLogo, uploadedLogoDark, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSite200ResponseCategoriesInner {\n");
    sb.append("    allowGlobalTags: ").append(toIndentedString(allowGlobalTags)).append("\n");
    sb.append("    allowedTagGroups: ").append(toIndentedString(allowedTagGroups)).append("\n");
    sb.append("    allowedTags: ").append(toIndentedString(allowedTags)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    defaultListFilter: ").append(toIndentedString(defaultListFilter)).append("\n");
    sb.append("    defaultTopPeriod: ").append(toIndentedString(defaultTopPeriod)).append("\n");
    sb.append("    defaultView: ").append(toIndentedString(defaultView)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionExcerpt: ").append(toIndentedString(descriptionExcerpt)).append("\n");
    sb.append("    descriptionText: ").append(toIndentedString(descriptionText)).append("\n");
    sb.append("    formTemplateIds: ").append(toIndentedString(formTemplateIds)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    minimumRequiredTags: ").append(toIndentedString(minimumRequiredTags)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    navigateToFirstPostAfterRead: ").append(toIndentedString(navigateToFirstPostAfterRead)).append("\n");
    sb.append("    notificationLevel: ").append(toIndentedString(notificationLevel)).append("\n");
    sb.append("    numFeaturedTopics: ").append(toIndentedString(numFeaturedTopics)).append("\n");
    sb.append("    parentCategoryId: ").append(toIndentedString(parentCategoryId)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    postCount: ").append(toIndentedString(postCount)).append("\n");
    sb.append("    readOnlyBanner: ").append(toIndentedString(readOnlyBanner)).append("\n");
    sb.append("    readRestricted: ").append(toIndentedString(readRestricted)).append("\n");
    sb.append("    requiredTagGroups: ").append(toIndentedString(requiredTagGroups)).append("\n");
    sb.append("    showSubcategoryList: ").append(toIndentedString(showSubcategoryList)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    sortAscending: ").append(toIndentedString(sortAscending)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    subcategoryListStyle: ").append(toIndentedString(subcategoryListStyle)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    topicCount: ").append(toIndentedString(topicCount)).append("\n");
    sb.append("    topicTemplate: ").append(toIndentedString(topicTemplate)).append("\n");
    sb.append("    topicUrl: ").append(toIndentedString(topicUrl)).append("\n");
    sb.append("    uploadedBackground: ").append(toIndentedString(uploadedBackground)).append("\n");
    sb.append("    uploadedLogo: ").append(toIndentedString(uploadedLogo)).append("\n");
    sb.append("    uploadedLogoDark: ").append(toIndentedString(uploadedLogoDark)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_global_tags");
    openapiFields.add("allowed_tag_groups");
    openapiFields.add("allowed_tags");
    openapiFields.add("can_edit");
    openapiFields.add("color");
    openapiFields.add("custom_fields");
    openapiFields.add("default_list_filter");
    openapiFields.add("default_top_period");
    openapiFields.add("default_view");
    openapiFields.add("description");
    openapiFields.add("description_excerpt");
    openapiFields.add("description_text");
    openapiFields.add("form_template_ids");
    openapiFields.add("has_children");
    openapiFields.add("id");
    openapiFields.add("minimum_required_tags");
    openapiFields.add("name");
    openapiFields.add("navigate_to_first_post_after_read");
    openapiFields.add("notification_level");
    openapiFields.add("num_featured_topics");
    openapiFields.add("parent_category_id");
    openapiFields.add("permission");
    openapiFields.add("position");
    openapiFields.add("post_count");
    openapiFields.add("read_only_banner");
    openapiFields.add("read_restricted");
    openapiFields.add("required_tag_groups");
    openapiFields.add("show_subcategory_list");
    openapiFields.add("slug");
    openapiFields.add("sort_ascending");
    openapiFields.add("sort_order");
    openapiFields.add("subcategory_list_style");
    openapiFields.add("text_color");
    openapiFields.add("topic_count");
    openapiFields.add("topic_template");
    openapiFields.add("topic_url");
    openapiFields.add("uploaded_background");
    openapiFields.add("uploaded_logo");
    openapiFields.add("uploaded_logo_dark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allow_global_tags");
    openapiRequiredFields.add("allowed_tag_groups");
    openapiRequiredFields.add("allowed_tags");
    openapiRequiredFields.add("can_edit");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("default_list_filter");
    openapiRequiredFields.add("default_top_period");
    openapiRequiredFields.add("default_view");
    openapiRequiredFields.add("has_children");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("minimum_required_tags");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("navigate_to_first_post_after_read");
    openapiRequiredFields.add("notification_level");
    openapiRequiredFields.add("num_featured_topics");
    openapiRequiredFields.add("permission");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("post_count");
    openapiRequiredFields.add("read_only_banner");
    openapiRequiredFields.add("read_restricted");
    openapiRequiredFields.add("required_tag_groups");
    openapiRequiredFields.add("show_subcategory_list");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("sort_ascending");
    openapiRequiredFields.add("sort_order");
    openapiRequiredFields.add("subcategory_list_style");
    openapiRequiredFields.add("text_color");
    openapiRequiredFields.add("topic_count");
    openapiRequiredFields.add("topic_template");
    openapiRequiredFields.add("topic_url");
    openapiRequiredFields.add("uploaded_background");
    openapiRequiredFields.add("uploaded_logo");
    openapiRequiredFields.add("uploaded_logo_dark");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSite200ResponseCategoriesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSite200ResponseCategoriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSite200ResponseCategoriesInner is not found in the empty JSON string", GetSite200ResponseCategoriesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSite200ResponseCategoriesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowed_tag_groups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_tag_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_tag_groups` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_tag_groups").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowed_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_tags` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_tags").toString()));
      }
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (!jsonObj.get("default_list_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_list_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_list_filter").toString()));
      }
      if (!jsonObj.get("default_top_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_top_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_top_period").toString()));
      }
      if ((jsonObj.get("default_view") != null && !jsonObj.get("default_view").isJsonNull()) && !jsonObj.get("default_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_view").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("description_excerpt") != null && !jsonObj.get("description_excerpt").isJsonNull()) && !jsonObj.get("description_excerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_excerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_excerpt").toString()));
      }
      if ((jsonObj.get("description_text") != null && !jsonObj.get("description_text").isJsonNull()) && !jsonObj.get("description_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("form_template_ids") != null && !jsonObj.get("form_template_ids").isJsonNull() && !jsonObj.get("form_template_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_template_ids` to be an array in the JSON string but got `%s`", jsonObj.get("form_template_ids").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("read_only_banner") != null && !jsonObj.get("read_only_banner").isJsonNull()) && !jsonObj.get("read_only_banner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `read_only_banner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("read_only_banner").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("required_tag_groups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("required_tag_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_tag_groups` to be an array in the JSON string but got `%s`", jsonObj.get("required_tag_groups").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("sort_ascending") != null && !jsonObj.get("sort_ascending").isJsonNull()) && !jsonObj.get("sort_ascending").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_ascending` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_ascending").toString()));
      }
      if ((jsonObj.get("sort_order") != null && !jsonObj.get("sort_order").isJsonNull()) && !jsonObj.get("sort_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_order").toString()));
      }
      if (!jsonObj.get("subcategory_list_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subcategory_list_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subcategory_list_style").toString()));
      }
      if (!jsonObj.get("text_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_color").toString()));
      }
      if ((jsonObj.get("topic_template") != null && !jsonObj.get("topic_template").isJsonNull()) && !jsonObj.get("topic_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_template").toString()));
      }
      if (!jsonObj.get("topic_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_url").toString()));
      }
      if ((jsonObj.get("uploaded_background") != null && !jsonObj.get("uploaded_background").isJsonNull()) && !jsonObj.get("uploaded_background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_background").toString()));
      }
      if ((jsonObj.get("uploaded_logo") != null && !jsonObj.get("uploaded_logo").isJsonNull()) && !jsonObj.get("uploaded_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_logo").toString()));
      }
      if ((jsonObj.get("uploaded_logo_dark") != null && !jsonObj.get("uploaded_logo_dark").isJsonNull()) && !jsonObj.get("uploaded_logo_dark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_logo_dark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_logo_dark").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSite200ResponseCategoriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSite200ResponseCategoriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSite200ResponseCategoriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSite200ResponseCategoriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSite200ResponseCategoriesInner>() {
           @Override
           public void write(JsonWriter out, GetSite200ResponseCategoriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSite200ResponseCategoriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GetSite200ResponseCategoriesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSite200ResponseCategoriesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSite200ResponseCategoriesInner
   * @throws IOException if the JSON string is invalid with respect to GetSite200ResponseCategoriesInner
   */
  public static GetSite200ResponseCategoriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSite200ResponseCategoriesInner.class);
  }

  /**
   * Convert an instance of GetSite200ResponseCategoriesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

