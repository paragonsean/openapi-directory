/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminGetUser200Response;
import org.openapitools.client.model.AdminListUsers200ResponseInner;
import org.openapitools.client.model.AnonymizeUser200Response;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.CreateUser200Response;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.DeleteGroup200Response;
import org.openapitools.client.model.DeleteUser200Response;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.GetUserEmails200Response;
import org.openapitools.client.model.GetUserExternalId200Response;
import org.openapitools.client.model.ListUserActions200Response;
import org.openapitools.client.model.ListUserBadges200Response;
import org.openapitools.client.model.ListUsersPublic200Response;
import org.openapitools.client.model.RefreshGravatar200Response;
import org.openapitools.client.model.SendPasswordResetEmail200Response;
import org.openapitools.client.model.SendPasswordResetEmailRequest;
import java.util.Set;
import org.openapitools.client.model.SilenceUser200Response;
import org.openapitools.client.model.SilenceUserRequest;
import org.openapitools.client.model.SuspendUser200Response;
import org.openapitools.client.model.SuspendUserRequest;
import org.openapitools.client.model.UpdateAvatarRequest;
import org.openapitools.client.model.UpdateEmailRequest;
import org.openapitools.client.model.UpdateUser200Response;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUsernameRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminGetUser
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminGetUser(Async)");
        }

        return adminGetUserCall(id, _callback);

    }

    /**
     * Get a user by id
     * 
     * @param id  (required)
     * @return AdminGetUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public AdminGetUser200Response adminGetUser(Integer id) throws ApiException {
        ApiResponse<AdminGetUser200Response> localVarResp = adminGetUserWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a user by id
     * 
     * @param id  (required)
     * @return ApiResponse&lt;AdminGetUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminGetUser200Response> adminGetUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = adminGetUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminGetUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by id (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetUserAsync(Integer id, final ApiCallback<AdminGetUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminGetUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminListUsers
     * @param flag  (required)
     * @param order  (optional)
     * @param asc  (optional)
     * @param page  (optional)
     * @param showEmails  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListUsersCall(String flag, String order, String asc, Integer page, Boolean showEmails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/list/{flag}.json"
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (showEmails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_emails", showEmails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminListUsersValidateBeforeCall(String flag, String order, String asc, Integer page, Boolean showEmails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling adminListUsers(Async)");
        }

        return adminListUsersCall(flag, order, asc, page, showEmails, _callback);

    }

    /**
     * Get a list of users
     * 
     * @param flag  (required)
     * @param order  (optional)
     * @param asc  (optional)
     * @param page  (optional)
     * @param showEmails  (optional)
     * @return Set&lt;AdminListUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public Set<AdminListUsers200ResponseInner> adminListUsers(String flag, String order, String asc, Integer page, Boolean showEmails) throws ApiException {
        ApiResponse<Set<AdminListUsers200ResponseInner>> localVarResp = adminListUsersWithHttpInfo(flag, order, asc, page, showEmails);
        return localVarResp.getData();
    }

    /**
     * Get a list of users
     * 
     * @param flag  (required)
     * @param order  (optional)
     * @param asc  (optional)
     * @param page  (optional)
     * @param showEmails  (optional)
     * @return ApiResponse&lt;Set&lt;AdminListUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<AdminListUsers200ResponseInner>> adminListUsersWithHttpInfo(String flag, String order, String asc, Integer page, Boolean showEmails) throws ApiException {
        okhttp3.Call localVarCall = adminListUsersValidateBeforeCall(flag, order, asc, page, showEmails, null);
        Type localVarReturnType = new TypeToken<Set<AdminListUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of users (asynchronously)
     * 
     * @param flag  (required)
     * @param order  (optional)
     * @param asc  (optional)
     * @param page  (optional)
     * @param showEmails  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListUsersAsync(String flag, String order, String asc, Integer page, Boolean showEmails, final ApiCallback<Set<AdminListUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminListUsersValidateBeforeCall(flag, order, asc, page, showEmails, _callback);
        Type localVarReturnType = new TypeToken<Set<AdminListUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizeUser
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizeUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/anonymize.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizeUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling anonymizeUser(Async)");
        }

        return anonymizeUserCall(id, _callback);

    }

    /**
     * Anonymize a user
     * 
     * @param id  (required)
     * @return AnonymizeUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public AnonymizeUser200Response anonymizeUser(Integer id) throws ApiException {
        ApiResponse<AnonymizeUser200Response> localVarResp = anonymizeUserWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Anonymize a user
     * 
     * @param id  (required)
     * @return ApiResponse&lt;AnonymizeUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnonymizeUser200Response> anonymizeUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = anonymizeUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AnonymizeUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Anonymize a user (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizeUserAsync(Integer id, final ApiCallback<AnonymizeUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizeUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AnonymizeUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePassword
     * @param token  (required)
     * @param changePasswordRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(String token, ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/users/password-reset/{token}.json"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(String token, ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling changePassword(Async)");
        }

        return changePasswordCall(token, changePasswordRequest, _callback);

    }

    /**
     * Change password
     * 
     * @param token  (required)
     * @param changePasswordRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public void changePassword(String token, ChangePasswordRequest changePasswordRequest) throws ApiException {
        changePasswordWithHttpInfo(token, changePasswordRequest);
    }

    /**
     * Change password
     * 
     * @param token  (required)
     * @param changePasswordRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(String token, ChangePasswordRequest changePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(token, changePasswordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change password (asynchronously)
     * 
     * @param token  (required)
     * @param changePasswordRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(String token, ChangePasswordRequest changePasswordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(token, changePasswordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param createUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(String apiKey, String apiUsername, CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/users.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String apiKey, String apiUsername, CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createUser(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling createUser(Async)");
        }

        return createUserCall(apiKey, apiUsername, createUserRequest, _callback);

    }

    /**
     * Creates a user
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param createUserRequest  (optional)
     * @return CreateUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
     </table>
     */
    public CreateUser200Response createUser(String apiKey, String apiUsername, CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<CreateUser200Response> localVarResp = createUserWithHttpInfo(apiKey, apiUsername, createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a user
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param createUserRequest  (optional)
     * @return ApiResponse&lt;CreateUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUser200Response> createUserWithHttpInfo(String apiKey, String apiUsername, CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(apiKey, apiUsername, createUserRequest, null);
        Type localVarReturnType = new TypeToken<CreateUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a user (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param createUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(String apiKey, String apiUsername, CreateUserRequest createUserRequest, final ApiCallback<CreateUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(apiKey, apiUsername, createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param id  (required)
     * @param deleteUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(Integer id, DeleteUserRequest deleteUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(Integer id, DeleteUserRequest deleteUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUser(Async)");
        }

        return deleteUserCall(id, deleteUserRequest, _callback);

    }

    /**
     * Delete a user
     * 
     * @param id  (required)
     * @param deleteUserRequest  (optional)
     * @return DeleteUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUser200Response deleteUser(Integer id, DeleteUserRequest deleteUserRequest) throws ApiException {
        ApiResponse<DeleteUser200Response> localVarResp = deleteUserWithHttpInfo(id, deleteUserRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a user
     * 
     * @param id  (required)
     * @param deleteUserRequest  (optional)
     * @return ApiResponse&lt;DeleteUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteUser200Response> deleteUserWithHttpInfo(Integer id, DeleteUserRequest deleteUserRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, deleteUserRequest, null);
        Type localVarReturnType = new TypeToken<DeleteUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a user (asynchronously)
     * 
     * @param id  (required)
     * @param deleteUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(Integer id, DeleteUserRequest deleteUserRequest, final ApiCallback<DeleteUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, deleteUserRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String apiKey, String apiUsername, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String apiKey, String apiUsername, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUser(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUser(Async)");
        }

        return getUserCall(apiKey, apiUsername, username, _callback);

    }

    /**
     * Get a single user by username
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @return GetUserExternalId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserExternalId200Response getUser(String apiKey, String apiUsername, String username) throws ApiException {
        ApiResponse<GetUserExternalId200Response> localVarResp = getUserWithHttpInfo(apiKey, apiUsername, username);
        return localVarResp.getData();
    }

    /**
     * Get a single user by username
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @return ApiResponse&lt;GetUserExternalId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserExternalId200Response> getUserWithHttpInfo(String apiKey, String apiUsername, String username) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(apiKey, apiUsername, username, null);
        Type localVarReturnType = new TypeToken<GetUserExternalId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single user by username (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String apiKey, String apiUsername, String username, final ApiCallback<GetUserExternalId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(apiKey, apiUsername, username, _callback);
        Type localVarReturnType = new TypeToken<GetUserExternalId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserEmails
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserEmailsCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/{username}/emails.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserEmailsValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserEmails(Async)");
        }

        return getUserEmailsCall(username, _callback);

    }

    /**
     * Get email addresses belonging to a user
     * 
     * @param username  (required)
     * @return GetUserEmails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserEmails200Response getUserEmails(String username) throws ApiException {
        ApiResponse<GetUserEmails200Response> localVarResp = getUserEmailsWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Get email addresses belonging to a user
     * 
     * @param username  (required)
     * @return ApiResponse&lt;GetUserEmails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserEmails200Response> getUserEmailsWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getUserEmailsValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<GetUserEmails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get email addresses belonging to a user (asynchronously)
     * 
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserEmailsAsync(String username, final ApiCallback<GetUserEmails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserEmailsValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<GetUserEmails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserExternalId
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param externalId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserExternalIdCall(String apiKey, String apiUsername, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/by-external/{external_id}.json"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserExternalIdValidateBeforeCall(String apiKey, String apiUsername, String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserExternalId(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getUserExternalId(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getUserExternalId(Async)");
        }

        return getUserExternalIdCall(apiKey, apiUsername, externalId, _callback);

    }

    /**
     * Get a user by external_id
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param externalId  (required)
     * @return GetUserExternalId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserExternalId200Response getUserExternalId(String apiKey, String apiUsername, String externalId) throws ApiException {
        ApiResponse<GetUserExternalId200Response> localVarResp = getUserExternalIdWithHttpInfo(apiKey, apiUsername, externalId);
        return localVarResp.getData();
    }

    /**
     * Get a user by external_id
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param externalId  (required)
     * @return ApiResponse&lt;GetUserExternalId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserExternalId200Response> getUserExternalIdWithHttpInfo(String apiKey, String apiUsername, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getUserExternalIdValidateBeforeCall(apiKey, apiUsername, externalId, null);
        Type localVarReturnType = new TypeToken<GetUserExternalId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by external_id (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param externalId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserExternalIdAsync(String apiKey, String apiUsername, String externalId, final ApiCallback<GetUserExternalId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserExternalIdValidateBeforeCall(apiKey, apiUsername, externalId, _callback);
        Type localVarReturnType = new TypeToken<GetUserExternalId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserIdentiyProviderExternalId
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param provider Authentication provider name. Can be found in the provider callback URL: &#x60;/auth/{provider}/callback&#x60; (required)
     * @param externalId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserIdentiyProviderExternalIdCall(String apiKey, String apiUsername, String provider, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/by-external/{provider}/{external_id}.json"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserIdentiyProviderExternalIdValidateBeforeCall(String apiKey, String apiUsername, String provider, String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserIdentiyProviderExternalId(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getUserIdentiyProviderExternalId(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling getUserIdentiyProviderExternalId(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getUserIdentiyProviderExternalId(Async)");
        }

        return getUserIdentiyProviderExternalIdCall(apiKey, apiUsername, provider, externalId, _callback);

    }

    /**
     * Get a user by identity provider external ID
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param provider Authentication provider name. Can be found in the provider callback URL: &#x60;/auth/{provider}/callback&#x60; (required)
     * @param externalId  (required)
     * @return GetUserExternalId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserExternalId200Response getUserIdentiyProviderExternalId(String apiKey, String apiUsername, String provider, String externalId) throws ApiException {
        ApiResponse<GetUserExternalId200Response> localVarResp = getUserIdentiyProviderExternalIdWithHttpInfo(apiKey, apiUsername, provider, externalId);
        return localVarResp.getData();
    }

    /**
     * Get a user by identity provider external ID
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param provider Authentication provider name. Can be found in the provider callback URL: &#x60;/auth/{provider}/callback&#x60; (required)
     * @param externalId  (required)
     * @return ApiResponse&lt;GetUserExternalId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserExternalId200Response> getUserIdentiyProviderExternalIdWithHttpInfo(String apiKey, String apiUsername, String provider, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getUserIdentiyProviderExternalIdValidateBeforeCall(apiKey, apiUsername, provider, externalId, null);
        Type localVarReturnType = new TypeToken<GetUserExternalId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by identity provider external ID (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param provider Authentication provider name. Can be found in the provider callback URL: &#x60;/auth/{provider}/callback&#x60; (required)
     * @param externalId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserIdentiyProviderExternalIdAsync(String apiKey, String apiUsername, String provider, String externalId, final ApiCallback<GetUserExternalId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserIdentiyProviderExternalIdValidateBeforeCall(apiKey, apiUsername, provider, externalId, _callback);
        Type localVarReturnType = new TypeToken<GetUserExternalId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserActions
     * @param offset  (required)
     * @param username  (required)
     * @param filter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserActionsCall(Integer offset, String username, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_actions.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserActionsValidateBeforeCall(Integer offset, String username, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listUserActions(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listUserActions(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling listUserActions(Async)");
        }

        return listUserActionsCall(offset, username, filter, _callback);

    }

    /**
     * Get a list of user actions
     * 
     * @param offset  (required)
     * @param username  (required)
     * @param filter  (required)
     * @return ListUserActions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ListUserActions200Response listUserActions(Integer offset, String username, String filter) throws ApiException {
        ApiResponse<ListUserActions200Response> localVarResp = listUserActionsWithHttpInfo(offset, username, filter);
        return localVarResp.getData();
    }

    /**
     * Get a list of user actions
     * 
     * @param offset  (required)
     * @param username  (required)
     * @param filter  (required)
     * @return ApiResponse&lt;ListUserActions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserActions200Response> listUserActionsWithHttpInfo(Integer offset, String username, String filter) throws ApiException {
        okhttp3.Call localVarCall = listUserActionsValidateBeforeCall(offset, username, filter, null);
        Type localVarReturnType = new TypeToken<ListUserActions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of user actions (asynchronously)
     * 
     * @param offset  (required)
     * @param username  (required)
     * @param filter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserActionsAsync(Integer offset, String username, String filter, final ApiCallback<ListUserActions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserActionsValidateBeforeCall(offset, username, filter, _callback);
        Type localVarReturnType = new TypeToken<ListUserActions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserBadges_0
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserBadges_0Call(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-badges/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserBadges_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listUserBadges_0(Async)");
        }

        return listUserBadges_0Call(username, _callback);

    }

    /**
     * List badges for a user
     * 
     * @param username  (required)
     * @return ListUserBadges200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListUserBadges200Response listUserBadges_0(String username) throws ApiException {
        ApiResponse<ListUserBadges200Response> localVarResp = listUserBadges_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * List badges for a user
     * 
     * @param username  (required)
     * @return ApiResponse&lt;ListUserBadges200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserBadges200Response> listUserBadges_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = listUserBadges_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ListUserBadges200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List badges for a user (asynchronously)
     * 
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserBadges_0Async(String username, final ApiCallback<ListUserBadges200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserBadges_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ListUserBadges200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsersPublic
     * @param period  (required)
     * @param order  (required)
     * @param asc  (optional)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersPublicCall(String period, String order, String asc, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directory_items.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersPublicValidateBeforeCall(String period, String order, String asc, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling listUsersPublic(Async)");
        }

        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling listUsersPublic(Async)");
        }

        return listUsersPublicCall(period, order, asc, page, _callback);

    }

    /**
     * Get a public list of users
     * 
     * @param period  (required)
     * @param order  (required)
     * @param asc  (optional)
     * @param page  (optional)
     * @return ListUsersPublic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersPublic200Response listUsersPublic(String period, String order, String asc, Integer page) throws ApiException {
        ApiResponse<ListUsersPublic200Response> localVarResp = listUsersPublicWithHttpInfo(period, order, asc, page);
        return localVarResp.getData();
    }

    /**
     * Get a public list of users
     * 
     * @param period  (required)
     * @param order  (required)
     * @param asc  (optional)
     * @param page  (optional)
     * @return ApiResponse&lt;ListUsersPublic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsersPublic200Response> listUsersPublicWithHttpInfo(String period, String order, String asc, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listUsersPublicValidateBeforeCall(period, order, asc, page, null);
        Type localVarReturnType = new TypeToken<ListUsersPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a public list of users (asynchronously)
     * 
     * @param period  (required)
     * @param order  (required)
     * @param asc  (optional)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersPublicAsync(String period, String order, String asc, Integer page, final ApiCallback<ListUsersPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersPublicValidateBeforeCall(period, order, asc, page, _callback);
        Type localVarReturnType = new TypeToken<ListUsersPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logOutUser
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logOutUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/log_out.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logOutUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logOutUser(Async)");
        }

        return logOutUserCall(id, _callback);

    }

    /**
     * Log a user out
     * 
     * @param id  (required)
     * @return DeleteGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGroup200Response logOutUser(Integer id) throws ApiException {
        ApiResponse<DeleteGroup200Response> localVarResp = logOutUserWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Log a user out
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DeleteGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGroup200Response> logOutUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = logOutUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log a user out (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logOutUserAsync(Integer id, final ApiCallback<DeleteGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logOutUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshGravatar
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshGravatarCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_avatar/{username}/refresh_gravatar.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshGravatarValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling refreshGravatar(Async)");
        }

        return refreshGravatarCall(username, _callback);

    }

    /**
     * Refresh gravatar
     * 
     * @param username  (required)
     * @return RefreshGravatar200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public RefreshGravatar200Response refreshGravatar(String username) throws ApiException {
        ApiResponse<RefreshGravatar200Response> localVarResp = refreshGravatarWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Refresh gravatar
     * 
     * @param username  (required)
     * @return ApiResponse&lt;RefreshGravatar200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshGravatar200Response> refreshGravatarWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = refreshGravatarValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<RefreshGravatar200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh gravatar (asynchronously)
     * 
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshGravatarAsync(String username, final ApiCallback<RefreshGravatar200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshGravatarValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<RefreshGravatar200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPasswordResetEmail
     * @param sendPasswordResetEmailRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPasswordResetEmailCall(SendPasswordResetEmailRequest sendPasswordResetEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendPasswordResetEmailRequest;

        // create path and map variables
        String localVarPath = "/session/forgot_password.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPasswordResetEmailValidateBeforeCall(SendPasswordResetEmailRequest sendPasswordResetEmailRequest, final ApiCallback _callback) throws ApiException {
        return sendPasswordResetEmailCall(sendPasswordResetEmailRequest, _callback);

    }

    /**
     * Send password reset email
     * 
     * @param sendPasswordResetEmailRequest  (optional)
     * @return SendPasswordResetEmail200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public SendPasswordResetEmail200Response sendPasswordResetEmail(SendPasswordResetEmailRequest sendPasswordResetEmailRequest) throws ApiException {
        ApiResponse<SendPasswordResetEmail200Response> localVarResp = sendPasswordResetEmailWithHttpInfo(sendPasswordResetEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Send password reset email
     * 
     * @param sendPasswordResetEmailRequest  (optional)
     * @return ApiResponse&lt;SendPasswordResetEmail200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendPasswordResetEmail200Response> sendPasswordResetEmailWithHttpInfo(SendPasswordResetEmailRequest sendPasswordResetEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendPasswordResetEmailValidateBeforeCall(sendPasswordResetEmailRequest, null);
        Type localVarReturnType = new TypeToken<SendPasswordResetEmail200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send password reset email (asynchronously)
     * 
     * @param sendPasswordResetEmailRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPasswordResetEmailAsync(SendPasswordResetEmailRequest sendPasswordResetEmailRequest, final ApiCallback<SendPasswordResetEmail200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPasswordResetEmailValidateBeforeCall(sendPasswordResetEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<SendPasswordResetEmail200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for silenceUser
     * @param id  (required)
     * @param silenceUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call silenceUserCall(Integer id, SilenceUserRequest silenceUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = silenceUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/silence.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call silenceUserValidateBeforeCall(Integer id, SilenceUserRequest silenceUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling silenceUser(Async)");
        }

        return silenceUserCall(id, silenceUserRequest, _callback);

    }

    /**
     * Silence a user
     * 
     * @param id  (required)
     * @param silenceUserRequest  (optional)
     * @return SilenceUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public SilenceUser200Response silenceUser(Integer id, SilenceUserRequest silenceUserRequest) throws ApiException {
        ApiResponse<SilenceUser200Response> localVarResp = silenceUserWithHttpInfo(id, silenceUserRequest);
        return localVarResp.getData();
    }

    /**
     * Silence a user
     * 
     * @param id  (required)
     * @param silenceUserRequest  (optional)
     * @return ApiResponse&lt;SilenceUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SilenceUser200Response> silenceUserWithHttpInfo(Integer id, SilenceUserRequest silenceUserRequest) throws ApiException {
        okhttp3.Call localVarCall = silenceUserValidateBeforeCall(id, silenceUserRequest, null);
        Type localVarReturnType = new TypeToken<SilenceUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Silence a user (asynchronously)
     * 
     * @param id  (required)
     * @param silenceUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call silenceUserAsync(Integer id, SilenceUserRequest silenceUserRequest, final ApiCallback<SilenceUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = silenceUserValidateBeforeCall(id, silenceUserRequest, _callback);
        Type localVarReturnType = new TypeToken<SilenceUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendUser
     * @param id  (required)
     * @param suspendUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendUserCall(Integer id, SuspendUserRequest suspendUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = suspendUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/suspend.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendUserValidateBeforeCall(Integer id, SuspendUserRequest suspendUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling suspendUser(Async)");
        }

        return suspendUserCall(id, suspendUserRequest, _callback);

    }

    /**
     * Suspend a user
     * 
     * @param id  (required)
     * @param suspendUserRequest  (optional)
     * @return SuspendUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public SuspendUser200Response suspendUser(Integer id, SuspendUserRequest suspendUserRequest) throws ApiException {
        ApiResponse<SuspendUser200Response> localVarResp = suspendUserWithHttpInfo(id, suspendUserRequest);
        return localVarResp.getData();
    }

    /**
     * Suspend a user
     * 
     * @param id  (required)
     * @param suspendUserRequest  (optional)
     * @return ApiResponse&lt;SuspendUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuspendUser200Response> suspendUserWithHttpInfo(Integer id, SuspendUserRequest suspendUserRequest) throws ApiException {
        okhttp3.Call localVarCall = suspendUserValidateBeforeCall(id, suspendUserRequest, null);
        Type localVarReturnType = new TypeToken<SuspendUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suspend a user (asynchronously)
     * 
     * @param id  (required)
     * @param suspendUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendUserAsync(Integer id, SuspendUserRequest suspendUserRequest, final ApiCallback<SuspendUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendUserValidateBeforeCall(id, suspendUserRequest, _callback);
        Type localVarReturnType = new TypeToken<SuspendUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAvatar
     * @param username  (required)
     * @param updateAvatarRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAvatarCall(String username, UpdateAvatarRequest updateAvatarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAvatarRequest;

        // create path and map variables
        String localVarPath = "/u/{username}/preferences/avatar/pick.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAvatarValidateBeforeCall(String username, UpdateAvatarRequest updateAvatarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateAvatar(Async)");
        }

        return updateAvatarCall(username, updateAvatarRequest, _callback);

    }

    /**
     * Update avatar
     * 
     * @param username  (required)
     * @param updateAvatarRequest  (optional)
     * @return DeleteGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGroup200Response updateAvatar(String username, UpdateAvatarRequest updateAvatarRequest) throws ApiException {
        ApiResponse<DeleteGroup200Response> localVarResp = updateAvatarWithHttpInfo(username, updateAvatarRequest);
        return localVarResp.getData();
    }

    /**
     * Update avatar
     * 
     * @param username  (required)
     * @param updateAvatarRequest  (optional)
     * @return ApiResponse&lt;DeleteGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGroup200Response> updateAvatarWithHttpInfo(String username, UpdateAvatarRequest updateAvatarRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAvatarValidateBeforeCall(username, updateAvatarRequest, null);
        Type localVarReturnType = new TypeToken<DeleteGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update avatar (asynchronously)
     * 
     * @param username  (required)
     * @param updateAvatarRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAvatarAsync(String username, UpdateAvatarRequest updateAvatarRequest, final ApiCallback<DeleteGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAvatarValidateBeforeCall(username, updateAvatarRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmail
     * @param username  (required)
     * @param updateEmailRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailCall(String username, UpdateEmailRequest updateEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmailRequest;

        // create path and map variables
        String localVarPath = "/u/{username}/preferences/email.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailValidateBeforeCall(String username, UpdateEmailRequest updateEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateEmail(Async)");
        }

        return updateEmailCall(username, updateEmailRequest, _callback);

    }

    /**
     * Update email
     * 
     * @param username  (required)
     * @param updateEmailRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
     </table>
     */
    public void updateEmail(String username, UpdateEmailRequest updateEmailRequest) throws ApiException {
        updateEmailWithHttpInfo(username, updateEmailRequest);
    }

    /**
     * Update email
     * 
     * @param username  (required)
     * @param updateEmailRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateEmailWithHttpInfo(String username, UpdateEmailRequest updateEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(username, updateEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update email (asynchronously)
     * 
     * @param username  (required)
     * @param updateEmailRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailAsync(String username, UpdateEmailRequest updateEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(username, updateEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @param updateUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String apiKey, String apiUsername, String username, UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/u/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String apiKey, String apiUsername, String username, UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateUser(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateUser(Async)");
        }

        return updateUserCall(apiKey, apiUsername, username, updateUserRequest, _callback);

    }

    /**
     * Update a user
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @param updateUserRequest  (optional)
     * @return UpdateUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUser200Response updateUser(String apiKey, String apiUsername, String username, UpdateUserRequest updateUserRequest) throws ApiException {
        ApiResponse<UpdateUser200Response> localVarResp = updateUserWithHttpInfo(apiKey, apiUsername, username, updateUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update a user
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @param updateUserRequest  (optional)
     * @return ApiResponse&lt;UpdateUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUser200Response> updateUserWithHttpInfo(String apiKey, String apiUsername, String username, UpdateUserRequest updateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(apiKey, apiUsername, username, updateUserRequest, null);
        Type localVarReturnType = new TypeToken<UpdateUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @param updateUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String apiKey, String apiUsername, String username, UpdateUserRequest updateUserRequest, final ApiCallback<UpdateUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(apiKey, apiUsername, username, updateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUsername
     * @param username  (required)
     * @param updateUsernameRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsernameCall(String username, UpdateUsernameRequest updateUsernameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUsernameRequest;

        // create path and map variables
        String localVarPath = "/u/{username}/preferences/username.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsernameValidateBeforeCall(String username, UpdateUsernameRequest updateUsernameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateUsername(Async)");
        }

        return updateUsernameCall(username, updateUsernameRequest, _callback);

    }

    /**
     * Update username
     * 
     * @param username  (required)
     * @param updateUsernameRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
     </table>
     */
    public void updateUsername(String username, UpdateUsernameRequest updateUsernameRequest) throws ApiException {
        updateUsernameWithHttpInfo(username, updateUsernameRequest);
    }

    /**
     * Update username
     * 
     * @param username  (required)
     * @param updateUsernameRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUsernameWithHttpInfo(String username, UpdateUsernameRequest updateUsernameRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUsernameValidateBeforeCall(username, updateUsernameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update username (asynchronously)
     * 
     * @param username  (required)
     * @param updateUsernameRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsernameAsync(String username, UpdateUsernameRequest updateUsernameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsernameValidateBeforeCall(username, updateUsernameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
