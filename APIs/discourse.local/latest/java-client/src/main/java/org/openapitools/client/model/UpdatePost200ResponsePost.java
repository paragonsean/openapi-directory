/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateTopicPostPM200ResponseActionsSummaryInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePost200ResponsePost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePost200ResponsePost {
  public static final String SERIALIZED_NAME_ACTIONS_SUMMARY = "actions_summary";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUMMARY)
  private List<CreateTopicPostPM200ResponseActionsSummaryInner> actionsSummary = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_AVATAR_TEMPLATE = "avatar_template";
  @SerializedName(SERIALIZED_NAME_AVATAR_TEMPLATE)
  private String avatarTemplate;

  public static final String SERIALIZED_NAME_BOOKMARKED = "bookmarked";
  @SerializedName(SERIALIZED_NAME_BOOKMARKED)
  private Boolean bookmarked;

  public static final String SERIALIZED_NAME_CAN_DELETE = "can_delete";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE)
  private Boolean canDelete;

  public static final String SERIALIZED_NAME_CAN_EDIT = "can_edit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CAN_RECOVER = "can_recover";
  @SerializedName(SERIALIZED_NAME_CAN_RECOVER)
  private Boolean canRecover;

  public static final String SERIALIZED_NAME_CAN_VIEW_EDIT_HISTORY = "can_view_edit_history";
  @SerializedName(SERIALIZED_NAME_CAN_VIEW_EDIT_HISTORY)
  private Boolean canViewEditHistory;

  public static final String SERIALIZED_NAME_CAN_WIKI = "can_wiki";
  @SerializedName(SERIALIZED_NAME_CAN_WIKI)
  private Boolean canWiki;

  public static final String SERIALIZED_NAME_COOKED = "cooked";
  @SerializedName(SERIALIZED_NAME_COOKED)
  private String cooked;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private String deletedAt;

  public static final String SERIALIZED_NAME_DISPLAY_USERNAME = "display_username";
  @SerializedName(SERIALIZED_NAME_DISPLAY_USERNAME)
  private String displayUsername;

  public static final String SERIALIZED_NAME_DRAFT_SEQUENCE = "draft_sequence";
  @SerializedName(SERIALIZED_NAME_DRAFT_SEQUENCE)
  private Integer draftSequence;

  public static final String SERIALIZED_NAME_EDIT_REASON = "edit_reason";
  @SerializedName(SERIALIZED_NAME_EDIT_REASON)
  private String editReason;

  public static final String SERIALIZED_NAME_FLAIR_BG_COLOR = "flair_bg_color";
  @SerializedName(SERIALIZED_NAME_FLAIR_BG_COLOR)
  private String flairBgColor;

  public static final String SERIALIZED_NAME_FLAIR_COLOR = "flair_color";
  @SerializedName(SERIALIZED_NAME_FLAIR_COLOR)
  private String flairColor;

  public static final String SERIALIZED_NAME_FLAIR_NAME = "flair_name";
  @SerializedName(SERIALIZED_NAME_FLAIR_NAME)
  private String flairName;

  public static final String SERIALIZED_NAME_FLAIR_URL = "flair_url";
  @SerializedName(SERIALIZED_NAME_FLAIR_URL)
  private String flairUrl;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INCOMING_LINK_COUNT = "incoming_link_count";
  @SerializedName(SERIALIZED_NAME_INCOMING_LINK_COUNT)
  private Integer incomingLinkCount;

  public static final String SERIALIZED_NAME_MENTIONED_USERS = "mentioned_users";
  @SerializedName(SERIALIZED_NAME_MENTIONED_USERS)
  private List<Object> mentionedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODERATOR = "moderator";
  @SerializedName(SERIALIZED_NAME_MODERATOR)
  private Boolean moderator;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POST_NUMBER = "post_number";
  @SerializedName(SERIALIZED_NAME_POST_NUMBER)
  private Integer postNumber;

  public static final String SERIALIZED_NAME_POST_TYPE = "post_type";
  @SerializedName(SERIALIZED_NAME_POST_TYPE)
  private Integer postType;

  public static final String SERIALIZED_NAME_PRIMARY_GROUP_NAME = "primary_group_name";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUP_NAME)
  private String primaryGroupName;

  public static final String SERIALIZED_NAME_QUOTE_COUNT = "quote_count";
  @SerializedName(SERIALIZED_NAME_QUOTE_COUNT)
  private Integer quoteCount;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  public static final String SERIALIZED_NAME_READERS_COUNT = "readers_count";
  @SerializedName(SERIALIZED_NAME_READERS_COUNT)
  private Integer readersCount;

  public static final String SERIALIZED_NAME_READS = "reads";
  @SerializedName(SERIALIZED_NAME_READS)
  private Integer reads;

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_REPLY_TO_POST_NUMBER = "reply_to_post_number";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_POST_NUMBER)
  private String replyToPostNumber;

  public static final String SERIALIZED_NAME_REVIEWABLE_ID = "reviewable_id";
  @SerializedName(SERIALIZED_NAME_REVIEWABLE_ID)
  private String reviewableId;

  public static final String SERIALIZED_NAME_REVIEWABLE_SCORE_COUNT = "reviewable_score_count";
  @SerializedName(SERIALIZED_NAME_REVIEWABLE_SCORE_COUNT)
  private Integer reviewableScoreCount;

  public static final String SERIALIZED_NAME_REVIEWABLE_SCORE_PENDING_COUNT = "reviewable_score_pending_count";
  @SerializedName(SERIALIZED_NAME_REVIEWABLE_SCORE_PENDING_COUNT)
  private Integer reviewableScorePendingCount;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Object score = null;

  public static final String SERIALIZED_NAME_STAFF = "staff";
  @SerializedName(SERIALIZED_NAME_STAFF)
  private Boolean staff;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topic_id";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private Integer topicId;

  public static final String SERIALIZED_NAME_TOPIC_SLUG = "topic_slug";
  @SerializedName(SERIALIZED_NAME_TOPIC_SLUG)
  private String topicSlug;

  public static final String SERIALIZED_NAME_TRUST_LEVEL = "trust_level";
  @SerializedName(SERIALIZED_NAME_TRUST_LEVEL)
  private Integer trustLevel;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_USER_DELETED = "user_deleted";
  @SerializedName(SERIALIZED_NAME_USER_DELETED)
  private Boolean userDeleted;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_TITLE = "user_title";
  @SerializedName(SERIALIZED_NAME_USER_TITLE)
  private String userTitle;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WIKI = "wiki";
  @SerializedName(SERIALIZED_NAME_WIKI)
  private Boolean wiki;

  public static final String SERIALIZED_NAME_YOURS = "yours";
  @SerializedName(SERIALIZED_NAME_YOURS)
  private Boolean yours;

  public UpdatePost200ResponsePost() {
  }

  public UpdatePost200ResponsePost actionsSummary(List<CreateTopicPostPM200ResponseActionsSummaryInner> actionsSummary) {
    this.actionsSummary = actionsSummary;
    return this;
  }

  public UpdatePost200ResponsePost addActionsSummaryItem(CreateTopicPostPM200ResponseActionsSummaryInner actionsSummaryItem) {
    if (this.actionsSummary == null) {
      this.actionsSummary = new ArrayList<>();
    }
    this.actionsSummary.add(actionsSummaryItem);
    return this;
  }

  /**
   * Get actionsSummary
   * @return actionsSummary
   */
  @javax.annotation.Nonnull
  public List<CreateTopicPostPM200ResponseActionsSummaryInner> getActionsSummary() {
    return actionsSummary;
  }

  public void setActionsSummary(List<CreateTopicPostPM200ResponseActionsSummaryInner> actionsSummary) {
    this.actionsSummary = actionsSummary;
  }


  public UpdatePost200ResponsePost admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Get admin
   * @return admin
   */
  @javax.annotation.Nonnull
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public UpdatePost200ResponsePost avatarTemplate(String avatarTemplate) {
    this.avatarTemplate = avatarTemplate;
    return this;
  }

  /**
   * Get avatarTemplate
   * @return avatarTemplate
   */
  @javax.annotation.Nonnull
  public String getAvatarTemplate() {
    return avatarTemplate;
  }

  public void setAvatarTemplate(String avatarTemplate) {
    this.avatarTemplate = avatarTemplate;
  }


  public UpdatePost200ResponsePost bookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
    return this;
  }

  /**
   * Get bookmarked
   * @return bookmarked
   */
  @javax.annotation.Nonnull
  public Boolean getBookmarked() {
    return bookmarked;
  }

  public void setBookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
  }


  public UpdatePost200ResponsePost canDelete(Boolean canDelete) {
    this.canDelete = canDelete;
    return this;
  }

  /**
   * Get canDelete
   * @return canDelete
   */
  @javax.annotation.Nonnull
  public Boolean getCanDelete() {
    return canDelete;
  }

  public void setCanDelete(Boolean canDelete) {
    this.canDelete = canDelete;
  }


  public UpdatePost200ResponsePost canEdit(Boolean canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  /**
   * Get canEdit
   * @return canEdit
   */
  @javax.annotation.Nonnull
  public Boolean getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Boolean canEdit) {
    this.canEdit = canEdit;
  }


  public UpdatePost200ResponsePost canRecover(Boolean canRecover) {
    this.canRecover = canRecover;
    return this;
  }

  /**
   * Get canRecover
   * @return canRecover
   */
  @javax.annotation.Nonnull
  public Boolean getCanRecover() {
    return canRecover;
  }

  public void setCanRecover(Boolean canRecover) {
    this.canRecover = canRecover;
  }


  public UpdatePost200ResponsePost canViewEditHistory(Boolean canViewEditHistory) {
    this.canViewEditHistory = canViewEditHistory;
    return this;
  }

  /**
   * Get canViewEditHistory
   * @return canViewEditHistory
   */
  @javax.annotation.Nonnull
  public Boolean getCanViewEditHistory() {
    return canViewEditHistory;
  }

  public void setCanViewEditHistory(Boolean canViewEditHistory) {
    this.canViewEditHistory = canViewEditHistory;
  }


  public UpdatePost200ResponsePost canWiki(Boolean canWiki) {
    this.canWiki = canWiki;
    return this;
  }

  /**
   * Get canWiki
   * @return canWiki
   */
  @javax.annotation.Nonnull
  public Boolean getCanWiki() {
    return canWiki;
  }

  public void setCanWiki(Boolean canWiki) {
    this.canWiki = canWiki;
  }


  public UpdatePost200ResponsePost cooked(String cooked) {
    this.cooked = cooked;
    return this;
  }

  /**
   * Get cooked
   * @return cooked
   */
  @javax.annotation.Nonnull
  public String getCooked() {
    return cooked;
  }

  public void setCooked(String cooked) {
    this.cooked = cooked;
  }


  public UpdatePost200ResponsePost createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public UpdatePost200ResponsePost deletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public String getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
  }


  public UpdatePost200ResponsePost displayUsername(String displayUsername) {
    this.displayUsername = displayUsername;
    return this;
  }

  /**
   * Get displayUsername
   * @return displayUsername
   */
  @javax.annotation.Nullable
  public String getDisplayUsername() {
    return displayUsername;
  }

  public void setDisplayUsername(String displayUsername) {
    this.displayUsername = displayUsername;
  }


  public UpdatePost200ResponsePost draftSequence(Integer draftSequence) {
    this.draftSequence = draftSequence;
    return this;
  }

  /**
   * Get draftSequence
   * @return draftSequence
   */
  @javax.annotation.Nonnull
  public Integer getDraftSequence() {
    return draftSequence;
  }

  public void setDraftSequence(Integer draftSequence) {
    this.draftSequence = draftSequence;
  }


  public UpdatePost200ResponsePost editReason(String editReason) {
    this.editReason = editReason;
    return this;
  }

  /**
   * Get editReason
   * @return editReason
   */
  @javax.annotation.Nullable
  public String getEditReason() {
    return editReason;
  }

  public void setEditReason(String editReason) {
    this.editReason = editReason;
  }


  public UpdatePost200ResponsePost flairBgColor(String flairBgColor) {
    this.flairBgColor = flairBgColor;
    return this;
  }

  /**
   * Get flairBgColor
   * @return flairBgColor
   */
  @javax.annotation.Nullable
  public String getFlairBgColor() {
    return flairBgColor;
  }

  public void setFlairBgColor(String flairBgColor) {
    this.flairBgColor = flairBgColor;
  }


  public UpdatePost200ResponsePost flairColor(String flairColor) {
    this.flairColor = flairColor;
    return this;
  }

  /**
   * Get flairColor
   * @return flairColor
   */
  @javax.annotation.Nullable
  public String getFlairColor() {
    return flairColor;
  }

  public void setFlairColor(String flairColor) {
    this.flairColor = flairColor;
  }


  public UpdatePost200ResponsePost flairName(String flairName) {
    this.flairName = flairName;
    return this;
  }

  /**
   * Get flairName
   * @return flairName
   */
  @javax.annotation.Nullable
  public String getFlairName() {
    return flairName;
  }

  public void setFlairName(String flairName) {
    this.flairName = flairName;
  }


  public UpdatePost200ResponsePost flairUrl(String flairUrl) {
    this.flairUrl = flairUrl;
    return this;
  }

  /**
   * Get flairUrl
   * @return flairUrl
   */
  @javax.annotation.Nullable
  public String getFlairUrl() {
    return flairUrl;
  }

  public void setFlairUrl(String flairUrl) {
    this.flairUrl = flairUrl;
  }


  public UpdatePost200ResponsePost hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Get hidden
   * @return hidden
   */
  @javax.annotation.Nonnull
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public UpdatePost200ResponsePost id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UpdatePost200ResponsePost incomingLinkCount(Integer incomingLinkCount) {
    this.incomingLinkCount = incomingLinkCount;
    return this;
  }

  /**
   * Get incomingLinkCount
   * @return incomingLinkCount
   */
  @javax.annotation.Nonnull
  public Integer getIncomingLinkCount() {
    return incomingLinkCount;
  }

  public void setIncomingLinkCount(Integer incomingLinkCount) {
    this.incomingLinkCount = incomingLinkCount;
  }


  public UpdatePost200ResponsePost mentionedUsers(List<Object> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
    return this;
  }

  public UpdatePost200ResponsePost addMentionedUsersItem(Object mentionedUsersItem) {
    if (this.mentionedUsers == null) {
      this.mentionedUsers = new ArrayList<>();
    }
    this.mentionedUsers.add(mentionedUsersItem);
    return this;
  }

  /**
   * Get mentionedUsers
   * @return mentionedUsers
   */
  @javax.annotation.Nullable
  public List<Object> getMentionedUsers() {
    return mentionedUsers;
  }

  public void setMentionedUsers(List<Object> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
  }


  public UpdatePost200ResponsePost moderator(Boolean moderator) {
    this.moderator = moderator;
    return this;
  }

  /**
   * Get moderator
   * @return moderator
   */
  @javax.annotation.Nonnull
  public Boolean getModerator() {
    return moderator;
  }

  public void setModerator(Boolean moderator) {
    this.moderator = moderator;
  }


  public UpdatePost200ResponsePost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdatePost200ResponsePost postNumber(Integer postNumber) {
    this.postNumber = postNumber;
    return this;
  }

  /**
   * Get postNumber
   * @return postNumber
   */
  @javax.annotation.Nonnull
  public Integer getPostNumber() {
    return postNumber;
  }

  public void setPostNumber(Integer postNumber) {
    this.postNumber = postNumber;
  }


  public UpdatePost200ResponsePost postType(Integer postType) {
    this.postType = postType;
    return this;
  }

  /**
   * Get postType
   * @return postType
   */
  @javax.annotation.Nonnull
  public Integer getPostType() {
    return postType;
  }

  public void setPostType(Integer postType) {
    this.postType = postType;
  }


  public UpdatePost200ResponsePost primaryGroupName(String primaryGroupName) {
    this.primaryGroupName = primaryGroupName;
    return this;
  }

  /**
   * Get primaryGroupName
   * @return primaryGroupName
   */
  @javax.annotation.Nullable
  public String getPrimaryGroupName() {
    return primaryGroupName;
  }

  public void setPrimaryGroupName(String primaryGroupName) {
    this.primaryGroupName = primaryGroupName;
  }


  public UpdatePost200ResponsePost quoteCount(Integer quoteCount) {
    this.quoteCount = quoteCount;
    return this;
  }

  /**
   * Get quoteCount
   * @return quoteCount
   */
  @javax.annotation.Nonnull
  public Integer getQuoteCount() {
    return quoteCount;
  }

  public void setQuoteCount(Integer quoteCount) {
    this.quoteCount = quoteCount;
  }


  public UpdatePost200ResponsePost raw(String raw) {
    this.raw = raw;
    return this;
  }

  /**
   * Get raw
   * @return raw
   */
  @javax.annotation.Nonnull
  public String getRaw() {
    return raw;
  }

  public void setRaw(String raw) {
    this.raw = raw;
  }


  public UpdatePost200ResponsePost readersCount(Integer readersCount) {
    this.readersCount = readersCount;
    return this;
  }

  /**
   * Get readersCount
   * @return readersCount
   */
  @javax.annotation.Nonnull
  public Integer getReadersCount() {
    return readersCount;
  }

  public void setReadersCount(Integer readersCount) {
    this.readersCount = readersCount;
  }


  public UpdatePost200ResponsePost reads(Integer reads) {
    this.reads = reads;
    return this;
  }

  /**
   * Get reads
   * @return reads
   */
  @javax.annotation.Nonnull
  public Integer getReads() {
    return reads;
  }

  public void setReads(Integer reads) {
    this.reads = reads;
  }


  public UpdatePost200ResponsePost replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Get replyCount
   * @return replyCount
   */
  @javax.annotation.Nonnull
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public UpdatePost200ResponsePost replyToPostNumber(String replyToPostNumber) {
    this.replyToPostNumber = replyToPostNumber;
    return this;
  }

  /**
   * Get replyToPostNumber
   * @return replyToPostNumber
   */
  @javax.annotation.Nullable
  public String getReplyToPostNumber() {
    return replyToPostNumber;
  }

  public void setReplyToPostNumber(String replyToPostNumber) {
    this.replyToPostNumber = replyToPostNumber;
  }


  public UpdatePost200ResponsePost reviewableId(String reviewableId) {
    this.reviewableId = reviewableId;
    return this;
  }

  /**
   * Get reviewableId
   * @return reviewableId
   */
  @javax.annotation.Nullable
  public String getReviewableId() {
    return reviewableId;
  }

  public void setReviewableId(String reviewableId) {
    this.reviewableId = reviewableId;
  }


  public UpdatePost200ResponsePost reviewableScoreCount(Integer reviewableScoreCount) {
    this.reviewableScoreCount = reviewableScoreCount;
    return this;
  }

  /**
   * Get reviewableScoreCount
   * @return reviewableScoreCount
   */
  @javax.annotation.Nonnull
  public Integer getReviewableScoreCount() {
    return reviewableScoreCount;
  }

  public void setReviewableScoreCount(Integer reviewableScoreCount) {
    this.reviewableScoreCount = reviewableScoreCount;
  }


  public UpdatePost200ResponsePost reviewableScorePendingCount(Integer reviewableScorePendingCount) {
    this.reviewableScorePendingCount = reviewableScorePendingCount;
    return this;
  }

  /**
   * Get reviewableScorePendingCount
   * @return reviewableScorePendingCount
   */
  @javax.annotation.Nonnull
  public Integer getReviewableScorePendingCount() {
    return reviewableScorePendingCount;
  }

  public void setReviewableScorePendingCount(Integer reviewableScorePendingCount) {
    this.reviewableScorePendingCount = reviewableScorePendingCount;
  }


  public UpdatePost200ResponsePost score(Object score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Object getScore() {
    return score;
  }

  public void setScore(Object score) {
    this.score = score;
  }


  public UpdatePost200ResponsePost staff(Boolean staff) {
    this.staff = staff;
    return this;
  }

  /**
   * Get staff
   * @return staff
   */
  @javax.annotation.Nonnull
  public Boolean getStaff() {
    return staff;
  }

  public void setStaff(Boolean staff) {
    this.staff = staff;
  }


  public UpdatePost200ResponsePost topicId(Integer topicId) {
    this.topicId = topicId;
    return this;
  }

  /**
   * Get topicId
   * @return topicId
   */
  @javax.annotation.Nonnull
  public Integer getTopicId() {
    return topicId;
  }

  public void setTopicId(Integer topicId) {
    this.topicId = topicId;
  }


  public UpdatePost200ResponsePost topicSlug(String topicSlug) {
    this.topicSlug = topicSlug;
    return this;
  }

  /**
   * Get topicSlug
   * @return topicSlug
   */
  @javax.annotation.Nonnull
  public String getTopicSlug() {
    return topicSlug;
  }

  public void setTopicSlug(String topicSlug) {
    this.topicSlug = topicSlug;
  }


  public UpdatePost200ResponsePost trustLevel(Integer trustLevel) {
    this.trustLevel = trustLevel;
    return this;
  }

  /**
   * Get trustLevel
   * @return trustLevel
   */
  @javax.annotation.Nonnull
  public Integer getTrustLevel() {
    return trustLevel;
  }

  public void setTrustLevel(Integer trustLevel) {
    this.trustLevel = trustLevel;
  }


  public UpdatePost200ResponsePost updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public UpdatePost200ResponsePost userDeleted(Boolean userDeleted) {
    this.userDeleted = userDeleted;
    return this;
  }

  /**
   * Get userDeleted
   * @return userDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getUserDeleted() {
    return userDeleted;
  }

  public void setUserDeleted(Boolean userDeleted) {
    this.userDeleted = userDeleted;
  }


  public UpdatePost200ResponsePost userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public UpdatePost200ResponsePost userTitle(String userTitle) {
    this.userTitle = userTitle;
    return this;
  }

  /**
   * Get userTitle
   * @return userTitle
   */
  @javax.annotation.Nullable
  public String getUserTitle() {
    return userTitle;
  }

  public void setUserTitle(String userTitle) {
    this.userTitle = userTitle;
  }


  public UpdatePost200ResponsePost username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public UpdatePost200ResponsePost version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public UpdatePost200ResponsePost wiki(Boolean wiki) {
    this.wiki = wiki;
    return this;
  }

  /**
   * Get wiki
   * @return wiki
   */
  @javax.annotation.Nonnull
  public Boolean getWiki() {
    return wiki;
  }

  public void setWiki(Boolean wiki) {
    this.wiki = wiki;
  }


  public UpdatePost200ResponsePost yours(Boolean yours) {
    this.yours = yours;
    return this;
  }

  /**
   * Get yours
   * @return yours
   */
  @javax.annotation.Nonnull
  public Boolean getYours() {
    return yours;
  }

  public void setYours(Boolean yours) {
    this.yours = yours;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdatePost200ResponsePost instance itself
   */
  public UpdatePost200ResponsePost putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePost200ResponsePost updatePost200ResponsePost = (UpdatePost200ResponsePost) o;
    return Objects.equals(this.actionsSummary, updatePost200ResponsePost.actionsSummary) &&
        Objects.equals(this.admin, updatePost200ResponsePost.admin) &&
        Objects.equals(this.avatarTemplate, updatePost200ResponsePost.avatarTemplate) &&
        Objects.equals(this.bookmarked, updatePost200ResponsePost.bookmarked) &&
        Objects.equals(this.canDelete, updatePost200ResponsePost.canDelete) &&
        Objects.equals(this.canEdit, updatePost200ResponsePost.canEdit) &&
        Objects.equals(this.canRecover, updatePost200ResponsePost.canRecover) &&
        Objects.equals(this.canViewEditHistory, updatePost200ResponsePost.canViewEditHistory) &&
        Objects.equals(this.canWiki, updatePost200ResponsePost.canWiki) &&
        Objects.equals(this.cooked, updatePost200ResponsePost.cooked) &&
        Objects.equals(this.createdAt, updatePost200ResponsePost.createdAt) &&
        Objects.equals(this.deletedAt, updatePost200ResponsePost.deletedAt) &&
        Objects.equals(this.displayUsername, updatePost200ResponsePost.displayUsername) &&
        Objects.equals(this.draftSequence, updatePost200ResponsePost.draftSequence) &&
        Objects.equals(this.editReason, updatePost200ResponsePost.editReason) &&
        Objects.equals(this.flairBgColor, updatePost200ResponsePost.flairBgColor) &&
        Objects.equals(this.flairColor, updatePost200ResponsePost.flairColor) &&
        Objects.equals(this.flairName, updatePost200ResponsePost.flairName) &&
        Objects.equals(this.flairUrl, updatePost200ResponsePost.flairUrl) &&
        Objects.equals(this.hidden, updatePost200ResponsePost.hidden) &&
        Objects.equals(this.id, updatePost200ResponsePost.id) &&
        Objects.equals(this.incomingLinkCount, updatePost200ResponsePost.incomingLinkCount) &&
        Objects.equals(this.mentionedUsers, updatePost200ResponsePost.mentionedUsers) &&
        Objects.equals(this.moderator, updatePost200ResponsePost.moderator) &&
        Objects.equals(this.name, updatePost200ResponsePost.name) &&
        Objects.equals(this.postNumber, updatePost200ResponsePost.postNumber) &&
        Objects.equals(this.postType, updatePost200ResponsePost.postType) &&
        Objects.equals(this.primaryGroupName, updatePost200ResponsePost.primaryGroupName) &&
        Objects.equals(this.quoteCount, updatePost200ResponsePost.quoteCount) &&
        Objects.equals(this.raw, updatePost200ResponsePost.raw) &&
        Objects.equals(this.readersCount, updatePost200ResponsePost.readersCount) &&
        Objects.equals(this.reads, updatePost200ResponsePost.reads) &&
        Objects.equals(this.replyCount, updatePost200ResponsePost.replyCount) &&
        Objects.equals(this.replyToPostNumber, updatePost200ResponsePost.replyToPostNumber) &&
        Objects.equals(this.reviewableId, updatePost200ResponsePost.reviewableId) &&
        Objects.equals(this.reviewableScoreCount, updatePost200ResponsePost.reviewableScoreCount) &&
        Objects.equals(this.reviewableScorePendingCount, updatePost200ResponsePost.reviewableScorePendingCount) &&
        Objects.equals(this.score, updatePost200ResponsePost.score) &&
        Objects.equals(this.staff, updatePost200ResponsePost.staff) &&
        Objects.equals(this.topicId, updatePost200ResponsePost.topicId) &&
        Objects.equals(this.topicSlug, updatePost200ResponsePost.topicSlug) &&
        Objects.equals(this.trustLevel, updatePost200ResponsePost.trustLevel) &&
        Objects.equals(this.updatedAt, updatePost200ResponsePost.updatedAt) &&
        Objects.equals(this.userDeleted, updatePost200ResponsePost.userDeleted) &&
        Objects.equals(this.userId, updatePost200ResponsePost.userId) &&
        Objects.equals(this.userTitle, updatePost200ResponsePost.userTitle) &&
        Objects.equals(this.username, updatePost200ResponsePost.username) &&
        Objects.equals(this.version, updatePost200ResponsePost.version) &&
        Objects.equals(this.wiki, updatePost200ResponsePost.wiki) &&
        Objects.equals(this.yours, updatePost200ResponsePost.yours)&&
        Objects.equals(this.additionalProperties, updatePost200ResponsePost.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsSummary, admin, avatarTemplate, bookmarked, canDelete, canEdit, canRecover, canViewEditHistory, canWiki, cooked, createdAt, deletedAt, displayUsername, draftSequence, editReason, flairBgColor, flairColor, flairName, flairUrl, hidden, id, incomingLinkCount, mentionedUsers, moderator, name, postNumber, postType, primaryGroupName, quoteCount, raw, readersCount, reads, replyCount, replyToPostNumber, reviewableId, reviewableScoreCount, reviewableScorePendingCount, score, staff, topicId, topicSlug, trustLevel, updatedAt, userDeleted, userId, userTitle, username, version, wiki, yours, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePost200ResponsePost {\n");
    sb.append("    actionsSummary: ").append(toIndentedString(actionsSummary)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    avatarTemplate: ").append(toIndentedString(avatarTemplate)).append("\n");
    sb.append("    bookmarked: ").append(toIndentedString(bookmarked)).append("\n");
    sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    canRecover: ").append(toIndentedString(canRecover)).append("\n");
    sb.append("    canViewEditHistory: ").append(toIndentedString(canViewEditHistory)).append("\n");
    sb.append("    canWiki: ").append(toIndentedString(canWiki)).append("\n");
    sb.append("    cooked: ").append(toIndentedString(cooked)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    displayUsername: ").append(toIndentedString(displayUsername)).append("\n");
    sb.append("    draftSequence: ").append(toIndentedString(draftSequence)).append("\n");
    sb.append("    editReason: ").append(toIndentedString(editReason)).append("\n");
    sb.append("    flairBgColor: ").append(toIndentedString(flairBgColor)).append("\n");
    sb.append("    flairColor: ").append(toIndentedString(flairColor)).append("\n");
    sb.append("    flairName: ").append(toIndentedString(flairName)).append("\n");
    sb.append("    flairUrl: ").append(toIndentedString(flairUrl)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    incomingLinkCount: ").append(toIndentedString(incomingLinkCount)).append("\n");
    sb.append("    mentionedUsers: ").append(toIndentedString(mentionedUsers)).append("\n");
    sb.append("    moderator: ").append(toIndentedString(moderator)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postNumber: ").append(toIndentedString(postNumber)).append("\n");
    sb.append("    postType: ").append(toIndentedString(postType)).append("\n");
    sb.append("    primaryGroupName: ").append(toIndentedString(primaryGroupName)).append("\n");
    sb.append("    quoteCount: ").append(toIndentedString(quoteCount)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    readersCount: ").append(toIndentedString(readersCount)).append("\n");
    sb.append("    reads: ").append(toIndentedString(reads)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    replyToPostNumber: ").append(toIndentedString(replyToPostNumber)).append("\n");
    sb.append("    reviewableId: ").append(toIndentedString(reviewableId)).append("\n");
    sb.append("    reviewableScoreCount: ").append(toIndentedString(reviewableScoreCount)).append("\n");
    sb.append("    reviewableScorePendingCount: ").append(toIndentedString(reviewableScorePendingCount)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    staff: ").append(toIndentedString(staff)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("    topicSlug: ").append(toIndentedString(topicSlug)).append("\n");
    sb.append("    trustLevel: ").append(toIndentedString(trustLevel)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userDeleted: ").append(toIndentedString(userDeleted)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userTitle: ").append(toIndentedString(userTitle)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("    yours: ").append(toIndentedString(yours)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions_summary");
    openapiFields.add("admin");
    openapiFields.add("avatar_template");
    openapiFields.add("bookmarked");
    openapiFields.add("can_delete");
    openapiFields.add("can_edit");
    openapiFields.add("can_recover");
    openapiFields.add("can_view_edit_history");
    openapiFields.add("can_wiki");
    openapiFields.add("cooked");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("display_username");
    openapiFields.add("draft_sequence");
    openapiFields.add("edit_reason");
    openapiFields.add("flair_bg_color");
    openapiFields.add("flair_color");
    openapiFields.add("flair_name");
    openapiFields.add("flair_url");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("incoming_link_count");
    openapiFields.add("mentioned_users");
    openapiFields.add("moderator");
    openapiFields.add("name");
    openapiFields.add("post_number");
    openapiFields.add("post_type");
    openapiFields.add("primary_group_name");
    openapiFields.add("quote_count");
    openapiFields.add("raw");
    openapiFields.add("readers_count");
    openapiFields.add("reads");
    openapiFields.add("reply_count");
    openapiFields.add("reply_to_post_number");
    openapiFields.add("reviewable_id");
    openapiFields.add("reviewable_score_count");
    openapiFields.add("reviewable_score_pending_count");
    openapiFields.add("score");
    openapiFields.add("staff");
    openapiFields.add("topic_id");
    openapiFields.add("topic_slug");
    openapiFields.add("trust_level");
    openapiFields.add("updated_at");
    openapiFields.add("user_deleted");
    openapiFields.add("user_id");
    openapiFields.add("user_title");
    openapiFields.add("username");
    openapiFields.add("version");
    openapiFields.add("wiki");
    openapiFields.add("yours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actions_summary");
    openapiRequiredFields.add("admin");
    openapiRequiredFields.add("avatar_template");
    openapiRequiredFields.add("bookmarked");
    openapiRequiredFields.add("can_delete");
    openapiRequiredFields.add("can_edit");
    openapiRequiredFields.add("can_recover");
    openapiRequiredFields.add("can_view_edit_history");
    openapiRequiredFields.add("can_wiki");
    openapiRequiredFields.add("cooked");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("deleted_at");
    openapiRequiredFields.add("draft_sequence");
    openapiRequiredFields.add("edit_reason");
    openapiRequiredFields.add("flair_bg_color");
    openapiRequiredFields.add("flair_color");
    openapiRequiredFields.add("flair_name");
    openapiRequiredFields.add("flair_url");
    openapiRequiredFields.add("hidden");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("incoming_link_count");
    openapiRequiredFields.add("moderator");
    openapiRequiredFields.add("post_number");
    openapiRequiredFields.add("post_type");
    openapiRequiredFields.add("primary_group_name");
    openapiRequiredFields.add("quote_count");
    openapiRequiredFields.add("raw");
    openapiRequiredFields.add("readers_count");
    openapiRequiredFields.add("reads");
    openapiRequiredFields.add("reply_count");
    openapiRequiredFields.add("reply_to_post_number");
    openapiRequiredFields.add("reviewable_id");
    openapiRequiredFields.add("reviewable_score_count");
    openapiRequiredFields.add("reviewable_score_pending_count");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("staff");
    openapiRequiredFields.add("topic_id");
    openapiRequiredFields.add("topic_slug");
    openapiRequiredFields.add("trust_level");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("user_deleted");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("user_title");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("wiki");
    openapiRequiredFields.add("yours");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePost200ResponsePost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePost200ResponsePost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePost200ResponsePost is not found in the empty JSON string", UpdatePost200ResponsePost.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePost200ResponsePost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("actions_summary") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("actions_summary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions_summary` to be an array in the JSON string but got `%s`", jsonObj.get("actions_summary").toString()));
      }
      if (!jsonObj.get("avatar_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_template").toString()));
      }
      if (!jsonObj.get("cooked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cooked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cooked").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("deleted_at") != null && !jsonObj.get("deleted_at").isJsonNull()) && !jsonObj.get("deleted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_at").toString()));
      }
      if ((jsonObj.get("display_username") != null && !jsonObj.get("display_username").isJsonNull()) && !jsonObj.get("display_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_username").toString()));
      }
      if ((jsonObj.get("edit_reason") != null && !jsonObj.get("edit_reason").isJsonNull()) && !jsonObj.get("edit_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edit_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edit_reason").toString()));
      }
      if ((jsonObj.get("flair_bg_color") != null && !jsonObj.get("flair_bg_color").isJsonNull()) && !jsonObj.get("flair_bg_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_bg_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_bg_color").toString()));
      }
      if ((jsonObj.get("flair_color") != null && !jsonObj.get("flair_color").isJsonNull()) && !jsonObj.get("flair_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_color").toString()));
      }
      if ((jsonObj.get("flair_name") != null && !jsonObj.get("flair_name").isJsonNull()) && !jsonObj.get("flair_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_name").toString()));
      }
      if ((jsonObj.get("flair_url") != null && !jsonObj.get("flair_url").isJsonNull()) && !jsonObj.get("flair_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flair_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flair_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mentioned_users") != null && !jsonObj.get("mentioned_users").isJsonNull() && !jsonObj.get("mentioned_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentioned_users` to be an array in the JSON string but got `%s`", jsonObj.get("mentioned_users").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primary_group_name") != null && !jsonObj.get("primary_group_name").isJsonNull()) && !jsonObj.get("primary_group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_group_name").toString()));
      }
      if (!jsonObj.get("raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw").toString()));
      }
      if ((jsonObj.get("reply_to_post_number") != null && !jsonObj.get("reply_to_post_number").isJsonNull()) && !jsonObj.get("reply_to_post_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply_to_post_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reply_to_post_number").toString()));
      }
      if ((jsonObj.get("reviewable_id") != null && !jsonObj.get("reviewable_id").isJsonNull()) && !jsonObj.get("reviewable_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewable_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewable_id").toString()));
      }
      if (!jsonObj.get("topic_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_slug").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("user_title") != null && !jsonObj.get("user_title").isJsonNull()) && !jsonObj.get("user_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_title").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePost200ResponsePost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePost200ResponsePost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePost200ResponsePost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePost200ResponsePost.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePost200ResponsePost>() {
           @Override
           public void write(JsonWriter out, UpdatePost200ResponsePost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePost200ResponsePost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             UpdatePost200ResponsePost instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePost200ResponsePost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePost200ResponsePost
   * @throws IOException if the JSON string is invalid with respect to UpdatePost200ResponsePost
   */
  public static UpdatePost200ResponsePost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePost200ResponsePost.class);
  }

  /**
   * Convert an instance of UpdatePost200ResponsePost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

