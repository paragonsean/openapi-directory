/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateInviteRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInviteRequest {
  public static final String SERIALIZED_NAME_CUSTOM_MESSAGE = "custom_message";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MESSAGE)
  private String customMessage;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_GROUP_NAMES = "group_names";
  @SerializedName(SERIALIZED_NAME_GROUP_NAMES)
  private String groupNames;

  public static final String SERIALIZED_NAME_MAX_REDEMPTIONS_ALLOWED = "max_redemptions_allowed";
  @SerializedName(SERIALIZED_NAME_MAX_REDEMPTIONS_ALLOWED)
  private Integer maxRedemptionsAllowed = 1;

  public static final String SERIALIZED_NAME_SKIP_EMAIL = "skip_email";
  @SerializedName(SERIALIZED_NAME_SKIP_EMAIL)
  private Boolean skipEmail = false;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topic_id";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private Integer topicId;

  public CreateInviteRequest() {
  }

  public CreateInviteRequest customMessage(String customMessage) {
    this.customMessage = customMessage;
    return this;
  }

  /**
   * optional, for email invites
   * @return customMessage
   */
  @javax.annotation.Nullable
  public String getCustomMessage() {
    return customMessage;
  }

  public void setCustomMessage(String customMessage) {
    this.customMessage = customMessage;
  }


  public CreateInviteRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * required for email invites only
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CreateInviteRequest expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * optional, if not supplied, the invite_expiry_days site setting is used
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CreateInviteRequest groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * optional, either this or &#x60;group_names&#x60;
   * @return groupId
   */
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public CreateInviteRequest groupNames(String groupNames) {
    this.groupNames = groupNames;
    return this;
  }

  /**
   * optional, either this or &#x60;group_id&#x60;
   * @return groupNames
   */
  @javax.annotation.Nullable
  public String getGroupNames() {
    return groupNames;
  }

  public void setGroupNames(String groupNames) {
    this.groupNames = groupNames;
  }


  public CreateInviteRequest maxRedemptionsAllowed(Integer maxRedemptionsAllowed) {
    this.maxRedemptionsAllowed = maxRedemptionsAllowed;
    return this;
  }

  /**
   * optional, for link invites
   * @return maxRedemptionsAllowed
   */
  @javax.annotation.Nullable
  public Integer getMaxRedemptionsAllowed() {
    return maxRedemptionsAllowed;
  }

  public void setMaxRedemptionsAllowed(Integer maxRedemptionsAllowed) {
    this.maxRedemptionsAllowed = maxRedemptionsAllowed;
  }


  public CreateInviteRequest skipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
    return this;
  }

  /**
   * Get skipEmail
   * @return skipEmail
   */
  @javax.annotation.Nullable
  public Boolean getSkipEmail() {
    return skipEmail;
  }

  public void setSkipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
  }


  public CreateInviteRequest topicId(Integer topicId) {
    this.topicId = topicId;
    return this;
  }

  /**
   * Get topicId
   * @return topicId
   */
  @javax.annotation.Nullable
  public Integer getTopicId() {
    return topicId;
  }

  public void setTopicId(Integer topicId) {
    this.topicId = topicId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInviteRequest createInviteRequest = (CreateInviteRequest) o;
    return Objects.equals(this.customMessage, createInviteRequest.customMessage) &&
        Objects.equals(this.email, createInviteRequest.email) &&
        Objects.equals(this.expiresAt, createInviteRequest.expiresAt) &&
        Objects.equals(this.groupId, createInviteRequest.groupId) &&
        Objects.equals(this.groupNames, createInviteRequest.groupNames) &&
        Objects.equals(this.maxRedemptionsAllowed, createInviteRequest.maxRedemptionsAllowed) &&
        Objects.equals(this.skipEmail, createInviteRequest.skipEmail) &&
        Objects.equals(this.topicId, createInviteRequest.topicId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customMessage, email, expiresAt, groupId, groupNames, maxRedemptionsAllowed, skipEmail, topicId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInviteRequest {\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupNames: ").append(toIndentedString(groupNames)).append("\n");
    sb.append("    maxRedemptionsAllowed: ").append(toIndentedString(maxRedemptionsAllowed)).append("\n");
    sb.append("    skipEmail: ").append(toIndentedString(skipEmail)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom_message");
    openapiFields.add("email");
    openapiFields.add("expires_at");
    openapiFields.add("group_id");
    openapiFields.add("group_names");
    openapiFields.add("max_redemptions_allowed");
    openapiFields.add("skip_email");
    openapiFields.add("topic_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInviteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInviteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInviteRequest is not found in the empty JSON string", CreateInviteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInviteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInviteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom_message") != null && !jsonObj.get("custom_message").isJsonNull()) && !jsonObj.get("custom_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_message").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("group_names") != null && !jsonObj.get("group_names").isJsonNull()) && !jsonObj.get("group_names").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_names` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_names").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInviteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInviteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInviteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInviteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInviteRequest>() {
           @Override
           public void write(JsonWriter out, CreateInviteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInviteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInviteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInviteRequest
   * @throws IOException if the JSON string is invalid with respect to CreateInviteRequest
   */
  public static CreateInviteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInviteRequest.class);
  }

  /**
   * Convert an instance of CreateInviteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

