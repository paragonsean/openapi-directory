/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetTag200ResponseTopicList;
import org.openapitools.client.model.ListLatestTopics200ResponseUsersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTag200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTag200Response {
  public static final String SERIALIZED_NAME_PRIMARY_GROUPS = "primary_groups";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUPS)
  private List<Object> primaryGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC_LIST = "topic_list";
  @SerializedName(SERIALIZED_NAME_TOPIC_LIST)
  private GetTag200ResponseTopicList topicList;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<ListLatestTopics200ResponseUsersInner> users = new ArrayList<>();

  public GetTag200Response() {
  }

  public GetTag200Response primaryGroups(List<Object> primaryGroups) {
    this.primaryGroups = primaryGroups;
    return this;
  }

  public GetTag200Response addPrimaryGroupsItem(Object primaryGroupsItem) {
    if (this.primaryGroups == null) {
      this.primaryGroups = new ArrayList<>();
    }
    this.primaryGroups.add(primaryGroupsItem);
    return this;
  }

  /**
   * Get primaryGroups
   * @return primaryGroups
   */
  @javax.annotation.Nullable
  public List<Object> getPrimaryGroups() {
    return primaryGroups;
  }

  public void setPrimaryGroups(List<Object> primaryGroups) {
    this.primaryGroups = primaryGroups;
  }


  public GetTag200Response topicList(GetTag200ResponseTopicList topicList) {
    this.topicList = topicList;
    return this;
  }

  /**
   * Get topicList
   * @return topicList
   */
  @javax.annotation.Nullable
  public GetTag200ResponseTopicList getTopicList() {
    return topicList;
  }

  public void setTopicList(GetTag200ResponseTopicList topicList) {
    this.topicList = topicList;
  }


  public GetTag200Response users(List<ListLatestTopics200ResponseUsersInner> users) {
    this.users = users;
    return this;
  }

  public GetTag200Response addUsersItem(ListLatestTopics200ResponseUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<ListLatestTopics200ResponseUsersInner> getUsers() {
    return users;
  }

  public void setUsers(List<ListLatestTopics200ResponseUsersInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTag200Response getTag200Response = (GetTag200Response) o;
    return Objects.equals(this.primaryGroups, getTag200Response.primaryGroups) &&
        Objects.equals(this.topicList, getTag200Response.topicList) &&
        Objects.equals(this.users, getTag200Response.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryGroups, topicList, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTag200Response {\n");
    sb.append("    primaryGroups: ").append(toIndentedString(primaryGroups)).append("\n");
    sb.append("    topicList: ").append(toIndentedString(topicList)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primary_groups");
    openapiFields.add("topic_list");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTag200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTag200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTag200Response is not found in the empty JSON string", GetTag200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTag200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTag200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("primary_groups") != null && !jsonObj.get("primary_groups").isJsonNull() && !jsonObj.get("primary_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_groups` to be an array in the JSON string but got `%s`", jsonObj.get("primary_groups").toString()));
      }
      // validate the optional field `topic_list`
      if (jsonObj.get("topic_list") != null && !jsonObj.get("topic_list").isJsonNull()) {
        GetTag200ResponseTopicList.validateJsonElement(jsonObj.get("topic_list"));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            ListLatestTopics200ResponseUsersInner.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTag200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTag200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTag200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTag200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTag200Response>() {
           @Override
           public void write(JsonWriter out, GetTag200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTag200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTag200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTag200Response
   * @throws IOException if the JSON string is invalid with respect to GetTag200Response
   */
  public static GetTag200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTag200Response.class);
  }

  /**
   * Convert an instance of GetTag200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

