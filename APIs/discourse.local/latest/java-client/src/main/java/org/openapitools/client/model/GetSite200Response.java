/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetSite200ResponseArchetypesInner;
import org.openapitools.client.model.GetSite200ResponseCategoriesInner;
import org.openapitools.client.model.GetSite200ResponseGroupsInner;
import org.openapitools.client.model.GetSite200ResponseNotificationTypes;
import org.openapitools.client.model.GetSite200ResponsePostActionTypesInner;
import org.openapitools.client.model.GetSite200ResponsePostTypes;
import org.openapitools.client.model.GetSite200ResponseTrustLevels;
import org.openapitools.client.model.GetSite200ResponseUserColorSchemesInner;
import org.openapitools.client.model.GetSite200ResponseUserThemesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSite200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSite200Response {
  public static final String SERIALIZED_NAME_ANONYMOUS_TOP_MENU_ITEMS = "anonymous_top_menu_items";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_TOP_MENU_ITEMS)
  private List<Object> anonymousTopMenuItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARCHETYPES = "archetypes";
  @SerializedName(SERIALIZED_NAME_ARCHETYPES)
  private List<GetSite200ResponseArchetypesInner> archetypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_PROVIDERS = "auth_providers";
  @SerializedName(SERIALIZED_NAME_AUTH_PROVIDERS)
  private List<Object> authProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAN_ASSOCIATE_GROUPS = "can_associate_groups";
  @SerializedName(SERIALIZED_NAME_CAN_ASSOCIATE_GROUPS)
  private Boolean canAssociateGroups;

  public static final String SERIALIZED_NAME_CAN_CREATE_TAG = "can_create_tag";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_TAG)
  private Boolean canCreateTag;

  public static final String SERIALIZED_NAME_CAN_TAG_PMS = "can_tag_pms";
  @SerializedName(SERIALIZED_NAME_CAN_TAG_PMS)
  private Boolean canTagPms;

  public static final String SERIALIZED_NAME_CAN_TAG_TOPICS = "can_tag_topics";
  @SerializedName(SERIALIZED_NAME_CAN_TAG_TOPICS)
  private Boolean canTagTopics;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<GetSite200ResponseCategoriesInner> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CENSORED_REGEXP = "censored_regexp";
  @SerializedName(SERIALIZED_NAME_CENSORED_REGEXP)
  private List<Object> censoredRegexp = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_EMOJI_TRANSLATION = "custom_emoji_translation";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EMOJI_TRANSLATION)
  private Map<String, Object> customEmojiTranslation = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_ARCHETYPE = "default_archetype";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ARCHETYPE)
  private String defaultArchetype;

  public static final String SERIALIZED_NAME_DEFAULT_DARK_COLOR_SCHEME = "default_dark_color_scheme";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DARK_COLOR_SCHEME)
  private Object defaultDarkColorScheme;

  public static final String SERIALIZED_NAME_DENIED_EMOJIS = "denied_emojis";
  @SerializedName(SERIALIZED_NAME_DENIED_EMOJIS)
  private List<Object> deniedEmojis = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAYED_ABOUT_PLUGIN_STAT_GROUPS = "displayed_about_plugin_stat_groups";
  @SerializedName(SERIALIZED_NAME_DISPLAYED_ABOUT_PLUGIN_STAT_GROUPS)
  private List<Object> displayedAboutPluginStatGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<Object> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<GetSite200ResponseGroupsInner> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASHTAG_CONFIGURATIONS = "hashtag_configurations";
  @SerializedName(SERIALIZED_NAME_HASHTAG_CONFIGURATIONS)
  private Object hashtagConfigurations;

  public static final String SERIALIZED_NAME_HASHTAG_ICONS = "hashtag_icons";
  @SerializedName(SERIALIZED_NAME_HASHTAG_ICONS)
  private List<Object> hashtagIcons = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKDOWN_ADDITIONAL_OPTIONS = "markdown_additional_options";
  @SerializedName(SERIALIZED_NAME_MARKDOWN_ADDITIONAL_OPTIONS)
  private Object markdownAdditionalOptions;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPES = "notification_types";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPES)
  private GetSite200ResponseNotificationTypes notificationTypes;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private List<Object> periods = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_ACTION_TYPES = "post_action_types";
  @SerializedName(SERIALIZED_NAME_POST_ACTION_TYPES)
  private List<GetSite200ResponsePostActionTypesInner> postActionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_TYPES = "post_types";
  @SerializedName(SERIALIZED_NAME_POST_TYPES)
  private GetSite200ResponsePostTypes postTypes;

  public static final String SERIALIZED_NAME_SHOW_WELCOME_TOPIC_BANNER = "show_welcome_topic_banner";
  @SerializedName(SERIALIZED_NAME_SHOW_WELCOME_TOPIC_BANNER)
  private Boolean showWelcomeTopicBanner;

  public static final String SERIALIZED_NAME_TAGS_FILTER_REGEXP = "tags_filter_regexp";
  @SerializedName(SERIALIZED_NAME_TAGS_FILTER_REGEXP)
  private String tagsFilterRegexp;

  public static final String SERIALIZED_NAME_TOP_MENU_ITEMS = "top_menu_items";
  @SerializedName(SERIALIZED_NAME_TOP_MENU_ITEMS)
  private List<Object> topMenuItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOP_TAGS = "top_tags";
  @SerializedName(SERIALIZED_NAME_TOP_TAGS)
  private List<Object> topTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC_FEATURED_LINK_ALLOWED_CATEGORY_IDS = "topic_featured_link_allowed_category_ids";
  @SerializedName(SERIALIZED_NAME_TOPIC_FEATURED_LINK_ALLOWED_CATEGORY_IDS)
  private List<Object> topicFeaturedLinkAllowedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC_FLAG_TYPES = "topic_flag_types";
  @SerializedName(SERIALIZED_NAME_TOPIC_FLAG_TYPES)
  private List<GetSite200ResponsePostActionTypesInner> topicFlagTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRUST_LEVELS = "trust_levels";
  @SerializedName(SERIALIZED_NAME_TRUST_LEVELS)
  private GetSite200ResponseTrustLevels trustLevels;

  public static final String SERIALIZED_NAME_UNCATEGORIZED_CATEGORY_ID = "uncategorized_category_id";
  @SerializedName(SERIALIZED_NAME_UNCATEGORIZED_CATEGORY_ID)
  private Integer uncategorizedCategoryId;

  public static final String SERIALIZED_NAME_USER_COLOR_SCHEMES = "user_color_schemes";
  @SerializedName(SERIALIZED_NAME_USER_COLOR_SCHEMES)
  private List<GetSite200ResponseUserColorSchemesInner> userColorSchemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FIELD_MAX_LENGTH = "user_field_max_length";
  @SerializedName(SERIALIZED_NAME_USER_FIELD_MAX_LENGTH)
  private Integer userFieldMaxLength;

  public static final String SERIALIZED_NAME_USER_FIELDS = "user_fields";
  @SerializedName(SERIALIZED_NAME_USER_FIELDS)
  private List<Object> userFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_THEMES = "user_themes";
  @SerializedName(SERIALIZED_NAME_USER_THEMES)
  private List<GetSite200ResponseUserThemesInner> userThemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHED_WORDS_LINK = "watched_words_link";
  @SerializedName(SERIALIZED_NAME_WATCHED_WORDS_LINK)
  private String watchedWordsLink;

  public static final String SERIALIZED_NAME_WATCHED_WORDS_REPLACE = "watched_words_replace";
  @SerializedName(SERIALIZED_NAME_WATCHED_WORDS_REPLACE)
  private String watchedWordsReplace;

  public static final String SERIALIZED_NAME_WHISPERS_ALLOWED_GROUPS_NAMES = "whispers_allowed_groups_names";
  @SerializedName(SERIALIZED_NAME_WHISPERS_ALLOWED_GROUPS_NAMES)
  private List<Object> whispersAllowedGroupsNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIZARD_REQUIRED = "wizard_required";
  @SerializedName(SERIALIZED_NAME_WIZARD_REQUIRED)
  private Boolean wizardRequired;

  public GetSite200Response() {
  }

  public GetSite200Response anonymousTopMenuItems(List<Object> anonymousTopMenuItems) {
    this.anonymousTopMenuItems = anonymousTopMenuItems;
    return this;
  }

  public GetSite200Response addAnonymousTopMenuItemsItem(Object anonymousTopMenuItemsItem) {
    if (this.anonymousTopMenuItems == null) {
      this.anonymousTopMenuItems = new ArrayList<>();
    }
    this.anonymousTopMenuItems.add(anonymousTopMenuItemsItem);
    return this;
  }

  /**
   * Get anonymousTopMenuItems
   * @return anonymousTopMenuItems
   */
  @javax.annotation.Nonnull
  public List<Object> getAnonymousTopMenuItems() {
    return anonymousTopMenuItems;
  }

  public void setAnonymousTopMenuItems(List<Object> anonymousTopMenuItems) {
    this.anonymousTopMenuItems = anonymousTopMenuItems;
  }


  public GetSite200Response archetypes(List<GetSite200ResponseArchetypesInner> archetypes) {
    this.archetypes = archetypes;
    return this;
  }

  public GetSite200Response addArchetypesItem(GetSite200ResponseArchetypesInner archetypesItem) {
    if (this.archetypes == null) {
      this.archetypes = new ArrayList<>();
    }
    this.archetypes.add(archetypesItem);
    return this;
  }

  /**
   * Get archetypes
   * @return archetypes
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponseArchetypesInner> getArchetypes() {
    return archetypes;
  }

  public void setArchetypes(List<GetSite200ResponseArchetypesInner> archetypes) {
    this.archetypes = archetypes;
  }


  public GetSite200Response authProviders(List<Object> authProviders) {
    this.authProviders = authProviders;
    return this;
  }

  public GetSite200Response addAuthProvidersItem(Object authProvidersItem) {
    if (this.authProviders == null) {
      this.authProviders = new ArrayList<>();
    }
    this.authProviders.add(authProvidersItem);
    return this;
  }

  /**
   * Get authProviders
   * @return authProviders
   */
  @javax.annotation.Nonnull
  public List<Object> getAuthProviders() {
    return authProviders;
  }

  public void setAuthProviders(List<Object> authProviders) {
    this.authProviders = authProviders;
  }


  public GetSite200Response canAssociateGroups(Boolean canAssociateGroups) {
    this.canAssociateGroups = canAssociateGroups;
    return this;
  }

  /**
   * Get canAssociateGroups
   * @return canAssociateGroups
   */
  @javax.annotation.Nullable
  public Boolean getCanAssociateGroups() {
    return canAssociateGroups;
  }

  public void setCanAssociateGroups(Boolean canAssociateGroups) {
    this.canAssociateGroups = canAssociateGroups;
  }


  public GetSite200Response canCreateTag(Boolean canCreateTag) {
    this.canCreateTag = canCreateTag;
    return this;
  }

  /**
   * Get canCreateTag
   * @return canCreateTag
   */
  @javax.annotation.Nonnull
  public Boolean getCanCreateTag() {
    return canCreateTag;
  }

  public void setCanCreateTag(Boolean canCreateTag) {
    this.canCreateTag = canCreateTag;
  }


  public GetSite200Response canTagPms(Boolean canTagPms) {
    this.canTagPms = canTagPms;
    return this;
  }

  /**
   * Get canTagPms
   * @return canTagPms
   */
  @javax.annotation.Nonnull
  public Boolean getCanTagPms() {
    return canTagPms;
  }

  public void setCanTagPms(Boolean canTagPms) {
    this.canTagPms = canTagPms;
  }


  public GetSite200Response canTagTopics(Boolean canTagTopics) {
    this.canTagTopics = canTagTopics;
    return this;
  }

  /**
   * Get canTagTopics
   * @return canTagTopics
   */
  @javax.annotation.Nonnull
  public Boolean getCanTagTopics() {
    return canTagTopics;
  }

  public void setCanTagTopics(Boolean canTagTopics) {
    this.canTagTopics = canTagTopics;
  }


  public GetSite200Response categories(List<GetSite200ResponseCategoriesInner> categories) {
    this.categories = categories;
    return this;
  }

  public GetSite200Response addCategoriesItem(GetSite200ResponseCategoriesInner categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponseCategoriesInner> getCategories() {
    return categories;
  }

  public void setCategories(List<GetSite200ResponseCategoriesInner> categories) {
    this.categories = categories;
  }


  public GetSite200Response censoredRegexp(List<Object> censoredRegexp) {
    this.censoredRegexp = censoredRegexp;
    return this;
  }

  public GetSite200Response addCensoredRegexpItem(Object censoredRegexpItem) {
    if (this.censoredRegexp == null) {
      this.censoredRegexp = new ArrayList<>();
    }
    this.censoredRegexp.add(censoredRegexpItem);
    return this;
  }

  /**
   * Get censoredRegexp
   * @return censoredRegexp
   */
  @javax.annotation.Nonnull
  public List<Object> getCensoredRegexp() {
    return censoredRegexp;
  }

  public void setCensoredRegexp(List<Object> censoredRegexp) {
    this.censoredRegexp = censoredRegexp;
  }


  public GetSite200Response customEmojiTranslation(Map<String, Object> customEmojiTranslation) {
    this.customEmojiTranslation = customEmojiTranslation;
    return this;
  }

  public GetSite200Response putCustomEmojiTranslationItem(String key, Object customEmojiTranslationItem) {
    if (this.customEmojiTranslation == null) {
      this.customEmojiTranslation = new HashMap<>();
    }
    this.customEmojiTranslation.put(key, customEmojiTranslationItem);
    return this;
  }

  /**
   * Get customEmojiTranslation
   * @return customEmojiTranslation
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getCustomEmojiTranslation() {
    return customEmojiTranslation;
  }

  public void setCustomEmojiTranslation(Map<String, Object> customEmojiTranslation) {
    this.customEmojiTranslation = customEmojiTranslation;
  }


  public GetSite200Response defaultArchetype(String defaultArchetype) {
    this.defaultArchetype = defaultArchetype;
    return this;
  }

  /**
   * Get defaultArchetype
   * @return defaultArchetype
   */
  @javax.annotation.Nonnull
  public String getDefaultArchetype() {
    return defaultArchetype;
  }

  public void setDefaultArchetype(String defaultArchetype) {
    this.defaultArchetype = defaultArchetype;
  }


  public GetSite200Response defaultDarkColorScheme(Object defaultDarkColorScheme) {
    this.defaultDarkColorScheme = defaultDarkColorScheme;
    return this;
  }

  public GetSite200Response putDefaultDarkColorSchemeItem(String key,  defaultDarkColorSchemeItem) {
    if (this.defaultDarkColorScheme == null) {
      this.defaultDarkColorScheme = new HashMap<>();
    }
    this.defaultDarkColorScheme.put(key, defaultDarkColorSchemeItem);
    return this;
  }

  /**
   * Get defaultDarkColorScheme
   * @return defaultDarkColorScheme
   */
  @javax.annotation.Nonnull
  public Object getDefaultDarkColorScheme() {
    return defaultDarkColorScheme;
  }

  public void setDefaultDarkColorScheme(Object defaultDarkColorScheme) {
    this.defaultDarkColorScheme = defaultDarkColorScheme;
  }


  public GetSite200Response deniedEmojis(List<Object> deniedEmojis) {
    this.deniedEmojis = deniedEmojis;
    return this;
  }

  public GetSite200Response addDeniedEmojisItem(Object deniedEmojisItem) {
    if (this.deniedEmojis == null) {
      this.deniedEmojis = new ArrayList<>();
    }
    this.deniedEmojis.add(deniedEmojisItem);
    return this;
  }

  /**
   * Get deniedEmojis
   * @return deniedEmojis
   */
  @javax.annotation.Nullable
  public List<Object> getDeniedEmojis() {
    return deniedEmojis;
  }

  public void setDeniedEmojis(List<Object> deniedEmojis) {
    this.deniedEmojis = deniedEmojis;
  }


  public GetSite200Response displayedAboutPluginStatGroups(List<Object> displayedAboutPluginStatGroups) {
    this.displayedAboutPluginStatGroups = displayedAboutPluginStatGroups;
    return this;
  }

  public GetSite200Response addDisplayedAboutPluginStatGroupsItem(Object displayedAboutPluginStatGroupsItem) {
    if (this.displayedAboutPluginStatGroups == null) {
      this.displayedAboutPluginStatGroups = new ArrayList<>();
    }
    this.displayedAboutPluginStatGroups.add(displayedAboutPluginStatGroupsItem);
    return this;
  }

  /**
   * Get displayedAboutPluginStatGroups
   * @return displayedAboutPluginStatGroups
   */
  @javax.annotation.Nullable
  public List<Object> getDisplayedAboutPluginStatGroups() {
    return displayedAboutPluginStatGroups;
  }

  public void setDisplayedAboutPluginStatGroups(List<Object> displayedAboutPluginStatGroups) {
    this.displayedAboutPluginStatGroups = displayedAboutPluginStatGroups;
  }


  public GetSite200Response filters(List<Object> filters) {
    this.filters = filters;
    return this;
  }

  public GetSite200Response addFiltersItem(Object filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nonnull
  public List<Object> getFilters() {
    return filters;
  }

  public void setFilters(List<Object> filters) {
    this.filters = filters;
  }


  public GetSite200Response groups(List<GetSite200ResponseGroupsInner> groups) {
    this.groups = groups;
    return this;
  }

  public GetSite200Response addGroupsItem(GetSite200ResponseGroupsInner groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponseGroupsInner> getGroups() {
    return groups;
  }

  public void setGroups(List<GetSite200ResponseGroupsInner> groups) {
    this.groups = groups;
  }


  public GetSite200Response hashtagConfigurations(Object hashtagConfigurations) {
    this.hashtagConfigurations = hashtagConfigurations;
    return this;
  }

  /**
   * Get hashtagConfigurations
   * @return hashtagConfigurations
   */
  @javax.annotation.Nullable
  public Object getHashtagConfigurations() {
    return hashtagConfigurations;
  }

  public void setHashtagConfigurations(Object hashtagConfigurations) {
    this.hashtagConfigurations = hashtagConfigurations;
  }


  public GetSite200Response hashtagIcons(List<Object> hashtagIcons) {
    this.hashtagIcons = hashtagIcons;
    return this;
  }

  public GetSite200Response addHashtagIconsItem(Object hashtagIconsItem) {
    if (this.hashtagIcons == null) {
      this.hashtagIcons = new ArrayList<>();
    }
    this.hashtagIcons.add(hashtagIconsItem);
    return this;
  }

  /**
   * Get hashtagIcons
   * @return hashtagIcons
   */
  @javax.annotation.Nullable
  public List<Object> getHashtagIcons() {
    return hashtagIcons;
  }

  public void setHashtagIcons(List<Object> hashtagIcons) {
    this.hashtagIcons = hashtagIcons;
  }


  public GetSite200Response markdownAdditionalOptions(Object markdownAdditionalOptions) {
    this.markdownAdditionalOptions = markdownAdditionalOptions;
    return this;
  }

  /**
   * Get markdownAdditionalOptions
   * @return markdownAdditionalOptions
   */
  @javax.annotation.Nullable
  public Object getMarkdownAdditionalOptions() {
    return markdownAdditionalOptions;
  }

  public void setMarkdownAdditionalOptions(Object markdownAdditionalOptions) {
    this.markdownAdditionalOptions = markdownAdditionalOptions;
  }


  public GetSite200Response notificationTypes(GetSite200ResponseNotificationTypes notificationTypes) {
    this.notificationTypes = notificationTypes;
    return this;
  }

  /**
   * Get notificationTypes
   * @return notificationTypes
   */
  @javax.annotation.Nonnull
  public GetSite200ResponseNotificationTypes getNotificationTypes() {
    return notificationTypes;
  }

  public void setNotificationTypes(GetSite200ResponseNotificationTypes notificationTypes) {
    this.notificationTypes = notificationTypes;
  }


  public GetSite200Response periods(List<Object> periods) {
    this.periods = periods;
    return this;
  }

  public GetSite200Response addPeriodsItem(Object periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

  /**
   * Get periods
   * @return periods
   */
  @javax.annotation.Nonnull
  public List<Object> getPeriods() {
    return periods;
  }

  public void setPeriods(List<Object> periods) {
    this.periods = periods;
  }


  public GetSite200Response postActionTypes(List<GetSite200ResponsePostActionTypesInner> postActionTypes) {
    this.postActionTypes = postActionTypes;
    return this;
  }

  public GetSite200Response addPostActionTypesItem(GetSite200ResponsePostActionTypesInner postActionTypesItem) {
    if (this.postActionTypes == null) {
      this.postActionTypes = new ArrayList<>();
    }
    this.postActionTypes.add(postActionTypesItem);
    return this;
  }

  /**
   * Get postActionTypes
   * @return postActionTypes
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponsePostActionTypesInner> getPostActionTypes() {
    return postActionTypes;
  }

  public void setPostActionTypes(List<GetSite200ResponsePostActionTypesInner> postActionTypes) {
    this.postActionTypes = postActionTypes;
  }


  public GetSite200Response postTypes(GetSite200ResponsePostTypes postTypes) {
    this.postTypes = postTypes;
    return this;
  }

  /**
   * Get postTypes
   * @return postTypes
   */
  @javax.annotation.Nonnull
  public GetSite200ResponsePostTypes getPostTypes() {
    return postTypes;
  }

  public void setPostTypes(GetSite200ResponsePostTypes postTypes) {
    this.postTypes = postTypes;
  }


  public GetSite200Response showWelcomeTopicBanner(Boolean showWelcomeTopicBanner) {
    this.showWelcomeTopicBanner = showWelcomeTopicBanner;
    return this;
  }

  /**
   * Get showWelcomeTopicBanner
   * @return showWelcomeTopicBanner
   */
  @javax.annotation.Nullable
  public Boolean getShowWelcomeTopicBanner() {
    return showWelcomeTopicBanner;
  }

  public void setShowWelcomeTopicBanner(Boolean showWelcomeTopicBanner) {
    this.showWelcomeTopicBanner = showWelcomeTopicBanner;
  }


  public GetSite200Response tagsFilterRegexp(String tagsFilterRegexp) {
    this.tagsFilterRegexp = tagsFilterRegexp;
    return this;
  }

  /**
   * Get tagsFilterRegexp
   * @return tagsFilterRegexp
   */
  @javax.annotation.Nonnull
  public String getTagsFilterRegexp() {
    return tagsFilterRegexp;
  }

  public void setTagsFilterRegexp(String tagsFilterRegexp) {
    this.tagsFilterRegexp = tagsFilterRegexp;
  }


  public GetSite200Response topMenuItems(List<Object> topMenuItems) {
    this.topMenuItems = topMenuItems;
    return this;
  }

  public GetSite200Response addTopMenuItemsItem(Object topMenuItemsItem) {
    if (this.topMenuItems == null) {
      this.topMenuItems = new ArrayList<>();
    }
    this.topMenuItems.add(topMenuItemsItem);
    return this;
  }

  /**
   * Get topMenuItems
   * @return topMenuItems
   */
  @javax.annotation.Nonnull
  public List<Object> getTopMenuItems() {
    return topMenuItems;
  }

  public void setTopMenuItems(List<Object> topMenuItems) {
    this.topMenuItems = topMenuItems;
  }


  public GetSite200Response topTags(List<Object> topTags) {
    this.topTags = topTags;
    return this;
  }

  public GetSite200Response addTopTagsItem(Object topTagsItem) {
    if (this.topTags == null) {
      this.topTags = new ArrayList<>();
    }
    this.topTags.add(topTagsItem);
    return this;
  }

  /**
   * Get topTags
   * @return topTags
   */
  @javax.annotation.Nonnull
  public List<Object> getTopTags() {
    return topTags;
  }

  public void setTopTags(List<Object> topTags) {
    this.topTags = topTags;
  }


  public GetSite200Response topicFeaturedLinkAllowedCategoryIds(List<Object> topicFeaturedLinkAllowedCategoryIds) {
    this.topicFeaturedLinkAllowedCategoryIds = topicFeaturedLinkAllowedCategoryIds;
    return this;
  }

  public GetSite200Response addTopicFeaturedLinkAllowedCategoryIdsItem(Object topicFeaturedLinkAllowedCategoryIdsItem) {
    if (this.topicFeaturedLinkAllowedCategoryIds == null) {
      this.topicFeaturedLinkAllowedCategoryIds = new ArrayList<>();
    }
    this.topicFeaturedLinkAllowedCategoryIds.add(topicFeaturedLinkAllowedCategoryIdsItem);
    return this;
  }

  /**
   * Get topicFeaturedLinkAllowedCategoryIds
   * @return topicFeaturedLinkAllowedCategoryIds
   */
  @javax.annotation.Nonnull
  public List<Object> getTopicFeaturedLinkAllowedCategoryIds() {
    return topicFeaturedLinkAllowedCategoryIds;
  }

  public void setTopicFeaturedLinkAllowedCategoryIds(List<Object> topicFeaturedLinkAllowedCategoryIds) {
    this.topicFeaturedLinkAllowedCategoryIds = topicFeaturedLinkAllowedCategoryIds;
  }


  public GetSite200Response topicFlagTypes(List<GetSite200ResponsePostActionTypesInner> topicFlagTypes) {
    this.topicFlagTypes = topicFlagTypes;
    return this;
  }

  public GetSite200Response addTopicFlagTypesItem(GetSite200ResponsePostActionTypesInner topicFlagTypesItem) {
    if (this.topicFlagTypes == null) {
      this.topicFlagTypes = new ArrayList<>();
    }
    this.topicFlagTypes.add(topicFlagTypesItem);
    return this;
  }

  /**
   * Get topicFlagTypes
   * @return topicFlagTypes
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponsePostActionTypesInner> getTopicFlagTypes() {
    return topicFlagTypes;
  }

  public void setTopicFlagTypes(List<GetSite200ResponsePostActionTypesInner> topicFlagTypes) {
    this.topicFlagTypes = topicFlagTypes;
  }


  public GetSite200Response trustLevels(GetSite200ResponseTrustLevels trustLevels) {
    this.trustLevels = trustLevels;
    return this;
  }

  /**
   * Get trustLevels
   * @return trustLevels
   */
  @javax.annotation.Nonnull
  public GetSite200ResponseTrustLevels getTrustLevels() {
    return trustLevels;
  }

  public void setTrustLevels(GetSite200ResponseTrustLevels trustLevels) {
    this.trustLevels = trustLevels;
  }


  public GetSite200Response uncategorizedCategoryId(Integer uncategorizedCategoryId) {
    this.uncategorizedCategoryId = uncategorizedCategoryId;
    return this;
  }

  /**
   * Get uncategorizedCategoryId
   * @return uncategorizedCategoryId
   */
  @javax.annotation.Nonnull
  public Integer getUncategorizedCategoryId() {
    return uncategorizedCategoryId;
  }

  public void setUncategorizedCategoryId(Integer uncategorizedCategoryId) {
    this.uncategorizedCategoryId = uncategorizedCategoryId;
  }


  public GetSite200Response userColorSchemes(List<GetSite200ResponseUserColorSchemesInner> userColorSchemes) {
    this.userColorSchemes = userColorSchemes;
    return this;
  }

  public GetSite200Response addUserColorSchemesItem(GetSite200ResponseUserColorSchemesInner userColorSchemesItem) {
    if (this.userColorSchemes == null) {
      this.userColorSchemes = new ArrayList<>();
    }
    this.userColorSchemes.add(userColorSchemesItem);
    return this;
  }

  /**
   * Get userColorSchemes
   * @return userColorSchemes
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponseUserColorSchemesInner> getUserColorSchemes() {
    return userColorSchemes;
  }

  public void setUserColorSchemes(List<GetSite200ResponseUserColorSchemesInner> userColorSchemes) {
    this.userColorSchemes = userColorSchemes;
  }


  public GetSite200Response userFieldMaxLength(Integer userFieldMaxLength) {
    this.userFieldMaxLength = userFieldMaxLength;
    return this;
  }

  /**
   * Get userFieldMaxLength
   * @return userFieldMaxLength
   */
  @javax.annotation.Nonnull
  public Integer getUserFieldMaxLength() {
    return userFieldMaxLength;
  }

  public void setUserFieldMaxLength(Integer userFieldMaxLength) {
    this.userFieldMaxLength = userFieldMaxLength;
  }


  public GetSite200Response userFields(List<Object> userFields) {
    this.userFields = userFields;
    return this;
  }

  public GetSite200Response addUserFieldsItem(Object userFieldsItem) {
    if (this.userFields == null) {
      this.userFields = new ArrayList<>();
    }
    this.userFields.add(userFieldsItem);
    return this;
  }

  /**
   * Get userFields
   * @return userFields
   */
  @javax.annotation.Nonnull
  public List<Object> getUserFields() {
    return userFields;
  }

  public void setUserFields(List<Object> userFields) {
    this.userFields = userFields;
  }


  public GetSite200Response userThemes(List<GetSite200ResponseUserThemesInner> userThemes) {
    this.userThemes = userThemes;
    return this;
  }

  public GetSite200Response addUserThemesItem(GetSite200ResponseUserThemesInner userThemesItem) {
    if (this.userThemes == null) {
      this.userThemes = new ArrayList<>();
    }
    this.userThemes.add(userThemesItem);
    return this;
  }

  /**
   * Get userThemes
   * @return userThemes
   */
  @javax.annotation.Nonnull
  public List<GetSite200ResponseUserThemesInner> getUserThemes() {
    return userThemes;
  }

  public void setUserThemes(List<GetSite200ResponseUserThemesInner> userThemes) {
    this.userThemes = userThemes;
  }


  public GetSite200Response watchedWordsLink(String watchedWordsLink) {
    this.watchedWordsLink = watchedWordsLink;
    return this;
  }

  /**
   * Get watchedWordsLink
   * @return watchedWordsLink
   */
  @javax.annotation.Nullable
  public String getWatchedWordsLink() {
    return watchedWordsLink;
  }

  public void setWatchedWordsLink(String watchedWordsLink) {
    this.watchedWordsLink = watchedWordsLink;
  }


  public GetSite200Response watchedWordsReplace(String watchedWordsReplace) {
    this.watchedWordsReplace = watchedWordsReplace;
    return this;
  }

  /**
   * Get watchedWordsReplace
   * @return watchedWordsReplace
   */
  @javax.annotation.Nullable
  public String getWatchedWordsReplace() {
    return watchedWordsReplace;
  }

  public void setWatchedWordsReplace(String watchedWordsReplace) {
    this.watchedWordsReplace = watchedWordsReplace;
  }


  public GetSite200Response whispersAllowedGroupsNames(List<Object> whispersAllowedGroupsNames) {
    this.whispersAllowedGroupsNames = whispersAllowedGroupsNames;
    return this;
  }

  public GetSite200Response addWhispersAllowedGroupsNamesItem(Object whispersAllowedGroupsNamesItem) {
    if (this.whispersAllowedGroupsNames == null) {
      this.whispersAllowedGroupsNames = new ArrayList<>();
    }
    this.whispersAllowedGroupsNames.add(whispersAllowedGroupsNamesItem);
    return this;
  }

  /**
   * Get whispersAllowedGroupsNames
   * @return whispersAllowedGroupsNames
   */
  @javax.annotation.Nullable
  public List<Object> getWhispersAllowedGroupsNames() {
    return whispersAllowedGroupsNames;
  }

  public void setWhispersAllowedGroupsNames(List<Object> whispersAllowedGroupsNames) {
    this.whispersAllowedGroupsNames = whispersAllowedGroupsNames;
  }


  public GetSite200Response wizardRequired(Boolean wizardRequired) {
    this.wizardRequired = wizardRequired;
    return this;
  }

  /**
   * Get wizardRequired
   * @return wizardRequired
   */
  @javax.annotation.Nullable
  public Boolean getWizardRequired() {
    return wizardRequired;
  }

  public void setWizardRequired(Boolean wizardRequired) {
    this.wizardRequired = wizardRequired;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetSite200Response instance itself
   */
  public GetSite200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSite200Response getSite200Response = (GetSite200Response) o;
    return Objects.equals(this.anonymousTopMenuItems, getSite200Response.anonymousTopMenuItems) &&
        Objects.equals(this.archetypes, getSite200Response.archetypes) &&
        Objects.equals(this.authProviders, getSite200Response.authProviders) &&
        Objects.equals(this.canAssociateGroups, getSite200Response.canAssociateGroups) &&
        Objects.equals(this.canCreateTag, getSite200Response.canCreateTag) &&
        Objects.equals(this.canTagPms, getSite200Response.canTagPms) &&
        Objects.equals(this.canTagTopics, getSite200Response.canTagTopics) &&
        Objects.equals(this.categories, getSite200Response.categories) &&
        Objects.equals(this.censoredRegexp, getSite200Response.censoredRegexp) &&
        Objects.equals(this.customEmojiTranslation, getSite200Response.customEmojiTranslation) &&
        Objects.equals(this.defaultArchetype, getSite200Response.defaultArchetype) &&
        Objects.equals(this.defaultDarkColorScheme, getSite200Response.defaultDarkColorScheme) &&
        Objects.equals(this.deniedEmojis, getSite200Response.deniedEmojis) &&
        Objects.equals(this.displayedAboutPluginStatGroups, getSite200Response.displayedAboutPluginStatGroups) &&
        Objects.equals(this.filters, getSite200Response.filters) &&
        Objects.equals(this.groups, getSite200Response.groups) &&
        Objects.equals(this.hashtagConfigurations, getSite200Response.hashtagConfigurations) &&
        Objects.equals(this.hashtagIcons, getSite200Response.hashtagIcons) &&
        Objects.equals(this.markdownAdditionalOptions, getSite200Response.markdownAdditionalOptions) &&
        Objects.equals(this.notificationTypes, getSite200Response.notificationTypes) &&
        Objects.equals(this.periods, getSite200Response.periods) &&
        Objects.equals(this.postActionTypes, getSite200Response.postActionTypes) &&
        Objects.equals(this.postTypes, getSite200Response.postTypes) &&
        Objects.equals(this.showWelcomeTopicBanner, getSite200Response.showWelcomeTopicBanner) &&
        Objects.equals(this.tagsFilterRegexp, getSite200Response.tagsFilterRegexp) &&
        Objects.equals(this.topMenuItems, getSite200Response.topMenuItems) &&
        Objects.equals(this.topTags, getSite200Response.topTags) &&
        Objects.equals(this.topicFeaturedLinkAllowedCategoryIds, getSite200Response.topicFeaturedLinkAllowedCategoryIds) &&
        Objects.equals(this.topicFlagTypes, getSite200Response.topicFlagTypes) &&
        Objects.equals(this.trustLevels, getSite200Response.trustLevels) &&
        Objects.equals(this.uncategorizedCategoryId, getSite200Response.uncategorizedCategoryId) &&
        Objects.equals(this.userColorSchemes, getSite200Response.userColorSchemes) &&
        Objects.equals(this.userFieldMaxLength, getSite200Response.userFieldMaxLength) &&
        Objects.equals(this.userFields, getSite200Response.userFields) &&
        Objects.equals(this.userThemes, getSite200Response.userThemes) &&
        Objects.equals(this.watchedWordsLink, getSite200Response.watchedWordsLink) &&
        Objects.equals(this.watchedWordsReplace, getSite200Response.watchedWordsReplace) &&
        Objects.equals(this.whispersAllowedGroupsNames, getSite200Response.whispersAllowedGroupsNames) &&
        Objects.equals(this.wizardRequired, getSite200Response.wizardRequired)&&
        Objects.equals(this.additionalProperties, getSite200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anonymousTopMenuItems, archetypes, authProviders, canAssociateGroups, canCreateTag, canTagPms, canTagTopics, categories, censoredRegexp, customEmojiTranslation, defaultArchetype, defaultDarkColorScheme, deniedEmojis, displayedAboutPluginStatGroups, filters, groups, hashtagConfigurations, hashtagIcons, markdownAdditionalOptions, notificationTypes, periods, postActionTypes, postTypes, showWelcomeTopicBanner, tagsFilterRegexp, topMenuItems, topTags, topicFeaturedLinkAllowedCategoryIds, topicFlagTypes, trustLevels, uncategorizedCategoryId, userColorSchemes, userFieldMaxLength, userFields, userThemes, watchedWordsLink, watchedWordsReplace, whispersAllowedGroupsNames, wizardRequired, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSite200Response {\n");
    sb.append("    anonymousTopMenuItems: ").append(toIndentedString(anonymousTopMenuItems)).append("\n");
    sb.append("    archetypes: ").append(toIndentedString(archetypes)).append("\n");
    sb.append("    authProviders: ").append(toIndentedString(authProviders)).append("\n");
    sb.append("    canAssociateGroups: ").append(toIndentedString(canAssociateGroups)).append("\n");
    sb.append("    canCreateTag: ").append(toIndentedString(canCreateTag)).append("\n");
    sb.append("    canTagPms: ").append(toIndentedString(canTagPms)).append("\n");
    sb.append("    canTagTopics: ").append(toIndentedString(canTagTopics)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    censoredRegexp: ").append(toIndentedString(censoredRegexp)).append("\n");
    sb.append("    customEmojiTranslation: ").append(toIndentedString(customEmojiTranslation)).append("\n");
    sb.append("    defaultArchetype: ").append(toIndentedString(defaultArchetype)).append("\n");
    sb.append("    defaultDarkColorScheme: ").append(toIndentedString(defaultDarkColorScheme)).append("\n");
    sb.append("    deniedEmojis: ").append(toIndentedString(deniedEmojis)).append("\n");
    sb.append("    displayedAboutPluginStatGroups: ").append(toIndentedString(displayedAboutPluginStatGroups)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    hashtagConfigurations: ").append(toIndentedString(hashtagConfigurations)).append("\n");
    sb.append("    hashtagIcons: ").append(toIndentedString(hashtagIcons)).append("\n");
    sb.append("    markdownAdditionalOptions: ").append(toIndentedString(markdownAdditionalOptions)).append("\n");
    sb.append("    notificationTypes: ").append(toIndentedString(notificationTypes)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    postActionTypes: ").append(toIndentedString(postActionTypes)).append("\n");
    sb.append("    postTypes: ").append(toIndentedString(postTypes)).append("\n");
    sb.append("    showWelcomeTopicBanner: ").append(toIndentedString(showWelcomeTopicBanner)).append("\n");
    sb.append("    tagsFilterRegexp: ").append(toIndentedString(tagsFilterRegexp)).append("\n");
    sb.append("    topMenuItems: ").append(toIndentedString(topMenuItems)).append("\n");
    sb.append("    topTags: ").append(toIndentedString(topTags)).append("\n");
    sb.append("    topicFeaturedLinkAllowedCategoryIds: ").append(toIndentedString(topicFeaturedLinkAllowedCategoryIds)).append("\n");
    sb.append("    topicFlagTypes: ").append(toIndentedString(topicFlagTypes)).append("\n");
    sb.append("    trustLevels: ").append(toIndentedString(trustLevels)).append("\n");
    sb.append("    uncategorizedCategoryId: ").append(toIndentedString(uncategorizedCategoryId)).append("\n");
    sb.append("    userColorSchemes: ").append(toIndentedString(userColorSchemes)).append("\n");
    sb.append("    userFieldMaxLength: ").append(toIndentedString(userFieldMaxLength)).append("\n");
    sb.append("    userFields: ").append(toIndentedString(userFields)).append("\n");
    sb.append("    userThemes: ").append(toIndentedString(userThemes)).append("\n");
    sb.append("    watchedWordsLink: ").append(toIndentedString(watchedWordsLink)).append("\n");
    sb.append("    watchedWordsReplace: ").append(toIndentedString(watchedWordsReplace)).append("\n");
    sb.append("    whispersAllowedGroupsNames: ").append(toIndentedString(whispersAllowedGroupsNames)).append("\n");
    sb.append("    wizardRequired: ").append(toIndentedString(wizardRequired)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anonymous_top_menu_items");
    openapiFields.add("archetypes");
    openapiFields.add("auth_providers");
    openapiFields.add("can_associate_groups");
    openapiFields.add("can_create_tag");
    openapiFields.add("can_tag_pms");
    openapiFields.add("can_tag_topics");
    openapiFields.add("categories");
    openapiFields.add("censored_regexp");
    openapiFields.add("custom_emoji_translation");
    openapiFields.add("default_archetype");
    openapiFields.add("default_dark_color_scheme");
    openapiFields.add("denied_emojis");
    openapiFields.add("displayed_about_plugin_stat_groups");
    openapiFields.add("filters");
    openapiFields.add("groups");
    openapiFields.add("hashtag_configurations");
    openapiFields.add("hashtag_icons");
    openapiFields.add("markdown_additional_options");
    openapiFields.add("notification_types");
    openapiFields.add("periods");
    openapiFields.add("post_action_types");
    openapiFields.add("post_types");
    openapiFields.add("show_welcome_topic_banner");
    openapiFields.add("tags_filter_regexp");
    openapiFields.add("top_menu_items");
    openapiFields.add("top_tags");
    openapiFields.add("topic_featured_link_allowed_category_ids");
    openapiFields.add("topic_flag_types");
    openapiFields.add("trust_levels");
    openapiFields.add("uncategorized_category_id");
    openapiFields.add("user_color_schemes");
    openapiFields.add("user_field_max_length");
    openapiFields.add("user_fields");
    openapiFields.add("user_themes");
    openapiFields.add("watched_words_link");
    openapiFields.add("watched_words_replace");
    openapiFields.add("whispers_allowed_groups_names");
    openapiFields.add("wizard_required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("anonymous_top_menu_items");
    openapiRequiredFields.add("archetypes");
    openapiRequiredFields.add("auth_providers");
    openapiRequiredFields.add("can_create_tag");
    openapiRequiredFields.add("can_tag_pms");
    openapiRequiredFields.add("can_tag_topics");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("censored_regexp");
    openapiRequiredFields.add("custom_emoji_translation");
    openapiRequiredFields.add("default_archetype");
    openapiRequiredFields.add("default_dark_color_scheme");
    openapiRequiredFields.add("filters");
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("notification_types");
    openapiRequiredFields.add("periods");
    openapiRequiredFields.add("post_action_types");
    openapiRequiredFields.add("post_types");
    openapiRequiredFields.add("tags_filter_regexp");
    openapiRequiredFields.add("top_menu_items");
    openapiRequiredFields.add("top_tags");
    openapiRequiredFields.add("topic_featured_link_allowed_category_ids");
    openapiRequiredFields.add("topic_flag_types");
    openapiRequiredFields.add("trust_levels");
    openapiRequiredFields.add("uncategorized_category_id");
    openapiRequiredFields.add("user_color_schemes");
    openapiRequiredFields.add("user_field_max_length");
    openapiRequiredFields.add("user_fields");
    openapiRequiredFields.add("user_themes");
    openapiRequiredFields.add("watched_words_link");
    openapiRequiredFields.add("watched_words_replace");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSite200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSite200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSite200Response is not found in the empty JSON string", GetSite200Response.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSite200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("anonymous_top_menu_items") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("anonymous_top_menu_items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonymous_top_menu_items` to be an array in the JSON string but got `%s`", jsonObj.get("anonymous_top_menu_items").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("archetypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("archetypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `archetypes` to be an array in the JSON string but got `%s`", jsonObj.get("archetypes").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("auth_providers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("auth_providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_providers` to be an array in the JSON string but got `%s`", jsonObj.get("auth_providers").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("censored_regexp") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("censored_regexp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `censored_regexp` to be an array in the JSON string but got `%s`", jsonObj.get("censored_regexp").toString()));
      }
      if (!jsonObj.get("default_archetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_archetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_archetype").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("denied_emojis") != null && !jsonObj.get("denied_emojis").isJsonNull() && !jsonObj.get("denied_emojis").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `denied_emojis` to be an array in the JSON string but got `%s`", jsonObj.get("denied_emojis").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayed_about_plugin_stat_groups") != null && !jsonObj.get("displayed_about_plugin_stat_groups").isJsonNull() && !jsonObj.get("displayed_about_plugin_stat_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayed_about_plugin_stat_groups` to be an array in the JSON string but got `%s`", jsonObj.get("displayed_about_plugin_stat_groups").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("filters") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("groups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashtag_icons") != null && !jsonObj.get("hashtag_icons").isJsonNull() && !jsonObj.get("hashtag_icons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashtag_icons` to be an array in the JSON string but got `%s`", jsonObj.get("hashtag_icons").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("periods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("periods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `periods` to be an array in the JSON string but got `%s`", jsonObj.get("periods").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("post_action_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("post_action_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_action_types` to be an array in the JSON string but got `%s`", jsonObj.get("post_action_types").toString()));
      }
      if (!jsonObj.get("tags_filter_regexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_filter_regexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_filter_regexp").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("top_menu_items") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("top_menu_items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `top_menu_items` to be an array in the JSON string but got `%s`", jsonObj.get("top_menu_items").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("top_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("top_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `top_tags` to be an array in the JSON string but got `%s`", jsonObj.get("top_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("topic_featured_link_allowed_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("topic_featured_link_allowed_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_featured_link_allowed_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("topic_featured_link_allowed_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("topic_flag_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("topic_flag_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_flag_types` to be an array in the JSON string but got `%s`", jsonObj.get("topic_flag_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_color_schemes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_color_schemes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_color_schemes` to be an array in the JSON string but got `%s`", jsonObj.get("user_color_schemes").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_fields") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_fields` to be an array in the JSON string but got `%s`", jsonObj.get("user_fields").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_themes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_themes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_themes` to be an array in the JSON string but got `%s`", jsonObj.get("user_themes").toString()));
      }
      if ((jsonObj.get("watched_words_link") != null && !jsonObj.get("watched_words_link").isJsonNull()) && !jsonObj.get("watched_words_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_words_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watched_words_link").toString()));
      }
      if ((jsonObj.get("watched_words_replace") != null && !jsonObj.get("watched_words_replace").isJsonNull()) && !jsonObj.get("watched_words_replace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_words_replace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watched_words_replace").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("whispers_allowed_groups_names") != null && !jsonObj.get("whispers_allowed_groups_names").isJsonNull() && !jsonObj.get("whispers_allowed_groups_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `whispers_allowed_groups_names` to be an array in the JSON string but got `%s`", jsonObj.get("whispers_allowed_groups_names").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSite200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSite200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSite200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSite200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSite200Response>() {
           @Override
           public void write(JsonWriter out, GetSite200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSite200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GetSite200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSite200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSite200Response
   * @throws IOException if the JSON string is invalid with respect to GetSite200Response
   */
  public static GetSite200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSite200Response.class);
  }

  /**
   * Convert an instance of GetSite200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

