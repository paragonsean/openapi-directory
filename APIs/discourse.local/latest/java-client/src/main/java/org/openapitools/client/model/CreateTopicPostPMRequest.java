/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTopicPostPMRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:34.324076-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTopicPostPMRequest {
  public static final String SERIALIZED_NAME_ARCHETYPE = "archetype";
  @SerializedName(SERIALIZED_NAME_ARCHETYPE)
  private String archetype;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EMBED_URL = "embed_url";
  @SerializedName(SERIALIZED_NAME_EMBED_URL)
  private String embedUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  public static final String SERIALIZED_NAME_TARGET_RECIPIENTS = "target_recipients";
  @SerializedName(SERIALIZED_NAME_TARGET_RECIPIENTS)
  private String targetRecipients;

  public static final String SERIALIZED_NAME_TARGET_USERNAMES = "target_usernames";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TARGET_USERNAMES)
  private String targetUsernames;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topic_id";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private Integer topicId;

  public CreateTopicPostPMRequest() {
  }

  public CreateTopicPostPMRequest archetype(String archetype) {
    this.archetype = archetype;
    return this;
  }

  /**
   * Required for new private message.
   * @return archetype
   */
  @javax.annotation.Nullable
  public String getArchetype() {
    return archetype;
  }

  public void setArchetype(String archetype) {
    this.archetype = archetype;
  }


  public CreateTopicPostPMRequest category(Integer category) {
    this.category = category;
    return this;
  }

  /**
   * Optional if creating a new topic, and ignored if creating a new post.
   * @return category
   */
  @javax.annotation.Nullable
  public Integer getCategory() {
    return category;
  }

  public void setCategory(Integer category) {
    this.category = category;
  }


  public CreateTopicPostPMRequest createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public CreateTopicPostPMRequest embedUrl(String embedUrl) {
    this.embedUrl = embedUrl;
    return this;
  }

  /**
   * Provide a URL from a remote system to associate a forum topic with that URL, typically for using Discourse as a comments system for an external blog.
   * @return embedUrl
   */
  @javax.annotation.Nullable
  public String getEmbedUrl() {
    return embedUrl;
  }

  public void setEmbedUrl(String embedUrl) {
    this.embedUrl = embedUrl;
  }


  public CreateTopicPostPMRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Provide an external_id from a remote system to associate a forum topic with that id.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public CreateTopicPostPMRequest raw(String raw) {
    this.raw = raw;
    return this;
  }

  /**
   * Get raw
   * @return raw
   */
  @javax.annotation.Nonnull
  public String getRaw() {
    return raw;
  }

  public void setRaw(String raw) {
    this.raw = raw;
  }


  public CreateTopicPostPMRequest targetRecipients(String targetRecipients) {
    this.targetRecipients = targetRecipients;
    return this;
  }

  /**
   * Required for private message, comma separated.
   * @return targetRecipients
   */
  @javax.annotation.Nullable
  public String getTargetRecipients() {
    return targetRecipients;
  }

  public void setTargetRecipients(String targetRecipients) {
    this.targetRecipients = targetRecipients;
  }


  @Deprecated
  public CreateTopicPostPMRequest targetUsernames(String targetUsernames) {
    this.targetUsernames = targetUsernames;
    return this;
  }

  /**
   * Deprecated. Use target_recipients instead.
   * @return targetUsernames
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTargetUsernames() {
    return targetUsernames;
  }

  @Deprecated
  public void setTargetUsernames(String targetUsernames) {
    this.targetUsernames = targetUsernames;
  }


  public CreateTopicPostPMRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required if creating a new topic or new private message.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateTopicPostPMRequest topicId(Integer topicId) {
    this.topicId = topicId;
    return this;
  }

  /**
   * Required if creating a new post.
   * @return topicId
   */
  @javax.annotation.Nullable
  public Integer getTopicId() {
    return topicId;
  }

  public void setTopicId(Integer topicId) {
    this.topicId = topicId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateTopicPostPMRequest instance itself
   */
  public CreateTopicPostPMRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTopicPostPMRequest createTopicPostPMRequest = (CreateTopicPostPMRequest) o;
    return Objects.equals(this.archetype, createTopicPostPMRequest.archetype) &&
        Objects.equals(this.category, createTopicPostPMRequest.category) &&
        Objects.equals(this.createdAt, createTopicPostPMRequest.createdAt) &&
        Objects.equals(this.embedUrl, createTopicPostPMRequest.embedUrl) &&
        Objects.equals(this.externalId, createTopicPostPMRequest.externalId) &&
        Objects.equals(this.raw, createTopicPostPMRequest.raw) &&
        Objects.equals(this.targetRecipients, createTopicPostPMRequest.targetRecipients) &&
        Objects.equals(this.targetUsernames, createTopicPostPMRequest.targetUsernames) &&
        Objects.equals(this.title, createTopicPostPMRequest.title) &&
        Objects.equals(this.topicId, createTopicPostPMRequest.topicId)&&
        Objects.equals(this.additionalProperties, createTopicPostPMRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archetype, category, createdAt, embedUrl, externalId, raw, targetRecipients, targetUsernames, title, topicId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTopicPostPMRequest {\n");
    sb.append("    archetype: ").append(toIndentedString(archetype)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    embedUrl: ").append(toIndentedString(embedUrl)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    targetRecipients: ").append(toIndentedString(targetRecipients)).append("\n");
    sb.append("    targetUsernames: ").append(toIndentedString(targetUsernames)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archetype");
    openapiFields.add("category");
    openapiFields.add("created_at");
    openapiFields.add("embed_url");
    openapiFields.add("external_id");
    openapiFields.add("raw");
    openapiFields.add("target_recipients");
    openapiFields.add("target_usernames");
    openapiFields.add("title");
    openapiFields.add("topic_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("raw");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTopicPostPMRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTopicPostPMRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTopicPostPMRequest is not found in the empty JSON string", CreateTopicPostPMRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTopicPostPMRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("archetype") != null && !jsonObj.get("archetype").isJsonNull()) && !jsonObj.get("archetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archetype").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("embed_url") != null && !jsonObj.get("embed_url").isJsonNull()) && !jsonObj.get("embed_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embed_url").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if (!jsonObj.get("raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw").toString()));
      }
      if ((jsonObj.get("target_recipients") != null && !jsonObj.get("target_recipients").isJsonNull()) && !jsonObj.get("target_recipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_recipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_recipients").toString()));
      }
      if ((jsonObj.get("target_usernames") != null && !jsonObj.get("target_usernames").isJsonNull()) && !jsonObj.get("target_usernames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_usernames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_usernames").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTopicPostPMRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTopicPostPMRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTopicPostPMRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTopicPostPMRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTopicPostPMRequest>() {
           @Override
           public void write(JsonWriter out, CreateTopicPostPMRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTopicPostPMRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CreateTopicPostPMRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTopicPostPMRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTopicPostPMRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTopicPostPMRequest
   */
  public static CreateTopicPostPMRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTopicPostPMRequest.class);
  }

  /**
   * Convert an instance of CreateTopicPostPMRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

