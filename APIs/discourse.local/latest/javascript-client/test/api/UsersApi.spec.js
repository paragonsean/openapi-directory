/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('adminGetUser', function() {
      it('should call adminGetUser successfully', function(done) {
        //uncomment below and update the code to test adminGetUser
        //instance.adminGetUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminListUsers', function() {
      it('should call adminListUsers successfully', function(done) {
        //uncomment below and update the code to test adminListUsers
        //instance.adminListUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('anonymizeUser', function() {
      it('should call anonymizeUser successfully', function(done) {
        //uncomment below and update the code to test anonymizeUser
        //instance.anonymizeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changePassword', function() {
      it('should call changePassword successfully', function(done) {
        //uncomment below and update the code to test changePassword
        //instance.changePassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserEmails', function() {
      it('should call getUserEmails successfully', function(done) {
        //uncomment below and update the code to test getUserEmails
        //instance.getUserEmails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserExternalId', function() {
      it('should call getUserExternalId successfully', function(done) {
        //uncomment below and update the code to test getUserExternalId
        //instance.getUserExternalId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserIdentiyProviderExternalId', function() {
      it('should call getUserIdentiyProviderExternalId successfully', function(done) {
        //uncomment below and update the code to test getUserIdentiyProviderExternalId
        //instance.getUserIdentiyProviderExternalId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserActions', function() {
      it('should call listUserActions successfully', function(done) {
        //uncomment below and update the code to test listUserActions
        //instance.listUserActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserBadges_0', function() {
      it('should call listUserBadges_0 successfully', function(done) {
        //uncomment below and update the code to test listUserBadges_0
        //instance.listUserBadges_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsersPublic', function() {
      it('should call listUsersPublic successfully', function(done) {
        //uncomment below and update the code to test listUsersPublic
        //instance.listUsersPublic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logOutUser', function() {
      it('should call logOutUser successfully', function(done) {
        //uncomment below and update the code to test logOutUser
        //instance.logOutUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshGravatar', function() {
      it('should call refreshGravatar successfully', function(done) {
        //uncomment below and update the code to test refreshGravatar
        //instance.refreshGravatar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendPasswordResetEmail', function() {
      it('should call sendPasswordResetEmail successfully', function(done) {
        //uncomment below and update the code to test sendPasswordResetEmail
        //instance.sendPasswordResetEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('silenceUser', function() {
      it('should call silenceUser successfully', function(done) {
        //uncomment below and update the code to test silenceUser
        //instance.silenceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('suspendUser', function() {
      it('should call suspendUser successfully', function(done) {
        //uncomment below and update the code to test suspendUser
        //instance.suspendUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAvatar', function() {
      it('should call updateAvatar successfully', function(done) {
        //uncomment below and update the code to test updateAvatar
        //instance.updateAvatar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmail', function() {
      it('should call updateEmail successfully', function(done) {
        //uncomment below and update the code to test updateEmail
        //instance.updateEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUsername', function() {
      it('should call updateUsername successfully', function(done) {
        //uncomment below and update the code to test updateUsername
        //instance.updateUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
