/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.TopicsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TopicsApi', function() {
    describe('bookmarkTopic', function() {
      it('should call bookmarkTopic successfully', function(done) {
        //uncomment below and update the code to test bookmarkTopic
        //instance.bookmarkTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTopicPostPM_0', function() {
      it('should call createTopicPostPM_0 successfully', function(done) {
        //uncomment below and update the code to test createTopicPostPM_0
        //instance.createTopicPostPM_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTopicTimer', function() {
      it('should call createTopicTimer successfully', function(done) {
        //uncomment below and update the code to test createTopicTimer
        //instance.createTopicTimer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSpecificPostsFromTopic', function() {
      it('should call getSpecificPostsFromTopic successfully', function(done) {
        //uncomment below and update the code to test getSpecificPostsFromTopic
        //instance.getSpecificPostsFromTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTopic', function() {
      it('should call getTopic successfully', function(done) {
        //uncomment below and update the code to test getTopic
        //instance.getTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTopicByExternalId', function() {
      it('should call getTopicByExternalId successfully', function(done) {
        //uncomment below and update the code to test getTopicByExternalId
        //instance.getTopicByExternalId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inviteToTopic', function() {
      it('should call inviteToTopic successfully', function(done) {
        //uncomment below and update the code to test inviteToTopic
        //instance.inviteToTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLatestTopics', function() {
      it('should call listLatestTopics successfully', function(done) {
        //uncomment below and update the code to test listLatestTopics
        //instance.listLatestTopics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTopTopics', function() {
      it('should call listTopTopics successfully', function(done) {
        //uncomment below and update the code to test listTopTopics
        //instance.listTopTopics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTopic', function() {
      it('should call removeTopic successfully', function(done) {
        //uncomment below and update the code to test removeTopic
        //instance.removeTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setNotificationLevel', function() {
      it('should call setNotificationLevel successfully', function(done) {
        //uncomment below and update the code to test setNotificationLevel
        //instance.setNotificationLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTopic', function() {
      it('should call updateTopic successfully', function(done) {
        //uncomment below and update the code to test updateTopic
        //instance.updateTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTopicStatus', function() {
      it('should call updateTopicStatus successfully', function(done) {
        //uncomment below and update the code to test updateTopicStatus
        //instance.updateTopicStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTopicTimestamp', function() {
      it('should call updateTopicTimestamp successfully', function(done) {
        //uncomment below and update the code to test updateTopicTimestamp
        //instance.updateTopicTimestamp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
