/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Search200ResponseGroupedSearchResult', function() {
    it('should create an instance of Search200ResponseGroupedSearchResult', function() {
      // uncomment below and update the code to test Search200ResponseGroupedSearchResult
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be.a(DiscourseApiDocumentation.Search200ResponseGroupedSearchResult);
    });

    it('should have the property canCreateTopic (base name: "can_create_topic")', function() {
      // uncomment below and update the code to test the property canCreateTopic
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property categoryIds (base name: "category_ids")', function() {
      // uncomment below and update the code to test the property categoryIds
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property groupIds (base name: "group_ids")', function() {
      // uncomment below and update the code to test the property groupIds
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property moreCategories (base name: "more_categories")', function() {
      // uncomment below and update the code to test the property moreCategories
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property moreFullPageResults (base name: "more_full_page_results")', function() {
      // uncomment below and update the code to test the property moreFullPageResults
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property morePosts (base name: "more_posts")', function() {
      // uncomment below and update the code to test the property morePosts
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property moreUsers (base name: "more_users")', function() {
      // uncomment below and update the code to test the property moreUsers
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property postIds (base name: "post_ids")', function() {
      // uncomment below and update the code to test the property postIds
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property searchLogId (base name: "search_log_id")', function() {
      // uncomment below and update the code to test the property searchLogId
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property tagIds (base name: "tag_ids")', function() {
      // uncomment below and update the code to test the property tagIds
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property term (base name: "term")', function() {
      // uncomment below and update the code to test the property term
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

    it('should have the property userIds (base name: "user_ids")', function() {
      // uncomment below and update the code to test the property userIds
      //var instance = new DiscourseApiDocumentation.Search200ResponseGroupedSearchResult();
      //expect(instance).to.be();
    });

  });

}));
