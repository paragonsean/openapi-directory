/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateGroup200ResponseBasicGroup', function() {
    it('should create an instance of CreateGroup200ResponseBasicGroup', function() {
      // uncomment below and update the code to test CreateGroup200ResponseBasicGroup
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be.a(DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup);
    });

    it('should have the property allowMembershipRequests (base name: "allow_membership_requests")', function() {
      // uncomment below and update the code to test the property allowMembershipRequests
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property automatic (base name: "automatic")', function() {
      // uncomment below and update the code to test the property automatic
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property bioCooked (base name: "bio_cooked")', function() {
      // uncomment below and update the code to test the property bioCooked
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property bioExcerpt (base name: "bio_excerpt")', function() {
      // uncomment below and update the code to test the property bioExcerpt
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property bioRaw (base name: "bio_raw")', function() {
      // uncomment below and update the code to test the property bioRaw
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property canAdminGroup (base name: "can_admin_group")', function() {
      // uncomment below and update the code to test the property canAdminGroup
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property canEditGroup (base name: "can_edit_group")', function() {
      // uncomment below and update the code to test the property canEditGroup
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property canSeeMembers (base name: "can_see_members")', function() {
      // uncomment below and update the code to test the property canSeeMembers
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property defaultNotificationLevel (base name: "default_notification_level")', function() {
      // uncomment below and update the code to test the property defaultNotificationLevel
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property flairBgColor (base name: "flair_bg_color")', function() {
      // uncomment below and update the code to test the property flairBgColor
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property flairColor (base name: "flair_color")', function() {
      // uncomment below and update the code to test the property flairColor
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property flairUrl (base name: "flair_url")', function() {
      // uncomment below and update the code to test the property flairUrl
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property fullName (base name: "full_name")', function() {
      // uncomment below and update the code to test the property fullName
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property grantTrustLevel (base name: "grant_trust_level")', function() {
      // uncomment below and update the code to test the property grantTrustLevel
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property hasMessages (base name: "has_messages")', function() {
      // uncomment below and update the code to test the property hasMessages
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property incomingEmail (base name: "incoming_email")', function() {
      // uncomment below and update the code to test the property incomingEmail
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property membersVisibilityLevel (base name: "members_visibility_level")', function() {
      // uncomment below and update the code to test the property membersVisibilityLevel
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property membershipRequestTemplate (base name: "membership_request_template")', function() {
      // uncomment below and update the code to test the property membershipRequestTemplate
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property mentionableLevel (base name: "mentionable_level")', function() {
      // uncomment below and update the code to test the property mentionableLevel
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property messageableLevel (base name: "messageable_level")', function() {
      // uncomment below and update the code to test the property messageableLevel
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property primaryGroup (base name: "primary_group")', function() {
      // uncomment below and update the code to test the property primaryGroup
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property publicAdmission (base name: "public_admission")', function() {
      // uncomment below and update the code to test the property publicAdmission
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property publicExit (base name: "public_exit")', function() {
      // uncomment below and update the code to test the property publicExit
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property publishReadState (base name: "publish_read_state")', function() {
      // uncomment below and update the code to test the property publishReadState
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property userCount (base name: "user_count")', function() {
      // uncomment below and update the code to test the property userCount
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

    it('should have the property visibilityLevel (base name: "visibility_level")', function() {
      // uncomment below and update the code to test the property visibilityLevel
      //var instance = new DiscourseApiDocumentation.CreateGroup200ResponseBasicGroup();
      //expect(instance).to.be();
    });

  });

}));
