/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.AdminGetUser200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminGetUser200Response', function() {
    it('should create an instance of AdminGetUser200Response', function() {
      // uncomment below and update the code to test AdminGetUser200Response
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be.a(DiscourseApiDocumentation.AdminGetUser200Response);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property admin (base name: "admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property apiKeyCount (base name: "api_key_count")', function() {
      // uncomment below and update the code to test the property apiKeyCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property approvedBy (base name: "approved_by")', function() {
      // uncomment below and update the code to test the property approvedBy
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property associatedAccounts (base name: "associated_accounts")', function() {
      // uncomment below and update the code to test the property associatedAccounts
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property avatarTemplate (base name: "avatar_template")', function() {
      // uncomment below and update the code to test the property avatarTemplate
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property badgeCount (base name: "badge_count")', function() {
      // uncomment below and update the code to test the property badgeCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property bounceScore (base name: "bounce_score")', function() {
      // uncomment below and update the code to test the property bounceScore
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canActivate (base name: "can_activate")', function() {
      // uncomment below and update the code to test the property canActivate
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canBeAnonymized (base name: "can_be_anonymized")', function() {
      // uncomment below and update the code to test the property canBeAnonymized
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canBeDeleted (base name: "can_be_deleted")', function() {
      // uncomment below and update the code to test the property canBeDeleted
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canBeMerged (base name: "can_be_merged")', function() {
      // uncomment below and update the code to test the property canBeMerged
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canDeactivate (base name: "can_deactivate")', function() {
      // uncomment below and update the code to test the property canDeactivate
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteAllPosts (base name: "can_delete_all_posts")', function() {
      // uncomment below and update the code to test the property canDeleteAllPosts
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteSsoRecord (base name: "can_delete_sso_record")', function() {
      // uncomment below and update the code to test the property canDeleteSsoRecord
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canDisableSecondFactor (base name: "can_disable_second_factor")', function() {
      // uncomment below and update the code to test the property canDisableSecondFactor
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canGrantAdmin (base name: "can_grant_admin")', function() {
      // uncomment below and update the code to test the property canGrantAdmin
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canGrantModeration (base name: "can_grant_moderation")', function() {
      // uncomment below and update the code to test the property canGrantModeration
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canImpersonate (base name: "can_impersonate")', function() {
      // uncomment below and update the code to test the property canImpersonate
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canRevokeAdmin (base name: "can_revoke_admin")', function() {
      // uncomment below and update the code to test the property canRevokeAdmin
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canRevokeModeration (base name: "can_revoke_moderation")', function() {
      // uncomment below and update the code to test the property canRevokeModeration
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canSendActivationEmail (base name: "can_send_activation_email")', function() {
      // uncomment below and update the code to test the property canSendActivationEmail
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property canViewActionLogs (base name: "can_view_action_logs")', function() {
      // uncomment below and update the code to test the property canViewActionLogs
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property createdAtAge (base name: "created_at_age")', function() {
      // uncomment below and update the code to test the property createdAtAge
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property daysVisited (base name: "days_visited")', function() {
      // uncomment below and update the code to test the property daysVisited
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property externalIds (base name: "external_ids")', function() {
      // uncomment below and update the code to test the property externalIds
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property flagLevel (base name: "flag_level")', function() {
      // uncomment below and update the code to test the property flagLevel
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property flagsGivenCount (base name: "flags_given_count")', function() {
      // uncomment below and update the code to test the property flagsGivenCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property flagsReceivedCount (base name: "flags_received_count")', function() {
      // uncomment below and update the code to test the property flagsReceivedCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property fullSuspendReason (base name: "full_suspend_reason")', function() {
      // uncomment below and update the code to test the property fullSuspendReason
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ip_address")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastEmailedAge (base name: "last_emailed_age")', function() {
      // uncomment below and update the code to test the property lastEmailedAge
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastEmailedAt (base name: "last_emailed_at")', function() {
      // uncomment below and update the code to test the property lastEmailedAt
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastSeenAge (base name: "last_seen_age")', function() {
      // uncomment below and update the code to test the property lastSeenAge
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastSeenAt (base name: "last_seen_at")', function() {
      // uncomment below and update the code to test the property lastSeenAt
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property likeCount (base name: "like_count")', function() {
      // uncomment below and update the code to test the property likeCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property likeGivenCount (base name: "like_given_count")', function() {
      // uncomment below and update the code to test the property likeGivenCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property manualLockedTrustLevel (base name: "manual_locked_trust_level")', function() {
      // uncomment below and update the code to test the property manualLockedTrustLevel
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property moderator (base name: "moderator")', function() {
      // uncomment below and update the code to test the property moderator
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property nextPenalty (base name: "next_penalty")', function() {
      // uncomment below and update the code to test the property nextPenalty
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property penaltyCounts (base name: "penalty_counts")', function() {
      // uncomment below and update the code to test the property penaltyCounts
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property postCount (base name: "post_count")', function() {
      // uncomment below and update the code to test the property postCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property postEditsCount (base name: "post_edits_count")', function() {
      // uncomment below and update the code to test the property postEditsCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property postsReadCount (base name: "posts_read_count")', function() {
      // uncomment below and update the code to test the property postsReadCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property primaryGroupId (base name: "primary_group_id")', function() {
      // uncomment below and update the code to test the property primaryGroupId
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property privateTopicsCount (base name: "private_topics_count")', function() {
      // uncomment below and update the code to test the property privateTopicsCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property registrationIpAddress (base name: "registration_ip_address")', function() {
      // uncomment below and update the code to test the property registrationIpAddress
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property resetBounceScoreAfter (base name: "reset_bounce_score_after")', function() {
      // uncomment below and update the code to test the property resetBounceScoreAfter
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property silenceReason (base name: "silence_reason")', function() {
      // uncomment below and update the code to test the property silenceReason
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property silencedBy (base name: "silenced_by")', function() {
      // uncomment below and update the code to test the property silencedBy
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property singleSignOnRecord (base name: "single_sign_on_record")', function() {
      // uncomment below and update the code to test the property singleSignOnRecord
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property staged (base name: "staged")', function() {
      // uncomment below and update the code to test the property staged
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property suspendedBy (base name: "suspended_by")', function() {
      // uncomment below and update the code to test the property suspendedBy
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property timeRead (base name: "time_read")', function() {
      // uncomment below and update the code to test the property timeRead
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property tl3Requirements (base name: "tl3_requirements")', function() {
      // uncomment below and update the code to test the property tl3Requirements
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property topicCount (base name: "topic_count")', function() {
      // uncomment below and update the code to test the property topicCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property topicsEntered (base name: "topics_entered")', function() {
      // uncomment below and update the code to test the property topicsEntered
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property trustLevel (base name: "trust_level")', function() {
      // uncomment below and update the code to test the property trustLevel
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

    it('should have the property warningsReceivedCount (base name: "warnings_received_count")', function() {
      // uncomment below and update the code to test the property warningsReceivedCount
      //var instance = new DiscourseApiDocumentation.AdminGetUser200Response();
      //expect(instance).to.be();
    });

  });

}));
