/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListPosts200ResponseLatestPostsInner', function() {
    it('should create an instance of ListPosts200ResponseLatestPostsInner', function() {
      // uncomment below and update the code to test ListPosts200ResponseLatestPostsInner
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be.a(DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner);
    });

    it('should have the property actionsSummary (base name: "actions_summary")', function() {
      // uncomment below and update the code to test the property actionsSummary
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property admin (base name: "admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property avatarTemplate (base name: "avatar_template")', function() {
      // uncomment below and update the code to test the property avatarTemplate
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property canDelete (base name: "can_delete")', function() {
      // uncomment below and update the code to test the property canDelete
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property canEdit (base name: "can_edit")', function() {
      // uncomment below and update the code to test the property canEdit
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property canRecover (base name: "can_recover")', function() {
      // uncomment below and update the code to test the property canRecover
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property canViewEditHistory (base name: "can_view_edit_history")', function() {
      // uncomment below and update the code to test the property canViewEditHistory
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property canWiki (base name: "can_wiki")', function() {
      // uncomment below and update the code to test the property canWiki
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "category_id")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property cooked (base name: "cooked")', function() {
      // uncomment below and update the code to test the property cooked
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property displayUsername (base name: "display_username")', function() {
      // uncomment below and update the code to test the property displayUsername
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property editReason (base name: "edit_reason")', function() {
      // uncomment below and update the code to test the property editReason
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property flairBgColor (base name: "flair_bg_color")', function() {
      // uncomment below and update the code to test the property flairBgColor
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property flairColor (base name: "flair_color")', function() {
      // uncomment below and update the code to test the property flairColor
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property flairName (base name: "flair_name")', function() {
      // uncomment below and update the code to test the property flairName
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property flairUrl (base name: "flair_url")', function() {
      // uncomment below and update the code to test the property flairUrl
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property incomingLinkCount (base name: "incoming_link_count")', function() {
      // uncomment below and update the code to test the property incomingLinkCount
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property moderator (base name: "moderator")', function() {
      // uncomment below and update the code to test the property moderator
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property postNumber (base name: "post_number")', function() {
      // uncomment below and update the code to test the property postNumber
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property postType (base name: "post_type")', function() {
      // uncomment below and update the code to test the property postType
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property primaryGroupName (base name: "primary_group_name")', function() {
      // uncomment below and update the code to test the property primaryGroupName
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property quoteCount (base name: "quote_count")', function() {
      // uncomment below and update the code to test the property quoteCount
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property raw (base name: "raw")', function() {
      // uncomment below and update the code to test the property raw
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property readersCount (base name: "readers_count")', function() {
      // uncomment below and update the code to test the property readersCount
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property reads (base name: "reads")', function() {
      // uncomment below and update the code to test the property reads
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property replyCount (base name: "reply_count")', function() {
      // uncomment below and update the code to test the property replyCount
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property replyToPostNumber (base name: "reply_to_post_number")', function() {
      // uncomment below and update the code to test the property replyToPostNumber
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property reviewableId (base name: "reviewable_id")', function() {
      // uncomment below and update the code to test the property reviewableId
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property reviewableScoreCount (base name: "reviewable_score_count")', function() {
      // uncomment below and update the code to test the property reviewableScoreCount
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property reviewableScorePendingCount (base name: "reviewable_score_pending_count")', function() {
      // uncomment below and update the code to test the property reviewableScorePendingCount
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property staff (base name: "staff")', function() {
      // uncomment below and update the code to test the property staff
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicHtmlTitle (base name: "topic_html_title")', function() {
      // uncomment below and update the code to test the property topicHtmlTitle
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicId (base name: "topic_id")', function() {
      // uncomment below and update the code to test the property topicId
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicSlug (base name: "topic_slug")', function() {
      // uncomment below and update the code to test the property topicSlug
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicTitle (base name: "topic_title")', function() {
      // uncomment below and update the code to test the property topicTitle
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property trustLevel (base name: "trust_level")', function() {
      // uncomment below and update the code to test the property trustLevel
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property userDeleted (base name: "user_deleted")', function() {
      // uncomment below and update the code to test the property userDeleted
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property userTitle (base name: "user_title")', function() {
      // uncomment below and update the code to test the property userTitle
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property wiki (base name: "wiki")', function() {
      // uncomment below and update the code to test the property wiki
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

    it('should have the property yours (base name: "yours")', function() {
      // uncomment below and update the code to test the property yours
      //var instance = new DiscourseApiDocumentation.ListPosts200ResponseLatestPostsInner();
      //expect(instance).to.be();
    });

  });

}));
