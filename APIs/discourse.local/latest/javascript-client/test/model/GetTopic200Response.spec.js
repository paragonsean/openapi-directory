/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.GetTopic200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTopic200Response', function() {
    it('should create an instance of GetTopic200Response', function() {
      // uncomment below and update the code to test GetTopic200Response
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be.a(DiscourseApiDocumentation.GetTopic200Response);
    });

    it('should have the property actionsSummary (base name: "actions_summary")', function() {
      // uncomment below and update the code to test the property actionsSummary
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property archetype (base name: "archetype")', function() {
      // uncomment below and update the code to test the property archetype
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property archived (base name: "archived")', function() {
      // uncomment below and update the code to test the property archived
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property bookmarked (base name: "bookmarked")', function() {
      // uncomment below and update the code to test the property bookmarked
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property bookmarks (base name: "bookmarks")', function() {
      // uncomment below and update the code to test the property bookmarks
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "category_id")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property chunkSize (base name: "chunk_size")', function() {
      // uncomment below and update the code to test the property chunkSize
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property closed (base name: "closed")', function() {
      // uncomment below and update the code to test the property closed
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property currentPostNumber (base name: "current_post_number")', function() {
      // uncomment below and update the code to test the property currentPostNumber
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property deletedBy (base name: "deleted_by")', function() {
      // uncomment below and update the code to test the property deletedBy
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property draft (base name: "draft")', function() {
      // uncomment below and update the code to test the property draft
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property draftKey (base name: "draft_key")', function() {
      // uncomment below and update the code to test the property draftKey
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property draftSequence (base name: "draft_sequence")', function() {
      // uncomment below and update the code to test the property draftSequence
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property fancyTitle (base name: "fancy_title")', function() {
      // uncomment below and update the code to test the property fancyTitle
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property featuredLink (base name: "featured_link")', function() {
      // uncomment below and update the code to test the property featuredLink
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property hasDeleted (base name: "has_deleted")', function() {
      // uncomment below and update the code to test the property hasDeleted
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property hasSummary (base name: "has_summary")', function() {
      // uncomment below and update the code to test the property hasSummary
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property highestPostNumber (base name: "highest_post_number")', function() {
      // uncomment below and update the code to test the property highestPostNumber
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "image_url")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastPostedAt (base name: "last_posted_at")', function() {
      // uncomment below and update the code to test the property lastPostedAt
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property likeCount (base name: "like_count")', function() {
      // uncomment below and update the code to test the property likeCount
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property messageBusLastId (base name: "message_bus_last_id")', function() {
      // uncomment below and update the code to test the property messageBusLastId
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property participantCount (base name: "participant_count")', function() {
      // uncomment below and update the code to test the property participantCount
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property pinned (base name: "pinned")', function() {
      // uncomment below and update the code to test the property pinned
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property pinnedAt (base name: "pinned_at")', function() {
      // uncomment below and update the code to test the property pinnedAt
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property pinnedGlobally (base name: "pinned_globally")', function() {
      // uncomment below and update the code to test the property pinnedGlobally
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property pinnedUntil (base name: "pinned_until")', function() {
      // uncomment below and update the code to test the property pinnedUntil
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property postStream (base name: "post_stream")', function() {
      // uncomment below and update the code to test the property postStream
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property postsCount (base name: "posts_count")', function() {
      // uncomment below and update the code to test the property postsCount
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property replyCount (base name: "reply_count")', function() {
      // uncomment below and update the code to test the property replyCount
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property showReadIndicator (base name: "show_read_indicator")', function() {
      // uncomment below and update the code to test the property showReadIndicator
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property slowModeEnabledUntil (base name: "slow_mode_enabled_until")', function() {
      // uncomment below and update the code to test the property slowModeEnabledUntil
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property slowModeSeconds (base name: "slow_mode_seconds")', function() {
      // uncomment below and update the code to test the property slowModeSeconds
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property suggestedTopics (base name: "suggested_topics")', function() {
      // uncomment below and update the code to test the property suggestedTopics
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property tagsDescriptions (base name: "tags_descriptions")', function() {
      // uncomment below and update the code to test the property tagsDescriptions
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property thumbnails (base name: "thumbnails")', function() {
      // uncomment below and update the code to test the property thumbnails
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property timelineLookup (base name: "timeline_lookup")', function() {
      // uncomment below and update the code to test the property timelineLookup
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property topicTimer (base name: "topic_timer")', function() {
      // uncomment below and update the code to test the property topicTimer
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property unpinned (base name: "unpinned")', function() {
      // uncomment below and update the code to test the property unpinned
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property views (base name: "views")', function() {
      // uncomment below and update the code to test the property views
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

    it('should have the property wordCount (base name: "word_count")', function() {
      // uncomment below and update the code to test the property wordCount
      //var instance = new DiscourseApiDocumentation.GetTopic200Response();
      //expect(instance).to.be();
    });

  });

}));
