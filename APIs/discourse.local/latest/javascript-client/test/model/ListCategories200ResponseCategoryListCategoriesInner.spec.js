/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListCategories200ResponseCategoryListCategoriesInner', function() {
    it('should create an instance of ListCategories200ResponseCategoryListCategoriesInner', function() {
      // uncomment below and update the code to test ListCategories200ResponseCategoryListCategoriesInner
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be.a(DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner);
    });

    it('should have the property canEdit (base name: "can_edit")', function() {
      // uncomment below and update the code to test the property canEdit
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property defaultListFilter (base name: "default_list_filter")', function() {
      // uncomment below and update the code to test the property defaultListFilter
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property defaultTopPeriod (base name: "default_top_period")', function() {
      // uncomment below and update the code to test the property defaultTopPeriod
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property defaultView (base name: "default_view")', function() {
      // uncomment below and update the code to test the property defaultView
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property descriptionExcerpt (base name: "description_excerpt")', function() {
      // uncomment below and update the code to test the property descriptionExcerpt
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property descriptionText (base name: "description_text")', function() {
      // uncomment below and update the code to test the property descriptionText
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property hasChildren (base name: "has_children")', function() {
      // uncomment below and update the code to test the property hasChildren
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property isUncategorized (base name: "is_uncategorized")', function() {
      // uncomment below and update the code to test the property isUncategorized
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property minimumRequiredTags (base name: "minimum_required_tags")', function() {
      // uncomment below and update the code to test the property minimumRequiredTags
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property navigateToFirstPostAfterRead (base name: "navigate_to_first_post_after_read")', function() {
      // uncomment below and update the code to test the property navigateToFirstPostAfterRead
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property notificationLevel (base name: "notification_level")', function() {
      // uncomment below and update the code to test the property notificationLevel
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property numFeaturedTopics (base name: "num_featured_topics")', function() {
      // uncomment below and update the code to test the property numFeaturedTopics
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property permission (base name: "permission")', function() {
      // uncomment below and update the code to test the property permission
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "position")', function() {
      // uncomment below and update the code to test the property position
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property postCount (base name: "post_count")', function() {
      // uncomment below and update the code to test the property postCount
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property readRestricted (base name: "read_restricted")', function() {
      // uncomment below and update the code to test the property readRestricted
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property showSubcategoryList (base name: "show_subcategory_list")', function() {
      // uncomment below and update the code to test the property showSubcategoryList
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property sortAscending (base name: "sort_ascending")', function() {
      // uncomment below and update the code to test the property sortAscending
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sort_order")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property subcategoryIds (base name: "subcategory_ids")', function() {
      // uncomment below and update the code to test the property subcategoryIds
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property subcategoryList (base name: "subcategory_list")', function() {
      // uncomment below and update the code to test the property subcategoryList
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property subcategoryListStyle (base name: "subcategory_list_style")', function() {
      // uncomment below and update the code to test the property subcategoryListStyle
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property textColor (base name: "text_color")', function() {
      // uncomment below and update the code to test the property textColor
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicCount (base name: "topic_count")', function() {
      // uncomment below and update the code to test the property topicCount
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicTemplate (base name: "topic_template")', function() {
      // uncomment below and update the code to test the property topicTemplate
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicUrl (base name: "topic_url")', function() {
      // uncomment below and update the code to test the property topicUrl
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsAllTime (base name: "topics_all_time")', function() {
      // uncomment below and update the code to test the property topicsAllTime
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsDay (base name: "topics_day")', function() {
      // uncomment below and update the code to test the property topicsDay
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsMonth (base name: "topics_month")', function() {
      // uncomment below and update the code to test the property topicsMonth
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsWeek (base name: "topics_week")', function() {
      // uncomment below and update the code to test the property topicsWeek
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsYear (base name: "topics_year")', function() {
      // uncomment below and update the code to test the property topicsYear
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property uploadedBackground (base name: "uploaded_background")', function() {
      // uncomment below and update the code to test the property uploadedBackground
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property uploadedLogo (base name: "uploaded_logo")', function() {
      // uncomment below and update the code to test the property uploadedLogo
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

    it('should have the property uploadedLogoDark (base name: "uploaded_logo_dark")', function() {
      // uncomment below and update the code to test the property uploadedLogoDark
      //var instance = new DiscourseApiDocumentation.ListCategories200ResponseCategoryListCategoriesInner();
      //expect(instance).to.be();
    });

  });

}));
