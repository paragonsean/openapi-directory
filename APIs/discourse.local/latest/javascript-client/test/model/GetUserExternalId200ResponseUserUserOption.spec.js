/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetUserExternalId200ResponseUserUserOption', function() {
    it('should create an instance of GetUserExternalId200ResponseUserUserOption', function() {
      // uncomment below and update the code to test GetUserExternalId200ResponseUserUserOption
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be.a(DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption);
    });

    it('should have the property allowPrivateMessages (base name: "allow_private_messages")', function() {
      // uncomment below and update the code to test the property allowPrivateMessages
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property autoTrackTopicsAfterMsecs (base name: "auto_track_topics_after_msecs")', function() {
      // uncomment below and update the code to test the property autoTrackTopicsAfterMsecs
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property automaticallyUnpinTopics (base name: "automatically_unpin_topics")', function() {
      // uncomment below and update the code to test the property automaticallyUnpinTopics
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property bookmarkAutoDeletePreference (base name: "bookmark_auto_delete_preference")', function() {
      // uncomment below and update the code to test the property bookmarkAutoDeletePreference
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property colorSchemeId (base name: "color_scheme_id")', function() {
      // uncomment below and update the code to test the property colorSchemeId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property darkSchemeId (base name: "dark_scheme_id")', function() {
      // uncomment below and update the code to test the property darkSchemeId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property defaultCalendar (base name: "default_calendar")', function() {
      // uncomment below and update the code to test the property defaultCalendar
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property digestAfterMinutes (base name: "digest_after_minutes")', function() {
      // uncomment below and update the code to test the property digestAfterMinutes
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property dynamicFavicon (base name: "dynamic_favicon")', function() {
      // uncomment below and update the code to test the property dynamicFavicon
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property emailDigests (base name: "email_digests")', function() {
      // uncomment below and update the code to test the property emailDigests
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property emailInReplyTo (base name: "email_in_reply_to")', function() {
      // uncomment below and update the code to test the property emailInReplyTo
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property emailLevel (base name: "email_level")', function() {
      // uncomment below and update the code to test the property emailLevel
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property emailMessagesLevel (base name: "email_messages_level")', function() {
      // uncomment below and update the code to test the property emailMessagesLevel
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property emailPreviousReplies (base name: "email_previous_replies")', function() {
      // uncomment below and update the code to test the property emailPreviousReplies
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property enableAllowedPmUsers (base name: "enable_allowed_pm_users")', function() {
      // uncomment below and update the code to test the property enableAllowedPmUsers
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property enableDefer (base name: "enable_defer")', function() {
      // uncomment below and update the code to test the property enableDefer
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property enableQuoting (base name: "enable_quoting")', function() {
      // uncomment below and update the code to test the property enableQuoting
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property externalLinksInNewTab (base name: "external_links_in_new_tab")', function() {
      // uncomment below and update the code to test the property externalLinksInNewTab
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property hideProfileAndPresence (base name: "hide_profile_and_presence")', function() {
      // uncomment below and update the code to test the property hideProfileAndPresence
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property homepageId (base name: "homepage_id")', function() {
      // uncomment below and update the code to test the property homepageId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property includeTl0InDigests (base name: "include_tl0_in_digests")', function() {
      // uncomment below and update the code to test the property includeTl0InDigests
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property likeNotificationFrequency (base name: "like_notification_frequency")', function() {
      // uncomment below and update the code to test the property likeNotificationFrequency
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property mailingListMode (base name: "mailing_list_mode")', function() {
      // uncomment below and update the code to test the property mailingListMode
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property mailingListModeFrequency (base name: "mailing_list_mode_frequency")', function() {
      // uncomment below and update the code to test the property mailingListModeFrequency
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property newTopicDurationMinutes (base name: "new_topic_duration_minutes")', function() {
      // uncomment below and update the code to test the property newTopicDurationMinutes
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property notificationLevelWhenReplying (base name: "notification_level_when_replying")', function() {
      // uncomment below and update the code to test the property notificationLevelWhenReplying
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property oldestSearchLogDate (base name: "oldest_search_log_date")', function() {
      // uncomment below and update the code to test the property oldestSearchLogDate
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property seenPopups (base name: "seen_popups")', function() {
      // uncomment below and update the code to test the property seenPopups
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property sidebarListDestination (base name: "sidebar_list_destination")', function() {
      // uncomment below and update the code to test the property sidebarListDestination
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property skipNewUserTips (base name: "skip_new_user_tips")', function() {
      // uncomment below and update the code to test the property skipNewUserTips
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property textSize (base name: "text_size")', function() {
      // uncomment below and update the code to test the property textSize
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property textSizeSeq (base name: "text_size_seq")', function() {
      // uncomment below and update the code to test the property textSizeSeq
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property themeIds (base name: "theme_ids")', function() {
      // uncomment below and update the code to test the property themeIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property themeKeySeq (base name: "theme_key_seq")', function() {
      // uncomment below and update the code to test the property themeKeySeq
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property titleCountMode (base name: "title_count_mode")', function() {
      // uncomment below and update the code to test the property titleCountMode
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUserUserOption();
      //expect(instance).to.be();
    });

  });

}));
