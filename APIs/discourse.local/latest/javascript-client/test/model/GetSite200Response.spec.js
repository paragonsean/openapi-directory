/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.GetSite200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetSite200Response', function() {
    it('should create an instance of GetSite200Response', function() {
      // uncomment below and update the code to test GetSite200Response
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be.a(DiscourseApiDocumentation.GetSite200Response);
    });

    it('should have the property anonymousTopMenuItems (base name: "anonymous_top_menu_items")', function() {
      // uncomment below and update the code to test the property anonymousTopMenuItems
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property archetypes (base name: "archetypes")', function() {
      // uncomment below and update the code to test the property archetypes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property authProviders (base name: "auth_providers")', function() {
      // uncomment below and update the code to test the property authProviders
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property canAssociateGroups (base name: "can_associate_groups")', function() {
      // uncomment below and update the code to test the property canAssociateGroups
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property canCreateTag (base name: "can_create_tag")', function() {
      // uncomment below and update the code to test the property canCreateTag
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property canTagPms (base name: "can_tag_pms")', function() {
      // uncomment below and update the code to test the property canTagPms
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property canTagTopics (base name: "can_tag_topics")', function() {
      // uncomment below and update the code to test the property canTagTopics
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property censoredRegexp (base name: "censored_regexp")', function() {
      // uncomment below and update the code to test the property censoredRegexp
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property customEmojiTranslation (base name: "custom_emoji_translation")', function() {
      // uncomment below and update the code to test the property customEmojiTranslation
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property defaultArchetype (base name: "default_archetype")', function() {
      // uncomment below and update the code to test the property defaultArchetype
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property defaultDarkColorScheme (base name: "default_dark_color_scheme")', function() {
      // uncomment below and update the code to test the property defaultDarkColorScheme
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property deniedEmojis (base name: "denied_emojis")', function() {
      // uncomment below and update the code to test the property deniedEmojis
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property displayedAboutPluginStatGroups (base name: "displayed_about_plugin_stat_groups")', function() {
      // uncomment below and update the code to test the property displayedAboutPluginStatGroups
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property filters (base name: "filters")', function() {
      // uncomment below and update the code to test the property filters
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property hashtagConfigurations (base name: "hashtag_configurations")', function() {
      // uncomment below and update the code to test the property hashtagConfigurations
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property hashtagIcons (base name: "hashtag_icons")', function() {
      // uncomment below and update the code to test the property hashtagIcons
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property markdownAdditionalOptions (base name: "markdown_additional_options")', function() {
      // uncomment below and update the code to test the property markdownAdditionalOptions
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property notificationTypes (base name: "notification_types")', function() {
      // uncomment below and update the code to test the property notificationTypes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property periods (base name: "periods")', function() {
      // uncomment below and update the code to test the property periods
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property postActionTypes (base name: "post_action_types")', function() {
      // uncomment below and update the code to test the property postActionTypes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property postTypes (base name: "post_types")', function() {
      // uncomment below and update the code to test the property postTypes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property showWelcomeTopicBanner (base name: "show_welcome_topic_banner")', function() {
      // uncomment below and update the code to test the property showWelcomeTopicBanner
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property tagsFilterRegexp (base name: "tags_filter_regexp")', function() {
      // uncomment below and update the code to test the property tagsFilterRegexp
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property topMenuItems (base name: "top_menu_items")', function() {
      // uncomment below and update the code to test the property topMenuItems
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property topTags (base name: "top_tags")', function() {
      // uncomment below and update the code to test the property topTags
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property topicFeaturedLinkAllowedCategoryIds (base name: "topic_featured_link_allowed_category_ids")', function() {
      // uncomment below and update the code to test the property topicFeaturedLinkAllowedCategoryIds
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property topicFlagTypes (base name: "topic_flag_types")', function() {
      // uncomment below and update the code to test the property topicFlagTypes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property trustLevels (base name: "trust_levels")', function() {
      // uncomment below and update the code to test the property trustLevels
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property uncategorizedCategoryId (base name: "uncategorized_category_id")', function() {
      // uncomment below and update the code to test the property uncategorizedCategoryId
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property userColorSchemes (base name: "user_color_schemes")', function() {
      // uncomment below and update the code to test the property userColorSchemes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property userFieldMaxLength (base name: "user_field_max_length")', function() {
      // uncomment below and update the code to test the property userFieldMaxLength
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property userFields (base name: "user_fields")', function() {
      // uncomment below and update the code to test the property userFields
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property userThemes (base name: "user_themes")', function() {
      // uncomment below and update the code to test the property userThemes
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property watchedWordsLink (base name: "watched_words_link")', function() {
      // uncomment below and update the code to test the property watchedWordsLink
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property watchedWordsReplace (base name: "watched_words_replace")', function() {
      // uncomment below and update the code to test the property watchedWordsReplace
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property whispersAllowedGroupsNames (base name: "whispers_allowed_groups_names")', function() {
      // uncomment below and update the code to test the property whispersAllowedGroupsNames
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

    it('should have the property wizardRequired (base name: "wizard_required")', function() {
      // uncomment below and update the code to test the property wizardRequired
      //var instance = new DiscourseApiDocumentation.GetSite200Response();
      //expect(instance).to.be();
    });

  });

}));
