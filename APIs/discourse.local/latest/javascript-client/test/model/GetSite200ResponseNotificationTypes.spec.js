/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetSite200ResponseNotificationTypes', function() {
    it('should create an instance of GetSite200ResponseNotificationTypes', function() {
      // uncomment below and update the code to test GetSite200ResponseNotificationTypes
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be.a(DiscourseApiDocumentation.GetSite200ResponseNotificationTypes);
    });

    it('should have the property assigned (base name: "assigned")', function() {
      // uncomment below and update the code to test the property assigned
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property bookmarkReminder (base name: "bookmark_reminder")', function() {
      // uncomment below and update the code to test the property bookmarkReminder
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property chatGroupMention (base name: "chat_group_mention")', function() {
      // uncomment below and update the code to test the property chatGroupMention
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property chatInvitation (base name: "chat_invitation")', function() {
      // uncomment below and update the code to test the property chatInvitation
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property chatMention (base name: "chat_mention")', function() {
      // uncomment below and update the code to test the property chatMention
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property chatMessage (base name: "chat_message")', function() {
      // uncomment below and update the code to test the property chatMessage
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property chatQuoted (base name: "chat_quoted")', function() {
      // uncomment below and update the code to test the property chatQuoted
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property circlesActivity (base name: "circles_activity")', function() {
      // uncomment below and update the code to test the property circlesActivity
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property codeReviewCommitApproved (base name: "code_review_commit_approved")', function() {
      // uncomment below and update the code to test the property codeReviewCommitApproved
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property custom (base name: "custom")', function() {
      // uncomment below and update the code to test the property custom
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property edited (base name: "edited")', function() {
      // uncomment below and update the code to test the property edited
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property eventInvitation (base name: "event_invitation")', function() {
      // uncomment below and update the code to test the property eventInvitation
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property eventReminder (base name: "event_reminder")', function() {
      // uncomment below and update the code to test the property eventReminder
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property following (base name: "following")', function() {
      // uncomment below and update the code to test the property following
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property followingCreatedTopic (base name: "following_created_topic")', function() {
      // uncomment below and update the code to test the property followingCreatedTopic
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property followingReplied (base name: "following_replied")', function() {
      // uncomment below and update the code to test the property followingReplied
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property grantedBadge (base name: "granted_badge")', function() {
      // uncomment below and update the code to test the property grantedBadge
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property groupMentioned (base name: "group_mentioned")', function() {
      // uncomment below and update the code to test the property groupMentioned
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property groupMessageSummary (base name: "group_message_summary")', function() {
      // uncomment below and update the code to test the property groupMessageSummary
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property invitedToPrivateMessage (base name: "invited_to_private_message")', function() {
      // uncomment below and update the code to test the property invitedToPrivateMessage
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property invitedToTopic (base name: "invited_to_topic")', function() {
      // uncomment below and update the code to test the property invitedToTopic
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property inviteeAccepted (base name: "invitee_accepted")', function() {
      // uncomment below and update the code to test the property inviteeAccepted
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property liked (base name: "liked")', function() {
      // uncomment below and update the code to test the property liked
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property likedConsolidated (base name: "liked_consolidated")', function() {
      // uncomment below and update the code to test the property likedConsolidated
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property linked (base name: "linked")', function() {
      // uncomment below and update the code to test the property linked
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property membershipRequestAccepted (base name: "membership_request_accepted")', function() {
      // uncomment below and update the code to test the property membershipRequestAccepted
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property membershipRequestConsolidated (base name: "membership_request_consolidated")', function() {
      // uncomment below and update the code to test the property membershipRequestConsolidated
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property mentioned (base name: "mentioned")', function() {
      // uncomment below and update the code to test the property mentioned
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property movedPost (base name: "moved_post")', function() {
      // uncomment below and update the code to test the property movedPost
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property newFeatures (base name: "new_features")', function() {
      // uncomment below and update the code to test the property newFeatures
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property postApproved (base name: "post_approved")', function() {
      // uncomment below and update the code to test the property postApproved
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property posted (base name: "posted")', function() {
      // uncomment below and update the code to test the property posted
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property privateMessage (base name: "private_message")', function() {
      // uncomment below and update the code to test the property privateMessage
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property questionAnswerUserCommented (base name: "question_answer_user_commented")', function() {
      // uncomment below and update the code to test the property questionAnswerUserCommented
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property quoted (base name: "quoted")', function() {
      // uncomment below and update the code to test the property quoted
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property reaction (base name: "reaction")', function() {
      // uncomment below and update the code to test the property reaction
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property replied (base name: "replied")', function() {
      // uncomment below and update the code to test the property replied
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property topicReminder (base name: "topic_reminder")', function() {
      // uncomment below and update the code to test the property topicReminder
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property votesReleased (base name: "votes_released")', function() {
      // uncomment below and update the code to test the property votesReleased
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property watchingCategoryOrTag (base name: "watching_category_or_tag")', function() {
      // uncomment below and update the code to test the property watchingCategoryOrTag
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

    it('should have the property watchingFirstPost (base name: "watching_first_post")', function() {
      // uncomment below and update the code to test the property watchingFirstPost
      //var instance = new DiscourseApiDocumentation.GetSite200ResponseNotificationTypes();
      //expect(instance).to.be();
    });

  });

}));
