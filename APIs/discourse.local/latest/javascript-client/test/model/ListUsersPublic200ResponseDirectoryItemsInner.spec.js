/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListUsersPublic200ResponseDirectoryItemsInner', function() {
    it('should create an instance of ListUsersPublic200ResponseDirectoryItemsInner', function() {
      // uncomment below and update the code to test ListUsersPublic200ResponseDirectoryItemsInner
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be.a(DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner);
    });

    it('should have the property daysVisited (base name: "days_visited")', function() {
      // uncomment below and update the code to test the property daysVisited
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property likesGiven (base name: "likes_given")', function() {
      // uncomment below and update the code to test the property likesGiven
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property likesReceived (base name: "likes_received")', function() {
      // uncomment below and update the code to test the property likesReceived
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property postCount (base name: "post_count")', function() {
      // uncomment below and update the code to test the property postCount
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property postsRead (base name: "posts_read")', function() {
      // uncomment below and update the code to test the property postsRead
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicCount (base name: "topic_count")', function() {
      // uncomment below and update the code to test the property topicCount
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsEntered (base name: "topics_entered")', function() {
      // uncomment below and update the code to test the property topicsEntered
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new DiscourseApiDocumentation.ListUsersPublic200ResponseDirectoryItemsInner();
      //expect(instance).to.be();
    });

  });

}));
