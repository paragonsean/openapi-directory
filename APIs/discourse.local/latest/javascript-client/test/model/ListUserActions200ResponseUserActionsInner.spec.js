/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListUserActions200ResponseUserActionsInner', function() {
    it('should create an instance of ListUserActions200ResponseUserActionsInner', function() {
      // uncomment below and update the code to test ListUserActions200ResponseUserActionsInner
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be.a(DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner);
    });

    it('should have the property actingAvatarTemplate (base name: "acting_avatar_template")', function() {
      // uncomment below and update the code to test the property actingAvatarTemplate
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property actingName (base name: "acting_name")', function() {
      // uncomment below and update the code to test the property actingName
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property actingUserId (base name: "acting_user_id")', function() {
      // uncomment below and update the code to test the property actingUserId
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property actingUsername (base name: "acting_username")', function() {
      // uncomment below and update the code to test the property actingUsername
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property actionCode (base name: "action_code")', function() {
      // uncomment below and update the code to test the property actionCode
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property actionType (base name: "action_type")', function() {
      // uncomment below and update the code to test the property actionType
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property archived (base name: "archived")', function() {
      // uncomment below and update the code to test the property archived
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property avatarTemplate (base name: "avatar_template")', function() {
      // uncomment below and update the code to test the property avatarTemplate
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "category_id")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property closed (base name: "closed")', function() {
      // uncomment below and update the code to test the property closed
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property excerpt (base name: "excerpt")', function() {
      // uncomment below and update the code to test the property excerpt
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property postId (base name: "post_id")', function() {
      // uncomment below and update the code to test the property postId
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property postNumber (base name: "post_number")', function() {
      // uncomment below and update the code to test the property postNumber
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property postType (base name: "post_type")', function() {
      // uncomment below and update the code to test the property postType
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property targetName (base name: "target_name")', function() {
      // uncomment below and update the code to test the property targetName
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property targetUserId (base name: "target_user_id")', function() {
      // uncomment below and update the code to test the property targetUserId
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property targetUsername (base name: "target_username")', function() {
      // uncomment below and update the code to test the property targetUsername
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property topicId (base name: "topic_id")', function() {
      // uncomment below and update the code to test the property topicId
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new DiscourseApiDocumentation.ListUserActions200ResponseUserActionsInner();
      //expect(instance).to.be();
    });

  });

}));
