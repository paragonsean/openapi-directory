/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetUserExternalId200ResponseUser', function() {
    it('should create an instance of GetUserExternalId200ResponseUser', function() {
      // uncomment below and update the code to test GetUserExternalId200ResponseUser
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be.a(DiscourseApiDocumentation.GetUserExternalId200ResponseUser);
    });

    it('should have the property admin (base name: "admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property allowedPmUsernames (base name: "allowed_pm_usernames")', function() {
      // uncomment below and update the code to test the property allowedPmUsernames
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property avatarTemplate (base name: "avatar_template")', function() {
      // uncomment below and update the code to test the property avatarTemplate
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property badgeCount (base name: "badge_count")', function() {
      // uncomment below and update the code to test the property badgeCount
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canBeDeleted (base name: "can_be_deleted")', function() {
      // uncomment below and update the code to test the property canBeDeleted
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canChangeBio (base name: "can_change_bio")', function() {
      // uncomment below and update the code to test the property canChangeBio
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canChangeLocation (base name: "can_change_location")', function() {
      // uncomment below and update the code to test the property canChangeLocation
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canChangeTrackingPreferences (base name: "can_change_tracking_preferences")', function() {
      // uncomment below and update the code to test the property canChangeTrackingPreferences
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canChangeWebsite (base name: "can_change_website")', function() {
      // uncomment below and update the code to test the property canChangeWebsite
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteAllPosts (base name: "can_delete_all_posts")', function() {
      // uncomment below and update the code to test the property canDeleteAllPosts
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canEdit (base name: "can_edit")', function() {
      // uncomment below and update the code to test the property canEdit
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canEditEmail (base name: "can_edit_email")', function() {
      // uncomment below and update the code to test the property canEditEmail
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canEditName (base name: "can_edit_name")', function() {
      // uncomment below and update the code to test the property canEditName
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canEditUsername (base name: "can_edit_username")', function() {
      // uncomment below and update the code to test the property canEditUsername
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canIgnoreUser (base name: "can_ignore_user")', function() {
      // uncomment below and update the code to test the property canIgnoreUser
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canMuteUser (base name: "can_mute_user")', function() {
      // uncomment below and update the code to test the property canMuteUser
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canSendPrivateMessageToUser (base name: "can_send_private_message_to_user")', function() {
      // uncomment below and update the code to test the property canSendPrivateMessageToUser
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canSendPrivateMessages (base name: "can_send_private_messages")', function() {
      // uncomment below and update the code to test the property canSendPrivateMessages
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canUploadProfileHeader (base name: "can_upload_profile_header")', function() {
      // uncomment below and update the code to test the property canUploadProfileHeader
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property canUploadUserCardBackground (base name: "can_upload_user_card_background")', function() {
      // uncomment below and update the code to test the property canUploadUserCardBackground
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "custom_fields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property featuredTopic (base name: "featured_topic")', function() {
      // uncomment below and update the code to test the property featuredTopic
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property featuredUserBadgeIds (base name: "featured_user_badge_ids")', function() {
      // uncomment below and update the code to test the property featuredUserBadgeIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property flairBgColor (base name: "flair_bg_color")', function() {
      // uncomment below and update the code to test the property flairBgColor
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property flairColor (base name: "flair_color")', function() {
      // uncomment below and update the code to test the property flairColor
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property flairGroupId (base name: "flair_group_id")', function() {
      // uncomment below and update the code to test the property flairGroupId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property flairName (base name: "flair_name")', function() {
      // uncomment below and update the code to test the property flairName
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property flairUrl (base name: "flair_url")', function() {
      // uncomment below and update the code to test the property flairUrl
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property groupUsers (base name: "group_users")', function() {
      // uncomment below and update the code to test the property groupUsers
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property hasTitleBadges (base name: "has_title_badges")', function() {
      // uncomment below and update the code to test the property hasTitleBadges
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property ignored (base name: "ignored")', function() {
      // uncomment below and update the code to test the property ignored
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property ignoredUsernames (base name: "ignored_usernames")', function() {
      // uncomment below and update the code to test the property ignoredUsernames
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property invitedBy (base name: "invited_by")', function() {
      // uncomment below and update the code to test the property invitedBy
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property lastPostedAt (base name: "last_posted_at")', function() {
      // uncomment below and update the code to test the property lastPostedAt
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property lastSeenAt (base name: "last_seen_at")', function() {
      // uncomment below and update the code to test the property lastSeenAt
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property locale (base name: "locale")', function() {
      // uncomment below and update the code to test the property locale
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property mailingListPostsPerDay (base name: "mailing_list_posts_per_day")', function() {
      // uncomment below and update the code to test the property mailingListPostsPerDay
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property moderator (base name: "moderator")', function() {
      // uncomment below and update the code to test the property moderator
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property muted (base name: "muted")', function() {
      // uncomment below and update the code to test the property muted
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property mutedCategoryIds (base name: "muted_category_ids")', function() {
      // uncomment below and update the code to test the property mutedCategoryIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property mutedTags (base name: "muted_tags")', function() {
      // uncomment below and update the code to test the property mutedTags
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property mutedUsernames (base name: "muted_usernames")', function() {
      // uncomment below and update the code to test the property mutedUsernames
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property pendingCount (base name: "pending_count")', function() {
      // uncomment below and update the code to test the property pendingCount
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property pendingPostsCount (base name: "pending_posts_count")', function() {
      // uncomment below and update the code to test the property pendingPostsCount
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property postCount (base name: "post_count")', function() {
      // uncomment below and update the code to test the property postCount
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property primaryGroupId (base name: "primary_group_id")', function() {
      // uncomment below and update the code to test the property primaryGroupId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property primaryGroupName (base name: "primary_group_name")', function() {
      // uncomment below and update the code to test the property primaryGroupName
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property profileViewCount (base name: "profile_view_count")', function() {
      // uncomment below and update the code to test the property profileViewCount
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property recentTimeRead (base name: "recent_time_read")', function() {
      // uncomment below and update the code to test the property recentTimeRead
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property regularCategoryIds (base name: "regular_category_ids")', function() {
      // uncomment below and update the code to test the property regularCategoryIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property secondFactorBackupEnabled (base name: "second_factor_backup_enabled")', function() {
      // uncomment below and update the code to test the property secondFactorBackupEnabled
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property secondFactorEnabled (base name: "second_factor_enabled")', function() {
      // uncomment below and update the code to test the property secondFactorEnabled
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property staged (base name: "staged")', function() {
      // uncomment below and update the code to test the property staged
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property systemAvatarTemplate (base name: "system_avatar_template")', function() {
      // uncomment below and update the code to test the property systemAvatarTemplate
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property systemAvatarUploadId (base name: "system_avatar_upload_id")', function() {
      // uncomment below and update the code to test the property systemAvatarUploadId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property timeRead (base name: "time_read")', function() {
      // uncomment below and update the code to test the property timeRead
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property trackedCategoryIds (base name: "tracked_category_ids")', function() {
      // uncomment below and update the code to test the property trackedCategoryIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property trackedTags (base name: "tracked_tags")', function() {
      // uncomment below and update the code to test the property trackedTags
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property trustLevel (base name: "trust_level")', function() {
      // uncomment below and update the code to test the property trustLevel
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property uploadedAvatarId (base name: "uploaded_avatar_id")', function() {
      // uncomment below and update the code to test the property uploadedAvatarId
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property useLogoSmallAsAvatar (base name: "use_logo_small_as_avatar")', function() {
      // uncomment below and update the code to test the property useLogoSmallAsAvatar
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property userApiKeys (base name: "user_api_keys")', function() {
      // uncomment below and update the code to test the property userApiKeys
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property userAuthTokens (base name: "user_auth_tokens")', function() {
      // uncomment below and update the code to test the property userAuthTokens
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property userFields (base name: "user_fields")', function() {
      // uncomment below and update the code to test the property userFields
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property userNotificationSchedule (base name: "user_notification_schedule")', function() {
      // uncomment below and update the code to test the property userNotificationSchedule
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property userOption (base name: "user_option")', function() {
      // uncomment below and update the code to test the property userOption
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property watchedCategoryIds (base name: "watched_category_ids")', function() {
      // uncomment below and update the code to test the property watchedCategoryIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property watchedFirstPostCategoryIds (base name: "watched_first_post_category_ids")', function() {
      // uncomment below and update the code to test the property watchedFirstPostCategoryIds
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property watchedTags (base name: "watched_tags")', function() {
      // uncomment below and update the code to test the property watchedTags
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

    it('should have the property watchingFirstPostTags (base name: "watching_first_post_tags")', function() {
      // uncomment below and update the code to test the property watchingFirstPostTags
      //var instance = new DiscourseApiDocumentation.GetUserExternalId200ResponseUser();
      //expect(instance).to.be();
    });

  });

}));
