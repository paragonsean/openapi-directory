/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTopic200ResponseDetails', function() {
    it('should create an instance of GetTopic200ResponseDetails', function() {
      // uncomment below and update the code to test GetTopic200ResponseDetails
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be.a(DiscourseApiDocumentation.GetTopic200ResponseDetails);
    });

    it('should have the property canArchiveTopic (base name: "can_archive_topic")', function() {
      // uncomment below and update the code to test the property canArchiveTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canCloseTopic (base name: "can_close_topic")', function() {
      // uncomment below and update the code to test the property canCloseTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canConvertTopic (base name: "can_convert_topic")', function() {
      // uncomment below and update the code to test the property canConvertTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canCreatePost (base name: "can_create_post")', function() {
      // uncomment below and update the code to test the property canCreatePost
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canDelete (base name: "can_delete")', function() {
      // uncomment below and update the code to test the property canDelete
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canEdit (base name: "can_edit")', function() {
      // uncomment below and update the code to test the property canEdit
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canEditStaffNotes (base name: "can_edit_staff_notes")', function() {
      // uncomment below and update the code to test the property canEditStaffNotes
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canFlagTopic (base name: "can_flag_topic")', function() {
      // uncomment below and update the code to test the property canFlagTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canInviteTo (base name: "can_invite_to")', function() {
      // uncomment below and update the code to test the property canInviteTo
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canInviteViaEmail (base name: "can_invite_via_email")', function() {
      // uncomment below and update the code to test the property canInviteViaEmail
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canModerateCategory (base name: "can_moderate_category")', function() {
      // uncomment below and update the code to test the property canModerateCategory
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canMovePosts (base name: "can_move_posts")', function() {
      // uncomment below and update the code to test the property canMovePosts
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canPinUnpinTopic (base name: "can_pin_unpin_topic")', function() {
      // uncomment below and update the code to test the property canPinUnpinTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canRemoveAllowedUsers (base name: "can_remove_allowed_users")', function() {
      // uncomment below and update the code to test the property canRemoveAllowedUsers
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canRemoveSelfId (base name: "can_remove_self_id")', function() {
      // uncomment below and update the code to test the property canRemoveSelfId
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canReplyAsNewTopic (base name: "can_reply_as_new_topic")', function() {
      // uncomment below and update the code to test the property canReplyAsNewTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canReviewTopic (base name: "can_review_topic")', function() {
      // uncomment below and update the code to test the property canReviewTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canSplitMergeTopic (base name: "can_split_merge_topic")', function() {
      // uncomment below and update the code to test the property canSplitMergeTopic
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property canToggleTopicVisibility (base name: "can_toggle_topic_visibility")', function() {
      // uncomment below and update the code to test the property canToggleTopicVisibility
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "created_by")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property lastPoster (base name: "last_poster")', function() {
      // uncomment below and update the code to test the property lastPoster
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property notificationLevel (base name: "notification_level")', function() {
      // uncomment below and update the code to test the property notificationLevel
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

    it('should have the property participants (base name: "participants")', function() {
      // uncomment below and update the code to test the property participants
      //var instance = new DiscourseApiDocumentation.GetTopic200ResponseDetails();
      //expect(instance).to.be();
    });

  });

}));
