/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminListUsers200ResponseInner', function() {
    it('should create an instance of AdminListUsers200ResponseInner', function() {
      // uncomment below and update the code to test AdminListUsers200ResponseInner
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be.a(DiscourseApiDocumentation.AdminListUsers200ResponseInner);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property admin (base name: "admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property avatarTemplate (base name: "avatar_template")', function() {
      // uncomment below and update the code to test the property avatarTemplate
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property createdAtAge (base name: "created_at_age")', function() {
      // uncomment below and update the code to test the property createdAtAge
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property daysVisited (base name: "days_visited")', function() {
      // uncomment below and update the code to test the property daysVisited
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property flagLevel (base name: "flag_level")', function() {
      // uncomment below and update the code to test the property flagLevel
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property lastEmailedAge (base name: "last_emailed_age")', function() {
      // uncomment below and update the code to test the property lastEmailedAge
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property lastEmailedAt (base name: "last_emailed_at")', function() {
      // uncomment below and update the code to test the property lastEmailedAt
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property lastSeenAge (base name: "last_seen_age")', function() {
      // uncomment below and update the code to test the property lastSeenAge
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property lastSeenAt (base name: "last_seen_at")', function() {
      // uncomment below and update the code to test the property lastSeenAt
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property manualLockedTrustLevel (base name: "manual_locked_trust_level")', function() {
      // uncomment below and update the code to test the property manualLockedTrustLevel
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property moderator (base name: "moderator")', function() {
      // uncomment below and update the code to test the property moderator
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property postCount (base name: "post_count")', function() {
      // uncomment below and update the code to test the property postCount
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property postsReadCount (base name: "posts_read_count")', function() {
      // uncomment below and update the code to test the property postsReadCount
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property secondaryEmails (base name: "secondary_emails")', function() {
      // uncomment below and update the code to test the property secondaryEmails
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property staged (base name: "staged")', function() {
      // uncomment below and update the code to test the property staged
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property timeRead (base name: "time_read")', function() {
      // uncomment below and update the code to test the property timeRead
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property topicsEntered (base name: "topics_entered")', function() {
      // uncomment below and update the code to test the property topicsEntered
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property trustLevel (base name: "trust_level")', function() {
      // uncomment below and update the code to test the property trustLevel
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new DiscourseApiDocumentation.AdminListUsers200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
