/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiscourseApiDocumentation);
  }
}(this, function(expect, DiscourseApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminGetUser200ResponseTl3Requirements', function() {
    it('should create an instance of AdminGetUser200ResponseTl3Requirements', function() {
      // uncomment below and update the code to test AdminGetUser200ResponseTl3Requirements
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be.a(DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements);
    });

    it('should have the property daysVisited (base name: "days_visited")', function() {
      // uncomment below and update the code to test the property daysVisited
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property maxFlaggedByUsers (base name: "max_flagged_by_users")', function() {
      // uncomment below and update the code to test the property maxFlaggedByUsers
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property maxFlaggedPosts (base name: "max_flagged_posts")', function() {
      // uncomment below and update the code to test the property maxFlaggedPosts
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minDaysVisited (base name: "min_days_visited")', function() {
      // uncomment below and update the code to test the property minDaysVisited
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minLikesGiven (base name: "min_likes_given")', function() {
      // uncomment below and update the code to test the property minLikesGiven
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minLikesReceived (base name: "min_likes_received")', function() {
      // uncomment below and update the code to test the property minLikesReceived
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minLikesReceivedDays (base name: "min_likes_received_days")', function() {
      // uncomment below and update the code to test the property minLikesReceivedDays
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minLikesReceivedUsers (base name: "min_likes_received_users")', function() {
      // uncomment below and update the code to test the property minLikesReceivedUsers
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minPostsRead (base name: "min_posts_read")', function() {
      // uncomment below and update the code to test the property minPostsRead
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minPostsReadAllTime (base name: "min_posts_read_all_time")', function() {
      // uncomment below and update the code to test the property minPostsReadAllTime
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minTopicsRepliedTo (base name: "min_topics_replied_to")', function() {
      // uncomment below and update the code to test the property minTopicsRepliedTo
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minTopicsViewed (base name: "min_topics_viewed")', function() {
      // uncomment below and update the code to test the property minTopicsViewed
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property minTopicsViewedAllTime (base name: "min_topics_viewed_all_time")', function() {
      // uncomment below and update the code to test the property minTopicsViewedAllTime
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numFlaggedByUsers (base name: "num_flagged_by_users")', function() {
      // uncomment below and update the code to test the property numFlaggedByUsers
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numFlaggedPosts (base name: "num_flagged_posts")', function() {
      // uncomment below and update the code to test the property numFlaggedPosts
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numLikesGiven (base name: "num_likes_given")', function() {
      // uncomment below and update the code to test the property numLikesGiven
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numLikesReceived (base name: "num_likes_received")', function() {
      // uncomment below and update the code to test the property numLikesReceived
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numLikesReceivedDays (base name: "num_likes_received_days")', function() {
      // uncomment below and update the code to test the property numLikesReceivedDays
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numLikesReceivedUsers (base name: "num_likes_received_users")', function() {
      // uncomment below and update the code to test the property numLikesReceivedUsers
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property numTopicsRepliedTo (base name: "num_topics_replied_to")', function() {
      // uncomment below and update the code to test the property numTopicsRepliedTo
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property onGracePeriod (base name: "on_grace_period")', function() {
      // uncomment below and update the code to test the property onGracePeriod
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property penaltyCounts (base name: "penalty_counts")', function() {
      // uncomment below and update the code to test the property penaltyCounts
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property postsRead (base name: "posts_read")', function() {
      // uncomment below and update the code to test the property postsRead
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property postsReadAllTime (base name: "posts_read_all_time")', function() {
      // uncomment below and update the code to test the property postsReadAllTime
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property requirementsLost (base name: "requirements_lost")', function() {
      // uncomment below and update the code to test the property requirementsLost
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property requirementsMet (base name: "requirements_met")', function() {
      // uncomment below and update the code to test the property requirementsMet
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property timePeriod (base name: "time_period")', function() {
      // uncomment below and update the code to test the property timePeriod
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property topicsViewed (base name: "topics_viewed")', function() {
      // uncomment below and update the code to test the property topicsViewed
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property topicsViewedAllTime (base name: "topics_viewed_all_time")', function() {
      // uncomment below and update the code to test the property topicsViewedAllTime
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

    it('should have the property trustLevelLocked (base name: "trust_level_locked")', function() {
      // uncomment below and update the code to test the property trustLevelLocked
      //var instance = new DiscourseApiDocumentation.AdminGetUser200ResponseTl3Requirements();
      //expect(instance).to.be();
    });

  });

}));
