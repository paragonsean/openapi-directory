/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminGetUser200Response from '../model/AdminGetUser200Response';
import AdminListUsers200ResponseInner from '../model/AdminListUsers200ResponseInner';
import AnonymizeUser200Response from '../model/AnonymizeUser200Response';
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import CreateUser200Response from '../model/CreateUser200Response';
import CreateUserRequest from '../model/CreateUserRequest';
import DeleteGroup200Response from '../model/DeleteGroup200Response';
import DeleteUser200Response from '../model/DeleteUser200Response';
import DeleteUserRequest from '../model/DeleteUserRequest';
import GetUserEmails200Response from '../model/GetUserEmails200Response';
import GetUserExternalId200Response from '../model/GetUserExternalId200Response';
import ListUserActions200Response from '../model/ListUserActions200Response';
import ListUserBadges200Response from '../model/ListUserBadges200Response';
import ListUsersPublic200Response from '../model/ListUsersPublic200Response';
import RefreshGravatar200Response from '../model/RefreshGravatar200Response';
import SendPasswordResetEmail200Response from '../model/SendPasswordResetEmail200Response';
import SendPasswordResetEmailRequest from '../model/SendPasswordResetEmailRequest';
import SilenceUser200Response from '../model/SilenceUser200Response';
import SilenceUserRequest from '../model/SilenceUserRequest';
import SuspendUser200Response from '../model/SuspendUser200Response';
import SuspendUserRequest from '../model/SuspendUserRequest';
import UpdateAvatarRequest from '../model/UpdateAvatarRequest';
import UpdateEmailRequest from '../model/UpdateEmailRequest';
import UpdateUser200Response from '../model/UpdateUser200Response';
import UpdateUserRequest from '../model/UpdateUserRequest';
import UpdateUsernameRequest from '../model/UpdateUsernameRequest';

/**
* Users service.
* @module api/UsersApi
* @version latest
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminGetUser operation.
     * @callback module:api/UsersApi~adminGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminGetUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by id
     * @param {Number} id 
     * @param {module:api/UsersApi~adminGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminGetUser200Response}
     */
    adminGetUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGetUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminGetUser200Response;
      return this.apiClient.callApi(
        '/admin/users/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminListUsers operation.
     * @callback module:api/UsersApi~adminListUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdminListUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of users
     * @param {module:model/String} flag 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {module:model/String} [asc] 
     * @param {Number} [page] 
     * @param {Boolean} [showEmails] 
     * @param {module:api/UsersApi~adminListUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdminListUsers200ResponseInner>}
     */
    adminListUsers(flag, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flag' is set
      if (flag === undefined || flag === null) {
        throw new Error("Missing the required parameter 'flag' when calling adminListUsers");
      }

      let pathParams = {
        'flag': flag
      };
      let queryParams = {
        'order': opts['order'],
        'asc': opts['asc'],
        'page': opts['page'],
        'show_emails': opts['showEmails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdminListUsers200ResponseInner];
      return this.apiClient.callApi(
        '/admin/users/list/{flag}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizeUser operation.
     * @callback module:api/UsersApi~anonymizeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnonymizeUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Anonymize a user
     * @param {Number} id 
     * @param {module:api/UsersApi~anonymizeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnonymizeUser200Response}
     */
    anonymizeUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling anonymizeUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnonymizeUser200Response;
      return this.apiClient.callApi(
        '/admin/users/{id}/anonymize.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/UsersApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} token 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordRequest} [changePasswordRequest] 
     * @param {module:api/UsersApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(token, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePasswordRequest'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling changePassword");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/password-reset/{token}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUserRequest} [createUserRequest] 
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUser200Response}
     */
    createUser(apiKey, apiUsername, opts, callback) {
      opts = opts || {};
      let postBody = opts['createUserRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createUser");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUser200Response;
      return this.apiClient.callApi(
        '/users.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteUserRequest} [deleteUserRequest] 
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUser200Response}
     */
    deleteUser(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteUser200Response;
      return this.apiClient.callApi(
        '/admin/users/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserExternalId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single user by username
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} username 
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserExternalId200Response}
     */
    getUser(apiKey, apiUsername, username, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUser");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserExternalId200Response;
      return this.apiClient.callApi(
        '/u/{username}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserEmails operation.
     * @callback module:api/UsersApi~getUserEmailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserEmails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email addresses belonging to a user
     * @param {String} username 
     * @param {module:api/UsersApi~getUserEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserEmails200Response}
     */
    getUserEmails(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserEmails");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserEmails200Response;
      return this.apiClient.callApi(
        '/u/{username}/emails.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserExternalId operation.
     * @callback module:api/UsersApi~getUserExternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserExternalId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by external_id
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} externalId 
     * @param {module:api/UsersApi~getUserExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserExternalId200Response}
     */
    getUserExternalId(apiKey, apiUsername, externalId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUserExternalId");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getUserExternalId");
      }
      // verify the required parameter 'externalId' is set
      if (externalId === undefined || externalId === null) {
        throw new Error("Missing the required parameter 'externalId' when calling getUserExternalId");
      }

      let pathParams = {
        'external_id': externalId
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserExternalId200Response;
      return this.apiClient.callApi(
        '/u/by-external/{external_id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserIdentiyProviderExternalId operation.
     * @callback module:api/UsersApi~getUserIdentiyProviderExternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserExternalId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by identity provider external ID
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} provider Authentication provider name. Can be found in the provider callback URL: `/auth/{provider}/callback`
     * @param {String} externalId 
     * @param {module:api/UsersApi~getUserIdentiyProviderExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserExternalId200Response}
     */
    getUserIdentiyProviderExternalId(apiKey, apiUsername, provider, externalId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUserIdentiyProviderExternalId");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getUserIdentiyProviderExternalId");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getUserIdentiyProviderExternalId");
      }
      // verify the required parameter 'externalId' is set
      if (externalId === undefined || externalId === null) {
        throw new Error("Missing the required parameter 'externalId' when calling getUserIdentiyProviderExternalId");
      }

      let pathParams = {
        'provider': provider,
        'external_id': externalId
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserExternalId200Response;
      return this.apiClient.callApi(
        '/u/by-external/{provider}/{external_id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserActions operation.
     * @callback module:api/UsersApi~listUserActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserActions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of user actions
     * @param {Number} offset 
     * @param {String} username 
     * @param {String} filter 
     * @param {module:api/UsersApi~listUserActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserActions200Response}
     */
    listUserActions(offset, username, filter, callback) {
      let postBody = null;
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listUserActions");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listUserActions");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling listUserActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': offset,
        'username': username,
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUserActions200Response;
      return this.apiClient.callApi(
        '/user_actions.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserBadges_0 operation.
     * @callback module:api/UsersApi~listUserBadges_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserBadges200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List badges for a user
     * @param {String} username 
     * @param {module:api/UsersApi~listUserBadges_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserBadges200Response}
     */
    listUserBadges_0(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listUserBadges_0");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUserBadges200Response;
      return this.apiClient.callApi(
        '/user-badges/{username}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsersPublic operation.
     * @callback module:api/UsersApi~listUsersPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersPublic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a public list of users
     * @param {module:model/String} period 
     * @param {module:model/String} order 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [asc] 
     * @param {Number} [page] 
     * @param {module:api/UsersApi~listUsersPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersPublic200Response}
     */
    listUsersPublic(period, order, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling listUsersPublic");
      }
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling listUsersPublic");
      }

      let pathParams = {
      };
      let queryParams = {
        'period': period,
        'order': order,
        'asc': opts['asc'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersPublic200Response;
      return this.apiClient.callApi(
        '/directory_items.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logOutUser operation.
     * @callback module:api/UsersApi~logOutUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log a user out
     * @param {Number} id 
     * @param {module:api/UsersApi~logOutUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGroup200Response}
     */
    logOutUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logOutUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteGroup200Response;
      return this.apiClient.callApi(
        '/admin/users/{id}/log_out.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshGravatar operation.
     * @callback module:api/UsersApi~refreshGravatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshGravatar200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh gravatar
     * @param {String} username 
     * @param {module:api/UsersApi~refreshGravatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshGravatar200Response}
     */
    refreshGravatar(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling refreshGravatar");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefreshGravatar200Response;
      return this.apiClient.callApi(
        '/user_avatar/{username}/refresh_gravatar.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPasswordResetEmail operation.
     * @callback module:api/UsersApi~sendPasswordResetEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendPasswordResetEmail200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send password reset email
     * @param {Object} opts Optional parameters
     * @param {module:model/SendPasswordResetEmailRequest} [sendPasswordResetEmailRequest] 
     * @param {module:api/UsersApi~sendPasswordResetEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendPasswordResetEmail200Response}
     */
    sendPasswordResetEmail(opts, callback) {
      opts = opts || {};
      let postBody = opts['sendPasswordResetEmailRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendPasswordResetEmail200Response;
      return this.apiClient.callApi(
        '/session/forgot_password.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the silenceUser operation.
     * @callback module:api/UsersApi~silenceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SilenceUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Silence a user
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SilenceUserRequest} [silenceUserRequest] 
     * @param {module:api/UsersApi~silenceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SilenceUser200Response}
     */
    silenceUser(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['silenceUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling silenceUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SilenceUser200Response;
      return this.apiClient.callApi(
        '/admin/users/{id}/silence.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suspendUser operation.
     * @callback module:api/UsersApi~suspendUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuspendUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend a user
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspendUserRequest} [suspendUserRequest] 
     * @param {module:api/UsersApi~suspendUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuspendUser200Response}
     */
    suspendUser(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['suspendUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suspendUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuspendUser200Response;
      return this.apiClient.callApi(
        '/admin/users/{id}/suspend.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAvatar operation.
     * @callback module:api/UsersApi~updateAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update avatar
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAvatarRequest} [updateAvatarRequest] 
     * @param {module:api/UsersApi~updateAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGroup200Response}
     */
    updateAvatar(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAvatarRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateAvatar");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteGroup200Response;
      return this.apiClient.callApi(
        '/u/{username}/preferences/avatar/pick.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmail operation.
     * @callback module:api/UsersApi~updateEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateEmailRequest} [updateEmailRequest] 
     * @param {module:api/UsersApi~updateEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEmail(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateEmailRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateEmail");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/u/{username}/preferences/email.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateUserRequest} [updateUserRequest] 
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUser200Response}
     */
    updateUser(apiKey, apiUsername, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateUserRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateUser");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling updateUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUser200Response;
      return this.apiClient.callApi(
        '/u/{username}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsername operation.
     * @callback module:api/UsersApi~updateUsernameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update username
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateUsernameRequest} [updateUsernameRequest] 
     * @param {module:api/UsersApi~updateUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUsername(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateUsernameRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateUsername");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/u/{username}/preferences/username.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
