/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTopicPostPM200Response from '../model/CreateTopicPostPM200Response';
import CreateTopicPostPMRequest from '../model/CreateTopicPostPMRequest';
import DeletePostRequest from '../model/DeletePostRequest';
import GetPost200Response from '../model/GetPost200Response';
import ListPosts200Response from '../model/ListPosts200Response';
import LockPost200Response from '../model/LockPost200Response';
import LockPostRequest from '../model/LockPostRequest';
import PerformPostAction200Response from '../model/PerformPostAction200Response';
import PerformPostActionRequest from '../model/PerformPostActionRequest';
import PostReplies200ResponseInner from '../model/PostReplies200ResponseInner';
import UpdatePost200Response from '../model/UpdatePost200Response';
import UpdatePostRequest from '../model/UpdatePostRequest';

/**
* Posts service.
* @module api/PostsApi
* @version latest
*/
export default class PostsApi {

    /**
    * Constructs a new PostsApi. 
    * @alias module:api/PostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTopicPostPM operation.
     * @callback module:api/PostsApi~createTopicPostPMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTopicPostPM200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new topic, a new post, or a private message
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTopicPostPMRequest} [createTopicPostPMRequest] 
     * @param {module:api/PostsApi~createTopicPostPMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTopicPostPM200Response}
     */
    createTopicPostPM(opts, callback) {
      opts = opts || {};
      let postBody = opts['createTopicPostPMRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTopicPostPM200Response;
      return this.apiClient.callApi(
        '/posts.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePost operation.
     * @callback module:api/PostsApi~deletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a single post
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeletePostRequest} [deletePostRequest] 
     * @param {module:api/PostsApi~deletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deletePostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/posts/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPost operation.
     * @callback module:api/PostsApi~getPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single post
     * This endpoint can be used to get the number of likes on a post using the `actions_summary` property in the response. `actions_summary` responses with the id of `2` signify a `like`. If there are no `actions_summary` items with the id of `2`, that means there are 0 likes. Other ids likely refer to various different flag types. 
     * @param {String} id 
     * @param {module:api/PostsApi~getPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPost200Response}
     */
    getPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPost200Response;
      return this.apiClient.callApi(
        '/posts/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPosts operation.
     * @callback module:api/PostsApi~listPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List latest posts across topics
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {Object} opts Optional parameters
     * @param {String} [before] Load posts with an id lower than this value. Useful for pagination.
     * @param {module:api/PostsApi~listPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPosts200Response}
     */
    listPosts(apiKey, apiUsername, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listPosts");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling listPosts");
      }

      let pathParams = {
      };
      let queryParams = {
        'before': opts['before']
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPosts200Response;
      return this.apiClient.callApi(
        '/posts.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockPost operation.
     * @callback module:api/PostsApi~lockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LockPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock a post from being edited
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockPostRequest} [lockPostRequest] 
     * @param {module:api/PostsApi~lockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LockPost200Response}
     */
    lockPost(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['lockPostRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling lockPost");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling lockPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lockPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LockPost200Response;
      return this.apiClient.callApi(
        '/posts/{id}/locked.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the performPostAction operation.
     * @callback module:api/PostsApi~performPostActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformPostAction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Like a post and other actions
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {Object} opts Optional parameters
     * @param {module:model/PerformPostActionRequest} [performPostActionRequest] 
     * @param {module:api/PostsApi~performPostActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformPostAction200Response}
     */
    performPostAction(apiKey, apiUsername, opts, callback) {
      opts = opts || {};
      let postBody = opts['performPostActionRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling performPostAction");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling performPostAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PerformPostAction200Response;
      return this.apiClient.callApi(
        '/post_actions.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReplies operation.
     * @callback module:api/PostsApi~postRepliesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostReplies200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List replies to a post
     * @param {String} id 
     * @param {module:api/PostsApi~postRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostReplies200ResponseInner>}
     */
    postReplies(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postReplies");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PostReplies200ResponseInner];
      return this.apiClient.callApi(
        '/posts/{id}/replies.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePost operation.
     * @callback module:api/PostsApi~updatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single post
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePostRequest} [updatePostRequest] 
     * @param {module:api/PostsApi~updatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePost200Response}
     */
    updatePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePost200Response;
      return this.apiClient.callApi(
        '/posts/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
