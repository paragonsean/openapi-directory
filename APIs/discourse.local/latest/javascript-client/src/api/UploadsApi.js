/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbortMultipartRequest from '../model/AbortMultipartRequest';
import BatchPresignMultipartParts200Response from '../model/BatchPresignMultipartParts200Response';
import BatchPresignMultipartPartsRequest from '../model/BatchPresignMultipartPartsRequest';
import CompleteExternalUploadRequest from '../model/CompleteExternalUploadRequest';
import CompleteMultipartRequest from '../model/CompleteMultipartRequest';
import CreateMultipartUpload200Response from '../model/CreateMultipartUpload200Response';
import CreateMultipartUploadRequest from '../model/CreateMultipartUploadRequest';
import CreateUpload200Response from '../model/CreateUpload200Response';
import DeleteGroup200Response from '../model/DeleteGroup200Response';
import GeneratePresignedPut200Response from '../model/GeneratePresignedPut200Response';
import GeneratePresignedPutRequest from '../model/GeneratePresignedPutRequest';

/**
* Uploads service.
* @module api/UploadsApi
* @version latest
*/
export default class UploadsApi {

    /**
    * Constructs a new UploadsApi. 
    * @alias module:api/UploadsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the abortMultipart operation.
     * @callback module:api/UploadsApi~abortMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Abort multipart upload
     * This endpoint aborts the multipart upload initiated with /create-multipart. This should be used when cancelling the upload. It does not matter if parts were already uploaded into the external storage provider.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and `enable_direct_s3_uploads` must be set to true for this endpoint to function.  
     * @param {Object} opts Optional parameters
     * @param {module:model/AbortMultipartRequest} [abortMultipartRequest] 
     * @param {module:api/UploadsApi~abortMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGroup200Response}
     */
    abortMultipart(opts, callback) {
      opts = opts || {};
      let postBody = opts['abortMultipartRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteGroup200Response;
      return this.apiClient.callApi(
        '/uploads/abort-multipart.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchPresignMultipartParts operation.
     * @callback module:api/UploadsApi~batchPresignMultipartPartsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPresignMultipartParts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates batches of presigned URLs for multipart parts
     * Multipart uploads are uploaded in chunks or parts to individual presigned URLs, similar to the one generated by /generate-presigned-put. The part numbers provided must be between 1 and 10000. The total number of parts will depend on the chunk size in bytes that you intend to use to upload each chunk. For example a 12MB file may have 2 5MB chunks and a final 2MB chunk, for part numbers 1, 2, and 3.  This endpoint will return a presigned URL for each part number provided, which you can then use to send PUT requests for the binary chunk corresponding to that part. When the part is uploaded, the provider should return an ETag for the part, and this should be stored along with the part number, because this is needed to complete the multipart upload.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and `enable_direct_s3_uploads` must be set to true for this endpoint to function.  
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPresignMultipartPartsRequest} [batchPresignMultipartPartsRequest] 
     * @param {module:api/UploadsApi~batchPresignMultipartPartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPresignMultipartParts200Response}
     */
    batchPresignMultipartParts(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPresignMultipartPartsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPresignMultipartParts200Response;
      return this.apiClient.callApi(
        '/uploads/batch-presign-multipart-parts.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeExternalUpload operation.
     * @callback module:api/UploadsApi~completeExternalUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes a direct external upload
     * Completes an external upload initialized with /get-presigned-put. The file will be moved from its temporary location in external storage to a final destination in the S3 bucket. An Upload record will also be created in the database in most cases.  If a sha1-checksum was provided in the initial request it will also be compared with the uploaded file in storage to make sure the same file was uploaded. The file size will be compared for the same reason.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and `enable_direct_s3_uploads` must be set to true for this endpoint to function.  
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteExternalUploadRequest} [completeExternalUploadRequest] 
     * @param {module:api/UploadsApi~completeExternalUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpload200Response}
     */
    completeExternalUpload(opts, callback) {
      opts = opts || {};
      let postBody = opts['completeExternalUploadRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUpload200Response;
      return this.apiClient.callApi(
        '/uploads/complete-external-upload.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeMultipart operation.
     * @callback module:api/UploadsApi~completeMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete multipart upload
     * Completes the multipart upload in the external store, and copies the file from its temporary location to its final location in the store. All of the parts must have been uploaded to the external storage provider. An Upload record will be completed in most cases once the file is copied to its final location.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and `enable_direct_s3_uploads` must be set to true for this endpoint to function.  
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteMultipartRequest} [completeMultipartRequest] 
     * @param {module:api/UploadsApi~completeMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpload200Response}
     */
    completeMultipart(opts, callback) {
      opts = opts || {};
      let postBody = opts['completeMultipartRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUpload200Response;
      return this.apiClient.callApi(
        '/uploads/complete-multipart.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMultipartUpload operation.
     * @callback module:api/UploadsApi~createMultipartUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMultipartUpload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a multipart external upload
     * Creates a multipart upload in the external storage provider, storing a temporary reference to the external upload similar to /get-presigned-put.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and `enable_direct_s3_uploads` must be set to true for this endpoint to function.  
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMultipartUploadRequest} [createMultipartUploadRequest] 
     * @param {module:api/UploadsApi~createMultipartUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMultipartUpload200Response}
     */
    createMultipartUpload(opts, callback) {
      opts = opts || {};
      let postBody = opts['createMultipartUploadRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMultipartUpload200Response;
      return this.apiClient.callApi(
        '/uploads/create-multipart.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpload operation.
     * @callback module:api/UploadsApi~createUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an upload
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {Object} [file] 
     * @param {Boolean} [synchronous] Use this flag to return an id and url
     * @param {Number} [userId] required if uploading an avatar
     * @param {module:api/UploadsApi~createUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpload200Response}
     */
    createUpload(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'synchronous': opts['synchronous'],
        'type': type,
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateUpload200Response;
      return this.apiClient.callApi(
        '/uploads.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePresignedPut operation.
     * @callback module:api/UploadsApi~generatePresignedPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneratePresignedPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates a direct external upload
     * Direct external uploads bypass the usual method of creating uploads via the POST /uploads route, and upload directly to an external provider, which by default is S3. This route begins the process, and will return a unique identifier for the external upload as well as a presigned URL which is where the file binary blob should be uploaded to.  Once the upload is complete to the external service, you must call the POST /complete-external-upload route using the unique identifier returned by this route, which will create any required Upload record in the Discourse database and also move file from its temporary location to the final destination in the external storage service.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and `enable_direct_s3_uploads` must be set to true for this endpoint to function.  
     * @param {Object} opts Optional parameters
     * @param {module:model/GeneratePresignedPutRequest} [generatePresignedPutRequest] 
     * @param {module:api/UploadsApi~generatePresignedPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneratePresignedPut200Response}
     */
    generatePresignedPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['generatePresignedPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeneratePresignedPut200Response;
      return this.apiClient.callApi(
        '/uploads/generate-presigned-put.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
