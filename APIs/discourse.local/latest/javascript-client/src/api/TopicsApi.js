/**
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTopicPostPM200Response from '../model/CreateTopicPostPM200Response';
import CreateTopicPostPMRequest from '../model/CreateTopicPostPMRequest';
import CreateTopicTimer200Response from '../model/CreateTopicTimer200Response';
import CreateTopicTimerRequest from '../model/CreateTopicTimerRequest';
import GetSpecificPostsFromTopic200Response from '../model/GetSpecificPostsFromTopic200Response';
import GetSpecificPostsFromTopicRequest from '../model/GetSpecificPostsFromTopicRequest';
import GetTopic200Response from '../model/GetTopic200Response';
import InviteToTopic200Response from '../model/InviteToTopic200Response';
import InviteToTopicRequest from '../model/InviteToTopicRequest';
import ListLatestTopics200Response from '../model/ListLatestTopics200Response';
import ListTopTopics200Response from '../model/ListTopTopics200Response';
import SetNotificationLevelRequest from '../model/SetNotificationLevelRequest';
import UpdateGroup200Response from '../model/UpdateGroup200Response';
import UpdateTopic200Response from '../model/UpdateTopic200Response';
import UpdateTopicRequest from '../model/UpdateTopicRequest';
import UpdateTopicStatus200Response from '../model/UpdateTopicStatus200Response';
import UpdateTopicStatusRequest from '../model/UpdateTopicStatusRequest';
import UpdateTopicTimestampRequest from '../model/UpdateTopicTimestampRequest';

/**
* Topics service.
* @module api/TopicsApi
* @version latest
*/
export default class TopicsApi {

    /**
    * Constructs a new TopicsApi. 
    * @alias module:api/TopicsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bookmarkTopic operation.
     * @callback module:api/TopicsApi~bookmarkTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {module:api/TopicsApi~bookmarkTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bookmarkTopic(apiKey, apiUsername, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling bookmarkTopic");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling bookmarkTopic");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bookmarkTopic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/t/{id}/bookmark.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTopicPostPM_0 operation.
     * @callback module:api/TopicsApi~createTopicPostPM_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTopicPostPM200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new topic, a new post, or a private message
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTopicPostPMRequest} [createTopicPostPMRequest] 
     * @param {module:api/TopicsApi~createTopicPostPM_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTopicPostPM200Response}
     */
    createTopicPostPM_0(opts, callback) {
      opts = opts || {};
      let postBody = opts['createTopicPostPMRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTopicPostPM200Response;
      return this.apiClient.callApi(
        '/posts.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTopicTimer operation.
     * @callback module:api/TopicsApi~createTopicTimerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTopicTimer200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create topic timer
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTopicTimerRequest} [createTopicTimerRequest] 
     * @param {module:api/TopicsApi~createTopicTimerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTopicTimer200Response}
     */
    createTopicTimer(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createTopicTimerRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createTopicTimer");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling createTopicTimer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createTopicTimer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTopicTimer200Response;
      return this.apiClient.callApi(
        '/t/{id}/timer.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecificPostsFromTopic operation.
     * @callback module:api/TopicsApi~getSpecificPostsFromTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSpecificPostsFromTopic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific posts from a topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetSpecificPostsFromTopicRequest} [getSpecificPostsFromTopicRequest] 
     * @param {module:api/TopicsApi~getSpecificPostsFromTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSpecificPostsFromTopic200Response}
     */
    getSpecificPostsFromTopic(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['getSpecificPostsFromTopicRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSpecificPostsFromTopic");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getSpecificPostsFromTopic");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpecificPostsFromTopic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSpecificPostsFromTopic200Response;
      return this.apiClient.callApi(
        '/t/{id}/posts.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopic operation.
     * @callback module:api/TopicsApi~getTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTopic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {module:api/TopicsApi~getTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTopic200Response}
     */
    getTopic(apiKey, apiUsername, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getTopic");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getTopic");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTopic200Response;
      return this.apiClient.callApi(
        '/t/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicByExternalId operation.
     * @callback module:api/TopicsApi~getTopicByExternalIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get topic by external_id
     * @param {String} externalId 
     * @param {module:api/TopicsApi~getTopicByExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTopicByExternalId(externalId, callback) {
      let postBody = null;
      // verify the required parameter 'externalId' is set
      if (externalId === undefined || externalId === null) {
        throw new Error("Missing the required parameter 'externalId' when calling getTopicByExternalId");
      }

      let pathParams = {
        'external_id': externalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/t/external_id/{external_id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteToTopic operation.
     * @callback module:api/TopicsApi~inviteToTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InviteToTopic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite to topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/InviteToTopicRequest} [inviteToTopicRequest] 
     * @param {module:api/TopicsApi~inviteToTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InviteToTopic200Response}
     */
    inviteToTopic(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inviteToTopicRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling inviteToTopic");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling inviteToTopic");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inviteToTopic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InviteToTopic200Response;
      return this.apiClient.callApi(
        '/t/{id}/invite.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLatestTopics operation.
     * @callback module:api/TopicsApi~listLatestTopicsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLatestTopics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest topics
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {Object} opts Optional parameters
     * @param {String} [order] Enum: `default`, `created`, `activity`, `views`, `posts`, `category`, `likes`, `op_likes`, `posters`
     * @param {String} [ascending] Defaults to `desc`, add `ascending=true` to sort asc
     * @param {module:api/TopicsApi~listLatestTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLatestTopics200Response}
     */
    listLatestTopics(apiKey, apiUsername, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listLatestTopics");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling listLatestTopics");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'ascending': opts['ascending']
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLatestTopics200Response;
      return this.apiClient.callApi(
        '/latest.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTopTopics operation.
     * @callback module:api/TopicsApi~listTopTopicsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTopTopics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the top topics filtered by period
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {Object} opts Optional parameters
     * @param {String} [period] Enum: `all`, `yearly`, `quarterly`, `monthly`, `weekly`, `daily`
     * @param {module:api/TopicsApi~listTopTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTopTopics200Response}
     */
    listTopTopics(apiKey, apiUsername, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listTopTopics");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling listTopTopics");
      }

      let pathParams = {
      };
      let queryParams = {
        'period': opts['period']
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTopTopics200Response;
      return this.apiClient.callApi(
        '/top.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTopic operation.
     * @callback module:api/TopicsApi~removeTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {module:api/TopicsApi~removeTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTopic(apiKey, apiUsername, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling removeTopic");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling removeTopic");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTopic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/t/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setNotificationLevel operation.
     * @callback module:api/TopicsApi~setNotificationLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set notification level
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SetNotificationLevelRequest} [setNotificationLevelRequest] 
     * @param {module:api/TopicsApi~setNotificationLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGroup200Response}
     */
    setNotificationLevel(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['setNotificationLevelRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling setNotificationLevel");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling setNotificationLevel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setNotificationLevel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGroup200Response;
      return this.apiClient.callApi(
        '/t/{id}/notifications.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopic operation.
     * @callback module:api/TopicsApi~updateTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTopic200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopicRequest} [updateTopicRequest] 
     * @param {module:api/TopicsApi~updateTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTopic200Response}
     */
    updateTopic(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTopicRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateTopic");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling updateTopic");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTopic200Response;
      return this.apiClient.callApi(
        '/t/-/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopicStatus operation.
     * @callback module:api/TopicsApi~updateTopicStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTopicStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the status of a topic
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopicStatusRequest} [updateTopicStatusRequest] 
     * @param {module:api/TopicsApi~updateTopicStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTopicStatus200Response}
     */
    updateTopicStatus(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTopicStatusRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateTopicStatus");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling updateTopicStatus");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopicStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTopicStatus200Response;
      return this.apiClient.callApi(
        '/t/{id}/status.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopicTimestamp operation.
     * @callback module:api/TopicsApi~updateTopicTimestampCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update topic timestamp
     * @param {String} apiKey 
     * @param {String} apiUsername 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopicTimestampRequest} [updateTopicTimestampRequest] 
     * @param {module:api/TopicsApi~updateTopicTimestampCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGroup200Response}
     */
    updateTopicTimestamp(apiKey, apiUsername, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTopicTimestampRequest'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateTopicTimestamp");
      }
      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling updateTopicTimestamp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopicTimestamp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Api-Key': apiKey,
        'Api-Username': apiUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGroup200Response;
      return this.apiClient.callApi(
        '/t/{id}/change-timestamp.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
