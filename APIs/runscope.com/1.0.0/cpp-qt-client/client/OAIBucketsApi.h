/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBucketsApi_H
#define OAI_OAIBucketsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBucket.h"
#include "OAIError.h"
#include "OAINewBucket.h"
#include "OAI_buckets_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBucketsApi : public QObject {
    Q_OBJECT

public:
    OAIBucketsApi(const int timeOut = 0);
    ~OAIBucketsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bucket_key QString [required]
    */
    virtual void bucketsBucketKeyDelete(const QString &bucket_key);

    /**
    * @param[in]  bucket_key QString [required]
    */
    virtual void bucketsBucketKeyGet(const QString &bucket_key);


    virtual void bucketsGet();

    /**
    * @param[in]  new_bucket OAINewBucket [required]
    */
    virtual void bucketsPost(const OAINewBucket &new_bucket);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bucketsBucketKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyGetCallback(OAIHttpRequestWorker *worker);
    void bucketsGetCallback(OAIHttpRequestWorker *worker);
    void bucketsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bucketsBucketKeyDeleteSignal();
    void bucketsBucketKeyGetSignal(OAIBucket summary);
    void bucketsGetSignal(OAI_buckets_get_200_response summary);
    void bucketsPostSignal(OAIBucket summary);


    void bucketsBucketKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIBucket summary);
    void bucketsGetSignalFull(OAIHttpRequestWorker *worker, OAI_buckets_get_200_response summary);
    void bucketsPostSignalFull(OAIHttpRequestWorker *worker, OAIBucket summary);

    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyDeleteSignalError() instead")
    void bucketsBucketKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyGetSignalError() instead")
    void bucketsBucketKeyGetSignalE(OAIBucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyGetSignalError(OAIBucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsGetSignalError() instead")
    void bucketsGetSignalE(OAI_buckets_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsGetSignalError(OAI_buckets_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsPostSignalError() instead")
    void bucketsPostSignalE(OAIBucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsPostSignalError(OAIBucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyDeleteSignalErrorFull() instead")
    void bucketsBucketKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyGetSignalErrorFull() instead")
    void bucketsBucketKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsGetSignalErrorFull() instead")
    void bucketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsPostSignalErrorFull() instead")
    void bucketsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
