/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestsApi_H
#define OAI_OAITestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMetrics.h"
#include "OAITest.h"
#include "OAITestDetail.h"
#include "OAI_buckets__bucketKey__tests_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestsApi : public QObject {
    Q_OBJECT

public:
    OAITestsApi(const int timeOut = 0);
    ~OAITestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bucket_key QString [required]
    */
    virtual void bucketsBucketKeyTestsGet(const QString &bucket_key);

    /**
    * @param[in]  bucket_key QString [required]
    * @param[in]  new_test OAITest [required]
    */
    virtual void bucketsBucketKeyTestsPost(const QString &bucket_key, const OAITest &new_test);

    /**
    * @param[in]  bucket_key QString [required]
    * @param[in]  test_id QString [required]
    */
    virtual void bucketsBucketKeyTestsTestIdDelete(const QString &bucket_key, const QString &test_id);

    /**
    * @param[in]  bucket_key QString [required]
    * @param[in]  test_id QString [required]
    */
    virtual void bucketsBucketKeyTestsTestIdGet(const QString &bucket_key, const QString &test_id);

    /**
    * @param[in]  bucket_key QString [required]
    * @param[in]  test_id QString [required]
    */
    virtual void bucketsBucketKeyTestsTestIdMetricsGet(const QString &bucket_key, const QString &test_id);

    /**
    * @param[in]  bucket_key QString [required]
    * @param[in]  test_id QString [required]
    */
    virtual void bucketsBucketKeyTestsTestIdPut(const QString &bucket_key, const QString &test_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bucketsBucketKeyTestsGetCallback(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyTestsPostCallback(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyTestsTestIdDeleteCallback(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyTestsTestIdGetCallback(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyTestsTestIdMetricsGetCallback(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyTestsTestIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bucketsBucketKeyTestsGetSignal(OAI_buckets__bucketKey__tests_get_200_response summary);
    void bucketsBucketKeyTestsPostSignal(OAI_buckets__bucketKey__tests_get_200_response summary);
    void bucketsBucketKeyTestsTestIdDeleteSignal();
    void bucketsBucketKeyTestsTestIdGetSignal(OAITestDetail summary);
    void bucketsBucketKeyTestsTestIdMetricsGetSignal(OAIMetrics summary);
    void bucketsBucketKeyTestsTestIdPutSignal(OAITestDetail summary);


    void bucketsBucketKeyTestsGetSignalFull(OAIHttpRequestWorker *worker, OAI_buckets__bucketKey__tests_get_200_response summary);
    void bucketsBucketKeyTestsPostSignalFull(OAIHttpRequestWorker *worker, OAI_buckets__bucketKey__tests_get_200_response summary);
    void bucketsBucketKeyTestsTestIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void bucketsBucketKeyTestsTestIdGetSignalFull(OAIHttpRequestWorker *worker, OAITestDetail summary);
    void bucketsBucketKeyTestsTestIdMetricsGetSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void bucketsBucketKeyTestsTestIdPutSignalFull(OAIHttpRequestWorker *worker, OAITestDetail summary);

    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsGetSignalError() instead")
    void bucketsBucketKeyTestsGetSignalE(OAI_buckets__bucketKey__tests_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsGetSignalError(OAI_buckets__bucketKey__tests_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsPostSignalError() instead")
    void bucketsBucketKeyTestsPostSignalE(OAI_buckets__bucketKey__tests_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsPostSignalError(OAI_buckets__bucketKey__tests_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdDeleteSignalError() instead")
    void bucketsBucketKeyTestsTestIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdGetSignalError() instead")
    void bucketsBucketKeyTestsTestIdGetSignalE(OAITestDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdGetSignalError(OAITestDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdMetricsGetSignalError() instead")
    void bucketsBucketKeyTestsTestIdMetricsGetSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdMetricsGetSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdPutSignalError() instead")
    void bucketsBucketKeyTestsTestIdPutSignalE(OAITestDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdPutSignalError(OAITestDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsGetSignalErrorFull() instead")
    void bucketsBucketKeyTestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsPostSignalErrorFull() instead")
    void bucketsBucketKeyTestsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdDeleteSignalErrorFull() instead")
    void bucketsBucketKeyTestsTestIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdGetSignalErrorFull() instead")
    void bucketsBucketKeyTestsTestIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdMetricsGetSignalErrorFull() instead")
    void bucketsBucketKeyTestsTestIdMetricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdMetricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bucketsBucketKeyTestsTestIdPutSignalErrorFull() instead")
    void bucketsBucketKeyTestsTestIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bucketsBucketKeyTestsTestIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
