/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewMessage_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewMessage_response::OAINewMessage_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewMessage_response::OAINewMessage_response() {
    this->initializeModel();
}

OAINewMessage_response::~OAINewMessage_response() {}

void OAINewMessage_response::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_encoding_isSet = false;
    m_body_encoding_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAINewMessage_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewMessage_response::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_encoding_isValid = ::OpenAPI::fromJsonValue(m_body_encoding, json[QString("body_encoding")]);
    m_body_encoding_isSet = !json[QString("body_encoding")].isNull() && m_body_encoding_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("response_time")]);
    m_response_time_isSet = !json[QString("response_time")].isNull() && m_response_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAINewMessage_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewMessage_response::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_encoding_isSet) {
        obj.insert(QString("body_encoding"), ::OpenAPI::toJsonValue(m_body_encoding));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("response_time"), ::OpenAPI::toJsonValue(m_response_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAINewMessage_response::getBody() const {
    return m_body;
}
void OAINewMessage_response::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINewMessage_response::is_body_Set() const{
    return m_body_isSet;
}

bool OAINewMessage_response::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINewMessage_response::getBodyEncoding() const {
    return m_body_encoding;
}
void OAINewMessage_response::setBodyEncoding(const QString &body_encoding) {
    m_body_encoding = body_encoding;
    m_body_encoding_isSet = true;
}

bool OAINewMessage_response::is_body_encoding_Set() const{
    return m_body_encoding_isSet;
}

bool OAINewMessage_response::is_body_encoding_Valid() const{
    return m_body_encoding_isValid;
}

QString OAINewMessage_response::getHeaders() const {
    return m_headers;
}
void OAINewMessage_response::setHeaders(const QString &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAINewMessage_response::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAINewMessage_response::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAINewMessage_response::getReason() const {
    return m_reason;
}
void OAINewMessage_response::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAINewMessage_response::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAINewMessage_response::is_reason_Valid() const{
    return m_reason_isValid;
}

float OAINewMessage_response::getResponseTime() const {
    return m_response_time;
}
void OAINewMessage_response::setResponseTime(const float &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAINewMessage_response::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAINewMessage_response::is_response_time_Valid() const{
    return m_response_time_isValid;
}

qint32 OAINewMessage_response::getStatus() const {
    return m_status;
}
void OAINewMessage_response::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINewMessage_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAINewMessage_response::is_status_Valid() const{
    return m_status_isValid;
}

float OAINewMessage_response::getTimestamp() const {
    return m_timestamp;
}
void OAINewMessage_response::setTimestamp(const float &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAINewMessage_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAINewMessage_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAINewMessage_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewMessage_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
