/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAgent.h"
#include "OAIError.h"
#include "OAI_account_get_200_response.h"
#include "OAI_teams__teamId__integrations_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void accountGet();

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdAgentsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdIntegrationsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdPeopleGet(const QString &team_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdAgentsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdIntegrationsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdPeopleGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountGetSignal(OAI_account_get_200_response summary);
    void teamsTeamIdAgentsGetSignal(QList<OAIAgent> summary);
    void teamsTeamIdIntegrationsGetSignal(OAI_teams__teamId__integrations_get_200_response summary);
    void teamsTeamIdPeopleGetSignal(QList<OAIAccount> summary);


    void accountGetSignalFull(OAIHttpRequestWorker *worker, OAI_account_get_200_response summary);
    void teamsTeamIdAgentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAgent> summary);
    void teamsTeamIdIntegrationsGetSignalFull(OAIHttpRequestWorker *worker, OAI_teams__teamId__integrations_get_200_response summary);
    void teamsTeamIdPeopleGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);

    Q_DECL_DEPRECATED_X("Use accountGetSignalError() instead")
    void accountGetSignalE(OAI_account_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalError(OAI_account_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAgentsGetSignalError() instead")
    void teamsTeamIdAgentsGetSignalE(QList<OAIAgent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAgentsGetSignalError(QList<OAIAgent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdIntegrationsGetSignalError() instead")
    void teamsTeamIdIntegrationsGetSignalE(OAI_teams__teamId__integrations_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdIntegrationsGetSignalError(OAI_teams__teamId__integrations_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdPeopleGetSignalError() instead")
    void teamsTeamIdPeopleGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdPeopleGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountGetSignalErrorFull() instead")
    void accountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAgentsGetSignalErrorFull() instead")
    void teamsTeamIdAgentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAgentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdIntegrationsGetSignalErrorFull() instead")
    void teamsTeamIdIntegrationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdIntegrationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdPeopleGetSignalErrorFull() instead")
    void teamsTeamIdPeopleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdPeopleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
