/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_buckets__bucketKey__messages_post_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_buckets__bucketKey__messages_post_200_response_data_inner::OAI_buckets__bucketKey__messages_post_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_buckets__bucketKey__messages_post_200_response_data_inner::OAI_buckets__bucketKey__messages_post_200_response_data_inner() {
    this->initializeModel();
}

OAI_buckets__bucketKey__messages_post_200_response_data_inner::~OAI_buckets__bucketKey__messages_post_200_response_data_inner() {}

void OAI_buckets__bucketKey__messages_post_200_response_data_inner::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;
}

void OAI_buckets__bucketKey__messages_post_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_buckets__bucketKey__messages_post_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("unique_identifier")]);
    m_unique_identifier_isSet = !json[QString("unique_identifier")].isNull() && m_unique_identifier_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("warning")]);
    m_warning_isSet = !json[QString("warning")].isNull() && m_warning_isValid;
}

QString OAI_buckets__bucketKey__messages_post_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_buckets__bucketKey__messages_post_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("unique_identifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_warning.isSet()) {
        obj.insert(QString("warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    return obj;
}

OAI_buckets__bucketKey__messages_post_200_response_data_inner_error OAI_buckets__bucketKey__messages_post_200_response_data_inner::getError() const {
    return m_error;
}
void OAI_buckets__bucketKey__messages_post_200_response_data_inner::setError(const OAI_buckets__bucketKey__messages_post_200_response_data_inner_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_error_Set() const{
    return m_error_isSet;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_error_Valid() const{
    return m_error_isValid;
}

QString OAI_buckets__bucketKey__messages_post_200_response_data_inner::getStatus() const {
    return m_status;
}
void OAI_buckets__bucketKey__messages_post_200_response_data_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI_buckets__bucketKey__messages_post_200_response_data_inner::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAI_buckets__bucketKey__messages_post_200_response_data_inner::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

QString OAI_buckets__bucketKey__messages_post_200_response_data_inner::getUuid() const {
    return m_uuid;
}
void OAI_buckets__bucketKey__messages_post_200_response_data_inner::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_uuid_Valid() const{
    return m_uuid_isValid;
}

OAI_buckets__bucketKey__messages_post_200_response_data_inner_warning OAI_buckets__bucketKey__messages_post_200_response_data_inner::getWarning() const {
    return m_warning;
}
void OAI_buckets__bucketKey__messages_post_200_response_data_inner::setWarning(const OAI_buckets__bucketKey__messages_post_200_response_data_inner_warning &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::is_warning_Valid() const{
    return m_warning_isValid;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_buckets__bucketKey__messages_post_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
