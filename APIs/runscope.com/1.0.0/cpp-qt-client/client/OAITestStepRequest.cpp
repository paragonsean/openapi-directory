/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestStepRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestStepRequest::OAITestStepRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestStepRequest::OAITestStepRequest() {
    this->initializeModel();
}

OAITestStepRequest::~OAITestStepRequest() {}

void OAITestStepRequest::initializeModel() {

    m_step_type_isSet = false;
    m_step_type_isValid = false;

    m_assertions_isSet = false;
    m_assertions_isValid = false;

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_before_scripts_isSet = false;
    m_before_scripts_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_scripts_isSet = false;
    m_scripts_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAITestStepRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestStepRequest::fromJsonObject(QJsonObject json) {

    m_step_type_isValid = ::OpenAPI::fromJsonValue(m_step_type, json[QString("step_type")]);
    m_step_type_isSet = !json[QString("step_type")].isNull() && m_step_type_isValid;

    m_assertions_isValid = ::OpenAPI::fromJsonValue(m_assertions, json[QString("assertions")]);
    m_assertions_isSet = !json[QString("assertions")].isNull() && m_assertions_isValid;

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_before_scripts_isValid = ::OpenAPI::fromJsonValue(m_before_scripts, json[QString("before_scripts")]);
    m_before_scripts_isSet = !json[QString("before_scripts")].isNull() && m_before_scripts_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_scripts_isValid = ::OpenAPI::fromJsonValue(m_scripts, json[QString("scripts")]);
    m_scripts_isSet = !json[QString("scripts")].isNull() && m_scripts_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAITestStepRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestStepRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_step_type_isSet) {
        obj.insert(QString("step_type"), ::OpenAPI::toJsonValue(m_step_type));
    }
    if (m_assertions.size() > 0) {
        obj.insert(QString("assertions"), ::OpenAPI::toJsonValue(m_assertions));
    }
    if (m_auth_isSet) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_before_scripts.size() > 0) {
        obj.insert(QString("before_scripts"), ::OpenAPI::toJsonValue(m_before_scripts));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_form_isSet) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_scripts.size() > 0) {
        obj.insert(QString("scripts"), ::OpenAPI::toJsonValue(m_scripts));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_variables.size() > 0) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

QString OAITestStepRequest::getStepType() const {
    return m_step_type;
}
void OAITestStepRequest::setStepType(const QString &step_type) {
    m_step_type = step_type;
    m_step_type_isSet = true;
}

bool OAITestStepRequest::is_step_type_Set() const{
    return m_step_type_isSet;
}

bool OAITestStepRequest::is_step_type_Valid() const{
    return m_step_type_isValid;
}

QList<OAIAssertion> OAITestStepRequest::getAssertions() const {
    return m_assertions;
}
void OAITestStepRequest::setAssertions(const QList<OAIAssertion> &assertions) {
    m_assertions = assertions;
    m_assertions_isSet = true;
}

bool OAITestStepRequest::is_assertions_Set() const{
    return m_assertions_isSet;
}

bool OAITestStepRequest::is_assertions_Valid() const{
    return m_assertions_isValid;
}

OAIObject OAITestStepRequest::getAuth() const {
    return m_auth;
}
void OAITestStepRequest::setAuth(const OAIObject &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAITestStepRequest::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAITestStepRequest::is_auth_Valid() const{
    return m_auth_isValid;
}

QList<QString> OAITestStepRequest::getBeforeScripts() const {
    return m_before_scripts;
}
void OAITestStepRequest::setBeforeScripts(const QList<QString> &before_scripts) {
    m_before_scripts = before_scripts;
    m_before_scripts_isSet = true;
}

bool OAITestStepRequest::is_before_scripts_Set() const{
    return m_before_scripts_isSet;
}

bool OAITestStepRequest::is_before_scripts_Valid() const{
    return m_before_scripts_isValid;
}

QString OAITestStepRequest::getBody() const {
    return m_body;
}
void OAITestStepRequest::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITestStepRequest::is_body_Set() const{
    return m_body_isSet;
}

bool OAITestStepRequest::is_body_Valid() const{
    return m_body_isValid;
}

OAIObject OAITestStepRequest::getForm() const {
    return m_form;
}
void OAITestStepRequest::setForm(const OAIObject &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAITestStepRequest::is_form_Set() const{
    return m_form_isSet;
}

bool OAITestStepRequest::is_form_Valid() const{
    return m_form_isValid;
}

OAIObject OAITestStepRequest::getHeaders() const {
    return m_headers;
}
void OAITestStepRequest::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAITestStepRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAITestStepRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAITestStepRequest::getMethod() const {
    return m_method;
}
void OAITestStepRequest::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAITestStepRequest::is_method_Set() const{
    return m_method_isSet;
}

bool OAITestStepRequest::is_method_Valid() const{
    return m_method_isValid;
}

QString OAITestStepRequest::getNote() const {
    return m_note;
}
void OAITestStepRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAITestStepRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAITestStepRequest::is_note_Valid() const{
    return m_note_isValid;
}

QList<QString> OAITestStepRequest::getScripts() const {
    return m_scripts;
}
void OAITestStepRequest::setScripts(const QList<QString> &scripts) {
    m_scripts = scripts;
    m_scripts_isSet = true;
}

bool OAITestStepRequest::is_scripts_Set() const{
    return m_scripts_isSet;
}

bool OAITestStepRequest::is_scripts_Valid() const{
    return m_scripts_isValid;
}

QString OAITestStepRequest::getUrl() const {
    return m_url;
}
void OAITestStepRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITestStepRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAITestStepRequest::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIVariable> OAITestStepRequest::getVariables() const {
    return m_variables;
}
void OAITestStepRequest::setVariables(const QList<OAIVariable> &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAITestStepRequest::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAITestStepRequest::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAITestStepRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_step_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assertions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestStepRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
