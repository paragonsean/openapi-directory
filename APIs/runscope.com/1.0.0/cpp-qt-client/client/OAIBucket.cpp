/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket::OAIBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket::OAIBucket() {
    this->initializeModel();
}

OAIBucket::~OAIBucket() {}

void OAIBucket::initializeModel() {

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;

    m_collections_url_isSet = false;
    m_collections_url_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_messages_url_isSet = false;
    m_messages_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_tests_url_isSet = false;
    m_tests_url_isValid = false;

    m_trigger_url_isSet = false;
    m_trigger_url_isValid = false;

    m_verify_ssl_isSet = false;
    m_verify_ssl_isValid = false;
}

void OAIBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket::fromJsonObject(QJsonObject json) {

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("auth_token")]);
    m_auth_token_isSet = !json[QString("auth_token")].isNull() && m_auth_token_isValid;

    m_collections_url_isValid = ::OpenAPI::fromJsonValue(m_collections_url, json[QString("collections_url")]);
    m_collections_url_isSet = !json[QString("collections_url")].isNull() && m_collections_url_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_messages_url_isValid = ::OpenAPI::fromJsonValue(m_messages_url, json[QString("messages_url")]);
    m_messages_url_isSet = !json[QString("messages_url")].isNull() && m_messages_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_tests_url_isValid = ::OpenAPI::fromJsonValue(m_tests_url, json[QString("tests_url")]);
    m_tests_url_isSet = !json[QString("tests_url")].isNull() && m_tests_url_isValid;

    m_trigger_url_isValid = ::OpenAPI::fromJsonValue(m_trigger_url, json[QString("trigger_url")]);
    m_trigger_url_isSet = !json[QString("trigger_url")].isNull() && m_trigger_url_isValid;

    m_verify_ssl_isValid = ::OpenAPI::fromJsonValue(m_verify_ssl, json[QString("verify_ssl")]);
    m_verify_ssl_isSet = !json[QString("verify_ssl")].isNull() && m_verify_ssl_isValid;
}

QString OAIBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_token_isSet) {
        obj.insert(QString("auth_token"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    if (m_collections_url_isSet) {
        obj.insert(QString("collections_url"), ::OpenAPI::toJsonValue(m_collections_url));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_messages_url_isSet) {
        obj.insert(QString("messages_url"), ::OpenAPI::toJsonValue(m_messages_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_tests_url_isSet) {
        obj.insert(QString("tests_url"), ::OpenAPI::toJsonValue(m_tests_url));
    }
    if (m_trigger_url_isSet) {
        obj.insert(QString("trigger_url"), ::OpenAPI::toJsonValue(m_trigger_url));
    }
    if (m_verify_ssl_isSet) {
        obj.insert(QString("verify_ssl"), ::OpenAPI::toJsonValue(m_verify_ssl));
    }
    return obj;
}

QString OAIBucket::getAuthToken() const {
    return m_auth_token;
}
void OAIBucket::setAuthToken(const QString &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAIBucket::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAIBucket::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

QString OAIBucket::getCollectionsUrl() const {
    return m_collections_url;
}
void OAIBucket::setCollectionsUrl(const QString &collections_url) {
    m_collections_url = collections_url;
    m_collections_url_isSet = true;
}

bool OAIBucket::is_collections_url_Set() const{
    return m_collections_url_isSet;
}

bool OAIBucket::is_collections_url_Valid() const{
    return m_collections_url_isValid;
}

bool OAIBucket::isRDefault() const {
    return m_r_default;
}
void OAIBucket::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIBucket::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIBucket::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIBucket::getKey() const {
    return m_key;
}
void OAIBucket::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIBucket::is_key_Set() const{
    return m_key_isSet;
}

bool OAIBucket::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIBucket::getMessagesUrl() const {
    return m_messages_url;
}
void OAIBucket::setMessagesUrl(const QString &messages_url) {
    m_messages_url = messages_url;
    m_messages_url_isSet = true;
}

bool OAIBucket::is_messages_url_Set() const{
    return m_messages_url_isSet;
}

bool OAIBucket::is_messages_url_Valid() const{
    return m_messages_url_isValid;
}

QString OAIBucket::getName() const {
    return m_name;
}
void OAIBucket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBucket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBucket::is_name_Valid() const{
    return m_name_isValid;
}

OAITeam OAIBucket::getTeam() const {
    return m_team;
}
void OAIBucket::setTeam(const OAITeam &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBucket::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBucket::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIBucket::getTestsUrl() const {
    return m_tests_url;
}
void OAIBucket::setTestsUrl(const QString &tests_url) {
    m_tests_url = tests_url;
    m_tests_url_isSet = true;
}

bool OAIBucket::is_tests_url_Set() const{
    return m_tests_url_isSet;
}

bool OAIBucket::is_tests_url_Valid() const{
    return m_tests_url_isValid;
}

QString OAIBucket::getTriggerUrl() const {
    return m_trigger_url;
}
void OAIBucket::setTriggerUrl(const QString &trigger_url) {
    m_trigger_url = trigger_url;
    m_trigger_url_isSet = true;
}

bool OAIBucket::is_trigger_url_Set() const{
    return m_trigger_url_isSet;
}

bool OAIBucket::is_trigger_url_Valid() const{
    return m_trigger_url_isValid;
}

bool OAIBucket::isVerifySsl() const {
    return m_verify_ssl;
}
void OAIBucket::setVerifySsl(const bool &verify_ssl) {
    m_verify_ssl = verify_ssl;
    m_verify_ssl_isSet = true;
}

bool OAIBucket::is_verify_ssl_Set() const{
    return m_verify_ssl_isSet;
}

bool OAIBucket::is_verify_ssl_Valid() const{
    return m_verify_ssl_isValid;
}

bool OAIBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
