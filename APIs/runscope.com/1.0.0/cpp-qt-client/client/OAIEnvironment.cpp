/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_client_certificate_isSet = false;
    m_client_certificate_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_exported_at_isSet = false;
    m_exported_at_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initial_script_hash_isSet = false;
    m_initial_script_hash_isValid = false;

    m_initial_variables_isSet = false;
    m_initial_variables_isValid = false;

    m_integrations_isSet = false;
    m_integrations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_environment_id_isSet = false;
    m_parent_environment_id_isValid = false;

    m_preserve_cookies_isSet = false;
    m_preserve_cookies_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_remote_agents_isSet = false;
    m_remote_agents_isValid = false;

    m_retry_on_failure_isSet = false;
    m_retry_on_failure_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_script_library_isSet = false;
    m_script_library_isValid = false;

    m_stop_on_failure_isSet = false;
    m_stop_on_failure_isValid = false;

    m_test_id_isSet = false;
    m_test_id_isValid = false;

    m_verify_ssl_isSet = false;
    m_verify_ssl_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_webhooks_isSet = false;
    m_webhooks_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_client_certificate, json[QString("client_certificate")]);
    m_client_certificate_isSet = !json[QString("client_certificate")].isNull() && m_client_certificate_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_exported_at_isValid = ::OpenAPI::fromJsonValue(m_exported_at, json[QString("exported_at")]);
    m_exported_at_isSet = !json[QString("exported_at")].isNull() && m_exported_at_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initial_script_hash_isValid = ::OpenAPI::fromJsonValue(m_initial_script_hash, json[QString("initial_script_hash")]);
    m_initial_script_hash_isSet = !json[QString("initial_script_hash")].isNull() && m_initial_script_hash_isValid;

    m_initial_variables_isValid = ::OpenAPI::fromJsonValue(m_initial_variables, json[QString("initial_variables")]);
    m_initial_variables_isSet = !json[QString("initial_variables")].isNull() && m_initial_variables_isValid;

    m_integrations_isValid = ::OpenAPI::fromJsonValue(m_integrations, json[QString("integrations")]);
    m_integrations_isSet = !json[QString("integrations")].isNull() && m_integrations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_environment_id_isValid = ::OpenAPI::fromJsonValue(m_parent_environment_id, json[QString("parent_environment_id")]);
    m_parent_environment_id_isSet = !json[QString("parent_environment_id")].isNull() && m_parent_environment_id_isValid;

    m_preserve_cookies_isValid = ::OpenAPI::fromJsonValue(m_preserve_cookies, json[QString("preserve_cookies")]);
    m_preserve_cookies_isSet = !json[QString("preserve_cookies")].isNull() && m_preserve_cookies_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_remote_agents_isValid = ::OpenAPI::fromJsonValue(m_remote_agents, json[QString("remote_agents")]);
    m_remote_agents_isSet = !json[QString("remote_agents")].isNull() && m_remote_agents_isValid;

    m_retry_on_failure_isValid = ::OpenAPI::fromJsonValue(m_retry_on_failure, json[QString("retry_on_failure")]);
    m_retry_on_failure_isSet = !json[QString("retry_on_failure")].isNull() && m_retry_on_failure_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_script_library_isValid = ::OpenAPI::fromJsonValue(m_script_library, json[QString("script_library")]);
    m_script_library_isSet = !json[QString("script_library")].isNull() && m_script_library_isValid;

    m_stop_on_failure_isValid = ::OpenAPI::fromJsonValue(m_stop_on_failure, json[QString("stop_on_failure")]);
    m_stop_on_failure_isSet = !json[QString("stop_on_failure")].isNull() && m_stop_on_failure_isValid;

    m_test_id_isValid = ::OpenAPI::fromJsonValue(m_test_id, json[QString("test_id")]);
    m_test_id_isSet = !json[QString("test_id")].isNull() && m_test_id_isValid;

    m_verify_ssl_isValid = ::OpenAPI::fromJsonValue(m_verify_ssl, json[QString("verify_ssl")]);
    m_verify_ssl_isSet = !json[QString("verify_ssl")].isNull() && m_verify_ssl_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_webhooks_isValid = ::OpenAPI::fromJsonValue(m_webhooks, json[QString("webhooks")]);
    m_webhooks_isSet = !json[QString("webhooks")].isNull() && m_webhooks_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_isSet) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_client_certificate_isSet) {
        obj.insert(QString("client_certificate"), ::OpenAPI::toJsonValue(m_client_certificate));
    }
    if (m_emails_isSet) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_exported_at_isSet) {
        obj.insert(QString("exported_at"), ::OpenAPI::toJsonValue(m_exported_at));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initial_script_hash_isSet) {
        obj.insert(QString("initial_script_hash"), ::OpenAPI::toJsonValue(m_initial_script_hash));
    }
    if (m_initial_variables_isSet) {
        obj.insert(QString("initial_variables"), ::OpenAPI::toJsonValue(m_initial_variables));
    }
    if (m_integrations.size() > 0) {
        obj.insert(QString("integrations"), ::OpenAPI::toJsonValue(m_integrations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_environment_id_isSet) {
        obj.insert(QString("parent_environment_id"), ::OpenAPI::toJsonValue(m_parent_environment_id));
    }
    if (m_preserve_cookies_isSet) {
        obj.insert(QString("preserve_cookies"), ::OpenAPI::toJsonValue(m_preserve_cookies));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_remote_agents.size() > 0) {
        obj.insert(QString("remote_agents"), ::OpenAPI::toJsonValue(m_remote_agents));
    }
    if (m_retry_on_failure_isSet) {
        obj.insert(QString("retry_on_failure"), ::OpenAPI::toJsonValue(m_retry_on_failure));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_script_library.size() > 0) {
        obj.insert(QString("script_library"), ::OpenAPI::toJsonValue(m_script_library));
    }
    if (m_stop_on_failure_isSet) {
        obj.insert(QString("stop_on_failure"), ::OpenAPI::toJsonValue(m_stop_on_failure));
    }
    if (m_test_id_isSet) {
        obj.insert(QString("test_id"), ::OpenAPI::toJsonValue(m_test_id));
    }
    if (m_verify_ssl_isSet) {
        obj.insert(QString("verify_ssl"), ::OpenAPI::toJsonValue(m_verify_ssl));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_webhooks_isSet) {
        obj.insert(QString("webhooks"), ::OpenAPI::toJsonValue(m_webhooks));
    }
    return obj;
}

QString OAIEnvironment::getAuth() const {
    return m_auth;
}
void OAIEnvironment::setAuth(const QString &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIEnvironment::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIEnvironment::is_auth_Valid() const{
    return m_auth_isValid;
}

QString OAIEnvironment::getClientCertificate() const {
    return m_client_certificate;
}
void OAIEnvironment::setClientCertificate(const QString &client_certificate) {
    m_client_certificate = client_certificate;
    m_client_certificate_isSet = true;
}

bool OAIEnvironment::is_client_certificate_Set() const{
    return m_client_certificate_isSet;
}

bool OAIEnvironment::is_client_certificate_Valid() const{
    return m_client_certificate_isValid;
}

OAIObject OAIEnvironment::getEmails() const {
    return m_emails;
}
void OAIEnvironment::setEmails(const OAIObject &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIEnvironment::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIEnvironment::is_emails_Valid() const{
    return m_emails_isValid;
}

qint32 OAIEnvironment::getExportedAt() const {
    return m_exported_at;
}
void OAIEnvironment::setExportedAt(const qint32 &exported_at) {
    m_exported_at = exported_at;
    m_exported_at_isSet = true;
}

bool OAIEnvironment::is_exported_at_Set() const{
    return m_exported_at_isSet;
}

bool OAIEnvironment::is_exported_at_Valid() const{
    return m_exported_at_isValid;
}

OAIObject OAIEnvironment::getHeaders() const {
    return m_headers;
}
void OAIEnvironment::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIEnvironment::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIEnvironment::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIEnvironment::getId() const {
    return m_id;
}
void OAIEnvironment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnvironment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnvironment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnvironment::getInitialScriptHash() const {
    return m_initial_script_hash;
}
void OAIEnvironment::setInitialScriptHash(const QString &initial_script_hash) {
    m_initial_script_hash = initial_script_hash;
    m_initial_script_hash_isSet = true;
}

bool OAIEnvironment::is_initial_script_hash_Set() const{
    return m_initial_script_hash_isSet;
}

bool OAIEnvironment::is_initial_script_hash_Valid() const{
    return m_initial_script_hash_isValid;
}

OAIObject OAIEnvironment::getInitialVariables() const {
    return m_initial_variables;
}
void OAIEnvironment::setInitialVariables(const OAIObject &initial_variables) {
    m_initial_variables = initial_variables;
    m_initial_variables_isSet = true;
}

bool OAIEnvironment::is_initial_variables_Set() const{
    return m_initial_variables_isSet;
}

bool OAIEnvironment::is_initial_variables_Valid() const{
    return m_initial_variables_isValid;
}

QList<OAIIntegration> OAIEnvironment::getIntegrations() const {
    return m_integrations;
}
void OAIEnvironment::setIntegrations(const QList<OAIIntegration> &integrations) {
    m_integrations = integrations;
    m_integrations_isSet = true;
}

bool OAIEnvironment::is_integrations_Set() const{
    return m_integrations_isSet;
}

bool OAIEnvironment::is_integrations_Valid() const{
    return m_integrations_isValid;
}

QString OAIEnvironment::getName() const {
    return m_name;
}
void OAIEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnvironment::getParentEnvironmentId() const {
    return m_parent_environment_id;
}
void OAIEnvironment::setParentEnvironmentId(const QString &parent_environment_id) {
    m_parent_environment_id = parent_environment_id;
    m_parent_environment_id_isSet = true;
}

bool OAIEnvironment::is_parent_environment_id_Set() const{
    return m_parent_environment_id_isSet;
}

bool OAIEnvironment::is_parent_environment_id_Valid() const{
    return m_parent_environment_id_isValid;
}

bool OAIEnvironment::isPreserveCookies() const {
    return m_preserve_cookies;
}
void OAIEnvironment::setPreserveCookies(const bool &preserve_cookies) {
    m_preserve_cookies = preserve_cookies;
    m_preserve_cookies_isSet = true;
}

bool OAIEnvironment::is_preserve_cookies_Set() const{
    return m_preserve_cookies_isSet;
}

bool OAIEnvironment::is_preserve_cookies_Valid() const{
    return m_preserve_cookies_isValid;
}

QList<QString> OAIEnvironment::getRegions() const {
    return m_regions;
}
void OAIEnvironment::setRegions(const QList<QString> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIEnvironment::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIEnvironment::is_regions_Valid() const{
    return m_regions_isValid;
}

QList<OAIAgent> OAIEnvironment::getRemoteAgents() const {
    return m_remote_agents;
}
void OAIEnvironment::setRemoteAgents(const QList<OAIAgent> &remote_agents) {
    m_remote_agents = remote_agents;
    m_remote_agents_isSet = true;
}

bool OAIEnvironment::is_remote_agents_Set() const{
    return m_remote_agents_isSet;
}

bool OAIEnvironment::is_remote_agents_Valid() const{
    return m_remote_agents_isValid;
}

bool OAIEnvironment::isRetryOnFailure() const {
    return m_retry_on_failure;
}
void OAIEnvironment::setRetryOnFailure(const bool &retry_on_failure) {
    m_retry_on_failure = retry_on_failure;
    m_retry_on_failure_isSet = true;
}

bool OAIEnvironment::is_retry_on_failure_Set() const{
    return m_retry_on_failure_isSet;
}

bool OAIEnvironment::is_retry_on_failure_Valid() const{
    return m_retry_on_failure_isValid;
}

QString OAIEnvironment::getScript() const {
    return m_script;
}
void OAIEnvironment::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIEnvironment::is_script_Set() const{
    return m_script_isSet;
}

bool OAIEnvironment::is_script_Valid() const{
    return m_script_isValid;
}

QList<QString> OAIEnvironment::getScriptLibrary() const {
    return m_script_library;
}
void OAIEnvironment::setScriptLibrary(const QList<QString> &script_library) {
    m_script_library = script_library;
    m_script_library_isSet = true;
}

bool OAIEnvironment::is_script_library_Set() const{
    return m_script_library_isSet;
}

bool OAIEnvironment::is_script_library_Valid() const{
    return m_script_library_isValid;
}

bool OAIEnvironment::isStopOnFailure() const {
    return m_stop_on_failure;
}
void OAIEnvironment::setStopOnFailure(const bool &stop_on_failure) {
    m_stop_on_failure = stop_on_failure;
    m_stop_on_failure_isSet = true;
}

bool OAIEnvironment::is_stop_on_failure_Set() const{
    return m_stop_on_failure_isSet;
}

bool OAIEnvironment::is_stop_on_failure_Valid() const{
    return m_stop_on_failure_isValid;
}

QString OAIEnvironment::getTestId() const {
    return m_test_id;
}
void OAIEnvironment::setTestId(const QString &test_id) {
    m_test_id = test_id;
    m_test_id_isSet = true;
}

bool OAIEnvironment::is_test_id_Set() const{
    return m_test_id_isSet;
}

bool OAIEnvironment::is_test_id_Valid() const{
    return m_test_id_isValid;
}

bool OAIEnvironment::isVerifySsl() const {
    return m_verify_ssl;
}
void OAIEnvironment::setVerifySsl(const bool &verify_ssl) {
    m_verify_ssl = verify_ssl;
    m_verify_ssl_isSet = true;
}

bool OAIEnvironment::is_verify_ssl_Set() const{
    return m_verify_ssl_isSet;
}

bool OAIEnvironment::is_verify_ssl_Valid() const{
    return m_verify_ssl_isValid;
}

QString OAIEnvironment::getVersion() const {
    return m_version;
}
void OAIEnvironment::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEnvironment::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEnvironment::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIEnvironment::getWebhooks() const {
    return m_webhooks;
}
void OAIEnvironment::setWebhooks(const QString &webhooks) {
    m_webhooks = webhooks;
    m_webhooks_isSet = true;
}

bool OAIEnvironment::is_webhooks_Set() const{
    return m_webhooks_isSet;
}

bool OAIEnvironment::is_webhooks_Valid() const{
    return m_webhooks_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_script_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_variables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_agents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_on_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_library.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_on_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
