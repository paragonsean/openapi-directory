/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetrics::OAIMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetrics::OAIMetrics() {
    this->initializeModel();
}

OAIMetrics::~OAIMetrics() {}

void OAIMetrics::initializeModel() {

    m_changes_from_last_period_isSet = false;
    m_changes_from_last_period_isValid = false;

    m_environment_uuid_isSet = false;
    m_environment_uuid_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_response_times_isSet = false;
    m_response_times_isValid = false;

    m_this_time_period_isSet = false;
    m_this_time_period_isValid = false;

    m_timeframe_isSet = false;
    m_timeframe_isValid = false;
}

void OAIMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetrics::fromJsonObject(QJsonObject json) {

    m_changes_from_last_period_isValid = ::OpenAPI::fromJsonValue(m_changes_from_last_period, json[QString("changes_from_last_period")]);
    m_changes_from_last_period_isSet = !json[QString("changes_from_last_period")].isNull() && m_changes_from_last_period_isValid;

    m_environment_uuid_isValid = ::OpenAPI::fromJsonValue(m_environment_uuid, json[QString("environment_uuid")]);
    m_environment_uuid_isSet = !json[QString("environment_uuid")].isNull() && m_environment_uuid_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_response_times_isValid = ::OpenAPI::fromJsonValue(m_response_times, json[QString("response_times")]);
    m_response_times_isSet = !json[QString("response_times")].isNull() && m_response_times_isValid;

    m_this_time_period_isValid = ::OpenAPI::fromJsonValue(m_this_time_period, json[QString("this_time_period")]);
    m_this_time_period_isSet = !json[QString("this_time_period")].isNull() && m_this_time_period_isValid;

    m_timeframe_isValid = ::OpenAPI::fromJsonValue(m_timeframe, json[QString("timeframe")]);
    m_timeframe_isSet = !json[QString("timeframe")].isNull() && m_timeframe_isValid;
}

QString OAIMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_changes_from_last_period_isSet) {
        obj.insert(QString("changes_from_last_period"), ::OpenAPI::toJsonValue(m_changes_from_last_period));
    }
    if (m_environment_uuid_isSet) {
        obj.insert(QString("environment_uuid"), ::OpenAPI::toJsonValue(m_environment_uuid));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_response_times.size() > 0) {
        obj.insert(QString("response_times"), ::OpenAPI::toJsonValue(m_response_times));
    }
    if (m_this_time_period_isSet) {
        obj.insert(QString("this_time_period"), ::OpenAPI::toJsonValue(m_this_time_period));
    }
    if (m_timeframe_isSet) {
        obj.insert(QString("timeframe"), ::OpenAPI::toJsonValue(m_timeframe));
    }
    return obj;
}

OAIObject OAIMetrics::getChangesFromLastPeriod() const {
    return m_changes_from_last_period;
}
void OAIMetrics::setChangesFromLastPeriod(const OAIObject &changes_from_last_period) {
    m_changes_from_last_period = changes_from_last_period;
    m_changes_from_last_period_isSet = true;
}

bool OAIMetrics::is_changes_from_last_period_Set() const{
    return m_changes_from_last_period_isSet;
}

bool OAIMetrics::is_changes_from_last_period_Valid() const{
    return m_changes_from_last_period_isValid;
}

QString OAIMetrics::getEnvironmentUuid() const {
    return m_environment_uuid;
}
void OAIMetrics::setEnvironmentUuid(const QString &environment_uuid) {
    m_environment_uuid = environment_uuid;
    m_environment_uuid_isSet = true;
}

bool OAIMetrics::is_environment_uuid_Set() const{
    return m_environment_uuid_isSet;
}

bool OAIMetrics::is_environment_uuid_Valid() const{
    return m_environment_uuid_isValid;
}

QString OAIMetrics::getRegion() const {
    return m_region;
}
void OAIMetrics::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIMetrics::is_region_Set() const{
    return m_region_isSet;
}

bool OAIMetrics::is_region_Valid() const{
    return m_region_isValid;
}

QList<OAIMetrics_response_times_inner> OAIMetrics::getResponseTimes() const {
    return m_response_times;
}
void OAIMetrics::setResponseTimes(const QList<OAIMetrics_response_times_inner> &response_times) {
    m_response_times = response_times;
    m_response_times_isSet = true;
}

bool OAIMetrics::is_response_times_Set() const{
    return m_response_times_isSet;
}

bool OAIMetrics::is_response_times_Valid() const{
    return m_response_times_isValid;
}

OAIObject OAIMetrics::getThisTimePeriod() const {
    return m_this_time_period;
}
void OAIMetrics::setThisTimePeriod(const OAIObject &this_time_period) {
    m_this_time_period = this_time_period;
    m_this_time_period_isSet = true;
}

bool OAIMetrics::is_this_time_period_Set() const{
    return m_this_time_period_isSet;
}

bool OAIMetrics::is_this_time_period_Valid() const{
    return m_this_time_period_isValid;
}

QString OAIMetrics::getTimeframe() const {
    return m_timeframe;
}
void OAIMetrics::setTimeframe(const QString &timeframe) {
    m_timeframe = timeframe;
    m_timeframe_isSet = true;
}

bool OAIMetrics::is_timeframe_Set() const{
    return m_timeframe_isSet;
}

bool OAIMetrics::is_timeframe_Valid() const{
    return m_timeframe_isValid;
}

bool OAIMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changes_from_last_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_this_time_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
