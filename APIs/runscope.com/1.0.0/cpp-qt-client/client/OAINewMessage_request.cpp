/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewMessage_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewMessage_request::OAINewMessage_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewMessage_request::OAINewMessage_request() {
    this->initializeModel();
}

OAINewMessage_request::~OAINewMessage_request() {}

void OAINewMessage_request::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_encoding_isSet = false;
    m_body_encoding_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINewMessage_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewMessage_request::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_encoding_isValid = ::OpenAPI::fromJsonValue(m_body_encoding, json[QString("body_encoding")]);
    m_body_encoding_isSet = !json[QString("body_encoding")].isNull() && m_body_encoding_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINewMessage_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewMessage_request::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_encoding_isSet) {
        obj.insert(QString("body_encoding"), ::OpenAPI::toJsonValue(m_body_encoding));
    }
    if (m_form_isSet) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINewMessage_request::getBody() const {
    return m_body;
}
void OAINewMessage_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINewMessage_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAINewMessage_request::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINewMessage_request::getBodyEncoding() const {
    return m_body_encoding;
}
void OAINewMessage_request::setBodyEncoding(const QString &body_encoding) {
    m_body_encoding = body_encoding;
    m_body_encoding_isSet = true;
}

bool OAINewMessage_request::is_body_encoding_Set() const{
    return m_body_encoding_isSet;
}

bool OAINewMessage_request::is_body_encoding_Valid() const{
    return m_body_encoding_isValid;
}

QString OAINewMessage_request::getForm() const {
    return m_form;
}
void OAINewMessage_request::setForm(const QString &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAINewMessage_request::is_form_Set() const{
    return m_form_isSet;
}

bool OAINewMessage_request::is_form_Valid() const{
    return m_form_isValid;
}

QString OAINewMessage_request::getHeaders() const {
    return m_headers;
}
void OAINewMessage_request::setHeaders(const QString &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAINewMessage_request::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAINewMessage_request::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAINewMessage_request::getMethod() const {
    return m_method;
}
void OAINewMessage_request::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAINewMessage_request::is_method_Set() const{
    return m_method_isSet;
}

bool OAINewMessage_request::is_method_Valid() const{
    return m_method_isValid;
}

float OAINewMessage_request::getTimestamp() const {
    return m_timestamp;
}
void OAINewMessage_request::setTimestamp(const float &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAINewMessage_request::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAINewMessage_request::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAINewMessage_request::getUrl() const {
    return m_url;
}
void OAINewMessage_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINewMessage_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAINewMessage_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINewMessage_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewMessage_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
