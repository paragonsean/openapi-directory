/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_exported_at_isSet = false;
    m_exported_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_exported_at_isValid = ::OpenAPI::fromJsonValue(m_exported_at, json[QString("exported_at")]);
    m_exported_at_isSet = !json[QString("exported_at")].isNull() && m_exported_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_exported_at_isSet) {
        obj.insert(QString("exported_at"), ::OpenAPI::toJsonValue(m_exported_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISchedule::getEnvironmentId() const {
    return m_environment_id;
}
void OAISchedule::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAISchedule::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAISchedule::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

qint32 OAISchedule::getExportedAt() const {
    return m_exported_at;
}
void OAISchedule::setExportedAt(const qint32 &exported_at) {
    m_exported_at = exported_at;
    m_exported_at_isSet = true;
}

bool OAISchedule::is_exported_at_Set() const{
    return m_exported_at_isSet;
}

bool OAISchedule::is_exported_at_Valid() const{
    return m_exported_at_isValid;
}

QString OAISchedule::getId() const {
    return m_id;
}
void OAISchedule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISchedule::is_id_Set() const{
    return m_id_isSet;
}

bool OAISchedule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISchedule::getInterval() const {
    return m_interval;
}
void OAISchedule::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISchedule::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISchedule::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAISchedule::getNote() const {
    return m_note;
}
void OAISchedule::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISchedule::is_note_Set() const{
    return m_note_isSet;
}

bool OAISchedule::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISchedule::getVersion() const {
    return m_version;
}
void OAISchedule::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISchedule::is_version_Set() const{
    return m_version_isSet;
}

bool OAISchedule::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
