/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest::OAITest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest::OAITest() {
    this->initializeModel();
}

OAITest::~OAITest() {}

void OAITest::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_default_environment_id_isSet = false;
    m_default_environment_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_run_isSet = false;
    m_last_run_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_trigger_url_isSet = false;
    m_trigger_url_isValid = false;
}

void OAITest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_default_environment_id_isValid = ::OpenAPI::fromJsonValue(m_default_environment_id, json[QString("default_environment_id")]);
    m_default_environment_id_isSet = !json[QString("default_environment_id")].isNull() && m_default_environment_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_run_isValid = ::OpenAPI::fromJsonValue(m_last_run, json[QString("last_run")]);
    m_last_run_isSet = !json[QString("last_run")].isNull() && m_last_run_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_trigger_url_isValid = ::OpenAPI::fromJsonValue(m_trigger_url, json[QString("trigger_url")]);
    m_trigger_url_isSet = !json[QString("trigger_url")].isNull() && m_trigger_url_isValid;
}

QString OAITest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_default_environment_id_isSet) {
        obj.insert(QString("default_environment_id"), ::OpenAPI::toJsonValue(m_default_environment_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_run_isSet) {
        obj.insert(QString("last_run"), ::OpenAPI::toJsonValue(m_last_run));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_trigger_url_isSet) {
        obj.insert(QString("trigger_url"), ::OpenAPI::toJsonValue(m_trigger_url));
    }
    return obj;
}

qint32 OAITest::getCreatedAt() const {
    return m_created_at;
}
void OAITest::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAITest_created_by OAITest::getCreatedBy() const {
    return m_created_by;
}
void OAITest::setCreatedBy(const OAITest_created_by &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITest::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITest::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAITest::getDefaultEnvironmentId() const {
    return m_default_environment_id;
}
void OAITest::setDefaultEnvironmentId(const QString &default_environment_id) {
    m_default_environment_id = default_environment_id;
    m_default_environment_id_isSet = true;
}

bool OAITest::is_default_environment_id_Set() const{
    return m_default_environment_id_isSet;
}

bool OAITest::is_default_environment_id_Valid() const{
    return m_default_environment_id_isValid;
}

QString OAITest::getDescription() const {
    return m_description;
}
void OAITest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITest::is_description_Set() const{
    return m_description_isSet;
}

bool OAITest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITest::getId() const {
    return m_id;
}
void OAITest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITest::is_id_Set() const{
    return m_id_isSet;
}

bool OAITest::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAITest::getLastRun() const {
    return m_last_run;
}
void OAITest::setLastRun(const OAIObject &last_run) {
    m_last_run = last_run;
    m_last_run_isSet = true;
}

bool OAITest::is_last_run_Set() const{
    return m_last_run_isSet;
}

bool OAITest::is_last_run_Valid() const{
    return m_last_run_isValid;
}

QString OAITest::getName() const {
    return m_name;
}
void OAITest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITest::is_name_Set() const{
    return m_name_isSet;
}

bool OAITest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITest::getTriggerUrl() const {
    return m_trigger_url;
}
void OAITest::setTriggerUrl(const QString &trigger_url) {
    m_trigger_url = trigger_url;
    m_trigger_url_isSet = true;
}

bool OAITest::is_trigger_url_Set() const{
    return m_trigger_url_isSet;
}

bool OAITest::is_trigger_url_Valid() const{
    return m_trigger_url_isValid;
}

bool OAITest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
