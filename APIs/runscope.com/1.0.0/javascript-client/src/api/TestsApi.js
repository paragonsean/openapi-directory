/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BucketsBucketKeyTestsGet200Response from '../model/BucketsBucketKeyTestsGet200Response';
import Error from '../model/Error';
import Metrics from '../model/Metrics';
import Test from '../model/Test';
import TestDetail from '../model/TestDetail';

/**
* Tests service.
* @module api/TestsApi
* @version 1.0.0
*/
export default class TestsApi {

    /**
    * Constructs a new TestsApi. 
    * @alias module:api/TestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsGet operation.
     * @callback module:api/TestsApi~bucketsBucketKeyTestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketsBucketKeyTestsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of tests.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {module:api/TestsApi~bucketsBucketKeyTestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketsBucketKeyTestsGet200Response}
     */
    bucketsBucketKeyTestsGet(bucketKey, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsGet");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketsBucketKeyTestsGet200Response;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsPost operation.
     * @callback module:api/TestsApi~bucketsBucketKeyTestsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketsBucketKeyTestsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a test.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {module:model/Test} newTest 
     * @param {module:api/TestsApi~bucketsBucketKeyTestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketsBucketKeyTestsGet200Response}
     */
    bucketsBucketKeyTestsPost(bucketKey, newTest, callback) {
      let postBody = newTest;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsPost");
      }
      // verify the required parameter 'newTest' is set
      if (newTest === undefined || newTest === null) {
        throw new Error("Missing the required parameter 'newTest' when calling bucketsBucketKeyTestsPost");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketsBucketKeyTestsGet200Response;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdDelete operation.
     * @callback module:api/TestsApi~bucketsBucketKeyTestsTestIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a test, including all steps, schedules, test-specific environments and results.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:api/TestsApi~bucketsBucketKeyTestsTestIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdDelete(bucketKey, testId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdDelete");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdDelete");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdGet operation.
     * @callback module:api/TestsApi~bucketsBucketKeyTestsTestIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details of a given test by ID.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:api/TestsApi~bucketsBucketKeyTestsTestIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestDetail}
     */
    bucketsBucketKeyTestsTestIdGet(bucketKey, testId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdGet");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdGet");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestDetail;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdMetricsGet operation.
     * @callback module:api/TestsApi~bucketsBucketKeyTestsTestIdMetricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return details of the test metrics for the specified timeframe.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:api/TestsApi~bucketsBucketKeyTestsTestIdMetricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    bucketsBucketKeyTestsTestIdMetricsGet(bucketKey, testId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdMetricsGet");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdMetricsGet");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdPut operation.
     * @callback module:api/TestsApi~bucketsBucketKeyTestsTestIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a test's name, description, default environment and its steps. To modify other individual properties of a test, make requests to the steps, environments, and schedules subresources of the test.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:api/TestsApi~bucketsBucketKeyTestsTestIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestDetail}
     */
    bucketsBucketKeyTestsTestIdPut(bucketKey, testId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdPut");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdPut");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestDetail;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
