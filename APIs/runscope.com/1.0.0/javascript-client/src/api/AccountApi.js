/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import AccountGet200Response from '../model/AccountGet200Response';
import Agent from '../model/Agent';
import Error from '../model/Error';
import TeamsTeamIdIntegrationsGet200Response from '../model/TeamsTeamIdIntegrationsGet200Response';

/**
* Account service.
* @module api/AccountApi
* @version 1.0.0
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountGet operation.
     * @callback module:api/AccountApi~accountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Resource
     * Information about the authorized account.
     * @param {module:api/AccountApi~accountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountGet200Response}
     */
    accountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountGet200Response;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdAgentsGet operation.
     * @callback module:api/AccountApi~teamsTeamIdAgentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Agent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team agents list
     * List currently connected agents associated with a given team.
     * @param {String} teamId Unique identifier for team
     * @param {module:api/AccountApi~teamsTeamIdAgentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Agent>}
     */
    teamsTeamIdAgentsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdAgentsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Agent];
      return this.apiClient.callApi(
        '/teams/{teamId}/agents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdIntegrationsGet operation.
     * @callback module:api/AccountApi~teamsTeamIdIntegrationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsTeamIdIntegrationsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team integrations list
     * Returns a list of integrations configured for the team.
     * @param {String} teamId Unique identifier for team
     * @param {module:api/AccountApi~teamsTeamIdIntegrationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsTeamIdIntegrationsGet200Response}
     */
    teamsTeamIdIntegrationsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdIntegrationsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamsTeamIdIntegrationsGet200Response;
      return this.apiClient.callApi(
        '/teams/{teamId}/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdPeopleGet operation.
     * @callback module:api/AccountApi~teamsTeamIdPeopleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams Resource
     * List people and integrations associated with a given team.
     * @param {String} teamId Unique identifier for team
     * @param {module:api/AccountApi~teamsTeamIdPeopleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    teamsTeamIdPeopleGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdPeopleGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/teams/{teamId}/people', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
