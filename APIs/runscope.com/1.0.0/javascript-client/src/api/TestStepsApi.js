/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StandardError from '../model/StandardError';
import TestStep from '../model/TestStep';

/**
* TestSteps service.
* @module api/TestStepsApi
* @version 1.0.0
*/
export default class TestStepsApi {

    /**
    * Constructs a new TestStepsApi. 
    * @alias module:api/TestStepsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdStepsGet operation.
     * @callback module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List test steps for a test.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdStepsGet(bucketKey, testId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsGet");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsGet");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdStepsPost operation.
     * @callback module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new test step.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:model/TestStep} testStep 
     * @param {module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdStepsPost(bucketKey, testId, testStep, callback) {
      let postBody = testStep;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsPost");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsPost");
      }
      // verify the required parameter 'testStep' is set
      if (testStep === undefined || testStep === null) {
        throw new Error("Missing the required parameter 'testStep' when calling bucketsBucketKeyTestsTestIdStepsPost");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/steps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdStepsStepIdDelete operation.
     * @callback module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsStepIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a step from a test.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {String} stepId Unique identifier for a test step
     * @param {module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsStepIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdStepsStepIdDelete(bucketKey, testId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsStepIdDelete");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsStepIdDelete");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling bucketsBucketKeyTestsTestIdStepsStepIdDelete");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/steps/{stepId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdStepsStepIdPut operation.
     * @callback module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsStepIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the details of a single test step.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {String} stepId Unique identifier for a test step
     * @param {module:model/TestStep} testStep 
     * @param {module:api/TestStepsApi~bucketsBucketKeyTestsTestIdStepsStepIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdStepsStepIdPut(bucketKey, testId, stepId, testStep, callback) {
      let postBody = testStep;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut");
      }
      // verify the required parameter 'testStep' is set
      if (testStep === undefined || testStep === null) {
        throw new Error("Missing the required parameter 'testStep' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/steps/{stepId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
