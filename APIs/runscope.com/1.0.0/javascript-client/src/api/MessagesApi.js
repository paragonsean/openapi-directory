/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BucketsBucketKeyMessagesPost200Response from '../model/BucketsBucketKeyMessagesPost200Response';
import Error from '../model/Error';
import NewMessage from '../model/NewMessage';

/**
* Messages service.
* @module api/MessagesApi
* @version 1.0.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bucketsBucketKeyErrorsGet operation.
     * @callback module:api/MessagesApi~bucketsBucketKeyErrorsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of error messages in a bucket
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Maxiumum number of messages to return. Default 50, max 1000.
     * @param {Number} [since] Only return messages after the given Unix timestamp
     * @param {Number} [before] Only return messages before the given Unix timestamp
     * @param {module:api/MessagesApi~bucketsBucketKeyErrorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyErrorsGet(bucketKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyErrorsGet");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
        'count': opts['count'],
        'since': opts['since'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyMessagesDelete operation.
     * @callback module:api/MessagesApi~bucketsBucketKeyMessagesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear a bucket (remove all messages).
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {module:api/MessagesApi~bucketsBucketKeyMessagesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyMessagesDelete(bucketKey, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesDelete");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/messages', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyMessagesGet operation.
     * @callback module:api/MessagesApi~bucketsBucketKeyMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of messages in a bucket
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Maxiumum number of messages to return. Default 50, max 1000.
     * @param {Number} [since] Only return messages after the given Unix timestamp
     * @param {Number} [before] Only return messages before the given Unix timestamp
     * @param {module:api/MessagesApi~bucketsBucketKeyMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyMessagesGet(bucketKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesGet");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
        'count': opts['count'],
        'since': opts['since'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyMessagesMessageIdGet operation.
     * @callback module:api/MessagesApi~bucketsBucketKeyMessagesMessageIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details for a single message.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} messageId The unique identifier for this message
     * @param {module:api/MessagesApi~bucketsBucketKeyMessagesMessageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyMessagesMessageIdGet(bucketKey, messageId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesMessageIdGet");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling bucketsBucketKeyMessagesMessageIdGet");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/messages/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyMessagesPost operation.
     * @callback module:api/MessagesApi~bucketsBucketKeyMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketsBucketKeyMessagesPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a message
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {module:model/NewMessage} newMessage 
     * @param {module:api/MessagesApi~bucketsBucketKeyMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketsBucketKeyMessagesPost200Response}
     */
    bucketsBucketKeyMessagesPost(bucketKey, newMessage, callback) {
      let postBody = newMessage;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesPost");
      }
      // verify the required parameter 'newMessage' is set
      if (newMessage === undefined || newMessage === null) {
        throw new Error("Missing the required parameter 'newMessage' when calling bucketsBucketKeyMessagesPost");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketsBucketKeyMessagesPost200Response;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
