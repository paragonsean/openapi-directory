/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Bucket from '../model/Bucket';
import BucketsGet200Response from '../model/BucketsGet200Response';
import Error from '../model/Error';
import NewBucket from '../model/NewBucket';

/**
* Buckets service.
* @module api/BucketsApi
* @version 1.0.0
*/
export default class BucketsApi {

    /**
    * Constructs a new BucketsApi. 
    * @alias module:api/BucketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bucketsBucketKeyDelete operation.
     * @callback module:api/BucketsApi~bucketsBucketKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single bucket resource.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {module:api/BucketsApi~bucketsBucketKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyDelete(bucketKey, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyDelete");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyGet operation.
     * @callback module:api/BucketsApi~bucketsBucketKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single bucket resource.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {module:api/BucketsApi~bucketsBucketKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    bucketsBucketKeyGet(bucketKey, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyGet");
      }

      let pathParams = {
        'bucketKey': bucketKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsGet operation.
     * @callback module:api/BucketsApi~bucketsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of buckets.
     * @param {module:api/BucketsApi~bucketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketsGet200Response}
     */
    bucketsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketsGet200Response;
      return this.apiClient.callApi(
        '/buckets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsPost operation.
     * @callback module:api/BucketsApi~bucketsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new bucket
     * @param {module:model/NewBucket} newBucket 
     * @param {module:api/BucketsApi~bucketsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    bucketsPost(newBucket, callback) {
      let postBody = newBucket;
      // verify the required parameter 'newBucket' is set
      if (newBucket === undefined || newBucket === null) {
        throw new Error("Missing the required parameter 'newBucket' when calling bucketsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/buckets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
