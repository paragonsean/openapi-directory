/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BucketsBucketKeyTestsTestIdEnvironmentsGet200Response from '../model/BucketsBucketKeyTestsTestIdEnvironmentsGet200Response';
import Environment from '../model/Environment';

/**
* TestEnvironments service.
* @module api/TestEnvironmentsApi
* @version 1.0.0
*/
export default class TestEnvironmentsApi {

    /**
    * Constructs a new TestEnvironmentsApi. 
    * @alias module:api/TestEnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut operation.
     * @callback module:api/TestEnvironmentsApi~bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the details of a test environment.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {String} environmentId Unique identifier for a test environment
     * @param {module:model/Environment} modifiedEnvironment 
     * @param {module:api/TestEnvironmentsApi~bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut(bucketKey, testId, environmentId, modifiedEnvironment, callback) {
      let postBody = modifiedEnvironment;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut");
      }
      // verify the required parameter 'modifiedEnvironment' is set
      if (modifiedEnvironment === undefined || modifiedEnvironment === null) {
        throw new Error("Missing the required parameter 'modifiedEnvironment' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/environments/{environmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdEnvironmentsGet operation.
     * @callback module:api/TestEnvironmentsApi~bucketsBucketKeyTestsTestIdEnvironmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketsBucketKeyTestsTestIdEnvironmentsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return details of the test's environments (only those that belong to the specified test)
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:api/TestEnvironmentsApi~bucketsBucketKeyTestsTestIdEnvironmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketsBucketKeyTestsTestIdEnvironmentsGet200Response}
     */
    bucketsBucketKeyTestsTestIdEnvironmentsGet(bucketKey, testId, callback) {
      let postBody = null;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdEnvironmentsGet");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdEnvironmentsGet");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketsBucketKeyTestsTestIdEnvironmentsGet200Response;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bucketsBucketKeyTestsTestIdEnvironmentsPost operation.
     * @callback module:api/TestEnvironmentsApi~bucketsBucketKeyTestsTestIdEnvironmentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new test environment.
     * @param {String} bucketKey Unique identifier for a bucket
     * @param {String} testId Unique identifier for a test
     * @param {module:model/Environment} newEnvironment 
     * @param {module:api/TestEnvironmentsApi~bucketsBucketKeyTestsTestIdEnvironmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bucketsBucketKeyTestsTestIdEnvironmentsPost(bucketKey, testId, newEnvironment, callback) {
      let postBody = newEnvironment;
      // verify the required parameter 'bucketKey' is set
      if (bucketKey === undefined || bucketKey === null) {
        throw new Error("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdEnvironmentsPost");
      }
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdEnvironmentsPost");
      }
      // verify the required parameter 'newEnvironment' is set
      if (newEnvironment === undefined || newEnvironment === null) {
        throw new Error("Missing the required parameter 'newEnvironment' when calling bucketsBucketKeyTestsTestIdEnvironmentsPost");
      }

      let pathParams = {
        'bucketKey': bucketKey,
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['runscope_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketKey}/tests/{testId}/environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
