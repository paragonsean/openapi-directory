/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error400 from './Error400';
import Meta from './Meta';

/**
 * The StandardError model module.
 * @module model/StandardError
 * @version 1.0.0
 */
class StandardError {
    /**
     * Constructs a new <code>StandardError</code>.
     * @alias module:model/StandardError
     */
    constructor() { 
        
        StandardError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StandardError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardError} obj Optional instance to populate.
     * @return {module:model/StandardError} The populated <code>StandardError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardError();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error400.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardError</code>.
     */
    static validateJSON(data) {
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error400.validateJSON(data['error']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }

        return true;
    }


}



/**
 * @member {Object} data
 */
StandardError.prototype['data'] = undefined;

/**
 * @member {module:model/Error400} error
 */
StandardError.prototype['error'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
StandardError.prototype['meta'] = undefined;






export default StandardError;

