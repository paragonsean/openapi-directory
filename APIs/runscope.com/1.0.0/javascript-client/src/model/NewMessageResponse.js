/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewMessageResponse model module.
 * @module model/NewMessageResponse
 * @version 1.0.0
 */
class NewMessageResponse {
    /**
     * Constructs a new <code>NewMessageResponse</code>.
     * @alias module:model/NewMessageResponse
     */
    constructor() { 
        
        NewMessageResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewMessageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewMessageResponse} obj Optional instance to populate.
     * @return {module:model/NewMessageResponse} The populated <code>NewMessageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewMessageResponse();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('body_encoding')) {
                obj['body_encoding'] = ApiClient.convertToType(data['body_encoding'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('response_time')) {
                obj['response_time'] = ApiClient.convertToType(data['response_time'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewMessageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewMessageResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['body_encoding'] && !(typeof data['body_encoding'] === 'string' || data['body_encoding'] instanceof String)) {
            throw new Error("Expected the field `body_encoding` to be a primitive type in the JSON string but got " + data['body_encoding']);
        }
        // ensure the json data is a string
        if (data['headers'] && !(typeof data['headers'] === 'string' || data['headers'] instanceof String)) {
            throw new Error("Expected the field `headers` to be a primitive type in the JSON string but got " + data['headers']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * HTTP response body. If the response body contains binary data that cannot be included directly in the JSON, you should encode the content with Base64. 
 * @member {String} body
 */
NewMessageResponse.prototype['body'] = undefined;

/**
 * If the request body was encoded with Base64, this field should be present and set to  \"base64\". If not specified, defaults to \"plaintext\" 
 * @member {String} body_encoding
 */
NewMessageResponse.prototype['body_encoding'] = undefined;

/**
 * JSON object of header keys and values -- with values as a string or an array of strings.
 * @member {String} headers
 */
NewMessageResponse.prototype['headers'] = undefined;

/**
 * Textual description of HTTP status code. This will be set automatically if not  provided in the API call. For example, if the status code is 404, this will be  set to \"Not Found\" unless you explicitly specify a different reason. 
 * @member {String} reason
 */
NewMessageResponse.prototype['reason'] = undefined;

/**
 * Length of time it took to receive the response, in seconds.
 * @member {Number} response_time
 */
NewMessageResponse.prototype['response_time'] = undefined;

/**
 * HTTP status code returned in the response.
 * @member {Number} status
 */
NewMessageResponse.prototype['status'] = undefined;

/**
 * Unix timestamp indicating when the request was made.
 * @member {Number} timestamp
 */
NewMessageResponse.prototype['timestamp'] = undefined;






export default NewMessageResponse;

