/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestStep model module.
 * @module model/TestStep
 * @version 1.0.0
 */
class TestStep {
    /**
     * Constructs a new <code>TestStep</code>.
     * @alias module:model/TestStep
     */
    constructor() { 
        
        TestStep.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestStep} obj Optional instance to populate.
     * @return {module:model/TestStep} The populated <code>TestStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestStep();

            if (data.hasOwnProperty('step_type')) {
                obj['step_type'] = ApiClient.convertToType(data['step_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestStep</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['step_type'] && !(typeof data['step_type'] === 'string' || data['step_type'] instanceof String)) {
            throw new Error("Expected the field `step_type` to be a primitive type in the JSON string but got " + data['step_type']);
        }

        return true;
    }


}



/**
 * Type of test step -- request, pause, condition, ghost-inspector, or subtest.
 * @member {String} step_type
 */
TestStep.prototype['step_type'] = undefined;






export default TestStep;

