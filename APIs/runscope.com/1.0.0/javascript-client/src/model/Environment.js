/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Agent from './Agent';
import Integration from './Integration';

/**
 * The Environment model module.
 * @module model/Environment
 * @version 1.0.0
 */
class Environment {
    /**
     * Constructs a new <code>Environment</code>.
     * @alias module:model/Environment
     * @param name {String} Name of this environment.
     */
    constructor(name) { 
        
        Environment.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Environment} obj Optional instance to populate.
     * @return {module:model/Environment} The populated <code>Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Environment();

            if (data.hasOwnProperty('auth')) {
                obj['auth'] = ApiClient.convertToType(data['auth'], 'String');
            }
            if (data.hasOwnProperty('client_certificate')) {
                obj['client_certificate'] = ApiClient.convertToType(data['client_certificate'], 'String');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], Object);
            }
            if (data.hasOwnProperty('exported_at')) {
                obj['exported_at'] = ApiClient.convertToType(data['exported_at'], 'Number');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('initial_script_hash')) {
                obj['initial_script_hash'] = ApiClient.convertToType(data['initial_script_hash'], 'String');
            }
            if (data.hasOwnProperty('initial_variables')) {
                obj['initial_variables'] = ApiClient.convertToType(data['initial_variables'], Object);
            }
            if (data.hasOwnProperty('integrations')) {
                obj['integrations'] = ApiClient.convertToType(data['integrations'], [Integration]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent_environment_id')) {
                obj['parent_environment_id'] = ApiClient.convertToType(data['parent_environment_id'], 'String');
            }
            if (data.hasOwnProperty('preserve_cookies')) {
                obj['preserve_cookies'] = ApiClient.convertToType(data['preserve_cookies'], 'Boolean');
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('remote_agents')) {
                obj['remote_agents'] = ApiClient.convertToType(data['remote_agents'], [Agent]);
            }
            if (data.hasOwnProperty('retry_on_failure')) {
                obj['retry_on_failure'] = ApiClient.convertToType(data['retry_on_failure'], 'Boolean');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('script_library')) {
                obj['script_library'] = ApiClient.convertToType(data['script_library'], ['String']);
            }
            if (data.hasOwnProperty('stop_on_failure')) {
                obj['stop_on_failure'] = ApiClient.convertToType(data['stop_on_failure'], 'Boolean');
            }
            if (data.hasOwnProperty('test_id')) {
                obj['test_id'] = ApiClient.convertToType(data['test_id'], 'String');
            }
            if (data.hasOwnProperty('verify_ssl')) {
                obj['verify_ssl'] = ApiClient.convertToType(data['verify_ssl'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('webhooks')) {
                obj['webhooks'] = ApiClient.convertToType(data['webhooks'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Environment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Environment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['auth'] && !(typeof data['auth'] === 'string' || data['auth'] instanceof String)) {
            throw new Error("Expected the field `auth` to be a primitive type in the JSON string but got " + data['auth']);
        }
        // ensure the json data is a string
        if (data['client_certificate'] && !(typeof data['client_certificate'] === 'string' || data['client_certificate'] instanceof String)) {
            throw new Error("Expected the field `client_certificate` to be a primitive type in the JSON string but got " + data['client_certificate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['initial_script_hash'] && !(typeof data['initial_script_hash'] === 'string' || data['initial_script_hash'] instanceof String)) {
            throw new Error("Expected the field `initial_script_hash` to be a primitive type in the JSON string but got " + data['initial_script_hash']);
        }
        if (data['integrations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['integrations'])) {
                throw new Error("Expected the field `integrations` to be an array in the JSON data but got " + data['integrations']);
            }
            // validate the optional field `integrations` (array)
            for (const item of data['integrations']) {
                Integration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parent_environment_id'] && !(typeof data['parent_environment_id'] === 'string' || data['parent_environment_id'] instanceof String)) {
            throw new Error("Expected the field `parent_environment_id` to be a primitive type in the JSON string but got " + data['parent_environment_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        if (data['remote_agents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['remote_agents'])) {
                throw new Error("Expected the field `remote_agents` to be an array in the JSON data but got " + data['remote_agents']);
            }
            // validate the optional field `remote_agents` (array)
            for (const item of data['remote_agents']) {
                Agent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['script_library'])) {
            throw new Error("Expected the field `script_library` to be an array in the JSON data but got " + data['script_library']);
        }
        // ensure the json data is a string
        if (data['test_id'] && !(typeof data['test_id'] === 'string' || data['test_id'] instanceof String)) {
            throw new Error("Expected the field `test_id` to be a primitive type in the JSON string but got " + data['test_id']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['webhooks'] && !(typeof data['webhooks'] === 'string' || data['webhooks'] instanceof String)) {
            throw new Error("Expected the field `webhooks` to be a primitive type in the JSON string but got " + data['webhooks']);
        }

        return true;
    }


}

Environment.RequiredProperties = ["name"];

/**
 * @member {String} auth
 */
Environment.prototype['auth'] = undefined;

/**
 * @member {String} client_certificate
 */
Environment.prototype['client_certificate'] = undefined;

/**
 * @member {Object} emails
 */
Environment.prototype['emails'] = undefined;

/**
 * @member {Number} exported_at
 */
Environment.prototype['exported_at'] = undefined;

/**
 * @member {Object} headers
 */
Environment.prototype['headers'] = undefined;

/**
 * The unique identifier for this environment.
 * @member {String} id
 */
Environment.prototype['id'] = undefined;

/**
 * @member {String} initial_script_hash
 */
Environment.prototype['initial_script_hash'] = undefined;

/**
 * @member {Object} initial_variables
 */
Environment.prototype['initial_variables'] = undefined;

/**
 * The list of integrations for this environment.
 * @member {Array.<module:model/Integration>} integrations
 */
Environment.prototype['integrations'] = undefined;

/**
 * Name of this environment.
 * @member {String} name
 */
Environment.prototype['name'] = undefined;

/**
 * @member {String} parent_environment_id
 */
Environment.prototype['parent_environment_id'] = undefined;

/**
 * @member {Boolean} preserve_cookies
 */
Environment.prototype['preserve_cookies'] = undefined;

/**
 * An array of the region codes that this environment is using.
 * @member {Array.<String>} regions
 */
Environment.prototype['regions'] = undefined;

/**
 * @member {Array.<module:model/Agent>} remote_agents
 */
Environment.prototype['remote_agents'] = undefined;

/**
 * @member {Boolean} retry_on_failure
 */
Environment.prototype['retry_on_failure'] = undefined;

/**
 * 
 * @member {String} script
 */
Environment.prototype['script'] = undefined;

/**
 * The list of ids for scripts, part of the script libraries, being used for this environment.
 * @member {Array.<String>} script_library
 */
Environment.prototype['script_library'] = undefined;

/**
 * Stop executing the test after the first failed step.
 * @member {Boolean} stop_on_failure
 */
Environment.prototype['stop_on_failure'] = undefined;

/**
 * The unique identifier for this test.
 * @member {String} test_id
 */
Environment.prototype['test_id'] = undefined;

/**
 * Validate all SSL certificates on any HTTPS connections.
 * @member {Boolean} verify_ssl
 */
Environment.prototype['verify_ssl'] = undefined;

/**
 * @member {String} version
 */
Environment.prototype['version'] = undefined;

/**
 * @member {String} webhooks
 */
Environment.prototype['webhooks'] = undefined;






export default Environment;

