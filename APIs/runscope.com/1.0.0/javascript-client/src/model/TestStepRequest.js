/**
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assertion from './Assertion';
import TestStep from './TestStep';
import Variable from './Variable';

/**
 * The TestStepRequest model module.
 * @module model/TestStepRequest
 * @version 1.0.0
 */
class TestStepRequest {
    /**
     * Constructs a new <code>TestStepRequest</code>.
     * @alias module:model/TestStepRequest
     * @implements module:model/TestStep
     */
    constructor() { 
        TestStep.initialize(this);
        TestStepRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestStepRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestStepRequest} obj Optional instance to populate.
     * @return {module:model/TestStepRequest} The populated <code>TestStepRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestStepRequest();
            TestStep.constructFromObject(data, obj);

            if (data.hasOwnProperty('step_type')) {
                obj['step_type'] = ApiClient.convertToType(data['step_type'], 'String');
            }
            if (data.hasOwnProperty('assertions')) {
                obj['assertions'] = ApiClient.convertToType(data['assertions'], [Assertion]);
            }
            if (data.hasOwnProperty('auth')) {
                obj['auth'] = ApiClient.convertToType(data['auth'], Object);
            }
            if (data.hasOwnProperty('before_scripts')) {
                obj['before_scripts'] = ApiClient.convertToType(data['before_scripts'], ['String']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = ApiClient.convertToType(data['form'], Object);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], Object);
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('scripts')) {
                obj['scripts'] = ApiClient.convertToType(data['scripts'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], [Variable]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestStepRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestStepRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['step_type'] && !(typeof data['step_type'] === 'string' || data['step_type'] instanceof String)) {
            throw new Error("Expected the field `step_type` to be a primitive type in the JSON string but got " + data['step_type']);
        }
        if (data['assertions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assertions'])) {
                throw new Error("Expected the field `assertions` to be an array in the JSON data but got " + data['assertions']);
            }
            // validate the optional field `assertions` (array)
            for (const item of data['assertions']) {
                Assertion.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['before_scripts'])) {
            throw new Error("Expected the field `before_scripts` to be an array in the JSON data but got " + data['before_scripts']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scripts'])) {
            throw new Error("Expected the field `scripts` to be an array in the JSON data but got " + data['scripts']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['variables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variables'])) {
                throw new Error("Expected the field `variables` to be an array in the JSON data but got " + data['variables']);
            }
            // validate the optional field `variables` (array)
            for (const item of data['variables']) {
                Variable.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Type of test step -- request, pause, condition, ghost-inspector, or subtest.
 * @member {String} step_type
 */
TestStepRequest.prototype['step_type'] = undefined;

/**
 * A list of assertions to apply to the HTTP response from this request.
 * @member {Array.<module:model/Assertion>} assertions
 */
TestStepRequest.prototype['assertions'] = undefined;

/**
 * An authentication object with either basic, oauth1, or client_certificate credentials for authenticating this request.
 * @member {Object} auth
 */
TestStepRequest.prototype['auth'] = undefined;

/**
 * A list of pre-request scripts to run before this request.
 * @member {Array.<String>} before_scripts
 */
TestStepRequest.prototype['before_scripts'] = undefined;

/**
 * A string to use as the body of the request.
 * @member {String} body
 */
TestStepRequest.prototype['body'] = undefined;

/**
 * An object with keys as form post parameter names matched to their values. Values can either be a single string or an array of strings.
 * @member {Object} form
 */
TestStepRequest.prototype['form'] = undefined;

/**
 * An object with keys as header names matched to their values. Values can either be a single string or an array of strings.
 * @member {Object} headers
 */
TestStepRequest.prototype['headers'] = undefined;

/**
 * The HTTP method for this request step. E.g. GET, POST, PUT, DELETE, etc.
 * @member {String} method
 */
TestStepRequest.prototype['method'] = undefined;

/**
 * A description or note for this request step.
 * @member {String} note
 */
TestStepRequest.prototype['note'] = undefined;

/**
 * A list of post-response scripts to run after this request.
 * @member {Array.<String>} scripts
 */
TestStepRequest.prototype['scripts'] = undefined;

/**
 * The URL to make a request to for this step. This may contain both query string parameters and variables.
 * @member {String} url
 */
TestStepRequest.prototype['url'] = undefined;

/**
 * A list of variables to extract out of the HTTP response from this request.
 * @member {Array.<module:model/Variable>} variables
 */
TestStepRequest.prototype['variables'] = undefined;


// Implement TestStep interface:
/**
 * Type of test step -- request, pause, condition, ghost-inspector, or subtest.
 * @member {String} step_type
 */
TestStep.prototype['step_type'] = undefined;




export default TestStepRequest;

