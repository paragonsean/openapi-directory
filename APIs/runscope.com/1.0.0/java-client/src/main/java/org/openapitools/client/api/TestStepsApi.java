/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StandardError;
import org.openapitools.client.model.TestStep;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestStepsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestStepsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestStepsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bucketsBucketKeyTestsTestIdStepsGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsGetCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/steps"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdStepsGetValidateBeforeCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsGet(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsGet(Async)");
        }

        return bucketsBucketKeyTestsTestIdStepsGetCall(bucketKey, testId, _callback);

    }

    /**
     * List test steps for a test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdStepsGet(String bucketKey, String testId) throws ApiException {
        bucketsBucketKeyTestsTestIdStepsGetWithHttpInfo(bucketKey, testId);
    }

    /**
     * List test steps for a test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdStepsGetWithHttpInfo(String bucketKey, String testId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsGetValidateBeforeCall(bucketKey, testId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List test steps for a test. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsGetAsync(String bucketKey, String testId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsGetValidateBeforeCall(bucketKey, testId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdStepsPost
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param testStep  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test step. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Must send valid JSON object to create a new test step </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsPostCall(String bucketKey, String testId, TestStep testStep, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testStep;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/steps"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdStepsPostValidateBeforeCall(String bucketKey, String testId, TestStep testStep, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsPost(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsPost(Async)");
        }

        // verify the required parameter 'testStep' is set
        if (testStep == null) {
            throw new ApiException("Missing the required parameter 'testStep' when calling bucketsBucketKeyTestsTestIdStepsPost(Async)");
        }

        return bucketsBucketKeyTestsTestIdStepsPostCall(bucketKey, testId, testStep, _callback);

    }

    /**
     * Add new test step.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param testStep  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test step. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Must send valid JSON object to create a new test step </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdStepsPost(String bucketKey, String testId, TestStep testStep) throws ApiException {
        bucketsBucketKeyTestsTestIdStepsPostWithHttpInfo(bucketKey, testId, testStep);
    }

    /**
     * Add new test step.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param testStep  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test step. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Must send valid JSON object to create a new test step </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdStepsPostWithHttpInfo(String bucketKey, String testId, TestStep testStep) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsPostValidateBeforeCall(bucketKey, testId, testStep, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new test step. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param testStep  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test step. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Must send valid JSON object to create a new test step </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsPostAsync(String bucketKey, String testId, TestStep testStep, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsPostValidateBeforeCall(bucketKey, testId, testStep, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdStepsStepIdDelete
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsStepIdDeleteCall(String bucketKey, String testId, String stepId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/steps/{stepId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()))
            .replace("{" + "stepId" + "}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdStepsStepIdDeleteValidateBeforeCall(String bucketKey, String testId, String stepId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsStepIdDelete(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsStepIdDelete(Async)");
        }

        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling bucketsBucketKeyTestsTestIdStepsStepIdDelete(Async)");
        }

        return bucketsBucketKeyTestsTestIdStepsStepIdDeleteCall(bucketKey, testId, stepId, _callback);

    }

    /**
     * Delete a step from a test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdStepsStepIdDelete(String bucketKey, String testId, String stepId) throws ApiException {
        bucketsBucketKeyTestsTestIdStepsStepIdDeleteWithHttpInfo(bucketKey, testId, stepId);
    }

    /**
     * Delete a step from a test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdStepsStepIdDeleteWithHttpInfo(String bucketKey, String testId, String stepId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsStepIdDeleteValidateBeforeCall(bucketKey, testId, stepId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a step from a test. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsStepIdDeleteAsync(String bucketKey, String testId, String stepId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsStepIdDeleteValidateBeforeCall(bucketKey, testId, stepId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdStepsStepIdPut
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @param testStep  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update template &#39;{stepId}&#39; for test &#39;{testId}&#39; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsStepIdPutCall(String bucketKey, String testId, String stepId, TestStep testStep, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testStep;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/steps/{stepId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()))
            .replace("{" + "stepId" + "}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdStepsStepIdPutValidateBeforeCall(String bucketKey, String testId, String stepId, TestStep testStep, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut(Async)");
        }

        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut(Async)");
        }

        // verify the required parameter 'testStep' is set
        if (testStep == null) {
            throw new ApiException("Missing the required parameter 'testStep' when calling bucketsBucketKeyTestsTestIdStepsStepIdPut(Async)");
        }

        return bucketsBucketKeyTestsTestIdStepsStepIdPutCall(bucketKey, testId, stepId, testStep, _callback);

    }

    /**
     * Update the details of a single test step.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @param testStep  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update template &#39;{stepId}&#39; for test &#39;{testId}&#39; </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdStepsStepIdPut(String bucketKey, String testId, String stepId, TestStep testStep) throws ApiException {
        bucketsBucketKeyTestsTestIdStepsStepIdPutWithHttpInfo(bucketKey, testId, stepId, testStep);
    }

    /**
     * Update the details of a single test step.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @param testStep  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update template &#39;{stepId}&#39; for test &#39;{testId}&#39; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdStepsStepIdPutWithHttpInfo(String bucketKey, String testId, String stepId, TestStep testStep) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsStepIdPutValidateBeforeCall(bucketKey, testId, stepId, testStep, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the details of a single test step. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param stepId Unique identifier for a test step (required)
     * @param testStep  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test steps for a test </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update template &#39;{stepId}&#39; for test &#39;{testId}&#39; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdStepsStepIdPutAsync(String bucketKey, String testId, String stepId, TestStep testStep, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdStepsStepIdPutValidateBeforeCall(bucketKey, testId, stepId, testStep, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
