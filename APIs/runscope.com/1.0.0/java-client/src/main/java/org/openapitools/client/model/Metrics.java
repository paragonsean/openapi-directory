/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricsResponseTimesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:55.705127-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metrics {
  public static final String SERIALIZED_NAME_CHANGES_FROM_LAST_PERIOD = "changes_from_last_period";
  @SerializedName(SERIALIZED_NAME_CHANGES_FROM_LAST_PERIOD)
  private Object changesFromLastPeriod;

  public static final String SERIALIZED_NAME_ENVIRONMENT_UUID = "environment_uuid";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_UUID)
  private String environmentUuid;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESPONSE_TIMES = "response_times";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIMES)
  private List<MetricsResponseTimesInner> responseTimes = new ArrayList<>();

  public static final String SERIALIZED_NAME_THIS_TIME_PERIOD = "this_time_period";
  @SerializedName(SERIALIZED_NAME_THIS_TIME_PERIOD)
  private Object thisTimePeriod;

  public static final String SERIALIZED_NAME_TIMEFRAME = "timeframe";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME)
  private String timeframe;

  public Metrics() {
  }

  public Metrics changesFromLastPeriod(Object changesFromLastPeriod) {
    this.changesFromLastPeriod = changesFromLastPeriod;
    return this;
  }

  /**
   * The changes in average response time compared to the last period.
   * @return changesFromLastPeriod
   */
  @javax.annotation.Nullable
  public Object getChangesFromLastPeriod() {
    return changesFromLastPeriod;
  }

  public void setChangesFromLastPeriod(Object changesFromLastPeriod) {
    this.changesFromLastPeriod = changesFromLastPeriod;
  }


  public Metrics environmentUuid(String environmentUuid) {
    this.environmentUuid = environmentUuid;
    return this;
  }

  /**
   * The environment_uuid that filters this request.
   * @return environmentUuid
   */
  @javax.annotation.Nullable
  public String getEnvironmentUuid() {
    return environmentUuid;
  }

  public void setEnvironmentUuid(String environmentUuid) {
    this.environmentUuid = environmentUuid;
  }


  public Metrics region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The region that filters this request.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Metrics responseTimes(List<MetricsResponseTimesInner> responseTimes) {
    this.responseTimes = responseTimes;
    return this;
  }

  public Metrics addResponseTimesItem(MetricsResponseTimesInner responseTimesItem) {
    if (this.responseTimes == null) {
      this.responseTimes = new ArrayList<>();
    }
    this.responseTimes.add(responseTimesItem);
    return this;
  }

  /**
   * The list of response times based on the timeframe of the request.
   * @return responseTimes
   */
  @javax.annotation.Nullable
  public List<MetricsResponseTimesInner> getResponseTimes() {
    return responseTimes;
  }

  public void setResponseTimes(List<MetricsResponseTimesInner> responseTimes) {
    this.responseTimes = responseTimes;
  }


  public Metrics thisTimePeriod(Object thisTimePeriod) {
    this.thisTimePeriod = thisTimePeriod;
    return this;
  }

  /**
   * The average response time for different percentiles for the request in the requested timeframe.
   * @return thisTimePeriod
   */
  @javax.annotation.Nullable
  public Object getThisTimePeriod() {
    return thisTimePeriod;
  }

  public void setThisTimePeriod(Object thisTimePeriod) {
    this.thisTimePeriod = thisTimePeriod;
  }


  public Metrics timeframe(String timeframe) {
    this.timeframe = timeframe;
    return this;
  }

  /**
   * The timeframe that filters this request.
   * @return timeframe
   */
  @javax.annotation.Nullable
  public String getTimeframe() {
    return timeframe;
  }

  public void setTimeframe(String timeframe) {
    this.timeframe = timeframe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metrics metrics = (Metrics) o;
    return Objects.equals(this.changesFromLastPeriod, metrics.changesFromLastPeriod) &&
        Objects.equals(this.environmentUuid, metrics.environmentUuid) &&
        Objects.equals(this.region, metrics.region) &&
        Objects.equals(this.responseTimes, metrics.responseTimes) &&
        Objects.equals(this.thisTimePeriod, metrics.thisTimePeriod) &&
        Objects.equals(this.timeframe, metrics.timeframe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changesFromLastPeriod, environmentUuid, region, responseTimes, thisTimePeriod, timeframe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metrics {\n");
    sb.append("    changesFromLastPeriod: ").append(toIndentedString(changesFromLastPeriod)).append("\n");
    sb.append("    environmentUuid: ").append(toIndentedString(environmentUuid)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    responseTimes: ").append(toIndentedString(responseTimes)).append("\n");
    sb.append("    thisTimePeriod: ").append(toIndentedString(thisTimePeriod)).append("\n");
    sb.append("    timeframe: ").append(toIndentedString(timeframe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changes_from_last_period");
    openapiFields.add("environment_uuid");
    openapiFields.add("region");
    openapiFields.add("response_times");
    openapiFields.add("this_time_period");
    openapiFields.add("timeframe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metrics is not found in the empty JSON string", Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("environment_uuid") != null && !jsonObj.get("environment_uuid").isJsonNull()) && !jsonObj.get("environment_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_uuid").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if (jsonObj.get("response_times") != null && !jsonObj.get("response_times").isJsonNull()) {
        JsonArray jsonArrayresponseTimes = jsonObj.getAsJsonArray("response_times");
        if (jsonArrayresponseTimes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("response_times").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `response_times` to be an array in the JSON string but got `%s`", jsonObj.get("response_times").toString()));
          }

          // validate the optional field `response_times` (array)
          for (int i = 0; i < jsonArrayresponseTimes.size(); i++) {
            MetricsResponseTimesInner.validateJsonElement(jsonArrayresponseTimes.get(i));
          };
        }
      }
      if ((jsonObj.get("timeframe") != null && !jsonObj.get("timeframe").isJsonNull()) && !jsonObj.get("timeframe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeframe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeframe").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<Metrics>() {
           @Override
           public void write(JsonWriter out, Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metrics
   * @throws IOException if the JSON string is invalid with respect to Metrics
   */
  public static Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metrics.class);
  }

  /**
   * Convert an instance of Metrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

