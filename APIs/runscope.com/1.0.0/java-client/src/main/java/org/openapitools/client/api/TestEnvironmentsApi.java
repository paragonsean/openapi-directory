/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BucketsBucketKeyTestsTestIdEnvironmentsGet200Response;
import org.openapitools.client.model.Environment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestEnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestEnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestEnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param environmentId Unique identifier for a test environment (required)
     * @param modifiedEnvironment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the modified test environment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutCall(String bucketKey, String testId, String environmentId, Environment modifiedEnvironment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifiedEnvironment;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/environments/{environmentId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()))
            .replace("{" + "environmentId" + "}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutValidateBeforeCall(String bucketKey, String testId, String environmentId, Environment modifiedEnvironment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut(Async)");
        }

        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut(Async)");
        }

        // verify the required parameter 'modifiedEnvironment' is set
        if (modifiedEnvironment == null) {
            throw new ApiException("Missing the required parameter 'modifiedEnvironment' when calling bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut(Async)");
        }

        return bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutCall(bucketKey, testId, environmentId, modifiedEnvironment, _callback);

    }

    /**
     * Update the details of a test environment.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param environmentId Unique identifier for a test environment (required)
     * @param modifiedEnvironment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the modified test environment. </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPut(String bucketKey, String testId, String environmentId, Environment modifiedEnvironment) throws ApiException {
        bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutWithHttpInfo(bucketKey, testId, environmentId, modifiedEnvironment);
    }

    /**
     * Update the details of a test environment.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param environmentId Unique identifier for a test environment (required)
     * @param modifiedEnvironment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the modified test environment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutWithHttpInfo(String bucketKey, String testId, String environmentId, Environment modifiedEnvironment) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutValidateBeforeCall(bucketKey, testId, environmentId, modifiedEnvironment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the details of a test environment. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param environmentId Unique identifier for a test environment (required)
     * @param modifiedEnvironment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the modified test environment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutAsync(String bucketKey, String testId, String environmentId, Environment modifiedEnvironment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdEnvironmentsEnvironmentIdPutValidateBeforeCall(bucketKey, testId, environmentId, modifiedEnvironment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdEnvironmentsGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of environments belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsGetCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/environments"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsGetValidateBeforeCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdEnvironmentsGet(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdEnvironmentsGet(Async)");
        }

        return bucketsBucketKeyTestsTestIdEnvironmentsGetCall(bucketKey, testId, _callback);

    }

    /**
     * Return details of the test&#39;s environments (only those that belong to the specified test)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return BucketsBucketKeyTestsTestIdEnvironmentsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of environments belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public BucketsBucketKeyTestsTestIdEnvironmentsGet200Response bucketsBucketKeyTestsTestIdEnvironmentsGet(String bucketKey, String testId) throws ApiException {
        ApiResponse<BucketsBucketKeyTestsTestIdEnvironmentsGet200Response> localVarResp = bucketsBucketKeyTestsTestIdEnvironmentsGetWithHttpInfo(bucketKey, testId);
        return localVarResp.getData();
    }

    /**
     * Return details of the test&#39;s environments (only those that belong to the specified test)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return ApiResponse&lt;BucketsBucketKeyTestsTestIdEnvironmentsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of environments belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BucketsBucketKeyTestsTestIdEnvironmentsGet200Response> bucketsBucketKeyTestsTestIdEnvironmentsGetWithHttpInfo(String bucketKey, String testId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdEnvironmentsGetValidateBeforeCall(bucketKey, testId, null);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyTestsTestIdEnvironmentsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return details of the test&#39;s environments (only those that belong to the specified test) (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of environments belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsGetAsync(String bucketKey, String testId, final ApiCallback<BucketsBucketKeyTestsTestIdEnvironmentsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdEnvironmentsGetValidateBeforeCall(bucketKey, testId, _callback);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyTestsTestIdEnvironmentsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdEnvironmentsPost
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param newEnvironment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test environment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsPostCall(String bucketKey, String testId, Environment newEnvironment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newEnvironment;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/environments"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsPostValidateBeforeCall(String bucketKey, String testId, Environment newEnvironment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdEnvironmentsPost(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdEnvironmentsPost(Async)");
        }

        // verify the required parameter 'newEnvironment' is set
        if (newEnvironment == null) {
            throw new ApiException("Missing the required parameter 'newEnvironment' when calling bucketsBucketKeyTestsTestIdEnvironmentsPost(Async)");
        }

        return bucketsBucketKeyTestsTestIdEnvironmentsPostCall(bucketKey, testId, newEnvironment, _callback);

    }

    /**
     * Create new test environment.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param newEnvironment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test environment. </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdEnvironmentsPost(String bucketKey, String testId, Environment newEnvironment) throws ApiException {
        bucketsBucketKeyTestsTestIdEnvironmentsPostWithHttpInfo(bucketKey, testId, newEnvironment);
    }

    /**
     * Create new test environment.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param newEnvironment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test environment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdEnvironmentsPostWithHttpInfo(String bucketKey, String testId, Environment newEnvironment) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdEnvironmentsPostValidateBeforeCall(bucketKey, testId, newEnvironment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new test environment. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param newEnvironment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Details of the new test environment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdEnvironmentsPostAsync(String bucketKey, String testId, Environment newEnvironment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdEnvironmentsPostValidateBeforeCall(bucketKey, testId, newEnvironment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
