/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BucketsBucketKeyMessagesPost200Response;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.NewMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bucketsBucketKeyErrorsGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyErrorsGetCall(String bucketKey, Integer count, Integer since, Integer before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/errors"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyErrorsGetValidateBeforeCall(String bucketKey, Integer count, Integer since, Integer before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyErrorsGet(Async)");
        }

        return bucketsBucketKeyErrorsGetCall(bucketKey, count, since, before, _callback);

    }

    /**
     * Retrieve a list of error messages in a bucket
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyErrorsGet(String bucketKey, Integer count, Integer since, Integer before) throws ApiException {
        bucketsBucketKeyErrorsGetWithHttpInfo(bucketKey, count, since, before);
    }

    /**
     * Retrieve a list of error messages in a bucket
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyErrorsGetWithHttpInfo(String bucketKey, Integer count, Integer since, Integer before) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyErrorsGetValidateBeforeCall(bucketKey, count, since, before, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a list of error messages in a bucket (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyErrorsGetAsync(String bucketKey, Integer count, Integer since, Integer before, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyErrorsGetValidateBeforeCall(bucketKey, count, since, before, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyMessagesDelete
     * @param bucketKey Unique identifier for a bucket (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesDeleteCall(String bucketKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/messages"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyMessagesDeleteValidateBeforeCall(String bucketKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesDelete(Async)");
        }

        return bucketsBucketKeyMessagesDeleteCall(bucketKey, _callback);

    }

    /**
     * Clear a bucket (remove all messages).
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyMessagesDelete(String bucketKey) throws ApiException {
        bucketsBucketKeyMessagesDeleteWithHttpInfo(bucketKey);
    }

    /**
     * Clear a bucket (remove all messages).
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyMessagesDeleteWithHttpInfo(String bucketKey) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyMessagesDeleteValidateBeforeCall(bucketKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Clear a bucket (remove all messages). (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesDeleteAsync(String bucketKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyMessagesDeleteValidateBeforeCall(bucketKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyMessagesGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesGetCall(String bucketKey, Integer count, Integer since, Integer before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/messages"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyMessagesGetValidateBeforeCall(String bucketKey, Integer count, Integer since, Integer before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesGet(Async)");
        }

        return bucketsBucketKeyMessagesGetCall(bucketKey, count, since, before, _callback);

    }

    /**
     * Retrieve a list of messages in a bucket
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyMessagesGet(String bucketKey, Integer count, Integer since, Integer before) throws ApiException {
        bucketsBucketKeyMessagesGetWithHttpInfo(bucketKey, count, since, before);
    }

    /**
     * Retrieve a list of messages in a bucket
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyMessagesGetWithHttpInfo(String bucketKey, Integer count, Integer since, Integer before) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyMessagesGetValidateBeforeCall(bucketKey, count, since, before, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a list of messages in a bucket (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param count Maxiumum number of messages to return. Default 50, max 1000. (optional)
     * @param since Only return messages after the given Unix timestamp (optional)
     * @param before Only return messages before the given Unix timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesGetAsync(String bucketKey, Integer count, Integer since, Integer before, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyMessagesGetValidateBeforeCall(bucketKey, count, since, before, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyMessagesMessageIdGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param messageId The unique identifier for this message (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesMessageIdGetCall(String bucketKey, String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/messages/{messageId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyMessagesMessageIdGetValidateBeforeCall(String bucketKey, String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesMessageIdGet(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling bucketsBucketKeyMessagesMessageIdGet(Async)");
        }

        return bucketsBucketKeyMessagesMessageIdGetCall(bucketKey, messageId, _callback);

    }

    /**
     * Retrieve the details for a single message.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param messageId The unique identifier for this message (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyMessagesMessageIdGet(String bucketKey, String messageId) throws ApiException {
        bucketsBucketKeyMessagesMessageIdGetWithHttpInfo(bucketKey, messageId);
    }

    /**
     * Retrieve the details for a single message.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param messageId The unique identifier for this message (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyMessagesMessageIdGetWithHttpInfo(String bucketKey, String messageId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyMessagesMessageIdGetValidateBeforeCall(bucketKey, messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve the details for a single message. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param messageId The unique identifier for this message (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of messages in a bucket </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesMessageIdGetAsync(String bucketKey, String messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyMessagesMessageIdGetValidateBeforeCall(bucketKey, messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyMessagesPost
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newMessage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a list of result objects for the message(s) submitted. It will always return an array, even if only one message was created. The order of the result objects corresponds to the order of messages submitted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesPostCall(String bucketKey, NewMessage newMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newMessage;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/messages"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyMessagesPostValidateBeforeCall(String bucketKey, NewMessage newMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyMessagesPost(Async)");
        }

        // verify the required parameter 'newMessage' is set
        if (newMessage == null) {
            throw new ApiException("Missing the required parameter 'newMessage' when calling bucketsBucketKeyMessagesPost(Async)");
        }

        return bucketsBucketKeyMessagesPostCall(bucketKey, newMessage, _callback);

    }

    /**
     * Create a message
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newMessage  (required)
     * @return BucketsBucketKeyMessagesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a list of result objects for the message(s) submitted. It will always return an array, even if only one message was created. The order of the result objects corresponds to the order of messages submitted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BucketsBucketKeyMessagesPost200Response bucketsBucketKeyMessagesPost(String bucketKey, NewMessage newMessage) throws ApiException {
        ApiResponse<BucketsBucketKeyMessagesPost200Response> localVarResp = bucketsBucketKeyMessagesPostWithHttpInfo(bucketKey, newMessage);
        return localVarResp.getData();
    }

    /**
     * Create a message
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newMessage  (required)
     * @return ApiResponse&lt;BucketsBucketKeyMessagesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a list of result objects for the message(s) submitted. It will always return an array, even if only one message was created. The order of the result objects corresponds to the order of messages submitted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BucketsBucketKeyMessagesPost200Response> bucketsBucketKeyMessagesPostWithHttpInfo(String bucketKey, NewMessage newMessage) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyMessagesPostValidateBeforeCall(bucketKey, newMessage, null);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyMessagesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a message (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newMessage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a list of result objects for the message(s) submitted. It will always return an array, even if only one message was created. The order of the result objects corresponds to the order of messages submitted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyMessagesPostAsync(String bucketKey, NewMessage newMessage, final ApiCallback<BucketsBucketKeyMessagesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyMessagesPostValidateBeforeCall(bucketKey, newMessage, _callback);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyMessagesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
