/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewMessageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:55.705127-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewMessageRequest {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_ENCODING = "body_encoding";
  @SerializedName(SERIALIZED_NAME_BODY_ENCODING)
  private String bodyEncoding;

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private String form;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private String headers;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Float timestamp;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public NewMessageRequest() {
  }

  public NewMessageRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * HTTP request body (most commonly used for POST and PUT requests). If the request body contains binary data that cannot be included directly in the  JSON, encode the content with Base64 and include the body_encoding attribute accordingly. 
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public NewMessageRequest bodyEncoding(String bodyEncoding) {
    this.bodyEncoding = bodyEncoding;
    return this;
  }

  /**
   * If the request body was encoded with Base64, this field should be present and set to  \&quot;base64\&quot;. If not specified, defaults to \&quot;plaintext\&quot; 
   * @return bodyEncoding
   */
  @javax.annotation.Nullable
  public String getBodyEncoding() {
    return bodyEncoding;
  }

  public void setBodyEncoding(String bodyEncoding) {
    this.bodyEncoding = bodyEncoding;
  }


  public NewMessageRequest form(String form) {
    this.form = form;
    return this;
  }

  /**
   * JSON object of set of form fields included in a POST request.  Values can either be represented as a string or as an array of strings. 
   * @return form
   */
  @javax.annotation.Nullable
  public String getForm() {
    return form;
  }

  public void setForm(String form) {
    this.form = form;
  }


  public NewMessageRequest headers(String headers) {
    this.headers = headers;
    return this;
  }

  /**
   * JSON object of header keys and values -- with values as a string or an array of strings.
   * @return headers
   */
  @javax.annotation.Nullable
  public String getHeaders() {
    return headers;
  }

  public void setHeaders(String headers) {
    this.headers = headers;
  }


  public NewMessageRequest method(String method) {
    this.method = method;
    return this;
  }

  /**
   * HTTP method name (GET, POST, PUT, HEAD, OPTIONS, PATCH, DELETE, etc.)
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public NewMessageRequest timestamp(Float timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Unix timestamp indicating when the request was made.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Float getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Float timestamp) {
    this.timestamp = timestamp;
  }


  public NewMessageRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Full URL of the request, including URL querystring parameters.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewMessageRequest newMessageRequest = (NewMessageRequest) o;
    return Objects.equals(this.body, newMessageRequest.body) &&
        Objects.equals(this.bodyEncoding, newMessageRequest.bodyEncoding) &&
        Objects.equals(this.form, newMessageRequest.form) &&
        Objects.equals(this.headers, newMessageRequest.headers) &&
        Objects.equals(this.method, newMessageRequest.method) &&
        Objects.equals(this.timestamp, newMessageRequest.timestamp) &&
        Objects.equals(this.url, newMessageRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyEncoding, form, headers, method, timestamp, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewMessageRequest {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyEncoding: ").append(toIndentedString(bodyEncoding)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("body_encoding");
    openapiFields.add("form");
    openapiFields.add("headers");
    openapiFields.add("method");
    openapiFields.add("timestamp");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewMessageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewMessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewMessageRequest is not found in the empty JSON string", NewMessageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewMessageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewMessageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_encoding") != null && !jsonObj.get("body_encoding").isJsonNull()) && !jsonObj.get("body_encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_encoding").toString()));
      }
      if ((jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) && !jsonObj.get("form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form").toString()));
      }
      if ((jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) && !jsonObj.get("headers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headers").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewMessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewMessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewMessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewMessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NewMessageRequest>() {
           @Override
           public void write(JsonWriter out, NewMessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewMessageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewMessageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewMessageRequest
   * @throws IOException if the JSON string is invalid with respect to NewMessageRequest
   */
  public static NewMessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewMessageRequest.class);
  }

  /**
   * Convert an instance of NewMessageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

