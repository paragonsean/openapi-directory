/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Team;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bucket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:55.705127-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bucket {
  public static final String SERIALIZED_NAME_AUTH_TOKEN = "auth_token";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_COLLECTIONS_URL = "collections_url";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS_URL)
  private String collectionsUrl;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MESSAGES_URL = "messages_url";
  @SerializedName(SERIALIZED_NAME_MESSAGES_URL)
  private String messagesUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private Team team;

  public static final String SERIALIZED_NAME_TESTS_URL = "tests_url";
  @SerializedName(SERIALIZED_NAME_TESTS_URL)
  private String testsUrl;

  public static final String SERIALIZED_NAME_TRIGGER_URL = "trigger_url";
  @SerializedName(SERIALIZED_NAME_TRIGGER_URL)
  private String triggerUrl;

  public static final String SERIALIZED_NAME_VERIFY_SSL = "verify_ssl";
  @SerializedName(SERIALIZED_NAME_VERIFY_SSL)
  private Boolean verifySsl;

  public Bucket() {
  }

  public Bucket authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Bucket auth token if set, otherwise this value is null.
   * @return authToken
   */
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public Bucket collectionsUrl(String collectionsUrl) {
    this.collectionsUrl = collectionsUrl;
    return this;
  }

  /**
   * Get collectionsUrl
   * @return collectionsUrl
   */
  @javax.annotation.Nullable
  public String getCollectionsUrl() {
    return collectionsUrl;
  }

  public void setCollectionsUrl(String collectionsUrl) {
    this.collectionsUrl = collectionsUrl;
  }


  public Bucket _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * True if this bucket is the &#39;default&#39; for a team. Default buckets cannot be deleted.
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public Bucket key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The unique identifier used to address a bucket.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Bucket messagesUrl(String messagesUrl) {
    this.messagesUrl = messagesUrl;
    return this;
  }

  /**
   * Get messagesUrl
   * @return messagesUrl
   */
  @javax.annotation.Nullable
  public String getMessagesUrl() {
    return messagesUrl;
  }

  public void setMessagesUrl(String messagesUrl) {
    this.messagesUrl = messagesUrl;
  }


  public Bucket name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this bucket as displayed in your dashboard.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Bucket team(Team team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public Team getTeam() {
    return team;
  }

  public void setTeam(Team team) {
    this.team = team;
  }


  public Bucket testsUrl(String testsUrl) {
    this.testsUrl = testsUrl;
    return this;
  }

  /**
   * Get testsUrl
   * @return testsUrl
   */
  @javax.annotation.Nullable
  public String getTestsUrl() {
    return testsUrl;
  }

  public void setTestsUrl(String testsUrl) {
    this.testsUrl = testsUrl;
  }


  public Bucket triggerUrl(String triggerUrl) {
    this.triggerUrl = triggerUrl;
    return this;
  }

  /**
   * Get triggerUrl
   * @return triggerUrl
   */
  @javax.annotation.Nullable
  public String getTriggerUrl() {
    return triggerUrl;
  }

  public void setTriggerUrl(String triggerUrl) {
    this.triggerUrl = triggerUrl;
  }


  public Bucket verifySsl(Boolean verifySsl) {
    this.verifySsl = verifySsl;
    return this;
  }

  /**
   * True if this bucket is configured to verify ssl for requests made to it.
   * @return verifySsl
   */
  @javax.annotation.Nullable
  public Boolean getVerifySsl() {
    return verifySsl;
  }

  public void setVerifySsl(Boolean verifySsl) {
    this.verifySsl = verifySsl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bucket bucket = (Bucket) o;
    return Objects.equals(this.authToken, bucket.authToken) &&
        Objects.equals(this.collectionsUrl, bucket.collectionsUrl) &&
        Objects.equals(this._default, bucket._default) &&
        Objects.equals(this.key, bucket.key) &&
        Objects.equals(this.messagesUrl, bucket.messagesUrl) &&
        Objects.equals(this.name, bucket.name) &&
        Objects.equals(this.team, bucket.team) &&
        Objects.equals(this.testsUrl, bucket.testsUrl) &&
        Objects.equals(this.triggerUrl, bucket.triggerUrl) &&
        Objects.equals(this.verifySsl, bucket.verifySsl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authToken, collectionsUrl, _default, key, messagesUrl, name, team, testsUrl, triggerUrl, verifySsl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bucket {\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    collectionsUrl: ").append(toIndentedString(collectionsUrl)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    messagesUrl: ").append(toIndentedString(messagesUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    testsUrl: ").append(toIndentedString(testsUrl)).append("\n");
    sb.append("    triggerUrl: ").append(toIndentedString(triggerUrl)).append("\n");
    sb.append("    verifySsl: ").append(toIndentedString(verifySsl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_token");
    openapiFields.add("collections_url");
    openapiFields.add("default");
    openapiFields.add("key");
    openapiFields.add("messages_url");
    openapiFields.add("name");
    openapiFields.add("team");
    openapiFields.add("tests_url");
    openapiFields.add("trigger_url");
    openapiFields.add("verify_ssl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bucket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bucket is not found in the empty JSON string", Bucket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bucket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bucket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_token") != null && !jsonObj.get("auth_token").isJsonNull()) && !jsonObj.get("auth_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_token").toString()));
      }
      if ((jsonObj.get("collections_url") != null && !jsonObj.get("collections_url").isJsonNull()) && !jsonObj.get("collections_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collections_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collections_url").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("messages_url") != null && !jsonObj.get("messages_url").isJsonNull()) && !jsonObj.get("messages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messages_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        Team.validateJsonElement(jsonObj.get("team"));
      }
      if ((jsonObj.get("tests_url") != null && !jsonObj.get("tests_url").isJsonNull()) && !jsonObj.get("tests_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tests_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tests_url").toString()));
      }
      if ((jsonObj.get("trigger_url") != null && !jsonObj.get("trigger_url").isJsonNull()) && !jsonObj.get("trigger_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bucket.class));

       return (TypeAdapter<T>) new TypeAdapter<Bucket>() {
           @Override
           public void write(JsonWriter out, Bucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bucket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bucket
   * @throws IOException if the JSON string is invalid with respect to Bucket
   */
  public static Bucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bucket.class);
  }

  /**
   * Convert an instance of Bucket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

