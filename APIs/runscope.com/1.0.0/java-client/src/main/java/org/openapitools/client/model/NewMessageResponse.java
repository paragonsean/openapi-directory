/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewMessageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:55.705127-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewMessageResponse {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_ENCODING = "body_encoding";
  @SerializedName(SERIALIZED_NAME_BODY_ENCODING)
  private String bodyEncoding;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private String headers;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RESPONSE_TIME = "response_time";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME)
  private Float responseTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Float timestamp;

  public NewMessageResponse() {
  }

  public NewMessageResponse body(String body) {
    this.body = body;
    return this;
  }

  /**
   * HTTP response body. If the response body contains binary data that cannot be included directly in the JSON, you should encode the content with Base64. 
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public NewMessageResponse bodyEncoding(String bodyEncoding) {
    this.bodyEncoding = bodyEncoding;
    return this;
  }

  /**
   * If the request body was encoded with Base64, this field should be present and set to  \&quot;base64\&quot;. If not specified, defaults to \&quot;plaintext\&quot; 
   * @return bodyEncoding
   */
  @javax.annotation.Nullable
  public String getBodyEncoding() {
    return bodyEncoding;
  }

  public void setBodyEncoding(String bodyEncoding) {
    this.bodyEncoding = bodyEncoding;
  }


  public NewMessageResponse headers(String headers) {
    this.headers = headers;
    return this;
  }

  /**
   * JSON object of header keys and values -- with values as a string or an array of strings.
   * @return headers
   */
  @javax.annotation.Nullable
  public String getHeaders() {
    return headers;
  }

  public void setHeaders(String headers) {
    this.headers = headers;
  }


  public NewMessageResponse reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Textual description of HTTP status code. This will be set automatically if not  provided in the API call. For example, if the status code is 404, this will be  set to \&quot;Not Found\&quot; unless you explicitly specify a different reason. 
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public NewMessageResponse responseTime(Float responseTime) {
    this.responseTime = responseTime;
    return this;
  }

  /**
   * Length of time it took to receive the response, in seconds.
   * @return responseTime
   */
  @javax.annotation.Nullable
  public Float getResponseTime() {
    return responseTime;
  }

  public void setResponseTime(Float responseTime) {
    this.responseTime = responseTime;
  }


  public NewMessageResponse status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * HTTP status code returned in the response.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public NewMessageResponse timestamp(Float timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Unix timestamp indicating when the request was made.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Float getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Float timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewMessageResponse newMessageResponse = (NewMessageResponse) o;
    return Objects.equals(this.body, newMessageResponse.body) &&
        Objects.equals(this.bodyEncoding, newMessageResponse.bodyEncoding) &&
        Objects.equals(this.headers, newMessageResponse.headers) &&
        Objects.equals(this.reason, newMessageResponse.reason) &&
        Objects.equals(this.responseTime, newMessageResponse.responseTime) &&
        Objects.equals(this.status, newMessageResponse.status) &&
        Objects.equals(this.timestamp, newMessageResponse.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyEncoding, headers, reason, responseTime, status, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewMessageResponse {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyEncoding: ").append(toIndentedString(bodyEncoding)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    responseTime: ").append(toIndentedString(responseTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("body_encoding");
    openapiFields.add("headers");
    openapiFields.add("reason");
    openapiFields.add("response_time");
    openapiFields.add("status");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewMessageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewMessageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewMessageResponse is not found in the empty JSON string", NewMessageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewMessageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewMessageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_encoding") != null && !jsonObj.get("body_encoding").isJsonNull()) && !jsonObj.get("body_encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_encoding").toString()));
      }
      if ((jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) && !jsonObj.get("headers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headers").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewMessageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewMessageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewMessageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewMessageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NewMessageResponse>() {
           @Override
           public void write(JsonWriter out, NewMessageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewMessageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewMessageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewMessageResponse
   * @throws IOException if the JSON string is invalid with respect to NewMessageResponse
   */
  public static NewMessageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewMessageResponse.class);
  }

  /**
   * Convert an instance of NewMessageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

