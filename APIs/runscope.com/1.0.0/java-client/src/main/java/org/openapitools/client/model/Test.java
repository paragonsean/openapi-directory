/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TestCreatedBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Test
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:55.705127-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Test {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private TestCreatedBy createdBy;

  public static final String SERIALIZED_NAME_DEFAULT_ENVIRONMENT_ID = "default_environment_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENVIRONMENT_ID)
  private String defaultEnvironmentId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_RUN = "last_run";
  @SerializedName(SERIALIZED_NAME_LAST_RUN)
  private Object lastRun;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRIGGER_URL = "trigger_url";
  @SerializedName(SERIALIZED_NAME_TRIGGER_URL)
  private String triggerUrl;

  public Test() {
  }

  public Test createdAt(Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date the test was created in seconds (Unix time stamp format).
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public Test createdBy(TestCreatedBy createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public TestCreatedBy getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(TestCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public Test defaultEnvironmentId(String defaultEnvironmentId) {
    this.defaultEnvironmentId = defaultEnvironmentId;
    return this;
  }

  /**
   * Get defaultEnvironmentId
   * @return defaultEnvironmentId
   */
  @javax.annotation.Nullable
  public String getDefaultEnvironmentId() {
    return defaultEnvironmentId;
  }

  public void setDefaultEnvironmentId(String defaultEnvironmentId) {
    this.defaultEnvironmentId = defaultEnvironmentId;
  }


  public Test description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description for the test.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Test id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Test lastRun(Object lastRun) {
    this.lastRun = lastRun;
    return this;
  }

  /**
   * Get lastRun
   * @return lastRun
   */
  @javax.annotation.Nullable
  public Object getLastRun() {
    return lastRun;
  }

  public void setLastRun(Object lastRun) {
    this.lastRun = lastRun;
  }


  public Test name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the test.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Test triggerUrl(String triggerUrl) {
    this.triggerUrl = triggerUrl;
    return this;
  }

  /**
   * Get triggerUrl
   * @return triggerUrl
   */
  @javax.annotation.Nullable
  public String getTriggerUrl() {
    return triggerUrl;
  }

  public void setTriggerUrl(String triggerUrl) {
    this.triggerUrl = triggerUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Test test = (Test) o;
    return Objects.equals(this.createdAt, test.createdAt) &&
        Objects.equals(this.createdBy, test.createdBy) &&
        Objects.equals(this.defaultEnvironmentId, test.defaultEnvironmentId) &&
        Objects.equals(this.description, test.description) &&
        Objects.equals(this.id, test.id) &&
        Objects.equals(this.lastRun, test.lastRun) &&
        Objects.equals(this.name, test.name) &&
        Objects.equals(this.triggerUrl, test.triggerUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, createdBy, defaultEnvironmentId, description, id, lastRun, name, triggerUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Test {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    defaultEnvironmentId: ").append(toIndentedString(defaultEnvironmentId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastRun: ").append(toIndentedString(lastRun)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    triggerUrl: ").append(toIndentedString(triggerUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("default_environment_id");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("last_run");
    openapiFields.add("name");
    openapiFields.add("trigger_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Test
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Test.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Test is not found in the empty JSON string", Test.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Test.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Test` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Test.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        TestCreatedBy.validateJsonElement(jsonObj.get("created_by"));
      }
      if ((jsonObj.get("default_environment_id") != null && !jsonObj.get("default_environment_id").isJsonNull()) && !jsonObj.get("default_environment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_environment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_environment_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("trigger_url") != null && !jsonObj.get("trigger_url").isJsonNull()) && !jsonObj.get("trigger_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Test.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Test' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Test> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Test.class));

       return (TypeAdapter<T>) new TypeAdapter<Test>() {
           @Override
           public void write(JsonWriter out, Test value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Test read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Test given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Test
   * @throws IOException if the JSON string is invalid with respect to Test
   */
  public static Test fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Test.class);
  }

  /**
   * Convert an instance of Test to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

