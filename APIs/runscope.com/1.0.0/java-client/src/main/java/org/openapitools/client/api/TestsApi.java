/*
 * Runscope API
 * Manage Runscope programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BucketsBucketKeyTestsGet200Response;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Metrics;
import org.openapitools.client.model.Test;
import org.openapitools.client.model.TestDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bucketsBucketKeyTestsGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsGetCall(String bucketKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsGetValidateBeforeCall(String bucketKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsGet(Async)");
        }

        return bucketsBucketKeyTestsGetCall(bucketKey, _callback);

    }

    /**
     * Returns a list of tests.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @return BucketsBucketKeyTestsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public BucketsBucketKeyTestsGet200Response bucketsBucketKeyTestsGet(String bucketKey) throws ApiException {
        ApiResponse<BucketsBucketKeyTestsGet200Response> localVarResp = bucketsBucketKeyTestsGetWithHttpInfo(bucketKey);
        return localVarResp.getData();
    }

    /**
     * Returns a list of tests.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @return ApiResponse&lt;BucketsBucketKeyTestsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BucketsBucketKeyTestsGet200Response> bucketsBucketKeyTestsGetWithHttpInfo(String bucketKey) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsGetValidateBeforeCall(bucketKey, null);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyTestsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of tests. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsGetAsync(String bucketKey, final ApiCallback<BucketsBucketKeyTestsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsGetValidateBeforeCall(bucketKey, _callback);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyTestsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsPost
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newTest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsPostCall(String bucketKey, Test newTest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newTest;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsPostValidateBeforeCall(String bucketKey, Test newTest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsPost(Async)");
        }

        // verify the required parameter 'newTest' is set
        if (newTest == null) {
            throw new ApiException("Missing the required parameter 'newTest' when calling bucketsBucketKeyTestsPost(Async)");
        }

        return bucketsBucketKeyTestsPostCall(bucketKey, newTest, _callback);

    }

    /**
     * Create a test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newTest  (required)
     * @return BucketsBucketKeyTestsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public BucketsBucketKeyTestsGet200Response bucketsBucketKeyTestsPost(String bucketKey, Test newTest) throws ApiException {
        ApiResponse<BucketsBucketKeyTestsGet200Response> localVarResp = bucketsBucketKeyTestsPostWithHttpInfo(bucketKey, newTest);
        return localVarResp.getData();
    }

    /**
     * Create a test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newTest  (required)
     * @return ApiResponse&lt;BucketsBucketKeyTestsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BucketsBucketKeyTestsGet200Response> bucketsBucketKeyTestsPostWithHttpInfo(String bucketKey, Test newTest) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsPostValidateBeforeCall(bucketKey, newTest, null);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyTestsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a test. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param newTest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tests for this bucket </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsPostAsync(String bucketKey, Test newTest, final ApiCallback<BucketsBucketKeyTestsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsPostValidateBeforeCall(bucketKey, newTest, _callback);
        Type localVarReturnType = new TypeToken<BucketsBucketKeyTestsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdDelete
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdDeleteCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdDeleteValidateBeforeCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdDelete(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdDelete(Async)");
        }

        return bucketsBucketKeyTestsTestIdDeleteCall(bucketKey, testId, _callback);

    }

    /**
     * Delete a test, including all steps, schedules, test-specific environments and results.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public void bucketsBucketKeyTestsTestIdDelete(String bucketKey, String testId) throws ApiException {
        bucketsBucketKeyTestsTestIdDeleteWithHttpInfo(bucketKey, testId);
    }

    /**
     * Delete a test, including all steps, schedules, test-specific environments and results.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bucketsBucketKeyTestsTestIdDeleteWithHttpInfo(String bucketKey, String testId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdDeleteValidateBeforeCall(bucketKey, testId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a test, including all steps, schedules, test-specific environments and results. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content with no body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdDeleteAsync(String bucketKey, String testId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdDeleteValidateBeforeCall(bucketKey, testId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with the details of the given test. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdGetCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdGetValidateBeforeCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdGet(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdGet(Async)");
        }

        return bucketsBucketKeyTestsTestIdGetCall(bucketKey, testId, _callback);

    }

    /**
     * Retrieve the details of a given test by ID.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return TestDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with the details of the given test. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TestDetail bucketsBucketKeyTestsTestIdGet(String bucketKey, String testId) throws ApiException {
        ApiResponse<TestDetail> localVarResp = bucketsBucketKeyTestsTestIdGetWithHttpInfo(bucketKey, testId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the details of a given test by ID.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return ApiResponse&lt;TestDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with the details of the given test. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestDetail> bucketsBucketKeyTestsTestIdGetWithHttpInfo(String bucketKey, String testId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdGetValidateBeforeCall(bucketKey, testId, null);
        Type localVarReturnType = new TypeToken<TestDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the details of a given test by ID. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with the details of the given test. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdGetAsync(String bucketKey, String testId, final ApiCallback<TestDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdGetValidateBeforeCall(bucketKey, testId, _callback);
        Type localVarReturnType = new TypeToken<TestDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdMetricsGet
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of average response times and additional performance metrics belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdMetricsGetCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}/metrics"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdMetricsGetValidateBeforeCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdMetricsGet(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdMetricsGet(Async)");
        }

        return bucketsBucketKeyTestsTestIdMetricsGetCall(bucketKey, testId, _callback);

    }

    /**
     * Return details of the test metrics for the specified timeframe.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return Metrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of average response times and additional performance metrics belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public Metrics bucketsBucketKeyTestsTestIdMetricsGet(String bucketKey, String testId) throws ApiException {
        ApiResponse<Metrics> localVarResp = bucketsBucketKeyTestsTestIdMetricsGetWithHttpInfo(bucketKey, testId);
        return localVarResp.getData();
    }

    /**
     * Return details of the test metrics for the specified timeframe.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return ApiResponse&lt;Metrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of average response times and additional performance metrics belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metrics> bucketsBucketKeyTestsTestIdMetricsGetWithHttpInfo(String bucketKey, String testId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdMetricsGetValidateBeforeCall(bucketKey, testId, null);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return details of the test metrics for the specified timeframe. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of average response times and additional performance metrics belonging to this test. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdMetricsGetAsync(String bucketKey, String testId, final ApiCallback<Metrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdMetricsGetValidateBeforeCall(bucketKey, testId, _callback);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bucketsBucketKeyTestsTestIdPut
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns 201 and the updated test&#39;s JSON description if the test is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdPutCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{bucketKey}/tests/{testId}"
            .replace("{" + "bucketKey" + "}", localVarApiClient.escapeString(bucketKey.toString()))
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "runscope_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bucketsBucketKeyTestsTestIdPutValidateBeforeCall(String bucketKey, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketKey' is set
        if (bucketKey == null) {
            throw new ApiException("Missing the required parameter 'bucketKey' when calling bucketsBucketKeyTestsTestIdPut(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling bucketsBucketKeyTestsTestIdPut(Async)");
        }

        return bucketsBucketKeyTestsTestIdPutCall(bucketKey, testId, _callback);

    }

    /**
     * Modify a test&#39;s name, description, default environment and its steps. To modify other individual properties of a test, make requests to the steps, environments, and schedules subresources of the test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return TestDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns 201 and the updated test&#39;s JSON description if the test is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TestDetail bucketsBucketKeyTestsTestIdPut(String bucketKey, String testId) throws ApiException {
        ApiResponse<TestDetail> localVarResp = bucketsBucketKeyTestsTestIdPutWithHttpInfo(bucketKey, testId);
        return localVarResp.getData();
    }

    /**
     * Modify a test&#39;s name, description, default environment and its steps. To modify other individual properties of a test, make requests to the steps, environments, and schedules subresources of the test.
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @return ApiResponse&lt;TestDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns 201 and the updated test&#39;s JSON description if the test is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestDetail> bucketsBucketKeyTestsTestIdPutWithHttpInfo(String bucketKey, String testId) throws ApiException {
        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdPutValidateBeforeCall(bucketKey, testId, null);
        Type localVarReturnType = new TypeToken<TestDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify a test&#39;s name, description, default environment and its steps. To modify other individual properties of a test, make requests to the steps, environments, and schedules subresources of the test. (asynchronously)
     * 
     * @param bucketKey Unique identifier for a bucket (required)
     * @param testId Unique identifier for a test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns 201 and the updated test&#39;s JSON description if the test is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bucketsBucketKeyTestsTestIdPutAsync(String bucketKey, String testId, final ApiCallback<TestDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = bucketsBucketKeyTestsTestIdPutValidateBeforeCall(bucketKey, testId, _callback);
        Type localVarReturnType = new TypeToken<TestDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
