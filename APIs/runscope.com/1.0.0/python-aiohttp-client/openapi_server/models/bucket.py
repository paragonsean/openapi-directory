# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.team import Team
from openapi_server import util


class Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_token: str=None, collections_url: str=None, default: bool=None, key: str=None, messages_url: str=None, name: str=None, team: Team=None, tests_url: str=None, trigger_url: str=None, verify_ssl: bool=None):
        """Bucket - a model defined in OpenAPI

        :param auth_token: The auth_token of this Bucket.
        :param collections_url: The collections_url of this Bucket.
        :param default: The default of this Bucket.
        :param key: The key of this Bucket.
        :param messages_url: The messages_url of this Bucket.
        :param name: The name of this Bucket.
        :param team: The team of this Bucket.
        :param tests_url: The tests_url of this Bucket.
        :param trigger_url: The trigger_url of this Bucket.
        :param verify_ssl: The verify_ssl of this Bucket.
        """
        self.openapi_types = {
            'auth_token': str,
            'collections_url': str,
            'default': bool,
            'key': str,
            'messages_url': str,
            'name': str,
            'team': Team,
            'tests_url': str,
            'trigger_url': str,
            'verify_ssl': bool
        }

        self.attribute_map = {
            'auth_token': 'auth_token',
            'collections_url': 'collections_url',
            'default': 'default',
            'key': 'key',
            'messages_url': 'messages_url',
            'name': 'name',
            'team': 'team',
            'tests_url': 'tests_url',
            'trigger_url': 'trigger_url',
            'verify_ssl': 'verify_ssl'
        }

        self._auth_token = auth_token
        self._collections_url = collections_url
        self._default = default
        self._key = key
        self._messages_url = messages_url
        self._name = name
        self._team = team
        self._tests_url = tests_url
        self._trigger_url = trigger_url
        self._verify_ssl = verify_ssl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket of this Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_token(self):
        """Gets the auth_token of this Bucket.

        Bucket auth token if set, otherwise this value is null.

        :return: The auth_token of this Bucket.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this Bucket.

        Bucket auth token if set, otherwise this value is null.

        :param auth_token: The auth_token of this Bucket.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def collections_url(self):
        """Gets the collections_url of this Bucket.


        :return: The collections_url of this Bucket.
        :rtype: str
        """
        return self._collections_url

    @collections_url.setter
    def collections_url(self, collections_url):
        """Sets the collections_url of this Bucket.


        :param collections_url: The collections_url of this Bucket.
        :type collections_url: str
        """

        self._collections_url = collections_url

    @property
    def default(self):
        """Gets the default of this Bucket.

        True if this bucket is the 'default' for a team. Default buckets cannot be deleted.

        :return: The default of this Bucket.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Bucket.

        True if this bucket is the 'default' for a team. Default buckets cannot be deleted.

        :param default: The default of this Bucket.
        :type default: bool
        """

        self._default = default

    @property
    def key(self):
        """Gets the key of this Bucket.

        The unique identifier used to address a bucket.

        :return: The key of this Bucket.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Bucket.

        The unique identifier used to address a bucket.

        :param key: The key of this Bucket.
        :type key: str
        """

        self._key = key

    @property
    def messages_url(self):
        """Gets the messages_url of this Bucket.


        :return: The messages_url of this Bucket.
        :rtype: str
        """
        return self._messages_url

    @messages_url.setter
    def messages_url(self, messages_url):
        """Sets the messages_url of this Bucket.


        :param messages_url: The messages_url of this Bucket.
        :type messages_url: str
        """

        self._messages_url = messages_url

    @property
    def name(self):
        """Gets the name of this Bucket.

        The name of this bucket as displayed in your dashboard.

        :return: The name of this Bucket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bucket.

        The name of this bucket as displayed in your dashboard.

        :param name: The name of this Bucket.
        :type name: str
        """

        self._name = name

    @property
    def team(self):
        """Gets the team of this Bucket.


        :return: The team of this Bucket.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Bucket.


        :param team: The team of this Bucket.
        :type team: Team
        """

        self._team = team

    @property
    def tests_url(self):
        """Gets the tests_url of this Bucket.


        :return: The tests_url of this Bucket.
        :rtype: str
        """
        return self._tests_url

    @tests_url.setter
    def tests_url(self, tests_url):
        """Sets the tests_url of this Bucket.


        :param tests_url: The tests_url of this Bucket.
        :type tests_url: str
        """

        self._tests_url = tests_url

    @property
    def trigger_url(self):
        """Gets the trigger_url of this Bucket.


        :return: The trigger_url of this Bucket.
        :rtype: str
        """
        return self._trigger_url

    @trigger_url.setter
    def trigger_url(self, trigger_url):
        """Sets the trigger_url of this Bucket.


        :param trigger_url: The trigger_url of this Bucket.
        :type trigger_url: str
        """

        self._trigger_url = trigger_url

    @property
    def verify_ssl(self):
        """Gets the verify_ssl of this Bucket.

        True if this bucket is configured to verify ssl for requests made to it.

        :return: The verify_ssl of this Bucket.
        :rtype: bool
        """
        return self._verify_ssl

    @verify_ssl.setter
    def verify_ssl(self, verify_ssl):
        """Sets the verify_ssl of this Bucket.

        True if this bucket is configured to verify ssl for requests made to it.

        :param verify_ssl: The verify_ssl of this Bucket.
        :type verify_ssl: bool
        """

        self._verify_ssl = verify_ssl
