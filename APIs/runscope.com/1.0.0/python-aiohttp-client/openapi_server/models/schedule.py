# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Schedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_id: str=None, exported_at: int=None, id: str=None, interval: str=None, note: str=None, version: str=None):
        """Schedule - a model defined in OpenAPI

        :param environment_id: The environment_id of this Schedule.
        :param exported_at: The exported_at of this Schedule.
        :param id: The id of this Schedule.
        :param interval: The interval of this Schedule.
        :param note: The note of this Schedule.
        :param version: The version of this Schedule.
        """
        self.openapi_types = {
            'environment_id': str,
            'exported_at': int,
            'id': str,
            'interval': str,
            'note': str,
            'version': str
        }

        self.attribute_map = {
            'environment_id': 'environment_id',
            'exported_at': 'exported_at',
            'id': 'id',
            'interval': 'interval',
            'note': 'note',
            'version': 'version'
        }

        self._environment_id = environment_id
        self._exported_at = exported_at
        self._id = id
        self._interval = interval
        self._note = note
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schedule of this Schedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_id(self):
        """Gets the environment_id of this Schedule.


        :return: The environment_id of this Schedule.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this Schedule.


        :param environment_id: The environment_id of this Schedule.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def exported_at(self):
        """Gets the exported_at of this Schedule.


        :return: The exported_at of this Schedule.
        :rtype: int
        """
        return self._exported_at

    @exported_at.setter
    def exported_at(self, exported_at):
        """Sets the exported_at of this Schedule.


        :param exported_at: The exported_at of this Schedule.
        :type exported_at: int
        """

        self._exported_at = exported_at

    @property
    def id(self):
        """Gets the id of this Schedule.


        :return: The id of this Schedule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Schedule.


        :param id: The id of this Schedule.
        :type id: str
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this Schedule.


        :return: The interval of this Schedule.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Schedule.


        :param interval: The interval of this Schedule.
        :type interval: str
        """

        self._interval = interval

    @property
    def note(self):
        """Gets the note of this Schedule.


        :return: The note of this Schedule.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Schedule.


        :param note: The note of this Schedule.
        :type note: str
        """

        self._note = note

    @property
    def version(self):
        """Gets the version of this Schedule.


        :return: The version of this Schedule.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Schedule.


        :param version: The version of this Schedule.
        :type version: str
        """

        self._version = version
