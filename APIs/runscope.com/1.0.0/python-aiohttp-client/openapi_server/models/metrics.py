# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_response_times_inner import MetricsResponseTimesInner
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes_from_last_period: object=None, environment_uuid: str=None, region: str=None, response_times: List[MetricsResponseTimesInner]=None, this_time_period: object=None, timeframe: str=None):
        """Metrics - a model defined in OpenAPI

        :param changes_from_last_period: The changes_from_last_period of this Metrics.
        :param environment_uuid: The environment_uuid of this Metrics.
        :param region: The region of this Metrics.
        :param response_times: The response_times of this Metrics.
        :param this_time_period: The this_time_period of this Metrics.
        :param timeframe: The timeframe of this Metrics.
        """
        self.openapi_types = {
            'changes_from_last_period': object,
            'environment_uuid': str,
            'region': str,
            'response_times': List[MetricsResponseTimesInner],
            'this_time_period': object,
            'timeframe': str
        }

        self.attribute_map = {
            'changes_from_last_period': 'changes_from_last_period',
            'environment_uuid': 'environment_uuid',
            'region': 'region',
            'response_times': 'response_times',
            'this_time_period': 'this_time_period',
            'timeframe': 'timeframe'
        }

        self._changes_from_last_period = changes_from_last_period
        self._environment_uuid = environment_uuid
        self._region = region
        self._response_times = response_times
        self._this_time_period = this_time_period
        self._timeframe = timeframe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes_from_last_period(self):
        """Gets the changes_from_last_period of this Metrics.

        The changes in average response time compared to the last period.

        :return: The changes_from_last_period of this Metrics.
        :rtype: object
        """
        return self._changes_from_last_period

    @changes_from_last_period.setter
    def changes_from_last_period(self, changes_from_last_period):
        """Sets the changes_from_last_period of this Metrics.

        The changes in average response time compared to the last period.

        :param changes_from_last_period: The changes_from_last_period of this Metrics.
        :type changes_from_last_period: object
        """

        self._changes_from_last_period = changes_from_last_period

    @property
    def environment_uuid(self):
        """Gets the environment_uuid of this Metrics.

        The environment_uuid that filters this request.

        :return: The environment_uuid of this Metrics.
        :rtype: str
        """
        return self._environment_uuid

    @environment_uuid.setter
    def environment_uuid(self, environment_uuid):
        """Sets the environment_uuid of this Metrics.

        The environment_uuid that filters this request.

        :param environment_uuid: The environment_uuid of this Metrics.
        :type environment_uuid: str
        """

        self._environment_uuid = environment_uuid

    @property
    def region(self):
        """Gets the region of this Metrics.

        The region that filters this request.

        :return: The region of this Metrics.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Metrics.

        The region that filters this request.

        :param region: The region of this Metrics.
        :type region: str
        """

        self._region = region

    @property
    def response_times(self):
        """Gets the response_times of this Metrics.

        The list of response times based on the timeframe of the request.

        :return: The response_times of this Metrics.
        :rtype: List[MetricsResponseTimesInner]
        """
        return self._response_times

    @response_times.setter
    def response_times(self, response_times):
        """Sets the response_times of this Metrics.

        The list of response times based on the timeframe of the request.

        :param response_times: The response_times of this Metrics.
        :type response_times: List[MetricsResponseTimesInner]
        """

        self._response_times = response_times

    @property
    def this_time_period(self):
        """Gets the this_time_period of this Metrics.

        The average response time for different percentiles for the request in the requested timeframe.

        :return: The this_time_period of this Metrics.
        :rtype: object
        """
        return self._this_time_period

    @this_time_period.setter
    def this_time_period(self, this_time_period):
        """Sets the this_time_period of this Metrics.

        The average response time for different percentiles for the request in the requested timeframe.

        :param this_time_period: The this_time_period of this Metrics.
        :type this_time_period: object
        """

        self._this_time_period = this_time_period

    @property
    def timeframe(self):
        """Gets the timeframe of this Metrics.

        The timeframe that filters this request.

        :return: The timeframe of this Metrics.
        :rtype: str
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this Metrics.

        The timeframe that filters this request.

        :param timeframe: The timeframe of this Metrics.
        :type timeframe: str
        """

        self._timeframe = timeframe
