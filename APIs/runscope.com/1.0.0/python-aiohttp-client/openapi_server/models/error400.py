# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error400(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, message: str=None, more_info: str=None, status: int=None):
        """Error400 - a model defined in OpenAPI

        :param error: The error of this Error400.
        :param message: The message of this Error400.
        :param more_info: The more_info of this Error400.
        :param status: The status of this Error400.
        """
        self.openapi_types = {
            'error': str,
            'message': str,
            'more_info': str,
            'status': int
        }

        self.attribute_map = {
            'error': 'error',
            'message': 'message',
            'more_info': 'more_info',
            'status': 'status'
        }

        self._error = error
        self._message = message
        self._more_info = more_info
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error400':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error400 of this Error400.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this Error400.


        :return: The error of this Error400.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Error400.


        :param error: The error of this Error400.
        :type error: str
        """

        self._error = error

    @property
    def message(self):
        """Gets the message of this Error400.


        :return: The message of this Error400.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error400.


        :param message: The message of this Error400.
        :type message: str
        """

        self._message = message

    @property
    def more_info(self):
        """Gets the more_info of this Error400.


        :return: The more_info of this Error400.
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this Error400.


        :param more_info: The more_info of this Error400.
        :type more_info: str
        """

        self._more_info = more_info

    @property
    def status(self):
        """Gets the status of this Error400.


        :return: The status of this Error400.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error400.


        :param status: The status of this Error400.
        :type status: int
        """

        self._status = status
