# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assertion import Assertion
from openapi_server.models.variable import Variable
from openapi_server import util


class TestStepRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, step_type: str=None, assertions: List[Assertion]=None, auth: object=None, before_scripts: List[str]=None, body: str=None, form: object=None, headers: object=None, method: str=None, note: str=None, scripts: List[str]=None, url: str=None, variables: List[Variable]=None):
        """TestStepRequest - a model defined in OpenAPI

        :param step_type: The step_type of this TestStepRequest.
        :param assertions: The assertions of this TestStepRequest.
        :param auth: The auth of this TestStepRequest.
        :param before_scripts: The before_scripts of this TestStepRequest.
        :param body: The body of this TestStepRequest.
        :param form: The form of this TestStepRequest.
        :param headers: The headers of this TestStepRequest.
        :param method: The method of this TestStepRequest.
        :param note: The note of this TestStepRequest.
        :param scripts: The scripts of this TestStepRequest.
        :param url: The url of this TestStepRequest.
        :param variables: The variables of this TestStepRequest.
        """
        self.openapi_types = {
            'step_type': str,
            'assertions': List[Assertion],
            'auth': object,
            'before_scripts': List[str],
            'body': str,
            'form': object,
            'headers': object,
            'method': str,
            'note': str,
            'scripts': List[str],
            'url': str,
            'variables': List[Variable]
        }

        self.attribute_map = {
            'step_type': 'step_type',
            'assertions': 'assertions',
            'auth': 'auth',
            'before_scripts': 'before_scripts',
            'body': 'body',
            'form': 'form',
            'headers': 'headers',
            'method': 'method',
            'note': 'note',
            'scripts': 'scripts',
            'url': 'url',
            'variables': 'variables'
        }

        self._step_type = step_type
        self._assertions = assertions
        self._auth = auth
        self._before_scripts = before_scripts
        self._body = body
        self._form = form
        self._headers = headers
        self._method = method
        self._note = note
        self._scripts = scripts
        self._url = url
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestStepRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestStepRequest of this TestStepRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def step_type(self):
        """Gets the step_type of this TestStepRequest.

        Type of test step -- request, pause, condition, ghost-inspector, or subtest.

        :return: The step_type of this TestStepRequest.
        :rtype: str
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this TestStepRequest.

        Type of test step -- request, pause, condition, ghost-inspector, or subtest.

        :param step_type: The step_type of this TestStepRequest.
        :type step_type: str
        """

        self._step_type = step_type

    @property
    def assertions(self):
        """Gets the assertions of this TestStepRequest.

        A list of assertions to apply to the HTTP response from this request.

        :return: The assertions of this TestStepRequest.
        :rtype: List[Assertion]
        """
        return self._assertions

    @assertions.setter
    def assertions(self, assertions):
        """Sets the assertions of this TestStepRequest.

        A list of assertions to apply to the HTTP response from this request.

        :param assertions: The assertions of this TestStepRequest.
        :type assertions: List[Assertion]
        """

        self._assertions = assertions

    @property
    def auth(self):
        """Gets the auth of this TestStepRequest.

        An authentication object with either basic, oauth1, or client_certificate credentials for authenticating this request.

        :return: The auth of this TestStepRequest.
        :rtype: object
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this TestStepRequest.

        An authentication object with either basic, oauth1, or client_certificate credentials for authenticating this request.

        :param auth: The auth of this TestStepRequest.
        :type auth: object
        """

        self._auth = auth

    @property
    def before_scripts(self):
        """Gets the before_scripts of this TestStepRequest.

        A list of pre-request scripts to run before this request.

        :return: The before_scripts of this TestStepRequest.
        :rtype: List[str]
        """
        return self._before_scripts

    @before_scripts.setter
    def before_scripts(self, before_scripts):
        """Sets the before_scripts of this TestStepRequest.

        A list of pre-request scripts to run before this request.

        :param before_scripts: The before_scripts of this TestStepRequest.
        :type before_scripts: List[str]
        """

        self._before_scripts = before_scripts

    @property
    def body(self):
        """Gets the body of this TestStepRequest.

        A string to use as the body of the request.

        :return: The body of this TestStepRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TestStepRequest.

        A string to use as the body of the request.

        :param body: The body of this TestStepRequest.
        :type body: str
        """

        self._body = body

    @property
    def form(self):
        """Gets the form of this TestStepRequest.

        An object with keys as form post parameter names matched to their values. Values can either be a single string or an array of strings.

        :return: The form of this TestStepRequest.
        :rtype: object
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this TestStepRequest.

        An object with keys as form post parameter names matched to their values. Values can either be a single string or an array of strings.

        :param form: The form of this TestStepRequest.
        :type form: object
        """

        self._form = form

    @property
    def headers(self):
        """Gets the headers of this TestStepRequest.

        An object with keys as header names matched to their values. Values can either be a single string or an array of strings.

        :return: The headers of this TestStepRequest.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this TestStepRequest.

        An object with keys as header names matched to their values. Values can either be a single string or an array of strings.

        :param headers: The headers of this TestStepRequest.
        :type headers: object
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this TestStepRequest.

        The HTTP method for this request step. E.g. GET, POST, PUT, DELETE, etc.

        :return: The method of this TestStepRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this TestStepRequest.

        The HTTP method for this request step. E.g. GET, POST, PUT, DELETE, etc.

        :param method: The method of this TestStepRequest.
        :type method: str
        """

        self._method = method

    @property
    def note(self):
        """Gets the note of this TestStepRequest.

        A description or note for this request step.

        :return: The note of this TestStepRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TestStepRequest.

        A description or note for this request step.

        :param note: The note of this TestStepRequest.
        :type note: str
        """

        self._note = note

    @property
    def scripts(self):
        """Gets the scripts of this TestStepRequest.

        A list of post-response scripts to run after this request.

        :return: The scripts of this TestStepRequest.
        :rtype: List[str]
        """
        return self._scripts

    @scripts.setter
    def scripts(self, scripts):
        """Sets the scripts of this TestStepRequest.

        A list of post-response scripts to run after this request.

        :param scripts: The scripts of this TestStepRequest.
        :type scripts: List[str]
        """

        self._scripts = scripts

    @property
    def url(self):
        """Gets the url of this TestStepRequest.

        The URL to make a request to for this step. This may contain both query string parameters and variables.

        :return: The url of this TestStepRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TestStepRequest.

        The URL to make a request to for this step. This may contain both query string parameters and variables.

        :param url: The url of this TestStepRequest.
        :type url: str
        """

        self._url = url

    @property
    def variables(self):
        """Gets the variables of this TestStepRequest.

        A list of variables to extract out of the HTTP response from this request.

        :return: The variables of this TestStepRequest.
        :rtype: List[Variable]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this TestStepRequest.

        A list of variables to extract out of the HTTP response from this request.

        :param variables: The variables of this TestStepRequest.
        :type variables: List[Variable]
        """

        self._variables = variables
