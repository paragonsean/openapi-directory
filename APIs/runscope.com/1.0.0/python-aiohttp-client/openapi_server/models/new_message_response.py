# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewMessageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, body_encoding: str=None, headers: str=None, reason: str=None, response_time: float=None, status: int=None, timestamp: float=None):
        """NewMessageResponse - a model defined in OpenAPI

        :param body: The body of this NewMessageResponse.
        :param body_encoding: The body_encoding of this NewMessageResponse.
        :param headers: The headers of this NewMessageResponse.
        :param reason: The reason of this NewMessageResponse.
        :param response_time: The response_time of this NewMessageResponse.
        :param status: The status of this NewMessageResponse.
        :param timestamp: The timestamp of this NewMessageResponse.
        """
        self.openapi_types = {
            'body': str,
            'body_encoding': str,
            'headers': str,
            'reason': str,
            'response_time': float,
            'status': int,
            'timestamp': float
        }

        self.attribute_map = {
            'body': 'body',
            'body_encoding': 'body_encoding',
            'headers': 'headers',
            'reason': 'reason',
            'response_time': 'response_time',
            'status': 'status',
            'timestamp': 'timestamp'
        }

        self._body = body
        self._body_encoding = body_encoding
        self._headers = headers
        self._reason = reason
        self._response_time = response_time
        self._status = status
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewMessageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewMessage_response of this NewMessageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this NewMessageResponse.

        HTTP response body. If the response body contains binary data that cannot be included directly in the JSON, you should encode the content with Base64. 

        :return: The body of this NewMessageResponse.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NewMessageResponse.

        HTTP response body. If the response body contains binary data that cannot be included directly in the JSON, you should encode the content with Base64. 

        :param body: The body of this NewMessageResponse.
        :type body: str
        """

        self._body = body

    @property
    def body_encoding(self):
        """Gets the body_encoding of this NewMessageResponse.

        If the request body was encoded with Base64, this field should be present and set to  \"base64\". If not specified, defaults to \"plaintext\" 

        :return: The body_encoding of this NewMessageResponse.
        :rtype: str
        """
        return self._body_encoding

    @body_encoding.setter
    def body_encoding(self, body_encoding):
        """Sets the body_encoding of this NewMessageResponse.

        If the request body was encoded with Base64, this field should be present and set to  \"base64\". If not specified, defaults to \"plaintext\" 

        :param body_encoding: The body_encoding of this NewMessageResponse.
        :type body_encoding: str
        """

        self._body_encoding = body_encoding

    @property
    def headers(self):
        """Gets the headers of this NewMessageResponse.

        JSON object of header keys and values -- with values as a string or an array of strings.

        :return: The headers of this NewMessageResponse.
        :rtype: str
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this NewMessageResponse.

        JSON object of header keys and values -- with values as a string or an array of strings.

        :param headers: The headers of this NewMessageResponse.
        :type headers: str
        """

        self._headers = headers

    @property
    def reason(self):
        """Gets the reason of this NewMessageResponse.

        Textual description of HTTP status code. This will be set automatically if not  provided in the API call. For example, if the status code is 404, this will be  set to \"Not Found\" unless you explicitly specify a different reason. 

        :return: The reason of this NewMessageResponse.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this NewMessageResponse.

        Textual description of HTTP status code. This will be set automatically if not  provided in the API call. For example, if the status code is 404, this will be  set to \"Not Found\" unless you explicitly specify a different reason. 

        :param reason: The reason of this NewMessageResponse.
        :type reason: str
        """

        self._reason = reason

    @property
    def response_time(self):
        """Gets the response_time of this NewMessageResponse.

        Length of time it took to receive the response, in seconds.

        :return: The response_time of this NewMessageResponse.
        :rtype: float
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this NewMessageResponse.

        Length of time it took to receive the response, in seconds.

        :param response_time: The response_time of this NewMessageResponse.
        :type response_time: float
        """

        self._response_time = response_time

    @property
    def status(self):
        """Gets the status of this NewMessageResponse.

        HTTP status code returned in the response.

        :return: The status of this NewMessageResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NewMessageResponse.

        HTTP status code returned in the response.

        :param status: The status of this NewMessageResponse.
        :type status: int
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this NewMessageResponse.

        Unix timestamp indicating when the request was made.

        :return: The timestamp of this NewMessageResponse.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this NewMessageResponse.

        Unix timestamp indicating when the request was made.

        :param timestamp: The timestamp of this NewMessageResponse.
        :type timestamp: float
        """

        self._timestamp = timestamp
