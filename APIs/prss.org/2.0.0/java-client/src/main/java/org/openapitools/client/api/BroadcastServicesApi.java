/*
 * ContentDepot
 * ContentDepot hosts a range of APIâ€™s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BroadcastService;
import org.openapitools.client.model.Episode;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BroadcastServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BroadcastServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BroadcastServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2BroadcastservicesGet
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of broadcast services, based on broadcast service ID. If unspecified, the broadcast services are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast services. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BroadcastservicesGetCall(Integer pageStart, Integer pageSize, String orderById, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/broadcastservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageStart", pageStart));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderById != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderById", orderById));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BroadcastservicesGetValidateBeforeCall(Integer pageStart, Integer pageSize, String orderById, final ApiCallback _callback) throws ApiException {
        return apiV2BroadcastservicesGetCall(pageStart, pageSize, orderById, _callback);

    }

    /**
     * Gets broadcast services matching the given criteria.
     * 
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of broadcast services, based on broadcast service ID. If unspecified, the broadcast services are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @return List&lt;Episode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast services. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public List<Episode> apiV2BroadcastservicesGet(Integer pageStart, Integer pageSize, String orderById) throws ApiException {
        ApiResponse<List<Episode>> localVarResp = apiV2BroadcastservicesGetWithHttpInfo(pageStart, pageSize, orderById);
        return localVarResp.getData();
    }

    /**
     * Gets broadcast services matching the given criteria.
     * 
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of broadcast services, based on broadcast service ID. If unspecified, the broadcast services are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @return ApiResponse&lt;List&lt;Episode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast services. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Episode>> apiV2BroadcastservicesGetWithHttpInfo(Integer pageStart, Integer pageSize, String orderById) throws ApiException {
        okhttp3.Call localVarCall = apiV2BroadcastservicesGetValidateBeforeCall(pageStart, pageSize, orderById, null);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets broadcast services matching the given criteria. (asynchronously)
     * 
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of broadcast services, based on broadcast service ID. If unspecified, the broadcast services are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast services. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BroadcastservicesGetAsync(Integer pageStart, Integer pageSize, String orderById, final ApiCallback<List<Episode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BroadcastservicesGetValidateBeforeCall(pageStart, pageSize, orderById, _callback);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BroadcastservicesIdGet
     * @param id The ID of the broadcast service to find. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast service. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this broadcast service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The broadcast service cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BroadcastservicesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/broadcastservices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BroadcastservicesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2BroadcastservicesIdGet(Async)");
        }

        return apiV2BroadcastservicesIdGetCall(id, _callback);

    }

    /**
     * Returns the broadcast service matching the given ID.
     * 
     * @param id The ID of the broadcast service to find. (required)
     * @return BroadcastService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast service. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this broadcast service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The broadcast service cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastService apiV2BroadcastservicesIdGet(Long id) throws ApiException {
        ApiResponse<BroadcastService> localVarResp = apiV2BroadcastservicesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns the broadcast service matching the given ID.
     * 
     * @param id The ID of the broadcast service to find. (required)
     * @return ApiResponse&lt;BroadcastService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast service. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this broadcast service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The broadcast service cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastService> apiV2BroadcastservicesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = apiV2BroadcastservicesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BroadcastService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the broadcast service matching the given ID. (asynchronously)
     * 
     * @param id The ID of the broadcast service to find. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching broadcast service. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this broadcast service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The broadcast service cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BroadcastservicesIdGetAsync(Long id, final ApiCallback<BroadcastService> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BroadcastservicesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BroadcastService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
