/*
 * ContentDepot
 * ContentDepot hosts a range of APIâ€™s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2CddriveFoldersFolderIdItemsGet200Response;
import org.openapitools.client.model.CDDriveFile;
import org.openapitools.client.model.CDDriveFolder;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CdDriveApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CdDriveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CdDriveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2CddriveFilesContentPost
     * @param contentMD5 If present, the MD5 will be compared against the file received as a message integrity check. (optional)
     * @param _file The file content being uploaded. (optional)
     * @param name The name of the file, including extension. (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The file was created successfully. The response contains the file metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The provided Content-MD5 header doesn&#39;t match the provided content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, Username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A name conflict because the file already exists. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is bigger than maximum size of 500 MB. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesContentPostCall(String contentMD5, File _file, String name, Long parentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/files/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (parentId != null) {
            localVarFormParams.put("parent-id", parentId);
        }

        if (contentMD5 != null) {
            localVarHeaderParams.put("Content-MD5", localVarApiClient.parameterToString(contentMD5));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFilesContentPostValidateBeforeCall(String contentMD5, File _file, String name, Long parentId, final ApiCallback _callback) throws ApiException {
        return apiV2CddriveFilesContentPostCall(contentMD5, _file, name, parentId, _callback);

    }

    /**
     * Upload a file.
     * Upload a file to the customer&#39;s private CD Drive.
     * @param contentMD5 If present, the MD5 will be compared against the file received as a message integrity check. (optional)
     * @param _file The file content being uploaded. (optional)
     * @param name The name of the file, including extension. (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @return CDDriveFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The file was created successfully. The response contains the file metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The provided Content-MD5 header doesn&#39;t match the provided content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, Username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A name conflict because the file already exists. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is bigger than maximum size of 500 MB. </td><td>  -  </td></tr>
     </table>
     */
    public CDDriveFile apiV2CddriveFilesContentPost(String contentMD5, File _file, String name, Long parentId) throws ApiException {
        ApiResponse<CDDriveFile> localVarResp = apiV2CddriveFilesContentPostWithHttpInfo(contentMD5, _file, name, parentId);
        return localVarResp.getData();
    }

    /**
     * Upload a file.
     * Upload a file to the customer&#39;s private CD Drive.
     * @param contentMD5 If present, the MD5 will be compared against the file received as a message integrity check. (optional)
     * @param _file The file content being uploaded. (optional)
     * @param name The name of the file, including extension. (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @return ApiResponse&lt;CDDriveFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The file was created successfully. The response contains the file metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The provided Content-MD5 header doesn&#39;t match the provided content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, Username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A name conflict because the file already exists. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is bigger than maximum size of 500 MB. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CDDriveFile> apiV2CddriveFilesContentPostWithHttpInfo(String contentMD5, File _file, String name, Long parentId) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFilesContentPostValidateBeforeCall(contentMD5, _file, name, parentId, null);
        Type localVarReturnType = new TypeToken<CDDriveFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a file. (asynchronously)
     * Upload a file to the customer&#39;s private CD Drive.
     * @param contentMD5 If present, the MD5 will be compared against the file received as a message integrity check. (optional)
     * @param _file The file content being uploaded. (optional)
     * @param name The name of the file, including extension. (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The file was created successfully. The response contains the file metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The provided Content-MD5 header doesn&#39;t match the provided content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, Username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A name conflict because the file already exists. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is bigger than maximum size of 500 MB. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesContentPostAsync(String contentMD5, File _file, String name, Long parentId, final ApiCallback<CDDriveFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFilesContentPostValidateBeforeCall(contentMD5, _file, name, parentId, _callback);
        Type localVarReturnType = new TypeToken<CDDriveFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFilesFileIdContentGet
     * @param fileId The ID of the file to download. (required)
     * @param range Can be used to limit the range of bytes retrieved. Only a single byte range in the format &#x60;&#x60;&#x60;bytes&#x3D;{start-range}-{end-range}&#x60;&#x60;&#x60; is supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file was found and will be returned in the body of the response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> The file was found but should be downloaded at the URL presented in the Location header. This return code may be used when the file is available via a CDN or other optimized path. </td><td>  * Location - The location the file can be downloaded from <br>  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesFileIdContentGetCall(Long fileId, String range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/files/{file-id}/content"
            .replace("{" + "file-id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFilesFileIdContentGetValidateBeforeCall(Long fileId, String range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling apiV2CddriveFilesFileIdContentGet(Async)");
        }

        return apiV2CddriveFilesFileIdContentGetCall(fileId, range, _callback);

    }

    /**
     * UNDER DEVELOPMENT - Download a file.
     * Download a file from the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to download. (required)
     * @param range Can be used to limit the range of bytes retrieved. Only a single byte range in the format &#x60;&#x60;&#x60;bytes&#x3D;{start-range}-{end-range}&#x60;&#x60;&#x60; is supported. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file was found and will be returned in the body of the response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> The file was found but should be downloaded at the URL presented in the Location header. This return code may be used when the file is available via a CDN or other optimized path. </td><td>  * Location - The location the file can be downloaded from <br>  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public File apiV2CddriveFilesFileIdContentGet(Long fileId, String range) throws ApiException {
        ApiResponse<File> localVarResp = apiV2CddriveFilesFileIdContentGetWithHttpInfo(fileId, range);
        return localVarResp.getData();
    }

    /**
     * UNDER DEVELOPMENT - Download a file.
     * Download a file from the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to download. (required)
     * @param range Can be used to limit the range of bytes retrieved. Only a single byte range in the format &#x60;&#x60;&#x60;bytes&#x3D;{start-range}-{end-range}&#x60;&#x60;&#x60; is supported. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file was found and will be returned in the body of the response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> The file was found but should be downloaded at the URL presented in the Location header. This return code may be used when the file is available via a CDN or other optimized path. </td><td>  * Location - The location the file can be downloaded from <br>  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> apiV2CddriveFilesFileIdContentGetWithHttpInfo(Long fileId, String range) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFilesFileIdContentGetValidateBeforeCall(fileId, range, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UNDER DEVELOPMENT - Download a file. (asynchronously)
     * Download a file from the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to download. (required)
     * @param range Can be used to limit the range of bytes retrieved. Only a single byte range in the format &#x60;&#x60;&#x60;bytes&#x3D;{start-range}-{end-range}&#x60;&#x60;&#x60; is supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file was found and will be returned in the body of the response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> The file was found but should be downloaded at the URL presented in the Location header. This return code may be used when the file is available via a CDN or other optimized path. </td><td>  * Location - The location the file can be downloaded from <br>  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesFileIdContentGetAsync(Long fileId, String range, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFilesFileIdContentGetValidateBeforeCall(fileId, range, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFilesFileIdDelete
     * @param fileId The ID of the file to access. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesFileIdDeleteCall(Long fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/files/{file-id}"
            .replace("{" + "file-id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFilesFileIdDeleteValidateBeforeCall(Long fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling apiV2CddriveFilesFileIdDelete(Async)");
        }

        return apiV2CddriveFilesFileIdDeleteCall(fileId, _callback);

    }

    /**
     * Delete a file.
     * Delete a file from the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to access. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2CddriveFilesFileIdDelete(Long fileId) throws ApiException {
        apiV2CddriveFilesFileIdDeleteWithHttpInfo(fileId);
    }

    /**
     * Delete a file.
     * Delete a file from the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to access. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2CddriveFilesFileIdDeleteWithHttpInfo(Long fileId) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFilesFileIdDeleteValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a file. (asynchronously)
     * Delete a file from the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to access. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesFileIdDeleteAsync(Long fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFilesFileIdDeleteValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFilesFileIdGet
     * @param fileId The ID of the file to access. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesFileIdGetCall(Long fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/files/{file-id}"
            .replace("{" + "file-id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFilesFileIdGetValidateBeforeCall(Long fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling apiV2CddriveFilesFileIdGet(Async)");
        }

        return apiV2CddriveFilesFileIdGetCall(fileId, _callback);

    }

    /**
     * Get file information.
     * Get the information about a file in the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to access. (required)
     * @return CDDriveFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public CDDriveFile apiV2CddriveFilesFileIdGet(Long fileId) throws ApiException {
        ApiResponse<CDDriveFile> localVarResp = apiV2CddriveFilesFileIdGetWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Get file information.
     * Get the information about a file in the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to access. (required)
     * @return ApiResponse&lt;CDDriveFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CDDriveFile> apiV2CddriveFilesFileIdGetWithHttpInfo(Long fileId) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFilesFileIdGetValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<CDDriveFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file information. (asynchronously)
     * Get the information about a file in the customer&#39;s private CD Drive.
     * @param fileId The ID of the file to access. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFilesFileIdGetAsync(Long fileId, final ApiCallback<CDDriveFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFilesFileIdGetValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<CDDriveFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFoldersFolderIdDelete
     * @param folderId The ID of the folder to get. (required)
     * @param recursive Flag to indicate if the folder should be deleted if it has items inside of it. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersFolderIdDeleteCall(Long folderId, Boolean recursive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/folders/{folder-id}"
            .replace("{" + "folder-id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFoldersFolderIdDeleteValidateBeforeCall(Long folderId, Boolean recursive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling apiV2CddriveFoldersFolderIdDelete(Async)");
        }

        return apiV2CddriveFoldersFolderIdDeleteCall(folderId, recursive, _callback);

    }

    /**
     * UNDER DEVELOPMENT - Delete a folder.
     * Delete a file from the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. (required)
     * @param recursive Flag to indicate if the folder should be deleted if it has items inside of it. (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2CddriveFoldersFolderIdDelete(Long folderId, Boolean recursive) throws ApiException {
        apiV2CddriveFoldersFolderIdDeleteWithHttpInfo(folderId, recursive);
    }

    /**
     * UNDER DEVELOPMENT - Delete a folder.
     * Delete a file from the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. (required)
     * @param recursive Flag to indicate if the folder should be deleted if it has items inside of it. (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2CddriveFoldersFolderIdDeleteWithHttpInfo(Long folderId, Boolean recursive) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFoldersFolderIdDeleteValidateBeforeCall(folderId, recursive, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * UNDER DEVELOPMENT - Delete a folder. (asynchronously)
     * Delete a file from the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. (required)
     * @param recursive Flag to indicate if the folder should be deleted if it has items inside of it. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The file was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersFolderIdDeleteAsync(Long folderId, Boolean recursive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFoldersFolderIdDeleteValidateBeforeCall(folderId, recursive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFoldersFolderIdGet
     * @param folderId The ID of the folder to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersFolderIdGetCall(Long folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/folders/{folder-id}"
            .replace("{" + "folder-id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFoldersFolderIdGetValidateBeforeCall(Long folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling apiV2CddriveFoldersFolderIdGet(Async)");
        }

        return apiV2CddriveFoldersFolderIdGetCall(folderId, _callback);

    }

    /**
     * UNDER DEVELOPMENT - Get folder information.
     * Get the information about a folder in the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. (required)
     * @return CDDriveFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public CDDriveFolder apiV2CddriveFoldersFolderIdGet(Long folderId) throws ApiException {
        ApiResponse<CDDriveFolder> localVarResp = apiV2CddriveFoldersFolderIdGetWithHttpInfo(folderId);
        return localVarResp.getData();
    }

    /**
     * UNDER DEVELOPMENT - Get folder information.
     * Get the information about a folder in the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. (required)
     * @return ApiResponse&lt;CDDriveFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CDDriveFolder> apiV2CddriveFoldersFolderIdGetWithHttpInfo(Long folderId) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFoldersFolderIdGetValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<CDDriveFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UNDER DEVELOPMENT - Get folder information. (asynchronously)
     * Get the information about a folder in the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersFolderIdGetAsync(Long folderId, final ApiCallback<CDDriveFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFoldersFolderIdGetValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<CDDriveFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFoldersFolderIdItemsGet
     * @param folderId The ID of the folder to get. Folder ID 0 represents the uppermost CD drive folder. (required)
     * @param offset The offset into the items to begin the response. (optional, default to 0)
     * @param limit The maximum number of items to return in the response. (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersFolderIdItemsGetCall(Long folderId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/folders/{folder-id}/items"
            .replace("{" + "folder-id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFoldersFolderIdItemsGetValidateBeforeCall(Long folderId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling apiV2CddriveFoldersFolderIdItemsGet(Async)");
        }

        return apiV2CddriveFoldersFolderIdItemsGetCall(folderId, offset, limit, _callback);

    }

    /**
     * Get the items in the folder.
     * Get the information about a folder in the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. Folder ID 0 represents the uppermost CD drive folder. (required)
     * @param offset The offset into the items to begin the response. (optional, default to 0)
     * @param limit The maximum number of items to return in the response. (optional, default to 20)
     * @return ApiV2CddriveFoldersFolderIdItemsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2CddriveFoldersFolderIdItemsGet200Response apiV2CddriveFoldersFolderIdItemsGet(Long folderId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ApiV2CddriveFoldersFolderIdItemsGet200Response> localVarResp = apiV2CddriveFoldersFolderIdItemsGetWithHttpInfo(folderId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get the items in the folder.
     * Get the information about a folder in the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. Folder ID 0 represents the uppermost CD drive folder. (required)
     * @param offset The offset into the items to begin the response. (optional, default to 0)
     * @param limit The maximum number of items to return in the response. (optional, default to 20)
     * @return ApiResponse&lt;ApiV2CddriveFoldersFolderIdItemsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2CddriveFoldersFolderIdItemsGet200Response> apiV2CddriveFoldersFolderIdItemsGetWithHttpInfo(Long folderId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFoldersFolderIdItemsGetValidateBeforeCall(folderId, offset, limit, null);
        Type localVarReturnType = new TypeToken<ApiV2CddriveFoldersFolderIdItemsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the items in the folder. (asynchronously)
     * Get the information about a folder in the customer&#39;s private CD Drive.
     * @param folderId The ID of the folder to get. Folder ID 0 represents the uppermost CD drive folder. (required)
     * @param offset The offset into the items to begin the response. (optional, default to 0)
     * @param limit The maximum number of items to return in the response. (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The folder cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersFolderIdItemsGetAsync(Long folderId, Integer offset, Integer limit, final ApiCallback<ApiV2CddriveFoldersFolderIdItemsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFoldersFolderIdItemsGetValidateBeforeCall(folderId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ApiV2CddriveFoldersFolderIdItemsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2CddriveFoldersPost
     * @param name the name of the folder (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The folder already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersPostCall(String name, Long parentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/cddrive/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (parentId != null) {
            localVarFormParams.put("parent-id", parentId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2CddriveFoldersPostValidateBeforeCall(String name, Long parentId, final ApiCallback _callback) throws ApiException {
        return apiV2CddriveFoldersPostCall(name, parentId, _callback);

    }

    /**
     * Create a folder.
     * Create a new folder in the customer&#39;s private CD Drive.
     * @param name the name of the folder (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @return CDDriveFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The folder already exists. </td><td>  -  </td></tr>
     </table>
     */
    public CDDriveFolder apiV2CddriveFoldersPost(String name, Long parentId) throws ApiException {
        ApiResponse<CDDriveFolder> localVarResp = apiV2CddriveFoldersPostWithHttpInfo(name, parentId);
        return localVarResp.getData();
    }

    /**
     * Create a folder.
     * Create a new folder in the customer&#39;s private CD Drive.
     * @param name the name of the folder (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @return ApiResponse&lt;CDDriveFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The folder already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CDDriveFolder> apiV2CddriveFoldersPostWithHttpInfo(String name, Long parentId) throws ApiException {
        okhttp3.Call localVarCall = apiV2CddriveFoldersPostValidateBeforeCall(name, parentId, null);
        Type localVarReturnType = new TypeToken<CDDriveFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a folder. (asynchronously)
     * Create a new folder in the customer&#39;s private CD Drive.
     * @param name the name of the folder (optional)
     * @param parentId The ID of the parent folder or 0 for the root folder. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The folder information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, username or password not found or incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A parent id cannot be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The folder already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2CddriveFoldersPostAsync(String name, Long parentId, final ApiCallback<CDDriveFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2CddriveFoldersPostValidateBeforeCall(name, parentId, _callback);
        Type localVarReturnType = new TypeToken<CDDriveFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
