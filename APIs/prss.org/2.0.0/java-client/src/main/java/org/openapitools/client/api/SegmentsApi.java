/*
 * ContentDepot
 * ContentDepot hosts a range of APIâ€™s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.Segment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SegmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SegmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SegmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2SegmentsGet
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber  (optional)
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of segments, based on segment ID. If unspecified, the segments are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segments matching the query parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this episode or its segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The episode cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsGetCall(Long episodeId, Integer segmentNumber, Integer pageStart, Integer pageSize, String orderById, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (episodeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("episodeId", episodeId));
        }

        if (segmentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segmentNumber", segmentNumber));
        }

        if (pageStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageStart", pageStart));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderById != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderById", orderById));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SegmentsGetValidateBeforeCall(Long episodeId, Integer segmentNumber, Integer pageStart, Integer pageSize, String orderById, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'episodeId' is set
        if (episodeId == null) {
            throw new ApiException("Missing the required parameter 'episodeId' when calling apiV2SegmentsGet(Async)");
        }

        return apiV2SegmentsGetCall(episodeId, segmentNumber, pageStart, pageSize, orderById, _callback);

    }

    /**
     * Returns the segments matching the query parameters.
     * 
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber  (optional)
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of segments, based on segment ID. If unspecified, the segments are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @return List&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segments matching the query parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this episode or its segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The episode cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Segment> apiV2SegmentsGet(Long episodeId, Integer segmentNumber, Integer pageStart, Integer pageSize, String orderById) throws ApiException {
        ApiResponse<List<Segment>> localVarResp = apiV2SegmentsGetWithHttpInfo(episodeId, segmentNumber, pageStart, pageSize, orderById);
        return localVarResp.getData();
    }

    /**
     * Returns the segments matching the query parameters.
     * 
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber  (optional)
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of segments, based on segment ID. If unspecified, the segments are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @return ApiResponse&lt;List&lt;Segment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segments matching the query parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this episode or its segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The episode cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Segment>> apiV2SegmentsGetWithHttpInfo(Long episodeId, Integer segmentNumber, Integer pageStart, Integer pageSize, String orderById) throws ApiException {
        okhttp3.Call localVarCall = apiV2SegmentsGetValidateBeforeCall(episodeId, segmentNumber, pageStart, pageSize, orderById, null);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the segments matching the query parameters. (asynchronously)
     * 
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber  (optional)
     * @param pageStart The start page of the results to return. The first item is indexed at 0. (optional, default to 0)
     * @param pageSize The number of items to return. Must be between 0 and 500, inclusive. (optional, default to 500)
     * @param orderById The sort order of the list of segments, based on segment ID. If unspecified, the segments are returned in random order. If using paging to iterate through the results, sort order should be specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segments matching the query parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view this episode or its segments. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The episode cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsGetAsync(Long episodeId, Integer segmentNumber, Integer pageStart, Integer pageSize, String orderById, final ApiCallback<List<Segment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SegmentsGetValidateBeforeCall(episodeId, segmentNumber, pageStart, pageSize, orderById, _callback);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SegmentsIdContentGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The audio content of the requested segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment isn&#39;t found or the user doesn&#39;t have permission to get it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsIdContentGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/segments/{id}/content"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SegmentsIdContentGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2SegmentsIdContentGet(Async)");
        }

        return apiV2SegmentsIdContentGetCall(id, _callback);

    }

    /**
     * UNDER DEVELOPMENT - Returns the audio content segment matching the given ID.
     * 
     * @param id  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The audio content of the requested segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment isn&#39;t found or the user doesn&#39;t have permission to get it. </td><td>  -  </td></tr>
     </table>
     */
    public File apiV2SegmentsIdContentGet(Long id) throws ApiException {
        ApiResponse<File> localVarResp = apiV2SegmentsIdContentGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * UNDER DEVELOPMENT - Returns the audio content segment matching the given ID.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The audio content of the requested segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment isn&#39;t found or the user doesn&#39;t have permission to get it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> apiV2SegmentsIdContentGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = apiV2SegmentsIdContentGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UNDER DEVELOPMENT - Returns the audio content segment matching the given ID. (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The audio content of the requested segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment isn&#39;t found or the user doesn&#39;t have permission to get it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsIdContentGetAsync(Long id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SegmentsIdContentGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SegmentsIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to delete the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment or the episode that owns the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SegmentsIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2SegmentsIdDelete(Async)");
        }

        return apiV2SegmentsIdDeleteCall(id, _callback);

    }

    /**
     * Deletes the segment with the given ID.
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to delete the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment or the episode that owns the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2SegmentsIdDelete(Long id) throws ApiException {
        apiV2SegmentsIdDeleteWithHttpInfo(id);
    }

    /**
     * Deletes the segment with the given ID.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to delete the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment or the episode that owns the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2SegmentsIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = apiV2SegmentsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the segment with the given ID. (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to delete the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment or the episode that owns the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SegmentsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SegmentsIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment with the given ID. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment information cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SegmentsIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2SegmentsIdGet(Async)");
        }

        return apiV2SegmentsIdGetCall(id, _callback);

    }

    /**
     * Returns the segment matching the given ID.
     * 
     * @param id  (required)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment with the given ID. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment information cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public Segment apiV2SegmentsIdGet(Long id) throws ApiException {
        ApiResponse<Segment> localVarResp = apiV2SegmentsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns the segment matching the given ID.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment with the given ID. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment information cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segment> apiV2SegmentsIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = apiV2SegmentsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the segment matching the given ID. (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The segment with the given ID. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to view the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The segment information cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsIdGetAsync(Long id, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SegmentsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SegmentsPost
     * @param cdDriveUri The URI to the segment content in CD Drive. Format should be &#39;cddrive:id:{value}&#39; or &#39;cddrive://{path}&#39;. (required)
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber The segment number of the segment. (required)
     * @param inCue The incue for the segment. Defaults to the program segment incue. (optional)
     * @param outCue The outcue for the segment. Defaults to the program segment outcue. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created segment with fields populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to create the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The information for creating the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsPostCall(String cdDriveUri, Long episodeId, Integer segmentNumber, String inCue, String outCue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cdDriveUri != null) {
            localVarFormParams.put("cdDriveUri", cdDriveUri);
        }

        if (episodeId != null) {
            localVarFormParams.put("episodeId", episodeId);
        }

        if (inCue != null) {
            localVarFormParams.put("inCue", inCue);
        }

        if (outCue != null) {
            localVarFormParams.put("outCue", outCue);
        }

        if (segmentNumber != null) {
            localVarFormParams.put("segmentNumber", segmentNumber);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cd_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SegmentsPostValidateBeforeCall(String cdDriveUri, Long episodeId, Integer segmentNumber, String inCue, String outCue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cdDriveUri' is set
        if (cdDriveUri == null) {
            throw new ApiException("Missing the required parameter 'cdDriveUri' when calling apiV2SegmentsPost(Async)");
        }

        // verify the required parameter 'episodeId' is set
        if (episodeId == null) {
            throw new ApiException("Missing the required parameter 'episodeId' when calling apiV2SegmentsPost(Async)");
        }

        // verify the required parameter 'segmentNumber' is set
        if (segmentNumber == null) {
            throw new ApiException("Missing the required parameter 'segmentNumber' when calling apiV2SegmentsPost(Async)");
        }

        return apiV2SegmentsPostCall(cdDriveUri, episodeId, segmentNumber, inCue, outCue, _callback);

    }

    /**
     * Creates a new segment.
     * 
     * @param cdDriveUri The URI to the segment content in CD Drive. Format should be &#39;cddrive:id:{value}&#39; or &#39;cddrive://{path}&#39;. (required)
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber The segment number of the segment. (required)
     * @param inCue The incue for the segment. Defaults to the program segment incue. (optional)
     * @param outCue The outcue for the segment. Defaults to the program segment outcue. (optional)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created segment with fields populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to create the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The information for creating the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public Segment apiV2SegmentsPost(String cdDriveUri, Long episodeId, Integer segmentNumber, String inCue, String outCue) throws ApiException {
        ApiResponse<Segment> localVarResp = apiV2SegmentsPostWithHttpInfo(cdDriveUri, episodeId, segmentNumber, inCue, outCue);
        return localVarResp.getData();
    }

    /**
     * Creates a new segment.
     * 
     * @param cdDriveUri The URI to the segment content in CD Drive. Format should be &#39;cddrive:id:{value}&#39; or &#39;cddrive://{path}&#39;. (required)
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber The segment number of the segment. (required)
     * @param inCue The incue for the segment. Defaults to the program segment incue. (optional)
     * @param outCue The outcue for the segment. Defaults to the program segment outcue. (optional)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created segment with fields populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to create the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The information for creating the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segment> apiV2SegmentsPostWithHttpInfo(String cdDriveUri, Long episodeId, Integer segmentNumber, String inCue, String outCue) throws ApiException {
        okhttp3.Call localVarCall = apiV2SegmentsPostValidateBeforeCall(cdDriveUri, episodeId, segmentNumber, inCue, outCue, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new segment. (asynchronously)
     * 
     * @param cdDriveUri The URI to the segment content in CD Drive. Format should be &#39;cddrive:id:{value}&#39; or &#39;cddrive://{path}&#39;. (required)
     * @param episodeId The ID of the episode that owns the segment. (required)
     * @param segmentNumber The segment number of the segment. (required)
     * @param inCue The incue for the segment. Defaults to the program segment incue. (optional)
     * @param outCue The outcue for the segment. Defaults to the program segment outcue. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created segment with fields populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is missing required data or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed, or the user is not permitted to create the segment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The information for creating the segment cannot be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SegmentsPostAsync(String cdDriveUri, Long episodeId, Integer segmentNumber, String inCue, String outCue, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SegmentsPostValidateBeforeCall(cdDriveUri, episodeId, segmentNumber, inCue, outCue, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
