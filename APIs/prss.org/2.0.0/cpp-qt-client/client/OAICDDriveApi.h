/**
 * ContentDepot
 * ContentDepot hosts a range of APIâ€™s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICDDriveApi_H
#define OAI_OAICDDriveApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICDDriveFile.h"
#include "OAICDDriveFolder.h"
#include "OAIHttpFileElement.h"
#include "OAI_api_v2_cddrive_folders__folder_id__items_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICDDriveApi : public QObject {
    Q_OBJECT

public:
    OAICDDriveApi(const int timeOut = 0);
    ~OAICDDriveApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_md5 QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  name QString [optional]
    * @param[in]  parent_id qint64 [optional]
    */
    virtual void apiV2CddriveFilesContentPost(const ::OpenAPI::OptionalParam<QString> &content_md5 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &parent_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  file_id qint64 [required]
    * @param[in]  range QString [optional]
    */
    virtual void apiV2CddriveFilesFileIdContentGet(const qint64 &file_id, const ::OpenAPI::OptionalParam<QString> &range = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id qint64 [required]
    */
    virtual void apiV2CddriveFilesFileIdDelete(const qint64 &file_id);

    /**
    * @param[in]  file_id qint64 [required]
    */
    virtual void apiV2CddriveFilesFileIdGet(const qint64 &file_id);

    /**
    * @param[in]  folder_id qint64 [required]
    * @param[in]  recursive bool [optional]
    */
    virtual void apiV2CddriveFoldersFolderIdDelete(const qint64 &folder_id, const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  folder_id qint64 [required]
    */
    virtual void apiV2CddriveFoldersFolderIdGet(const qint64 &folder_id);

    /**
    * @param[in]  folder_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV2CddriveFoldersFolderIdItemsGet(const qint64 &folder_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  parent_id qint64 [optional]
    */
    virtual void apiV2CddriveFoldersPost(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &parent_id = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2CddriveFilesContentPostCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFilesFileIdContentGetCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFilesFileIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFilesFileIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFoldersFolderIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFoldersFolderIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFoldersFolderIdItemsGetCallback(OAIHttpRequestWorker *worker);
    void apiV2CddriveFoldersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2CddriveFilesContentPostSignal(OAICDDriveFile summary);
    void apiV2CddriveFilesFileIdContentGetSignal(OAIHttpFileElement summary);
    void apiV2CddriveFilesFileIdDeleteSignal();
    void apiV2CddriveFilesFileIdGetSignal(OAICDDriveFile summary);
    void apiV2CddriveFoldersFolderIdDeleteSignal();
    void apiV2CddriveFoldersFolderIdGetSignal(OAICDDriveFolder summary);
    void apiV2CddriveFoldersFolderIdItemsGetSignal(OAI_api_v2_cddrive_folders__folder_id__items_get_200_response summary);
    void apiV2CddriveFoldersPostSignal(OAICDDriveFolder summary);


    void apiV2CddriveFilesContentPostSignalFull(OAIHttpRequestWorker *worker, OAICDDriveFile summary);
    void apiV2CddriveFilesFileIdContentGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void apiV2CddriveFilesFileIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiV2CddriveFilesFileIdGetSignalFull(OAIHttpRequestWorker *worker, OAICDDriveFile summary);
    void apiV2CddriveFoldersFolderIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiV2CddriveFoldersFolderIdGetSignalFull(OAIHttpRequestWorker *worker, OAICDDriveFolder summary);
    void apiV2CddriveFoldersFolderIdItemsGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_v2_cddrive_folders__folder_id__items_get_200_response summary);
    void apiV2CddriveFoldersPostSignalFull(OAIHttpRequestWorker *worker, OAICDDriveFolder summary);

    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesContentPostSignalError() instead")
    void apiV2CddriveFilesContentPostSignalE(OAICDDriveFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesContentPostSignalError(OAICDDriveFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesFileIdContentGetSignalError() instead")
    void apiV2CddriveFilesFileIdContentGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesFileIdContentGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesFileIdDeleteSignalError() instead")
    void apiV2CddriveFilesFileIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesFileIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesFileIdGetSignalError() instead")
    void apiV2CddriveFilesFileIdGetSignalE(OAICDDriveFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesFileIdGetSignalError(OAICDDriveFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersFolderIdDeleteSignalError() instead")
    void apiV2CddriveFoldersFolderIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersFolderIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersFolderIdGetSignalError() instead")
    void apiV2CddriveFoldersFolderIdGetSignalE(OAICDDriveFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersFolderIdGetSignalError(OAICDDriveFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersFolderIdItemsGetSignalError() instead")
    void apiV2CddriveFoldersFolderIdItemsGetSignalE(OAI_api_v2_cddrive_folders__folder_id__items_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersFolderIdItemsGetSignalError(OAI_api_v2_cddrive_folders__folder_id__items_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersPostSignalError() instead")
    void apiV2CddriveFoldersPostSignalE(OAICDDriveFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersPostSignalError(OAICDDriveFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesContentPostSignalErrorFull() instead")
    void apiV2CddriveFilesContentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesContentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesFileIdContentGetSignalErrorFull() instead")
    void apiV2CddriveFilesFileIdContentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesFileIdContentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesFileIdDeleteSignalErrorFull() instead")
    void apiV2CddriveFilesFileIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesFileIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFilesFileIdGetSignalErrorFull() instead")
    void apiV2CddriveFilesFileIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFilesFileIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersFolderIdDeleteSignalErrorFull() instead")
    void apiV2CddriveFoldersFolderIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersFolderIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersFolderIdGetSignalErrorFull() instead")
    void apiV2CddriveFoldersFolderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersFolderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersFolderIdItemsGetSignalErrorFull() instead")
    void apiV2CddriveFoldersFolderIdItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersFolderIdItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2CddriveFoldersPostSignalErrorFull() instead")
    void apiV2CddriveFoldersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2CddriveFoldersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
