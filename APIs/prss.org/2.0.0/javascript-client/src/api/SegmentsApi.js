/**
 * ContentDepot
 * ContentDepot hosts a range of APIâ€™s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Segment from '../model/Segment';

/**
* Segments service.
* @module api/SegmentsApi
* @version 2.0.0
*/
export default class SegmentsApi {

    /**
    * Constructs a new SegmentsApi. 
    * @alias module:api/SegmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2SegmentsGet operation.
     * @callback module:api/SegmentsApi~apiV2SegmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Segment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the segments matching the query parameters.
     * @param {Number} episodeId The ID of the episode that owns the segment.
     * @param {Object} opts Optional parameters
     * @param {Number} [segmentNumber] 
     * @param {Number} [pageStart = 0)] The start page of the results to return. The first item is indexed at 0.
     * @param {Number} [pageSize = 500)] The number of items to return. Must be between 0 and 500, inclusive.
     * @param {module:model/String} [orderById] The sort order of the list of segments, based on segment ID. If unspecified, the segments are returned in random order. If using paging to iterate through the results, sort order should be specified.
     * @param {module:api/SegmentsApi~apiV2SegmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Segment>}
     */
    apiV2SegmentsGet(episodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'episodeId' is set
      if (episodeId === undefined || episodeId === null) {
        throw new Error("Missing the required parameter 'episodeId' when calling apiV2SegmentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'episodeId': episodeId,
        'segmentNumber': opts['segmentNumber'],
        'pageStart': opts['pageStart'],
        'pageSize': opts['pageSize'],
        'orderById': opts['orderById']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cd_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Segment];
      return this.apiClient.callApi(
        '/api/v2/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SegmentsIdContentGet operation.
     * @callback module:api/SegmentsApi~apiV2SegmentsIdContentGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UNDER DEVELOPMENT - Returns the audio content segment matching the given ID.
     * @param {Number} id 
     * @param {module:api/SegmentsApi~apiV2SegmentsIdContentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV2SegmentsIdContentGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SegmentsIdContentGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cd_oauth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v2/segments/{id}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SegmentsIdDelete operation.
     * @callback module:api/SegmentsApi~apiV2SegmentsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the segment with the given ID.
     * @param {Number} id 
     * @param {module:api/SegmentsApi~apiV2SegmentsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2SegmentsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SegmentsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cd_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/segments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SegmentsIdGet operation.
     * @callback module:api/SegmentsApi~apiV2SegmentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Segment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the segment matching the given ID.
     * @param {Number} id 
     * @param {module:api/SegmentsApi~apiV2SegmentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Segment}
     */
    apiV2SegmentsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SegmentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cd_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Segment;
      return this.apiClient.callApi(
        '/api/v2/segments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SegmentsPost operation.
     * @callback module:api/SegmentsApi~apiV2SegmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Segment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new segment.
     * @param {String} cdDriveUri The URI to the segment content in CD Drive. Format should be 'cddrive:id:{value}' or 'cddrive://{path}'.
     * @param {Number} episodeId The ID of the episode that owns the segment.
     * @param {Number} segmentNumber The segment number of the segment.
     * @param {Object} opts Optional parameters
     * @param {String} [inCue] The incue for the segment. Defaults to the program segment incue.
     * @param {String} [outCue] The outcue for the segment. Defaults to the program segment outcue.
     * @param {module:api/SegmentsApi~apiV2SegmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Segment}
     */
    apiV2SegmentsPost(cdDriveUri, episodeId, segmentNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cdDriveUri' is set
      if (cdDriveUri === undefined || cdDriveUri === null) {
        throw new Error("Missing the required parameter 'cdDriveUri' when calling apiV2SegmentsPost");
      }
      // verify the required parameter 'episodeId' is set
      if (episodeId === undefined || episodeId === null) {
        throw new Error("Missing the required parameter 'episodeId' when calling apiV2SegmentsPost");
      }
      // verify the required parameter 'segmentNumber' is set
      if (segmentNumber === undefined || segmentNumber === null) {
        throw new Error("Missing the required parameter 'segmentNumber' when calling apiV2SegmentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'cdDriveUri': cdDriveUri,
        'episodeId': episodeId,
        'inCue': opts['inCue'],
        'outCue': opts['outCue'],
        'segmentNumber': segmentNumber
      };

      let authNames = ['cd_oauth2'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Segment;
      return this.apiClient.callApi(
        '/api/v2/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
