/**
 * ContentDepot
 * ContentDepot hosts a range of API’s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ApiV2CddriveFoldersFolderIdItemsGet200Response from './model/ApiV2CddriveFoldersFolderIdItemsGet200Response';
import ApiV2MetapubProgramInformationBatchPostRequest from './model/ApiV2MetapubProgramInformationBatchPostRequest';
import ApiV2MetapubProgramInformationBatchPostRequestProgram from './model/ApiV2MetapubProgramInformationBatchPostRequestProgram';
import BroadcastService from './model/BroadcastService';
import CDDriveFile from './model/CDDriveFile';
import CDDriveFolder from './model/CDDriveFolder';
import CDDriveItem from './model/CDDriveItem';
import Episode from './model/Episode';
import Error from './model/Error';
import Piece from './model/Piece';
import Program from './model/Program';
import ProgramInformationBatch from './model/ProgramInformationBatch';
import ProgramInformationBatchProgram from './model/ProgramInformationBatchProgram';
import Segment from './model/Segment';
import Spot from './model/Spot';
import SpotInsertion from './model/SpotInsertion';
import BroadcastServicesApi from './api/BroadcastServicesApi';
import CDDriveApi from './api/CDDriveApi';
import EpisodesApi from './api/EpisodesApi';
import MetaPubApi from './api/MetaPubApi';
import PiecesApi from './api/PiecesApi';
import ProgramsApi from './api/ProgramsApi';
import RadioDNSApi from './api/RadioDNSApi';
import SegmentsApi from './api/SegmentsApi';
import SpotInsertionsApi from './api/SpotInsertionsApi';
import SpotsApi from './api/SpotsApi';


/**
* ContentDepot hosts a range of API’s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \&quot;crawling\&quot; existing public feeds (e.g. C24, BBC) or the producer&#39;s production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub&#39;s use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \&quot;service provider\&quot; while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form &#x60;&#x60;&#x60;cddrive:id:{value}&#x60;&#x60;&#x60; where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form &#x60;&#x60;&#x60;cddrive://{path}&#x60;&#x60;&#x60; where path is the full, UNIX style path to the file or folder starting with &#39;/&#39;. For example, two CD Drive URIs pointing to the same file may be &#x60;&#x60;&#x60;cddrive:id:12345&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;cddrive:///show1/episode2/metadata.xml&#x60;&#x60;&#x60;. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require &#x60;&#x60;&#x60;cd:full&#x60;&#x60;&#x60; access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ContentDepot = require('index'); // See note below*.
* var xxxSvc = new ContentDepot.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ContentDepot.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ContentDepot.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ContentDepot.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiV2CddriveFoldersFolderIdItemsGet200Response model constructor.
     * @property {module:model/ApiV2CddriveFoldersFolderIdItemsGet200Response}
     */
    ApiV2CddriveFoldersFolderIdItemsGet200Response,

    /**
     * The ApiV2MetapubProgramInformationBatchPostRequest model constructor.
     * @property {module:model/ApiV2MetapubProgramInformationBatchPostRequest}
     */
    ApiV2MetapubProgramInformationBatchPostRequest,

    /**
     * The ApiV2MetapubProgramInformationBatchPostRequestProgram model constructor.
     * @property {module:model/ApiV2MetapubProgramInformationBatchPostRequestProgram}
     */
    ApiV2MetapubProgramInformationBatchPostRequestProgram,

    /**
     * The BroadcastService model constructor.
     * @property {module:model/BroadcastService}
     */
    BroadcastService,

    /**
     * The CDDriveFile model constructor.
     * @property {module:model/CDDriveFile}
     */
    CDDriveFile,

    /**
     * The CDDriveFolder model constructor.
     * @property {module:model/CDDriveFolder}
     */
    CDDriveFolder,

    /**
     * The CDDriveItem model constructor.
     * @property {module:model/CDDriveItem}
     */
    CDDriveItem,

    /**
     * The Episode model constructor.
     * @property {module:model/Episode}
     */
    Episode,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Piece model constructor.
     * @property {module:model/Piece}
     */
    Piece,

    /**
     * The Program model constructor.
     * @property {module:model/Program}
     */
    Program,

    /**
     * The ProgramInformationBatch model constructor.
     * @property {module:model/ProgramInformationBatch}
     */
    ProgramInformationBatch,

    /**
     * The ProgramInformationBatchProgram model constructor.
     * @property {module:model/ProgramInformationBatchProgram}
     */
    ProgramInformationBatchProgram,

    /**
     * The Segment model constructor.
     * @property {module:model/Segment}
     */
    Segment,

    /**
     * The Spot model constructor.
     * @property {module:model/Spot}
     */
    Spot,

    /**
     * The SpotInsertion model constructor.
     * @property {module:model/SpotInsertion}
     */
    SpotInsertion,

    /**
    * The BroadcastServicesApi service constructor.
    * @property {module:api/BroadcastServicesApi}
    */
    BroadcastServicesApi,

    /**
    * The CDDriveApi service constructor.
    * @property {module:api/CDDriveApi}
    */
    CDDriveApi,

    /**
    * The EpisodesApi service constructor.
    * @property {module:api/EpisodesApi}
    */
    EpisodesApi,

    /**
    * The MetaPubApi service constructor.
    * @property {module:api/MetaPubApi}
    */
    MetaPubApi,

    /**
    * The PiecesApi service constructor.
    * @property {module:api/PiecesApi}
    */
    PiecesApi,

    /**
    * The ProgramsApi service constructor.
    * @property {module:api/ProgramsApi}
    */
    ProgramsApi,

    /**
    * The RadioDNSApi service constructor.
    * @property {module:api/RadioDNSApi}
    */
    RadioDNSApi,

    /**
    * The SegmentsApi service constructor.
    * @property {module:api/SegmentsApi}
    */
    SegmentsApi,

    /**
    * The SpotInsertionsApi service constructor.
    * @property {module:api/SpotInsertionsApi}
    */
    SpotInsertionsApi,

    /**
    * The SpotsApi service constructor.
    * @property {module:api/SpotsApi}
    */
    SpotsApi
};
