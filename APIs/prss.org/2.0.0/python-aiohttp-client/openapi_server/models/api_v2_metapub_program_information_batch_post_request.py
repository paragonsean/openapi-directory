# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_v2_metapub_program_information_batch_post_request_program import ApiV2MetapubProgramInformationBatchPostRequestProgram
from openapi_server import util


class ApiV2MetapubProgramInformationBatchPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, name: str=None, program: ApiV2MetapubProgramInformationBatchPostRequestProgram=None, uri: str=None):
        """ApiV2MetapubProgramInformationBatchPostRequest - a model defined in OpenAPI

        :param format: The format of this ApiV2MetapubProgramInformationBatchPostRequest.
        :param name: The name of this ApiV2MetapubProgramInformationBatchPostRequest.
        :param program: The program of this ApiV2MetapubProgramInformationBatchPostRequest.
        :param uri: The uri of this ApiV2MetapubProgramInformationBatchPostRequest.
        """
        self.openapi_types = {
            'format': str,
            'name': str,
            'program': ApiV2MetapubProgramInformationBatchPostRequestProgram,
            'uri': str
        }

        self.attribute_map = {
            'format': 'format',
            'name': 'name',
            'program': 'program',
            'uri': 'uri'
        }

        self._format = format
        self._name = name
        self._program = program
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2MetapubProgramInformationBatchPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _api_v2_metapub_program_information_batch_post_request of this ApiV2MetapubProgramInformationBatchPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this ApiV2MetapubProgramInformationBatchPostRequest.

        The format of the metadata file defining the create or update actions to be performed on one or more EPG programs. For more information on how RadioDNS EPG maps to ContentDepot <a href=\"/api/epg-cd-mapping.html\">click here </a>

        :return: The format of this ApiV2MetapubProgramInformationBatchPostRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ApiV2MetapubProgramInformationBatchPostRequest.

        The format of the metadata file defining the create or update actions to be performed on one or more EPG programs. For more information on how RadioDNS EPG maps to ContentDepot <a href=\"/api/epg-cd-mapping.html\">click here </a>

        :param format: The format of this ApiV2MetapubProgramInformationBatchPostRequest.
        :type format: str
        """
        allowed_values = ["radiodns"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name(self):
        """Gets the name of this ApiV2MetapubProgramInformationBatchPostRequest.

        An optional human readable name for the batch.

        :return: The name of this ApiV2MetapubProgramInformationBatchPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiV2MetapubProgramInformationBatchPostRequest.

        An optional human readable name for the batch.

        :param name: The name of this ApiV2MetapubProgramInformationBatchPostRequest.
        :type name: str
        """

        self._name = name

    @property
    def program(self):
        """Gets the program of this ApiV2MetapubProgramInformationBatchPostRequest.


        :return: The program of this ApiV2MetapubProgramInformationBatchPostRequest.
        :rtype: ApiV2MetapubProgramInformationBatchPostRequestProgram
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this ApiV2MetapubProgramInformationBatchPostRequest.


        :param program: The program of this ApiV2MetapubProgramInformationBatchPostRequest.
        :type program: ApiV2MetapubProgramInformationBatchPostRequestProgram
        """

        self._program = program

    @property
    def uri(self):
        """Gets the uri of this ApiV2MetapubProgramInformationBatchPostRequest.

        The URI to the metadata file. Currently only the ```cddrive``` scheme is supported.

        :return: The uri of this ApiV2MetapubProgramInformationBatchPostRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiV2MetapubProgramInformationBatchPostRequest.

        The URI to the metadata file. Currently only the ```cddrive``` scheme is supported.

        :param uri: The uri of this ApiV2MetapubProgramInformationBatchPostRequest.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
