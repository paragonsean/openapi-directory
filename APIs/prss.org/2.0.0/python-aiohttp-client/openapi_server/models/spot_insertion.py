# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SpotInsertion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broadcast_service_id: int=None, created_date: datetime=None, cue: str=None, customer_id: int=None, duration: int=None, end_date: date=None, id: int=None, program_id: int=None, spots: List[int]=None, start_date: date=None):
        """SpotInsertion - a model defined in OpenAPI

        :param broadcast_service_id: The broadcast_service_id of this SpotInsertion.
        :param created_date: The created_date of this SpotInsertion.
        :param cue: The cue of this SpotInsertion.
        :param customer_id: The customer_id of this SpotInsertion.
        :param duration: The duration of this SpotInsertion.
        :param end_date: The end_date of this SpotInsertion.
        :param id: The id of this SpotInsertion.
        :param program_id: The program_id of this SpotInsertion.
        :param spots: The spots of this SpotInsertion.
        :param start_date: The start_date of this SpotInsertion.
        """
        self.openapi_types = {
            'broadcast_service_id': int,
            'created_date': datetime,
            'cue': str,
            'customer_id': int,
            'duration': int,
            'end_date': date,
            'id': int,
            'program_id': int,
            'spots': List[int],
            'start_date': date
        }

        self.attribute_map = {
            'broadcast_service_id': 'broadcastServiceId',
            'created_date': 'createdDate',
            'cue': 'cue',
            'customer_id': 'customerId',
            'duration': 'duration',
            'end_date': 'endDate',
            'id': 'id',
            'program_id': 'programId',
            'spots': 'spots',
            'start_date': 'startDate'
        }

        self._broadcast_service_id = broadcast_service_id
        self._created_date = created_date
        self._cue = cue
        self._customer_id = customer_id
        self._duration = duration
        self._end_date = end_date
        self._id = id
        self._program_id = program_id
        self._spots = spots
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpotInsertion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpotInsertion of this SpotInsertion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broadcast_service_id(self):
        """Gets the broadcast_service_id of this SpotInsertion.

        The ID of the broadcast service for the spot insertion.

        :return: The broadcast_service_id of this SpotInsertion.
        :rtype: int
        """
        return self._broadcast_service_id

    @broadcast_service_id.setter
    def broadcast_service_id(self, broadcast_service_id):
        """Sets the broadcast_service_id of this SpotInsertion.

        The ID of the broadcast service for the spot insertion.

        :param broadcast_service_id: The broadcast_service_id of this SpotInsertion.
        :type broadcast_service_id: int
        """
        if broadcast_service_id is None:
            raise ValueError("Invalid value for `broadcast_service_id`, must not be `None`")
        if broadcast_service_id is not None and broadcast_service_id < 0:
            raise ValueError("Invalid value for `broadcast_service_id`, must be a value greater than or equal to `0`")

        self._broadcast_service_id = broadcast_service_id

    @property
    def created_date(self):
        """Gets the created_date of this SpotInsertion.

        The date and time the spot insertion was created. Generated at creation.

        :return: The created_date of this SpotInsertion.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SpotInsertion.

        The date and time the spot insertion was created. Generated at creation.

        :param created_date: The created_date of this SpotInsertion.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def cue(self):
        """Gets the cue of this SpotInsertion.

        The cue that triggers the spot insertion.

        :return: The cue of this SpotInsertion.
        :rtype: str
        """
        return self._cue

    @cue.setter
    def cue(self, cue):
        """Sets the cue of this SpotInsertion.

        The cue that triggers the spot insertion.

        :param cue: The cue of this SpotInsertion.
        :type cue: str
        """
        if cue is None:
            raise ValueError("Invalid value for `cue`, must not be `None`")
        if cue is not None and not re.search(r'^S:[A-F0-9]{3,4}_[A-Za-z0-9_-]*$', cue):
            raise ValueError("Invalid value for `cue`, must be a follow pattern or equal to `/^S:[A-F0-9]{3,4}_[A-Za-z0-9_-]*$/`")

        self._cue = cue

    @property
    def customer_id(self):
        """Gets the customer_id of this SpotInsertion.

        The ID of the customer who owns the spot insertion. Set to the logged-in customer at creation.

        :return: The customer_id of this SpotInsertion.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SpotInsertion.

        The ID of the customer who owns the spot insertion. Set to the logged-in customer at creation.

        :param customer_id: The customer_id of this SpotInsertion.
        :type customer_id: int
        """
        if customer_id is not None and customer_id < 0:
            raise ValueError("Invalid value for `customer_id`, must be a value greater than or equal to `0`")

        self._customer_id = customer_id

    @property
    def duration(self):
        """Gets the duration of this SpotInsertion.

        The duration of the spot insertion.

        :return: The duration of this SpotInsertion.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SpotInsertion.

        The duration of the spot insertion.

        :param duration: The duration of this SpotInsertion.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def end_date(self):
        """Gets the end_date of this SpotInsertion.

        The date the spot insertion ends. The time will be set to midnight Eastern Time.

        :return: The end_date of this SpotInsertion.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SpotInsertion.

        The date the spot insertion ends. The time will be set to midnight Eastern Time.

        :param end_date: The end_date of this SpotInsertion.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this SpotInsertion.

        The unique ID of the spot insertion. Generated at creation.

        :return: The id of this SpotInsertion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpotInsertion.

        The unique ID of the spot insertion. Generated at creation.

        :param id: The id of this SpotInsertion.
        :type id: int
        """
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def program_id(self):
        """Gets the program_id of this SpotInsertion.

        The ID of the program for the spot insertion.

        :return: The program_id of this SpotInsertion.
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this SpotInsertion.

        The ID of the program for the spot insertion.

        :param program_id: The program_id of this SpotInsertion.
        :type program_id: int
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")
        if program_id is not None and program_id < 0:
            raise ValueError("Invalid value for `program_id`, must be a value greater than or equal to `0`")

        self._program_id = program_id

    @property
    def spots(self):
        """Gets the spots of this SpotInsertion.

        The ordered list of spot IDs to play.

        :return: The spots of this SpotInsertion.
        :rtype: List[int]
        """
        return self._spots

    @spots.setter
    def spots(self, spots):
        """Sets the spots of this SpotInsertion.

        The ordered list of spot IDs to play.

        :param spots: The spots of this SpotInsertion.
        :type spots: List[int]
        """
        if spots is None:
            raise ValueError("Invalid value for `spots`, must not be `None`")

        self._spots = spots

    @property
    def start_date(self):
        """Gets the start_date of this SpotInsertion.

        The date the spot insertion can start. The time will be set to midnight Eastern Time.

        :return: The start_date of this SpotInsertion.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SpotInsertion.

        The date the spot insertion can start. The time will be set to midnight Eastern Time.

        :param start_date: The start_date of this SpotInsertion.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
