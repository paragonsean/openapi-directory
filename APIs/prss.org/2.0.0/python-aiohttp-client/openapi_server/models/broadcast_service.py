# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BroadcastService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, description: str=None, id: int=None, last_modified_date: datetime=None, name: str=None):
        """BroadcastService - a model defined in OpenAPI

        :param created_date: The created_date of this BroadcastService.
        :param description: The description of this BroadcastService.
        :param id: The id of this BroadcastService.
        :param last_modified_date: The last_modified_date of this BroadcastService.
        :param name: The name of this BroadcastService.
        """
        self.openapi_types = {
            'created_date': datetime,
            'description': str,
            'id': int,
            'last_modified_date': datetime,
            'name': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'description': 'description',
            'id': 'id',
            'last_modified_date': 'lastModifiedDate',
            'name': 'name'
        }

        self._created_date = created_date
        self._description = description
        self._id = id
        self._last_modified_date = last_modified_date
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BroadcastService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BroadcastService of this BroadcastService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this BroadcastService.

        The date the broadcast service was created.

        :return: The created_date of this BroadcastService.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this BroadcastService.

        The date the broadcast service was created.

        :param created_date: The created_date of this BroadcastService.
        :type created_date: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this BroadcastService.

        The description of the broadcast service.

        :return: The description of this BroadcastService.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BroadcastService.

        The description of the broadcast service.

        :param description: The description of this BroadcastService.
        :type description: str
        """
        if description is not None and len(description) > 1200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this BroadcastService.

        The ID of the broadcast service.

        :return: The id of this BroadcastService.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BroadcastService.

        The ID of the broadcast service.

        :param id: The id of this BroadcastService.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this BroadcastService.

        The date the broadcast service was last modified.

        :return: The last_modified_date of this BroadcastService.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this BroadcastService.

        The date the broadcast service was last modified.

        :param last_modified_date: The last_modified_date of this BroadcastService.
        :type last_modified_date: datetime
        """
        if last_modified_date is None:
            raise ValueError("Invalid value for `last_modified_date`, must not be `None`")

        self._last_modified_date = last_modified_date

    @property
    def name(self):
        """Gets the name of this BroadcastService.

        The name of the broadcast service.

        :return: The name of this BroadcastService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BroadcastService.

        The name of the broadcast service.

        :param name: The name of this BroadcastService.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
