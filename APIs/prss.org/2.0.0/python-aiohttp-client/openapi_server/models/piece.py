# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Piece(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributor: str=None, created_date: datetime=None, description: str=None, episode_id: int=None, full_description: str=None, id: int=None, image_cd_drive_uri: str=None, image_file_name: str=None, image_file_size: int=None, image_original_file_name: str=None, last_modified_date: datetime=None, relative_end_time: int=None, relative_start_time: int=None, segment_number: int=None, title: str=None):
        """Piece - a model defined in OpenAPI

        :param contributor: The contributor of this Piece.
        :param created_date: The created_date of this Piece.
        :param description: The description of this Piece.
        :param episode_id: The episode_id of this Piece.
        :param full_description: The full_description of this Piece.
        :param id: The id of this Piece.
        :param image_cd_drive_uri: The image_cd_drive_uri of this Piece.
        :param image_file_name: The image_file_name of this Piece.
        :param image_file_size: The image_file_size of this Piece.
        :param image_original_file_name: The image_original_file_name of this Piece.
        :param last_modified_date: The last_modified_date of this Piece.
        :param relative_end_time: The relative_end_time of this Piece.
        :param relative_start_time: The relative_start_time of this Piece.
        :param segment_number: The segment_number of this Piece.
        :param title: The title of this Piece.
        """
        self.openapi_types = {
            'contributor': str,
            'created_date': datetime,
            'description': str,
            'episode_id': int,
            'full_description': str,
            'id': int,
            'image_cd_drive_uri': str,
            'image_file_name': str,
            'image_file_size': int,
            'image_original_file_name': str,
            'last_modified_date': datetime,
            'relative_end_time': int,
            'relative_start_time': int,
            'segment_number': int,
            'title': str
        }

        self.attribute_map = {
            'contributor': 'contributor',
            'created_date': 'createdDate',
            'description': 'description',
            'episode_id': 'episodeId',
            'full_description': 'fullDescription',
            'id': 'id',
            'image_cd_drive_uri': 'imageCdDriveUri',
            'image_file_name': 'imageFileName',
            'image_file_size': 'imageFileSize',
            'image_original_file_name': 'imageOriginalFileName',
            'last_modified_date': 'lastModifiedDate',
            'relative_end_time': 'relativeEndTime',
            'relative_start_time': 'relativeStartTime',
            'segment_number': 'segmentNumber',
            'title': 'title'
        }

        self._contributor = contributor
        self._created_date = created_date
        self._description = description
        self._episode_id = episode_id
        self._full_description = full_description
        self._id = id
        self._image_cd_drive_uri = image_cd_drive_uri
        self._image_file_name = image_file_name
        self._image_file_size = image_file_size
        self._image_original_file_name = image_original_file_name
        self._last_modified_date = last_modified_date
        self._relative_end_time = relative_end_time
        self._relative_start_time = relative_start_time
        self._segment_number = segment_number
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Piece':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Piece of this Piece.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributor(self):
        """Gets the contributor of this Piece.

        The artist or contributor name.

        :return: The contributor of this Piece.
        :rtype: str
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this Piece.

        The artist or contributor name.

        :param contributor: The contributor of this Piece.
        :type contributor: str
        """
        if contributor is not None and len(contributor) > 26:
            raise ValueError("Invalid value for `contributor`, length must be less than or equal to `26`")

        self._contributor = contributor

    @property
    def created_date(self):
        """Gets the created_date of this Piece.

        The date the piece was created. Generated at creation.

        :return: The created_date of this Piece.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Piece.

        The date the piece was created. Generated at creation.

        :param created_date: The created_date of this Piece.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this Piece.

        The short description of the piece.

        :return: The description of this Piece.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Piece.

        The short description of the piece.

        :param description: The description of this Piece.
        :type description: str
        """
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")

        self._description = description

    @property
    def episode_id(self):
        """Gets the episode_id of this Piece.

        The ID of the episode that owns the piece.

        :return: The episode_id of this Piece.
        :rtype: int
        """
        return self._episode_id

    @episode_id.setter
    def episode_id(self, episode_id):
        """Sets the episode_id of this Piece.

        The ID of the episode that owns the piece.

        :param episode_id: The episode_id of this Piece.
        :type episode_id: int
        """
        if episode_id is None:
            raise ValueError("Invalid value for `episode_id`, must not be `None`")
        if episode_id is not None and episode_id < 0:
            raise ValueError("Invalid value for `episode_id`, must be a value greater than or equal to `0`")

        self._episode_id = episode_id

    @property
    def full_description(self):
        """Gets the full_description of this Piece.

        The long description of the piece.

        :return: The full_description of this Piece.
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this Piece.

        The long description of the piece.

        :param full_description: The full_description of this Piece.
        :type full_description: str
        """
        if full_description is not None and len(full_description) > 1200:
            raise ValueError("Invalid value for `full_description`, length must be less than or equal to `1200`")

        self._full_description = full_description

    @property
    def id(self):
        """Gets the id of this Piece.

        The unique ID of the piece. Generated at creation.

        :return: The id of this Piece.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Piece.

        The unique ID of the piece. Generated at creation.

        :param id: The id of this Piece.
        :type id: int
        """
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def image_cd_drive_uri(self):
        """Gets the image_cd_drive_uri of this Piece.

        The URI to the piece image content in CD Drive. Format should be 'cddrive:id:{value}' or 'cddrive://{path}'. This property is only used on modification and is not returned.

        :return: The image_cd_drive_uri of this Piece.
        :rtype: str
        """
        return self._image_cd_drive_uri

    @image_cd_drive_uri.setter
    def image_cd_drive_uri(self, image_cd_drive_uri):
        """Sets the image_cd_drive_uri of this Piece.

        The URI to the piece image content in CD Drive. Format should be 'cddrive:id:{value}' or 'cddrive://{path}'. This property is only used on modification and is not returned.

        :param image_cd_drive_uri: The image_cd_drive_uri of this Piece.
        :type image_cd_drive_uri: str
        """

        self._image_cd_drive_uri = image_cd_drive_uri

    @property
    def image_file_name(self):
        """Gets the image_file_name of this Piece.

        The name of the piece image file. Generated at creation.

        :return: The image_file_name of this Piece.
        :rtype: str
        """
        return self._image_file_name

    @image_file_name.setter
    def image_file_name(self, image_file_name):
        """Sets the image_file_name of this Piece.

        The name of the piece image file. Generated at creation.

        :param image_file_name: The image_file_name of this Piece.
        :type image_file_name: str
        """

        self._image_file_name = image_file_name

    @property
    def image_file_size(self):
        """Gets the image_file_size of this Piece.

        The size of the piece image file in bytes. Generated at creation.

        :return: The image_file_size of this Piece.
        :rtype: int
        """
        return self._image_file_size

    @image_file_size.setter
    def image_file_size(self, image_file_size):
        """Sets the image_file_size of this Piece.

        The size of the piece image file in bytes. Generated at creation.

        :param image_file_size: The image_file_size of this Piece.
        :type image_file_size: int
        """

        self._image_file_size = image_file_size

    @property
    def image_original_file_name(self):
        """Gets the image_original_file_name of this Piece.

        The user's original name of the piece image file.

        :return: The image_original_file_name of this Piece.
        :rtype: str
        """
        return self._image_original_file_name

    @image_original_file_name.setter
    def image_original_file_name(self, image_original_file_name):
        """Sets the image_original_file_name of this Piece.

        The user's original name of the piece image file.

        :param image_original_file_name: The image_original_file_name of this Piece.
        :type image_original_file_name: str
        """

        self._image_original_file_name = image_original_file_name

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Piece.

        The date the piece was last modified/updated. Automatically updated on any write operation.

        :return: The last_modified_date of this Piece.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Piece.

        The date the piece was last modified/updated. Automatically updated on any write operation.

        :param last_modified_date: The last_modified_date of this Piece.
        :type last_modified_date: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def relative_end_time(self):
        """Gets the relative_end_time of this Piece.

        Seconds relative to the start of the episode.

        :return: The relative_end_time of this Piece.
        :rtype: int
        """
        return self._relative_end_time

    @relative_end_time.setter
    def relative_end_time(self, relative_end_time):
        """Sets the relative_end_time of this Piece.

        Seconds relative to the start of the episode.

        :param relative_end_time: The relative_end_time of this Piece.
        :type relative_end_time: int
        """
        if relative_end_time is None:
            raise ValueError("Invalid value for `relative_end_time`, must not be `None`")

        self._relative_end_time = relative_end_time

    @property
    def relative_start_time(self):
        """Gets the relative_start_time of this Piece.

        Seconds relative to the start of the episode.

        :return: The relative_start_time of this Piece.
        :rtype: int
        """
        return self._relative_start_time

    @relative_start_time.setter
    def relative_start_time(self, relative_start_time):
        """Sets the relative_start_time of this Piece.

        Seconds relative to the start of the episode.

        :param relative_start_time: The relative_start_time of this Piece.
        :type relative_start_time: int
        """
        if relative_start_time is None:
            raise ValueError("Invalid value for `relative_start_time`, must not be `None`")

        self._relative_start_time = relative_start_time

    @property
    def segment_number(self):
        """Gets the segment_number of this Piece.

        The number of the segment that this piece is in, starting with 1. This is an optional field but it can be used to provide more detail by linking the piece to a specific audio segment.

        :return: The segment_number of this Piece.
        :rtype: int
        """
        return self._segment_number

    @segment_number.setter
    def segment_number(self, segment_number):
        """Sets the segment_number of this Piece.

        The number of the segment that this piece is in, starting with 1. This is an optional field but it can be used to provide more detail by linking the piece to a specific audio segment.

        :param segment_number: The segment_number of this Piece.
        :type segment_number: int
        """
        if segment_number is not None and segment_number < 1:
            raise ValueError("Invalid value for `segment_number`, must be a value greater than or equal to `1`")

        self._segment_number = segment_number

    @property
    def title(self):
        """Gets the title of this Piece.

        The human readable title of the piece that is normally displayed on an end user's device.

        :return: The title of this Piece.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Piece.

        The human readable title of the piece that is normally displayed on an end user's device.

        :param title: The title of this Piece.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 37:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `37`")

        self._title = title
