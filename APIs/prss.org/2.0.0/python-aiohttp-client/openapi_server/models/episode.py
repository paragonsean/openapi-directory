# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Episode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_air_date: datetime=None, begin_transmission_date: datetime=None, created_date: datetime=None, customer_id: int=None, end_air_date: datetime=None, end_transmission_date: datetime=None, id: int=None, last_modified_date: datetime=None, program_id: int=None, title: str=None):
        """Episode - a model defined in OpenAPI

        :param begin_air_date: The begin_air_date of this Episode.
        :param begin_transmission_date: The begin_transmission_date of this Episode.
        :param created_date: The created_date of this Episode.
        :param customer_id: The customer_id of this Episode.
        :param end_air_date: The end_air_date of this Episode.
        :param end_transmission_date: The end_transmission_date of this Episode.
        :param id: The id of this Episode.
        :param last_modified_date: The last_modified_date of this Episode.
        :param program_id: The program_id of this Episode.
        :param title: The title of this Episode.
        """
        self.openapi_types = {
            'begin_air_date': datetime,
            'begin_transmission_date': datetime,
            'created_date': datetime,
            'customer_id': int,
            'end_air_date': datetime,
            'end_transmission_date': datetime,
            'id': int,
            'last_modified_date': datetime,
            'program_id': int,
            'title': str
        }

        self.attribute_map = {
            'begin_air_date': 'beginAirDate',
            'begin_transmission_date': 'beginTransmissionDate',
            'created_date': 'createdDate',
            'customer_id': 'customerId',
            'end_air_date': 'endAirDate',
            'end_transmission_date': 'endTransmissionDate',
            'id': 'id',
            'last_modified_date': 'lastModifiedDate',
            'program_id': 'programId',
            'title': 'title'
        }

        self._begin_air_date = begin_air_date
        self._begin_transmission_date = begin_transmission_date
        self._created_date = created_date
        self._customer_id = customer_id
        self._end_air_date = end_air_date
        self._end_transmission_date = end_transmission_date
        self._id = id
        self._last_modified_date = last_modified_date
        self._program_id = program_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Episode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Episode of this Episode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_air_date(self):
        """Gets the begin_air_date of this Episode.

        The date the air window opens for the episode.

        :return: The begin_air_date of this Episode.
        :rtype: datetime
        """
        return self._begin_air_date

    @begin_air_date.setter
    def begin_air_date(self, begin_air_date):
        """Sets the begin_air_date of this Episode.

        The date the air window opens for the episode.

        :param begin_air_date: The begin_air_date of this Episode.
        :type begin_air_date: datetime
        """
        if begin_air_date is None:
            raise ValueError("Invalid value for `begin_air_date`, must not be `None`")

        self._begin_air_date = begin_air_date

    @property
    def begin_transmission_date(self):
        """Gets the begin_transmission_date of this Episode.

        The date the live stream begins for the episode. Only set for live and LWSF episodes.

        :return: The begin_transmission_date of this Episode.
        :rtype: datetime
        """
        return self._begin_transmission_date

    @begin_transmission_date.setter
    def begin_transmission_date(self, begin_transmission_date):
        """Sets the begin_transmission_date of this Episode.

        The date the live stream begins for the episode. Only set for live and LWSF episodes.

        :param begin_transmission_date: The begin_transmission_date of this Episode.
        :type begin_transmission_date: datetime
        """

        self._begin_transmission_date = begin_transmission_date

    @property
    def created_date(self):
        """Gets the created_date of this Episode.

        The date the segment was created. Generated at creation.

        :return: The created_date of this Episode.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Episode.

        The date the segment was created. Generated at creation.

        :param created_date: The created_date of this Episode.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def customer_id(self):
        """Gets the customer_id of this Episode.

        The ID of the customer that owns this programs.

        :return: The customer_id of this Episode.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Episode.

        The ID of the customer that owns this programs.

        :param customer_id: The customer_id of this Episode.
        :type customer_id: int
        """
        if customer_id is not None and customer_id < 0:
            raise ValueError("Invalid value for `customer_id`, must be a value greater than or equal to `0`")

        self._customer_id = customer_id

    @property
    def end_air_date(self):
        """Gets the end_air_date of this Episode.

        The date the air window closes for the episode.

        :return: The end_air_date of this Episode.
        :rtype: datetime
        """
        return self._end_air_date

    @end_air_date.setter
    def end_air_date(self, end_air_date):
        """Sets the end_air_date of this Episode.

        The date the air window closes for the episode.

        :param end_air_date: The end_air_date of this Episode.
        :type end_air_date: datetime
        """
        if end_air_date is None:
            raise ValueError("Invalid value for `end_air_date`, must not be `None`")

        self._end_air_date = end_air_date

    @property
    def end_transmission_date(self):
        """Gets the end_transmission_date of this Episode.

        The date the live stream ends for the episode. Only set for live and LWSF episodes.

        :return: The end_transmission_date of this Episode.
        :rtype: datetime
        """
        return self._end_transmission_date

    @end_transmission_date.setter
    def end_transmission_date(self, end_transmission_date):
        """Sets the end_transmission_date of this Episode.

        The date the live stream ends for the episode. Only set for live and LWSF episodes.

        :param end_transmission_date: The end_transmission_date of this Episode.
        :type end_transmission_date: datetime
        """

        self._end_transmission_date = end_transmission_date

    @property
    def id(self):
        """Gets the id of this Episode.

        The unique ID of the episode. Generated at creation.

        :return: The id of this Episode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Episode.

        The unique ID of the episode. Generated at creation.

        :param id: The id of this Episode.
        :type id: int
        """
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Episode.

        The date the segment was last modified/updated. Automatically updated on any write operation.

        :return: The last_modified_date of this Episode.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Episode.

        The date the segment was last modified/updated. Automatically updated on any write operation.

        :param last_modified_date: The last_modified_date of this Episode.
        :type last_modified_date: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def program_id(self):
        """Gets the program_id of this Episode.

        The ID of the program that owns this episode.

        :return: The program_id of this Episode.
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this Episode.

        The ID of the program that owns this episode.

        :param program_id: The program_id of this Episode.
        :type program_id: int
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")
        if program_id is not None and program_id < 0:
            raise ValueError("Invalid value for `program_id`, must be a value greater than or equal to `0`")

        self._program_id = program_id

    @property
    def title(self):
        """Gets the title of this Episode.

        The title of the program.

        :return: The title of this Episode.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Episode.

        The title of the program.

        :param title: The title of this Episode.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
