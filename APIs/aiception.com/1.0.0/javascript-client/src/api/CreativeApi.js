/**
 * AIception Interactive
 * Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtisticImagePostRequest from '../model/ArtisticImagePostRequest';
import Task from '../model/Task';

/**
* Creative service.
* @module api/CreativeApi
* @version 1.0.0
*/
export default class CreativeApi {

    /**
    * Constructs a new CreativeApi. 
    * @alias module:api/CreativeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the artisticImagePost operation.
     * @callback module:api/CreativeApi~artisticImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an artistic image [ image_url, style_url -> id ]
     * Given an image content and a style image create a new stylized image of the content.
     * @param {module:model/ArtisticImagePostRequest} body The content image and the style image
     * @param {module:api/CreativeApi~artisticImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    artisticImagePost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling artisticImagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/artistic_image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artisticImageTaskIdGet operation.
     * @callback module:api/CreativeApi~artisticImageTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a artistic image by task id [ id -> artistic image task ]
     * The artistic_image will have the urls of the stylized images.
     * @param {String} taskId An internal id for the task
     * @param {module:api/CreativeApi~artisticImageTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    artisticImageTaskIdGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling artisticImageTaskIdGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/artistic_image/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
