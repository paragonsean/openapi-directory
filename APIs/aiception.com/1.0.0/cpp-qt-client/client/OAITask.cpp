/**
 * AIception Interactive
 * Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_this_url_isSet = false;
    m_this_url_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("answer")]);
    m_answer_isSet = !json[QString("answer")].isNull() && m_answer_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_this_url_isValid = ::OpenAPI::fromJsonValue(m_this_url, json[QString("this_url")]);
    m_this_url_isSet = !json[QString("this_url")].isNull() && m_this_url_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_this_url_isSet) {
        obj.insert(QString("this_url"), ::OpenAPI::toJsonValue(m_this_url));
    }
    return obj;
}

double OAITask::getAnswer() const {
    return m_answer;
}
void OAITask::setAnswer(const double &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAITask::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAITask::is_answer_Valid() const{
    return m_answer_isValid;
}

QString OAITask::getImageUrl() const {
    return m_image_url;
}
void OAITask::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAITask::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAITask::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAITask::getThisUrl() const {
    return m_this_url;
}
void OAITask::setThisUrl(const QString &this_url) {
    m_this_url = this_url;
    m_this_url_isSet = true;
}

bool OAITask::is_this_url_Set() const{
    return m_this_url_isSet;
}

bool OAITask::is_this_url_Valid() const{
    return m_this_url_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_this_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_url_isValid && true;
}

} // namespace OpenAPI
