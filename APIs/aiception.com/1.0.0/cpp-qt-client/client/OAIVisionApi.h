/**
 * AIception Interactive
 * Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVisionApi_H
#define OAI_OAIVisionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITask.h"
#include "OAI_adult_content_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVisionApi : public QObject {
    Q_OBJECT

public:
    OAIVisionApi(const int timeOut = 0);
    ~OAIVisionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAI_adult_content_post_request [required]
    */
    virtual void adultContentPost(const OAI_adult_content_post_request &body);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void adultContentTaskIdGet(const QString &task_id);

    /**
    * @param[in]  body OAI_adult_content_post_request [required]
    */
    virtual void detectObjectPost(const OAI_adult_content_post_request &body);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void detectObjectTaskIdGet(const QString &task_id);

    /**
    * @param[in]  body OAI_adult_content_post_request [required]
    */
    virtual void faceAgePost(const OAI_adult_content_post_request &body);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void faceAgeTaskIdGet(const QString &task_id);

    /**
    * @param[in]  body OAI_adult_content_post_request [required]
    */
    virtual void facePost(const OAI_adult_content_post_request &body);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void faceTaskIdGet(const QString &task_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adultContentPostCallback(OAIHttpRequestWorker *worker);
    void adultContentTaskIdGetCallback(OAIHttpRequestWorker *worker);
    void detectObjectPostCallback(OAIHttpRequestWorker *worker);
    void detectObjectTaskIdGetCallback(OAIHttpRequestWorker *worker);
    void faceAgePostCallback(OAIHttpRequestWorker *worker);
    void faceAgeTaskIdGetCallback(OAIHttpRequestWorker *worker);
    void facePostCallback(OAIHttpRequestWorker *worker);
    void faceTaskIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adultContentPostSignal(OAITask summary);
    void adultContentTaskIdGetSignal(OAITask summary);
    void detectObjectPostSignal(OAITask summary);
    void detectObjectTaskIdGetSignal(OAITask summary);
    void faceAgePostSignal(OAITask summary);
    void faceAgeTaskIdGetSignal(OAITask summary);
    void facePostSignal(OAITask summary);
    void faceTaskIdGetSignal(OAITask summary);


    void adultContentPostSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void adultContentTaskIdGetSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void detectObjectPostSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void detectObjectTaskIdGetSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void faceAgePostSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void faceAgeTaskIdGetSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void facePostSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void faceTaskIdGetSignalFull(OAIHttpRequestWorker *worker, OAITask summary);

    Q_DECL_DEPRECATED_X("Use adultContentPostSignalError() instead")
    void adultContentPostSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adultContentPostSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adultContentTaskIdGetSignalError() instead")
    void adultContentTaskIdGetSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adultContentTaskIdGetSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectObjectPostSignalError() instead")
    void detectObjectPostSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectObjectPostSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectObjectTaskIdGetSignalError() instead")
    void detectObjectTaskIdGetSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectObjectTaskIdGetSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceAgePostSignalError() instead")
    void faceAgePostSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceAgePostSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceAgeTaskIdGetSignalError() instead")
    void faceAgeTaskIdGetSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceAgeTaskIdGetSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use facePostSignalError() instead")
    void facePostSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void facePostSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceTaskIdGetSignalError() instead")
    void faceTaskIdGetSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceTaskIdGetSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adultContentPostSignalErrorFull() instead")
    void adultContentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adultContentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adultContentTaskIdGetSignalErrorFull() instead")
    void adultContentTaskIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adultContentTaskIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectObjectPostSignalErrorFull() instead")
    void detectObjectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectObjectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectObjectTaskIdGetSignalErrorFull() instead")
    void detectObjectTaskIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectObjectTaskIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceAgePostSignalErrorFull() instead")
    void faceAgePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceAgePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceAgeTaskIdGetSignalErrorFull() instead")
    void faceAgeTaskIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceAgeTaskIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use facePostSignalErrorFull() instead")
    void facePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void facePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceTaskIdGetSignalErrorFull() instead")
    void faceTaskIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceTaskIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
