/*
 * AIception Interactive
 * Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdultContentPostRequest;
import org.openapitools.client.model.Task;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VisionApi
 */
@Disabled
public class VisionApiTest {

    private final VisionApi api = new VisionApi();

    /**
     * Image contains nudity or sexually explicit content? [ image_url -&gt; id ]
     *
     * Creates a new adult_content task that tells the if the image has nudity or sexual content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adultContentPostTest() throws ApiException {
        AdultContentPostRequest body = null;
        Task response = api.adultContentPost(body);
        // TODO: test validations
    }

    /**
     * Gets the adult_content task [ id -&gt; adult content task ]
     *
     * Gets the adult_content task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adultContentTaskIdGetTest() throws ApiException {
        String taskId = null;
        Task response = api.adultContentTaskIdGet(taskId);
        // TODO: test validations
    }

    /**
     * What is that object? [ image_url -&gt; id ]
     *
     * Creates a new detect object task that recognizes the object in the image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectObjectPostTest() throws ApiException {
        AdultContentPostRequest body = null;
        Task response = api.detectObjectPost(body);
        // TODO: test validations
    }

    /**
     * Gets the detect_object task [ id -&gt; detect object task]
     *
     * Gets the detect_object task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectObjectTaskIdGetTest() throws ApiException {
        String taskId = null;
        Task response = api.detectObjectTaskIdGet(taskId);
        // TODO: test validations
    }

    /**
     * How old is the person in the image? [ image_url -&gt; id ]
     *
     * Creates a new face age task that approximates the age of the person in the image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void faceAgePostTest() throws ApiException {
        AdultContentPostRequest body = null;
        Task response = api.faceAgePost(body);
        // TODO: test validations
    }

    /**
     * Gets the face_age task [ id -&gt; face age task ]
     *
     * Gets the face_age task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void faceAgeTaskIdGetTest() throws ApiException {
        String taskId = null;
        Task response = api.faceAgeTaskIdGet(taskId);
        // TODO: test validations
    }

    /**
     * Find all faces in the image [ image_url -&gt; id ]
     *
     * Get a list of all the locations of the faces in the image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void facePostTest() throws ApiException {
        AdultContentPostRequest body = null;
        Task response = api.facePost(body);
        // TODO: test validations
    }

    /**
     * Gets the face task [ id -&gt; face task ]
     *
     * Gets the face task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void faceTaskIdGetTest() throws ApiException {
        String taskId = null;
        Task response = api.faceTaskIdGet(taskId);
        // TODO: test validations
    }

}
