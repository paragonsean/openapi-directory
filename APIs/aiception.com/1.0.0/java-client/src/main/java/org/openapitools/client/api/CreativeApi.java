/*
 * AIception Interactive
 * Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArtisticImagePostRequest;
import org.openapitools.client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreativeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreativeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreativeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for artisticImagePost
     * @param body The content image and the style image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artisticImagePostCall(ArtisticImagePostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/artistic_image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artisticImagePostValidateBeforeCall(ArtisticImagePostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling artisticImagePost(Async)");
        }

        return artisticImagePostCall(body, _callback);

    }

    /**
     * Create an artistic image [ image_url, style_url -&gt; id ]
     * Given an image content and a style image create a new stylized image of the content.
     * @param body The content image and the style image (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public Task artisticImagePost(ArtisticImagePostRequest body) throws ApiException {
        ApiResponse<Task> localVarResp = artisticImagePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create an artistic image [ image_url, style_url -&gt; id ]
     * Given an image content and a style image create a new stylized image of the content.
     * @param body The content image and the style image (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> artisticImagePostWithHttpInfo(ArtisticImagePostRequest body) throws ApiException {
        okhttp3.Call localVarCall = artisticImagePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an artistic image [ image_url, style_url -&gt; id ] (asynchronously)
     * Given an image content and a style image create a new stylized image of the content.
     * @param body The content image and the style image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artisticImagePostAsync(ArtisticImagePostRequest body, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = artisticImagePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artisticImageTaskIdGet
     * @param taskId An internal id for the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the artistic_image task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artisticImageTaskIdGetCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artistic_image/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artisticImageTaskIdGetValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling artisticImageTaskIdGet(Async)");
        }

        return artisticImageTaskIdGetCall(taskId, _callback);

    }

    /**
     * Gets a artistic image by task id [ id -&gt; artistic image task ]
     * The artistic_image will have the urls of the stylized images.
     * @param taskId An internal id for the task (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the artistic_image task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public Task artisticImageTaskIdGet(String taskId) throws ApiException {
        ApiResponse<Task> localVarResp = artisticImageTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Gets a artistic image by task id [ id -&gt; artistic image task ]
     * The artistic_image will have the urls of the stylized images.
     * @param taskId An internal id for the task (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the artistic_image task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> artisticImageTaskIdGetWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = artisticImageTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a artistic image by task id [ id -&gt; artistic image task ] (asynchronously)
     * The artistic_image will have the urls of the stylized images.
     * @param taskId An internal id for the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the artistic_image task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artisticImageTaskIdGetAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = artisticImageTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
