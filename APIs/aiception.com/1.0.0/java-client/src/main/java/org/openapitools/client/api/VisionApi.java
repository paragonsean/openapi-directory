/*
 * AIception Interactive
 * Here you can play & test & prototype all the endpoints using just your browser! Go ahead!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdultContentPostRequest;
import org.openapitools.client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VisionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VisionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VisionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adultContentPost
     * @param body The image to analyze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adultContentPostCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/adult_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adultContentPostValidateBeforeCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adultContentPost(Async)");
        }

        return adultContentPostCall(body, _callback);

    }

    /**
     * Image contains nudity or sexually explicit content? [ image_url -&gt; id ]
     * Creates a new adult_content task that tells the if the image has nudity or sexual content.
     * @param body The image to analyze (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public Task adultContentPost(AdultContentPostRequest body) throws ApiException {
        ApiResponse<Task> localVarResp = adultContentPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Image contains nudity or sexually explicit content? [ image_url -&gt; id ]
     * Creates a new adult_content task that tells the if the image has nudity or sexual content.
     * @param body The image to analyze (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> adultContentPostWithHttpInfo(AdultContentPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = adultContentPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image contains nudity or sexually explicit content? [ image_url -&gt; id ] (asynchronously)
     * Creates a new adult_content task that tells the if the image has nudity or sexual content.
     * @param body The image to analyze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adultContentPostAsync(AdultContentPostRequest body, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = adultContentPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adultContentTaskIdGet
     * @param taskId An internal id for the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the adult_content task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adultContentTaskIdGetCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adult_content/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adultContentTaskIdGetValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling adultContentTaskIdGet(Async)");
        }

        return adultContentTaskIdGetCall(taskId, _callback);

    }

    /**
     * Gets the adult_content task [ id -&gt; adult content task ]
     * Gets the adult_content task.
     * @param taskId An internal id for the task (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the adult_content task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public Task adultContentTaskIdGet(String taskId) throws ApiException {
        ApiResponse<Task> localVarResp = adultContentTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Gets the adult_content task [ id -&gt; adult content task ]
     * Gets the adult_content task.
     * @param taskId An internal id for the task (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the adult_content task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> adultContentTaskIdGetWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = adultContentTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the adult_content task [ id -&gt; adult content task ] (asynchronously)
     * Gets the adult_content task.
     * @param taskId An internal id for the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the adult_content task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adultContentTaskIdGetAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = adultContentTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectObjectPost
     * @param body The image to analyze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectObjectPostCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/detect_object";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectObjectPostValidateBeforeCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectObjectPost(Async)");
        }

        return detectObjectPostCall(body, _callback);

    }

    /**
     * What is that object? [ image_url -&gt; id ]
     * Creates a new detect object task that recognizes the object in the image.
     * @param body The image to analyze (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public Task detectObjectPost(AdultContentPostRequest body) throws ApiException {
        ApiResponse<Task> localVarResp = detectObjectPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * What is that object? [ image_url -&gt; id ]
     * Creates a new detect object task that recognizes the object in the image.
     * @param body The image to analyze (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> detectObjectPostWithHttpInfo(AdultContentPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = detectObjectPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * What is that object? [ image_url -&gt; id ] (asynchronously)
     * Creates a new detect object task that recognizes the object in the image.
     * @param body The image to analyze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectObjectPostAsync(AdultContentPostRequest body, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectObjectPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectObjectTaskIdGet
     * @param taskId An internal id for the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the detect_object task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectObjectTaskIdGetCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/detect_object/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectObjectTaskIdGetValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling detectObjectTaskIdGet(Async)");
        }

        return detectObjectTaskIdGetCall(taskId, _callback);

    }

    /**
     * Gets the detect_object task [ id -&gt; detect object task]
     * Gets the detect_object task.
     * @param taskId An internal id for the task (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the detect_object task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public Task detectObjectTaskIdGet(String taskId) throws ApiException {
        ApiResponse<Task> localVarResp = detectObjectTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Gets the detect_object task [ id -&gt; detect object task]
     * Gets the detect_object task.
     * @param taskId An internal id for the task (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the detect_object task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> detectObjectTaskIdGetWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = detectObjectTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the detect_object task [ id -&gt; detect object task] (asynchronously)
     * Gets the detect_object task.
     * @param taskId An internal id for the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the detect_object task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectObjectTaskIdGetAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectObjectTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for faceAgePost
     * @param body The image to analyze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faceAgePostCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/face_age";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call faceAgePostValidateBeforeCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling faceAgePost(Async)");
        }

        return faceAgePostCall(body, _callback);

    }

    /**
     * How old is the person in the image? [ image_url -&gt; id ]
     * Creates a new face age task that approximates the age of the person in the image.
     * @param body The image to analyze (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public Task faceAgePost(AdultContentPostRequest body) throws ApiException {
        ApiResponse<Task> localVarResp = faceAgePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * How old is the person in the image? [ image_url -&gt; id ]
     * Creates a new face age task that approximates the age of the person in the image.
     * @param body The image to analyze (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> faceAgePostWithHttpInfo(AdultContentPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = faceAgePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * How old is the person in the image? [ image_url -&gt; id ] (asynchronously)
     * Creates a new face age task that approximates the age of the person in the image.
     * @param body The image to analyze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faceAgePostAsync(AdultContentPostRequest body, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = faceAgePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for faceAgeTaskIdGet
     * @param taskId An internal id for the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face_age task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faceAgeTaskIdGetCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/face_age/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call faceAgeTaskIdGetValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling faceAgeTaskIdGet(Async)");
        }

        return faceAgeTaskIdGetCall(taskId, _callback);

    }

    /**
     * Gets the face_age task [ id -&gt; face age task ]
     * Gets the face_age task.
     * @param taskId An internal id for the task (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face_age task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public Task faceAgeTaskIdGet(String taskId) throws ApiException {
        ApiResponse<Task> localVarResp = faceAgeTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Gets the face_age task [ id -&gt; face age task ]
     * Gets the face_age task.
     * @param taskId An internal id for the task (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face_age task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> faceAgeTaskIdGetWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = faceAgeTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the face_age task [ id -&gt; face age task ] (asynchronously)
     * Gets the face_age task.
     * @param taskId An internal id for the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face_age task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faceAgeTaskIdGetAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = faceAgeTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for facePost
     * @param body The image to analyze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facePostCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/face";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facePostValidateBeforeCall(AdultContentPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling facePost(Async)");
        }

        return facePostCall(body, _callback);

    }

    /**
     * Find all faces in the image [ image_url -&gt; id ]
     * Get a list of all the locations of the faces in the image.
     * @param body The image to analyze (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public Task facePost(AdultContentPostRequest body) throws ApiException {
        ApiResponse<Task> localVarResp = facePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Find all faces in the image [ image_url -&gt; id ]
     * Get a list of all the locations of the faces in the image.
     * @param body The image to analyze (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> facePostWithHttpInfo(AdultContentPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = facePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find all faces in the image [ image_url -&gt; id ] (asynchronously)
     * Get a list of all the locations of the faces in the image.
     * @param body The image to analyze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task succesfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Task could not be created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facePostAsync(AdultContentPostRequest body, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = facePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for faceTaskIdGet
     * @param taskId An internal id for the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faceTaskIdGetCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/face/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call faceTaskIdGetValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling faceTaskIdGet(Async)");
        }

        return faceTaskIdGetCall(taskId, _callback);

    }

    /**
     * Gets the face task [ id -&gt; face task ]
     * Gets the face task.
     * @param taskId An internal id for the task (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public Task faceTaskIdGet(String taskId) throws ApiException {
        ApiResponse<Task> localVarResp = faceTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Gets the face task [ id -&gt; face task ]
     * Gets the face task.
     * @param taskId An internal id for the task (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> faceTaskIdGetWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = faceTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the face task [ id -&gt; face task ] (asynchronously)
     * Gets the face task.
     * @param taskId An internal id for the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contents of the face task. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Task does not exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faceTaskIdGetAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = faceTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
