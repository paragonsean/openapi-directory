# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.current_obs_weather import CurrentObsWeather
from openapi_server import util


class CurrentObs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_temp: float=None, aqi: float=None, city_name: str=None, clouds: int=None, country_code: str=None, datetime: str=None, dewpt: float=None, dhi: float=None, dni: float=None, elev_angle: float=None, ghi: float=None, gust: float=None, hour_angle: float=None, lat: float=None, lon: float=None, ob_time: str=None, pod: str=None, precip: float=None, pres: float=None, rh: int=None, slp: float=None, snow: float=None, solar_rad: float=None, sources: List[str]=None, state_code: str=None, station: str=None, sunrise: str=None, sunset: str=None, temp: float=None, timezone: str=None, ts: float=None, uv: float=None, vis: int=None, weather: CurrentObsWeather=None, wind_cdir: str=None, wind_cdir_full: str=None, wind_dir: int=None, wind_speed: float=None):
        """CurrentObs - a model defined in OpenAPI

        :param app_temp: The app_temp of this CurrentObs.
        :param aqi: The aqi of this CurrentObs.
        :param city_name: The city_name of this CurrentObs.
        :param clouds: The clouds of this CurrentObs.
        :param country_code: The country_code of this CurrentObs.
        :param datetime: The datetime of this CurrentObs.
        :param dewpt: The dewpt of this CurrentObs.
        :param dhi: The dhi of this CurrentObs.
        :param dni: The dni of this CurrentObs.
        :param elev_angle: The elev_angle of this CurrentObs.
        :param ghi: The ghi of this CurrentObs.
        :param gust: The gust of this CurrentObs.
        :param hour_angle: The hour_angle of this CurrentObs.
        :param lat: The lat of this CurrentObs.
        :param lon: The lon of this CurrentObs.
        :param ob_time: The ob_time of this CurrentObs.
        :param pod: The pod of this CurrentObs.
        :param precip: The precip of this CurrentObs.
        :param pres: The pres of this CurrentObs.
        :param rh: The rh of this CurrentObs.
        :param slp: The slp of this CurrentObs.
        :param snow: The snow of this CurrentObs.
        :param solar_rad: The solar_rad of this CurrentObs.
        :param sources: The sources of this CurrentObs.
        :param state_code: The state_code of this CurrentObs.
        :param station: The station of this CurrentObs.
        :param sunrise: The sunrise of this CurrentObs.
        :param sunset: The sunset of this CurrentObs.
        :param temp: The temp of this CurrentObs.
        :param timezone: The timezone of this CurrentObs.
        :param ts: The ts of this CurrentObs.
        :param uv: The uv of this CurrentObs.
        :param vis: The vis of this CurrentObs.
        :param weather: The weather of this CurrentObs.
        :param wind_cdir: The wind_cdir of this CurrentObs.
        :param wind_cdir_full: The wind_cdir_full of this CurrentObs.
        :param wind_dir: The wind_dir of this CurrentObs.
        :param wind_speed: The wind_speed of this CurrentObs.
        """
        self.openapi_types = {
            'app_temp': float,
            'aqi': float,
            'city_name': str,
            'clouds': int,
            'country_code': str,
            'datetime': str,
            'dewpt': float,
            'dhi': float,
            'dni': float,
            'elev_angle': float,
            'ghi': float,
            'gust': float,
            'hour_angle': float,
            'lat': float,
            'lon': float,
            'ob_time': str,
            'pod': str,
            'precip': float,
            'pres': float,
            'rh': int,
            'slp': float,
            'snow': float,
            'solar_rad': float,
            'sources': List[str],
            'state_code': str,
            'station': str,
            'sunrise': str,
            'sunset': str,
            'temp': float,
            'timezone': str,
            'ts': float,
            'uv': float,
            'vis': int,
            'weather': CurrentObsWeather,
            'wind_cdir': str,
            'wind_cdir_full': str,
            'wind_dir': int,
            'wind_speed': float
        }

        self.attribute_map = {
            'app_temp': 'app_temp',
            'aqi': 'aqi',
            'city_name': 'city_name',
            'clouds': 'clouds',
            'country_code': 'country_code',
            'datetime': 'datetime',
            'dewpt': 'dewpt',
            'dhi': 'dhi',
            'dni': 'dni',
            'elev_angle': 'elev_angle',
            'ghi': 'ghi',
            'gust': 'gust',
            'hour_angle': 'hour_angle',
            'lat': 'lat',
            'lon': 'lon',
            'ob_time': 'ob_time',
            'pod': 'pod',
            'precip': 'precip',
            'pres': 'pres',
            'rh': 'rh',
            'slp': 'slp',
            'snow': 'snow',
            'solar_rad': 'solar_rad',
            'sources': 'sources',
            'state_code': 'state_code',
            'station': 'station',
            'sunrise': 'sunrise',
            'sunset': 'sunset',
            'temp': 'temp',
            'timezone': 'timezone',
            'ts': 'ts',
            'uv': 'uv',
            'vis': 'vis',
            'weather': 'weather',
            'wind_cdir': 'wind_cdir',
            'wind_cdir_full': 'wind_cdir_full',
            'wind_dir': 'wind_dir',
            'wind_speed': 'wind_speed'
        }

        self._app_temp = app_temp
        self._aqi = aqi
        self._city_name = city_name
        self._clouds = clouds
        self._country_code = country_code
        self._datetime = datetime
        self._dewpt = dewpt
        self._dhi = dhi
        self._dni = dni
        self._elev_angle = elev_angle
        self._ghi = ghi
        self._gust = gust
        self._hour_angle = hour_angle
        self._lat = lat
        self._lon = lon
        self._ob_time = ob_time
        self._pod = pod
        self._precip = precip
        self._pres = pres
        self._rh = rh
        self._slp = slp
        self._snow = snow
        self._solar_rad = solar_rad
        self._sources = sources
        self._state_code = state_code
        self._station = station
        self._sunrise = sunrise
        self._sunset = sunset
        self._temp = temp
        self._timezone = timezone
        self._ts = ts
        self._uv = uv
        self._vis = vis
        self._weather = weather
        self._wind_cdir = wind_cdir
        self._wind_cdir_full = wind_cdir_full
        self._wind_dir = wind_dir
        self._wind_speed = wind_speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrentObs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrentObs of this CurrentObs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_temp(self):
        """Gets the app_temp of this CurrentObs.

        Apparent temperature - Default (C)

        :return: The app_temp of this CurrentObs.
        :rtype: float
        """
        return self._app_temp

    @app_temp.setter
    def app_temp(self, app_temp):
        """Sets the app_temp of this CurrentObs.

        Apparent temperature - Default (C)

        :param app_temp: The app_temp of this CurrentObs.
        :type app_temp: float
        """

        self._app_temp = app_temp

    @property
    def aqi(self):
        """Gets the aqi of this CurrentObs.

        Air quality index (US EPA standard 0 to +500)

        :return: The aqi of this CurrentObs.
        :rtype: float
        """
        return self._aqi

    @aqi.setter
    def aqi(self, aqi):
        """Sets the aqi of this CurrentObs.

        Air quality index (US EPA standard 0 to +500)

        :param aqi: The aqi of this CurrentObs.
        :type aqi: float
        """

        self._aqi = aqi

    @property
    def city_name(self):
        """Gets the city_name of this CurrentObs.

        City name (closest)

        :return: The city_name of this CurrentObs.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this CurrentObs.

        City name (closest)

        :param city_name: The city_name of this CurrentObs.
        :type city_name: str
        """

        self._city_name = city_name

    @property
    def clouds(self):
        """Gets the clouds of this CurrentObs.

        Cloud cover (%)

        :return: The clouds of this CurrentObs.
        :rtype: int
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this CurrentObs.

        Cloud cover (%)

        :param clouds: The clouds of this CurrentObs.
        :type clouds: int
        """

        self._clouds = clouds

    @property
    def country_code(self):
        """Gets the country_code of this CurrentObs.

        Country abbreviation

        :return: The country_code of this CurrentObs.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CurrentObs.

        Country abbreviation

        :param country_code: The country_code of this CurrentObs.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def datetime(self):
        """Gets the datetime of this CurrentObs.

        Cycle Hour (UTC) of observation

        :return: The datetime of this CurrentObs.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this CurrentObs.

        Cycle Hour (UTC) of observation

        :param datetime: The datetime of this CurrentObs.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def dewpt(self):
        """Gets the dewpt of this CurrentObs.

        Dew point temperature - default (C)

        :return: The dewpt of this CurrentObs.
        :rtype: float
        """
        return self._dewpt

    @dewpt.setter
    def dewpt(self, dewpt):
        """Sets the dewpt of this CurrentObs.

        Dew point temperature - default (C)

        :param dewpt: The dewpt of this CurrentObs.
        :type dewpt: float
        """

        self._dewpt = dewpt

    @property
    def dhi(self):
        """Gets the dhi of this CurrentObs.

        Diffuse horizontal irradiance (W/m^2)

        :return: The dhi of this CurrentObs.
        :rtype: float
        """
        return self._dhi

    @dhi.setter
    def dhi(self, dhi):
        """Sets the dhi of this CurrentObs.

        Diffuse horizontal irradiance (W/m^2)

        :param dhi: The dhi of this CurrentObs.
        :type dhi: float
        """

        self._dhi = dhi

    @property
    def dni(self):
        """Gets the dni of this CurrentObs.

        Direct normal irradiance (W/m^2)

        :return: The dni of this CurrentObs.
        :rtype: float
        """
        return self._dni

    @dni.setter
    def dni(self, dni):
        """Sets the dni of this CurrentObs.

        Direct normal irradiance (W/m^2)

        :param dni: The dni of this CurrentObs.
        :type dni: float
        """

        self._dni = dni

    @property
    def elev_angle(self):
        """Gets the elev_angle of this CurrentObs.

        Current solar elevation angle (Degrees)

        :return: The elev_angle of this CurrentObs.
        :rtype: float
        """
        return self._elev_angle

    @elev_angle.setter
    def elev_angle(self, elev_angle):
        """Sets the elev_angle of this CurrentObs.

        Current solar elevation angle (Degrees)

        :param elev_angle: The elev_angle of this CurrentObs.
        :type elev_angle: float
        """

        self._elev_angle = elev_angle

    @property
    def ghi(self):
        """Gets the ghi of this CurrentObs.

        Global horizontal irradiance (W/m^2)

        :return: The ghi of this CurrentObs.
        :rtype: float
        """
        return self._ghi

    @ghi.setter
    def ghi(self, ghi):
        """Sets the ghi of this CurrentObs.

        Global horizontal irradiance (W/m^2)

        :param ghi: The ghi of this CurrentObs.
        :type ghi: float
        """

        self._ghi = ghi

    @property
    def gust(self):
        """Gets the gust of this CurrentObs.

        Wind gust speed - Default (m/s)

        :return: The gust of this CurrentObs.
        :rtype: float
        """
        return self._gust

    @gust.setter
    def gust(self, gust):
        """Sets the gust of this CurrentObs.

        Wind gust speed - Default (m/s)

        :param gust: The gust of this CurrentObs.
        :type gust: float
        """

        self._gust = gust

    @property
    def hour_angle(self):
        """Gets the hour_angle of this CurrentObs.

        Current solar hour angle (Degrees)

        :return: The hour_angle of this CurrentObs.
        :rtype: float
        """
        return self._hour_angle

    @hour_angle.setter
    def hour_angle(self, hour_angle):
        """Sets the hour_angle of this CurrentObs.

        Current solar hour angle (Degrees)

        :param hour_angle: The hour_angle of this CurrentObs.
        :type hour_angle: float
        """

        self._hour_angle = hour_angle

    @property
    def lat(self):
        """Gets the lat of this CurrentObs.

        Latitude

        :return: The lat of this CurrentObs.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this CurrentObs.

        Latitude

        :param lat: The lat of this CurrentObs.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this CurrentObs.

        Longitude

        :return: The lon of this CurrentObs.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this CurrentObs.

        Longitude

        :param lon: The lon of this CurrentObs.
        :type lon: float
        """

        self._lon = lon

    @property
    def ob_time(self):
        """Gets the ob_time of this CurrentObs.

        Full time (UTC) of observation (YYYY-MM-DD HH:MM)

        :return: The ob_time of this CurrentObs.
        :rtype: str
        """
        return self._ob_time

    @ob_time.setter
    def ob_time(self, ob_time):
        """Sets the ob_time of this CurrentObs.

        Full time (UTC) of observation (YYYY-MM-DD HH:MM)

        :param ob_time: The ob_time of this CurrentObs.
        :type ob_time: str
        """

        self._ob_time = ob_time

    @property
    def pod(self):
        """Gets the pod of this CurrentObs.

        Part of the day (d = day, n = night)

        :return: The pod of this CurrentObs.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this CurrentObs.

        Part of the day (d = day, n = night)

        :param pod: The pod of this CurrentObs.
        :type pod: str
        """

        self._pod = pod

    @property
    def precip(self):
        """Gets the precip of this CurrentObs.

        Precipitation in last hour - Default (mm)

        :return: The precip of this CurrentObs.
        :rtype: float
        """
        return self._precip

    @precip.setter
    def precip(self, precip):
        """Sets the precip of this CurrentObs.

        Precipitation in last hour - Default (mm)

        :param precip: The precip of this CurrentObs.
        :type precip: float
        """

        self._precip = precip

    @property
    def pres(self):
        """Gets the pres of this CurrentObs.

        Pressure (mb)

        :return: The pres of this CurrentObs.
        :rtype: float
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this CurrentObs.

        Pressure (mb)

        :param pres: The pres of this CurrentObs.
        :type pres: float
        """

        self._pres = pres

    @property
    def rh(self):
        """Gets the rh of this CurrentObs.

        Relative humidity (%)

        :return: The rh of this CurrentObs.
        :rtype: int
        """
        return self._rh

    @rh.setter
    def rh(self, rh):
        """Sets the rh of this CurrentObs.

        Relative humidity (%)

        :param rh: The rh of this CurrentObs.
        :type rh: int
        """

        self._rh = rh

    @property
    def slp(self):
        """Gets the slp of this CurrentObs.

        Mean sea level pressure in millibars (mb)

        :return: The slp of this CurrentObs.
        :rtype: float
        """
        return self._slp

    @slp.setter
    def slp(self, slp):
        """Sets the slp of this CurrentObs.

        Mean sea level pressure in millibars (mb)

        :param slp: The slp of this CurrentObs.
        :type slp: float
        """

        self._slp = slp

    @property
    def snow(self):
        """Gets the snow of this CurrentObs.

        Snowfall in last hour - Default (mm)

        :return: The snow of this CurrentObs.
        :rtype: float
        """
        return self._snow

    @snow.setter
    def snow(self, snow):
        """Sets the snow of this CurrentObs.

        Snowfall in last hour - Default (mm)

        :param snow: The snow of this CurrentObs.
        :type snow: float
        """

        self._snow = snow

    @property
    def solar_rad(self):
        """Gets the solar_rad of this CurrentObs.

        Estimated solar radiation (W/m^2)

        :return: The solar_rad of this CurrentObs.
        :rtype: float
        """
        return self._solar_rad

    @solar_rad.setter
    def solar_rad(self, solar_rad):
        """Sets the solar_rad of this CurrentObs.

        Estimated solar radiation (W/m^2)

        :param solar_rad: The solar_rad of this CurrentObs.
        :type solar_rad: float
        """

        self._solar_rad = solar_rad

    @property
    def sources(self):
        """Gets the sources of this CurrentObs.

        List of data sources used in response

        :return: The sources of this CurrentObs.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CurrentObs.

        List of data sources used in response

        :param sources: The sources of this CurrentObs.
        :type sources: List[str]
        """

        self._sources = sources

    @property
    def state_code(self):
        """Gets the state_code of this CurrentObs.

        State abbreviation

        :return: The state_code of this CurrentObs.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this CurrentObs.

        State abbreviation

        :param state_code: The state_code of this CurrentObs.
        :type state_code: str
        """

        self._state_code = state_code

    @property
    def station(self):
        """Gets the station of this CurrentObs.

        Source Station ID

        :return: The station of this CurrentObs.
        :rtype: str
        """
        return self._station

    @station.setter
    def station(self, station):
        """Sets the station of this CurrentObs.

        Source Station ID

        :param station: The station of this CurrentObs.
        :type station: str
        """

        self._station = station

    @property
    def sunrise(self):
        """Gets the sunrise of this CurrentObs.

        Time (UTC) of Sunrise (HH:MM)

        :return: The sunrise of this CurrentObs.
        :rtype: str
        """
        return self._sunrise

    @sunrise.setter
    def sunrise(self, sunrise):
        """Sets the sunrise of this CurrentObs.

        Time (UTC) of Sunrise (HH:MM)

        :param sunrise: The sunrise of this CurrentObs.
        :type sunrise: str
        """

        self._sunrise = sunrise

    @property
    def sunset(self):
        """Gets the sunset of this CurrentObs.

        Time (UTC) of Sunset (HH:MM)

        :return: The sunset of this CurrentObs.
        :rtype: str
        """
        return self._sunset

    @sunset.setter
    def sunset(self, sunset):
        """Sets the sunset of this CurrentObs.

        Time (UTC) of Sunset (HH:MM)

        :param sunset: The sunset of this CurrentObs.
        :type sunset: str
        """

        self._sunset = sunset

    @property
    def temp(self):
        """Gets the temp of this CurrentObs.

        Temperature - Default (C)

        :return: The temp of this CurrentObs.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this CurrentObs.

        Temperature - Default (C)

        :param temp: The temp of this CurrentObs.
        :type temp: float
        """

        self._temp = temp

    @property
    def timezone(self):
        """Gets the timezone of this CurrentObs.

        Local IANA time zone

        :return: The timezone of this CurrentObs.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CurrentObs.

        Local IANA time zone

        :param timezone: The timezone of this CurrentObs.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def ts(self):
        """Gets the ts of this CurrentObs.

        Unix Timestamp

        :return: The ts of this CurrentObs.
        :rtype: float
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this CurrentObs.

        Unix Timestamp

        :param ts: The ts of this CurrentObs.
        :type ts: float
        """

        self._ts = ts

    @property
    def uv(self):
        """Gets the uv of this CurrentObs.

        UV Index

        :return: The uv of this CurrentObs.
        :rtype: float
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this CurrentObs.

        UV Index

        :param uv: The uv of this CurrentObs.
        :type uv: float
        """

        self._uv = uv

    @property
    def vis(self):
        """Gets the vis of this CurrentObs.

        Visibility - default (M)

        :return: The vis of this CurrentObs.
        :rtype: int
        """
        return self._vis

    @vis.setter
    def vis(self, vis):
        """Sets the vis of this CurrentObs.

        Visibility - default (M)

        :param vis: The vis of this CurrentObs.
        :type vis: int
        """

        self._vis = vis

    @property
    def weather(self):
        """Gets the weather of this CurrentObs.


        :return: The weather of this CurrentObs.
        :rtype: CurrentObsWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this CurrentObs.


        :param weather: The weather of this CurrentObs.
        :type weather: CurrentObsWeather
        """

        self._weather = weather

    @property
    def wind_cdir(self):
        """Gets the wind_cdir of this CurrentObs.

        Cardinal wind direction

        :return: The wind_cdir of this CurrentObs.
        :rtype: str
        """
        return self._wind_cdir

    @wind_cdir.setter
    def wind_cdir(self, wind_cdir):
        """Sets the wind_cdir of this CurrentObs.

        Cardinal wind direction

        :param wind_cdir: The wind_cdir of this CurrentObs.
        :type wind_cdir: str
        """

        self._wind_cdir = wind_cdir

    @property
    def wind_cdir_full(self):
        """Gets the wind_cdir_full of this CurrentObs.

        Cardinal wind direction (text)

        :return: The wind_cdir_full of this CurrentObs.
        :rtype: str
        """
        return self._wind_cdir_full

    @wind_cdir_full.setter
    def wind_cdir_full(self, wind_cdir_full):
        """Sets the wind_cdir_full of this CurrentObs.

        Cardinal wind direction (text)

        :param wind_cdir_full: The wind_cdir_full of this CurrentObs.
        :type wind_cdir_full: str
        """

        self._wind_cdir_full = wind_cdir_full

    @property
    def wind_dir(self):
        """Gets the wind_dir of this CurrentObs.

        Wind direction (degrees)

        :return: The wind_dir of this CurrentObs.
        :rtype: int
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir):
        """Sets the wind_dir of this CurrentObs.

        Wind direction (degrees)

        :param wind_dir: The wind_dir of this CurrentObs.
        :type wind_dir: int
        """

        self._wind_dir = wind_dir

    @property
    def wind_speed(self):
        """Gets the wind_speed of this CurrentObs.

        Wind speed - Default (m/s)

        :return: The wind_speed of this CurrentObs.
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this CurrentObs.

        Wind speed - Default (m/s)

        :param wind_speed: The wind_speed of this CurrentObs.
        :type wind_speed: float
        """

        self._wind_speed = wind_speed
