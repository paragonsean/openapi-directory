# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.history_obj_weather import HistoryObjWeather
from openapi_server import util


class HistoryObj(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_temp: float=None, azimuth: float=None, clouds: int=None, datetime: str=None, dewpt: int=None, dhi: float=None, dni: float=None, elev_angle: float=None, ghi: float=None, h_angle: float=None, pod: str=None, precip: float=None, pres: float=None, revision_status: str=None, rh: int=None, slp: float=None, snow: float=None, solar_rad: float=None, temp: float=None, timestamp_local: str=None, timestamp_utc: str=None, ts: float=None, uv: float=None, vis: float=None, weather: HistoryObjWeather=None, wind_dir: int=None, wind_gust_spd: float=None, wind_spd: float=None):
        """HistoryObj - a model defined in OpenAPI

        :param app_temp: The app_temp of this HistoryObj.
        :param azimuth: The azimuth of this HistoryObj.
        :param clouds: The clouds of this HistoryObj.
        :param datetime: The datetime of this HistoryObj.
        :param dewpt: The dewpt of this HistoryObj.
        :param dhi: The dhi of this HistoryObj.
        :param dni: The dni of this HistoryObj.
        :param elev_angle: The elev_angle of this HistoryObj.
        :param ghi: The ghi of this HistoryObj.
        :param h_angle: The h_angle of this HistoryObj.
        :param pod: The pod of this HistoryObj.
        :param precip: The precip of this HistoryObj.
        :param pres: The pres of this HistoryObj.
        :param revision_status: The revision_status of this HistoryObj.
        :param rh: The rh of this HistoryObj.
        :param slp: The slp of this HistoryObj.
        :param snow: The snow of this HistoryObj.
        :param solar_rad: The solar_rad of this HistoryObj.
        :param temp: The temp of this HistoryObj.
        :param timestamp_local: The timestamp_local of this HistoryObj.
        :param timestamp_utc: The timestamp_utc of this HistoryObj.
        :param ts: The ts of this HistoryObj.
        :param uv: The uv of this HistoryObj.
        :param vis: The vis of this HistoryObj.
        :param weather: The weather of this HistoryObj.
        :param wind_dir: The wind_dir of this HistoryObj.
        :param wind_gust_spd: The wind_gust_spd of this HistoryObj.
        :param wind_spd: The wind_spd of this HistoryObj.
        """
        self.openapi_types = {
            'app_temp': float,
            'azimuth': float,
            'clouds': int,
            'datetime': str,
            'dewpt': int,
            'dhi': float,
            'dni': float,
            'elev_angle': float,
            'ghi': float,
            'h_angle': float,
            'pod': str,
            'precip': float,
            'pres': float,
            'revision_status': str,
            'rh': int,
            'slp': float,
            'snow': float,
            'solar_rad': float,
            'temp': float,
            'timestamp_local': str,
            'timestamp_utc': str,
            'ts': float,
            'uv': float,
            'vis': float,
            'weather': HistoryObjWeather,
            'wind_dir': int,
            'wind_gust_spd': float,
            'wind_spd': float
        }

        self.attribute_map = {
            'app_temp': 'app_temp',
            'azimuth': 'azimuth',
            'clouds': 'clouds',
            'datetime': 'datetime',
            'dewpt': 'dewpt',
            'dhi': 'dhi',
            'dni': 'dni',
            'elev_angle': 'elev_angle',
            'ghi': 'ghi',
            'h_angle': 'h_angle',
            'pod': 'pod',
            'precip': 'precip',
            'pres': 'pres',
            'revision_status': 'revision_status',
            'rh': 'rh',
            'slp': 'slp',
            'snow': 'snow',
            'solar_rad': 'solar_rad',
            'temp': 'temp',
            'timestamp_local': 'timestamp_local',
            'timestamp_utc': 'timestamp_utc',
            'ts': 'ts',
            'uv': 'uv',
            'vis': 'vis',
            'weather': 'weather',
            'wind_dir': 'wind_dir',
            'wind_gust_spd': 'wind_gust_spd',
            'wind_spd': 'wind_spd'
        }

        self._app_temp = app_temp
        self._azimuth = azimuth
        self._clouds = clouds
        self._datetime = datetime
        self._dewpt = dewpt
        self._dhi = dhi
        self._dni = dni
        self._elev_angle = elev_angle
        self._ghi = ghi
        self._h_angle = h_angle
        self._pod = pod
        self._precip = precip
        self._pres = pres
        self._revision_status = revision_status
        self._rh = rh
        self._slp = slp
        self._snow = snow
        self._solar_rad = solar_rad
        self._temp = temp
        self._timestamp_local = timestamp_local
        self._timestamp_utc = timestamp_utc
        self._ts = ts
        self._uv = uv
        self._vis = vis
        self._weather = weather
        self._wind_dir = wind_dir
        self._wind_gust_spd = wind_gust_spd
        self._wind_spd = wind_spd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryObj':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryObj of this HistoryObj.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_temp(self):
        """Gets the app_temp of this HistoryObj.

        Apparent Temperature or Wind Chill/Heat Index (Default Celcius)

        :return: The app_temp of this HistoryObj.
        :rtype: float
        """
        return self._app_temp

    @app_temp.setter
    def app_temp(self, app_temp):
        """Sets the app_temp of this HistoryObj.

        Apparent Temperature or Wind Chill/Heat Index (Default Celcius)

        :param app_temp: The app_temp of this HistoryObj.
        :type app_temp: float
        """

        self._app_temp = app_temp

    @property
    def azimuth(self):
        """Gets the azimuth of this HistoryObj.

        Azimuth angle (Degrees)

        :return: The azimuth of this HistoryObj.
        :rtype: float
        """
        return self._azimuth

    @azimuth.setter
    def azimuth(self, azimuth):
        """Sets the azimuth of this HistoryObj.

        Azimuth angle (Degrees)

        :param azimuth: The azimuth of this HistoryObj.
        :type azimuth: float
        """

        self._azimuth = azimuth

    @property
    def clouds(self):
        """Gets the clouds of this HistoryObj.

        Cloud Cover 0-100 (%)

        :return: The clouds of this HistoryObj.
        :rtype: int
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this HistoryObj.

        Cloud Cover 0-100 (%)

        :param clouds: The clouds of this HistoryObj.
        :type clouds: int
        """

        self._clouds = clouds

    @property
    def datetime(self):
        """Gets the datetime of this HistoryObj.

        Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)

        :return: The datetime of this HistoryObj.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this HistoryObj.

        Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)

        :param datetime: The datetime of this HistoryObj.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def dewpt(self):
        """Gets the dewpt of this HistoryObj.

        Dew point (Default Celcius)

        :return: The dewpt of this HistoryObj.
        :rtype: int
        """
        return self._dewpt

    @dewpt.setter
    def dewpt(self, dewpt):
        """Sets the dewpt of this HistoryObj.

        Dew point (Default Celcius)

        :param dewpt: The dewpt of this HistoryObj.
        :type dewpt: int
        """

        self._dewpt = dewpt

    @property
    def dhi(self):
        """Gets the dhi of this HistoryObj.

        Diffuse normal solar irradiance (W/m^2)

        :return: The dhi of this HistoryObj.
        :rtype: float
        """
        return self._dhi

    @dhi.setter
    def dhi(self, dhi):
        """Sets the dhi of this HistoryObj.

        Diffuse normal solar irradiance (W/m^2)

        :param dhi: The dhi of this HistoryObj.
        :type dhi: float
        """

        self._dhi = dhi

    @property
    def dni(self):
        """Gets the dni of this HistoryObj.

        Direct normal solar irradiance (W/m^2)

        :return: The dni of this HistoryObj.
        :rtype: float
        """
        return self._dni

    @dni.setter
    def dni(self, dni):
        """Sets the dni of this HistoryObj.

        Direct normal solar irradiance (W/m^2)

        :param dni: The dni of this HistoryObj.
        :type dni: float
        """

        self._dni = dni

    @property
    def elev_angle(self):
        """Gets the elev_angle of this HistoryObj.

        Solar elevation angle (Degrees)

        :return: The elev_angle of this HistoryObj.
        :rtype: float
        """
        return self._elev_angle

    @elev_angle.setter
    def elev_angle(self, elev_angle):
        """Sets the elev_angle of this HistoryObj.

        Solar elevation angle (Degrees)

        :param elev_angle: The elev_angle of this HistoryObj.
        :type elev_angle: float
        """

        self._elev_angle = elev_angle

    @property
    def ghi(self):
        """Gets the ghi of this HistoryObj.

        Global horizontal solar irradiance (W/m^2)

        :return: The ghi of this HistoryObj.
        :rtype: float
        """
        return self._ghi

    @ghi.setter
    def ghi(self, ghi):
        """Sets the ghi of this HistoryObj.

        Global horizontal solar irradiance (W/m^2)

        :param ghi: The ghi of this HistoryObj.
        :type ghi: float
        """

        self._ghi = ghi

    @property
    def h_angle(self):
        """Gets the h_angle of this HistoryObj.

        Solar hour angle (Degrees)

        :return: The h_angle of this HistoryObj.
        :rtype: float
        """
        return self._h_angle

    @h_angle.setter
    def h_angle(self, h_angle):
        """Sets the h_angle of this HistoryObj.

        Solar hour angle (Degrees)

        :param h_angle: The h_angle of this HistoryObj.
        :type h_angle: float
        """

        self._h_angle = h_angle

    @property
    def pod(self):
        """Gets the pod of this HistoryObj.

        Part of the day (d = day, n = night)

        :return: The pod of this HistoryObj.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this HistoryObj.

        Part of the day (d = day, n = night)

        :param pod: The pod of this HistoryObj.
        :type pod: str
        """

        self._pod = pod

    @property
    def precip(self):
        """Gets the precip of this HistoryObj.

        Liquid equivalent precipitation - Default (mm)

        :return: The precip of this HistoryObj.
        :rtype: float
        """
        return self._precip

    @precip.setter
    def precip(self, precip):
        """Sets the precip of this HistoryObj.

        Liquid equivalent precipitation - Default (mm)

        :param precip: The precip of this HistoryObj.
        :type precip: float
        """

        self._precip = precip

    @property
    def pres(self):
        """Gets the pres of this HistoryObj.

        Pressure (mb)

        :return: The pres of this HistoryObj.
        :rtype: float
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this HistoryObj.

        Pressure (mb)

        :param pres: The pres of this HistoryObj.
        :type pres: float
        """

        self._pres = pres

    @property
    def revision_status(self):
        """Gets the revision_status of this HistoryObj.

        Data revision status (interim or final)

        :return: The revision_status of this HistoryObj.
        :rtype: str
        """
        return self._revision_status

    @revision_status.setter
    def revision_status(self, revision_status):
        """Sets the revision_status of this HistoryObj.

        Data revision status (interim or final)

        :param revision_status: The revision_status of this HistoryObj.
        :type revision_status: str
        """

        self._revision_status = revision_status

    @property
    def rh(self):
        """Gets the rh of this HistoryObj.

        Relative Humidity as a percentage (%)

        :return: The rh of this HistoryObj.
        :rtype: int
        """
        return self._rh

    @rh.setter
    def rh(self, rh):
        """Sets the rh of this HistoryObj.

        Relative Humidity as a percentage (%)

        :param rh: The rh of this HistoryObj.
        :type rh: int
        """

        self._rh = rh

    @property
    def slp(self):
        """Gets the slp of this HistoryObj.

        Sea level pressure (mb)

        :return: The slp of this HistoryObj.
        :rtype: float
        """
        return self._slp

    @slp.setter
    def slp(self, slp):
        """Sets the slp of this HistoryObj.

        Sea level pressure (mb)

        :param slp: The slp of this HistoryObj.
        :type slp: float
        """

        self._slp = slp

    @property
    def snow(self):
        """Gets the snow of this HistoryObj.

        Snowfall - Default (mm)

        :return: The snow of this HistoryObj.
        :rtype: float
        """
        return self._snow

    @snow.setter
    def snow(self, snow):
        """Sets the snow of this HistoryObj.

        Snowfall - Default (mm)

        :param snow: The snow of this HistoryObj.
        :type snow: float
        """

        self._snow = snow

    @property
    def solar_rad(self):
        """Gets the solar_rad of this HistoryObj.

        Estimated solar radiation (W/m^2)

        :return: The solar_rad of this HistoryObj.
        :rtype: float
        """
        return self._solar_rad

    @solar_rad.setter
    def solar_rad(self, solar_rad):
        """Sets the solar_rad of this HistoryObj.

        Estimated solar radiation (W/m^2)

        :param solar_rad: The solar_rad of this HistoryObj.
        :type solar_rad: float
        """

        self._solar_rad = solar_rad

    @property
    def temp(self):
        """Gets the temp of this HistoryObj.

        Temperature (Default Celcius)

        :return: The temp of this HistoryObj.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this HistoryObj.

        Temperature (Default Celcius)

        :param temp: The temp of this HistoryObj.
        :type temp: float
        """

        self._temp = temp

    @property
    def timestamp_local(self):
        """Gets the timestamp_local of this HistoryObj.

        Timestamp in local time

        :return: The timestamp_local of this HistoryObj.
        :rtype: str
        """
        return self._timestamp_local

    @timestamp_local.setter
    def timestamp_local(self, timestamp_local):
        """Sets the timestamp_local of this HistoryObj.

        Timestamp in local time

        :param timestamp_local: The timestamp_local of this HistoryObj.
        :type timestamp_local: str
        """

        self._timestamp_local = timestamp_local

    @property
    def timestamp_utc(self):
        """Gets the timestamp_utc of this HistoryObj.

        Timestamp UTC

        :return: The timestamp_utc of this HistoryObj.
        :rtype: str
        """
        return self._timestamp_utc

    @timestamp_utc.setter
    def timestamp_utc(self, timestamp_utc):
        """Sets the timestamp_utc of this HistoryObj.

        Timestamp UTC

        :param timestamp_utc: The timestamp_utc of this HistoryObj.
        :type timestamp_utc: str
        """

        self._timestamp_utc = timestamp_utc

    @property
    def ts(self):
        """Gets the ts of this HistoryObj.

        Unix Timestamp

        :return: The ts of this HistoryObj.
        :rtype: float
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this HistoryObj.

        Unix Timestamp

        :param ts: The ts of this HistoryObj.
        :type ts: float
        """

        self._ts = ts

    @property
    def uv(self):
        """Gets the uv of this HistoryObj.

        UV Index (1-11+)

        :return: The uv of this HistoryObj.
        :rtype: float
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this HistoryObj.

        UV Index (1-11+)

        :param uv: The uv of this HistoryObj.
        :type uv: float
        """

        self._uv = uv

    @property
    def vis(self):
        """Gets the vis of this HistoryObj.

        Visibility (KM)

        :return: The vis of this HistoryObj.
        :rtype: float
        """
        return self._vis

    @vis.setter
    def vis(self, vis):
        """Sets the vis of this HistoryObj.

        Visibility (KM)

        :param vis: The vis of this HistoryObj.
        :type vis: float
        """

        self._vis = vis

    @property
    def weather(self):
        """Gets the weather of this HistoryObj.


        :return: The weather of this HistoryObj.
        :rtype: HistoryObjWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this HistoryObj.


        :param weather: The weather of this HistoryObj.
        :type weather: HistoryObjWeather
        """

        self._weather = weather

    @property
    def wind_dir(self):
        """Gets the wind_dir of this HistoryObj.

        Wind direction (Degrees)

        :return: The wind_dir of this HistoryObj.
        :rtype: int
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir):
        """Sets the wind_dir of this HistoryObj.

        Wind direction (Degrees)

        :param wind_dir: The wind_dir of this HistoryObj.
        :type wind_dir: int
        """

        self._wind_dir = wind_dir

    @property
    def wind_gust_spd(self):
        """Gets the wind_gust_spd of this HistoryObj.

        Wind Gust Speed - Default (m/s)

        :return: The wind_gust_spd of this HistoryObj.
        :rtype: float
        """
        return self._wind_gust_spd

    @wind_gust_spd.setter
    def wind_gust_spd(self, wind_gust_spd):
        """Sets the wind_gust_spd of this HistoryObj.

        Wind Gust Speed - Default (m/s)

        :param wind_gust_spd: The wind_gust_spd of this HistoryObj.
        :type wind_gust_spd: float
        """

        self._wind_gust_spd = wind_gust_spd

    @property
    def wind_spd(self):
        """Gets the wind_spd of this HistoryObj.

        Wind Speed (Default m/s)

        :return: The wind_spd of this HistoryObj.
        :rtype: float
        """
        return self._wind_spd

    @wind_spd.setter
    def wind_spd(self, wind_spd):
        """Sets the wind_spd of this HistoryObj.

        Wind Speed (Default m/s)

        :param wind_spd: The wind_spd of this HistoryObj.
        :type wind_spd: float
        """

        self._wind_spd = wind_spd
