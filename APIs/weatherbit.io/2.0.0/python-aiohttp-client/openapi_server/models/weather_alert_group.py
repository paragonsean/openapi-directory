# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeatherAlertGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: List[str]=None, description: str=None, effective_local: str=None, effective_utc: str=None, expires_local: str=None, expires_utc: str=None, severity: str=None, title: str=None, uri: str=None):
        """WeatherAlertGroup - a model defined in OpenAPI

        :param alerts: The alerts of this WeatherAlertGroup.
        :param description: The description of this WeatherAlertGroup.
        :param effective_local: The effective_local of this WeatherAlertGroup.
        :param effective_utc: The effective_utc of this WeatherAlertGroup.
        :param expires_local: The expires_local of this WeatherAlertGroup.
        :param expires_utc: The expires_utc of this WeatherAlertGroup.
        :param severity: The severity of this WeatherAlertGroup.
        :param title: The title of this WeatherAlertGroup.
        :param uri: The uri of this WeatherAlertGroup.
        """
        self.openapi_types = {
            'alerts': List[str],
            'description': str,
            'effective_local': str,
            'effective_utc': str,
            'expires_local': str,
            'expires_utc': str,
            'severity': str,
            'title': str,
            'uri': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'description': 'description',
            'effective_local': 'effective_local',
            'effective_utc': 'effective_utc',
            'expires_local': 'expires_local',
            'expires_utc': 'expires_utc',
            'severity': 'severity',
            'title': 'title',
            'uri': 'uri'
        }

        self._alerts = alerts
        self._description = description
        self._effective_local = effective_local
        self._effective_utc = effective_utc
        self._expires_local = expires_local
        self._expires_utc = expires_utc
        self._severity = severity
        self._title = title
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeatherAlertGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeatherAlertGroup of this WeatherAlertGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this WeatherAlertGroup.


        :return: The alerts of this WeatherAlertGroup.
        :rtype: List[str]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this WeatherAlertGroup.


        :param alerts: The alerts of this WeatherAlertGroup.
        :type alerts: List[str]
        """

        self._alerts = alerts

    @property
    def description(self):
        """Gets the description of this WeatherAlertGroup.

        Full description of weather alert

        :return: The description of this WeatherAlertGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WeatherAlertGroup.

        Full description of weather alert

        :param description: The description of this WeatherAlertGroup.
        :type description: str
        """

        self._description = description

    @property
    def effective_local(self):
        """Gets the effective_local of this WeatherAlertGroup.

        Issued time local

        :return: The effective_local of this WeatherAlertGroup.
        :rtype: str
        """
        return self._effective_local

    @effective_local.setter
    def effective_local(self, effective_local):
        """Sets the effective_local of this WeatherAlertGroup.

        Issued time local

        :param effective_local: The effective_local of this WeatherAlertGroup.
        :type effective_local: str
        """

        self._effective_local = effective_local

    @property
    def effective_utc(self):
        """Gets the effective_utc of this WeatherAlertGroup.

        Issued time UTC

        :return: The effective_utc of this WeatherAlertGroup.
        :rtype: str
        """
        return self._effective_utc

    @effective_utc.setter
    def effective_utc(self, effective_utc):
        """Sets the effective_utc of this WeatherAlertGroup.

        Issued time UTC

        :param effective_utc: The effective_utc of this WeatherAlertGroup.
        :type effective_utc: str
        """

        self._effective_utc = effective_utc

    @property
    def expires_local(self):
        """Gets the expires_local of this WeatherAlertGroup.

        Expiration time local

        :return: The expires_local of this WeatherAlertGroup.
        :rtype: str
        """
        return self._expires_local

    @expires_local.setter
    def expires_local(self, expires_local):
        """Sets the expires_local of this WeatherAlertGroup.

        Expiration time local

        :param expires_local: The expires_local of this WeatherAlertGroup.
        :type expires_local: str
        """

        self._expires_local = expires_local

    @property
    def expires_utc(self):
        """Gets the expires_utc of this WeatherAlertGroup.

        Expiration time UTC

        :return: The expires_utc of this WeatherAlertGroup.
        :rtype: str
        """
        return self._expires_utc

    @expires_utc.setter
    def expires_utc(self, expires_utc):
        """Sets the expires_utc of this WeatherAlertGroup.

        Expiration time UTC

        :param expires_utc: The expires_utc of this WeatherAlertGroup.
        :type expires_utc: str
        """

        self._expires_utc = expires_utc

    @property
    def severity(self):
        """Gets the severity of this WeatherAlertGroup.

        Severity of weather. (Advisory | Watch | Warning)

        :return: The severity of this WeatherAlertGroup.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this WeatherAlertGroup.

        Severity of weather. (Advisory | Watch | Warning)

        :param severity: The severity of this WeatherAlertGroup.
        :type severity: str
        """

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this WeatherAlertGroup.

        Brief description of weather alert

        :return: The title of this WeatherAlertGroup.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WeatherAlertGroup.

        Brief description of weather alert

        :param title: The title of this WeatherAlertGroup.
        :type title: str
        """

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this WeatherAlertGroup.

        URI to weather alert

        :return: The uri of this WeatherAlertGroup.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this WeatherAlertGroup.

        URI to weather alert

        :param uri: The uri of this WeatherAlertGroup.
        :type uri: str
        """

        self._uri = uri
