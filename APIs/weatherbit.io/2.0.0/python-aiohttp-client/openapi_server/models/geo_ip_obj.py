# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoIPObj(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_code: str=None, charset: str=None, city: str=None, continent_code: str=None, country_code: str=None, country_code3: str=None, dma_code: str=None, ip: str=None, latitude: str=None, longitude: str=None, metro_code: str=None, offset: str=None, organization: str=None, postal_code: str=None, region: str=None, timezone: str=None):
        """GeoIPObj - a model defined in OpenAPI

        :param area_code: The area_code of this GeoIPObj.
        :param charset: The charset of this GeoIPObj.
        :param city: The city of this GeoIPObj.
        :param continent_code: The continent_code of this GeoIPObj.
        :param country_code: The country_code of this GeoIPObj.
        :param country_code3: The country_code3 of this GeoIPObj.
        :param dma_code: The dma_code of this GeoIPObj.
        :param ip: The ip of this GeoIPObj.
        :param latitude: The latitude of this GeoIPObj.
        :param longitude: The longitude of this GeoIPObj.
        :param metro_code: The metro_code of this GeoIPObj.
        :param offset: The offset of this GeoIPObj.
        :param organization: The organization of this GeoIPObj.
        :param postal_code: The postal_code of this GeoIPObj.
        :param region: The region of this GeoIPObj.
        :param timezone: The timezone of this GeoIPObj.
        """
        self.openapi_types = {
            'area_code': str,
            'charset': str,
            'city': str,
            'continent_code': str,
            'country_code': str,
            'country_code3': str,
            'dma_code': str,
            'ip': str,
            'latitude': str,
            'longitude': str,
            'metro_code': str,
            'offset': str,
            'organization': str,
            'postal_code': str,
            'region': str,
            'timezone': str
        }

        self.attribute_map = {
            'area_code': 'area_code',
            'charset': 'charset',
            'city': 'city',
            'continent_code': 'continent_code',
            'country_code': 'country_code',
            'country_code3': 'country_code3',
            'dma_code': 'dma_code',
            'ip': 'ip',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'metro_code': 'metro_code',
            'offset': 'offset',
            'organization': 'organization',
            'postal_code': 'postal_code',
            'region': 'region',
            'timezone': 'timezone'
        }

        self._area_code = area_code
        self._charset = charset
        self._city = city
        self._continent_code = continent_code
        self._country_code = country_code
        self._country_code3 = country_code3
        self._dma_code = dma_code
        self._ip = ip
        self._latitude = latitude
        self._longitude = longitude
        self._metro_code = metro_code
        self._offset = offset
        self._organization = organization
        self._postal_code = postal_code
        self._region = region
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoIPObj':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoIPObj of this GeoIPObj.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_code(self):
        """Gets the area_code of this GeoIPObj.

        Area Code

        :return: The area_code of this GeoIPObj.
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this GeoIPObj.

        Area Code

        :param area_code: The area_code of this GeoIPObj.
        :type area_code: str
        """

        self._area_code = area_code

    @property
    def charset(self):
        """Gets the charset of this GeoIPObj.

        Character encoding

        :return: The charset of this GeoIPObj.
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this GeoIPObj.

        Character encoding

        :param charset: The charset of this GeoIPObj.
        :type charset: str
        """

        self._charset = charset

    @property
    def city(self):
        """Gets the city of this GeoIPObj.

        City Name

        :return: The city of this GeoIPObj.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GeoIPObj.

        City Name

        :param city: The city of this GeoIPObj.
        :type city: str
        """

        self._city = city

    @property
    def continent_code(self):
        """Gets the continent_code of this GeoIPObj.

        Country Abbreviation

        :return: The continent_code of this GeoIPObj.
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this GeoIPObj.

        Country Abbreviation

        :param continent_code: The continent_code of this GeoIPObj.
        :type continent_code: str
        """

        self._continent_code = continent_code

    @property
    def country_code(self):
        """Gets the country_code of this GeoIPObj.

        Country Code (Short)

        :return: The country_code of this GeoIPObj.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GeoIPObj.

        Country Code (Short)

        :param country_code: The country_code of this GeoIPObj.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this GeoIPObj.

        Country Code (Long)

        :return: The country_code3 of this GeoIPObj.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this GeoIPObj.

        Country Code (Long)

        :param country_code3: The country_code3 of this GeoIPObj.
        :type country_code3: str
        """

        self._country_code3 = country_code3

    @property
    def dma_code(self):
        """Gets the dma_code of this GeoIPObj.

        Longitude

        :return: The dma_code of this GeoIPObj.
        :rtype: str
        """
        return self._dma_code

    @dma_code.setter
    def dma_code(self, dma_code):
        """Sets the dma_code of this GeoIPObj.

        Longitude

        :param dma_code: The dma_code of this GeoIPObj.
        :type dma_code: str
        """

        self._dma_code = dma_code

    @property
    def ip(self):
        """Gets the ip of this GeoIPObj.

        IP Address

        :return: The ip of this GeoIPObj.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this GeoIPObj.

        IP Address

        :param ip: The ip of this GeoIPObj.
        :type ip: str
        """

        self._ip = ip

    @property
    def latitude(self):
        """Gets the latitude of this GeoIPObj.

        State Abbreviation

        :return: The latitude of this GeoIPObj.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeoIPObj.

        State Abbreviation

        :param latitude: The latitude of this GeoIPObj.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeoIPObj.

        City Name

        :return: The longitude of this GeoIPObj.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeoIPObj.

        City Name

        :param longitude: The longitude of this GeoIPObj.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def metro_code(self):
        """Gets the metro_code of this GeoIPObj.

        Longitude

        :return: The metro_code of this GeoIPObj.
        :rtype: str
        """
        return self._metro_code

    @metro_code.setter
    def metro_code(self, metro_code):
        """Sets the metro_code of this GeoIPObj.

        Longitude

        :param metro_code: The metro_code of this GeoIPObj.
        :type metro_code: str
        """

        self._metro_code = metro_code

    @property
    def offset(self):
        """Gets the offset of this GeoIPObj.

        UTC Offset (deprecated)

        :return: The offset of this GeoIPObj.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GeoIPObj.

        UTC Offset (deprecated)

        :param offset: The offset of this GeoIPObj.
        :type offset: str
        """

        self._offset = offset

    @property
    def organization(self):
        """Gets the organization of this GeoIPObj.

        Organization Name

        :return: The organization of this GeoIPObj.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this GeoIPObj.

        Organization Name

        :param organization: The organization of this GeoIPObj.
        :type organization: str
        """

        self._organization = organization

    @property
    def postal_code(self):
        """Gets the postal_code of this GeoIPObj.

        Postal Code

        :return: The postal_code of this GeoIPObj.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this GeoIPObj.

        Postal Code

        :param postal_code: The postal_code of this GeoIPObj.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this GeoIPObj.

        Latitude

        :return: The region of this GeoIPObj.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GeoIPObj.

        Latitude

        :param region: The region of this GeoIPObj.
        :type region: str
        """

        self._region = region

    @property
    def timezone(self):
        """Gets the timezone of this GeoIPObj.

        Local IANA time zone

        :return: The timezone of this GeoIPObj.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this GeoIPObj.

        Local IANA time zone

        :param timezone: The timezone of this GeoIPObj.
        :type timezone: str
        """

        self._timezone = timezone
