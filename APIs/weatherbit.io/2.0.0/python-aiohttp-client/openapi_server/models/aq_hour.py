# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AQHour(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aqi: int=None, no2: float=None, o3: float=None, pm10: float=None, pm25: float=None, so2: float=None, timestamp_local: str=None, timestamp_utc: str=None, ts: float=None):
        """AQHour - a model defined in OpenAPI

        :param aqi: The aqi of this AQHour.
        :param no2: The no2 of this AQHour.
        :param o3: The o3 of this AQHour.
        :param pm10: The pm10 of this AQHour.
        :param pm25: The pm25 of this AQHour.
        :param so2: The so2 of this AQHour.
        :param timestamp_local: The timestamp_local of this AQHour.
        :param timestamp_utc: The timestamp_utc of this AQHour.
        :param ts: The ts of this AQHour.
        """
        self.openapi_types = {
            'aqi': int,
            'no2': float,
            'o3': float,
            'pm10': float,
            'pm25': float,
            'so2': float,
            'timestamp_local': str,
            'timestamp_utc': str,
            'ts': float
        }

        self.attribute_map = {
            'aqi': 'aqi',
            'no2': 'no2',
            'o3': 'o3',
            'pm10': 'pm10',
            'pm25': 'pm25',
            'so2': 'so2',
            'timestamp_local': 'timestamp_local',
            'timestamp_utc': 'timestamp_utc',
            'ts': 'ts'
        }

        self._aqi = aqi
        self._no2 = no2
        self._o3 = o3
        self._pm10 = pm10
        self._pm25 = pm25
        self._so2 = so2
        self._timestamp_local = timestamp_local
        self._timestamp_utc = timestamp_utc
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AQHour':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AQHour of this AQHour.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aqi(self):
        """Gets the aqi of this AQHour.

        Cloud cover as a percentage (%)

        :return: The aqi of this AQHour.
        :rtype: int
        """
        return self._aqi

    @aqi.setter
    def aqi(self, aqi):
        """Sets the aqi of this AQHour.

        Cloud cover as a percentage (%)

        :param aqi: The aqi of this AQHour.
        :type aqi: int
        """

        self._aqi = aqi

    @property
    def no2(self):
        """Gets the no2 of this AQHour.

        Concentration of NO2 (µg/m³)

        :return: The no2 of this AQHour.
        :rtype: float
        """
        return self._no2

    @no2.setter
    def no2(self, no2):
        """Sets the no2 of this AQHour.

        Concentration of NO2 (µg/m³)

        :param no2: The no2 of this AQHour.
        :type no2: float
        """

        self._no2 = no2

    @property
    def o3(self):
        """Gets the o3 of this AQHour.

        Concentration of O3 (µg/m³)

        :return: The o3 of this AQHour.
        :rtype: float
        """
        return self._o3

    @o3.setter
    def o3(self, o3):
        """Sets the o3 of this AQHour.

        Concentration of O3 (µg/m³)

        :param o3: The o3 of this AQHour.
        :type o3: float
        """

        self._o3 = o3

    @property
    def pm10(self):
        """Gets the pm10 of this AQHour.

        Concentration of PM 10 (µg/m³)

        :return: The pm10 of this AQHour.
        :rtype: float
        """
        return self._pm10

    @pm10.setter
    def pm10(self, pm10):
        """Sets the pm10 of this AQHour.

        Concentration of PM 10 (µg/m³)

        :param pm10: The pm10 of this AQHour.
        :type pm10: float
        """

        self._pm10 = pm10

    @property
    def pm25(self):
        """Gets the pm25 of this AQHour.

        Concentration of PM 2.5 (µg/m³)

        :return: The pm25 of this AQHour.
        :rtype: float
        """
        return self._pm25

    @pm25.setter
    def pm25(self, pm25):
        """Sets the pm25 of this AQHour.

        Concentration of PM 2.5 (µg/m³)

        :param pm25: The pm25 of this AQHour.
        :type pm25: float
        """

        self._pm25 = pm25

    @property
    def so2(self):
        """Gets the so2 of this AQHour.

        Concentration of SO2 (µg/m³)

        :return: The so2 of this AQHour.
        :rtype: float
        """
        return self._so2

    @so2.setter
    def so2(self, so2):
        """Sets the so2 of this AQHour.

        Concentration of SO2 (µg/m³)

        :param so2: The so2 of this AQHour.
        :type so2: float
        """

        self._so2 = so2

    @property
    def timestamp_local(self):
        """Gets the timestamp_local of this AQHour.

        Timestamp in local time

        :return: The timestamp_local of this AQHour.
        :rtype: str
        """
        return self._timestamp_local

    @timestamp_local.setter
    def timestamp_local(self, timestamp_local):
        """Sets the timestamp_local of this AQHour.

        Timestamp in local time

        :param timestamp_local: The timestamp_local of this AQHour.
        :type timestamp_local: str
        """

        self._timestamp_local = timestamp_local

    @property
    def timestamp_utc(self):
        """Gets the timestamp_utc of this AQHour.

        Timestamp UTC

        :return: The timestamp_utc of this AQHour.
        :rtype: str
        """
        return self._timestamp_utc

    @timestamp_utc.setter
    def timestamp_utc(self, timestamp_utc):
        """Sets the timestamp_utc of this AQHour.

        Timestamp UTC

        :param timestamp_utc: The timestamp_utc of this AQHour.
        :type timestamp_utc: str
        """

        self._timestamp_utc = timestamp_utc

    @property
    def ts(self):
        """Gets the ts of this AQHour.

        Unix Timestamp

        :return: The ts of this AQHour.
        :rtype: float
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this AQHour.

        Unix Timestamp

        :param ts: The ts of this AQHour.
        :type ts: float
        """

        self._ts = ts
