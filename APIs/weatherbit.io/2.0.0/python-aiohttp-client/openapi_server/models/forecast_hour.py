# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_hour_weather import ForecastHourWeather
from openapi_server import util


class ForecastHour(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_temp: float=None, clouds: int=None, datetime: str=None, dewpt: float=None, dhi: float=None, dni: float=None, ghi: float=None, pod: str=None, pop: float=None, precip: float=None, pres: float=None, rh: int=None, slp: float=None, snow: float=None, snow_depth: float=None, solar_rad: float=None, temp: float=None, timestamp_local: str=None, timestamp_utc: str=None, ts: float=None, uv: float=None, vis: float=None, weather: ForecastHourWeather=None, wind_cdir: str=None, wind_cdir_full: str=None, wind_dir: int=None, wind_gust_spd: float=None, wind_spd: float=None):
        """ForecastHour - a model defined in OpenAPI

        :param app_temp: The app_temp of this ForecastHour.
        :param clouds: The clouds of this ForecastHour.
        :param datetime: The datetime of this ForecastHour.
        :param dewpt: The dewpt of this ForecastHour.
        :param dhi: The dhi of this ForecastHour.
        :param dni: The dni of this ForecastHour.
        :param ghi: The ghi of this ForecastHour.
        :param pod: The pod of this ForecastHour.
        :param pop: The pop of this ForecastHour.
        :param precip: The precip of this ForecastHour.
        :param pres: The pres of this ForecastHour.
        :param rh: The rh of this ForecastHour.
        :param slp: The slp of this ForecastHour.
        :param snow: The snow of this ForecastHour.
        :param snow_depth: The snow_depth of this ForecastHour.
        :param solar_rad: The solar_rad of this ForecastHour.
        :param temp: The temp of this ForecastHour.
        :param timestamp_local: The timestamp_local of this ForecastHour.
        :param timestamp_utc: The timestamp_utc of this ForecastHour.
        :param ts: The ts of this ForecastHour.
        :param uv: The uv of this ForecastHour.
        :param vis: The vis of this ForecastHour.
        :param weather: The weather of this ForecastHour.
        :param wind_cdir: The wind_cdir of this ForecastHour.
        :param wind_cdir_full: The wind_cdir_full of this ForecastHour.
        :param wind_dir: The wind_dir of this ForecastHour.
        :param wind_gust_spd: The wind_gust_spd of this ForecastHour.
        :param wind_spd: The wind_spd of this ForecastHour.
        """
        self.openapi_types = {
            'app_temp': float,
            'clouds': int,
            'datetime': str,
            'dewpt': float,
            'dhi': float,
            'dni': float,
            'ghi': float,
            'pod': str,
            'pop': float,
            'precip': float,
            'pres': float,
            'rh': int,
            'slp': float,
            'snow': float,
            'snow_depth': float,
            'solar_rad': float,
            'temp': float,
            'timestamp_local': str,
            'timestamp_utc': str,
            'ts': float,
            'uv': float,
            'vis': float,
            'weather': ForecastHourWeather,
            'wind_cdir': str,
            'wind_cdir_full': str,
            'wind_dir': int,
            'wind_gust_spd': float,
            'wind_spd': float
        }

        self.attribute_map = {
            'app_temp': 'app_temp',
            'clouds': 'clouds',
            'datetime': 'datetime',
            'dewpt': 'dewpt',
            'dhi': 'dhi',
            'dni': 'dni',
            'ghi': 'ghi',
            'pod': 'pod',
            'pop': 'pop',
            'precip': 'precip',
            'pres': 'pres',
            'rh': 'rh',
            'slp': 'slp',
            'snow': 'snow',
            'snow_depth': 'snow_depth',
            'solar_rad': 'solar_rad',
            'temp': 'temp',
            'timestamp_local': 'timestamp_local',
            'timestamp_utc': 'timestamp_utc',
            'ts': 'ts',
            'uv': 'uv',
            'vis': 'vis',
            'weather': 'weather',
            'wind_cdir': 'wind_cdir',
            'wind_cdir_full': 'wind_cdir_full',
            'wind_dir': 'wind_dir',
            'wind_gust_spd': 'wind_gust_spd',
            'wind_spd': 'wind_spd'
        }

        self._app_temp = app_temp
        self._clouds = clouds
        self._datetime = datetime
        self._dewpt = dewpt
        self._dhi = dhi
        self._dni = dni
        self._ghi = ghi
        self._pod = pod
        self._pop = pop
        self._precip = precip
        self._pres = pres
        self._rh = rh
        self._slp = slp
        self._snow = snow
        self._snow_depth = snow_depth
        self._solar_rad = solar_rad
        self._temp = temp
        self._timestamp_local = timestamp_local
        self._timestamp_utc = timestamp_utc
        self._ts = ts
        self._uv = uv
        self._vis = vis
        self._weather = weather
        self._wind_cdir = wind_cdir
        self._wind_cdir_full = wind_cdir_full
        self._wind_dir = wind_dir
        self._wind_gust_spd = wind_gust_spd
        self._wind_spd = wind_spd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastHour':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForecastHour of this ForecastHour.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_temp(self):
        """Gets the app_temp of this ForecastHour.

        Apparent Temperature - Default (C)

        :return: The app_temp of this ForecastHour.
        :rtype: float
        """
        return self._app_temp

    @app_temp.setter
    def app_temp(self, app_temp):
        """Sets the app_temp of this ForecastHour.

        Apparent Temperature - Default (C)

        :param app_temp: The app_temp of this ForecastHour.
        :type app_temp: float
        """

        self._app_temp = app_temp

    @property
    def clouds(self):
        """Gets the clouds of this ForecastHour.

        Cloud cover as a percentage (%)

        :return: The clouds of this ForecastHour.
        :rtype: int
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this ForecastHour.

        Cloud cover as a percentage (%)

        :param clouds: The clouds of this ForecastHour.
        :type clouds: int
        """

        self._clouds = clouds

    @property
    def datetime(self):
        """Gets the datetime of this ForecastHour.

        Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)

        :return: The datetime of this ForecastHour.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this ForecastHour.

        Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)

        :param datetime: The datetime of this ForecastHour.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def dewpt(self):
        """Gets the dewpt of this ForecastHour.

        Dewpoint - Default (C)

        :return: The dewpt of this ForecastHour.
        :rtype: float
        """
        return self._dewpt

    @dewpt.setter
    def dewpt(self, dewpt):
        """Sets the dewpt of this ForecastHour.

        Dewpoint - Default (C)

        :param dewpt: The dewpt of this ForecastHour.
        :type dewpt: float
        """

        self._dewpt = dewpt

    @property
    def dhi(self):
        """Gets the dhi of this ForecastHour.

        Diffuse normal solar irradiance (W/m^2)

        :return: The dhi of this ForecastHour.
        :rtype: float
        """
        return self._dhi

    @dhi.setter
    def dhi(self, dhi):
        """Sets the dhi of this ForecastHour.

        Diffuse normal solar irradiance (W/m^2)

        :param dhi: The dhi of this ForecastHour.
        :type dhi: float
        """

        self._dhi = dhi

    @property
    def dni(self):
        """Gets the dni of this ForecastHour.

        Direct normal solar irradiance (W/m^2)

        :return: The dni of this ForecastHour.
        :rtype: float
        """
        return self._dni

    @dni.setter
    def dni(self, dni):
        """Sets the dni of this ForecastHour.

        Direct normal solar irradiance (W/m^2)

        :param dni: The dni of this ForecastHour.
        :type dni: float
        """

        self._dni = dni

    @property
    def ghi(self):
        """Gets the ghi of this ForecastHour.

        Global horizontal solar irradiance (W/m^2)

        :return: The ghi of this ForecastHour.
        :rtype: float
        """
        return self._ghi

    @ghi.setter
    def ghi(self, ghi):
        """Sets the ghi of this ForecastHour.

        Global horizontal solar irradiance (W/m^2)

        :param ghi: The ghi of this ForecastHour.
        :type ghi: float
        """

        self._ghi = ghi

    @property
    def pod(self):
        """Gets the pod of this ForecastHour.

        Part of day (d = day, n = night)

        :return: The pod of this ForecastHour.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this ForecastHour.

        Part of day (d = day, n = night)

        :param pod: The pod of this ForecastHour.
        :type pod: str
        """

        self._pod = pod

    @property
    def pop(self):
        """Gets the pop of this ForecastHour.

        Chance of Precipitation as a percentage (%)

        :return: The pop of this ForecastHour.
        :rtype: float
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this ForecastHour.

        Chance of Precipitation as a percentage (%)

        :param pop: The pop of this ForecastHour.
        :type pop: float
        """

        self._pop = pop

    @property
    def precip(self):
        """Gets the precip of this ForecastHour.

        Accumulated precipitation since last forecast point. Default (mm)

        :return: The precip of this ForecastHour.
        :rtype: float
        """
        return self._precip

    @precip.setter
    def precip(self, precip):
        """Sets the precip of this ForecastHour.

        Accumulated precipitation since last forecast point. Default (mm)

        :param precip: The precip of this ForecastHour.
        :type precip: float
        """

        self._precip = precip

    @property
    def pres(self):
        """Gets the pres of this ForecastHour.

        Pressure (mb)

        :return: The pres of this ForecastHour.
        :rtype: float
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this ForecastHour.

        Pressure (mb)

        :param pres: The pres of this ForecastHour.
        :type pres: float
        """

        self._pres = pres

    @property
    def rh(self):
        """Gets the rh of this ForecastHour.

        Relative Humidity as a percentage (%)

        :return: The rh of this ForecastHour.
        :rtype: int
        """
        return self._rh

    @rh.setter
    def rh(self, rh):
        """Sets the rh of this ForecastHour.

        Relative Humidity as a percentage (%)

        :param rh: The rh of this ForecastHour.
        :type rh: int
        """

        self._rh = rh

    @property
    def slp(self):
        """Gets the slp of this ForecastHour.

        Mean Sea level pressure (mb)

        :return: The slp of this ForecastHour.
        :rtype: float
        """
        return self._slp

    @slp.setter
    def slp(self, slp):
        """Sets the slp of this ForecastHour.

        Mean Sea level pressure (mb)

        :param slp: The slp of this ForecastHour.
        :type slp: float
        """

        self._slp = slp

    @property
    def snow(self):
        """Gets the snow of this ForecastHour.

        Accumulated snowfall since last forecast point - Default (mm)

        :return: The snow of this ForecastHour.
        :rtype: float
        """
        return self._snow

    @snow.setter
    def snow(self, snow):
        """Sets the snow of this ForecastHour.

        Accumulated snowfall since last forecast point - Default (mm)

        :param snow: The snow of this ForecastHour.
        :type snow: float
        """

        self._snow = snow

    @property
    def snow_depth(self):
        """Gets the snow_depth of this ForecastHour.

        Snow depth - Default (mm)

        :return: The snow_depth of this ForecastHour.
        :rtype: float
        """
        return self._snow_depth

    @snow_depth.setter
    def snow_depth(self, snow_depth):
        """Sets the snow_depth of this ForecastHour.

        Snow depth - Default (mm)

        :param snow_depth: The snow_depth of this ForecastHour.
        :type snow_depth: float
        """

        self._snow_depth = snow_depth

    @property
    def solar_rad(self):
        """Gets the solar_rad of this ForecastHour.

        Estimated solar radiation (W/m^2)

        :return: The solar_rad of this ForecastHour.
        :rtype: float
        """
        return self._solar_rad

    @solar_rad.setter
    def solar_rad(self, solar_rad):
        """Sets the solar_rad of this ForecastHour.

        Estimated solar radiation (W/m^2)

        :param solar_rad: The solar_rad of this ForecastHour.
        :type solar_rad: float
        """

        self._solar_rad = solar_rad

    @property
    def temp(self):
        """Gets the temp of this ForecastHour.

        Temperature - Default (C)

        :return: The temp of this ForecastHour.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this ForecastHour.

        Temperature - Default (C)

        :param temp: The temp of this ForecastHour.
        :type temp: float
        """

        self._temp = temp

    @property
    def timestamp_local(self):
        """Gets the timestamp_local of this ForecastHour.

        Timestamp in local time

        :return: The timestamp_local of this ForecastHour.
        :rtype: str
        """
        return self._timestamp_local

    @timestamp_local.setter
    def timestamp_local(self, timestamp_local):
        """Sets the timestamp_local of this ForecastHour.

        Timestamp in local time

        :param timestamp_local: The timestamp_local of this ForecastHour.
        :type timestamp_local: str
        """

        self._timestamp_local = timestamp_local

    @property
    def timestamp_utc(self):
        """Gets the timestamp_utc of this ForecastHour.

        Timestamp UTC

        :return: The timestamp_utc of this ForecastHour.
        :rtype: str
        """
        return self._timestamp_utc

    @timestamp_utc.setter
    def timestamp_utc(self, timestamp_utc):
        """Sets the timestamp_utc of this ForecastHour.

        Timestamp UTC

        :param timestamp_utc: The timestamp_utc of this ForecastHour.
        :type timestamp_utc: str
        """

        self._timestamp_utc = timestamp_utc

    @property
    def ts(self):
        """Gets the ts of this ForecastHour.

        Unix Timestamp

        :return: The ts of this ForecastHour.
        :rtype: float
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this ForecastHour.

        Unix Timestamp

        :param ts: The ts of this ForecastHour.
        :type ts: float
        """

        self._ts = ts

    @property
    def uv(self):
        """Gets the uv of this ForecastHour.

        UV Index

        :return: The uv of this ForecastHour.
        :rtype: float
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this ForecastHour.

        UV Index

        :param uv: The uv of this ForecastHour.
        :type uv: float
        """

        self._uv = uv

    @property
    def vis(self):
        """Gets the vis of this ForecastHour.

        Visibility - Default (KM)

        :return: The vis of this ForecastHour.
        :rtype: float
        """
        return self._vis

    @vis.setter
    def vis(self, vis):
        """Sets the vis of this ForecastHour.

        Visibility - Default (KM)

        :param vis: The vis of this ForecastHour.
        :type vis: float
        """

        self._vis = vis

    @property
    def weather(self):
        """Gets the weather of this ForecastHour.


        :return: The weather of this ForecastHour.
        :rtype: ForecastHourWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this ForecastHour.


        :param weather: The weather of this ForecastHour.
        :type weather: ForecastHourWeather
        """

        self._weather = weather

    @property
    def wind_cdir(self):
        """Gets the wind_cdir of this ForecastHour.

        Cardinal wind direction

        :return: The wind_cdir of this ForecastHour.
        :rtype: str
        """
        return self._wind_cdir

    @wind_cdir.setter
    def wind_cdir(self, wind_cdir):
        """Sets the wind_cdir of this ForecastHour.

        Cardinal wind direction

        :param wind_cdir: The wind_cdir of this ForecastHour.
        :type wind_cdir: str
        """

        self._wind_cdir = wind_cdir

    @property
    def wind_cdir_full(self):
        """Gets the wind_cdir_full of this ForecastHour.

        Cardinal wind direction (text)

        :return: The wind_cdir_full of this ForecastHour.
        :rtype: str
        """
        return self._wind_cdir_full

    @wind_cdir_full.setter
    def wind_cdir_full(self, wind_cdir_full):
        """Sets the wind_cdir_full of this ForecastHour.

        Cardinal wind direction (text)

        :param wind_cdir_full: The wind_cdir_full of this ForecastHour.
        :type wind_cdir_full: str
        """

        self._wind_cdir_full = wind_cdir_full

    @property
    def wind_dir(self):
        """Gets the wind_dir of this ForecastHour.

        Wind direction

        :return: The wind_dir of this ForecastHour.
        :rtype: int
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir):
        """Sets the wind_dir of this ForecastHour.

        Wind direction

        :param wind_dir: The wind_dir of this ForecastHour.
        :type wind_dir: int
        """

        self._wind_dir = wind_dir

    @property
    def wind_gust_spd(self):
        """Gets the wind_gust_spd of this ForecastHour.

        Wind Gust Speed - Default (m/s)

        :return: The wind_gust_spd of this ForecastHour.
        :rtype: float
        """
        return self._wind_gust_spd

    @wind_gust_spd.setter
    def wind_gust_spd(self, wind_gust_spd):
        """Sets the wind_gust_spd of this ForecastHour.

        Wind Gust Speed - Default (m/s)

        :param wind_gust_spd: The wind_gust_spd of this ForecastHour.
        :type wind_gust_spd: float
        """

        self._wind_gust_spd = wind_gust_spd

    @property
    def wind_spd(self):
        """Gets the wind_spd of this ForecastHour.

        Wind Speed - Default (m/s)

        :return: The wind_spd of this ForecastHour.
        :rtype: float
        """
        return self._wind_spd

    @wind_spd.setter
    def wind_spd(self, wind_spd):
        """Sets the wind_spd of this ForecastHour.

        Wind Speed - Default (m/s)

        :param wind_spd: The wind_spd of this ForecastHour.
        :type wind_spd: float
        """

        self._wind_spd = wind_spd
