# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnergyObsSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cdd: float=None, clouds: int=None, _date: str=None, dewpt: float=None, hdd: float=None, precip: float=None, rh: int=None, snow: float=None, sun_hours: float=None, t_dhi: float=None, t_dni: float=None, t_ghi: float=None, temp: float=None, wind_dir: int=None, wind_spd: float=None):
        """EnergyObsSeries - a model defined in OpenAPI

        :param cdd: The cdd of this EnergyObsSeries.
        :param clouds: The clouds of this EnergyObsSeries.
        :param _date: The _date of this EnergyObsSeries.
        :param dewpt: The dewpt of this EnergyObsSeries.
        :param hdd: The hdd of this EnergyObsSeries.
        :param precip: The precip of this EnergyObsSeries.
        :param rh: The rh of this EnergyObsSeries.
        :param snow: The snow of this EnergyObsSeries.
        :param sun_hours: The sun_hours of this EnergyObsSeries.
        :param t_dhi: The t_dhi of this EnergyObsSeries.
        :param t_dni: The t_dni of this EnergyObsSeries.
        :param t_ghi: The t_ghi of this EnergyObsSeries.
        :param temp: The temp of this EnergyObsSeries.
        :param wind_dir: The wind_dir of this EnergyObsSeries.
        :param wind_spd: The wind_spd of this EnergyObsSeries.
        """
        self.openapi_types = {
            'cdd': float,
            'clouds': int,
            '_date': str,
            'dewpt': float,
            'hdd': float,
            'precip': float,
            'rh': int,
            'snow': float,
            'sun_hours': float,
            't_dhi': float,
            't_dni': float,
            't_ghi': float,
            'temp': float,
            'wind_dir': int,
            'wind_spd': float
        }

        self.attribute_map = {
            'cdd': 'cdd',
            'clouds': 'clouds',
            '_date': 'date',
            'dewpt': 'dewpt',
            'hdd': 'hdd',
            'precip': 'precip',
            'rh': 'rh',
            'snow': 'snow',
            'sun_hours': 'sun_hours',
            't_dhi': 't_dhi',
            't_dni': 't_dni',
            't_ghi': 't_ghi',
            'temp': 'temp',
            'wind_dir': 'wind_dir',
            'wind_spd': 'wind_spd'
        }

        self._cdd = cdd
        self._clouds = clouds
        self.__date = _date
        self._dewpt = dewpt
        self._hdd = hdd
        self._precip = precip
        self._rh = rh
        self._snow = snow
        self._sun_hours = sun_hours
        self._t_dhi = t_dhi
        self._t_dni = t_dni
        self._t_ghi = t_ghi
        self._temp = temp
        self._wind_dir = wind_dir
        self._wind_spd = wind_spd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnergyObsSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnergyObsSeries of this EnergyObsSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cdd(self):
        """Gets the cdd of this EnergyObsSeries.

        Cooling degree days

        :return: The cdd of this EnergyObsSeries.
        :rtype: float
        """
        return self._cdd

    @cdd.setter
    def cdd(self, cdd):
        """Sets the cdd of this EnergyObsSeries.

        Cooling degree days

        :param cdd: The cdd of this EnergyObsSeries.
        :type cdd: float
        """

        self._cdd = cdd

    @property
    def clouds(self):
        """Gets the clouds of this EnergyObsSeries.

        Average cloud cover (%)

        :return: The clouds of this EnergyObsSeries.
        :rtype: int
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this EnergyObsSeries.

        Average cloud cover (%)

        :param clouds: The clouds of this EnergyObsSeries.
        :type clouds: int
        """

        self._clouds = clouds

    @property
    def _date(self):
        """Gets the _date of this EnergyObsSeries.

        Date

        :return: The _date of this EnergyObsSeries.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EnergyObsSeries.

        Date

        :param _date: The _date of this EnergyObsSeries.
        :type _date: str
        """

        self.__date = _date

    @property
    def dewpt(self):
        """Gets the dewpt of this EnergyObsSeries.

        Average dew point temperature - Default (C)

        :return: The dewpt of this EnergyObsSeries.
        :rtype: float
        """
        return self._dewpt

    @dewpt.setter
    def dewpt(self, dewpt):
        """Sets the dewpt of this EnergyObsSeries.

        Average dew point temperature - Default (C)

        :param dewpt: The dewpt of this EnergyObsSeries.
        :type dewpt: float
        """

        self._dewpt = dewpt

    @property
    def hdd(self):
        """Gets the hdd of this EnergyObsSeries.

        Heating degree days

        :return: The hdd of this EnergyObsSeries.
        :rtype: float
        """
        return self._hdd

    @hdd.setter
    def hdd(self, hdd):
        """Sets the hdd of this EnergyObsSeries.

        Heating degree days

        :param hdd: The hdd of this EnergyObsSeries.
        :type hdd: float
        """

        self._hdd = hdd

    @property
    def precip(self):
        """Gets the precip of this EnergyObsSeries.

        Total precipitation in period - Default (mm)

        :return: The precip of this EnergyObsSeries.
        :rtype: float
        """
        return self._precip

    @precip.setter
    def precip(self, precip):
        """Sets the precip of this EnergyObsSeries.

        Total precipitation in period - Default (mm)

        :param precip: The precip of this EnergyObsSeries.
        :type precip: float
        """

        self._precip = precip

    @property
    def rh(self):
        """Gets the rh of this EnergyObsSeries.

        Average Relative humidity (%)

        :return: The rh of this EnergyObsSeries.
        :rtype: int
        """
        return self._rh

    @rh.setter
    def rh(self, rh):
        """Sets the rh of this EnergyObsSeries.

        Average Relative humidity (%)

        :param rh: The rh of this EnergyObsSeries.
        :type rh: int
        """

        self._rh = rh

    @property
    def snow(self):
        """Gets the snow of this EnergyObsSeries.

        Total snowfall in period - Default (mm)

        :return: The snow of this EnergyObsSeries.
        :rtype: float
        """
        return self._snow

    @snow.setter
    def snow(self, snow):
        """Sets the snow of this EnergyObsSeries.

        Total snowfall in period - Default (mm)

        :param snow: The snow of this EnergyObsSeries.
        :type snow: float
        """

        self._snow = snow

    @property
    def sun_hours(self):
        """Gets the sun_hours of this EnergyObsSeries.

        Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2

        :return: The sun_hours of this EnergyObsSeries.
        :rtype: float
        """
        return self._sun_hours

    @sun_hours.setter
    def sun_hours(self, sun_hours):
        """Sets the sun_hours of this EnergyObsSeries.

        Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2

        :param sun_hours: The sun_hours of this EnergyObsSeries.
        :type sun_hours: float
        """

        self._sun_hours = sun_hours

    @property
    def t_dhi(self):
        """Gets the t_dhi of this EnergyObsSeries.

        Total diffuse horizontal solar irradiance (W/m^2)

        :return: The t_dhi of this EnergyObsSeries.
        :rtype: float
        """
        return self._t_dhi

    @t_dhi.setter
    def t_dhi(self, t_dhi):
        """Sets the t_dhi of this EnergyObsSeries.

        Total diffuse horizontal solar irradiance (W/m^2)

        :param t_dhi: The t_dhi of this EnergyObsSeries.
        :type t_dhi: float
        """

        self._t_dhi = t_dhi

    @property
    def t_dni(self):
        """Gets the t_dni of this EnergyObsSeries.

        Total direct normal solar irradiance (W/m^2)

        :return: The t_dni of this EnergyObsSeries.
        :rtype: float
        """
        return self._t_dni

    @t_dni.setter
    def t_dni(self, t_dni):
        """Sets the t_dni of this EnergyObsSeries.

        Total direct normal solar irradiance (W/m^2)

        :param t_dni: The t_dni of this EnergyObsSeries.
        :type t_dni: float
        """

        self._t_dni = t_dni

    @property
    def t_ghi(self):
        """Gets the t_ghi of this EnergyObsSeries.

        Total global horizontal solar irradiance (W/m^2)

        :return: The t_ghi of this EnergyObsSeries.
        :rtype: float
        """
        return self._t_ghi

    @t_ghi.setter
    def t_ghi(self, t_ghi):
        """Sets the t_ghi of this EnergyObsSeries.

        Total global horizontal solar irradiance (W/m^2)

        :param t_ghi: The t_ghi of this EnergyObsSeries.
        :type t_ghi: float
        """

        self._t_ghi = t_ghi

    @property
    def temp(self):
        """Gets the temp of this EnergyObsSeries.

        Average temperature - Default (C)

        :return: The temp of this EnergyObsSeries.
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this EnergyObsSeries.

        Average temperature - Default (C)

        :param temp: The temp of this EnergyObsSeries.
        :type temp: float
        """

        self._temp = temp

    @property
    def wind_dir(self):
        """Gets the wind_dir of this EnergyObsSeries.

        Average wind direction (Degrees)

        :return: The wind_dir of this EnergyObsSeries.
        :rtype: int
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir):
        """Sets the wind_dir of this EnergyObsSeries.

        Average wind direction (Degrees)

        :param wind_dir: The wind_dir of this EnergyObsSeries.
        :type wind_dir: int
        """

        self._wind_dir = wind_dir

    @property
    def wind_spd(self):
        """Gets the wind_spd of this EnergyObsSeries.

        Average wind speed - Default (m/s)

        :return: The wind_spd of this EnergyObsSeries.
        :rtype: float
        """
        return self._wind_spd

    @wind_spd.setter
    def wind_spd(self, wind_spd):
        """Sets the wind_spd of this EnergyObsSeries.

        Average wind speed - Default (m/s)

        :param wind_spd: The wind_spd of this EnergyObsSeries.
        :type wind_spd: float
        """

        self._wind_spd = wind_spd
