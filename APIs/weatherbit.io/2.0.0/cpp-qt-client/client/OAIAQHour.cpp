/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAQHour.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAQHour::OAIAQHour(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAQHour::OAIAQHour() {
    this->initializeModel();
}

OAIAQHour::~OAIAQHour() {}

void OAIAQHour::initializeModel() {

    m_aqi_isSet = false;
    m_aqi_isValid = false;

    m_no2_isSet = false;
    m_no2_isValid = false;

    m_o3_isSet = false;
    m_o3_isValid = false;

    m_pm10_isSet = false;
    m_pm10_isValid = false;

    m_pm25_isSet = false;
    m_pm25_isValid = false;

    m_so2_isSet = false;
    m_so2_isValid = false;

    m_timestamp_local_isSet = false;
    m_timestamp_local_isValid = false;

    m_timestamp_utc_isSet = false;
    m_timestamp_utc_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;
}

void OAIAQHour::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAQHour::fromJsonObject(QJsonObject json) {

    m_aqi_isValid = ::OpenAPI::fromJsonValue(m_aqi, json[QString("aqi")]);
    m_aqi_isSet = !json[QString("aqi")].isNull() && m_aqi_isValid;

    m_no2_isValid = ::OpenAPI::fromJsonValue(m_no2, json[QString("no2")]);
    m_no2_isSet = !json[QString("no2")].isNull() && m_no2_isValid;

    m_o3_isValid = ::OpenAPI::fromJsonValue(m_o3, json[QString("o3")]);
    m_o3_isSet = !json[QString("o3")].isNull() && m_o3_isValid;

    m_pm10_isValid = ::OpenAPI::fromJsonValue(m_pm10, json[QString("pm10")]);
    m_pm10_isSet = !json[QString("pm10")].isNull() && m_pm10_isValid;

    m_pm25_isValid = ::OpenAPI::fromJsonValue(m_pm25, json[QString("pm25")]);
    m_pm25_isSet = !json[QString("pm25")].isNull() && m_pm25_isValid;

    m_so2_isValid = ::OpenAPI::fromJsonValue(m_so2, json[QString("so2")]);
    m_so2_isSet = !json[QString("so2")].isNull() && m_so2_isValid;

    m_timestamp_local_isValid = ::OpenAPI::fromJsonValue(m_timestamp_local, json[QString("timestamp_local")]);
    m_timestamp_local_isSet = !json[QString("timestamp_local")].isNull() && m_timestamp_local_isValid;

    m_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_timestamp_utc, json[QString("timestamp_utc")]);
    m_timestamp_utc_isSet = !json[QString("timestamp_utc")].isNull() && m_timestamp_utc_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;
}

QString OAIAQHour::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAQHour::asJsonObject() const {
    QJsonObject obj;
    if (m_aqi_isSet) {
        obj.insert(QString("aqi"), ::OpenAPI::toJsonValue(m_aqi));
    }
    if (m_no2_isSet) {
        obj.insert(QString("no2"), ::OpenAPI::toJsonValue(m_no2));
    }
    if (m_o3_isSet) {
        obj.insert(QString("o3"), ::OpenAPI::toJsonValue(m_o3));
    }
    if (m_pm10_isSet) {
        obj.insert(QString("pm10"), ::OpenAPI::toJsonValue(m_pm10));
    }
    if (m_pm25_isSet) {
        obj.insert(QString("pm25"), ::OpenAPI::toJsonValue(m_pm25));
    }
    if (m_so2_isSet) {
        obj.insert(QString("so2"), ::OpenAPI::toJsonValue(m_so2));
    }
    if (m_timestamp_local_isSet) {
        obj.insert(QString("timestamp_local"), ::OpenAPI::toJsonValue(m_timestamp_local));
    }
    if (m_timestamp_utc_isSet) {
        obj.insert(QString("timestamp_utc"), ::OpenAPI::toJsonValue(m_timestamp_utc));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    return obj;
}

qint32 OAIAQHour::getAqi() const {
    return m_aqi;
}
void OAIAQHour::setAqi(const qint32 &aqi) {
    m_aqi = aqi;
    m_aqi_isSet = true;
}

bool OAIAQHour::is_aqi_Set() const{
    return m_aqi_isSet;
}

bool OAIAQHour::is_aqi_Valid() const{
    return m_aqi_isValid;
}

double OAIAQHour::getNo2() const {
    return m_no2;
}
void OAIAQHour::setNo2(const double &no2) {
    m_no2 = no2;
    m_no2_isSet = true;
}

bool OAIAQHour::is_no2_Set() const{
    return m_no2_isSet;
}

bool OAIAQHour::is_no2_Valid() const{
    return m_no2_isValid;
}

double OAIAQHour::getO3() const {
    return m_o3;
}
void OAIAQHour::setO3(const double &o3) {
    m_o3 = o3;
    m_o3_isSet = true;
}

bool OAIAQHour::is_o3_Set() const{
    return m_o3_isSet;
}

bool OAIAQHour::is_o3_Valid() const{
    return m_o3_isValid;
}

double OAIAQHour::getPm10() const {
    return m_pm10;
}
void OAIAQHour::setPm10(const double &pm10) {
    m_pm10 = pm10;
    m_pm10_isSet = true;
}

bool OAIAQHour::is_pm10_Set() const{
    return m_pm10_isSet;
}

bool OAIAQHour::is_pm10_Valid() const{
    return m_pm10_isValid;
}

double OAIAQHour::getPm25() const {
    return m_pm25;
}
void OAIAQHour::setPm25(const double &pm25) {
    m_pm25 = pm25;
    m_pm25_isSet = true;
}

bool OAIAQHour::is_pm25_Set() const{
    return m_pm25_isSet;
}

bool OAIAQHour::is_pm25_Valid() const{
    return m_pm25_isValid;
}

double OAIAQHour::getSo2() const {
    return m_so2;
}
void OAIAQHour::setSo2(const double &so2) {
    m_so2 = so2;
    m_so2_isSet = true;
}

bool OAIAQHour::is_so2_Set() const{
    return m_so2_isSet;
}

bool OAIAQHour::is_so2_Valid() const{
    return m_so2_isValid;
}

QString OAIAQHour::getTimestampLocal() const {
    return m_timestamp_local;
}
void OAIAQHour::setTimestampLocal(const QString &timestamp_local) {
    m_timestamp_local = timestamp_local;
    m_timestamp_local_isSet = true;
}

bool OAIAQHour::is_timestamp_local_Set() const{
    return m_timestamp_local_isSet;
}

bool OAIAQHour::is_timestamp_local_Valid() const{
    return m_timestamp_local_isValid;
}

QString OAIAQHour::getTimestampUtc() const {
    return m_timestamp_utc;
}
void OAIAQHour::setTimestampUtc(const QString &timestamp_utc) {
    m_timestamp_utc = timestamp_utc;
    m_timestamp_utc_isSet = true;
}

bool OAIAQHour::is_timestamp_utc_Set() const{
    return m_timestamp_utc_isSet;
}

bool OAIAQHour::is_timestamp_utc_Valid() const{
    return m_timestamp_utc_isValid;
}

double OAIAQHour::getTs() const {
    return m_ts;
}
void OAIAQHour::setTs(const double &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIAQHour::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIAQHour::is_ts_Valid() const{
    return m_ts_isValid;
}

bool OAIAQHour::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aqi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm25_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAQHour::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
