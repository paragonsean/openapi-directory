/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAQHour.h
 *
 * 
 */

#ifndef OAIAQHour_H
#define OAIAQHour_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAQHour : public OAIObject {
public:
    OAIAQHour();
    OAIAQHour(QString json);
    ~OAIAQHour() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAqi() const;
    void setAqi(const qint32 &aqi);
    bool is_aqi_Set() const;
    bool is_aqi_Valid() const;

    double getNo2() const;
    void setNo2(const double &no2);
    bool is_no2_Set() const;
    bool is_no2_Valid() const;

    double getO3() const;
    void setO3(const double &o3);
    bool is_o3_Set() const;
    bool is_o3_Valid() const;

    double getPm10() const;
    void setPm10(const double &pm10);
    bool is_pm10_Set() const;
    bool is_pm10_Valid() const;

    double getPm25() const;
    void setPm25(const double &pm25);
    bool is_pm25_Set() const;
    bool is_pm25_Valid() const;

    double getSo2() const;
    void setSo2(const double &so2);
    bool is_so2_Set() const;
    bool is_so2_Valid() const;

    QString getTimestampLocal() const;
    void setTimestampLocal(const QString &timestamp_local);
    bool is_timestamp_local_Set() const;
    bool is_timestamp_local_Valid() const;

    QString getTimestampUtc() const;
    void setTimestampUtc(const QString &timestamp_utc);
    bool is_timestamp_utc_Set() const;
    bool is_timestamp_utc_Valid() const;

    double getTs() const;
    void setTs(const double &ts);
    bool is_ts_Set() const;
    bool is_ts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_aqi;
    bool m_aqi_isSet;
    bool m_aqi_isValid;

    double m_no2;
    bool m_no2_isSet;
    bool m_no2_isValid;

    double m_o3;
    bool m_o3_isSet;
    bool m_o3_isValid;

    double m_pm10;
    bool m_pm10_isSet;
    bool m_pm10_isValid;

    double m_pm25;
    bool m_pm25_isSet;
    bool m_pm25_isValid;

    double m_so2;
    bool m_so2_isSet;
    bool m_so2_isValid;

    QString m_timestamp_local;
    bool m_timestamp_local_isSet;
    bool m_timestamp_local_isValid;

    QString m_timestamp_utc;
    bool m_timestamp_utc_isSet;
    bool m_timestamp_utc_isValid;

    double m_ts;
    bool m_ts_isSet;
    bool m_ts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAQHour)

#endif // OAIAQHour_H
