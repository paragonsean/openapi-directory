/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubHourlyHistoricalWeatherDataApi_H
#define OAI_OAISubHourlyHistoricalWeatherDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIHistory.h"
#include "OAIHistorySubhourly.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubHourlyHistoricalWeatherDataApi : public QObject {
    Q_OBJECT

public:
    OAISubHourlyHistoricalWeatherDataApi(const int timeOut = 0);
    ~OAISubHourlyHistoricalWeatherDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  city_id QString [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  key QString [required]
    * @param[in]  units QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  tz QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historySubhourlycityIdcityIdGet(const QString &city_id, const QString &start_date, const QString &end_date, const QString &key, const ::OpenAPI::OptionalParam<QString> &units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  city QString [required]
    * @param[in]  country QString [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  key QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  units QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  tz QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historySubhourlycitycitycountrycountryGet(const QString &city, const QString &country, const QString &start_date, const QString &end_date, const QString &key, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  key QString [required]
    * @param[in]  units QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  tz QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historySubhourlylatlatlonlonGet(const double &lat, const double &lon, const QString &start_date, const QString &end_date, const QString &key, const ::OpenAPI::OptionalParam<QString> &units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  postal_code QString [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  key QString [required]
    * @param[in]  country QString [optional]
    * @param[in]  units QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  tz QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historySubhourlypostalCodepostalCodeGet(const QString &postal_code, const QString &start_date, const QString &end_date, const QString &key, const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  station QString [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  key QString [required]
    * @param[in]  units QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  tz QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historySubhourlystationstationGet(const QString &station, const QString &start_date, const QString &end_date, const QString &key, const ::OpenAPI::OptionalParam<QString> &units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void historySubhourlycityIdcityIdGetCallback(OAIHttpRequestWorker *worker);
    void historySubhourlycitycitycountrycountryGetCallback(OAIHttpRequestWorker *worker);
    void historySubhourlylatlatlonlonGetCallback(OAIHttpRequestWorker *worker);
    void historySubhourlypostalCodepostalCodeGetCallback(OAIHttpRequestWorker *worker);
    void historySubhourlystationstationGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void historySubhourlycityIdcityIdGetSignal(OAIHistorySubhourly summary);
    void historySubhourlycitycitycountrycountryGetSignal(OAIHistory summary);
    void historySubhourlylatlatlonlonGetSignal(OAIHistorySubhourly summary);
    void historySubhourlypostalCodepostalCodeGetSignal(OAIHistorySubhourly summary);
    void historySubhourlystationstationGetSignal(OAIHistorySubhourly summary);


    void historySubhourlycityIdcityIdGetSignalFull(OAIHttpRequestWorker *worker, OAIHistorySubhourly summary);
    void historySubhourlycitycitycountrycountryGetSignalFull(OAIHttpRequestWorker *worker, OAIHistory summary);
    void historySubhourlylatlatlonlonGetSignalFull(OAIHttpRequestWorker *worker, OAIHistorySubhourly summary);
    void historySubhourlypostalCodepostalCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIHistorySubhourly summary);
    void historySubhourlystationstationGetSignalFull(OAIHttpRequestWorker *worker, OAIHistorySubhourly summary);

    Q_DECL_DEPRECATED_X("Use historySubhourlycityIdcityIdGetSignalError() instead")
    void historySubhourlycityIdcityIdGetSignalE(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlycityIdcityIdGetSignalError(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlycitycitycountrycountryGetSignalError() instead")
    void historySubhourlycitycitycountrycountryGetSignalE(OAIHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlycitycitycountrycountryGetSignalError(OAIHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlylatlatlonlonGetSignalError() instead")
    void historySubhourlylatlatlonlonGetSignalE(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlylatlatlonlonGetSignalError(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlypostalCodepostalCodeGetSignalError() instead")
    void historySubhourlypostalCodepostalCodeGetSignalE(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlypostalCodepostalCodeGetSignalError(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlystationstationGetSignalError() instead")
    void historySubhourlystationstationGetSignalE(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlystationstationGetSignalError(OAIHistorySubhourly summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use historySubhourlycityIdcityIdGetSignalErrorFull() instead")
    void historySubhourlycityIdcityIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlycityIdcityIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlycitycitycountrycountryGetSignalErrorFull() instead")
    void historySubhourlycitycitycountrycountryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlycitycitycountrycountryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlylatlatlonlonGetSignalErrorFull() instead")
    void historySubhourlylatlatlonlonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlylatlatlonlonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlypostalCodepostalCodeGetSignalErrorFull() instead")
    void historySubhourlypostalCodepostalCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlypostalCodepostalCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySubhourlystationstationGetSignalErrorFull() instead")
    void historySubhourlystationstationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historySubhourlystationstationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
