/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistorySubhourlyObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistorySubhourlyObj::OAIHistorySubhourlyObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistorySubhourlyObj::OAIHistorySubhourlyObj() {
    this->initializeModel();
}

OAIHistorySubhourlyObj::~OAIHistorySubhourlyObj() {}

void OAIHistorySubhourlyObj::initializeModel() {

    m_app_temp_isSet = false;
    m_app_temp_isValid = false;

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_clouds_isSet = false;
    m_clouds_isValid = false;

    m_dewpt_isSet = false;
    m_dewpt_isValid = false;

    m_dhi_isSet = false;
    m_dhi_isValid = false;

    m_dni_isSet = false;
    m_dni_isValid = false;

    m_elev_angle_isSet = false;
    m_elev_angle_isValid = false;

    m_ghi_isSet = false;
    m_ghi_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_precip_rate_isSet = false;
    m_precip_rate_isValid = false;

    m_pres_isSet = false;
    m_pres_isValid = false;

    m_revision_status_isSet = false;
    m_revision_status_isValid = false;

    m_rh_isSet = false;
    m_rh_isValid = false;

    m_slp_isSet = false;
    m_slp_isValid = false;

    m_snow_rate_isSet = false;
    m_snow_rate_isValid = false;

    m_solar_rad_isSet = false;
    m_solar_rad_isValid = false;

    m_temp_isSet = false;
    m_temp_isValid = false;

    m_timestamp_local_isSet = false;
    m_timestamp_local_isValid = false;

    m_timestamp_utc_isSet = false;
    m_timestamp_utc_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_uv_isSet = false;
    m_uv_isValid = false;

    m_vis_isSet = false;
    m_vis_isValid = false;

    m_weather_isSet = false;
    m_weather_isValid = false;

    m_wind_dir_isSet = false;
    m_wind_dir_isValid = false;

    m_wind_gust_spd_isSet = false;
    m_wind_gust_spd_isValid = false;

    m_wind_spd_isSet = false;
    m_wind_spd_isValid = false;
}

void OAIHistorySubhourlyObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistorySubhourlyObj::fromJsonObject(QJsonObject json) {

    m_app_temp_isValid = ::OpenAPI::fromJsonValue(m_app_temp, json[QString("app_temp")]);
    m_app_temp_isSet = !json[QString("app_temp")].isNull() && m_app_temp_isValid;

    m_azimuth_isValid = ::OpenAPI::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_clouds_isValid = ::OpenAPI::fromJsonValue(m_clouds, json[QString("clouds")]);
    m_clouds_isSet = !json[QString("clouds")].isNull() && m_clouds_isValid;

    m_dewpt_isValid = ::OpenAPI::fromJsonValue(m_dewpt, json[QString("dewpt")]);
    m_dewpt_isSet = !json[QString("dewpt")].isNull() && m_dewpt_isValid;

    m_dhi_isValid = ::OpenAPI::fromJsonValue(m_dhi, json[QString("dhi")]);
    m_dhi_isSet = !json[QString("dhi")].isNull() && m_dhi_isValid;

    m_dni_isValid = ::OpenAPI::fromJsonValue(m_dni, json[QString("dni")]);
    m_dni_isSet = !json[QString("dni")].isNull() && m_dni_isValid;

    m_elev_angle_isValid = ::OpenAPI::fromJsonValue(m_elev_angle, json[QString("elev_angle")]);
    m_elev_angle_isSet = !json[QString("elev_angle")].isNull() && m_elev_angle_isValid;

    m_ghi_isValid = ::OpenAPI::fromJsonValue(m_ghi, json[QString("ghi")]);
    m_ghi_isSet = !json[QString("ghi")].isNull() && m_ghi_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_precip_rate_isValid = ::OpenAPI::fromJsonValue(m_precip_rate, json[QString("precip_rate")]);
    m_precip_rate_isSet = !json[QString("precip_rate")].isNull() && m_precip_rate_isValid;

    m_pres_isValid = ::OpenAPI::fromJsonValue(m_pres, json[QString("pres")]);
    m_pres_isSet = !json[QString("pres")].isNull() && m_pres_isValid;

    m_revision_status_isValid = ::OpenAPI::fromJsonValue(m_revision_status, json[QString("revision_status")]);
    m_revision_status_isSet = !json[QString("revision_status")].isNull() && m_revision_status_isValid;

    m_rh_isValid = ::OpenAPI::fromJsonValue(m_rh, json[QString("rh")]);
    m_rh_isSet = !json[QString("rh")].isNull() && m_rh_isValid;

    m_slp_isValid = ::OpenAPI::fromJsonValue(m_slp, json[QString("slp")]);
    m_slp_isSet = !json[QString("slp")].isNull() && m_slp_isValid;

    m_snow_rate_isValid = ::OpenAPI::fromJsonValue(m_snow_rate, json[QString("snow_rate")]);
    m_snow_rate_isSet = !json[QString("snow_rate")].isNull() && m_snow_rate_isValid;

    m_solar_rad_isValid = ::OpenAPI::fromJsonValue(m_solar_rad, json[QString("solar_rad")]);
    m_solar_rad_isSet = !json[QString("solar_rad")].isNull() && m_solar_rad_isValid;

    m_temp_isValid = ::OpenAPI::fromJsonValue(m_temp, json[QString("temp")]);
    m_temp_isSet = !json[QString("temp")].isNull() && m_temp_isValid;

    m_timestamp_local_isValid = ::OpenAPI::fromJsonValue(m_timestamp_local, json[QString("timestamp_local")]);
    m_timestamp_local_isSet = !json[QString("timestamp_local")].isNull() && m_timestamp_local_isValid;

    m_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_timestamp_utc, json[QString("timestamp_utc")]);
    m_timestamp_utc_isSet = !json[QString("timestamp_utc")].isNull() && m_timestamp_utc_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_uv_isValid = ::OpenAPI::fromJsonValue(m_uv, json[QString("uv")]);
    m_uv_isSet = !json[QString("uv")].isNull() && m_uv_isValid;

    m_vis_isValid = ::OpenAPI::fromJsonValue(m_vis, json[QString("vis")]);
    m_vis_isSet = !json[QString("vis")].isNull() && m_vis_isValid;

    m_weather_isValid = ::OpenAPI::fromJsonValue(m_weather, json[QString("weather")]);
    m_weather_isSet = !json[QString("weather")].isNull() && m_weather_isValid;

    m_wind_dir_isValid = ::OpenAPI::fromJsonValue(m_wind_dir, json[QString("wind_dir")]);
    m_wind_dir_isSet = !json[QString("wind_dir")].isNull() && m_wind_dir_isValid;

    m_wind_gust_spd_isValid = ::OpenAPI::fromJsonValue(m_wind_gust_spd, json[QString("wind_gust_spd")]);
    m_wind_gust_spd_isSet = !json[QString("wind_gust_spd")].isNull() && m_wind_gust_spd_isValid;

    m_wind_spd_isValid = ::OpenAPI::fromJsonValue(m_wind_spd, json[QString("wind_spd")]);
    m_wind_spd_isSet = !json[QString("wind_spd")].isNull() && m_wind_spd_isValid;
}

QString OAIHistorySubhourlyObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistorySubhourlyObj::asJsonObject() const {
    QJsonObject obj;
    if (m_app_temp_isSet) {
        obj.insert(QString("app_temp"), ::OpenAPI::toJsonValue(m_app_temp));
    }
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OpenAPI::toJsonValue(m_azimuth));
    }
    if (m_clouds_isSet) {
        obj.insert(QString("clouds"), ::OpenAPI::toJsonValue(m_clouds));
    }
    if (m_dewpt_isSet) {
        obj.insert(QString("dewpt"), ::OpenAPI::toJsonValue(m_dewpt));
    }
    if (m_dhi_isSet) {
        obj.insert(QString("dhi"), ::OpenAPI::toJsonValue(m_dhi));
    }
    if (m_dni_isSet) {
        obj.insert(QString("dni"), ::OpenAPI::toJsonValue(m_dni));
    }
    if (m_elev_angle_isSet) {
        obj.insert(QString("elev_angle"), ::OpenAPI::toJsonValue(m_elev_angle));
    }
    if (m_ghi_isSet) {
        obj.insert(QString("ghi"), ::OpenAPI::toJsonValue(m_ghi));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_precip_rate_isSet) {
        obj.insert(QString("precip_rate"), ::OpenAPI::toJsonValue(m_precip_rate));
    }
    if (m_pres_isSet) {
        obj.insert(QString("pres"), ::OpenAPI::toJsonValue(m_pres));
    }
    if (m_revision_status_isSet) {
        obj.insert(QString("revision_status"), ::OpenAPI::toJsonValue(m_revision_status));
    }
    if (m_rh_isSet) {
        obj.insert(QString("rh"), ::OpenAPI::toJsonValue(m_rh));
    }
    if (m_slp_isSet) {
        obj.insert(QString("slp"), ::OpenAPI::toJsonValue(m_slp));
    }
    if (m_snow_rate_isSet) {
        obj.insert(QString("snow_rate"), ::OpenAPI::toJsonValue(m_snow_rate));
    }
    if (m_solar_rad_isSet) {
        obj.insert(QString("solar_rad"), ::OpenAPI::toJsonValue(m_solar_rad));
    }
    if (m_temp_isSet) {
        obj.insert(QString("temp"), ::OpenAPI::toJsonValue(m_temp));
    }
    if (m_timestamp_local_isSet) {
        obj.insert(QString("timestamp_local"), ::OpenAPI::toJsonValue(m_timestamp_local));
    }
    if (m_timestamp_utc_isSet) {
        obj.insert(QString("timestamp_utc"), ::OpenAPI::toJsonValue(m_timestamp_utc));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_uv_isSet) {
        obj.insert(QString("uv"), ::OpenAPI::toJsonValue(m_uv));
    }
    if (m_vis_isSet) {
        obj.insert(QString("vis"), ::OpenAPI::toJsonValue(m_vis));
    }
    if (m_weather.isSet()) {
        obj.insert(QString("weather"), ::OpenAPI::toJsonValue(m_weather));
    }
    if (m_wind_dir_isSet) {
        obj.insert(QString("wind_dir"), ::OpenAPI::toJsonValue(m_wind_dir));
    }
    if (m_wind_gust_spd_isSet) {
        obj.insert(QString("wind_gust_spd"), ::OpenAPI::toJsonValue(m_wind_gust_spd));
    }
    if (m_wind_spd_isSet) {
        obj.insert(QString("wind_spd"), ::OpenAPI::toJsonValue(m_wind_spd));
    }
    return obj;
}

double OAIHistorySubhourlyObj::getAppTemp() const {
    return m_app_temp;
}
void OAIHistorySubhourlyObj::setAppTemp(const double &app_temp) {
    m_app_temp = app_temp;
    m_app_temp_isSet = true;
}

bool OAIHistorySubhourlyObj::is_app_temp_Set() const{
    return m_app_temp_isSet;
}

bool OAIHistorySubhourlyObj::is_app_temp_Valid() const{
    return m_app_temp_isValid;
}

double OAIHistorySubhourlyObj::getAzimuth() const {
    return m_azimuth;
}
void OAIHistorySubhourlyObj::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OAIHistorySubhourlyObj::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OAIHistorySubhourlyObj::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

qint32 OAIHistorySubhourlyObj::getClouds() const {
    return m_clouds;
}
void OAIHistorySubhourlyObj::setClouds(const qint32 &clouds) {
    m_clouds = clouds;
    m_clouds_isSet = true;
}

bool OAIHistorySubhourlyObj::is_clouds_Set() const{
    return m_clouds_isSet;
}

bool OAIHistorySubhourlyObj::is_clouds_Valid() const{
    return m_clouds_isValid;
}

qint32 OAIHistorySubhourlyObj::getDewpt() const {
    return m_dewpt;
}
void OAIHistorySubhourlyObj::setDewpt(const qint32 &dewpt) {
    m_dewpt = dewpt;
    m_dewpt_isSet = true;
}

bool OAIHistorySubhourlyObj::is_dewpt_Set() const{
    return m_dewpt_isSet;
}

bool OAIHistorySubhourlyObj::is_dewpt_Valid() const{
    return m_dewpt_isValid;
}

double OAIHistorySubhourlyObj::getDhi() const {
    return m_dhi;
}
void OAIHistorySubhourlyObj::setDhi(const double &dhi) {
    m_dhi = dhi;
    m_dhi_isSet = true;
}

bool OAIHistorySubhourlyObj::is_dhi_Set() const{
    return m_dhi_isSet;
}

bool OAIHistorySubhourlyObj::is_dhi_Valid() const{
    return m_dhi_isValid;
}

double OAIHistorySubhourlyObj::getDni() const {
    return m_dni;
}
void OAIHistorySubhourlyObj::setDni(const double &dni) {
    m_dni = dni;
    m_dni_isSet = true;
}

bool OAIHistorySubhourlyObj::is_dni_Set() const{
    return m_dni_isSet;
}

bool OAIHistorySubhourlyObj::is_dni_Valid() const{
    return m_dni_isValid;
}

double OAIHistorySubhourlyObj::getElevAngle() const {
    return m_elev_angle;
}
void OAIHistorySubhourlyObj::setElevAngle(const double &elev_angle) {
    m_elev_angle = elev_angle;
    m_elev_angle_isSet = true;
}

bool OAIHistorySubhourlyObj::is_elev_angle_Set() const{
    return m_elev_angle_isSet;
}

bool OAIHistorySubhourlyObj::is_elev_angle_Valid() const{
    return m_elev_angle_isValid;
}

double OAIHistorySubhourlyObj::getGhi() const {
    return m_ghi;
}
void OAIHistorySubhourlyObj::setGhi(const double &ghi) {
    m_ghi = ghi;
    m_ghi_isSet = true;
}

bool OAIHistorySubhourlyObj::is_ghi_Set() const{
    return m_ghi_isSet;
}

bool OAIHistorySubhourlyObj::is_ghi_Valid() const{
    return m_ghi_isValid;
}

QString OAIHistorySubhourlyObj::getPod() const {
    return m_pod;
}
void OAIHistorySubhourlyObj::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIHistorySubhourlyObj::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIHistorySubhourlyObj::is_pod_Valid() const{
    return m_pod_isValid;
}

double OAIHistorySubhourlyObj::getPrecipRate() const {
    return m_precip_rate;
}
void OAIHistorySubhourlyObj::setPrecipRate(const double &precip_rate) {
    m_precip_rate = precip_rate;
    m_precip_rate_isSet = true;
}

bool OAIHistorySubhourlyObj::is_precip_rate_Set() const{
    return m_precip_rate_isSet;
}

bool OAIHistorySubhourlyObj::is_precip_rate_Valid() const{
    return m_precip_rate_isValid;
}

double OAIHistorySubhourlyObj::getPres() const {
    return m_pres;
}
void OAIHistorySubhourlyObj::setPres(const double &pres) {
    m_pres = pres;
    m_pres_isSet = true;
}

bool OAIHistorySubhourlyObj::is_pres_Set() const{
    return m_pres_isSet;
}

bool OAIHistorySubhourlyObj::is_pres_Valid() const{
    return m_pres_isValid;
}

QString OAIHistorySubhourlyObj::getRevisionStatus() const {
    return m_revision_status;
}
void OAIHistorySubhourlyObj::setRevisionStatus(const QString &revision_status) {
    m_revision_status = revision_status;
    m_revision_status_isSet = true;
}

bool OAIHistorySubhourlyObj::is_revision_status_Set() const{
    return m_revision_status_isSet;
}

bool OAIHistorySubhourlyObj::is_revision_status_Valid() const{
    return m_revision_status_isValid;
}

qint32 OAIHistorySubhourlyObj::getRh() const {
    return m_rh;
}
void OAIHistorySubhourlyObj::setRh(const qint32 &rh) {
    m_rh = rh;
    m_rh_isSet = true;
}

bool OAIHistorySubhourlyObj::is_rh_Set() const{
    return m_rh_isSet;
}

bool OAIHistorySubhourlyObj::is_rh_Valid() const{
    return m_rh_isValid;
}

double OAIHistorySubhourlyObj::getSlp() const {
    return m_slp;
}
void OAIHistorySubhourlyObj::setSlp(const double &slp) {
    m_slp = slp;
    m_slp_isSet = true;
}

bool OAIHistorySubhourlyObj::is_slp_Set() const{
    return m_slp_isSet;
}

bool OAIHistorySubhourlyObj::is_slp_Valid() const{
    return m_slp_isValid;
}

double OAIHistorySubhourlyObj::getSnowRate() const {
    return m_snow_rate;
}
void OAIHistorySubhourlyObj::setSnowRate(const double &snow_rate) {
    m_snow_rate = snow_rate;
    m_snow_rate_isSet = true;
}

bool OAIHistorySubhourlyObj::is_snow_rate_Set() const{
    return m_snow_rate_isSet;
}

bool OAIHistorySubhourlyObj::is_snow_rate_Valid() const{
    return m_snow_rate_isValid;
}

double OAIHistorySubhourlyObj::getSolarRad() const {
    return m_solar_rad;
}
void OAIHistorySubhourlyObj::setSolarRad(const double &solar_rad) {
    m_solar_rad = solar_rad;
    m_solar_rad_isSet = true;
}

bool OAIHistorySubhourlyObj::is_solar_rad_Set() const{
    return m_solar_rad_isSet;
}

bool OAIHistorySubhourlyObj::is_solar_rad_Valid() const{
    return m_solar_rad_isValid;
}

double OAIHistorySubhourlyObj::getTemp() const {
    return m_temp;
}
void OAIHistorySubhourlyObj::setTemp(const double &temp) {
    m_temp = temp;
    m_temp_isSet = true;
}

bool OAIHistorySubhourlyObj::is_temp_Set() const{
    return m_temp_isSet;
}

bool OAIHistorySubhourlyObj::is_temp_Valid() const{
    return m_temp_isValid;
}

QString OAIHistorySubhourlyObj::getTimestampLocal() const {
    return m_timestamp_local;
}
void OAIHistorySubhourlyObj::setTimestampLocal(const QString &timestamp_local) {
    m_timestamp_local = timestamp_local;
    m_timestamp_local_isSet = true;
}

bool OAIHistorySubhourlyObj::is_timestamp_local_Set() const{
    return m_timestamp_local_isSet;
}

bool OAIHistorySubhourlyObj::is_timestamp_local_Valid() const{
    return m_timestamp_local_isValid;
}

QString OAIHistorySubhourlyObj::getTimestampUtc() const {
    return m_timestamp_utc;
}
void OAIHistorySubhourlyObj::setTimestampUtc(const QString &timestamp_utc) {
    m_timestamp_utc = timestamp_utc;
    m_timestamp_utc_isSet = true;
}

bool OAIHistorySubhourlyObj::is_timestamp_utc_Set() const{
    return m_timestamp_utc_isSet;
}

bool OAIHistorySubhourlyObj::is_timestamp_utc_Valid() const{
    return m_timestamp_utc_isValid;
}

double OAIHistorySubhourlyObj::getTs() const {
    return m_ts;
}
void OAIHistorySubhourlyObj::setTs(const double &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIHistorySubhourlyObj::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIHistorySubhourlyObj::is_ts_Valid() const{
    return m_ts_isValid;
}

double OAIHistorySubhourlyObj::getUv() const {
    return m_uv;
}
void OAIHistorySubhourlyObj::setUv(const double &uv) {
    m_uv = uv;
    m_uv_isSet = true;
}

bool OAIHistorySubhourlyObj::is_uv_Set() const{
    return m_uv_isSet;
}

bool OAIHistorySubhourlyObj::is_uv_Valid() const{
    return m_uv_isValid;
}

double OAIHistorySubhourlyObj::getVis() const {
    return m_vis;
}
void OAIHistorySubhourlyObj::setVis(const double &vis) {
    m_vis = vis;
    m_vis_isSet = true;
}

bool OAIHistorySubhourlyObj::is_vis_Set() const{
    return m_vis_isSet;
}

bool OAIHistorySubhourlyObj::is_vis_Valid() const{
    return m_vis_isValid;
}

OAIHistoryObj_weather OAIHistorySubhourlyObj::getWeather() const {
    return m_weather;
}
void OAIHistorySubhourlyObj::setWeather(const OAIHistoryObj_weather &weather) {
    m_weather = weather;
    m_weather_isSet = true;
}

bool OAIHistorySubhourlyObj::is_weather_Set() const{
    return m_weather_isSet;
}

bool OAIHistorySubhourlyObj::is_weather_Valid() const{
    return m_weather_isValid;
}

qint32 OAIHistorySubhourlyObj::getWindDir() const {
    return m_wind_dir;
}
void OAIHistorySubhourlyObj::setWindDir(const qint32 &wind_dir) {
    m_wind_dir = wind_dir;
    m_wind_dir_isSet = true;
}

bool OAIHistorySubhourlyObj::is_wind_dir_Set() const{
    return m_wind_dir_isSet;
}

bool OAIHistorySubhourlyObj::is_wind_dir_Valid() const{
    return m_wind_dir_isValid;
}

double OAIHistorySubhourlyObj::getWindGustSpd() const {
    return m_wind_gust_spd;
}
void OAIHistorySubhourlyObj::setWindGustSpd(const double &wind_gust_spd) {
    m_wind_gust_spd = wind_gust_spd;
    m_wind_gust_spd_isSet = true;
}

bool OAIHistorySubhourlyObj::is_wind_gust_spd_Set() const{
    return m_wind_gust_spd_isSet;
}

bool OAIHistorySubhourlyObj::is_wind_gust_spd_Valid() const{
    return m_wind_gust_spd_isValid;
}

double OAIHistorySubhourlyObj::getWindSpd() const {
    return m_wind_spd;
}
void OAIHistorySubhourlyObj::setWindSpd(const double &wind_spd) {
    m_wind_spd = wind_spd;
    m_wind_spd_isSet = true;
}

bool OAIHistorySubhourlyObj::is_wind_spd_Set() const{
    return m_wind_spd_isSet;
}

bool OAIHistorySubhourlyObj::is_wind_spd_Valid() const{
    return m_wind_spd_isValid;
}

bool OAIHistorySubhourlyObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clouds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dewpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dni_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elev_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precip_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snow_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_rad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weather.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_gust_spd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_spd_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistorySubhourlyObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
