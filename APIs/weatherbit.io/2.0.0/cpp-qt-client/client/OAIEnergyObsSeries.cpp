/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnergyObsSeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnergyObsSeries::OAIEnergyObsSeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnergyObsSeries::OAIEnergyObsSeries() {
    this->initializeModel();
}

OAIEnergyObsSeries::~OAIEnergyObsSeries() {}

void OAIEnergyObsSeries::initializeModel() {

    m_cdd_isSet = false;
    m_cdd_isValid = false;

    m_clouds_isSet = false;
    m_clouds_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_dewpt_isSet = false;
    m_dewpt_isValid = false;

    m_hdd_isSet = false;
    m_hdd_isValid = false;

    m_precip_isSet = false;
    m_precip_isValid = false;

    m_rh_isSet = false;
    m_rh_isValid = false;

    m_snow_isSet = false;
    m_snow_isValid = false;

    m_sun_hours_isSet = false;
    m_sun_hours_isValid = false;

    m_t_dhi_isSet = false;
    m_t_dhi_isValid = false;

    m_t_dni_isSet = false;
    m_t_dni_isValid = false;

    m_t_ghi_isSet = false;
    m_t_ghi_isValid = false;

    m_temp_isSet = false;
    m_temp_isValid = false;

    m_wind_dir_isSet = false;
    m_wind_dir_isValid = false;

    m_wind_spd_isSet = false;
    m_wind_spd_isValid = false;
}

void OAIEnergyObsSeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnergyObsSeries::fromJsonObject(QJsonObject json) {

    m_cdd_isValid = ::OpenAPI::fromJsonValue(m_cdd, json[QString("cdd")]);
    m_cdd_isSet = !json[QString("cdd")].isNull() && m_cdd_isValid;

    m_clouds_isValid = ::OpenAPI::fromJsonValue(m_clouds, json[QString("clouds")]);
    m_clouds_isSet = !json[QString("clouds")].isNull() && m_clouds_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_dewpt_isValid = ::OpenAPI::fromJsonValue(m_dewpt, json[QString("dewpt")]);
    m_dewpt_isSet = !json[QString("dewpt")].isNull() && m_dewpt_isValid;

    m_hdd_isValid = ::OpenAPI::fromJsonValue(m_hdd, json[QString("hdd")]);
    m_hdd_isSet = !json[QString("hdd")].isNull() && m_hdd_isValid;

    m_precip_isValid = ::OpenAPI::fromJsonValue(m_precip, json[QString("precip")]);
    m_precip_isSet = !json[QString("precip")].isNull() && m_precip_isValid;

    m_rh_isValid = ::OpenAPI::fromJsonValue(m_rh, json[QString("rh")]);
    m_rh_isSet = !json[QString("rh")].isNull() && m_rh_isValid;

    m_snow_isValid = ::OpenAPI::fromJsonValue(m_snow, json[QString("snow")]);
    m_snow_isSet = !json[QString("snow")].isNull() && m_snow_isValid;

    m_sun_hours_isValid = ::OpenAPI::fromJsonValue(m_sun_hours, json[QString("sun_hours")]);
    m_sun_hours_isSet = !json[QString("sun_hours")].isNull() && m_sun_hours_isValid;

    m_t_dhi_isValid = ::OpenAPI::fromJsonValue(m_t_dhi, json[QString("t_dhi")]);
    m_t_dhi_isSet = !json[QString("t_dhi")].isNull() && m_t_dhi_isValid;

    m_t_dni_isValid = ::OpenAPI::fromJsonValue(m_t_dni, json[QString("t_dni")]);
    m_t_dni_isSet = !json[QString("t_dni")].isNull() && m_t_dni_isValid;

    m_t_ghi_isValid = ::OpenAPI::fromJsonValue(m_t_ghi, json[QString("t_ghi")]);
    m_t_ghi_isSet = !json[QString("t_ghi")].isNull() && m_t_ghi_isValid;

    m_temp_isValid = ::OpenAPI::fromJsonValue(m_temp, json[QString("temp")]);
    m_temp_isSet = !json[QString("temp")].isNull() && m_temp_isValid;

    m_wind_dir_isValid = ::OpenAPI::fromJsonValue(m_wind_dir, json[QString("wind_dir")]);
    m_wind_dir_isSet = !json[QString("wind_dir")].isNull() && m_wind_dir_isValid;

    m_wind_spd_isValid = ::OpenAPI::fromJsonValue(m_wind_spd, json[QString("wind_spd")]);
    m_wind_spd_isSet = !json[QString("wind_spd")].isNull() && m_wind_spd_isValid;
}

QString OAIEnergyObsSeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnergyObsSeries::asJsonObject() const {
    QJsonObject obj;
    if (m_cdd_isSet) {
        obj.insert(QString("cdd"), ::OpenAPI::toJsonValue(m_cdd));
    }
    if (m_clouds_isSet) {
        obj.insert(QString("clouds"), ::OpenAPI::toJsonValue(m_clouds));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_dewpt_isSet) {
        obj.insert(QString("dewpt"), ::OpenAPI::toJsonValue(m_dewpt));
    }
    if (m_hdd_isSet) {
        obj.insert(QString("hdd"), ::OpenAPI::toJsonValue(m_hdd));
    }
    if (m_precip_isSet) {
        obj.insert(QString("precip"), ::OpenAPI::toJsonValue(m_precip));
    }
    if (m_rh_isSet) {
        obj.insert(QString("rh"), ::OpenAPI::toJsonValue(m_rh));
    }
    if (m_snow_isSet) {
        obj.insert(QString("snow"), ::OpenAPI::toJsonValue(m_snow));
    }
    if (m_sun_hours_isSet) {
        obj.insert(QString("sun_hours"), ::OpenAPI::toJsonValue(m_sun_hours));
    }
    if (m_t_dhi_isSet) {
        obj.insert(QString("t_dhi"), ::OpenAPI::toJsonValue(m_t_dhi));
    }
    if (m_t_dni_isSet) {
        obj.insert(QString("t_dni"), ::OpenAPI::toJsonValue(m_t_dni));
    }
    if (m_t_ghi_isSet) {
        obj.insert(QString("t_ghi"), ::OpenAPI::toJsonValue(m_t_ghi));
    }
    if (m_temp_isSet) {
        obj.insert(QString("temp"), ::OpenAPI::toJsonValue(m_temp));
    }
    if (m_wind_dir_isSet) {
        obj.insert(QString("wind_dir"), ::OpenAPI::toJsonValue(m_wind_dir));
    }
    if (m_wind_spd_isSet) {
        obj.insert(QString("wind_spd"), ::OpenAPI::toJsonValue(m_wind_spd));
    }
    return obj;
}

double OAIEnergyObsSeries::getCdd() const {
    return m_cdd;
}
void OAIEnergyObsSeries::setCdd(const double &cdd) {
    m_cdd = cdd;
    m_cdd_isSet = true;
}

bool OAIEnergyObsSeries::is_cdd_Set() const{
    return m_cdd_isSet;
}

bool OAIEnergyObsSeries::is_cdd_Valid() const{
    return m_cdd_isValid;
}

qint32 OAIEnergyObsSeries::getClouds() const {
    return m_clouds;
}
void OAIEnergyObsSeries::setClouds(const qint32 &clouds) {
    m_clouds = clouds;
    m_clouds_isSet = true;
}

bool OAIEnergyObsSeries::is_clouds_Set() const{
    return m_clouds_isSet;
}

bool OAIEnergyObsSeries::is_clouds_Valid() const{
    return m_clouds_isValid;
}

QString OAIEnergyObsSeries::getDate() const {
    return m_date;
}
void OAIEnergyObsSeries::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIEnergyObsSeries::is_date_Set() const{
    return m_date_isSet;
}

bool OAIEnergyObsSeries::is_date_Valid() const{
    return m_date_isValid;
}

double OAIEnergyObsSeries::getDewpt() const {
    return m_dewpt;
}
void OAIEnergyObsSeries::setDewpt(const double &dewpt) {
    m_dewpt = dewpt;
    m_dewpt_isSet = true;
}

bool OAIEnergyObsSeries::is_dewpt_Set() const{
    return m_dewpt_isSet;
}

bool OAIEnergyObsSeries::is_dewpt_Valid() const{
    return m_dewpt_isValid;
}

double OAIEnergyObsSeries::getHdd() const {
    return m_hdd;
}
void OAIEnergyObsSeries::setHdd(const double &hdd) {
    m_hdd = hdd;
    m_hdd_isSet = true;
}

bool OAIEnergyObsSeries::is_hdd_Set() const{
    return m_hdd_isSet;
}

bool OAIEnergyObsSeries::is_hdd_Valid() const{
    return m_hdd_isValid;
}

double OAIEnergyObsSeries::getPrecip() const {
    return m_precip;
}
void OAIEnergyObsSeries::setPrecip(const double &precip) {
    m_precip = precip;
    m_precip_isSet = true;
}

bool OAIEnergyObsSeries::is_precip_Set() const{
    return m_precip_isSet;
}

bool OAIEnergyObsSeries::is_precip_Valid() const{
    return m_precip_isValid;
}

qint32 OAIEnergyObsSeries::getRh() const {
    return m_rh;
}
void OAIEnergyObsSeries::setRh(const qint32 &rh) {
    m_rh = rh;
    m_rh_isSet = true;
}

bool OAIEnergyObsSeries::is_rh_Set() const{
    return m_rh_isSet;
}

bool OAIEnergyObsSeries::is_rh_Valid() const{
    return m_rh_isValid;
}

double OAIEnergyObsSeries::getSnow() const {
    return m_snow;
}
void OAIEnergyObsSeries::setSnow(const double &snow) {
    m_snow = snow;
    m_snow_isSet = true;
}

bool OAIEnergyObsSeries::is_snow_Set() const{
    return m_snow_isSet;
}

bool OAIEnergyObsSeries::is_snow_Valid() const{
    return m_snow_isValid;
}

double OAIEnergyObsSeries::getSunHours() const {
    return m_sun_hours;
}
void OAIEnergyObsSeries::setSunHours(const double &sun_hours) {
    m_sun_hours = sun_hours;
    m_sun_hours_isSet = true;
}

bool OAIEnergyObsSeries::is_sun_hours_Set() const{
    return m_sun_hours_isSet;
}

bool OAIEnergyObsSeries::is_sun_hours_Valid() const{
    return m_sun_hours_isValid;
}

double OAIEnergyObsSeries::getTDhi() const {
    return m_t_dhi;
}
void OAIEnergyObsSeries::setTDhi(const double &t_dhi) {
    m_t_dhi = t_dhi;
    m_t_dhi_isSet = true;
}

bool OAIEnergyObsSeries::is_t_dhi_Set() const{
    return m_t_dhi_isSet;
}

bool OAIEnergyObsSeries::is_t_dhi_Valid() const{
    return m_t_dhi_isValid;
}

double OAIEnergyObsSeries::getTDni() const {
    return m_t_dni;
}
void OAIEnergyObsSeries::setTDni(const double &t_dni) {
    m_t_dni = t_dni;
    m_t_dni_isSet = true;
}

bool OAIEnergyObsSeries::is_t_dni_Set() const{
    return m_t_dni_isSet;
}

bool OAIEnergyObsSeries::is_t_dni_Valid() const{
    return m_t_dni_isValid;
}

double OAIEnergyObsSeries::getTGhi() const {
    return m_t_ghi;
}
void OAIEnergyObsSeries::setTGhi(const double &t_ghi) {
    m_t_ghi = t_ghi;
    m_t_ghi_isSet = true;
}

bool OAIEnergyObsSeries::is_t_ghi_Set() const{
    return m_t_ghi_isSet;
}

bool OAIEnergyObsSeries::is_t_ghi_Valid() const{
    return m_t_ghi_isValid;
}

double OAIEnergyObsSeries::getTemp() const {
    return m_temp;
}
void OAIEnergyObsSeries::setTemp(const double &temp) {
    m_temp = temp;
    m_temp_isSet = true;
}

bool OAIEnergyObsSeries::is_temp_Set() const{
    return m_temp_isSet;
}

bool OAIEnergyObsSeries::is_temp_Valid() const{
    return m_temp_isValid;
}

qint32 OAIEnergyObsSeries::getWindDir() const {
    return m_wind_dir;
}
void OAIEnergyObsSeries::setWindDir(const qint32 &wind_dir) {
    m_wind_dir = wind_dir;
    m_wind_dir_isSet = true;
}

bool OAIEnergyObsSeries::is_wind_dir_Set() const{
    return m_wind_dir_isSet;
}

bool OAIEnergyObsSeries::is_wind_dir_Valid() const{
    return m_wind_dir_isValid;
}

double OAIEnergyObsSeries::getWindSpd() const {
    return m_wind_spd;
}
void OAIEnergyObsSeries::setWindSpd(const double &wind_spd) {
    m_wind_spd = wind_spd;
    m_wind_spd_isSet = true;
}

bool OAIEnergyObsSeries::is_wind_spd_Set() const{
    return m_wind_spd_isSet;
}

bool OAIEnergyObsSeries::is_wind_spd_Valid() const{
    return m_wind_spd_isValid;
}

bool OAIEnergyObsSeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cdd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clouds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dewpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_dhi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_dni_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_ghi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_spd_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnergyObsSeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
