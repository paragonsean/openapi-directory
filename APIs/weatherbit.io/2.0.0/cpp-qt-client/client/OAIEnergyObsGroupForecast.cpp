/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnergyObsGroupForecast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnergyObsGroupForecast::OAIEnergyObsGroupForecast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnergyObsGroupForecast::OAIEnergyObsGroupForecast() {
    this->initializeModel();
}

OAIEnergyObsGroupForecast::~OAIEnergyObsGroupForecast() {}

void OAIEnergyObsGroupForecast::initializeModel() {

    m_city_name_isSet = false;
    m_city_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_threshold_units_isSet = false;
    m_threshold_units_isValid = false;

    m_threshold_value_isSet = false;
    m_threshold_value_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIEnergyObsGroupForecast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnergyObsGroupForecast::fromJsonObject(QJsonObject json) {

    m_city_name_isValid = ::OpenAPI::fromJsonValue(m_city_name, json[QString("city_name")]);
    m_city_name_isSet = !json[QString("city_name")].isNull() && m_city_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("state_code")]);
    m_state_code_isSet = !json[QString("state_code")].isNull() && m_state_code_isValid;

    m_threshold_units_isValid = ::OpenAPI::fromJsonValue(m_threshold_units, json[QString("threshold_units")]);
    m_threshold_units_isSet = !json[QString("threshold_units")].isNull() && m_threshold_units_isValid;

    m_threshold_value_isValid = ::OpenAPI::fromJsonValue(m_threshold_value, json[QString("threshold_value")]);
    m_threshold_value_isSet = !json[QString("threshold_value")].isNull() && m_threshold_value_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIEnergyObsGroupForecast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnergyObsGroupForecast::asJsonObject() const {
    QJsonObject obj;
    if (m_city_name_isSet) {
        obj.insert(QString("city_name"), ::OpenAPI::toJsonValue(m_city_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("state_code"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_threshold_units_isSet) {
        obj.insert(QString("threshold_units"), ::OpenAPI::toJsonValue(m_threshold_units));
    }
    if (m_threshold_value_isSet) {
        obj.insert(QString("threshold_value"), ::OpenAPI::toJsonValue(m_threshold_value));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAIEnergyObsGroupForecast::getCityName() const {
    return m_city_name;
}
void OAIEnergyObsGroupForecast::setCityName(const QString &city_name) {
    m_city_name = city_name;
    m_city_name_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_city_name_Set() const{
    return m_city_name_isSet;
}

bool OAIEnergyObsGroupForecast::is_city_name_Valid() const{
    return m_city_name_isValid;
}

QString OAIEnergyObsGroupForecast::getCountryCode() const {
    return m_country_code;
}
void OAIEnergyObsGroupForecast::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIEnergyObsGroupForecast::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QList<OAIEnergyObsSeries> OAIEnergyObsGroupForecast::getData() const {
    return m_data;
}
void OAIEnergyObsGroupForecast::setData(const QList<OAIEnergyObsSeries> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEnergyObsGroupForecast::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIEnergyObsGroupForecast::getLat() const {
    return m_lat;
}
void OAIEnergyObsGroupForecast::setLat(const QString &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIEnergyObsGroupForecast::is_lat_Valid() const{
    return m_lat_isValid;
}

QString OAIEnergyObsGroupForecast::getLon() const {
    return m_lon;
}
void OAIEnergyObsGroupForecast::setLon(const QString &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIEnergyObsGroupForecast::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIEnergyObsGroupForecast::getStateCode() const {
    return m_state_code;
}
void OAIEnergyObsGroupForecast::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAIEnergyObsGroupForecast::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QString OAIEnergyObsGroupForecast::getThresholdUnits() const {
    return m_threshold_units;
}
void OAIEnergyObsGroupForecast::setThresholdUnits(const QString &threshold_units) {
    m_threshold_units = threshold_units;
    m_threshold_units_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_threshold_units_Set() const{
    return m_threshold_units_isSet;
}

bool OAIEnergyObsGroupForecast::is_threshold_units_Valid() const{
    return m_threshold_units_isValid;
}

QString OAIEnergyObsGroupForecast::getThresholdValue() const {
    return m_threshold_value;
}
void OAIEnergyObsGroupForecast::setThresholdValue(const QString &threshold_value) {
    m_threshold_value = threshold_value;
    m_threshold_value_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_threshold_value_Set() const{
    return m_threshold_value_isSet;
}

bool OAIEnergyObsGroupForecast::is_threshold_value_Valid() const{
    return m_threshold_value_isValid;
}

QString OAIEnergyObsGroupForecast::getTimezone() const {
    return m_timezone;
}
void OAIEnergyObsGroupForecast::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIEnergyObsGroupForecast::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIEnergyObsGroupForecast::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIEnergyObsGroupForecast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnergyObsGroupForecast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
