/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoIPObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoIPObj::OAIGeoIPObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoIPObj::OAIGeoIPObj() {
    this->initializeModel();
}

OAIGeoIPObj::~OAIGeoIPObj() {}

void OAIGeoIPObj::initializeModel() {

    m_area_code_isSet = false;
    m_area_code_isValid = false;

    m_charset_isSet = false;
    m_charset_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_dma_code_isSet = false;
    m_dma_code_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_metro_code_isSet = false;
    m_metro_code_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIGeoIPObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoIPObj::fromJsonObject(QJsonObject json) {

    m_area_code_isValid = ::OpenAPI::fromJsonValue(m_area_code, json[QString("area_code")]);
    m_area_code_isSet = !json[QString("area_code")].isNull() && m_area_code_isValid;

    m_charset_isValid = ::OpenAPI::fromJsonValue(m_charset, json[QString("charset")]);
    m_charset_isSet = !json[QString("charset")].isNull() && m_charset_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("continent_code")]);
    m_continent_code_isSet = !json[QString("continent_code")].isNull() && m_continent_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("country_code3")]);
    m_country_code3_isSet = !json[QString("country_code3")].isNull() && m_country_code3_isValid;

    m_dma_code_isValid = ::OpenAPI::fromJsonValue(m_dma_code, json[QString("dma_code")]);
    m_dma_code_isSet = !json[QString("dma_code")].isNull() && m_dma_code_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_metro_code_isValid = ::OpenAPI::fromJsonValue(m_metro_code, json[QString("metro_code")]);
    m_metro_code_isSet = !json[QString("metro_code")].isNull() && m_metro_code_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIGeoIPObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoIPObj::asJsonObject() const {
    QJsonObject obj;
    if (m_area_code_isSet) {
        obj.insert(QString("area_code"), ::OpenAPI::toJsonValue(m_area_code));
    }
    if (m_charset_isSet) {
        obj.insert(QString("charset"), ::OpenAPI::toJsonValue(m_charset));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continent_code"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("country_code3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_dma_code_isSet) {
        obj.insert(QString("dma_code"), ::OpenAPI::toJsonValue(m_dma_code));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_metro_code_isSet) {
        obj.insert(QString("metro_code"), ::OpenAPI::toJsonValue(m_metro_code));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAIGeoIPObj::getAreaCode() const {
    return m_area_code;
}
void OAIGeoIPObj::setAreaCode(const QString &area_code) {
    m_area_code = area_code;
    m_area_code_isSet = true;
}

bool OAIGeoIPObj::is_area_code_Set() const{
    return m_area_code_isSet;
}

bool OAIGeoIPObj::is_area_code_Valid() const{
    return m_area_code_isValid;
}

QString OAIGeoIPObj::getCharset() const {
    return m_charset;
}
void OAIGeoIPObj::setCharset(const QString &charset) {
    m_charset = charset;
    m_charset_isSet = true;
}

bool OAIGeoIPObj::is_charset_Set() const{
    return m_charset_isSet;
}

bool OAIGeoIPObj::is_charset_Valid() const{
    return m_charset_isValid;
}

QString OAIGeoIPObj::getCity() const {
    return m_city;
}
void OAIGeoIPObj::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIGeoIPObj::is_city_Set() const{
    return m_city_isSet;
}

bool OAIGeoIPObj::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIGeoIPObj::getContinentCode() const {
    return m_continent_code;
}
void OAIGeoIPObj::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIGeoIPObj::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIGeoIPObj::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString OAIGeoIPObj::getCountryCode() const {
    return m_country_code;
}
void OAIGeoIPObj::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIGeoIPObj::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIGeoIPObj::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIGeoIPObj::getCountryCode3() const {
    return m_country_code3;
}
void OAIGeoIPObj::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIGeoIPObj::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIGeoIPObj::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIGeoIPObj::getDmaCode() const {
    return m_dma_code;
}
void OAIGeoIPObj::setDmaCode(const QString &dma_code) {
    m_dma_code = dma_code;
    m_dma_code_isSet = true;
}

bool OAIGeoIPObj::is_dma_code_Set() const{
    return m_dma_code_isSet;
}

bool OAIGeoIPObj::is_dma_code_Valid() const{
    return m_dma_code_isValid;
}

QString OAIGeoIPObj::getIp() const {
    return m_ip;
}
void OAIGeoIPObj::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGeoIPObj::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGeoIPObj::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIGeoIPObj::getLatitude() const {
    return m_latitude;
}
void OAIGeoIPObj::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGeoIPObj::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGeoIPObj::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIGeoIPObj::getLongitude() const {
    return m_longitude;
}
void OAIGeoIPObj::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGeoIPObj::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGeoIPObj::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIGeoIPObj::getMetroCode() const {
    return m_metro_code;
}
void OAIGeoIPObj::setMetroCode(const QString &metro_code) {
    m_metro_code = metro_code;
    m_metro_code_isSet = true;
}

bool OAIGeoIPObj::is_metro_code_Set() const{
    return m_metro_code_isSet;
}

bool OAIGeoIPObj::is_metro_code_Valid() const{
    return m_metro_code_isValid;
}

QString OAIGeoIPObj::getOffset() const {
    return m_offset;
}
void OAIGeoIPObj::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIGeoIPObj::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGeoIPObj::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIGeoIPObj::getOrganization() const {
    return m_organization;
}
void OAIGeoIPObj::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIGeoIPObj::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIGeoIPObj::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIGeoIPObj::getPostalCode() const {
    return m_postal_code;
}
void OAIGeoIPObj::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIGeoIPObj::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIGeoIPObj::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIGeoIPObj::getRegion() const {
    return m_region;
}
void OAIGeoIPObj::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGeoIPObj::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGeoIPObj::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIGeoIPObj::getTimezone() const {
    return m_timezone;
}
void OAIGeoIPObj::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIGeoIPObj::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIGeoIPObj::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIGeoIPObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dma_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoIPObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
