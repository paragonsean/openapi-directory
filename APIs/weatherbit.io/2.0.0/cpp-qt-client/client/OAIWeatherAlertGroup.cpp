/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeatherAlertGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeatherAlertGroup::OAIWeatherAlertGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeatherAlertGroup::OAIWeatherAlertGroup() {
    this->initializeModel();
}

OAIWeatherAlertGroup::~OAIWeatherAlertGroup() {}

void OAIWeatherAlertGroup::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_effective_local_isSet = false;
    m_effective_local_isValid = false;

    m_effective_utc_isSet = false;
    m_effective_utc_isValid = false;

    m_expires_local_isSet = false;
    m_expires_local_isValid = false;

    m_expires_utc_isSet = false;
    m_expires_utc_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIWeatherAlertGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeatherAlertGroup::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_effective_local_isValid = ::OpenAPI::fromJsonValue(m_effective_local, json[QString("effective_local")]);
    m_effective_local_isSet = !json[QString("effective_local")].isNull() && m_effective_local_isValid;

    m_effective_utc_isValid = ::OpenAPI::fromJsonValue(m_effective_utc, json[QString("effective_utc")]);
    m_effective_utc_isSet = !json[QString("effective_utc")].isNull() && m_effective_utc_isValid;

    m_expires_local_isValid = ::OpenAPI::fromJsonValue(m_expires_local, json[QString("expires_local")]);
    m_expires_local_isSet = !json[QString("expires_local")].isNull() && m_expires_local_isValid;

    m_expires_utc_isValid = ::OpenAPI::fromJsonValue(m_expires_utc, json[QString("expires_utc")]);
    m_expires_utc_isSet = !json[QString("expires_utc")].isNull() && m_expires_utc_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIWeatherAlertGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeatherAlertGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts.size() > 0) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_effective_local_isSet) {
        obj.insert(QString("effective_local"), ::OpenAPI::toJsonValue(m_effective_local));
    }
    if (m_effective_utc_isSet) {
        obj.insert(QString("effective_utc"), ::OpenAPI::toJsonValue(m_effective_utc));
    }
    if (m_expires_local_isSet) {
        obj.insert(QString("expires_local"), ::OpenAPI::toJsonValue(m_expires_local));
    }
    if (m_expires_utc_isSet) {
        obj.insert(QString("expires_utc"), ::OpenAPI::toJsonValue(m_expires_utc));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QList<QString> OAIWeatherAlertGroup::getAlerts() const {
    return m_alerts;
}
void OAIWeatherAlertGroup::setAlerts(const QList<QString> &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIWeatherAlertGroup::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIWeatherAlertGroup::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QString OAIWeatherAlertGroup::getDescription() const {
    return m_description;
}
void OAIWeatherAlertGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWeatherAlertGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWeatherAlertGroup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWeatherAlertGroup::getEffectiveLocal() const {
    return m_effective_local;
}
void OAIWeatherAlertGroup::setEffectiveLocal(const QString &effective_local) {
    m_effective_local = effective_local;
    m_effective_local_isSet = true;
}

bool OAIWeatherAlertGroup::is_effective_local_Set() const{
    return m_effective_local_isSet;
}

bool OAIWeatherAlertGroup::is_effective_local_Valid() const{
    return m_effective_local_isValid;
}

QString OAIWeatherAlertGroup::getEffectiveUtc() const {
    return m_effective_utc;
}
void OAIWeatherAlertGroup::setEffectiveUtc(const QString &effective_utc) {
    m_effective_utc = effective_utc;
    m_effective_utc_isSet = true;
}

bool OAIWeatherAlertGroup::is_effective_utc_Set() const{
    return m_effective_utc_isSet;
}

bool OAIWeatherAlertGroup::is_effective_utc_Valid() const{
    return m_effective_utc_isValid;
}

QString OAIWeatherAlertGroup::getExpiresLocal() const {
    return m_expires_local;
}
void OAIWeatherAlertGroup::setExpiresLocal(const QString &expires_local) {
    m_expires_local = expires_local;
    m_expires_local_isSet = true;
}

bool OAIWeatherAlertGroup::is_expires_local_Set() const{
    return m_expires_local_isSet;
}

bool OAIWeatherAlertGroup::is_expires_local_Valid() const{
    return m_expires_local_isValid;
}

QString OAIWeatherAlertGroup::getExpiresUtc() const {
    return m_expires_utc;
}
void OAIWeatherAlertGroup::setExpiresUtc(const QString &expires_utc) {
    m_expires_utc = expires_utc;
    m_expires_utc_isSet = true;
}

bool OAIWeatherAlertGroup::is_expires_utc_Set() const{
    return m_expires_utc_isSet;
}

bool OAIWeatherAlertGroup::is_expires_utc_Valid() const{
    return m_expires_utc_isValid;
}

QString OAIWeatherAlertGroup::getSeverity() const {
    return m_severity;
}
void OAIWeatherAlertGroup::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIWeatherAlertGroup::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIWeatherAlertGroup::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIWeatherAlertGroup::getTitle() const {
    return m_title;
}
void OAIWeatherAlertGroup::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWeatherAlertGroup::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWeatherAlertGroup::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIWeatherAlertGroup::getUri() const {
    return m_uri;
}
void OAIWeatherAlertGroup::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIWeatherAlertGroup::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIWeatherAlertGroup::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIWeatherAlertGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeatherAlertGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
