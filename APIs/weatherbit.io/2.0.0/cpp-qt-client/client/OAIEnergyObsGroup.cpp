/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnergyObsGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnergyObsGroup::OAIEnergyObsGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnergyObsGroup::OAIEnergyObsGroup() {
    this->initializeModel();
}

OAIEnergyObsGroup::~OAIEnergyObsGroup() {}

void OAIEnergyObsGroup::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIEnergyObsGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnergyObsGroup::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;
}

QString OAIEnergyObsGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnergyObsGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

qint32 OAIEnergyObsGroup::getCount() const {
    return m_count;
}
void OAIEnergyObsGroup::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIEnergyObsGroup::is_count_Set() const{
    return m_count_isSet;
}

bool OAIEnergyObsGroup::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIEnergyObs> OAIEnergyObsGroup::getData() const {
    return m_data;
}
void OAIEnergyObsGroup::setData(const QList<OAIEnergyObs> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEnergyObsGroup::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEnergyObsGroup::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIEnergyObsGroup::getEndDate() const {
    return m_end_date;
}
void OAIEnergyObsGroup::setEndDate(const qint32 &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEnergyObsGroup::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEnergyObsGroup::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIEnergyObsGroup::getStartDate() const {
    return m_start_date;
}
void OAIEnergyObsGroup::setStartDate(const qint32 &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEnergyObsGroup::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEnergyObsGroup::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIEnergyObsGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnergyObsGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
