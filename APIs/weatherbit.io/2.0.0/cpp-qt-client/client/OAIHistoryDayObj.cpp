/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryDayObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryDayObj::OAIHistoryDayObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryDayObj::OAIHistoryDayObj() {
    this->initializeModel();
}

OAIHistoryDayObj::~OAIHistoryDayObj() {}

void OAIHistoryDayObj::initializeModel() {

    m_datetime_isSet = false;
    m_datetime_isValid = false;

    m_dewpt_isSet = false;
    m_dewpt_isValid = false;

    m_dhi_isSet = false;
    m_dhi_isValid = false;

    m_dni_isSet = false;
    m_dni_isValid = false;

    m_ghi_isSet = false;
    m_ghi_isValid = false;

    m_max_temp_isSet = false;
    m_max_temp_isValid = false;

    m_max_temp_ts_isSet = false;
    m_max_temp_ts_isValid = false;

    m_max_uv_isSet = false;
    m_max_uv_isValid = false;

    m_max_wind_dir_isSet = false;
    m_max_wind_dir_isValid = false;

    m_max_wind_spd_isSet = false;
    m_max_wind_spd_isValid = false;

    m_max_wind_spd_ts_isSet = false;
    m_max_wind_spd_ts_isValid = false;

    m_min_temp_isSet = false;
    m_min_temp_isValid = false;

    m_min_temp_ts_isSet = false;
    m_min_temp_ts_isValid = false;

    m_precip_isSet = false;
    m_precip_isValid = false;

    m_precip_gpm_isSet = false;
    m_precip_gpm_isValid = false;

    m_pres_isSet = false;
    m_pres_isValid = false;

    m_revision_status_isSet = false;
    m_revision_status_isValid = false;

    m_rh_isSet = false;
    m_rh_isValid = false;

    m_slp_isSet = false;
    m_slp_isValid = false;

    m_snow_isSet = false;
    m_snow_isValid = false;

    m_snow_depth_isSet = false;
    m_snow_depth_isValid = false;

    m_t_dhi_isSet = false;
    m_t_dhi_isValid = false;

    m_t_dni_isSet = false;
    m_t_dni_isValid = false;

    m_t_ghi_isSet = false;
    m_t_ghi_isValid = false;

    m_temp_isSet = false;
    m_temp_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_wind_dir_isSet = false;
    m_wind_dir_isValid = false;

    m_wind_gust_spd_isSet = false;
    m_wind_gust_spd_isValid = false;

    m_wind_spd_isSet = false;
    m_wind_spd_isValid = false;
}

void OAIHistoryDayObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryDayObj::fromJsonObject(QJsonObject json) {

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("datetime")]);
    m_datetime_isSet = !json[QString("datetime")].isNull() && m_datetime_isValid;

    m_dewpt_isValid = ::OpenAPI::fromJsonValue(m_dewpt, json[QString("dewpt")]);
    m_dewpt_isSet = !json[QString("dewpt")].isNull() && m_dewpt_isValid;

    m_dhi_isValid = ::OpenAPI::fromJsonValue(m_dhi, json[QString("dhi")]);
    m_dhi_isSet = !json[QString("dhi")].isNull() && m_dhi_isValid;

    m_dni_isValid = ::OpenAPI::fromJsonValue(m_dni, json[QString("dni")]);
    m_dni_isSet = !json[QString("dni")].isNull() && m_dni_isValid;

    m_ghi_isValid = ::OpenAPI::fromJsonValue(m_ghi, json[QString("ghi")]);
    m_ghi_isSet = !json[QString("ghi")].isNull() && m_ghi_isValid;

    m_max_temp_isValid = ::OpenAPI::fromJsonValue(m_max_temp, json[QString("max_temp")]);
    m_max_temp_isSet = !json[QString("max_temp")].isNull() && m_max_temp_isValid;

    m_max_temp_ts_isValid = ::OpenAPI::fromJsonValue(m_max_temp_ts, json[QString("max_temp_ts")]);
    m_max_temp_ts_isSet = !json[QString("max_temp_ts")].isNull() && m_max_temp_ts_isValid;

    m_max_uv_isValid = ::OpenAPI::fromJsonValue(m_max_uv, json[QString("max_uv")]);
    m_max_uv_isSet = !json[QString("max_uv")].isNull() && m_max_uv_isValid;

    m_max_wind_dir_isValid = ::OpenAPI::fromJsonValue(m_max_wind_dir, json[QString("max_wind_dir")]);
    m_max_wind_dir_isSet = !json[QString("max_wind_dir")].isNull() && m_max_wind_dir_isValid;

    m_max_wind_spd_isValid = ::OpenAPI::fromJsonValue(m_max_wind_spd, json[QString("max_wind_spd")]);
    m_max_wind_spd_isSet = !json[QString("max_wind_spd")].isNull() && m_max_wind_spd_isValid;

    m_max_wind_spd_ts_isValid = ::OpenAPI::fromJsonValue(m_max_wind_spd_ts, json[QString("max_wind_spd_ts")]);
    m_max_wind_spd_ts_isSet = !json[QString("max_wind_spd_ts")].isNull() && m_max_wind_spd_ts_isValid;

    m_min_temp_isValid = ::OpenAPI::fromJsonValue(m_min_temp, json[QString("min_temp")]);
    m_min_temp_isSet = !json[QString("min_temp")].isNull() && m_min_temp_isValid;

    m_min_temp_ts_isValid = ::OpenAPI::fromJsonValue(m_min_temp_ts, json[QString("min_temp_ts")]);
    m_min_temp_ts_isSet = !json[QString("min_temp_ts")].isNull() && m_min_temp_ts_isValid;

    m_precip_isValid = ::OpenAPI::fromJsonValue(m_precip, json[QString("precip")]);
    m_precip_isSet = !json[QString("precip")].isNull() && m_precip_isValid;

    m_precip_gpm_isValid = ::OpenAPI::fromJsonValue(m_precip_gpm, json[QString("precip_gpm")]);
    m_precip_gpm_isSet = !json[QString("precip_gpm")].isNull() && m_precip_gpm_isValid;

    m_pres_isValid = ::OpenAPI::fromJsonValue(m_pres, json[QString("pres")]);
    m_pres_isSet = !json[QString("pres")].isNull() && m_pres_isValid;

    m_revision_status_isValid = ::OpenAPI::fromJsonValue(m_revision_status, json[QString("revision_status")]);
    m_revision_status_isSet = !json[QString("revision_status")].isNull() && m_revision_status_isValid;

    m_rh_isValid = ::OpenAPI::fromJsonValue(m_rh, json[QString("rh")]);
    m_rh_isSet = !json[QString("rh")].isNull() && m_rh_isValid;

    m_slp_isValid = ::OpenAPI::fromJsonValue(m_slp, json[QString("slp")]);
    m_slp_isSet = !json[QString("slp")].isNull() && m_slp_isValid;

    m_snow_isValid = ::OpenAPI::fromJsonValue(m_snow, json[QString("snow")]);
    m_snow_isSet = !json[QString("snow")].isNull() && m_snow_isValid;

    m_snow_depth_isValid = ::OpenAPI::fromJsonValue(m_snow_depth, json[QString("snow_depth")]);
    m_snow_depth_isSet = !json[QString("snow_depth")].isNull() && m_snow_depth_isValid;

    m_t_dhi_isValid = ::OpenAPI::fromJsonValue(m_t_dhi, json[QString("t_dhi")]);
    m_t_dhi_isSet = !json[QString("t_dhi")].isNull() && m_t_dhi_isValid;

    m_t_dni_isValid = ::OpenAPI::fromJsonValue(m_t_dni, json[QString("t_dni")]);
    m_t_dni_isSet = !json[QString("t_dni")].isNull() && m_t_dni_isValid;

    m_t_ghi_isValid = ::OpenAPI::fromJsonValue(m_t_ghi, json[QString("t_ghi")]);
    m_t_ghi_isSet = !json[QString("t_ghi")].isNull() && m_t_ghi_isValid;

    m_temp_isValid = ::OpenAPI::fromJsonValue(m_temp, json[QString("temp")]);
    m_temp_isSet = !json[QString("temp")].isNull() && m_temp_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_wind_dir_isValid = ::OpenAPI::fromJsonValue(m_wind_dir, json[QString("wind_dir")]);
    m_wind_dir_isSet = !json[QString("wind_dir")].isNull() && m_wind_dir_isValid;

    m_wind_gust_spd_isValid = ::OpenAPI::fromJsonValue(m_wind_gust_spd, json[QString("wind_gust_spd")]);
    m_wind_gust_spd_isSet = !json[QString("wind_gust_spd")].isNull() && m_wind_gust_spd_isValid;

    m_wind_spd_isValid = ::OpenAPI::fromJsonValue(m_wind_spd, json[QString("wind_spd")]);
    m_wind_spd_isSet = !json[QString("wind_spd")].isNull() && m_wind_spd_isValid;
}

QString OAIHistoryDayObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryDayObj::asJsonObject() const {
    QJsonObject obj;
    if (m_datetime_isSet) {
        obj.insert(QString("datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    if (m_dewpt_isSet) {
        obj.insert(QString("dewpt"), ::OpenAPI::toJsonValue(m_dewpt));
    }
    if (m_dhi_isSet) {
        obj.insert(QString("dhi"), ::OpenAPI::toJsonValue(m_dhi));
    }
    if (m_dni_isSet) {
        obj.insert(QString("dni"), ::OpenAPI::toJsonValue(m_dni));
    }
    if (m_ghi_isSet) {
        obj.insert(QString("ghi"), ::OpenAPI::toJsonValue(m_ghi));
    }
    if (m_max_temp_isSet) {
        obj.insert(QString("max_temp"), ::OpenAPI::toJsonValue(m_max_temp));
    }
    if (m_max_temp_ts_isSet) {
        obj.insert(QString("max_temp_ts"), ::OpenAPI::toJsonValue(m_max_temp_ts));
    }
    if (m_max_uv_isSet) {
        obj.insert(QString("max_uv"), ::OpenAPI::toJsonValue(m_max_uv));
    }
    if (m_max_wind_dir_isSet) {
        obj.insert(QString("max_wind_dir"), ::OpenAPI::toJsonValue(m_max_wind_dir));
    }
    if (m_max_wind_spd_isSet) {
        obj.insert(QString("max_wind_spd"), ::OpenAPI::toJsonValue(m_max_wind_spd));
    }
    if (m_max_wind_spd_ts_isSet) {
        obj.insert(QString("max_wind_spd_ts"), ::OpenAPI::toJsonValue(m_max_wind_spd_ts));
    }
    if (m_min_temp_isSet) {
        obj.insert(QString("min_temp"), ::OpenAPI::toJsonValue(m_min_temp));
    }
    if (m_min_temp_ts_isSet) {
        obj.insert(QString("min_temp_ts"), ::OpenAPI::toJsonValue(m_min_temp_ts));
    }
    if (m_precip_isSet) {
        obj.insert(QString("precip"), ::OpenAPI::toJsonValue(m_precip));
    }
    if (m_precip_gpm_isSet) {
        obj.insert(QString("precip_gpm"), ::OpenAPI::toJsonValue(m_precip_gpm));
    }
    if (m_pres_isSet) {
        obj.insert(QString("pres"), ::OpenAPI::toJsonValue(m_pres));
    }
    if (m_revision_status_isSet) {
        obj.insert(QString("revision_status"), ::OpenAPI::toJsonValue(m_revision_status));
    }
    if (m_rh_isSet) {
        obj.insert(QString("rh"), ::OpenAPI::toJsonValue(m_rh));
    }
    if (m_slp_isSet) {
        obj.insert(QString("slp"), ::OpenAPI::toJsonValue(m_slp));
    }
    if (m_snow_isSet) {
        obj.insert(QString("snow"), ::OpenAPI::toJsonValue(m_snow));
    }
    if (m_snow_depth_isSet) {
        obj.insert(QString("snow_depth"), ::OpenAPI::toJsonValue(m_snow_depth));
    }
    if (m_t_dhi_isSet) {
        obj.insert(QString("t_dhi"), ::OpenAPI::toJsonValue(m_t_dhi));
    }
    if (m_t_dni_isSet) {
        obj.insert(QString("t_dni"), ::OpenAPI::toJsonValue(m_t_dni));
    }
    if (m_t_ghi_isSet) {
        obj.insert(QString("t_ghi"), ::OpenAPI::toJsonValue(m_t_ghi));
    }
    if (m_temp_isSet) {
        obj.insert(QString("temp"), ::OpenAPI::toJsonValue(m_temp));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_wind_dir_isSet) {
        obj.insert(QString("wind_dir"), ::OpenAPI::toJsonValue(m_wind_dir));
    }
    if (m_wind_gust_spd_isSet) {
        obj.insert(QString("wind_gust_spd"), ::OpenAPI::toJsonValue(m_wind_gust_spd));
    }
    if (m_wind_spd_isSet) {
        obj.insert(QString("wind_spd"), ::OpenAPI::toJsonValue(m_wind_spd));
    }
    return obj;
}

QString OAIHistoryDayObj::getDatetime() const {
    return m_datetime;
}
void OAIHistoryDayObj::setDatetime(const QString &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAIHistoryDayObj::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAIHistoryDayObj::is_datetime_Valid() const{
    return m_datetime_isValid;
}

double OAIHistoryDayObj::getDewpt() const {
    return m_dewpt;
}
void OAIHistoryDayObj::setDewpt(const double &dewpt) {
    m_dewpt = dewpt;
    m_dewpt_isSet = true;
}

bool OAIHistoryDayObj::is_dewpt_Set() const{
    return m_dewpt_isSet;
}

bool OAIHistoryDayObj::is_dewpt_Valid() const{
    return m_dewpt_isValid;
}

qint32 OAIHistoryDayObj::getDhi() const {
    return m_dhi;
}
void OAIHistoryDayObj::setDhi(const qint32 &dhi) {
    m_dhi = dhi;
    m_dhi_isSet = true;
}

bool OAIHistoryDayObj::is_dhi_Set() const{
    return m_dhi_isSet;
}

bool OAIHistoryDayObj::is_dhi_Valid() const{
    return m_dhi_isValid;
}

qint32 OAIHistoryDayObj::getDni() const {
    return m_dni;
}
void OAIHistoryDayObj::setDni(const qint32 &dni) {
    m_dni = dni;
    m_dni_isSet = true;
}

bool OAIHistoryDayObj::is_dni_Set() const{
    return m_dni_isSet;
}

bool OAIHistoryDayObj::is_dni_Valid() const{
    return m_dni_isValid;
}

qint32 OAIHistoryDayObj::getGhi() const {
    return m_ghi;
}
void OAIHistoryDayObj::setGhi(const qint32 &ghi) {
    m_ghi = ghi;
    m_ghi_isSet = true;
}

bool OAIHistoryDayObj::is_ghi_Set() const{
    return m_ghi_isSet;
}

bool OAIHistoryDayObj::is_ghi_Valid() const{
    return m_ghi_isValid;
}

double OAIHistoryDayObj::getMaxTemp() const {
    return m_max_temp;
}
void OAIHistoryDayObj::setMaxTemp(const double &max_temp) {
    m_max_temp = max_temp;
    m_max_temp_isSet = true;
}

bool OAIHistoryDayObj::is_max_temp_Set() const{
    return m_max_temp_isSet;
}

bool OAIHistoryDayObj::is_max_temp_Valid() const{
    return m_max_temp_isValid;
}

double OAIHistoryDayObj::getMaxTempTs() const {
    return m_max_temp_ts;
}
void OAIHistoryDayObj::setMaxTempTs(const double &max_temp_ts) {
    m_max_temp_ts = max_temp_ts;
    m_max_temp_ts_isSet = true;
}

bool OAIHistoryDayObj::is_max_temp_ts_Set() const{
    return m_max_temp_ts_isSet;
}

bool OAIHistoryDayObj::is_max_temp_ts_Valid() const{
    return m_max_temp_ts_isValid;
}

double OAIHistoryDayObj::getMaxUv() const {
    return m_max_uv;
}
void OAIHistoryDayObj::setMaxUv(const double &max_uv) {
    m_max_uv = max_uv;
    m_max_uv_isSet = true;
}

bool OAIHistoryDayObj::is_max_uv_Set() const{
    return m_max_uv_isSet;
}

bool OAIHistoryDayObj::is_max_uv_Valid() const{
    return m_max_uv_isValid;
}

qint32 OAIHistoryDayObj::getMaxWindDir() const {
    return m_max_wind_dir;
}
void OAIHistoryDayObj::setMaxWindDir(const qint32 &max_wind_dir) {
    m_max_wind_dir = max_wind_dir;
    m_max_wind_dir_isSet = true;
}

bool OAIHistoryDayObj::is_max_wind_dir_Set() const{
    return m_max_wind_dir_isSet;
}

bool OAIHistoryDayObj::is_max_wind_dir_Valid() const{
    return m_max_wind_dir_isValid;
}

double OAIHistoryDayObj::getMaxWindSpd() const {
    return m_max_wind_spd;
}
void OAIHistoryDayObj::setMaxWindSpd(const double &max_wind_spd) {
    m_max_wind_spd = max_wind_spd;
    m_max_wind_spd_isSet = true;
}

bool OAIHistoryDayObj::is_max_wind_spd_Set() const{
    return m_max_wind_spd_isSet;
}

bool OAIHistoryDayObj::is_max_wind_spd_Valid() const{
    return m_max_wind_spd_isValid;
}

double OAIHistoryDayObj::getMaxWindSpdTs() const {
    return m_max_wind_spd_ts;
}
void OAIHistoryDayObj::setMaxWindSpdTs(const double &max_wind_spd_ts) {
    m_max_wind_spd_ts = max_wind_spd_ts;
    m_max_wind_spd_ts_isSet = true;
}

bool OAIHistoryDayObj::is_max_wind_spd_ts_Set() const{
    return m_max_wind_spd_ts_isSet;
}

bool OAIHistoryDayObj::is_max_wind_spd_ts_Valid() const{
    return m_max_wind_spd_ts_isValid;
}

double OAIHistoryDayObj::getMinTemp() const {
    return m_min_temp;
}
void OAIHistoryDayObj::setMinTemp(const double &min_temp) {
    m_min_temp = min_temp;
    m_min_temp_isSet = true;
}

bool OAIHistoryDayObj::is_min_temp_Set() const{
    return m_min_temp_isSet;
}

bool OAIHistoryDayObj::is_min_temp_Valid() const{
    return m_min_temp_isValid;
}

double OAIHistoryDayObj::getMinTempTs() const {
    return m_min_temp_ts;
}
void OAIHistoryDayObj::setMinTempTs(const double &min_temp_ts) {
    m_min_temp_ts = min_temp_ts;
    m_min_temp_ts_isSet = true;
}

bool OAIHistoryDayObj::is_min_temp_ts_Set() const{
    return m_min_temp_ts_isSet;
}

bool OAIHistoryDayObj::is_min_temp_ts_Valid() const{
    return m_min_temp_ts_isValid;
}

double OAIHistoryDayObj::getPrecip() const {
    return m_precip;
}
void OAIHistoryDayObj::setPrecip(const double &precip) {
    m_precip = precip;
    m_precip_isSet = true;
}

bool OAIHistoryDayObj::is_precip_Set() const{
    return m_precip_isSet;
}

bool OAIHistoryDayObj::is_precip_Valid() const{
    return m_precip_isValid;
}

double OAIHistoryDayObj::getPrecipGpm() const {
    return m_precip_gpm;
}
void OAIHistoryDayObj::setPrecipGpm(const double &precip_gpm) {
    m_precip_gpm = precip_gpm;
    m_precip_gpm_isSet = true;
}

bool OAIHistoryDayObj::is_precip_gpm_Set() const{
    return m_precip_gpm_isSet;
}

bool OAIHistoryDayObj::is_precip_gpm_Valid() const{
    return m_precip_gpm_isValid;
}

double OAIHistoryDayObj::getPres() const {
    return m_pres;
}
void OAIHistoryDayObj::setPres(const double &pres) {
    m_pres = pres;
    m_pres_isSet = true;
}

bool OAIHistoryDayObj::is_pres_Set() const{
    return m_pres_isSet;
}

bool OAIHistoryDayObj::is_pres_Valid() const{
    return m_pres_isValid;
}

QString OAIHistoryDayObj::getRevisionStatus() const {
    return m_revision_status;
}
void OAIHistoryDayObj::setRevisionStatus(const QString &revision_status) {
    m_revision_status = revision_status;
    m_revision_status_isSet = true;
}

bool OAIHistoryDayObj::is_revision_status_Set() const{
    return m_revision_status_isSet;
}

bool OAIHistoryDayObj::is_revision_status_Valid() const{
    return m_revision_status_isValid;
}

qint32 OAIHistoryDayObj::getRh() const {
    return m_rh;
}
void OAIHistoryDayObj::setRh(const qint32 &rh) {
    m_rh = rh;
    m_rh_isSet = true;
}

bool OAIHistoryDayObj::is_rh_Set() const{
    return m_rh_isSet;
}

bool OAIHistoryDayObj::is_rh_Valid() const{
    return m_rh_isValid;
}

double OAIHistoryDayObj::getSlp() const {
    return m_slp;
}
void OAIHistoryDayObj::setSlp(const double &slp) {
    m_slp = slp;
    m_slp_isSet = true;
}

bool OAIHistoryDayObj::is_slp_Set() const{
    return m_slp_isSet;
}

bool OAIHistoryDayObj::is_slp_Valid() const{
    return m_slp_isValid;
}

double OAIHistoryDayObj::getSnow() const {
    return m_snow;
}
void OAIHistoryDayObj::setSnow(const double &snow) {
    m_snow = snow;
    m_snow_isSet = true;
}

bool OAIHistoryDayObj::is_snow_Set() const{
    return m_snow_isSet;
}

bool OAIHistoryDayObj::is_snow_Valid() const{
    return m_snow_isValid;
}

double OAIHistoryDayObj::getSnowDepth() const {
    return m_snow_depth;
}
void OAIHistoryDayObj::setSnowDepth(const double &snow_depth) {
    m_snow_depth = snow_depth;
    m_snow_depth_isSet = true;
}

bool OAIHistoryDayObj::is_snow_depth_Set() const{
    return m_snow_depth_isSet;
}

bool OAIHistoryDayObj::is_snow_depth_Valid() const{
    return m_snow_depth_isValid;
}

qint32 OAIHistoryDayObj::getTDhi() const {
    return m_t_dhi;
}
void OAIHistoryDayObj::setTDhi(const qint32 &t_dhi) {
    m_t_dhi = t_dhi;
    m_t_dhi_isSet = true;
}

bool OAIHistoryDayObj::is_t_dhi_Set() const{
    return m_t_dhi_isSet;
}

bool OAIHistoryDayObj::is_t_dhi_Valid() const{
    return m_t_dhi_isValid;
}

qint32 OAIHistoryDayObj::getTDni() const {
    return m_t_dni;
}
void OAIHistoryDayObj::setTDni(const qint32 &t_dni) {
    m_t_dni = t_dni;
    m_t_dni_isSet = true;
}

bool OAIHistoryDayObj::is_t_dni_Set() const{
    return m_t_dni_isSet;
}

bool OAIHistoryDayObj::is_t_dni_Valid() const{
    return m_t_dni_isValid;
}

qint32 OAIHistoryDayObj::getTGhi() const {
    return m_t_ghi;
}
void OAIHistoryDayObj::setTGhi(const qint32 &t_ghi) {
    m_t_ghi = t_ghi;
    m_t_ghi_isSet = true;
}

bool OAIHistoryDayObj::is_t_ghi_Set() const{
    return m_t_ghi_isSet;
}

bool OAIHistoryDayObj::is_t_ghi_Valid() const{
    return m_t_ghi_isValid;
}

double OAIHistoryDayObj::getTemp() const {
    return m_temp;
}
void OAIHistoryDayObj::setTemp(const double &temp) {
    m_temp = temp;
    m_temp_isSet = true;
}

bool OAIHistoryDayObj::is_temp_Set() const{
    return m_temp_isSet;
}

bool OAIHistoryDayObj::is_temp_Valid() const{
    return m_temp_isValid;
}

qint32 OAIHistoryDayObj::getTs() const {
    return m_ts;
}
void OAIHistoryDayObj::setTs(const qint32 &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIHistoryDayObj::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIHistoryDayObj::is_ts_Valid() const{
    return m_ts_isValid;
}

qint32 OAIHistoryDayObj::getWindDir() const {
    return m_wind_dir;
}
void OAIHistoryDayObj::setWindDir(const qint32 &wind_dir) {
    m_wind_dir = wind_dir;
    m_wind_dir_isSet = true;
}

bool OAIHistoryDayObj::is_wind_dir_Set() const{
    return m_wind_dir_isSet;
}

bool OAIHistoryDayObj::is_wind_dir_Valid() const{
    return m_wind_dir_isValid;
}

double OAIHistoryDayObj::getWindGustSpd() const {
    return m_wind_gust_spd;
}
void OAIHistoryDayObj::setWindGustSpd(const double &wind_gust_spd) {
    m_wind_gust_spd = wind_gust_spd;
    m_wind_gust_spd_isSet = true;
}

bool OAIHistoryDayObj::is_wind_gust_spd_Set() const{
    return m_wind_gust_spd_isSet;
}

bool OAIHistoryDayObj::is_wind_gust_spd_Valid() const{
    return m_wind_gust_spd_isValid;
}

double OAIHistoryDayObj::getWindSpd() const {
    return m_wind_spd;
}
void OAIHistoryDayObj::setWindSpd(const double &wind_spd) {
    m_wind_spd = wind_spd;
    m_wind_spd_isSet = true;
}

bool OAIHistoryDayObj::is_wind_spd_Set() const{
    return m_wind_spd_isSet;
}

bool OAIHistoryDayObj::is_wind_spd_Valid() const{
    return m_wind_spd_isValid;
}

bool OAIHistoryDayObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dewpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dni_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_temp_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_uv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wind_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wind_spd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wind_spd_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_temp_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precip_gpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snow_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_dhi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_dni_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_ghi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_gust_spd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_spd_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryDayObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
