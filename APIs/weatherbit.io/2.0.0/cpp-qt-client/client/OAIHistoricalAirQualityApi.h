/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHistoricalAirQualityApi_H
#define OAI_OAIHistoricalAirQualityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAQCurrentGroup.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHistoricalAirQualityApi : public QObject {
    Q_OBJECT

public:
    OAIHistoricalAirQualityApi(const int timeOut = 0);
    ~OAIHistoricalAirQualityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  city_id double [required]
    * @param[in]  key QString [required]
    * @param[in]  callback QString [optional]
    */
    virtual void historyAirqualitycityIdcityIdGet(const double &city_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  city QString [required]
    * @param[in]  country QString [required]
    * @param[in]  key QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historyAirqualitycitycitycountrycountryGet(const QString &city, const QString &country, const QString &key, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  key QString [required]
    * @param[in]  callback QString [optional]
    */
    virtual void historyAirqualitylatlatlonlonGet(const double &lat, const double &lon, const QString &key, const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  postal_code qint32 [required]
    * @param[in]  key QString [required]
    * @param[in]  country QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void historyAirqualitypostalCodepostalCodeGet(const qint32 &postal_code, const QString &key, const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void historyAirqualitycityIdcityIdGetCallback(OAIHttpRequestWorker *worker);
    void historyAirqualitycitycitycountrycountryGetCallback(OAIHttpRequestWorker *worker);
    void historyAirqualitylatlatlonlonGetCallback(OAIHttpRequestWorker *worker);
    void historyAirqualitypostalCodepostalCodeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void historyAirqualitycityIdcityIdGetSignal(OAIAQCurrentGroup summary);
    void historyAirqualitycitycitycountrycountryGetSignal(OAIAQCurrentGroup summary);
    void historyAirqualitylatlatlonlonGetSignal(OAIAQCurrentGroup summary);
    void historyAirqualitypostalCodepostalCodeGetSignal(OAIAQCurrentGroup summary);


    void historyAirqualitycityIdcityIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAQCurrentGroup summary);
    void historyAirqualitycitycitycountrycountryGetSignalFull(OAIHttpRequestWorker *worker, OAIAQCurrentGroup summary);
    void historyAirqualitylatlatlonlonGetSignalFull(OAIHttpRequestWorker *worker, OAIAQCurrentGroup summary);
    void historyAirqualitypostalCodepostalCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIAQCurrentGroup summary);

    Q_DECL_DEPRECATED_X("Use historyAirqualitycityIdcityIdGetSignalError() instead")
    void historyAirqualitycityIdcityIdGetSignalE(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitycityIdcityIdGetSignalError(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyAirqualitycitycitycountrycountryGetSignalError() instead")
    void historyAirqualitycitycitycountrycountryGetSignalE(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitycitycitycountrycountryGetSignalError(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyAirqualitylatlatlonlonGetSignalError() instead")
    void historyAirqualitylatlatlonlonGetSignalE(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitylatlatlonlonGetSignalError(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyAirqualitypostalCodepostalCodeGetSignalError() instead")
    void historyAirqualitypostalCodepostalCodeGetSignalE(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitypostalCodepostalCodeGetSignalError(OAIAQCurrentGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use historyAirqualitycityIdcityIdGetSignalErrorFull() instead")
    void historyAirqualitycityIdcityIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitycityIdcityIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyAirqualitycitycitycountrycountryGetSignalErrorFull() instead")
    void historyAirqualitycitycitycountrycountryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitycitycitycountrycountryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyAirqualitylatlatlonlonGetSignalErrorFull() instead")
    void historyAirqualitylatlatlonlonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitylatlatlonlonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyAirqualitypostalCodepostalCodeGetSignalErrorFull() instead")
    void historyAirqualitypostalCodepostalCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyAirqualitypostalCodepostalCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
