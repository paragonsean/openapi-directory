/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentObs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentObs::OAICurrentObs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentObs::OAICurrentObs() {
    this->initializeModel();
}

OAICurrentObs::~OAICurrentObs() {}

void OAICurrentObs::initializeModel() {

    m_app_temp_isSet = false;
    m_app_temp_isValid = false;

    m_aqi_isSet = false;
    m_aqi_isValid = false;

    m_city_name_isSet = false;
    m_city_name_isValid = false;

    m_clouds_isSet = false;
    m_clouds_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_datetime_isSet = false;
    m_datetime_isValid = false;

    m_dewpt_isSet = false;
    m_dewpt_isValid = false;

    m_dhi_isSet = false;
    m_dhi_isValid = false;

    m_dni_isSet = false;
    m_dni_isValid = false;

    m_elev_angle_isSet = false;
    m_elev_angle_isValid = false;

    m_ghi_isSet = false;
    m_ghi_isValid = false;

    m_gust_isSet = false;
    m_gust_isValid = false;

    m_hour_angle_isSet = false;
    m_hour_angle_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_ob_time_isSet = false;
    m_ob_time_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_precip_isSet = false;
    m_precip_isValid = false;

    m_pres_isSet = false;
    m_pres_isValid = false;

    m_rh_isSet = false;
    m_rh_isValid = false;

    m_slp_isSet = false;
    m_slp_isValid = false;

    m_snow_isSet = false;
    m_snow_isValid = false;

    m_solar_rad_isSet = false;
    m_solar_rad_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_station_isSet = false;
    m_station_isValid = false;

    m_sunrise_isSet = false;
    m_sunrise_isValid = false;

    m_sunset_isSet = false;
    m_sunset_isValid = false;

    m_temp_isSet = false;
    m_temp_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_uv_isSet = false;
    m_uv_isValid = false;

    m_vis_isSet = false;
    m_vis_isValid = false;

    m_weather_isSet = false;
    m_weather_isValid = false;

    m_wind_cdir_isSet = false;
    m_wind_cdir_isValid = false;

    m_wind_cdir_full_isSet = false;
    m_wind_cdir_full_isValid = false;

    m_wind_dir_isSet = false;
    m_wind_dir_isValid = false;

    m_wind_speed_isSet = false;
    m_wind_speed_isValid = false;
}

void OAICurrentObs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentObs::fromJsonObject(QJsonObject json) {

    m_app_temp_isValid = ::OpenAPI::fromJsonValue(m_app_temp, json[QString("app_temp")]);
    m_app_temp_isSet = !json[QString("app_temp")].isNull() && m_app_temp_isValid;

    m_aqi_isValid = ::OpenAPI::fromJsonValue(m_aqi, json[QString("aqi")]);
    m_aqi_isSet = !json[QString("aqi")].isNull() && m_aqi_isValid;

    m_city_name_isValid = ::OpenAPI::fromJsonValue(m_city_name, json[QString("city_name")]);
    m_city_name_isSet = !json[QString("city_name")].isNull() && m_city_name_isValid;

    m_clouds_isValid = ::OpenAPI::fromJsonValue(m_clouds, json[QString("clouds")]);
    m_clouds_isSet = !json[QString("clouds")].isNull() && m_clouds_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("datetime")]);
    m_datetime_isSet = !json[QString("datetime")].isNull() && m_datetime_isValid;

    m_dewpt_isValid = ::OpenAPI::fromJsonValue(m_dewpt, json[QString("dewpt")]);
    m_dewpt_isSet = !json[QString("dewpt")].isNull() && m_dewpt_isValid;

    m_dhi_isValid = ::OpenAPI::fromJsonValue(m_dhi, json[QString("dhi")]);
    m_dhi_isSet = !json[QString("dhi")].isNull() && m_dhi_isValid;

    m_dni_isValid = ::OpenAPI::fromJsonValue(m_dni, json[QString("dni")]);
    m_dni_isSet = !json[QString("dni")].isNull() && m_dni_isValid;

    m_elev_angle_isValid = ::OpenAPI::fromJsonValue(m_elev_angle, json[QString("elev_angle")]);
    m_elev_angle_isSet = !json[QString("elev_angle")].isNull() && m_elev_angle_isValid;

    m_ghi_isValid = ::OpenAPI::fromJsonValue(m_ghi, json[QString("ghi")]);
    m_ghi_isSet = !json[QString("ghi")].isNull() && m_ghi_isValid;

    m_gust_isValid = ::OpenAPI::fromJsonValue(m_gust, json[QString("gust")]);
    m_gust_isSet = !json[QString("gust")].isNull() && m_gust_isValid;

    m_hour_angle_isValid = ::OpenAPI::fromJsonValue(m_hour_angle, json[QString("hour_angle")]);
    m_hour_angle_isSet = !json[QString("hour_angle")].isNull() && m_hour_angle_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_ob_time_isValid = ::OpenAPI::fromJsonValue(m_ob_time, json[QString("ob_time")]);
    m_ob_time_isSet = !json[QString("ob_time")].isNull() && m_ob_time_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_precip_isValid = ::OpenAPI::fromJsonValue(m_precip, json[QString("precip")]);
    m_precip_isSet = !json[QString("precip")].isNull() && m_precip_isValid;

    m_pres_isValid = ::OpenAPI::fromJsonValue(m_pres, json[QString("pres")]);
    m_pres_isSet = !json[QString("pres")].isNull() && m_pres_isValid;

    m_rh_isValid = ::OpenAPI::fromJsonValue(m_rh, json[QString("rh")]);
    m_rh_isSet = !json[QString("rh")].isNull() && m_rh_isValid;

    m_slp_isValid = ::OpenAPI::fromJsonValue(m_slp, json[QString("slp")]);
    m_slp_isSet = !json[QString("slp")].isNull() && m_slp_isValid;

    m_snow_isValid = ::OpenAPI::fromJsonValue(m_snow, json[QString("snow")]);
    m_snow_isSet = !json[QString("snow")].isNull() && m_snow_isValid;

    m_solar_rad_isValid = ::OpenAPI::fromJsonValue(m_solar_rad, json[QString("solar_rad")]);
    m_solar_rad_isSet = !json[QString("solar_rad")].isNull() && m_solar_rad_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("state_code")]);
    m_state_code_isSet = !json[QString("state_code")].isNull() && m_state_code_isValid;

    m_station_isValid = ::OpenAPI::fromJsonValue(m_station, json[QString("station")]);
    m_station_isSet = !json[QString("station")].isNull() && m_station_isValid;

    m_sunrise_isValid = ::OpenAPI::fromJsonValue(m_sunrise, json[QString("sunrise")]);
    m_sunrise_isSet = !json[QString("sunrise")].isNull() && m_sunrise_isValid;

    m_sunset_isValid = ::OpenAPI::fromJsonValue(m_sunset, json[QString("sunset")]);
    m_sunset_isSet = !json[QString("sunset")].isNull() && m_sunset_isValid;

    m_temp_isValid = ::OpenAPI::fromJsonValue(m_temp, json[QString("temp")]);
    m_temp_isSet = !json[QString("temp")].isNull() && m_temp_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_uv_isValid = ::OpenAPI::fromJsonValue(m_uv, json[QString("uv")]);
    m_uv_isSet = !json[QString("uv")].isNull() && m_uv_isValid;

    m_vis_isValid = ::OpenAPI::fromJsonValue(m_vis, json[QString("vis")]);
    m_vis_isSet = !json[QString("vis")].isNull() && m_vis_isValid;

    m_weather_isValid = ::OpenAPI::fromJsonValue(m_weather, json[QString("weather")]);
    m_weather_isSet = !json[QString("weather")].isNull() && m_weather_isValid;

    m_wind_cdir_isValid = ::OpenAPI::fromJsonValue(m_wind_cdir, json[QString("wind_cdir")]);
    m_wind_cdir_isSet = !json[QString("wind_cdir")].isNull() && m_wind_cdir_isValid;

    m_wind_cdir_full_isValid = ::OpenAPI::fromJsonValue(m_wind_cdir_full, json[QString("wind_cdir_full")]);
    m_wind_cdir_full_isSet = !json[QString("wind_cdir_full")].isNull() && m_wind_cdir_full_isValid;

    m_wind_dir_isValid = ::OpenAPI::fromJsonValue(m_wind_dir, json[QString("wind_dir")]);
    m_wind_dir_isSet = !json[QString("wind_dir")].isNull() && m_wind_dir_isValid;

    m_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_wind_speed, json[QString("wind_speed")]);
    m_wind_speed_isSet = !json[QString("wind_speed")].isNull() && m_wind_speed_isValid;
}

QString OAICurrentObs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentObs::asJsonObject() const {
    QJsonObject obj;
    if (m_app_temp_isSet) {
        obj.insert(QString("app_temp"), ::OpenAPI::toJsonValue(m_app_temp));
    }
    if (m_aqi_isSet) {
        obj.insert(QString("aqi"), ::OpenAPI::toJsonValue(m_aqi));
    }
    if (m_city_name_isSet) {
        obj.insert(QString("city_name"), ::OpenAPI::toJsonValue(m_city_name));
    }
    if (m_clouds_isSet) {
        obj.insert(QString("clouds"), ::OpenAPI::toJsonValue(m_clouds));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_datetime_isSet) {
        obj.insert(QString("datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    if (m_dewpt_isSet) {
        obj.insert(QString("dewpt"), ::OpenAPI::toJsonValue(m_dewpt));
    }
    if (m_dhi_isSet) {
        obj.insert(QString("dhi"), ::OpenAPI::toJsonValue(m_dhi));
    }
    if (m_dni_isSet) {
        obj.insert(QString("dni"), ::OpenAPI::toJsonValue(m_dni));
    }
    if (m_elev_angle_isSet) {
        obj.insert(QString("elev_angle"), ::OpenAPI::toJsonValue(m_elev_angle));
    }
    if (m_ghi_isSet) {
        obj.insert(QString("ghi"), ::OpenAPI::toJsonValue(m_ghi));
    }
    if (m_gust_isSet) {
        obj.insert(QString("gust"), ::OpenAPI::toJsonValue(m_gust));
    }
    if (m_hour_angle_isSet) {
        obj.insert(QString("hour_angle"), ::OpenAPI::toJsonValue(m_hour_angle));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_ob_time_isSet) {
        obj.insert(QString("ob_time"), ::OpenAPI::toJsonValue(m_ob_time));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_precip_isSet) {
        obj.insert(QString("precip"), ::OpenAPI::toJsonValue(m_precip));
    }
    if (m_pres_isSet) {
        obj.insert(QString("pres"), ::OpenAPI::toJsonValue(m_pres));
    }
    if (m_rh_isSet) {
        obj.insert(QString("rh"), ::OpenAPI::toJsonValue(m_rh));
    }
    if (m_slp_isSet) {
        obj.insert(QString("slp"), ::OpenAPI::toJsonValue(m_slp));
    }
    if (m_snow_isSet) {
        obj.insert(QString("snow"), ::OpenAPI::toJsonValue(m_snow));
    }
    if (m_solar_rad_isSet) {
        obj.insert(QString("solar_rad"), ::OpenAPI::toJsonValue(m_solar_rad));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("state_code"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_station_isSet) {
        obj.insert(QString("station"), ::OpenAPI::toJsonValue(m_station));
    }
    if (m_sunrise_isSet) {
        obj.insert(QString("sunrise"), ::OpenAPI::toJsonValue(m_sunrise));
    }
    if (m_sunset_isSet) {
        obj.insert(QString("sunset"), ::OpenAPI::toJsonValue(m_sunset));
    }
    if (m_temp_isSet) {
        obj.insert(QString("temp"), ::OpenAPI::toJsonValue(m_temp));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_uv_isSet) {
        obj.insert(QString("uv"), ::OpenAPI::toJsonValue(m_uv));
    }
    if (m_vis_isSet) {
        obj.insert(QString("vis"), ::OpenAPI::toJsonValue(m_vis));
    }
    if (m_weather.isSet()) {
        obj.insert(QString("weather"), ::OpenAPI::toJsonValue(m_weather));
    }
    if (m_wind_cdir_isSet) {
        obj.insert(QString("wind_cdir"), ::OpenAPI::toJsonValue(m_wind_cdir));
    }
    if (m_wind_cdir_full_isSet) {
        obj.insert(QString("wind_cdir_full"), ::OpenAPI::toJsonValue(m_wind_cdir_full));
    }
    if (m_wind_dir_isSet) {
        obj.insert(QString("wind_dir"), ::OpenAPI::toJsonValue(m_wind_dir));
    }
    if (m_wind_speed_isSet) {
        obj.insert(QString("wind_speed"), ::OpenAPI::toJsonValue(m_wind_speed));
    }
    return obj;
}

double OAICurrentObs::getAppTemp() const {
    return m_app_temp;
}
void OAICurrentObs::setAppTemp(const double &app_temp) {
    m_app_temp = app_temp;
    m_app_temp_isSet = true;
}

bool OAICurrentObs::is_app_temp_Set() const{
    return m_app_temp_isSet;
}

bool OAICurrentObs::is_app_temp_Valid() const{
    return m_app_temp_isValid;
}

double OAICurrentObs::getAqi() const {
    return m_aqi;
}
void OAICurrentObs::setAqi(const double &aqi) {
    m_aqi = aqi;
    m_aqi_isSet = true;
}

bool OAICurrentObs::is_aqi_Set() const{
    return m_aqi_isSet;
}

bool OAICurrentObs::is_aqi_Valid() const{
    return m_aqi_isValid;
}

QString OAICurrentObs::getCityName() const {
    return m_city_name;
}
void OAICurrentObs::setCityName(const QString &city_name) {
    m_city_name = city_name;
    m_city_name_isSet = true;
}

bool OAICurrentObs::is_city_name_Set() const{
    return m_city_name_isSet;
}

bool OAICurrentObs::is_city_name_Valid() const{
    return m_city_name_isValid;
}

qint32 OAICurrentObs::getClouds() const {
    return m_clouds;
}
void OAICurrentObs::setClouds(const qint32 &clouds) {
    m_clouds = clouds;
    m_clouds_isSet = true;
}

bool OAICurrentObs::is_clouds_Set() const{
    return m_clouds_isSet;
}

bool OAICurrentObs::is_clouds_Valid() const{
    return m_clouds_isValid;
}

QString OAICurrentObs::getCountryCode() const {
    return m_country_code;
}
void OAICurrentObs::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAICurrentObs::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAICurrentObs::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAICurrentObs::getDatetime() const {
    return m_datetime;
}
void OAICurrentObs::setDatetime(const QString &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAICurrentObs::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAICurrentObs::is_datetime_Valid() const{
    return m_datetime_isValid;
}

double OAICurrentObs::getDewpt() const {
    return m_dewpt;
}
void OAICurrentObs::setDewpt(const double &dewpt) {
    m_dewpt = dewpt;
    m_dewpt_isSet = true;
}

bool OAICurrentObs::is_dewpt_Set() const{
    return m_dewpt_isSet;
}

bool OAICurrentObs::is_dewpt_Valid() const{
    return m_dewpt_isValid;
}

double OAICurrentObs::getDhi() const {
    return m_dhi;
}
void OAICurrentObs::setDhi(const double &dhi) {
    m_dhi = dhi;
    m_dhi_isSet = true;
}

bool OAICurrentObs::is_dhi_Set() const{
    return m_dhi_isSet;
}

bool OAICurrentObs::is_dhi_Valid() const{
    return m_dhi_isValid;
}

double OAICurrentObs::getDni() const {
    return m_dni;
}
void OAICurrentObs::setDni(const double &dni) {
    m_dni = dni;
    m_dni_isSet = true;
}

bool OAICurrentObs::is_dni_Set() const{
    return m_dni_isSet;
}

bool OAICurrentObs::is_dni_Valid() const{
    return m_dni_isValid;
}

double OAICurrentObs::getElevAngle() const {
    return m_elev_angle;
}
void OAICurrentObs::setElevAngle(const double &elev_angle) {
    m_elev_angle = elev_angle;
    m_elev_angle_isSet = true;
}

bool OAICurrentObs::is_elev_angle_Set() const{
    return m_elev_angle_isSet;
}

bool OAICurrentObs::is_elev_angle_Valid() const{
    return m_elev_angle_isValid;
}

double OAICurrentObs::getGhi() const {
    return m_ghi;
}
void OAICurrentObs::setGhi(const double &ghi) {
    m_ghi = ghi;
    m_ghi_isSet = true;
}

bool OAICurrentObs::is_ghi_Set() const{
    return m_ghi_isSet;
}

bool OAICurrentObs::is_ghi_Valid() const{
    return m_ghi_isValid;
}

double OAICurrentObs::getGust() const {
    return m_gust;
}
void OAICurrentObs::setGust(const double &gust) {
    m_gust = gust;
    m_gust_isSet = true;
}

bool OAICurrentObs::is_gust_Set() const{
    return m_gust_isSet;
}

bool OAICurrentObs::is_gust_Valid() const{
    return m_gust_isValid;
}

double OAICurrentObs::getHourAngle() const {
    return m_hour_angle;
}
void OAICurrentObs::setHourAngle(const double &hour_angle) {
    m_hour_angle = hour_angle;
    m_hour_angle_isSet = true;
}

bool OAICurrentObs::is_hour_angle_Set() const{
    return m_hour_angle_isSet;
}

bool OAICurrentObs::is_hour_angle_Valid() const{
    return m_hour_angle_isValid;
}

double OAICurrentObs::getLat() const {
    return m_lat;
}
void OAICurrentObs::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAICurrentObs::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAICurrentObs::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAICurrentObs::getLon() const {
    return m_lon;
}
void OAICurrentObs::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAICurrentObs::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAICurrentObs::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAICurrentObs::getObTime() const {
    return m_ob_time;
}
void OAICurrentObs::setObTime(const QString &ob_time) {
    m_ob_time = ob_time;
    m_ob_time_isSet = true;
}

bool OAICurrentObs::is_ob_time_Set() const{
    return m_ob_time_isSet;
}

bool OAICurrentObs::is_ob_time_Valid() const{
    return m_ob_time_isValid;
}

QString OAICurrentObs::getPod() const {
    return m_pod;
}
void OAICurrentObs::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAICurrentObs::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAICurrentObs::is_pod_Valid() const{
    return m_pod_isValid;
}

double OAICurrentObs::getPrecip() const {
    return m_precip;
}
void OAICurrentObs::setPrecip(const double &precip) {
    m_precip = precip;
    m_precip_isSet = true;
}

bool OAICurrentObs::is_precip_Set() const{
    return m_precip_isSet;
}

bool OAICurrentObs::is_precip_Valid() const{
    return m_precip_isValid;
}

double OAICurrentObs::getPres() const {
    return m_pres;
}
void OAICurrentObs::setPres(const double &pres) {
    m_pres = pres;
    m_pres_isSet = true;
}

bool OAICurrentObs::is_pres_Set() const{
    return m_pres_isSet;
}

bool OAICurrentObs::is_pres_Valid() const{
    return m_pres_isValid;
}

qint32 OAICurrentObs::getRh() const {
    return m_rh;
}
void OAICurrentObs::setRh(const qint32 &rh) {
    m_rh = rh;
    m_rh_isSet = true;
}

bool OAICurrentObs::is_rh_Set() const{
    return m_rh_isSet;
}

bool OAICurrentObs::is_rh_Valid() const{
    return m_rh_isValid;
}

double OAICurrentObs::getSlp() const {
    return m_slp;
}
void OAICurrentObs::setSlp(const double &slp) {
    m_slp = slp;
    m_slp_isSet = true;
}

bool OAICurrentObs::is_slp_Set() const{
    return m_slp_isSet;
}

bool OAICurrentObs::is_slp_Valid() const{
    return m_slp_isValid;
}

double OAICurrentObs::getSnow() const {
    return m_snow;
}
void OAICurrentObs::setSnow(const double &snow) {
    m_snow = snow;
    m_snow_isSet = true;
}

bool OAICurrentObs::is_snow_Set() const{
    return m_snow_isSet;
}

bool OAICurrentObs::is_snow_Valid() const{
    return m_snow_isValid;
}

double OAICurrentObs::getSolarRad() const {
    return m_solar_rad;
}
void OAICurrentObs::setSolarRad(const double &solar_rad) {
    m_solar_rad = solar_rad;
    m_solar_rad_isSet = true;
}

bool OAICurrentObs::is_solar_rad_Set() const{
    return m_solar_rad_isSet;
}

bool OAICurrentObs::is_solar_rad_Valid() const{
    return m_solar_rad_isValid;
}

QList<QString> OAICurrentObs::getSources() const {
    return m_sources;
}
void OAICurrentObs::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICurrentObs::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICurrentObs::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAICurrentObs::getStateCode() const {
    return m_state_code;
}
void OAICurrentObs::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAICurrentObs::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAICurrentObs::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QString OAICurrentObs::getStation() const {
    return m_station;
}
void OAICurrentObs::setStation(const QString &station) {
    m_station = station;
    m_station_isSet = true;
}

bool OAICurrentObs::is_station_Set() const{
    return m_station_isSet;
}

bool OAICurrentObs::is_station_Valid() const{
    return m_station_isValid;
}

QString OAICurrentObs::getSunrise() const {
    return m_sunrise;
}
void OAICurrentObs::setSunrise(const QString &sunrise) {
    m_sunrise = sunrise;
    m_sunrise_isSet = true;
}

bool OAICurrentObs::is_sunrise_Set() const{
    return m_sunrise_isSet;
}

bool OAICurrentObs::is_sunrise_Valid() const{
    return m_sunrise_isValid;
}

QString OAICurrentObs::getSunset() const {
    return m_sunset;
}
void OAICurrentObs::setSunset(const QString &sunset) {
    m_sunset = sunset;
    m_sunset_isSet = true;
}

bool OAICurrentObs::is_sunset_Set() const{
    return m_sunset_isSet;
}

bool OAICurrentObs::is_sunset_Valid() const{
    return m_sunset_isValid;
}

double OAICurrentObs::getTemp() const {
    return m_temp;
}
void OAICurrentObs::setTemp(const double &temp) {
    m_temp = temp;
    m_temp_isSet = true;
}

bool OAICurrentObs::is_temp_Set() const{
    return m_temp_isSet;
}

bool OAICurrentObs::is_temp_Valid() const{
    return m_temp_isValid;
}

QString OAICurrentObs::getTimezone() const {
    return m_timezone;
}
void OAICurrentObs::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICurrentObs::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICurrentObs::is_timezone_Valid() const{
    return m_timezone_isValid;
}

double OAICurrentObs::getTs() const {
    return m_ts;
}
void OAICurrentObs::setTs(const double &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAICurrentObs::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAICurrentObs::is_ts_Valid() const{
    return m_ts_isValid;
}

double OAICurrentObs::getUv() const {
    return m_uv;
}
void OAICurrentObs::setUv(const double &uv) {
    m_uv = uv;
    m_uv_isSet = true;
}

bool OAICurrentObs::is_uv_Set() const{
    return m_uv_isSet;
}

bool OAICurrentObs::is_uv_Valid() const{
    return m_uv_isValid;
}

qint32 OAICurrentObs::getVis() const {
    return m_vis;
}
void OAICurrentObs::setVis(const qint32 &vis) {
    m_vis = vis;
    m_vis_isSet = true;
}

bool OAICurrentObs::is_vis_Set() const{
    return m_vis_isSet;
}

bool OAICurrentObs::is_vis_Valid() const{
    return m_vis_isValid;
}

OAICurrentObs_weather OAICurrentObs::getWeather() const {
    return m_weather;
}
void OAICurrentObs::setWeather(const OAICurrentObs_weather &weather) {
    m_weather = weather;
    m_weather_isSet = true;
}

bool OAICurrentObs::is_weather_Set() const{
    return m_weather_isSet;
}

bool OAICurrentObs::is_weather_Valid() const{
    return m_weather_isValid;
}

QString OAICurrentObs::getWindCdir() const {
    return m_wind_cdir;
}
void OAICurrentObs::setWindCdir(const QString &wind_cdir) {
    m_wind_cdir = wind_cdir;
    m_wind_cdir_isSet = true;
}

bool OAICurrentObs::is_wind_cdir_Set() const{
    return m_wind_cdir_isSet;
}

bool OAICurrentObs::is_wind_cdir_Valid() const{
    return m_wind_cdir_isValid;
}

QString OAICurrentObs::getWindCdirFull() const {
    return m_wind_cdir_full;
}
void OAICurrentObs::setWindCdirFull(const QString &wind_cdir_full) {
    m_wind_cdir_full = wind_cdir_full;
    m_wind_cdir_full_isSet = true;
}

bool OAICurrentObs::is_wind_cdir_full_Set() const{
    return m_wind_cdir_full_isSet;
}

bool OAICurrentObs::is_wind_cdir_full_Valid() const{
    return m_wind_cdir_full_isValid;
}

qint32 OAICurrentObs::getWindDir() const {
    return m_wind_dir;
}
void OAICurrentObs::setWindDir(const qint32 &wind_dir) {
    m_wind_dir = wind_dir;
    m_wind_dir_isSet = true;
}

bool OAICurrentObs::is_wind_dir_Set() const{
    return m_wind_dir_isSet;
}

bool OAICurrentObs::is_wind_dir_Valid() const{
    return m_wind_dir_isValid;
}

double OAICurrentObs::getWindSpeed() const {
    return m_wind_speed;
}
void OAICurrentObs::setWindSpeed(const double &wind_speed) {
    m_wind_speed = wind_speed;
    m_wind_speed_isSet = true;
}

bool OAICurrentObs::is_wind_speed_Set() const{
    return m_wind_speed_isSet;
}

bool OAICurrentObs::is_wind_speed_Valid() const{
    return m_wind_speed_isValid;
}

bool OAICurrentObs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aqi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clouds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dewpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dni_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elev_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ghi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gust_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ob_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_rad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunrise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weather.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_cdir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_cdir_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentObs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
