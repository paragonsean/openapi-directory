/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoryDayObj
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.635462-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryDayObj {
  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private String datetime;

  public static final String SERIALIZED_NAME_DEWPT = "dewpt";
  @SerializedName(SERIALIZED_NAME_DEWPT)
  private BigDecimal dewpt;

  public static final String SERIALIZED_NAME_DHI = "dhi";
  @SerializedName(SERIALIZED_NAME_DHI)
  private Integer dhi;

  public static final String SERIALIZED_NAME_DNI = "dni";
  @SerializedName(SERIALIZED_NAME_DNI)
  private Integer dni;

  public static final String SERIALIZED_NAME_GHI = "ghi";
  @SerializedName(SERIALIZED_NAME_GHI)
  private Integer ghi;

  public static final String SERIALIZED_NAME_MAX_TEMP = "max_temp";
  @SerializedName(SERIALIZED_NAME_MAX_TEMP)
  private BigDecimal maxTemp;

  public static final String SERIALIZED_NAME_MAX_TEMP_TS = "max_temp_ts";
  @SerializedName(SERIALIZED_NAME_MAX_TEMP_TS)
  private BigDecimal maxTempTs;

  public static final String SERIALIZED_NAME_MAX_UV = "max_uv";
  @SerializedName(SERIALIZED_NAME_MAX_UV)
  private BigDecimal maxUv;

  public static final String SERIALIZED_NAME_MAX_WIND_DIR = "max_wind_dir";
  @SerializedName(SERIALIZED_NAME_MAX_WIND_DIR)
  private Integer maxWindDir;

  public static final String SERIALIZED_NAME_MAX_WIND_SPD = "max_wind_spd";
  @SerializedName(SERIALIZED_NAME_MAX_WIND_SPD)
  private BigDecimal maxWindSpd;

  public static final String SERIALIZED_NAME_MAX_WIND_SPD_TS = "max_wind_spd_ts";
  @SerializedName(SERIALIZED_NAME_MAX_WIND_SPD_TS)
  private BigDecimal maxWindSpdTs;

  public static final String SERIALIZED_NAME_MIN_TEMP = "min_temp";
  @SerializedName(SERIALIZED_NAME_MIN_TEMP)
  private BigDecimal minTemp;

  public static final String SERIALIZED_NAME_MIN_TEMP_TS = "min_temp_ts";
  @SerializedName(SERIALIZED_NAME_MIN_TEMP_TS)
  private BigDecimal minTempTs;

  public static final String SERIALIZED_NAME_PRECIP = "precip";
  @SerializedName(SERIALIZED_NAME_PRECIP)
  private BigDecimal precip;

  public static final String SERIALIZED_NAME_PRECIP_GPM = "precip_gpm";
  @SerializedName(SERIALIZED_NAME_PRECIP_GPM)
  private BigDecimal precipGpm;

  public static final String SERIALIZED_NAME_PRES = "pres";
  @SerializedName(SERIALIZED_NAME_PRES)
  private BigDecimal pres;

  public static final String SERIALIZED_NAME_REVISION_STATUS = "revision_status";
  @SerializedName(SERIALIZED_NAME_REVISION_STATUS)
  private String revisionStatus;

  public static final String SERIALIZED_NAME_RH = "rh";
  @SerializedName(SERIALIZED_NAME_RH)
  private Integer rh;

  public static final String SERIALIZED_NAME_SLP = "slp";
  @SerializedName(SERIALIZED_NAME_SLP)
  private BigDecimal slp;

  public static final String SERIALIZED_NAME_SNOW = "snow";
  @SerializedName(SERIALIZED_NAME_SNOW)
  private BigDecimal snow;

  public static final String SERIALIZED_NAME_SNOW_DEPTH = "snow_depth";
  @SerializedName(SERIALIZED_NAME_SNOW_DEPTH)
  private BigDecimal snowDepth;

  public static final String SERIALIZED_NAME_T_DHI = "t_dhi";
  @SerializedName(SERIALIZED_NAME_T_DHI)
  private Integer tDhi;

  public static final String SERIALIZED_NAME_T_DNI = "t_dni";
  @SerializedName(SERIALIZED_NAME_T_DNI)
  private Integer tDni;

  public static final String SERIALIZED_NAME_T_GHI = "t_ghi";
  @SerializedName(SERIALIZED_NAME_T_GHI)
  private Integer tGhi;

  public static final String SERIALIZED_NAME_TEMP = "temp";
  @SerializedName(SERIALIZED_NAME_TEMP)
  private BigDecimal temp;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private Integer ts;

  public static final String SERIALIZED_NAME_WIND_DIR = "wind_dir";
  @SerializedName(SERIALIZED_NAME_WIND_DIR)
  private Integer windDir;

  public static final String SERIALIZED_NAME_WIND_GUST_SPD = "wind_gust_spd";
  @SerializedName(SERIALIZED_NAME_WIND_GUST_SPD)
  private BigDecimal windGustSpd;

  public static final String SERIALIZED_NAME_WIND_SPD = "wind_spd";
  @SerializedName(SERIALIZED_NAME_WIND_SPD)
  private BigDecimal windSpd;

  public HistoryDayObj() {
  }

  public HistoryDayObj datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * Date in format \&quot;YYYY-MM-DD\&quot;. All datetime is in (UTC)
   * @return datetime
   */
  @javax.annotation.Nullable
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }


  public HistoryDayObj dewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
    return this;
  }

  /**
   * Average dewpoint - Default (C)
   * @return dewpt
   */
  @javax.annotation.Nullable
  public BigDecimal getDewpt() {
    return dewpt;
  }

  public void setDewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
  }


  public HistoryDayObj dhi(Integer dhi) {
    this.dhi = dhi;
    return this;
  }

  /**
   * Average hourly diffuse horizontal solar irradiance (W/m^2)
   * @return dhi
   */
  @javax.annotation.Nullable
  public Integer getDhi() {
    return dhi;
  }

  public void setDhi(Integer dhi) {
    this.dhi = dhi;
  }


  public HistoryDayObj dni(Integer dni) {
    this.dni = dni;
    return this;
  }

  /**
   * Average direct normal solar irradiance (W/m^2)
   * @return dni
   */
  @javax.annotation.Nullable
  public Integer getDni() {
    return dni;
  }

  public void setDni(Integer dni) {
    this.dni = dni;
  }


  public HistoryDayObj ghi(Integer ghi) {
    this.ghi = ghi;
    return this;
  }

  /**
   * Average hourly global horizontal solar irradiance (W/m^2)
   * @return ghi
   */
  @javax.annotation.Nullable
  public Integer getGhi() {
    return ghi;
  }

  public void setGhi(Integer ghi) {
    this.ghi = ghi;
  }


  public HistoryDayObj maxTemp(BigDecimal maxTemp) {
    this.maxTemp = maxTemp;
    return this;
  }

  /**
   * Max temperature - Default (C)
   * @return maxTemp
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxTemp() {
    return maxTemp;
  }

  public void setMaxTemp(BigDecimal maxTemp) {
    this.maxTemp = maxTemp;
  }


  public HistoryDayObj maxTempTs(BigDecimal maxTempTs) {
    this.maxTempTs = maxTempTs;
    return this;
  }

  /**
   * Time of max memperature - Unix Timestamp
   * @return maxTempTs
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxTempTs() {
    return maxTempTs;
  }

  public void setMaxTempTs(BigDecimal maxTempTs) {
    this.maxTempTs = maxTempTs;
  }


  public HistoryDayObj maxUv(BigDecimal maxUv) {
    this.maxUv = maxUv;
    return this;
  }

  /**
   * Max UV Index (1-11+)
   * @return maxUv
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxUv() {
    return maxUv;
  }

  public void setMaxUv(BigDecimal maxUv) {
    this.maxUv = maxUv;
  }


  public HistoryDayObj maxWindDir(Integer maxWindDir) {
    this.maxWindDir = maxWindDir;
    return this;
  }

  /**
   * Direction of wind at time of max 2min wind (degrees)
   * @return maxWindDir
   */
  @javax.annotation.Nullable
  public Integer getMaxWindDir() {
    return maxWindDir;
  }

  public void setMaxWindDir(Integer maxWindDir) {
    this.maxWindDir = maxWindDir;
  }


  public HistoryDayObj maxWindSpd(BigDecimal maxWindSpd) {
    this.maxWindSpd = maxWindSpd;
    return this;
  }

  /**
   * Max 2min Wind Speed - default (m/s)
   * @return maxWindSpd
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxWindSpd() {
    return maxWindSpd;
  }

  public void setMaxWindSpd(BigDecimal maxWindSpd) {
    this.maxWindSpd = maxWindSpd;
  }


  public HistoryDayObj maxWindSpdTs(BigDecimal maxWindSpdTs) {
    this.maxWindSpdTs = maxWindSpdTs;
    return this;
  }

  /**
   * Time of max 2min wind - unix timestamp
   * @return maxWindSpdTs
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxWindSpdTs() {
    return maxWindSpdTs;
  }

  public void setMaxWindSpdTs(BigDecimal maxWindSpdTs) {
    this.maxWindSpdTs = maxWindSpdTs;
  }


  public HistoryDayObj minTemp(BigDecimal minTemp) {
    this.minTemp = minTemp;
    return this;
  }

  /**
   * Min temperature - Default (C)
   * @return minTemp
   */
  @javax.annotation.Nullable
  public BigDecimal getMinTemp() {
    return minTemp;
  }

  public void setMinTemp(BigDecimal minTemp) {
    this.minTemp = minTemp;
  }


  public HistoryDayObj minTempTs(BigDecimal minTempTs) {
    this.minTempTs = minTempTs;
    return this;
  }

  /**
   * Time of max temperature - unix timestamp
   * @return minTempTs
   */
  @javax.annotation.Nullable
  public BigDecimal getMinTempTs() {
    return minTempTs;
  }

  public void setMinTempTs(BigDecimal minTempTs) {
    this.minTempTs = minTempTs;
  }


  public HistoryDayObj precip(BigDecimal precip) {
    this.precip = precip;
    return this;
  }

  /**
   * Liquid equivalent precipitation - default (mm)
   * @return precip
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecip() {
    return precip;
  }

  public void setPrecip(BigDecimal precip) {
    this.precip = precip;
  }


  public HistoryDayObj precipGpm(BigDecimal precipGpm) {
    this.precipGpm = precipGpm;
    return this;
  }

  /**
   * Satellite estimated liquid equivalent precipitation - default (mm)
   * @return precipGpm
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipGpm() {
    return precipGpm;
  }

  public void setPrecipGpm(BigDecimal precipGpm) {
    this.precipGpm = precipGpm;
  }


  public HistoryDayObj pres(BigDecimal pres) {
    this.pres = pres;
    return this;
  }

  /**
   * Average pressure (mb)
   * @return pres
   */
  @javax.annotation.Nullable
  public BigDecimal getPres() {
    return pres;
  }

  public void setPres(BigDecimal pres) {
    this.pres = pres;
  }


  public HistoryDayObj revisionStatus(String revisionStatus) {
    this.revisionStatus = revisionStatus;
    return this;
  }

  /**
   * Data revision status (interim or final)
   * @return revisionStatus
   */
  @javax.annotation.Nullable
  public String getRevisionStatus() {
    return revisionStatus;
  }

  public void setRevisionStatus(String revisionStatus) {
    this.revisionStatus = revisionStatus;
  }


  public HistoryDayObj rh(Integer rh) {
    this.rh = rh;
    return this;
  }

  /**
   * Average relative humidity as a percentage (%)
   * @return rh
   */
  @javax.annotation.Nullable
  public Integer getRh() {
    return rh;
  }

  public void setRh(Integer rh) {
    this.rh = rh;
  }


  public HistoryDayObj slp(BigDecimal slp) {
    this.slp = slp;
    return this;
  }

  /**
   * Average sea level pressure (mb)
   * @return slp
   */
  @javax.annotation.Nullable
  public BigDecimal getSlp() {
    return slp;
  }

  public void setSlp(BigDecimal slp) {
    this.slp = slp;
  }


  public HistoryDayObj snow(BigDecimal snow) {
    this.snow = snow;
    return this;
  }

  /**
   * Snowfall - default (mm)
   * @return snow
   */
  @javax.annotation.Nullable
  public BigDecimal getSnow() {
    return snow;
  }

  public void setSnow(BigDecimal snow) {
    this.snow = snow;
  }


  public HistoryDayObj snowDepth(BigDecimal snowDepth) {
    this.snowDepth = snowDepth;
    return this;
  }

  /**
   * Snow Depth - default (mm)
   * @return snowDepth
   */
  @javax.annotation.Nullable
  public BigDecimal getSnowDepth() {
    return snowDepth;
  }

  public void setSnowDepth(BigDecimal snowDepth) {
    this.snowDepth = snowDepth;
  }


  public HistoryDayObj tDhi(Integer tDhi) {
    this.tDhi = tDhi;
    return this;
  }

  /**
   * Total diffuse horizontal solar irradiance (W/m^2)
   * @return tDhi
   */
  @javax.annotation.Nullable
  public Integer gettDhi() {
    return tDhi;
  }

  public void settDhi(Integer tDhi) {
    this.tDhi = tDhi;
  }


  public HistoryDayObj tDni(Integer tDni) {
    this.tDni = tDni;
    return this;
  }

  /**
   * Total direct normal solar irradiance (W/m^2)
   * @return tDni
   */
  @javax.annotation.Nullable
  public Integer gettDni() {
    return tDni;
  }

  public void settDni(Integer tDni) {
    this.tDni = tDni;
  }


  public HistoryDayObj tGhi(Integer tGhi) {
    this.tGhi = tGhi;
    return this;
  }

  /**
   * Total global horizontal solar irradiance (W/m^2)
   * @return tGhi
   */
  @javax.annotation.Nullable
  public Integer gettGhi() {
    return tGhi;
  }

  public void settGhi(Integer tGhi) {
    this.tGhi = tGhi;
  }


  public HistoryDayObj temp(BigDecimal temp) {
    this.temp = temp;
    return this;
  }

  /**
   * Average temperature - Default (C)
   * @return temp
   */
  @javax.annotation.Nullable
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(BigDecimal temp) {
    this.temp = temp;
  }


  public HistoryDayObj ts(Integer ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Unix timestamp of datetime (Midnight UTC)
   * @return ts
   */
  @javax.annotation.Nullable
  public Integer getTs() {
    return ts;
  }

  public void setTs(Integer ts) {
    this.ts = ts;
  }


  public HistoryDayObj windDir(Integer windDir) {
    this.windDir = windDir;
    return this;
  }

  /**
   * Average wind direction (degrees)
   * @return windDir
   */
  @javax.annotation.Nullable
  public Integer getWindDir() {
    return windDir;
  }

  public void setWindDir(Integer windDir) {
    this.windDir = windDir;
  }


  public HistoryDayObj windGustSpd(BigDecimal windGustSpd) {
    this.windGustSpd = windGustSpd;
    return this;
  }

  /**
   * Wind gust speed - default (m/s)
   * @return windGustSpd
   */
  @javax.annotation.Nullable
  public BigDecimal getWindGustSpd() {
    return windGustSpd;
  }

  public void setWindGustSpd(BigDecimal windGustSpd) {
    this.windGustSpd = windGustSpd;
  }


  public HistoryDayObj windSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
    return this;
  }

  /**
   * Average wind speed - default (m/s)
   * @return windSpd
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpd() {
    return windSpd;
  }

  public void setWindSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryDayObj historyDayObj = (HistoryDayObj) o;
    return Objects.equals(this.datetime, historyDayObj.datetime) &&
        Objects.equals(this.dewpt, historyDayObj.dewpt) &&
        Objects.equals(this.dhi, historyDayObj.dhi) &&
        Objects.equals(this.dni, historyDayObj.dni) &&
        Objects.equals(this.ghi, historyDayObj.ghi) &&
        Objects.equals(this.maxTemp, historyDayObj.maxTemp) &&
        Objects.equals(this.maxTempTs, historyDayObj.maxTempTs) &&
        Objects.equals(this.maxUv, historyDayObj.maxUv) &&
        Objects.equals(this.maxWindDir, historyDayObj.maxWindDir) &&
        Objects.equals(this.maxWindSpd, historyDayObj.maxWindSpd) &&
        Objects.equals(this.maxWindSpdTs, historyDayObj.maxWindSpdTs) &&
        Objects.equals(this.minTemp, historyDayObj.minTemp) &&
        Objects.equals(this.minTempTs, historyDayObj.minTempTs) &&
        Objects.equals(this.precip, historyDayObj.precip) &&
        Objects.equals(this.precipGpm, historyDayObj.precipGpm) &&
        Objects.equals(this.pres, historyDayObj.pres) &&
        Objects.equals(this.revisionStatus, historyDayObj.revisionStatus) &&
        Objects.equals(this.rh, historyDayObj.rh) &&
        Objects.equals(this.slp, historyDayObj.slp) &&
        Objects.equals(this.snow, historyDayObj.snow) &&
        Objects.equals(this.snowDepth, historyDayObj.snowDepth) &&
        Objects.equals(this.tDhi, historyDayObj.tDhi) &&
        Objects.equals(this.tDni, historyDayObj.tDni) &&
        Objects.equals(this.tGhi, historyDayObj.tGhi) &&
        Objects.equals(this.temp, historyDayObj.temp) &&
        Objects.equals(this.ts, historyDayObj.ts) &&
        Objects.equals(this.windDir, historyDayObj.windDir) &&
        Objects.equals(this.windGustSpd, historyDayObj.windGustSpd) &&
        Objects.equals(this.windSpd, historyDayObj.windSpd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datetime, dewpt, dhi, dni, ghi, maxTemp, maxTempTs, maxUv, maxWindDir, maxWindSpd, maxWindSpdTs, minTemp, minTempTs, precip, precipGpm, pres, revisionStatus, rh, slp, snow, snowDepth, tDhi, tDni, tGhi, temp, ts, windDir, windGustSpd, windSpd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryDayObj {\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    dewpt: ").append(toIndentedString(dewpt)).append("\n");
    sb.append("    dhi: ").append(toIndentedString(dhi)).append("\n");
    sb.append("    dni: ").append(toIndentedString(dni)).append("\n");
    sb.append("    ghi: ").append(toIndentedString(ghi)).append("\n");
    sb.append("    maxTemp: ").append(toIndentedString(maxTemp)).append("\n");
    sb.append("    maxTempTs: ").append(toIndentedString(maxTempTs)).append("\n");
    sb.append("    maxUv: ").append(toIndentedString(maxUv)).append("\n");
    sb.append("    maxWindDir: ").append(toIndentedString(maxWindDir)).append("\n");
    sb.append("    maxWindSpd: ").append(toIndentedString(maxWindSpd)).append("\n");
    sb.append("    maxWindSpdTs: ").append(toIndentedString(maxWindSpdTs)).append("\n");
    sb.append("    minTemp: ").append(toIndentedString(minTemp)).append("\n");
    sb.append("    minTempTs: ").append(toIndentedString(minTempTs)).append("\n");
    sb.append("    precip: ").append(toIndentedString(precip)).append("\n");
    sb.append("    precipGpm: ").append(toIndentedString(precipGpm)).append("\n");
    sb.append("    pres: ").append(toIndentedString(pres)).append("\n");
    sb.append("    revisionStatus: ").append(toIndentedString(revisionStatus)).append("\n");
    sb.append("    rh: ").append(toIndentedString(rh)).append("\n");
    sb.append("    slp: ").append(toIndentedString(slp)).append("\n");
    sb.append("    snow: ").append(toIndentedString(snow)).append("\n");
    sb.append("    snowDepth: ").append(toIndentedString(snowDepth)).append("\n");
    sb.append("    tDhi: ").append(toIndentedString(tDhi)).append("\n");
    sb.append("    tDni: ").append(toIndentedString(tDni)).append("\n");
    sb.append("    tGhi: ").append(toIndentedString(tGhi)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windGustSpd: ").append(toIndentedString(windGustSpd)).append("\n");
    sb.append("    windSpd: ").append(toIndentedString(windSpd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datetime");
    openapiFields.add("dewpt");
    openapiFields.add("dhi");
    openapiFields.add("dni");
    openapiFields.add("ghi");
    openapiFields.add("max_temp");
    openapiFields.add("max_temp_ts");
    openapiFields.add("max_uv");
    openapiFields.add("max_wind_dir");
    openapiFields.add("max_wind_spd");
    openapiFields.add("max_wind_spd_ts");
    openapiFields.add("min_temp");
    openapiFields.add("min_temp_ts");
    openapiFields.add("precip");
    openapiFields.add("precip_gpm");
    openapiFields.add("pres");
    openapiFields.add("revision_status");
    openapiFields.add("rh");
    openapiFields.add("slp");
    openapiFields.add("snow");
    openapiFields.add("snow_depth");
    openapiFields.add("t_dhi");
    openapiFields.add("t_dni");
    openapiFields.add("t_ghi");
    openapiFields.add("temp");
    openapiFields.add("ts");
    openapiFields.add("wind_dir");
    openapiFields.add("wind_gust_spd");
    openapiFields.add("wind_spd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryDayObj
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryDayObj.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryDayObj is not found in the empty JSON string", HistoryDayObj.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryDayObj.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryDayObj` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datetime") != null && !jsonObj.get("datetime").isJsonNull()) && !jsonObj.get("datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime").toString()));
      }
      if ((jsonObj.get("revision_status") != null && !jsonObj.get("revision_status").isJsonNull()) && !jsonObj.get("revision_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryDayObj.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryDayObj' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryDayObj> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryDayObj.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryDayObj>() {
           @Override
           public void write(JsonWriter out, HistoryDayObj value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryDayObj read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryDayObj given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryDayObj
   * @throws IOException if the JSON string is invalid with respect to HistoryDayObj
   */
  public static HistoryDayObj fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryDayObj.class);
  }

  /**
   * Convert an instance of HistoryDayObj to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

