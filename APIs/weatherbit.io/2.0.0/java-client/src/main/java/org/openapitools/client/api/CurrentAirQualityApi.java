/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AQCurrentGroup;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrentAirQualityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrentAirQualityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrentAirQualityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for currentAirqualitycityIdcityIdGet
     * @param cityId City ID. Example: 4487042 (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitycityIdcityIdGetCall(Integer cityId, String key, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/current/airquality?city_id={city_id}"
            .replace("{" + "city_id" + "}", localVarApiClient.escapeString(cityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentAirqualitycityIdcityIdGetValidateBeforeCall(Integer cityId, String key, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cityId' is set
        if (cityId == null) {
            throw new ApiException("Missing the required parameter 'cityId' when calling currentAirqualitycityIdcityIdGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling currentAirqualitycityIdcityIdGet(Async)");
        }

        return currentAirqualitycityIdcityIdGetCall(cityId, key, paramCallback, _callback);

    }

    /**
     * Returns current air quality conditions - Given a City ID.
     * Returns current air quality conditions.
     * @param cityId City ID. Example: 4487042 (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @return AQCurrentGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public AQCurrentGroup currentAirqualitycityIdcityIdGet(Integer cityId, String key, String paramCallback) throws ApiException {
        ApiResponse<AQCurrentGroup> localVarResp = currentAirqualitycityIdcityIdGetWithHttpInfo(cityId, key, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Returns current air quality conditions - Given a City ID.
     * Returns current air quality conditions.
     * @param cityId City ID. Example: 4487042 (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @return ApiResponse&lt;AQCurrentGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AQCurrentGroup> currentAirqualitycityIdcityIdGetWithHttpInfo(Integer cityId, String key, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = currentAirqualitycityIdcityIdGetValidateBeforeCall(cityId, key, paramCallback, null);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns current air quality conditions - Given a City ID. (asynchronously)
     * Returns current air quality conditions.
     * @param cityId City ID. Example: 4487042 (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitycityIdcityIdGetAsync(Integer cityId, String key, String paramCallback, final ApiCallback<AQCurrentGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentAirqualitycityIdcityIdGetValidateBeforeCall(cityId, key, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentAirqualitycitycitycountrycountryGet
     * @param city City search.. Example - &amp;city&#x3D;Raleigh,NC or &amp;city&#x3D;Berlin,DE or city&#x3D;Paris&amp;country&#x3D;FR (required)
     * @param country Country Code (2 letter). (required)
     * @param key Your registered API key. (required)
     * @param state Full name of state. (optional)
     * @param paramCallback Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitycitycitycountrycountryGetCall(String city, String country, String key, String state, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/current/airquality?city={city}&country={country}"
            .replace("{" + "city" + "}", localVarApiClient.escapeString(city.toString()))
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentAirqualitycitycitycountrycountryGetValidateBeforeCall(String city, String country, String key, String state, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'city' is set
        if (city == null) {
            throw new ApiException("Missing the required parameter 'city' when calling currentAirqualitycitycitycountrycountryGet(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling currentAirqualitycitycitycountrycountryGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling currentAirqualitycitycitycountrycountryGet(Async)");
        }

        return currentAirqualitycitycitycountrycountryGetCall(city, country, key, state, paramCallback, _callback);

    }

    /**
     * Returns current air quality conditions - Given City and/or State, Country.
     * Returns current air quality conditions.
     * @param city City search.. Example - &amp;city&#x3D;Raleigh,NC or &amp;city&#x3D;Berlin,DE or city&#x3D;Paris&amp;country&#x3D;FR (required)
     * @param country Country Code (2 letter). (required)
     * @param key Your registered API key. (required)
     * @param state Full name of state. (optional)
     * @param paramCallback Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
     * @return AQCurrentGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public AQCurrentGroup currentAirqualitycitycitycountrycountryGet(String city, String country, String key, String state, String paramCallback) throws ApiException {
        ApiResponse<AQCurrentGroup> localVarResp = currentAirqualitycitycitycountrycountryGetWithHttpInfo(city, country, key, state, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Returns current air quality conditions - Given City and/or State, Country.
     * Returns current air quality conditions.
     * @param city City search.. Example - &amp;city&#x3D;Raleigh,NC or &amp;city&#x3D;Berlin,DE or city&#x3D;Paris&amp;country&#x3D;FR (required)
     * @param country Country Code (2 letter). (required)
     * @param key Your registered API key. (required)
     * @param state Full name of state. (optional)
     * @param paramCallback Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
     * @return ApiResponse&lt;AQCurrentGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AQCurrentGroup> currentAirqualitycitycitycountrycountryGetWithHttpInfo(String city, String country, String key, String state, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = currentAirqualitycitycitycountrycountryGetValidateBeforeCall(city, country, key, state, paramCallback, null);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns current air quality conditions - Given City and/or State, Country. (asynchronously)
     * Returns current air quality conditions.
     * @param city City search.. Example - &amp;city&#x3D;Raleigh,NC or &amp;city&#x3D;Berlin,DE or city&#x3D;Paris&amp;country&#x3D;FR (required)
     * @param country Country Code (2 letter). (required)
     * @param key Your registered API key. (required)
     * @param state Full name of state. (optional)
     * @param paramCallback Wraps return in jsonp callback. Example: callback&#x3D;func (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitycitycitycountrycountryGetAsync(String city, String country, String key, String state, String paramCallback, final ApiCallback<AQCurrentGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentAirqualitycitycitycountrycountryGetValidateBeforeCall(city, country, key, state, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentAirqualitylatlatlonlonGet
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitylatlatlonlonGetCall(Double lat, Double lon, String key, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/current/airquality?lat={lat}&lon={lon}"
            .replace("{" + "lat" + "}", localVarApiClient.escapeString(lat.toString()))
            .replace("{" + "lon" + "}", localVarApiClient.escapeString(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentAirqualitylatlatlonlonGetValidateBeforeCall(Double lat, Double lon, String key, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling currentAirqualitylatlatlonlonGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling currentAirqualitylatlatlonlonGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling currentAirqualitylatlatlonlonGet(Async)");
        }

        return currentAirqualitylatlatlonlonGetCall(lat, lon, key, paramCallback, _callback);

    }

    /**
     * Returns current air quality conditions - Given a lat/lon.
     * Returns current air quality conditions.
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @return AQCurrentGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public AQCurrentGroup currentAirqualitylatlatlonlonGet(Double lat, Double lon, String key, String paramCallback) throws ApiException {
        ApiResponse<AQCurrentGroup> localVarResp = currentAirqualitylatlatlonlonGetWithHttpInfo(lat, lon, key, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Returns current air quality conditions - Given a lat/lon.
     * Returns current air quality conditions.
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @return ApiResponse&lt;AQCurrentGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AQCurrentGroup> currentAirqualitylatlatlonlonGetWithHttpInfo(Double lat, Double lon, String key, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = currentAirqualitylatlatlonlonGetValidateBeforeCall(lat, lon, key, paramCallback, null);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns current air quality conditions - Given a lat/lon. (asynchronously)
     * Returns current air quality conditions.
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param key Your registered API key. (required)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitylatlatlonlonGetAsync(Double lat, Double lon, String key, String paramCallback, final ApiCallback<AQCurrentGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentAirqualitylatlatlonlonGetValidateBeforeCall(lat, lon, key, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentAirqualitypostalCodepostalCodeGet
     * @param postalCode Postal Code. Example: 28546 (required)
     * @param key Your registered API key. (required)
     * @param country Country Code (2 letter). (optional)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitypostalCodepostalCodeGetCall(Integer postalCode, String key, String country, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/current/airquality?postal_code={postal_code}"
            .replace("{" + "postal_code" + "}", localVarApiClient.escapeString(postalCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentAirqualitypostalCodepostalCodeGetValidateBeforeCall(Integer postalCode, String key, String country, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postalCode' is set
        if (postalCode == null) {
            throw new ApiException("Missing the required parameter 'postalCode' when calling currentAirqualitypostalCodepostalCodeGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling currentAirqualitypostalCodepostalCodeGet(Async)");
        }

        return currentAirqualitypostalCodepostalCodeGetCall(postalCode, key, country, paramCallback, _callback);

    }

    /**
     * Returns current air quality conditions - Given a Postal Code.
     * Returns current air quality conditions.
     * @param postalCode Postal Code. Example: 28546 (required)
     * @param key Your registered API key. (required)
     * @param country Country Code (2 letter). (optional)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @return AQCurrentGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public AQCurrentGroup currentAirqualitypostalCodepostalCodeGet(Integer postalCode, String key, String country, String paramCallback) throws ApiException {
        ApiResponse<AQCurrentGroup> localVarResp = currentAirqualitypostalCodepostalCodeGetWithHttpInfo(postalCode, key, country, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Returns current air quality conditions - Given a Postal Code.
     * Returns current air quality conditions.
     * @param postalCode Postal Code. Example: 28546 (required)
     * @param key Your registered API key. (required)
     * @param country Country Code (2 letter). (optional)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @return ApiResponse&lt;AQCurrentGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AQCurrentGroup> currentAirqualitypostalCodepostalCodeGetWithHttpInfo(Integer postalCode, String key, String country, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = currentAirqualitypostalCodepostalCodeGetValidateBeforeCall(postalCode, key, country, paramCallback, null);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns current air quality conditions - Given a Postal Code. (asynchronously)
     * Returns current air quality conditions.
     * @param postalCode Postal Code. Example: 28546 (required)
     * @param key Your registered API key. (required)
     * @param country Country Code (2 letter). (optional)
     * @param paramCallback Wraps return in jsonp callback. Example - callback&#x3D;func (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current air quality conditions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> No Data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentAirqualitypostalCodepostalCodeGetAsync(Integer postalCode, String key, String country, String paramCallback, final ApiCallback<AQCurrentGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentAirqualitypostalCodepostalCodeGetValidateBeforeCall(postalCode, key, country, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<AQCurrentGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
