/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WeatherAlertGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.635462-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WeatherAlertGroup {
  public static final String SERIALIZED_NAME_ALERTS = "alerts";
  @SerializedName(SERIALIZED_NAME_ALERTS)
  private List<String> alerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EFFECTIVE_LOCAL = "effective_local";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_LOCAL)
  private String effectiveLocal;

  public static final String SERIALIZED_NAME_EFFECTIVE_UTC = "effective_utc";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UTC)
  private String effectiveUtc;

  public static final String SERIALIZED_NAME_EXPIRES_LOCAL = "expires_local";
  @SerializedName(SERIALIZED_NAME_EXPIRES_LOCAL)
  private String expiresLocal;

  public static final String SERIALIZED_NAME_EXPIRES_UTC = "expires_utc";
  @SerializedName(SERIALIZED_NAME_EXPIRES_UTC)
  private String expiresUtc;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public WeatherAlertGroup() {
  }

  public WeatherAlertGroup alerts(List<String> alerts) {
    this.alerts = alerts;
    return this;
  }

  public WeatherAlertGroup addAlertsItem(String alertsItem) {
    if (this.alerts == null) {
      this.alerts = new ArrayList<>();
    }
    this.alerts.add(alertsItem);
    return this;
  }

  /**
   * Get alerts
   * @return alerts
   */
  @javax.annotation.Nullable
  public List<String> getAlerts() {
    return alerts;
  }

  public void setAlerts(List<String> alerts) {
    this.alerts = alerts;
  }


  public WeatherAlertGroup description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Full description of weather alert
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WeatherAlertGroup effectiveLocal(String effectiveLocal) {
    this.effectiveLocal = effectiveLocal;
    return this;
  }

  /**
   * Issued time local
   * @return effectiveLocal
   */
  @javax.annotation.Nullable
  public String getEffectiveLocal() {
    return effectiveLocal;
  }

  public void setEffectiveLocal(String effectiveLocal) {
    this.effectiveLocal = effectiveLocal;
  }


  public WeatherAlertGroup effectiveUtc(String effectiveUtc) {
    this.effectiveUtc = effectiveUtc;
    return this;
  }

  /**
   * Issued time UTC
   * @return effectiveUtc
   */
  @javax.annotation.Nullable
  public String getEffectiveUtc() {
    return effectiveUtc;
  }

  public void setEffectiveUtc(String effectiveUtc) {
    this.effectiveUtc = effectiveUtc;
  }


  public WeatherAlertGroup expiresLocal(String expiresLocal) {
    this.expiresLocal = expiresLocal;
    return this;
  }

  /**
   * Expiration time local
   * @return expiresLocal
   */
  @javax.annotation.Nullable
  public String getExpiresLocal() {
    return expiresLocal;
  }

  public void setExpiresLocal(String expiresLocal) {
    this.expiresLocal = expiresLocal;
  }


  public WeatherAlertGroup expiresUtc(String expiresUtc) {
    this.expiresUtc = expiresUtc;
    return this;
  }

  /**
   * Expiration time UTC
   * @return expiresUtc
   */
  @javax.annotation.Nullable
  public String getExpiresUtc() {
    return expiresUtc;
  }

  public void setExpiresUtc(String expiresUtc) {
    this.expiresUtc = expiresUtc;
  }


  public WeatherAlertGroup severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Severity of weather. (Advisory | Watch | Warning)
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public WeatherAlertGroup title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Brief description of weather alert
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public WeatherAlertGroup uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI to weather alert
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WeatherAlertGroup weatherAlertGroup = (WeatherAlertGroup) o;
    return Objects.equals(this.alerts, weatherAlertGroup.alerts) &&
        Objects.equals(this.description, weatherAlertGroup.description) &&
        Objects.equals(this.effectiveLocal, weatherAlertGroup.effectiveLocal) &&
        Objects.equals(this.effectiveUtc, weatherAlertGroup.effectiveUtc) &&
        Objects.equals(this.expiresLocal, weatherAlertGroup.expiresLocal) &&
        Objects.equals(this.expiresUtc, weatherAlertGroup.expiresUtc) &&
        Objects.equals(this.severity, weatherAlertGroup.severity) &&
        Objects.equals(this.title, weatherAlertGroup.title) &&
        Objects.equals(this.uri, weatherAlertGroup.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alerts, description, effectiveLocal, effectiveUtc, expiresLocal, expiresUtc, severity, title, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WeatherAlertGroup {\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    effectiveLocal: ").append(toIndentedString(effectiveLocal)).append("\n");
    sb.append("    effectiveUtc: ").append(toIndentedString(effectiveUtc)).append("\n");
    sb.append("    expiresLocal: ").append(toIndentedString(expiresLocal)).append("\n");
    sb.append("    expiresUtc: ").append(toIndentedString(expiresUtc)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alerts");
    openapiFields.add("description");
    openapiFields.add("effective_local");
    openapiFields.add("effective_utc");
    openapiFields.add("expires_local");
    openapiFields.add("expires_utc");
    openapiFields.add("severity");
    openapiFields.add("title");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WeatherAlertGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WeatherAlertGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WeatherAlertGroup is not found in the empty JSON string", WeatherAlertGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WeatherAlertGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WeatherAlertGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alerts") != null && !jsonObj.get("alerts").isJsonNull() && !jsonObj.get("alerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alerts` to be an array in the JSON string but got `%s`", jsonObj.get("alerts").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("effective_local") != null && !jsonObj.get("effective_local").isJsonNull()) && !jsonObj.get("effective_local").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_local` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_local").toString()));
      }
      if ((jsonObj.get("effective_utc") != null && !jsonObj.get("effective_utc").isJsonNull()) && !jsonObj.get("effective_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_utc").toString()));
      }
      if ((jsonObj.get("expires_local") != null && !jsonObj.get("expires_local").isJsonNull()) && !jsonObj.get("expires_local").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_local` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_local").toString()));
      }
      if ((jsonObj.get("expires_utc") != null && !jsonObj.get("expires_utc").isJsonNull()) && !jsonObj.get("expires_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_utc").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WeatherAlertGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WeatherAlertGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WeatherAlertGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WeatherAlertGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<WeatherAlertGroup>() {
           @Override
           public void write(JsonWriter out, WeatherAlertGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WeatherAlertGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WeatherAlertGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WeatherAlertGroup
   * @throws IOException if the JSON string is invalid with respect to WeatherAlertGroup
   */
  public static WeatherAlertGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WeatherAlertGroup.class);
  }

  /**
   * Convert an instance of WeatherAlertGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

