/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnergyObsSeries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.635462-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnergyObsSeries {
  public static final String SERIALIZED_NAME_CDD = "cdd";
  @SerializedName(SERIALIZED_NAME_CDD)
  private BigDecimal cdd;

  public static final String SERIALIZED_NAME_CLOUDS = "clouds";
  @SerializedName(SERIALIZED_NAME_CLOUDS)
  private Integer clouds;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DEWPT = "dewpt";
  @SerializedName(SERIALIZED_NAME_DEWPT)
  private BigDecimal dewpt;

  public static final String SERIALIZED_NAME_HDD = "hdd";
  @SerializedName(SERIALIZED_NAME_HDD)
  private BigDecimal hdd;

  public static final String SERIALIZED_NAME_PRECIP = "precip";
  @SerializedName(SERIALIZED_NAME_PRECIP)
  private BigDecimal precip;

  public static final String SERIALIZED_NAME_RH = "rh";
  @SerializedName(SERIALIZED_NAME_RH)
  private Integer rh;

  public static final String SERIALIZED_NAME_SNOW = "snow";
  @SerializedName(SERIALIZED_NAME_SNOW)
  private BigDecimal snow;

  public static final String SERIALIZED_NAME_SUN_HOURS = "sun_hours";
  @SerializedName(SERIALIZED_NAME_SUN_HOURS)
  private BigDecimal sunHours;

  public static final String SERIALIZED_NAME_T_DHI = "t_dhi";
  @SerializedName(SERIALIZED_NAME_T_DHI)
  private BigDecimal tDhi;

  public static final String SERIALIZED_NAME_T_DNI = "t_dni";
  @SerializedName(SERIALIZED_NAME_T_DNI)
  private BigDecimal tDni;

  public static final String SERIALIZED_NAME_T_GHI = "t_ghi";
  @SerializedName(SERIALIZED_NAME_T_GHI)
  private BigDecimal tGhi;

  public static final String SERIALIZED_NAME_TEMP = "temp";
  @SerializedName(SERIALIZED_NAME_TEMP)
  private BigDecimal temp;

  public static final String SERIALIZED_NAME_WIND_DIR = "wind_dir";
  @SerializedName(SERIALIZED_NAME_WIND_DIR)
  private Integer windDir;

  public static final String SERIALIZED_NAME_WIND_SPD = "wind_spd";
  @SerializedName(SERIALIZED_NAME_WIND_SPD)
  private BigDecimal windSpd;

  public EnergyObsSeries() {
  }

  public EnergyObsSeries cdd(BigDecimal cdd) {
    this.cdd = cdd;
    return this;
  }

  /**
   * Cooling degree days
   * @return cdd
   */
  @javax.annotation.Nullable
  public BigDecimal getCdd() {
    return cdd;
  }

  public void setCdd(BigDecimal cdd) {
    this.cdd = cdd;
  }


  public EnergyObsSeries clouds(Integer clouds) {
    this.clouds = clouds;
    return this;
  }

  /**
   * Average cloud cover (%)
   * @return clouds
   */
  @javax.annotation.Nullable
  public Integer getClouds() {
    return clouds;
  }

  public void setClouds(Integer clouds) {
    this.clouds = clouds;
  }


  public EnergyObsSeries date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public EnergyObsSeries dewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
    return this;
  }

  /**
   * Average dew point temperature - Default (C)
   * @return dewpt
   */
  @javax.annotation.Nullable
  public BigDecimal getDewpt() {
    return dewpt;
  }

  public void setDewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
  }


  public EnergyObsSeries hdd(BigDecimal hdd) {
    this.hdd = hdd;
    return this;
  }

  /**
   * Heating degree days
   * @return hdd
   */
  @javax.annotation.Nullable
  public BigDecimal getHdd() {
    return hdd;
  }

  public void setHdd(BigDecimal hdd) {
    this.hdd = hdd;
  }


  public EnergyObsSeries precip(BigDecimal precip) {
    this.precip = precip;
    return this;
  }

  /**
   * Total precipitation in period - Default (mm)
   * @return precip
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecip() {
    return precip;
  }

  public void setPrecip(BigDecimal precip) {
    this.precip = precip;
  }


  public EnergyObsSeries rh(Integer rh) {
    this.rh = rh;
    return this;
  }

  /**
   * Average Relative humidity (%)
   * @return rh
   */
  @javax.annotation.Nullable
  public Integer getRh() {
    return rh;
  }

  public void setRh(Integer rh) {
    this.rh = rh;
  }


  public EnergyObsSeries snow(BigDecimal snow) {
    this.snow = snow;
    return this;
  }

  /**
   * Total snowfall in period - Default (mm)
   * @return snow
   */
  @javax.annotation.Nullable
  public BigDecimal getSnow() {
    return snow;
  }

  public void setSnow(BigDecimal snow) {
    this.snow = snow;
  }


  public EnergyObsSeries sunHours(BigDecimal sunHours) {
    this.sunHours = sunHours;
    return this;
  }

  /**
   * Average number of daily sun hours - # hours where Solar GHI &gt; 1000 W/m^2
   * @return sunHours
   */
  @javax.annotation.Nullable
  public BigDecimal getSunHours() {
    return sunHours;
  }

  public void setSunHours(BigDecimal sunHours) {
    this.sunHours = sunHours;
  }


  public EnergyObsSeries tDhi(BigDecimal tDhi) {
    this.tDhi = tDhi;
    return this;
  }

  /**
   * Total diffuse horizontal solar irradiance (W/m^2)
   * @return tDhi
   */
  @javax.annotation.Nullable
  public BigDecimal gettDhi() {
    return tDhi;
  }

  public void settDhi(BigDecimal tDhi) {
    this.tDhi = tDhi;
  }


  public EnergyObsSeries tDni(BigDecimal tDni) {
    this.tDni = tDni;
    return this;
  }

  /**
   * Total direct normal solar irradiance (W/m^2)
   * @return tDni
   */
  @javax.annotation.Nullable
  public BigDecimal gettDni() {
    return tDni;
  }

  public void settDni(BigDecimal tDni) {
    this.tDni = tDni;
  }


  public EnergyObsSeries tGhi(BigDecimal tGhi) {
    this.tGhi = tGhi;
    return this;
  }

  /**
   * Total global horizontal solar irradiance (W/m^2)
   * @return tGhi
   */
  @javax.annotation.Nullable
  public BigDecimal gettGhi() {
    return tGhi;
  }

  public void settGhi(BigDecimal tGhi) {
    this.tGhi = tGhi;
  }


  public EnergyObsSeries temp(BigDecimal temp) {
    this.temp = temp;
    return this;
  }

  /**
   * Average temperature - Default (C)
   * @return temp
   */
  @javax.annotation.Nullable
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(BigDecimal temp) {
    this.temp = temp;
  }


  public EnergyObsSeries windDir(Integer windDir) {
    this.windDir = windDir;
    return this;
  }

  /**
   * Average wind direction (Degrees)
   * @return windDir
   */
  @javax.annotation.Nullable
  public Integer getWindDir() {
    return windDir;
  }

  public void setWindDir(Integer windDir) {
    this.windDir = windDir;
  }


  public EnergyObsSeries windSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
    return this;
  }

  /**
   * Average wind speed - Default (m/s)
   * @return windSpd
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpd() {
    return windSpd;
  }

  public void setWindSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnergyObsSeries energyObsSeries = (EnergyObsSeries) o;
    return Objects.equals(this.cdd, energyObsSeries.cdd) &&
        Objects.equals(this.clouds, energyObsSeries.clouds) &&
        Objects.equals(this.date, energyObsSeries.date) &&
        Objects.equals(this.dewpt, energyObsSeries.dewpt) &&
        Objects.equals(this.hdd, energyObsSeries.hdd) &&
        Objects.equals(this.precip, energyObsSeries.precip) &&
        Objects.equals(this.rh, energyObsSeries.rh) &&
        Objects.equals(this.snow, energyObsSeries.snow) &&
        Objects.equals(this.sunHours, energyObsSeries.sunHours) &&
        Objects.equals(this.tDhi, energyObsSeries.tDhi) &&
        Objects.equals(this.tDni, energyObsSeries.tDni) &&
        Objects.equals(this.tGhi, energyObsSeries.tGhi) &&
        Objects.equals(this.temp, energyObsSeries.temp) &&
        Objects.equals(this.windDir, energyObsSeries.windDir) &&
        Objects.equals(this.windSpd, energyObsSeries.windSpd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdd, clouds, date, dewpt, hdd, precip, rh, snow, sunHours, tDhi, tDni, tGhi, temp, windDir, windSpd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnergyObsSeries {\n");
    sb.append("    cdd: ").append(toIndentedString(cdd)).append("\n");
    sb.append("    clouds: ").append(toIndentedString(clouds)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dewpt: ").append(toIndentedString(dewpt)).append("\n");
    sb.append("    hdd: ").append(toIndentedString(hdd)).append("\n");
    sb.append("    precip: ").append(toIndentedString(precip)).append("\n");
    sb.append("    rh: ").append(toIndentedString(rh)).append("\n");
    sb.append("    snow: ").append(toIndentedString(snow)).append("\n");
    sb.append("    sunHours: ").append(toIndentedString(sunHours)).append("\n");
    sb.append("    tDhi: ").append(toIndentedString(tDhi)).append("\n");
    sb.append("    tDni: ").append(toIndentedString(tDni)).append("\n");
    sb.append("    tGhi: ").append(toIndentedString(tGhi)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windSpd: ").append(toIndentedString(windSpd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdd");
    openapiFields.add("clouds");
    openapiFields.add("date");
    openapiFields.add("dewpt");
    openapiFields.add("hdd");
    openapiFields.add("precip");
    openapiFields.add("rh");
    openapiFields.add("snow");
    openapiFields.add("sun_hours");
    openapiFields.add("t_dhi");
    openapiFields.add("t_dni");
    openapiFields.add("t_ghi");
    openapiFields.add("temp");
    openapiFields.add("wind_dir");
    openapiFields.add("wind_spd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnergyObsSeries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnergyObsSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnergyObsSeries is not found in the empty JSON string", EnergyObsSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnergyObsSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnergyObsSeries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnergyObsSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnergyObsSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnergyObsSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnergyObsSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<EnergyObsSeries>() {
           @Override
           public void write(JsonWriter out, EnergyObsSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnergyObsSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnergyObsSeries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnergyObsSeries
   * @throws IOException if the JSON string is invalid with respect to EnergyObsSeries
   */
  public static EnergyObsSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnergyObsSeries.class);
  }

  /**
   * Convert an instance of EnergyObsSeries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

