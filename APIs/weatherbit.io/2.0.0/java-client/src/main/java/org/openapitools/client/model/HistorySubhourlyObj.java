/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.HistoryObjWeather;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistorySubhourlyObj
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.635462-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistorySubhourlyObj {
  public static final String SERIALIZED_NAME_APP_TEMP = "app_temp";
  @SerializedName(SERIALIZED_NAME_APP_TEMP)
  private BigDecimal appTemp;

  public static final String SERIALIZED_NAME_AZIMUTH = "azimuth";
  @SerializedName(SERIALIZED_NAME_AZIMUTH)
  private BigDecimal azimuth;

  public static final String SERIALIZED_NAME_CLOUDS = "clouds";
  @SerializedName(SERIALIZED_NAME_CLOUDS)
  private Integer clouds;

  public static final String SERIALIZED_NAME_DEWPT = "dewpt";
  @SerializedName(SERIALIZED_NAME_DEWPT)
  private Integer dewpt;

  public static final String SERIALIZED_NAME_DHI = "dhi";
  @SerializedName(SERIALIZED_NAME_DHI)
  private BigDecimal dhi;

  public static final String SERIALIZED_NAME_DNI = "dni";
  @SerializedName(SERIALIZED_NAME_DNI)
  private BigDecimal dni;

  public static final String SERIALIZED_NAME_ELEV_ANGLE = "elev_angle";
  @SerializedName(SERIALIZED_NAME_ELEV_ANGLE)
  private BigDecimal elevAngle;

  public static final String SERIALIZED_NAME_GHI = "ghi";
  @SerializedName(SERIALIZED_NAME_GHI)
  private BigDecimal ghi;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  public static final String SERIALIZED_NAME_PRECIP_RATE = "precip_rate";
  @SerializedName(SERIALIZED_NAME_PRECIP_RATE)
  private BigDecimal precipRate;

  public static final String SERIALIZED_NAME_PRES = "pres";
  @SerializedName(SERIALIZED_NAME_PRES)
  private BigDecimal pres;

  public static final String SERIALIZED_NAME_REVISION_STATUS = "revision_status";
  @SerializedName(SERIALIZED_NAME_REVISION_STATUS)
  private String revisionStatus;

  public static final String SERIALIZED_NAME_RH = "rh";
  @SerializedName(SERIALIZED_NAME_RH)
  private Integer rh;

  public static final String SERIALIZED_NAME_SLP = "slp";
  @SerializedName(SERIALIZED_NAME_SLP)
  private BigDecimal slp;

  public static final String SERIALIZED_NAME_SNOW_RATE = "snow_rate";
  @SerializedName(SERIALIZED_NAME_SNOW_RATE)
  private BigDecimal snowRate;

  public static final String SERIALIZED_NAME_SOLAR_RAD = "solar_rad";
  @SerializedName(SERIALIZED_NAME_SOLAR_RAD)
  private BigDecimal solarRad;

  public static final String SERIALIZED_NAME_TEMP = "temp";
  @SerializedName(SERIALIZED_NAME_TEMP)
  private BigDecimal temp;

  public static final String SERIALIZED_NAME_TIMESTAMP_LOCAL = "timestamp_local";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_LOCAL)
  private String timestampLocal;

  public static final String SERIALIZED_NAME_TIMESTAMP_UTC = "timestamp_utc";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_UTC)
  private String timestampUtc;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private BigDecimal ts;

  public static final String SERIALIZED_NAME_UV = "uv";
  @SerializedName(SERIALIZED_NAME_UV)
  private BigDecimal uv;

  public static final String SERIALIZED_NAME_VIS = "vis";
  @SerializedName(SERIALIZED_NAME_VIS)
  private BigDecimal vis;

  public static final String SERIALIZED_NAME_WEATHER = "weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  private HistoryObjWeather weather;

  public static final String SERIALIZED_NAME_WIND_DIR = "wind_dir";
  @SerializedName(SERIALIZED_NAME_WIND_DIR)
  private Integer windDir;

  public static final String SERIALIZED_NAME_WIND_GUST_SPD = "wind_gust_spd";
  @SerializedName(SERIALIZED_NAME_WIND_GUST_SPD)
  private BigDecimal windGustSpd;

  public static final String SERIALIZED_NAME_WIND_SPD = "wind_spd";
  @SerializedName(SERIALIZED_NAME_WIND_SPD)
  private BigDecimal windSpd;

  public HistorySubhourlyObj() {
  }

  public HistorySubhourlyObj appTemp(BigDecimal appTemp) {
    this.appTemp = appTemp;
    return this;
  }

  /**
   * Apparent Temperature or Wind Chill/Heat Index (Default Celcius)
   * @return appTemp
   */
  @javax.annotation.Nullable
  public BigDecimal getAppTemp() {
    return appTemp;
  }

  public void setAppTemp(BigDecimal appTemp) {
    this.appTemp = appTemp;
  }


  public HistorySubhourlyObj azimuth(BigDecimal azimuth) {
    this.azimuth = azimuth;
    return this;
  }

  /**
   * Solar azimuth angle (Degrees)
   * @return azimuth
   */
  @javax.annotation.Nullable
  public BigDecimal getAzimuth() {
    return azimuth;
  }

  public void setAzimuth(BigDecimal azimuth) {
    this.azimuth = azimuth;
  }


  public HistorySubhourlyObj clouds(Integer clouds) {
    this.clouds = clouds;
    return this;
  }

  /**
   * Cloud Cover 0-100 (%)
   * @return clouds
   */
  @javax.annotation.Nullable
  public Integer getClouds() {
    return clouds;
  }

  public void setClouds(Integer clouds) {
    this.clouds = clouds;
  }


  public HistorySubhourlyObj dewpt(Integer dewpt) {
    this.dewpt = dewpt;
    return this;
  }

  /**
   * Dew point (Default Celcius)
   * @return dewpt
   */
  @javax.annotation.Nullable
  public Integer getDewpt() {
    return dewpt;
  }

  public void setDewpt(Integer dewpt) {
    this.dewpt = dewpt;
  }


  public HistorySubhourlyObj dhi(BigDecimal dhi) {
    this.dhi = dhi;
    return this;
  }

  /**
   * Diffuse normal solar irradiance (W/m^2)
   * @return dhi
   */
  @javax.annotation.Nullable
  public BigDecimal getDhi() {
    return dhi;
  }

  public void setDhi(BigDecimal dhi) {
    this.dhi = dhi;
  }


  public HistorySubhourlyObj dni(BigDecimal dni) {
    this.dni = dni;
    return this;
  }

  /**
   * Direct normal solar irradiance (W/m^2)
   * @return dni
   */
  @javax.annotation.Nullable
  public BigDecimal getDni() {
    return dni;
  }

  public void setDni(BigDecimal dni) {
    this.dni = dni;
  }


  public HistorySubhourlyObj elevAngle(BigDecimal elevAngle) {
    this.elevAngle = elevAngle;
    return this;
  }

  /**
   * Solar elevation angle (Degrees)
   * @return elevAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getElevAngle() {
    return elevAngle;
  }

  public void setElevAngle(BigDecimal elevAngle) {
    this.elevAngle = elevAngle;
  }


  public HistorySubhourlyObj ghi(BigDecimal ghi) {
    this.ghi = ghi;
    return this;
  }

  /**
   * Global horizontal solar irradiance (W/m^2)
   * @return ghi
   */
  @javax.annotation.Nullable
  public BigDecimal getGhi() {
    return ghi;
  }

  public void setGhi(BigDecimal ghi) {
    this.ghi = ghi;
  }


  public HistorySubhourlyObj pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Part of the day (d &#x3D; day, n &#x3D; night)
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  public HistorySubhourlyObj precipRate(BigDecimal precipRate) {
    this.precipRate = precipRate;
    return this;
  }

  /**
   * Liquid equivalent precipitation rate - Default (mm/hr)
   * @return precipRate
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipRate() {
    return precipRate;
  }

  public void setPrecipRate(BigDecimal precipRate) {
    this.precipRate = precipRate;
  }


  public HistorySubhourlyObj pres(BigDecimal pres) {
    this.pres = pres;
    return this;
  }

  /**
   * Pressure (mb)
   * @return pres
   */
  @javax.annotation.Nullable
  public BigDecimal getPres() {
    return pres;
  }

  public void setPres(BigDecimal pres) {
    this.pres = pres;
  }


  public HistorySubhourlyObj revisionStatus(String revisionStatus) {
    this.revisionStatus = revisionStatus;
    return this;
  }

  /**
   * Data revision status (interim or final)
   * @return revisionStatus
   */
  @javax.annotation.Nullable
  public String getRevisionStatus() {
    return revisionStatus;
  }

  public void setRevisionStatus(String revisionStatus) {
    this.revisionStatus = revisionStatus;
  }


  public HistorySubhourlyObj rh(Integer rh) {
    this.rh = rh;
    return this;
  }

  /**
   * Relative Humidity as a percentage (%)
   * @return rh
   */
  @javax.annotation.Nullable
  public Integer getRh() {
    return rh;
  }

  public void setRh(Integer rh) {
    this.rh = rh;
  }


  public HistorySubhourlyObj slp(BigDecimal slp) {
    this.slp = slp;
    return this;
  }

  /**
   * Sea level pressure (mb)
   * @return slp
   */
  @javax.annotation.Nullable
  public BigDecimal getSlp() {
    return slp;
  }

  public void setSlp(BigDecimal slp) {
    this.slp = slp;
  }


  public HistorySubhourlyObj snowRate(BigDecimal snowRate) {
    this.snowRate = snowRate;
    return this;
  }

  /**
   * Snowfall Rate - Default (mm/hr)
   * @return snowRate
   */
  @javax.annotation.Nullable
  public BigDecimal getSnowRate() {
    return snowRate;
  }

  public void setSnowRate(BigDecimal snowRate) {
    this.snowRate = snowRate;
  }


  public HistorySubhourlyObj solarRad(BigDecimal solarRad) {
    this.solarRad = solarRad;
    return this;
  }

  /**
   * Estimated solar radiation (W/m^2)
   * @return solarRad
   */
  @javax.annotation.Nullable
  public BigDecimal getSolarRad() {
    return solarRad;
  }

  public void setSolarRad(BigDecimal solarRad) {
    this.solarRad = solarRad;
  }


  public HistorySubhourlyObj temp(BigDecimal temp) {
    this.temp = temp;
    return this;
  }

  /**
   * Temperature (Default Celcius)
   * @return temp
   */
  @javax.annotation.Nullable
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(BigDecimal temp) {
    this.temp = temp;
  }


  public HistorySubhourlyObj timestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
    return this;
  }

  /**
   * Timestamp in local time
   * @return timestampLocal
   */
  @javax.annotation.Nullable
  public String getTimestampLocal() {
    return timestampLocal;
  }

  public void setTimestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
  }


  public HistorySubhourlyObj timestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
    return this;
  }

  /**
   * Timestamp UTC
   * @return timestampUtc
   */
  @javax.annotation.Nullable
  public String getTimestampUtc() {
    return timestampUtc;
  }

  public void setTimestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
  }


  public HistorySubhourlyObj ts(BigDecimal ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Unix Timestamp
   * @return ts
   */
  @javax.annotation.Nullable
  public BigDecimal getTs() {
    return ts;
  }

  public void setTs(BigDecimal ts) {
    this.ts = ts;
  }


  public HistorySubhourlyObj uv(BigDecimal uv) {
    this.uv = uv;
    return this;
  }

  /**
   * UV Index (1-11+)
   * @return uv
   */
  @javax.annotation.Nullable
  public BigDecimal getUv() {
    return uv;
  }

  public void setUv(BigDecimal uv) {
    this.uv = uv;
  }


  public HistorySubhourlyObj vis(BigDecimal vis) {
    this.vis = vis;
    return this;
  }

  /**
   * Visibility (KM)
   * @return vis
   */
  @javax.annotation.Nullable
  public BigDecimal getVis() {
    return vis;
  }

  public void setVis(BigDecimal vis) {
    this.vis = vis;
  }


  public HistorySubhourlyObj weather(HistoryObjWeather weather) {
    this.weather = weather;
    return this;
  }

  /**
   * Get weather
   * @return weather
   */
  @javax.annotation.Nullable
  public HistoryObjWeather getWeather() {
    return weather;
  }

  public void setWeather(HistoryObjWeather weather) {
    this.weather = weather;
  }


  public HistorySubhourlyObj windDir(Integer windDir) {
    this.windDir = windDir;
    return this;
  }

  /**
   * Wind direction (Degrees)
   * @return windDir
   */
  @javax.annotation.Nullable
  public Integer getWindDir() {
    return windDir;
  }

  public void setWindDir(Integer windDir) {
    this.windDir = windDir;
  }


  public HistorySubhourlyObj windGustSpd(BigDecimal windGustSpd) {
    this.windGustSpd = windGustSpd;
    return this;
  }

  /**
   * Wind Gust Speed - Default (m/s)
   * @return windGustSpd
   */
  @javax.annotation.Nullable
  public BigDecimal getWindGustSpd() {
    return windGustSpd;
  }

  public void setWindGustSpd(BigDecimal windGustSpd) {
    this.windGustSpd = windGustSpd;
  }


  public HistorySubhourlyObj windSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
    return this;
  }

  /**
   * Wind Speed (Default m/s)
   * @return windSpd
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpd() {
    return windSpd;
  }

  public void setWindSpd(BigDecimal windSpd) {
    this.windSpd = windSpd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistorySubhourlyObj historySubhourlyObj = (HistorySubhourlyObj) o;
    return Objects.equals(this.appTemp, historySubhourlyObj.appTemp) &&
        Objects.equals(this.azimuth, historySubhourlyObj.azimuth) &&
        Objects.equals(this.clouds, historySubhourlyObj.clouds) &&
        Objects.equals(this.dewpt, historySubhourlyObj.dewpt) &&
        Objects.equals(this.dhi, historySubhourlyObj.dhi) &&
        Objects.equals(this.dni, historySubhourlyObj.dni) &&
        Objects.equals(this.elevAngle, historySubhourlyObj.elevAngle) &&
        Objects.equals(this.ghi, historySubhourlyObj.ghi) &&
        Objects.equals(this.pod, historySubhourlyObj.pod) &&
        Objects.equals(this.precipRate, historySubhourlyObj.precipRate) &&
        Objects.equals(this.pres, historySubhourlyObj.pres) &&
        Objects.equals(this.revisionStatus, historySubhourlyObj.revisionStatus) &&
        Objects.equals(this.rh, historySubhourlyObj.rh) &&
        Objects.equals(this.slp, historySubhourlyObj.slp) &&
        Objects.equals(this.snowRate, historySubhourlyObj.snowRate) &&
        Objects.equals(this.solarRad, historySubhourlyObj.solarRad) &&
        Objects.equals(this.temp, historySubhourlyObj.temp) &&
        Objects.equals(this.timestampLocal, historySubhourlyObj.timestampLocal) &&
        Objects.equals(this.timestampUtc, historySubhourlyObj.timestampUtc) &&
        Objects.equals(this.ts, historySubhourlyObj.ts) &&
        Objects.equals(this.uv, historySubhourlyObj.uv) &&
        Objects.equals(this.vis, historySubhourlyObj.vis) &&
        Objects.equals(this.weather, historySubhourlyObj.weather) &&
        Objects.equals(this.windDir, historySubhourlyObj.windDir) &&
        Objects.equals(this.windGustSpd, historySubhourlyObj.windGustSpd) &&
        Objects.equals(this.windSpd, historySubhourlyObj.windSpd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appTemp, azimuth, clouds, dewpt, dhi, dni, elevAngle, ghi, pod, precipRate, pres, revisionStatus, rh, slp, snowRate, solarRad, temp, timestampLocal, timestampUtc, ts, uv, vis, weather, windDir, windGustSpd, windSpd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistorySubhourlyObj {\n");
    sb.append("    appTemp: ").append(toIndentedString(appTemp)).append("\n");
    sb.append("    azimuth: ").append(toIndentedString(azimuth)).append("\n");
    sb.append("    clouds: ").append(toIndentedString(clouds)).append("\n");
    sb.append("    dewpt: ").append(toIndentedString(dewpt)).append("\n");
    sb.append("    dhi: ").append(toIndentedString(dhi)).append("\n");
    sb.append("    dni: ").append(toIndentedString(dni)).append("\n");
    sb.append("    elevAngle: ").append(toIndentedString(elevAngle)).append("\n");
    sb.append("    ghi: ").append(toIndentedString(ghi)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    precipRate: ").append(toIndentedString(precipRate)).append("\n");
    sb.append("    pres: ").append(toIndentedString(pres)).append("\n");
    sb.append("    revisionStatus: ").append(toIndentedString(revisionStatus)).append("\n");
    sb.append("    rh: ").append(toIndentedString(rh)).append("\n");
    sb.append("    slp: ").append(toIndentedString(slp)).append("\n");
    sb.append("    snowRate: ").append(toIndentedString(snowRate)).append("\n");
    sb.append("    solarRad: ").append(toIndentedString(solarRad)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    timestampLocal: ").append(toIndentedString(timestampLocal)).append("\n");
    sb.append("    timestampUtc: ").append(toIndentedString(timestampUtc)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    uv: ").append(toIndentedString(uv)).append("\n");
    sb.append("    vis: ").append(toIndentedString(vis)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windGustSpd: ").append(toIndentedString(windGustSpd)).append("\n");
    sb.append("    windSpd: ").append(toIndentedString(windSpd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_temp");
    openapiFields.add("azimuth");
    openapiFields.add("clouds");
    openapiFields.add("dewpt");
    openapiFields.add("dhi");
    openapiFields.add("dni");
    openapiFields.add("elev_angle");
    openapiFields.add("ghi");
    openapiFields.add("pod");
    openapiFields.add("precip_rate");
    openapiFields.add("pres");
    openapiFields.add("revision_status");
    openapiFields.add("rh");
    openapiFields.add("slp");
    openapiFields.add("snow_rate");
    openapiFields.add("solar_rad");
    openapiFields.add("temp");
    openapiFields.add("timestamp_local");
    openapiFields.add("timestamp_utc");
    openapiFields.add("ts");
    openapiFields.add("uv");
    openapiFields.add("vis");
    openapiFields.add("weather");
    openapiFields.add("wind_dir");
    openapiFields.add("wind_gust_spd");
    openapiFields.add("wind_spd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistorySubhourlyObj
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistorySubhourlyObj.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistorySubhourlyObj is not found in the empty JSON string", HistorySubhourlyObj.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistorySubhourlyObj.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistorySubhourlyObj` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      if ((jsonObj.get("revision_status") != null && !jsonObj.get("revision_status").isJsonNull()) && !jsonObj.get("revision_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision_status").toString()));
      }
      if ((jsonObj.get("timestamp_local") != null && !jsonObj.get("timestamp_local").isJsonNull()) && !jsonObj.get("timestamp_local").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp_local` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp_local").toString()));
      }
      if ((jsonObj.get("timestamp_utc") != null && !jsonObj.get("timestamp_utc").isJsonNull()) && !jsonObj.get("timestamp_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp_utc").toString()));
      }
      // validate the optional field `weather`
      if (jsonObj.get("weather") != null && !jsonObj.get("weather").isJsonNull()) {
        HistoryObjWeather.validateJsonElement(jsonObj.get("weather"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistorySubhourlyObj.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistorySubhourlyObj' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistorySubhourlyObj> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistorySubhourlyObj.class));

       return (TypeAdapter<T>) new TypeAdapter<HistorySubhourlyObj>() {
           @Override
           public void write(JsonWriter out, HistorySubhourlyObj value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistorySubhourlyObj read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistorySubhourlyObj given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistorySubhourlyObj
   * @throws IOException if the JSON string is invalid with respect to HistorySubhourlyObj
   */
  public static HistorySubhourlyObj fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistorySubhourlyObj.class);
  }

  /**
   * Convert an instance of HistorySubhourlyObj to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

