/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AQHour
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.635462-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AQHour {
  public static final String SERIALIZED_NAME_AQI = "aqi";
  @SerializedName(SERIALIZED_NAME_AQI)
  private Integer aqi;

  public static final String SERIALIZED_NAME_NO2 = "no2";
  @SerializedName(SERIALIZED_NAME_NO2)
  private BigDecimal no2;

  public static final String SERIALIZED_NAME_O3 = "o3";
  @SerializedName(SERIALIZED_NAME_O3)
  private BigDecimal o3;

  public static final String SERIALIZED_NAME_PM10 = "pm10";
  @SerializedName(SERIALIZED_NAME_PM10)
  private BigDecimal pm10;

  public static final String SERIALIZED_NAME_PM25 = "pm25";
  @SerializedName(SERIALIZED_NAME_PM25)
  private BigDecimal pm25;

  public static final String SERIALIZED_NAME_SO2 = "so2";
  @SerializedName(SERIALIZED_NAME_SO2)
  private BigDecimal so2;

  public static final String SERIALIZED_NAME_TIMESTAMP_LOCAL = "timestamp_local";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_LOCAL)
  private String timestampLocal;

  public static final String SERIALIZED_NAME_TIMESTAMP_UTC = "timestamp_utc";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_UTC)
  private String timestampUtc;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private BigDecimal ts;

  public AQHour() {
  }

  public AQHour aqi(Integer aqi) {
    this.aqi = aqi;
    return this;
  }

  /**
   * Cloud cover as a percentage (%)
   * @return aqi
   */
  @javax.annotation.Nullable
  public Integer getAqi() {
    return aqi;
  }

  public void setAqi(Integer aqi) {
    this.aqi = aqi;
  }


  public AQHour no2(BigDecimal no2) {
    this.no2 = no2;
    return this;
  }

  /**
   * Concentration of NO2 (µg/m³)
   * @return no2
   */
  @javax.annotation.Nullable
  public BigDecimal getNo2() {
    return no2;
  }

  public void setNo2(BigDecimal no2) {
    this.no2 = no2;
  }


  public AQHour o3(BigDecimal o3) {
    this.o3 = o3;
    return this;
  }

  /**
   * Concentration of O3 (µg/m³)
   * @return o3
   */
  @javax.annotation.Nullable
  public BigDecimal getO3() {
    return o3;
  }

  public void setO3(BigDecimal o3) {
    this.o3 = o3;
  }


  public AQHour pm10(BigDecimal pm10) {
    this.pm10 = pm10;
    return this;
  }

  /**
   * Concentration of PM 10 (µg/m³)
   * @return pm10
   */
  @javax.annotation.Nullable
  public BigDecimal getPm10() {
    return pm10;
  }

  public void setPm10(BigDecimal pm10) {
    this.pm10 = pm10;
  }


  public AQHour pm25(BigDecimal pm25) {
    this.pm25 = pm25;
    return this;
  }

  /**
   * Concentration of PM 2.5 (µg/m³)
   * @return pm25
   */
  @javax.annotation.Nullable
  public BigDecimal getPm25() {
    return pm25;
  }

  public void setPm25(BigDecimal pm25) {
    this.pm25 = pm25;
  }


  public AQHour so2(BigDecimal so2) {
    this.so2 = so2;
    return this;
  }

  /**
   * Concentration of SO2 (µg/m³)
   * @return so2
   */
  @javax.annotation.Nullable
  public BigDecimal getSo2() {
    return so2;
  }

  public void setSo2(BigDecimal so2) {
    this.so2 = so2;
  }


  public AQHour timestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
    return this;
  }

  /**
   * Timestamp in local time
   * @return timestampLocal
   */
  @javax.annotation.Nullable
  public String getTimestampLocal() {
    return timestampLocal;
  }

  public void setTimestampLocal(String timestampLocal) {
    this.timestampLocal = timestampLocal;
  }


  public AQHour timestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
    return this;
  }

  /**
   * Timestamp UTC
   * @return timestampUtc
   */
  @javax.annotation.Nullable
  public String getTimestampUtc() {
    return timestampUtc;
  }

  public void setTimestampUtc(String timestampUtc) {
    this.timestampUtc = timestampUtc;
  }


  public AQHour ts(BigDecimal ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Unix Timestamp
   * @return ts
   */
  @javax.annotation.Nullable
  public BigDecimal getTs() {
    return ts;
  }

  public void setTs(BigDecimal ts) {
    this.ts = ts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AQHour aqHour = (AQHour) o;
    return Objects.equals(this.aqi, aqHour.aqi) &&
        Objects.equals(this.no2, aqHour.no2) &&
        Objects.equals(this.o3, aqHour.o3) &&
        Objects.equals(this.pm10, aqHour.pm10) &&
        Objects.equals(this.pm25, aqHour.pm25) &&
        Objects.equals(this.so2, aqHour.so2) &&
        Objects.equals(this.timestampLocal, aqHour.timestampLocal) &&
        Objects.equals(this.timestampUtc, aqHour.timestampUtc) &&
        Objects.equals(this.ts, aqHour.ts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aqi, no2, o3, pm10, pm25, so2, timestampLocal, timestampUtc, ts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AQHour {\n");
    sb.append("    aqi: ").append(toIndentedString(aqi)).append("\n");
    sb.append("    no2: ").append(toIndentedString(no2)).append("\n");
    sb.append("    o3: ").append(toIndentedString(o3)).append("\n");
    sb.append("    pm10: ").append(toIndentedString(pm10)).append("\n");
    sb.append("    pm25: ").append(toIndentedString(pm25)).append("\n");
    sb.append("    so2: ").append(toIndentedString(so2)).append("\n");
    sb.append("    timestampLocal: ").append(toIndentedString(timestampLocal)).append("\n");
    sb.append("    timestampUtc: ").append(toIndentedString(timestampUtc)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aqi");
    openapiFields.add("no2");
    openapiFields.add("o3");
    openapiFields.add("pm10");
    openapiFields.add("pm25");
    openapiFields.add("so2");
    openapiFields.add("timestamp_local");
    openapiFields.add("timestamp_utc");
    openapiFields.add("ts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AQHour
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AQHour.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AQHour is not found in the empty JSON string", AQHour.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AQHour.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AQHour` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("timestamp_local") != null && !jsonObj.get("timestamp_local").isJsonNull()) && !jsonObj.get("timestamp_local").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp_local` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp_local").toString()));
      }
      if ((jsonObj.get("timestamp_utc") != null && !jsonObj.get("timestamp_utc").isJsonNull()) && !jsonObj.get("timestamp_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp_utc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AQHour.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AQHour' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AQHour> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AQHour.class));

       return (TypeAdapter<T>) new TypeAdapter<AQHour>() {
           @Override
           public void write(JsonWriter out, AQHour value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AQHour read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AQHour given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AQHour
   * @throws IOException if the JSON string is invalid with respect to AQHour
   */
  public static AQHour fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AQHour.class);
  }

  /**
   * Convert an instance of AQHour to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

