/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrentObsWeather;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrentObs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.635462-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrentObs {
  public static final String SERIALIZED_NAME_APP_TEMP = "app_temp";
  @SerializedName(SERIALIZED_NAME_APP_TEMP)
  private BigDecimal appTemp;

  public static final String SERIALIZED_NAME_AQI = "aqi";
  @SerializedName(SERIALIZED_NAME_AQI)
  private BigDecimal aqi;

  public static final String SERIALIZED_NAME_CITY_NAME = "city_name";
  @SerializedName(SERIALIZED_NAME_CITY_NAME)
  private String cityName;

  public static final String SERIALIZED_NAME_CLOUDS = "clouds";
  @SerializedName(SERIALIZED_NAME_CLOUDS)
  private Integer clouds;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private String datetime;

  public static final String SERIALIZED_NAME_DEWPT = "dewpt";
  @SerializedName(SERIALIZED_NAME_DEWPT)
  private BigDecimal dewpt;

  public static final String SERIALIZED_NAME_DHI = "dhi";
  @SerializedName(SERIALIZED_NAME_DHI)
  private BigDecimal dhi;

  public static final String SERIALIZED_NAME_DNI = "dni";
  @SerializedName(SERIALIZED_NAME_DNI)
  private BigDecimal dni;

  public static final String SERIALIZED_NAME_ELEV_ANGLE = "elev_angle";
  @SerializedName(SERIALIZED_NAME_ELEV_ANGLE)
  private BigDecimal elevAngle;

  public static final String SERIALIZED_NAME_GHI = "ghi";
  @SerializedName(SERIALIZED_NAME_GHI)
  private BigDecimal ghi;

  public static final String SERIALIZED_NAME_GUST = "gust";
  @SerializedName(SERIALIZED_NAME_GUST)
  private BigDecimal gust;

  public static final String SERIALIZED_NAME_HOUR_ANGLE = "hour_angle";
  @SerializedName(SERIALIZED_NAME_HOUR_ANGLE)
  private BigDecimal hourAngle;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private BigDecimal lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private BigDecimal lon;

  public static final String SERIALIZED_NAME_OB_TIME = "ob_time";
  @SerializedName(SERIALIZED_NAME_OB_TIME)
  private String obTime;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  public static final String SERIALIZED_NAME_PRECIP = "precip";
  @SerializedName(SERIALIZED_NAME_PRECIP)
  private BigDecimal precip;

  public static final String SERIALIZED_NAME_PRES = "pres";
  @SerializedName(SERIALIZED_NAME_PRES)
  private BigDecimal pres;

  public static final String SERIALIZED_NAME_RH = "rh";
  @SerializedName(SERIALIZED_NAME_RH)
  private Integer rh;

  public static final String SERIALIZED_NAME_SLP = "slp";
  @SerializedName(SERIALIZED_NAME_SLP)
  private BigDecimal slp;

  public static final String SERIALIZED_NAME_SNOW = "snow";
  @SerializedName(SERIALIZED_NAME_SNOW)
  private BigDecimal snow;

  public static final String SERIALIZED_NAME_SOLAR_RAD = "solar_rad";
  @SerializedName(SERIALIZED_NAME_SOLAR_RAD)
  private BigDecimal solarRad;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE_CODE = "state_code";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_STATION = "station";
  @SerializedName(SERIALIZED_NAME_STATION)
  private String station;

  public static final String SERIALIZED_NAME_SUNRISE = "sunrise";
  @SerializedName(SERIALIZED_NAME_SUNRISE)
  private String sunrise;

  public static final String SERIALIZED_NAME_SUNSET = "sunset";
  @SerializedName(SERIALIZED_NAME_SUNSET)
  private String sunset;

  public static final String SERIALIZED_NAME_TEMP = "temp";
  @SerializedName(SERIALIZED_NAME_TEMP)
  private BigDecimal temp;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private BigDecimal ts;

  public static final String SERIALIZED_NAME_UV = "uv";
  @SerializedName(SERIALIZED_NAME_UV)
  private BigDecimal uv;

  public static final String SERIALIZED_NAME_VIS = "vis";
  @SerializedName(SERIALIZED_NAME_VIS)
  private Integer vis;

  public static final String SERIALIZED_NAME_WEATHER = "weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  private CurrentObsWeather weather;

  public static final String SERIALIZED_NAME_WIND_CDIR = "wind_cdir";
  @SerializedName(SERIALIZED_NAME_WIND_CDIR)
  private String windCdir;

  public static final String SERIALIZED_NAME_WIND_CDIR_FULL = "wind_cdir_full";
  @SerializedName(SERIALIZED_NAME_WIND_CDIR_FULL)
  private String windCdirFull;

  public static final String SERIALIZED_NAME_WIND_DIR = "wind_dir";
  @SerializedName(SERIALIZED_NAME_WIND_DIR)
  private Integer windDir;

  public static final String SERIALIZED_NAME_WIND_SPEED = "wind_speed";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED)
  private BigDecimal windSpeed;

  public CurrentObs() {
  }

  public CurrentObs appTemp(BigDecimal appTemp) {
    this.appTemp = appTemp;
    return this;
  }

  /**
   * Apparent temperature - Default (C)
   * @return appTemp
   */
  @javax.annotation.Nullable
  public BigDecimal getAppTemp() {
    return appTemp;
  }

  public void setAppTemp(BigDecimal appTemp) {
    this.appTemp = appTemp;
  }


  public CurrentObs aqi(BigDecimal aqi) {
    this.aqi = aqi;
    return this;
  }

  /**
   * Air quality index (US EPA standard 0 to +500)
   * @return aqi
   */
  @javax.annotation.Nullable
  public BigDecimal getAqi() {
    return aqi;
  }

  public void setAqi(BigDecimal aqi) {
    this.aqi = aqi;
  }


  public CurrentObs cityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  /**
   * City name (closest)
   * @return cityName
   */
  @javax.annotation.Nullable
  public String getCityName() {
    return cityName;
  }

  public void setCityName(String cityName) {
    this.cityName = cityName;
  }


  public CurrentObs clouds(Integer clouds) {
    this.clouds = clouds;
    return this;
  }

  /**
   * Cloud cover (%)
   * @return clouds
   */
  @javax.annotation.Nullable
  public Integer getClouds() {
    return clouds;
  }

  public void setClouds(Integer clouds) {
    this.clouds = clouds;
  }


  public CurrentObs countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country abbreviation
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CurrentObs datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * Cycle Hour (UTC) of observation
   * @return datetime
   */
  @javax.annotation.Nullable
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }


  public CurrentObs dewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
    return this;
  }

  /**
   * Dew point temperature - default (C)
   * @return dewpt
   */
  @javax.annotation.Nullable
  public BigDecimal getDewpt() {
    return dewpt;
  }

  public void setDewpt(BigDecimal dewpt) {
    this.dewpt = dewpt;
  }


  public CurrentObs dhi(BigDecimal dhi) {
    this.dhi = dhi;
    return this;
  }

  /**
   * Diffuse horizontal irradiance (W/m^2)
   * @return dhi
   */
  @javax.annotation.Nullable
  public BigDecimal getDhi() {
    return dhi;
  }

  public void setDhi(BigDecimal dhi) {
    this.dhi = dhi;
  }


  public CurrentObs dni(BigDecimal dni) {
    this.dni = dni;
    return this;
  }

  /**
   * Direct normal irradiance (W/m^2)
   * @return dni
   */
  @javax.annotation.Nullable
  public BigDecimal getDni() {
    return dni;
  }

  public void setDni(BigDecimal dni) {
    this.dni = dni;
  }


  public CurrentObs elevAngle(BigDecimal elevAngle) {
    this.elevAngle = elevAngle;
    return this;
  }

  /**
   * Current solar elevation angle (Degrees)
   * @return elevAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getElevAngle() {
    return elevAngle;
  }

  public void setElevAngle(BigDecimal elevAngle) {
    this.elevAngle = elevAngle;
  }


  public CurrentObs ghi(BigDecimal ghi) {
    this.ghi = ghi;
    return this;
  }

  /**
   * Global horizontal irradiance (W/m^2)
   * @return ghi
   */
  @javax.annotation.Nullable
  public BigDecimal getGhi() {
    return ghi;
  }

  public void setGhi(BigDecimal ghi) {
    this.ghi = ghi;
  }


  public CurrentObs gust(BigDecimal gust) {
    this.gust = gust;
    return this;
  }

  /**
   * Wind gust speed - Default (m/s)
   * @return gust
   */
  @javax.annotation.Nullable
  public BigDecimal getGust() {
    return gust;
  }

  public void setGust(BigDecimal gust) {
    this.gust = gust;
  }


  public CurrentObs hourAngle(BigDecimal hourAngle) {
    this.hourAngle = hourAngle;
    return this;
  }

  /**
   * Current solar hour angle (Degrees)
   * @return hourAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getHourAngle() {
    return hourAngle;
  }

  public void setHourAngle(BigDecimal hourAngle) {
    this.hourAngle = hourAngle;
  }


  public CurrentObs lat(BigDecimal lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude
   * @return lat
   */
  @javax.annotation.Nullable
  public BigDecimal getLat() {
    return lat;
  }

  public void setLat(BigDecimal lat) {
    this.lat = lat;
  }


  public CurrentObs lon(BigDecimal lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Longitude
   * @return lon
   */
  @javax.annotation.Nullable
  public BigDecimal getLon() {
    return lon;
  }

  public void setLon(BigDecimal lon) {
    this.lon = lon;
  }


  public CurrentObs obTime(String obTime) {
    this.obTime = obTime;
    return this;
  }

  /**
   * Full time (UTC) of observation (YYYY-MM-DD HH:MM)
   * @return obTime
   */
  @javax.annotation.Nullable
  public String getObTime() {
    return obTime;
  }

  public void setObTime(String obTime) {
    this.obTime = obTime;
  }


  public CurrentObs pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Part of the day (d &#x3D; day, n &#x3D; night)
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  public CurrentObs precip(BigDecimal precip) {
    this.precip = precip;
    return this;
  }

  /**
   * Precipitation in last hour - Default (mm)
   * @return precip
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecip() {
    return precip;
  }

  public void setPrecip(BigDecimal precip) {
    this.precip = precip;
  }


  public CurrentObs pres(BigDecimal pres) {
    this.pres = pres;
    return this;
  }

  /**
   * Pressure (mb)
   * @return pres
   */
  @javax.annotation.Nullable
  public BigDecimal getPres() {
    return pres;
  }

  public void setPres(BigDecimal pres) {
    this.pres = pres;
  }


  public CurrentObs rh(Integer rh) {
    this.rh = rh;
    return this;
  }

  /**
   * Relative humidity (%)
   * @return rh
   */
  @javax.annotation.Nullable
  public Integer getRh() {
    return rh;
  }

  public void setRh(Integer rh) {
    this.rh = rh;
  }


  public CurrentObs slp(BigDecimal slp) {
    this.slp = slp;
    return this;
  }

  /**
   * Mean sea level pressure in millibars (mb)
   * @return slp
   */
  @javax.annotation.Nullable
  public BigDecimal getSlp() {
    return slp;
  }

  public void setSlp(BigDecimal slp) {
    this.slp = slp;
  }


  public CurrentObs snow(BigDecimal snow) {
    this.snow = snow;
    return this;
  }

  /**
   * Snowfall in last hour - Default (mm)
   * @return snow
   */
  @javax.annotation.Nullable
  public BigDecimal getSnow() {
    return snow;
  }

  public void setSnow(BigDecimal snow) {
    this.snow = snow;
  }


  public CurrentObs solarRad(BigDecimal solarRad) {
    this.solarRad = solarRad;
    return this;
  }

  /**
   * Estimated solar radiation (W/m^2)
   * @return solarRad
   */
  @javax.annotation.Nullable
  public BigDecimal getSolarRad() {
    return solarRad;
  }

  public void setSolarRad(BigDecimal solarRad) {
    this.solarRad = solarRad;
  }


  public CurrentObs sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public CurrentObs addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * List of data sources used in response
   * @return sources
   */
  @javax.annotation.Nullable
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }


  public CurrentObs stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * State abbreviation
   * @return stateCode
   */
  @javax.annotation.Nullable
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public CurrentObs station(String station) {
    this.station = station;
    return this;
  }

  /**
   * Source Station ID
   * @return station
   */
  @javax.annotation.Nullable
  public String getStation() {
    return station;
  }

  public void setStation(String station) {
    this.station = station;
  }


  public CurrentObs sunrise(String sunrise) {
    this.sunrise = sunrise;
    return this;
  }

  /**
   * Time (UTC) of Sunrise (HH:MM)
   * @return sunrise
   */
  @javax.annotation.Nullable
  public String getSunrise() {
    return sunrise;
  }

  public void setSunrise(String sunrise) {
    this.sunrise = sunrise;
  }


  public CurrentObs sunset(String sunset) {
    this.sunset = sunset;
    return this;
  }

  /**
   * Time (UTC) of Sunset (HH:MM)
   * @return sunset
   */
  @javax.annotation.Nullable
  public String getSunset() {
    return sunset;
  }

  public void setSunset(String sunset) {
    this.sunset = sunset;
  }


  public CurrentObs temp(BigDecimal temp) {
    this.temp = temp;
    return this;
  }

  /**
   * Temperature - Default (C)
   * @return temp
   */
  @javax.annotation.Nullable
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(BigDecimal temp) {
    this.temp = temp;
  }


  public CurrentObs timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Local IANA time zone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public CurrentObs ts(BigDecimal ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Unix Timestamp
   * @return ts
   */
  @javax.annotation.Nullable
  public BigDecimal getTs() {
    return ts;
  }

  public void setTs(BigDecimal ts) {
    this.ts = ts;
  }


  public CurrentObs uv(BigDecimal uv) {
    this.uv = uv;
    return this;
  }

  /**
   * UV Index
   * @return uv
   */
  @javax.annotation.Nullable
  public BigDecimal getUv() {
    return uv;
  }

  public void setUv(BigDecimal uv) {
    this.uv = uv;
  }


  public CurrentObs vis(Integer vis) {
    this.vis = vis;
    return this;
  }

  /**
   * Visibility - default (M)
   * @return vis
   */
  @javax.annotation.Nullable
  public Integer getVis() {
    return vis;
  }

  public void setVis(Integer vis) {
    this.vis = vis;
  }


  public CurrentObs weather(CurrentObsWeather weather) {
    this.weather = weather;
    return this;
  }

  /**
   * Get weather
   * @return weather
   */
  @javax.annotation.Nullable
  public CurrentObsWeather getWeather() {
    return weather;
  }

  public void setWeather(CurrentObsWeather weather) {
    this.weather = weather;
  }


  public CurrentObs windCdir(String windCdir) {
    this.windCdir = windCdir;
    return this;
  }

  /**
   * Cardinal wind direction
   * @return windCdir
   */
  @javax.annotation.Nullable
  public String getWindCdir() {
    return windCdir;
  }

  public void setWindCdir(String windCdir) {
    this.windCdir = windCdir;
  }


  public CurrentObs windCdirFull(String windCdirFull) {
    this.windCdirFull = windCdirFull;
    return this;
  }

  /**
   * Cardinal wind direction (text)
   * @return windCdirFull
   */
  @javax.annotation.Nullable
  public String getWindCdirFull() {
    return windCdirFull;
  }

  public void setWindCdirFull(String windCdirFull) {
    this.windCdirFull = windCdirFull;
  }


  public CurrentObs windDir(Integer windDir) {
    this.windDir = windDir;
    return this;
  }

  /**
   * Wind direction (degrees)
   * @return windDir
   */
  @javax.annotation.Nullable
  public Integer getWindDir() {
    return windDir;
  }

  public void setWindDir(Integer windDir) {
    this.windDir = windDir;
  }


  public CurrentObs windSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  /**
   * Wind speed - Default (m/s)
   * @return windSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentObs currentObs = (CurrentObs) o;
    return Objects.equals(this.appTemp, currentObs.appTemp) &&
        Objects.equals(this.aqi, currentObs.aqi) &&
        Objects.equals(this.cityName, currentObs.cityName) &&
        Objects.equals(this.clouds, currentObs.clouds) &&
        Objects.equals(this.countryCode, currentObs.countryCode) &&
        Objects.equals(this.datetime, currentObs.datetime) &&
        Objects.equals(this.dewpt, currentObs.dewpt) &&
        Objects.equals(this.dhi, currentObs.dhi) &&
        Objects.equals(this.dni, currentObs.dni) &&
        Objects.equals(this.elevAngle, currentObs.elevAngle) &&
        Objects.equals(this.ghi, currentObs.ghi) &&
        Objects.equals(this.gust, currentObs.gust) &&
        Objects.equals(this.hourAngle, currentObs.hourAngle) &&
        Objects.equals(this.lat, currentObs.lat) &&
        Objects.equals(this.lon, currentObs.lon) &&
        Objects.equals(this.obTime, currentObs.obTime) &&
        Objects.equals(this.pod, currentObs.pod) &&
        Objects.equals(this.precip, currentObs.precip) &&
        Objects.equals(this.pres, currentObs.pres) &&
        Objects.equals(this.rh, currentObs.rh) &&
        Objects.equals(this.slp, currentObs.slp) &&
        Objects.equals(this.snow, currentObs.snow) &&
        Objects.equals(this.solarRad, currentObs.solarRad) &&
        Objects.equals(this.sources, currentObs.sources) &&
        Objects.equals(this.stateCode, currentObs.stateCode) &&
        Objects.equals(this.station, currentObs.station) &&
        Objects.equals(this.sunrise, currentObs.sunrise) &&
        Objects.equals(this.sunset, currentObs.sunset) &&
        Objects.equals(this.temp, currentObs.temp) &&
        Objects.equals(this.timezone, currentObs.timezone) &&
        Objects.equals(this.ts, currentObs.ts) &&
        Objects.equals(this.uv, currentObs.uv) &&
        Objects.equals(this.vis, currentObs.vis) &&
        Objects.equals(this.weather, currentObs.weather) &&
        Objects.equals(this.windCdir, currentObs.windCdir) &&
        Objects.equals(this.windCdirFull, currentObs.windCdirFull) &&
        Objects.equals(this.windDir, currentObs.windDir) &&
        Objects.equals(this.windSpeed, currentObs.windSpeed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appTemp, aqi, cityName, clouds, countryCode, datetime, dewpt, dhi, dni, elevAngle, ghi, gust, hourAngle, lat, lon, obTime, pod, precip, pres, rh, slp, snow, solarRad, sources, stateCode, station, sunrise, sunset, temp, timezone, ts, uv, vis, weather, windCdir, windCdirFull, windDir, windSpeed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentObs {\n");
    sb.append("    appTemp: ").append(toIndentedString(appTemp)).append("\n");
    sb.append("    aqi: ").append(toIndentedString(aqi)).append("\n");
    sb.append("    cityName: ").append(toIndentedString(cityName)).append("\n");
    sb.append("    clouds: ").append(toIndentedString(clouds)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    dewpt: ").append(toIndentedString(dewpt)).append("\n");
    sb.append("    dhi: ").append(toIndentedString(dhi)).append("\n");
    sb.append("    dni: ").append(toIndentedString(dni)).append("\n");
    sb.append("    elevAngle: ").append(toIndentedString(elevAngle)).append("\n");
    sb.append("    ghi: ").append(toIndentedString(ghi)).append("\n");
    sb.append("    gust: ").append(toIndentedString(gust)).append("\n");
    sb.append("    hourAngle: ").append(toIndentedString(hourAngle)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    obTime: ").append(toIndentedString(obTime)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    precip: ").append(toIndentedString(precip)).append("\n");
    sb.append("    pres: ").append(toIndentedString(pres)).append("\n");
    sb.append("    rh: ").append(toIndentedString(rh)).append("\n");
    sb.append("    slp: ").append(toIndentedString(slp)).append("\n");
    sb.append("    snow: ").append(toIndentedString(snow)).append("\n");
    sb.append("    solarRad: ").append(toIndentedString(solarRad)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("    sunrise: ").append(toIndentedString(sunrise)).append("\n");
    sb.append("    sunset: ").append(toIndentedString(sunset)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    uv: ").append(toIndentedString(uv)).append("\n");
    sb.append("    vis: ").append(toIndentedString(vis)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("    windCdir: ").append(toIndentedString(windCdir)).append("\n");
    sb.append("    windCdirFull: ").append(toIndentedString(windCdirFull)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_temp");
    openapiFields.add("aqi");
    openapiFields.add("city_name");
    openapiFields.add("clouds");
    openapiFields.add("country_code");
    openapiFields.add("datetime");
    openapiFields.add("dewpt");
    openapiFields.add("dhi");
    openapiFields.add("dni");
    openapiFields.add("elev_angle");
    openapiFields.add("ghi");
    openapiFields.add("gust");
    openapiFields.add("hour_angle");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("ob_time");
    openapiFields.add("pod");
    openapiFields.add("precip");
    openapiFields.add("pres");
    openapiFields.add("rh");
    openapiFields.add("slp");
    openapiFields.add("snow");
    openapiFields.add("solar_rad");
    openapiFields.add("sources");
    openapiFields.add("state_code");
    openapiFields.add("station");
    openapiFields.add("sunrise");
    openapiFields.add("sunset");
    openapiFields.add("temp");
    openapiFields.add("timezone");
    openapiFields.add("ts");
    openapiFields.add("uv");
    openapiFields.add("vis");
    openapiFields.add("weather");
    openapiFields.add("wind_cdir");
    openapiFields.add("wind_cdir_full");
    openapiFields.add("wind_dir");
    openapiFields.add("wind_speed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrentObs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrentObs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentObs is not found in the empty JSON string", CurrentObs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrentObs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentObs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city_name") != null && !jsonObj.get("city_name").isJsonNull()) && !jsonObj.get("city_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_name").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("datetime") != null && !jsonObj.get("datetime").isJsonNull()) && !jsonObj.get("datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime").toString()));
      }
      if ((jsonObj.get("ob_time") != null && !jsonObj.get("ob_time").isJsonNull()) && !jsonObj.get("ob_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ob_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ob_time").toString()));
      }
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      if ((jsonObj.get("state_code") != null && !jsonObj.get("state_code").isJsonNull()) && !jsonObj.get("state_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_code").toString()));
      }
      if ((jsonObj.get("station") != null && !jsonObj.get("station").isJsonNull()) && !jsonObj.get("station").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station").toString()));
      }
      if ((jsonObj.get("sunrise") != null && !jsonObj.get("sunrise").isJsonNull()) && !jsonObj.get("sunrise").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sunrise` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sunrise").toString()));
      }
      if ((jsonObj.get("sunset") != null && !jsonObj.get("sunset").isJsonNull()) && !jsonObj.get("sunset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sunset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sunset").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      // validate the optional field `weather`
      if (jsonObj.get("weather") != null && !jsonObj.get("weather").isJsonNull()) {
        CurrentObsWeather.validateJsonElement(jsonObj.get("weather"));
      }
      if ((jsonObj.get("wind_cdir") != null && !jsonObj.get("wind_cdir").isJsonNull()) && !jsonObj.get("wind_cdir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wind_cdir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wind_cdir").toString()));
      }
      if ((jsonObj.get("wind_cdir_full") != null && !jsonObj.get("wind_cdir_full").isJsonNull()) && !jsonObj.get("wind_cdir_full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wind_cdir_full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wind_cdir_full").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentObs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentObs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentObs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentObs.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentObs>() {
           @Override
           public void write(JsonWriter out, CurrentObs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentObs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrentObs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrentObs
   * @throws IOException if the JSON string is invalid with respect to CurrentObs
   */
  public static CurrentObs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentObs.class);
  }

  /**
   * Convert an instance of CurrentObs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

