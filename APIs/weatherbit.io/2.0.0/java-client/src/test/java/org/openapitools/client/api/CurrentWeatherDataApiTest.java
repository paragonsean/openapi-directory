/*
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurrentObsGroup;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CurrentWeatherDataApi
 */
@Disabled
public class CurrentWeatherDataApiTest {

    private final CurrentWeatherDataApi api = new CurrentWeatherDataApi();

    /**
     * Returns a group of observations given a list of cities
     *
     * Returns a group of Current Observations - Given a list of City IDs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentcitiescitiesGetTest() throws ApiException {
        String cities = null;
        String key = null;
        String units = null;
        String marine = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentcitiescitiesGet(cities, key, units, marine, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a current observation by city id.
     *
     * Returns current weather observation - Given a City ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentcityIdcityIdGetTest() throws ApiException {
        String cityId = null;
        String key = null;
        String units = null;
        String include = null;
        String marine = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentcityIdcityIdGet(cityId, key, units, include, marine, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a Current Observation - Given City and/or State, Country.
     *
     * Returns a Current Observation - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentcitycitycountrycountryGetTest() throws ApiException {
        String city = null;
        String country = null;
        String key = null;
        String include = null;
        String state = null;
        String marine = null;
        String units = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentcitycitycountrycountryGet(city, country, key, include, state, marine, units, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a Current Observation - Given a lat/lon.
     *
     * Returns a Current Observation - given a lat, and a lon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentlatlatlonlonGetTest() throws ApiException {
        Double lat = null;
        Double lon = null;
        String key = null;
        String include = null;
        String marine = null;
        String units = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentlatlatlonlonGet(lat, lon, key, include, marine, units, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a group of observations given a list of points in the format (lat1, lon1), (lat2, lon2), (latN, lonN), ...
     *
     * Returns a group of Current Observations - Given a list of points (lat1, lon1), (lat2, lon2), (latN, lonN), ...
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentpointspointsGetTest() throws ApiException {
        String points = null;
        String key = null;
        String units = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentpointspointsGet(points, key, units, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a current observation by postal code.
     *
     * Returns current weather observation - Given a Postal Code. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentpostalCodepostalCodeGetTest() throws ApiException {
        String postalCode = null;
        String key = null;
        String country = null;
        String include = null;
        String marine = null;
        String units = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentpostalCodepostalCodeGet(postalCode, key, country, include, marine, units, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a group of observations given a list of stations
     *
     * Returns a group of Current Observations - Given a list of Station Call IDs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentstationsstationsGetTest() throws ApiException {
        String stations = null;
        String key = null;
        String units = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentstationsstationsGet(stations, key, units, lang, paramCallback);
        // TODO: test validations
    }

    /**
     * Returns a Current Observation. - Given a station ID.
     *
     * Returns a Current Observation - Given a station ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentstationstationGetTest() throws ApiException {
        String station = null;
        String key = null;
        String include = null;
        String units = null;
        String lang = null;
        String paramCallback = null;
        CurrentObsGroup response = api.currentstationstationGet(station, key, include, units, lang, paramCallback);
        // TODO: test validations
    }

}
