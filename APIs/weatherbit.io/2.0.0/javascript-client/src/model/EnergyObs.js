/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EnergyObs model module.
 * @module model/EnergyObs
 * @version 2.0.0
 */
class EnergyObs {
    /**
     * Constructs a new <code>EnergyObs</code>.
     * @alias module:model/EnergyObs
     */
    constructor() { 
        
        EnergyObs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnergyObs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnergyObs} obj Optional instance to populate.
     * @return {module:model/EnergyObs} The populated <code>EnergyObs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnergyObs();

            if (data.hasOwnProperty('cdd')) {
                obj['cdd'] = ApiClient.convertToType(data['cdd'], 'Number');
            }
            if (data.hasOwnProperty('city_name')) {
                obj['city_name'] = ApiClient.convertToType(data['city_name'], 'String');
            }
            if (data.hasOwnProperty('clouds')) {
                obj['clouds'] = ApiClient.convertToType(data['clouds'], 'Number');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('dewpt')) {
                obj['dewpt'] = ApiClient.convertToType(data['dewpt'], 'Number');
            }
            if (data.hasOwnProperty('hdd')) {
                obj['hdd'] = ApiClient.convertToType(data['hdd'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'String');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'String');
            }
            if (data.hasOwnProperty('precip')) {
                obj['precip'] = ApiClient.convertToType(data['precip'], 'Number');
            }
            if (data.hasOwnProperty('rh')) {
                obj['rh'] = ApiClient.convertToType(data['rh'], 'Number');
            }
            if (data.hasOwnProperty('snow')) {
                obj['snow'] = ApiClient.convertToType(data['snow'], 'Number');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('state_code')) {
                obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
            }
            if (data.hasOwnProperty('station_id')) {
                obj['station_id'] = ApiClient.convertToType(data['station_id'], 'String');
            }
            if (data.hasOwnProperty('sun_hours')) {
                obj['sun_hours'] = ApiClient.convertToType(data['sun_hours'], 'Number');
            }
            if (data.hasOwnProperty('t_dhi')) {
                obj['t_dhi'] = ApiClient.convertToType(data['t_dhi'], 'Number');
            }
            if (data.hasOwnProperty('t_dni')) {
                obj['t_dni'] = ApiClient.convertToType(data['t_dni'], 'Number');
            }
            if (data.hasOwnProperty('t_ghi')) {
                obj['t_ghi'] = ApiClient.convertToType(data['t_ghi'], 'Number');
            }
            if (data.hasOwnProperty('temp')) {
                obj['temp'] = ApiClient.convertToType(data['temp'], 'Number');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('wind_dir')) {
                obj['wind_dir'] = ApiClient.convertToType(data['wind_dir'], 'Number');
            }
            if (data.hasOwnProperty('wind_spd')) {
                obj['wind_spd'] = ApiClient.convertToType(data['wind_spd'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnergyObs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnergyObs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city_name'] && !(typeof data['city_name'] === 'string' || data['city_name'] instanceof String)) {
            throw new Error("Expected the field `city_name` to be a primitive type in the JSON string but got " + data['city_name']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['lat'] && !(typeof data['lat'] === 'string' || data['lat'] instanceof String)) {
            throw new Error("Expected the field `lat` to be a primitive type in the JSON string but got " + data['lat']);
        }
        // ensure the json data is a string
        if (data['lon'] && !(typeof data['lon'] === 'string' || data['lon'] instanceof String)) {
            throw new Error("Expected the field `lon` to be a primitive type in the JSON string but got " + data['lon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['state_code'] && !(typeof data['state_code'] === 'string' || data['state_code'] instanceof String)) {
            throw new Error("Expected the field `state_code` to be a primitive type in the JSON string but got " + data['state_code']);
        }
        // ensure the json data is a string
        if (data['station_id'] && !(typeof data['station_id'] === 'string' || data['station_id'] instanceof String)) {
            throw new Error("Expected the field `station_id` to be a primitive type in the JSON string but got " + data['station_id']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * Cooling degree days
 * @member {Number} cdd
 */
EnergyObs.prototype['cdd'] = undefined;

/**
 * City name (closest)
 * @member {String} city_name
 */
EnergyObs.prototype['city_name'] = undefined;

/**
 * Average cloud cover (%)
 * @member {Number} clouds
 */
EnergyObs.prototype['clouds'] = undefined;

/**
 * Country abbreviation
 * @member {String} country_code
 */
EnergyObs.prototype['country_code'] = undefined;

/**
 * Average dew point temperature - Default (C)
 * @member {Number} dewpt
 */
EnergyObs.prototype['dewpt'] = undefined;

/**
 * Heating degree days
 * @member {Number} hdd
 */
EnergyObs.prototype['hdd'] = undefined;

/**
 * Latitude
 * @member {String} lat
 */
EnergyObs.prototype['lat'] = undefined;

/**
 * Longitude
 * @member {String} lon
 */
EnergyObs.prototype['lon'] = undefined;

/**
 * Total precipitation in period - Default (mm)
 * @member {Number} precip
 */
EnergyObs.prototype['precip'] = undefined;

/**
 * Average Relative humidity (%)
 * @member {Number} rh
 */
EnergyObs.prototype['rh'] = undefined;

/**
 * Total snowfall in period - Default (mm)
 * @member {Number} snow
 */
EnergyObs.prototype['snow'] = undefined;

/**
 * List of data sources used in response
 * @member {Array.<String>} sources
 */
EnergyObs.prototype['sources'] = undefined;

/**
 * State abbreviation
 * @member {String} state_code
 */
EnergyObs.prototype['state_code'] = undefined;

/**
 * Nearest Station ID [DEPRECATED]
 * @member {String} station_id
 */
EnergyObs.prototype['station_id'] = undefined;

/**
 * Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2
 * @member {Number} sun_hours
 */
EnergyObs.prototype['sun_hours'] = undefined;

/**
 * Total diffuse horizontal solar irradiance (W/m^2)
 * @member {Number} t_dhi
 */
EnergyObs.prototype['t_dhi'] = undefined;

/**
 * Total direct normal solar irradiance (W/m^2)
 * @member {Number} t_dni
 */
EnergyObs.prototype['t_dni'] = undefined;

/**
 * Total global horizontal solar irradiance (W/m^2)
 * @member {Number} t_ghi
 */
EnergyObs.prototype['t_ghi'] = undefined;

/**
 * Average temperature - Default (C)
 * @member {Number} temp
 */
EnergyObs.prototype['temp'] = undefined;

/**
 * Local IANA time zone
 * @member {String} timezone
 */
EnergyObs.prototype['timezone'] = undefined;

/**
 * Average wind direction (Degrees)
 * @member {Number} wind_dir
 */
EnergyObs.prototype['wind_dir'] = undefined;

/**
 * Average wind speed - Default (m/s)
 * @member {Number} wind_spd
 */
EnergyObs.prototype['wind_spd'] = undefined;






export default EnergyObs;

