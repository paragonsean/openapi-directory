/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WeatherAlertGroup model module.
 * @module model/WeatherAlertGroup
 * @version 2.0.0
 */
class WeatherAlertGroup {
    /**
     * Constructs a new <code>WeatherAlertGroup</code>.
     * @alias module:model/WeatherAlertGroup
     */
    constructor() { 
        
        WeatherAlertGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WeatherAlertGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WeatherAlertGroup} obj Optional instance to populate.
     * @return {module:model/WeatherAlertGroup} The populated <code>WeatherAlertGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WeatherAlertGroup();

            if (data.hasOwnProperty('alerts')) {
                obj['alerts'] = ApiClient.convertToType(data['alerts'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('effective_local')) {
                obj['effective_local'] = ApiClient.convertToType(data['effective_local'], 'String');
            }
            if (data.hasOwnProperty('effective_utc')) {
                obj['effective_utc'] = ApiClient.convertToType(data['effective_utc'], 'String');
            }
            if (data.hasOwnProperty('expires_local')) {
                obj['expires_local'] = ApiClient.convertToType(data['expires_local'], 'String');
            }
            if (data.hasOwnProperty('expires_utc')) {
                obj['expires_utc'] = ApiClient.convertToType(data['expires_utc'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WeatherAlertGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WeatherAlertGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['alerts'])) {
            throw new Error("Expected the field `alerts` to be an array in the JSON data but got " + data['alerts']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['effective_local'] && !(typeof data['effective_local'] === 'string' || data['effective_local'] instanceof String)) {
            throw new Error("Expected the field `effective_local` to be a primitive type in the JSON string but got " + data['effective_local']);
        }
        // ensure the json data is a string
        if (data['effective_utc'] && !(typeof data['effective_utc'] === 'string' || data['effective_utc'] instanceof String)) {
            throw new Error("Expected the field `effective_utc` to be a primitive type in the JSON string but got " + data['effective_utc']);
        }
        // ensure the json data is a string
        if (data['expires_local'] && !(typeof data['expires_local'] === 'string' || data['expires_local'] instanceof String)) {
            throw new Error("Expected the field `expires_local` to be a primitive type in the JSON string but got " + data['expires_local']);
        }
        // ensure the json data is a string
        if (data['expires_utc'] && !(typeof data['expires_utc'] === 'string' || data['expires_utc'] instanceof String)) {
            throw new Error("Expected the field `expires_utc` to be a primitive type in the JSON string but got " + data['expires_utc']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} alerts
 */
WeatherAlertGroup.prototype['alerts'] = undefined;

/**
 * Full description of weather alert
 * @member {String} description
 */
WeatherAlertGroup.prototype['description'] = undefined;

/**
 * Issued time local
 * @member {String} effective_local
 */
WeatherAlertGroup.prototype['effective_local'] = undefined;

/**
 * Issued time UTC
 * @member {String} effective_utc
 */
WeatherAlertGroup.prototype['effective_utc'] = undefined;

/**
 * Expiration time local
 * @member {String} expires_local
 */
WeatherAlertGroup.prototype['expires_local'] = undefined;

/**
 * Expiration time UTC
 * @member {String} expires_utc
 */
WeatherAlertGroup.prototype['expires_utc'] = undefined;

/**
 * Severity of weather. (Advisory | Watch | Warning)
 * @member {String} severity
 */
WeatherAlertGroup.prototype['severity'] = undefined;

/**
 * Brief description of weather alert
 * @member {String} title
 */
WeatherAlertGroup.prototype['title'] = undefined;

/**
 * URI to weather alert
 * @member {String} uri
 */
WeatherAlertGroup.prototype['uri'] = undefined;






export default WeatherAlertGroup;

