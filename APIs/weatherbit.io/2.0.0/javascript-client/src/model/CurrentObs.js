/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrentObsWeather from './CurrentObsWeather';

/**
 * The CurrentObs model module.
 * @module model/CurrentObs
 * @version 2.0.0
 */
class CurrentObs {
    /**
     * Constructs a new <code>CurrentObs</code>.
     * @alias module:model/CurrentObs
     */
    constructor() { 
        
        CurrentObs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CurrentObs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrentObs} obj Optional instance to populate.
     * @return {module:model/CurrentObs} The populated <code>CurrentObs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrentObs();

            if (data.hasOwnProperty('app_temp')) {
                obj['app_temp'] = ApiClient.convertToType(data['app_temp'], 'Number');
            }
            if (data.hasOwnProperty('aqi')) {
                obj['aqi'] = ApiClient.convertToType(data['aqi'], 'Number');
            }
            if (data.hasOwnProperty('city_name')) {
                obj['city_name'] = ApiClient.convertToType(data['city_name'], 'String');
            }
            if (data.hasOwnProperty('clouds')) {
                obj['clouds'] = ApiClient.convertToType(data['clouds'], 'Number');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('datetime')) {
                obj['datetime'] = ApiClient.convertToType(data['datetime'], 'String');
            }
            if (data.hasOwnProperty('dewpt')) {
                obj['dewpt'] = ApiClient.convertToType(data['dewpt'], 'Number');
            }
            if (data.hasOwnProperty('dhi')) {
                obj['dhi'] = ApiClient.convertToType(data['dhi'], 'Number');
            }
            if (data.hasOwnProperty('dni')) {
                obj['dni'] = ApiClient.convertToType(data['dni'], 'Number');
            }
            if (data.hasOwnProperty('elev_angle')) {
                obj['elev_angle'] = ApiClient.convertToType(data['elev_angle'], 'Number');
            }
            if (data.hasOwnProperty('ghi')) {
                obj['ghi'] = ApiClient.convertToType(data['ghi'], 'Number');
            }
            if (data.hasOwnProperty('gust')) {
                obj['gust'] = ApiClient.convertToType(data['gust'], 'Number');
            }
            if (data.hasOwnProperty('hour_angle')) {
                obj['hour_angle'] = ApiClient.convertToType(data['hour_angle'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('ob_time')) {
                obj['ob_time'] = ApiClient.convertToType(data['ob_time'], 'String');
            }
            if (data.hasOwnProperty('pod')) {
                obj['pod'] = ApiClient.convertToType(data['pod'], 'String');
            }
            if (data.hasOwnProperty('precip')) {
                obj['precip'] = ApiClient.convertToType(data['precip'], 'Number');
            }
            if (data.hasOwnProperty('pres')) {
                obj['pres'] = ApiClient.convertToType(data['pres'], 'Number');
            }
            if (data.hasOwnProperty('rh')) {
                obj['rh'] = ApiClient.convertToType(data['rh'], 'Number');
            }
            if (data.hasOwnProperty('slp')) {
                obj['slp'] = ApiClient.convertToType(data['slp'], 'Number');
            }
            if (data.hasOwnProperty('snow')) {
                obj['snow'] = ApiClient.convertToType(data['snow'], 'Number');
            }
            if (data.hasOwnProperty('solar_rad')) {
                obj['solar_rad'] = ApiClient.convertToType(data['solar_rad'], 'Number');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('state_code')) {
                obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
            }
            if (data.hasOwnProperty('station')) {
                obj['station'] = ApiClient.convertToType(data['station'], 'String');
            }
            if (data.hasOwnProperty('sunrise')) {
                obj['sunrise'] = ApiClient.convertToType(data['sunrise'], 'String');
            }
            if (data.hasOwnProperty('sunset')) {
                obj['sunset'] = ApiClient.convertToType(data['sunset'], 'String');
            }
            if (data.hasOwnProperty('temp')) {
                obj['temp'] = ApiClient.convertToType(data['temp'], 'Number');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'Number');
            }
            if (data.hasOwnProperty('uv')) {
                obj['uv'] = ApiClient.convertToType(data['uv'], 'Number');
            }
            if (data.hasOwnProperty('vis')) {
                obj['vis'] = ApiClient.convertToType(data['vis'], 'Number');
            }
            if (data.hasOwnProperty('weather')) {
                obj['weather'] = CurrentObsWeather.constructFromObject(data['weather']);
            }
            if (data.hasOwnProperty('wind_cdir')) {
                obj['wind_cdir'] = ApiClient.convertToType(data['wind_cdir'], 'String');
            }
            if (data.hasOwnProperty('wind_cdir_full')) {
                obj['wind_cdir_full'] = ApiClient.convertToType(data['wind_cdir_full'], 'String');
            }
            if (data.hasOwnProperty('wind_dir')) {
                obj['wind_dir'] = ApiClient.convertToType(data['wind_dir'], 'Number');
            }
            if (data.hasOwnProperty('wind_speed')) {
                obj['wind_speed'] = ApiClient.convertToType(data['wind_speed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrentObs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrentObs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city_name'] && !(typeof data['city_name'] === 'string' || data['city_name'] instanceof String)) {
            throw new Error("Expected the field `city_name` to be a primitive type in the JSON string but got " + data['city_name']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['datetime'] && !(typeof data['datetime'] === 'string' || data['datetime'] instanceof String)) {
            throw new Error("Expected the field `datetime` to be a primitive type in the JSON string but got " + data['datetime']);
        }
        // ensure the json data is a string
        if (data['ob_time'] && !(typeof data['ob_time'] === 'string' || data['ob_time'] instanceof String)) {
            throw new Error("Expected the field `ob_time` to be a primitive type in the JSON string but got " + data['ob_time']);
        }
        // ensure the json data is a string
        if (data['pod'] && !(typeof data['pod'] === 'string' || data['pod'] instanceof String)) {
            throw new Error("Expected the field `pod` to be a primitive type in the JSON string but got " + data['pod']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['state_code'] && !(typeof data['state_code'] === 'string' || data['state_code'] instanceof String)) {
            throw new Error("Expected the field `state_code` to be a primitive type in the JSON string but got " + data['state_code']);
        }
        // ensure the json data is a string
        if (data['station'] && !(typeof data['station'] === 'string' || data['station'] instanceof String)) {
            throw new Error("Expected the field `station` to be a primitive type in the JSON string but got " + data['station']);
        }
        // ensure the json data is a string
        if (data['sunrise'] && !(typeof data['sunrise'] === 'string' || data['sunrise'] instanceof String)) {
            throw new Error("Expected the field `sunrise` to be a primitive type in the JSON string but got " + data['sunrise']);
        }
        // ensure the json data is a string
        if (data['sunset'] && !(typeof data['sunset'] === 'string' || data['sunset'] instanceof String)) {
            throw new Error("Expected the field `sunset` to be a primitive type in the JSON string but got " + data['sunset']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // validate the optional field `weather`
        if (data['weather']) { // data not null
          CurrentObsWeather.validateJSON(data['weather']);
        }
        // ensure the json data is a string
        if (data['wind_cdir'] && !(typeof data['wind_cdir'] === 'string' || data['wind_cdir'] instanceof String)) {
            throw new Error("Expected the field `wind_cdir` to be a primitive type in the JSON string but got " + data['wind_cdir']);
        }
        // ensure the json data is a string
        if (data['wind_cdir_full'] && !(typeof data['wind_cdir_full'] === 'string' || data['wind_cdir_full'] instanceof String)) {
            throw new Error("Expected the field `wind_cdir_full` to be a primitive type in the JSON string but got " + data['wind_cdir_full']);
        }

        return true;
    }


}



/**
 * Apparent temperature - Default (C)
 * @member {Number} app_temp
 */
CurrentObs.prototype['app_temp'] = undefined;

/**
 * Air quality index (US EPA standard 0 to +500)
 * @member {Number} aqi
 */
CurrentObs.prototype['aqi'] = undefined;

/**
 * City name (closest)
 * @member {String} city_name
 */
CurrentObs.prototype['city_name'] = undefined;

/**
 * Cloud cover (%)
 * @member {Number} clouds
 */
CurrentObs.prototype['clouds'] = undefined;

/**
 * Country abbreviation
 * @member {String} country_code
 */
CurrentObs.prototype['country_code'] = undefined;

/**
 * Cycle Hour (UTC) of observation
 * @member {String} datetime
 */
CurrentObs.prototype['datetime'] = undefined;

/**
 * Dew point temperature - default (C)
 * @member {Number} dewpt
 */
CurrentObs.prototype['dewpt'] = undefined;

/**
 * Diffuse horizontal irradiance (W/m^2)
 * @member {Number} dhi
 */
CurrentObs.prototype['dhi'] = undefined;

/**
 * Direct normal irradiance (W/m^2)
 * @member {Number} dni
 */
CurrentObs.prototype['dni'] = undefined;

/**
 * Current solar elevation angle (Degrees)
 * @member {Number} elev_angle
 */
CurrentObs.prototype['elev_angle'] = undefined;

/**
 * Global horizontal irradiance (W/m^2)
 * @member {Number} ghi
 */
CurrentObs.prototype['ghi'] = undefined;

/**
 * Wind gust speed - Default (m/s)
 * @member {Number} gust
 */
CurrentObs.prototype['gust'] = undefined;

/**
 * Current solar hour angle (Degrees)
 * @member {Number} hour_angle
 */
CurrentObs.prototype['hour_angle'] = undefined;

/**
 * Latitude
 * @member {Number} lat
 */
CurrentObs.prototype['lat'] = undefined;

/**
 * Longitude
 * @member {Number} lon
 */
CurrentObs.prototype['lon'] = undefined;

/**
 * Full time (UTC) of observation (YYYY-MM-DD HH:MM)
 * @member {String} ob_time
 */
CurrentObs.prototype['ob_time'] = undefined;

/**
 * Part of the day (d = day, n = night)
 * @member {String} pod
 */
CurrentObs.prototype['pod'] = undefined;

/**
 * Precipitation in last hour - Default (mm)
 * @member {Number} precip
 */
CurrentObs.prototype['precip'] = undefined;

/**
 * Pressure (mb)
 * @member {Number} pres
 */
CurrentObs.prototype['pres'] = undefined;

/**
 * Relative humidity (%)
 * @member {Number} rh
 */
CurrentObs.prototype['rh'] = undefined;

/**
 * Mean sea level pressure in millibars (mb)
 * @member {Number} slp
 */
CurrentObs.prototype['slp'] = undefined;

/**
 * Snowfall in last hour - Default (mm)
 * @member {Number} snow
 */
CurrentObs.prototype['snow'] = undefined;

/**
 * Estimated solar radiation (W/m^2)
 * @member {Number} solar_rad
 */
CurrentObs.prototype['solar_rad'] = undefined;

/**
 * List of data sources used in response
 * @member {Array.<String>} sources
 */
CurrentObs.prototype['sources'] = undefined;

/**
 * State abbreviation
 * @member {String} state_code
 */
CurrentObs.prototype['state_code'] = undefined;

/**
 * Source Station ID
 * @member {String} station
 */
CurrentObs.prototype['station'] = undefined;

/**
 * Time (UTC) of Sunrise (HH:MM)
 * @member {String} sunrise
 */
CurrentObs.prototype['sunrise'] = undefined;

/**
 * Time (UTC) of Sunset (HH:MM)
 * @member {String} sunset
 */
CurrentObs.prototype['sunset'] = undefined;

/**
 * Temperature - Default (C)
 * @member {Number} temp
 */
CurrentObs.prototype['temp'] = undefined;

/**
 * Local IANA time zone
 * @member {String} timezone
 */
CurrentObs.prototype['timezone'] = undefined;

/**
 * Unix Timestamp
 * @member {Number} ts
 */
CurrentObs.prototype['ts'] = undefined;

/**
 * UV Index
 * @member {Number} uv
 */
CurrentObs.prototype['uv'] = undefined;

/**
 * Visibility - default (M)
 * @member {Number} vis
 */
CurrentObs.prototype['vis'] = undefined;

/**
 * @member {module:model/CurrentObsWeather} weather
 */
CurrentObs.prototype['weather'] = undefined;

/**
 * Cardinal wind direction
 * @member {String} wind_cdir
 */
CurrentObs.prototype['wind_cdir'] = undefined;

/**
 * Cardinal wind direction (text)
 * @member {String} wind_cdir_full
 */
CurrentObs.prototype['wind_cdir_full'] = undefined;

/**
 * Wind direction (degrees)
 * @member {Number} wind_dir
 */
CurrentObs.prototype['wind_dir'] = undefined;

/**
 * Wind speed - Default (m/s)
 * @member {Number} wind_speed
 */
CurrentObs.prototype['wind_speed'] = undefined;






export default CurrentObs;

