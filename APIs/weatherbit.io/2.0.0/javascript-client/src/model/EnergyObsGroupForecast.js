/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnergyObsSeries from './EnergyObsSeries';

/**
 * The EnergyObsGroupForecast model module.
 * @module model/EnergyObsGroupForecast
 * @version 2.0.0
 */
class EnergyObsGroupForecast {
    /**
     * Constructs a new <code>EnergyObsGroupForecast</code>.
     * @alias module:model/EnergyObsGroupForecast
     */
    constructor() { 
        
        EnergyObsGroupForecast.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnergyObsGroupForecast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnergyObsGroupForecast} obj Optional instance to populate.
     * @return {module:model/EnergyObsGroupForecast} The populated <code>EnergyObsGroupForecast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnergyObsGroupForecast();

            if (data.hasOwnProperty('city_name')) {
                obj['city_name'] = ApiClient.convertToType(data['city_name'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [EnergyObsSeries]);
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'String');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'String');
            }
            if (data.hasOwnProperty('state_code')) {
                obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
            }
            if (data.hasOwnProperty('threshold_units')) {
                obj['threshold_units'] = ApiClient.convertToType(data['threshold_units'], 'String');
            }
            if (data.hasOwnProperty('threshold_value')) {
                obj['threshold_value'] = ApiClient.convertToType(data['threshold_value'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnergyObsGroupForecast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnergyObsGroupForecast</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city_name'] && !(typeof data['city_name'] === 'string' || data['city_name'] instanceof String)) {
            throw new Error("Expected the field `city_name` to be a primitive type in the JSON string but got " + data['city_name']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                EnergyObsSeries.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lat'] && !(typeof data['lat'] === 'string' || data['lat'] instanceof String)) {
            throw new Error("Expected the field `lat` to be a primitive type in the JSON string but got " + data['lat']);
        }
        // ensure the json data is a string
        if (data['lon'] && !(typeof data['lon'] === 'string' || data['lon'] instanceof String)) {
            throw new Error("Expected the field `lon` to be a primitive type in the JSON string but got " + data['lon']);
        }
        // ensure the json data is a string
        if (data['state_code'] && !(typeof data['state_code'] === 'string' || data['state_code'] instanceof String)) {
            throw new Error("Expected the field `state_code` to be a primitive type in the JSON string but got " + data['state_code']);
        }
        // ensure the json data is a string
        if (data['threshold_units'] && !(typeof data['threshold_units'] === 'string' || data['threshold_units'] instanceof String)) {
            throw new Error("Expected the field `threshold_units` to be a primitive type in the JSON string but got " + data['threshold_units']);
        }
        // ensure the json data is a string
        if (data['threshold_value'] && !(typeof data['threshold_value'] === 'string' || data['threshold_value'] instanceof String)) {
            throw new Error("Expected the field `threshold_value` to be a primitive type in the JSON string but got " + data['threshold_value']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * City name (closest)
 * @member {String} city_name
 */
EnergyObsGroupForecast.prototype['city_name'] = undefined;

/**
 * Country abbreviation
 * @member {String} country_code
 */
EnergyObsGroupForecast.prototype['country_code'] = undefined;

/**
 * @member {Array.<module:model/EnergyObsSeries>} data
 */
EnergyObsGroupForecast.prototype['data'] = undefined;

/**
 * Latitude
 * @member {String} lat
 */
EnergyObsGroupForecast.prototype['lat'] = undefined;

/**
 * Longitude
 * @member {String} lon
 */
EnergyObsGroupForecast.prototype['lon'] = undefined;

/**
 * State abbreviation
 * @member {String} state_code
 */
EnergyObsGroupForecast.prototype['state_code'] = undefined;

/**
 * Degree day threshold units
 * @member {String} threshold_units
 */
EnergyObsGroupForecast.prototype['threshold_units'] = undefined;

/**
 * Degree day threshold
 * @member {String} threshold_value
 */
EnergyObsGroupForecast.prototype['threshold_value'] = undefined;

/**
 * Local IANA time zone
 * @member {String} timezone
 */
EnergyObsGroupForecast.prototype['timezone'] = undefined;






export default EnergyObsGroupForecast;

