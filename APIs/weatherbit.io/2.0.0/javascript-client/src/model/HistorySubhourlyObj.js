/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoryObjWeather from './HistoryObjWeather';

/**
 * The HistorySubhourlyObj model module.
 * @module model/HistorySubhourlyObj
 * @version 2.0.0
 */
class HistorySubhourlyObj {
    /**
     * Constructs a new <code>HistorySubhourlyObj</code>.
     * @alias module:model/HistorySubhourlyObj
     */
    constructor() { 
        
        HistorySubhourlyObj.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistorySubhourlyObj</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistorySubhourlyObj} obj Optional instance to populate.
     * @return {module:model/HistorySubhourlyObj} The populated <code>HistorySubhourlyObj</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistorySubhourlyObj();

            if (data.hasOwnProperty('app_temp')) {
                obj['app_temp'] = ApiClient.convertToType(data['app_temp'], 'Number');
            }
            if (data.hasOwnProperty('azimuth')) {
                obj['azimuth'] = ApiClient.convertToType(data['azimuth'], 'Number');
            }
            if (data.hasOwnProperty('clouds')) {
                obj['clouds'] = ApiClient.convertToType(data['clouds'], 'Number');
            }
            if (data.hasOwnProperty('dewpt')) {
                obj['dewpt'] = ApiClient.convertToType(data['dewpt'], 'Number');
            }
            if (data.hasOwnProperty('dhi')) {
                obj['dhi'] = ApiClient.convertToType(data['dhi'], 'Number');
            }
            if (data.hasOwnProperty('dni')) {
                obj['dni'] = ApiClient.convertToType(data['dni'], 'Number');
            }
            if (data.hasOwnProperty('elev_angle')) {
                obj['elev_angle'] = ApiClient.convertToType(data['elev_angle'], 'Number');
            }
            if (data.hasOwnProperty('ghi')) {
                obj['ghi'] = ApiClient.convertToType(data['ghi'], 'Number');
            }
            if (data.hasOwnProperty('pod')) {
                obj['pod'] = ApiClient.convertToType(data['pod'], 'String');
            }
            if (data.hasOwnProperty('precip_rate')) {
                obj['precip_rate'] = ApiClient.convertToType(data['precip_rate'], 'Number');
            }
            if (data.hasOwnProperty('pres')) {
                obj['pres'] = ApiClient.convertToType(data['pres'], 'Number');
            }
            if (data.hasOwnProperty('revision_status')) {
                obj['revision_status'] = ApiClient.convertToType(data['revision_status'], 'String');
            }
            if (data.hasOwnProperty('rh')) {
                obj['rh'] = ApiClient.convertToType(data['rh'], 'Number');
            }
            if (data.hasOwnProperty('slp')) {
                obj['slp'] = ApiClient.convertToType(data['slp'], 'Number');
            }
            if (data.hasOwnProperty('snow_rate')) {
                obj['snow_rate'] = ApiClient.convertToType(data['snow_rate'], 'Number');
            }
            if (data.hasOwnProperty('solar_rad')) {
                obj['solar_rad'] = ApiClient.convertToType(data['solar_rad'], 'Number');
            }
            if (data.hasOwnProperty('temp')) {
                obj['temp'] = ApiClient.convertToType(data['temp'], 'Number');
            }
            if (data.hasOwnProperty('timestamp_local')) {
                obj['timestamp_local'] = ApiClient.convertToType(data['timestamp_local'], 'String');
            }
            if (data.hasOwnProperty('timestamp_utc')) {
                obj['timestamp_utc'] = ApiClient.convertToType(data['timestamp_utc'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'Number');
            }
            if (data.hasOwnProperty('uv')) {
                obj['uv'] = ApiClient.convertToType(data['uv'], 'Number');
            }
            if (data.hasOwnProperty('vis')) {
                obj['vis'] = ApiClient.convertToType(data['vis'], 'Number');
            }
            if (data.hasOwnProperty('weather')) {
                obj['weather'] = HistoryObjWeather.constructFromObject(data['weather']);
            }
            if (data.hasOwnProperty('wind_dir')) {
                obj['wind_dir'] = ApiClient.convertToType(data['wind_dir'], 'Number');
            }
            if (data.hasOwnProperty('wind_gust_spd')) {
                obj['wind_gust_spd'] = ApiClient.convertToType(data['wind_gust_spd'], 'Number');
            }
            if (data.hasOwnProperty('wind_spd')) {
                obj['wind_spd'] = ApiClient.convertToType(data['wind_spd'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistorySubhourlyObj</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistorySubhourlyObj</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pod'] && !(typeof data['pod'] === 'string' || data['pod'] instanceof String)) {
            throw new Error("Expected the field `pod` to be a primitive type in the JSON string but got " + data['pod']);
        }
        // ensure the json data is a string
        if (data['revision_status'] && !(typeof data['revision_status'] === 'string' || data['revision_status'] instanceof String)) {
            throw new Error("Expected the field `revision_status` to be a primitive type in the JSON string but got " + data['revision_status']);
        }
        // ensure the json data is a string
        if (data['timestamp_local'] && !(typeof data['timestamp_local'] === 'string' || data['timestamp_local'] instanceof String)) {
            throw new Error("Expected the field `timestamp_local` to be a primitive type in the JSON string but got " + data['timestamp_local']);
        }
        // ensure the json data is a string
        if (data['timestamp_utc'] && !(typeof data['timestamp_utc'] === 'string' || data['timestamp_utc'] instanceof String)) {
            throw new Error("Expected the field `timestamp_utc` to be a primitive type in the JSON string but got " + data['timestamp_utc']);
        }
        // validate the optional field `weather`
        if (data['weather']) { // data not null
          HistoryObjWeather.validateJSON(data['weather']);
        }

        return true;
    }


}



/**
 * Apparent Temperature or Wind Chill/Heat Index (Default Celcius)
 * @member {Number} app_temp
 */
HistorySubhourlyObj.prototype['app_temp'] = undefined;

/**
 * Solar azimuth angle (Degrees)
 * @member {Number} azimuth
 */
HistorySubhourlyObj.prototype['azimuth'] = undefined;

/**
 * Cloud Cover 0-100 (%)
 * @member {Number} clouds
 */
HistorySubhourlyObj.prototype['clouds'] = undefined;

/**
 * Dew point (Default Celcius)
 * @member {Number} dewpt
 */
HistorySubhourlyObj.prototype['dewpt'] = undefined;

/**
 * Diffuse normal solar irradiance (W/m^2)
 * @member {Number} dhi
 */
HistorySubhourlyObj.prototype['dhi'] = undefined;

/**
 * Direct normal solar irradiance (W/m^2)
 * @member {Number} dni
 */
HistorySubhourlyObj.prototype['dni'] = undefined;

/**
 * Solar elevation angle (Degrees)
 * @member {Number} elev_angle
 */
HistorySubhourlyObj.prototype['elev_angle'] = undefined;

/**
 * Global horizontal solar irradiance (W/m^2)
 * @member {Number} ghi
 */
HistorySubhourlyObj.prototype['ghi'] = undefined;

/**
 * Part of the day (d = day, n = night)
 * @member {String} pod
 */
HistorySubhourlyObj.prototype['pod'] = undefined;

/**
 * Liquid equivalent precipitation rate - Default (mm/hr)
 * @member {Number} precip_rate
 */
HistorySubhourlyObj.prototype['precip_rate'] = undefined;

/**
 * Pressure (mb)
 * @member {Number} pres
 */
HistorySubhourlyObj.prototype['pres'] = undefined;

/**
 * Data revision status (interim or final)
 * @member {String} revision_status
 */
HistorySubhourlyObj.prototype['revision_status'] = undefined;

/**
 * Relative Humidity as a percentage (%)
 * @member {Number} rh
 */
HistorySubhourlyObj.prototype['rh'] = undefined;

/**
 * Sea level pressure (mb)
 * @member {Number} slp
 */
HistorySubhourlyObj.prototype['slp'] = undefined;

/**
 * Snowfall Rate - Default (mm/hr)
 * @member {Number} snow_rate
 */
HistorySubhourlyObj.prototype['snow_rate'] = undefined;

/**
 * Estimated solar radiation (W/m^2)
 * @member {Number} solar_rad
 */
HistorySubhourlyObj.prototype['solar_rad'] = undefined;

/**
 * Temperature (Default Celcius)
 * @member {Number} temp
 */
HistorySubhourlyObj.prototype['temp'] = undefined;

/**
 * Timestamp in local time
 * @member {String} timestamp_local
 */
HistorySubhourlyObj.prototype['timestamp_local'] = undefined;

/**
 * Timestamp UTC
 * @member {String} timestamp_utc
 */
HistorySubhourlyObj.prototype['timestamp_utc'] = undefined;

/**
 * Unix Timestamp
 * @member {Number} ts
 */
HistorySubhourlyObj.prototype['ts'] = undefined;

/**
 * UV Index (1-11+)
 * @member {Number} uv
 */
HistorySubhourlyObj.prototype['uv'] = undefined;

/**
 * Visibility (KM)
 * @member {Number} vis
 */
HistorySubhourlyObj.prototype['vis'] = undefined;

/**
 * @member {module:model/HistoryObjWeather} weather
 */
HistorySubhourlyObj.prototype['weather'] = undefined;

/**
 * Wind direction (Degrees)
 * @member {Number} wind_dir
 */
HistorySubhourlyObj.prototype['wind_dir'] = undefined;

/**
 * Wind Gust Speed - Default (m/s)
 * @member {Number} wind_gust_spd
 */
HistorySubhourlyObj.prototype['wind_gust_spd'] = undefined;

/**
 * Wind Speed (Default m/s)
 * @member {Number} wind_spd
 */
HistorySubhourlyObj.prototype['wind_spd'] = undefined;






export default HistorySubhourlyObj;

