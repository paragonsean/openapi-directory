/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HistoryDayObj model module.
 * @module model/HistoryDayObj
 * @version 2.0.0
 */
class HistoryDayObj {
    /**
     * Constructs a new <code>HistoryDayObj</code>.
     * @alias module:model/HistoryDayObj
     */
    constructor() { 
        
        HistoryDayObj.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoryDayObj</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoryDayObj} obj Optional instance to populate.
     * @return {module:model/HistoryDayObj} The populated <code>HistoryDayObj</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoryDayObj();

            if (data.hasOwnProperty('datetime')) {
                obj['datetime'] = ApiClient.convertToType(data['datetime'], 'String');
            }
            if (data.hasOwnProperty('dewpt')) {
                obj['dewpt'] = ApiClient.convertToType(data['dewpt'], 'Number');
            }
            if (data.hasOwnProperty('dhi')) {
                obj['dhi'] = ApiClient.convertToType(data['dhi'], 'Number');
            }
            if (data.hasOwnProperty('dni')) {
                obj['dni'] = ApiClient.convertToType(data['dni'], 'Number');
            }
            if (data.hasOwnProperty('ghi')) {
                obj['ghi'] = ApiClient.convertToType(data['ghi'], 'Number');
            }
            if (data.hasOwnProperty('max_temp')) {
                obj['max_temp'] = ApiClient.convertToType(data['max_temp'], 'Number');
            }
            if (data.hasOwnProperty('max_temp_ts')) {
                obj['max_temp_ts'] = ApiClient.convertToType(data['max_temp_ts'], 'Number');
            }
            if (data.hasOwnProperty('max_uv')) {
                obj['max_uv'] = ApiClient.convertToType(data['max_uv'], 'Number');
            }
            if (data.hasOwnProperty('max_wind_dir')) {
                obj['max_wind_dir'] = ApiClient.convertToType(data['max_wind_dir'], 'Number');
            }
            if (data.hasOwnProperty('max_wind_spd')) {
                obj['max_wind_spd'] = ApiClient.convertToType(data['max_wind_spd'], 'Number');
            }
            if (data.hasOwnProperty('max_wind_spd_ts')) {
                obj['max_wind_spd_ts'] = ApiClient.convertToType(data['max_wind_spd_ts'], 'Number');
            }
            if (data.hasOwnProperty('min_temp')) {
                obj['min_temp'] = ApiClient.convertToType(data['min_temp'], 'Number');
            }
            if (data.hasOwnProperty('min_temp_ts')) {
                obj['min_temp_ts'] = ApiClient.convertToType(data['min_temp_ts'], 'Number');
            }
            if (data.hasOwnProperty('precip')) {
                obj['precip'] = ApiClient.convertToType(data['precip'], 'Number');
            }
            if (data.hasOwnProperty('precip_gpm')) {
                obj['precip_gpm'] = ApiClient.convertToType(data['precip_gpm'], 'Number');
            }
            if (data.hasOwnProperty('pres')) {
                obj['pres'] = ApiClient.convertToType(data['pres'], 'Number');
            }
            if (data.hasOwnProperty('revision_status')) {
                obj['revision_status'] = ApiClient.convertToType(data['revision_status'], 'String');
            }
            if (data.hasOwnProperty('rh')) {
                obj['rh'] = ApiClient.convertToType(data['rh'], 'Number');
            }
            if (data.hasOwnProperty('slp')) {
                obj['slp'] = ApiClient.convertToType(data['slp'], 'Number');
            }
            if (data.hasOwnProperty('snow')) {
                obj['snow'] = ApiClient.convertToType(data['snow'], 'Number');
            }
            if (data.hasOwnProperty('snow_depth')) {
                obj['snow_depth'] = ApiClient.convertToType(data['snow_depth'], 'Number');
            }
            if (data.hasOwnProperty('t_dhi')) {
                obj['t_dhi'] = ApiClient.convertToType(data['t_dhi'], 'Number');
            }
            if (data.hasOwnProperty('t_dni')) {
                obj['t_dni'] = ApiClient.convertToType(data['t_dni'], 'Number');
            }
            if (data.hasOwnProperty('t_ghi')) {
                obj['t_ghi'] = ApiClient.convertToType(data['t_ghi'], 'Number');
            }
            if (data.hasOwnProperty('temp')) {
                obj['temp'] = ApiClient.convertToType(data['temp'], 'Number');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'Number');
            }
            if (data.hasOwnProperty('wind_dir')) {
                obj['wind_dir'] = ApiClient.convertToType(data['wind_dir'], 'Number');
            }
            if (data.hasOwnProperty('wind_gust_spd')) {
                obj['wind_gust_spd'] = ApiClient.convertToType(data['wind_gust_spd'], 'Number');
            }
            if (data.hasOwnProperty('wind_spd')) {
                obj['wind_spd'] = ApiClient.convertToType(data['wind_spd'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoryDayObj</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoryDayObj</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['datetime'] && !(typeof data['datetime'] === 'string' || data['datetime'] instanceof String)) {
            throw new Error("Expected the field `datetime` to be a primitive type in the JSON string but got " + data['datetime']);
        }
        // ensure the json data is a string
        if (data['revision_status'] && !(typeof data['revision_status'] === 'string' || data['revision_status'] instanceof String)) {
            throw new Error("Expected the field `revision_status` to be a primitive type in the JSON string but got " + data['revision_status']);
        }

        return true;
    }


}



/**
 * Date in format \"YYYY-MM-DD\". All datetime is in (UTC)
 * @member {String} datetime
 */
HistoryDayObj.prototype['datetime'] = undefined;

/**
 * Average dewpoint - Default (C)
 * @member {Number} dewpt
 */
HistoryDayObj.prototype['dewpt'] = undefined;

/**
 * Average hourly diffuse horizontal solar irradiance (W/m^2)
 * @member {Number} dhi
 */
HistoryDayObj.prototype['dhi'] = undefined;

/**
 * Average direct normal solar irradiance (W/m^2)
 * @member {Number} dni
 */
HistoryDayObj.prototype['dni'] = undefined;

/**
 * Average hourly global horizontal solar irradiance (W/m^2)
 * @member {Number} ghi
 */
HistoryDayObj.prototype['ghi'] = undefined;

/**
 * Max temperature - Default (C)
 * @member {Number} max_temp
 */
HistoryDayObj.prototype['max_temp'] = undefined;

/**
 * Time of max memperature - Unix Timestamp
 * @member {Number} max_temp_ts
 */
HistoryDayObj.prototype['max_temp_ts'] = undefined;

/**
 * Max UV Index (1-11+)
 * @member {Number} max_uv
 */
HistoryDayObj.prototype['max_uv'] = undefined;

/**
 * Direction of wind at time of max 2min wind (degrees)
 * @member {Number} max_wind_dir
 */
HistoryDayObj.prototype['max_wind_dir'] = undefined;

/**
 * Max 2min Wind Speed - default (m/s)
 * @member {Number} max_wind_spd
 */
HistoryDayObj.prototype['max_wind_spd'] = undefined;

/**
 * Time of max 2min wind - unix timestamp
 * @member {Number} max_wind_spd_ts
 */
HistoryDayObj.prototype['max_wind_spd_ts'] = undefined;

/**
 * Min temperature - Default (C)
 * @member {Number} min_temp
 */
HistoryDayObj.prototype['min_temp'] = undefined;

/**
 * Time of max temperature - unix timestamp
 * @member {Number} min_temp_ts
 */
HistoryDayObj.prototype['min_temp_ts'] = undefined;

/**
 * Liquid equivalent precipitation - default (mm)
 * @member {Number} precip
 */
HistoryDayObj.prototype['precip'] = undefined;

/**
 * Satellite estimated liquid equivalent precipitation - default (mm)
 * @member {Number} precip_gpm
 */
HistoryDayObj.prototype['precip_gpm'] = undefined;

/**
 * Average pressure (mb)
 * @member {Number} pres
 */
HistoryDayObj.prototype['pres'] = undefined;

/**
 * Data revision status (interim or final)
 * @member {String} revision_status
 */
HistoryDayObj.prototype['revision_status'] = undefined;

/**
 * Average relative humidity as a percentage (%)
 * @member {Number} rh
 */
HistoryDayObj.prototype['rh'] = undefined;

/**
 * Average sea level pressure (mb)
 * @member {Number} slp
 */
HistoryDayObj.prototype['slp'] = undefined;

/**
 * Snowfall - default (mm)
 * @member {Number} snow
 */
HistoryDayObj.prototype['snow'] = undefined;

/**
 * Snow Depth - default (mm)
 * @member {Number} snow_depth
 */
HistoryDayObj.prototype['snow_depth'] = undefined;

/**
 * Total diffuse horizontal solar irradiance (W/m^2)
 * @member {Number} t_dhi
 */
HistoryDayObj.prototype['t_dhi'] = undefined;

/**
 * Total direct normal solar irradiance (W/m^2)
 * @member {Number} t_dni
 */
HistoryDayObj.prototype['t_dni'] = undefined;

/**
 * Total global horizontal solar irradiance (W/m^2)
 * @member {Number} t_ghi
 */
HistoryDayObj.prototype['t_ghi'] = undefined;

/**
 * Average temperature - Default (C)
 * @member {Number} temp
 */
HistoryDayObj.prototype['temp'] = undefined;

/**
 * Unix timestamp of datetime (Midnight UTC)
 * @member {Number} ts
 */
HistoryDayObj.prototype['ts'] = undefined;

/**
 * Average wind direction (degrees)
 * @member {Number} wind_dir
 */
HistoryDayObj.prototype['wind_dir'] = undefined;

/**
 * Wind gust speed - default (m/s)
 * @member {Number} wind_gust_spd
 */
HistoryDayObj.prototype['wind_gust_spd'] = undefined;

/**
 * Average wind speed - default (m/s)
 * @member {Number} wind_spd
 */
HistoryDayObj.prototype['wind_spd'] = undefined;






export default HistoryDayObj;

