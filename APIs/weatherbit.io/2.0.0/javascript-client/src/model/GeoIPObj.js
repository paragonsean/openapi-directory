/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoIPObj model module.
 * @module model/GeoIPObj
 * @version 2.0.0
 */
class GeoIPObj {
    /**
     * Constructs a new <code>GeoIPObj</code>.
     * @alias module:model/GeoIPObj
     */
    constructor() { 
        
        GeoIPObj.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoIPObj</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoIPObj} obj Optional instance to populate.
     * @return {module:model/GeoIPObj} The populated <code>GeoIPObj</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoIPObj();

            if (data.hasOwnProperty('area_code')) {
                obj['area_code'] = ApiClient.convertToType(data['area_code'], 'String');
            }
            if (data.hasOwnProperty('charset')) {
                obj['charset'] = ApiClient.convertToType(data['charset'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('continent_code')) {
                obj['continent_code'] = ApiClient.convertToType(data['continent_code'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_code3')) {
                obj['country_code3'] = ApiClient.convertToType(data['country_code3'], 'String');
            }
            if (data.hasOwnProperty('dma_code')) {
                obj['dma_code'] = ApiClient.convertToType(data['dma_code'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('metro_code')) {
                obj['metro_code'] = ApiClient.convertToType(data['metro_code'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoIPObj</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoIPObj</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['area_code'] && !(typeof data['area_code'] === 'string' || data['area_code'] instanceof String)) {
            throw new Error("Expected the field `area_code` to be a primitive type in the JSON string but got " + data['area_code']);
        }
        // ensure the json data is a string
        if (data['charset'] && !(typeof data['charset'] === 'string' || data['charset'] instanceof String)) {
            throw new Error("Expected the field `charset` to be a primitive type in the JSON string but got " + data['charset']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['continent_code'] && !(typeof data['continent_code'] === 'string' || data['continent_code'] instanceof String)) {
            throw new Error("Expected the field `continent_code` to be a primitive type in the JSON string but got " + data['continent_code']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_code3'] && !(typeof data['country_code3'] === 'string' || data['country_code3'] instanceof String)) {
            throw new Error("Expected the field `country_code3` to be a primitive type in the JSON string but got " + data['country_code3']);
        }
        // ensure the json data is a string
        if (data['dma_code'] && !(typeof data['dma_code'] === 'string' || data['dma_code'] instanceof String)) {
            throw new Error("Expected the field `dma_code` to be a primitive type in the JSON string but got " + data['dma_code']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['metro_code'] && !(typeof data['metro_code'] === 'string' || data['metro_code'] instanceof String)) {
            throw new Error("Expected the field `metro_code` to be a primitive type in the JSON string but got " + data['metro_code']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * Area Code
 * @member {String} area_code
 */
GeoIPObj.prototype['area_code'] = undefined;

/**
 * Character encoding
 * @member {String} charset
 */
GeoIPObj.prototype['charset'] = undefined;

/**
 * City Name
 * @member {String} city
 */
GeoIPObj.prototype['city'] = undefined;

/**
 * Country Abbreviation
 * @member {String} continent_code
 */
GeoIPObj.prototype['continent_code'] = undefined;

/**
 * Country Code (Short)
 * @member {String} country_code
 */
GeoIPObj.prototype['country_code'] = undefined;

/**
 * Country Code (Long)
 * @member {String} country_code3
 */
GeoIPObj.prototype['country_code3'] = undefined;

/**
 * Longitude
 * @member {String} dma_code
 */
GeoIPObj.prototype['dma_code'] = undefined;

/**
 * IP Address
 * @member {String} ip
 */
GeoIPObj.prototype['ip'] = undefined;

/**
 * State Abbreviation
 * @member {String} latitude
 */
GeoIPObj.prototype['latitude'] = undefined;

/**
 * City Name
 * @member {String} longitude
 */
GeoIPObj.prototype['longitude'] = undefined;

/**
 * Longitude
 * @member {String} metro_code
 */
GeoIPObj.prototype['metro_code'] = undefined;

/**
 * UTC Offset (deprecated)
 * @member {String} offset
 */
GeoIPObj.prototype['offset'] = undefined;

/**
 * Organization Name
 * @member {String} organization
 */
GeoIPObj.prototype['organization'] = undefined;

/**
 * Postal Code
 * @member {String} postal_code
 */
GeoIPObj.prototype['postal_code'] = undefined;

/**
 * Latitude
 * @member {String} region
 */
GeoIPObj.prototype['region'] = undefined;

/**
 * Local IANA time zone
 * @member {String} timezone
 */
GeoIPObj.prototype['timezone'] = undefined;






export default GeoIPObj;

