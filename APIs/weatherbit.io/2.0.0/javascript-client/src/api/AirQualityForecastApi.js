/**
 * Weatherbit - Interactive Swagger UI Documentation
 * This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AQHourly from '../model/AQHourly';
import Error from '../model/Error';

/**
* AirQualityForecast service.
* @module api/AirQualityForecastApi
* @version 2.0.0
*/
export default class AirQualityForecastApi {

    /**
    * Constructs a new AirQualityForecastApi. 
    * @alias module:api/AirQualityForecastApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the forecastAirqualitycityIdcityIdGet operation.
     * @callback module:api/AirQualityForecastApi~forecastAirqualitycityIdcityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AQHourly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns 72 hour (hourly) Air Quality forecast - Given a City ID.
     * Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
     * @param {Number} cityId City ID. Example: 4487042
     * @param {String} key Your registered API key.
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Wraps return in jsonp callback. Example - callback=func
     * @param {Number} [hours] Number of hours to return.
     * @param {module:api/AirQualityForecastApi~forecastAirqualitycityIdcityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AQHourly}
     */
    forecastAirqualitycityIdcityIdGet(cityId, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling forecastAirqualitycityIdcityIdGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling forecastAirqualitycityIdcityIdGet");
      }

      let pathParams = {
        'city_id': cityId
      };
      let queryParams = {
        'callback': opts['callback'],
        'hours': opts['hours'],
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AQHourly;
      return this.apiClient.callApi(
        '/forecast/airquality?city_id={city_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastAirqualitycitycitycountrycountryGet operation.
     * @callback module:api/AirQualityForecastApi~forecastAirqualitycitycitycountrycountryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AQHourly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns 72 hour (hourly) Air Quality forecast - Given City and/or State, Country.
     * Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
     * @param {String} city City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
     * @param {String} country Country Code (2 letter).
     * @param {String} key Your registered API key.
     * @param {Object} opts Optional parameters
     * @param {String} [state] Full name of state.
     * @param {String} [callback] Wraps return in jsonp callback. Example: callback=func
     * @param {Number} [hours] Number of hours to return.
     * @param {module:api/AirQualityForecastApi~forecastAirqualitycitycitycountrycountryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AQHourly}
     */
    forecastAirqualitycitycitycountrycountryGet(city, country, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'city' is set
      if (city === undefined || city === null) {
        throw new Error("Missing the required parameter 'city' when calling forecastAirqualitycitycitycountrycountryGet");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling forecastAirqualitycitycitycountrycountryGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling forecastAirqualitycitycitycountrycountryGet");
      }

      let pathParams = {
        'city': city,
        'country': country
      };
      let queryParams = {
        'state': opts['state'],
        'callback': opts['callback'],
        'hours': opts['hours'],
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AQHourly;
      return this.apiClient.callApi(
        '/forecast/airquality?city={city}&country={country}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastAirqualitylatlatlonlonGet operation.
     * @callback module:api/AirQualityForecastApi~forecastAirqualitylatlatlonlonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AQHourly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns 72 hour (hourly) Air Quality forecast - Given a lat/lon.
     * Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
     * @param {Number} lat Latitude component of location.
     * @param {Number} lon Longitude component of location.
     * @param {String} key Your registered API key.
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Wraps return in jsonp callback. Example - callback=func
     * @param {Number} [hours] Number of hours to return.
     * @param {module:api/AirQualityForecastApi~forecastAirqualitylatlatlonlonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AQHourly}
     */
    forecastAirqualitylatlatlonlonGet(lat, lon, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling forecastAirqualitylatlatlonlonGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling forecastAirqualitylatlatlonlonGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling forecastAirqualitylatlatlonlonGet");
      }

      let pathParams = {
        'lat': lat,
        'lon': lon
      };
      let queryParams = {
        'callback': opts['callback'],
        'key': key,
        'hours': opts['hours']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AQHourly;
      return this.apiClient.callApi(
        '/forecast/airquality?lat={lat}&lon={lon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastAirqualitypostalCodepostalCodeGet operation.
     * @callback module:api/AirQualityForecastApi~forecastAirqualitypostalCodepostalCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AQHourly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns 72 hour (hourly) Air Quality forecast - Given a Postal Code.
     * Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
     * @param {Number} postalCode Postal Code. Example: 28546
     * @param {String} key Your registered API key.
     * @param {Object} opts Optional parameters
     * @param {String} [country] Country Code (2 letter).
     * @param {String} [callback] Wraps return in jsonp callback. Example - callback=func
     * @param {Number} [hours] Number of hours to return.
     * @param {module:api/AirQualityForecastApi~forecastAirqualitypostalCodepostalCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AQHourly}
     */
    forecastAirqualitypostalCodepostalCodeGet(postalCode, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'postalCode' is set
      if (postalCode === undefined || postalCode === null) {
        throw new Error("Missing the required parameter 'postalCode' when calling forecastAirqualitypostalCodepostalCodeGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling forecastAirqualitypostalCodepostalCodeGet");
      }

      let pathParams = {
        'postal_code': postalCode
      };
      let queryParams = {
        'country': opts['country'],
        'callback': opts['callback'],
        'hours': opts['hours'],
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AQHourly;
      return this.apiClient.callApi(
        '/forecast/airquality?postal_code={postal_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
