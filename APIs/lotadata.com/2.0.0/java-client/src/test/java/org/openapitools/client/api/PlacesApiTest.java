/*
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PlaceDetail;
import org.openapitools.client.model.PlacesSearchResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlacesApi
 */
@Disabled
public class PlacesApiTest {

    private final PlacesApi api = new PlacesApi();

    /**
     * Venues, landmarks, regions, these are all places to search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placesGetTest() throws ApiException {
        String fieldset = null;
        List<String> category = null;
        List<String> function = null;
        List<String> ambience = null;
        List<String> tag = null;
        String type = null;
        String name = null;
        Boolean exact = null;
        BigDecimal capacityMin = null;
        BigDecimal capacityMax = null;
        String street = null;
        String locality = null;
        String region = null;
        String postalCode = null;
        String country = null;
        String center = null;
        Integer radius = null;
        List<String> bbox = null;
        List<String> polygon = null;
        String within = null;
        Integer offset = null;
        Integer limit = null;
        PlacesSearchResponse response = api.placesGet(fieldset, category, function, ambience, tag, type, name, exact, capacityMin, capacityMax, street, locality, region, postalCode, country, center, radius, bbox, polygon, within, offset, limit);
        // TODO: test validations
    }

    /**
     * Get specific place details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placesIdGetTest() throws ApiException {
        String id = null;
        String fieldset = null;
        PlaceDetail response = api.placesIdGet(id, fieldset);
        // TODO: test validations
    }

}
