/*
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.FeatureReference;
import org.openapitools.client.model.GeoPt;
import org.openapitools.client.model.ImageMeta;
import org.openapitools.client.model.VirtualLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Unique Location
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:02.676450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaceReference {
  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private String atId;

  /**
   * Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world
   */
  @JsonAdapter(AtTypeEnum.Adapter.class)
  public enum AtTypeEnum {
    PLACE("Place"),
    
    LOCAL_BUSINESS("LocalBusiness"),
    
    ADMINISTRATIVE_AREA("AdministrativeArea"),
    
    TOURIST_ATTRACTION("TouristAttraction"),
    
    LANDFORM("Landform"),
    
    LANDMARKS_OR_HISTORICAL_BUILDINGS("LandmarksOrHistoricalBuildings"),
    
    RESIDENCE("Residence"),
    
    VIRTUAL("Virtual");

    private String value;

    AtTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtTypeEnum fromValue(String value) {
      for (AtTypeEnum b : AtTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private AtTypeEnum atType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_GEO = "geo";
  @SerializedName(SERIALIZED_NAME_GEO)
  private GeoPt geo;

  public static final String SERIALIZED_NAME_GEOMETRY = "geometry";
  @SerializedName(SERIALIZED_NAME_GEOMETRY)
  private Object geometry;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private VirtualLocation location;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private ImageMeta logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<FeatureReference> tag = new ArrayList<>();

  public PlaceReference() {
  }

  public PlaceReference atId(String atId) {
    this.atId = atId;
    return this;
  }

  /**
   * Get atId
   * @return atId
   */
  @javax.annotation.Nullable
  public String getAtId() {
    return atId;
  }

  public void setAtId(String atId) {
    this.atId = atId;
  }


  public PlaceReference atType(AtTypeEnum atType) {
    this.atType = atType;
    return this;
  }

  /**
   * Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world
   * @return atType
   */
  @javax.annotation.Nullable
  public AtTypeEnum getAtType() {
    return atType;
  }

  public void setAtType(AtTypeEnum atType) {
    this.atType = atType;
  }


  public PlaceReference address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public PlaceReference geo(GeoPt geo) {
    this.geo = geo;
    return this;
  }

  /**
   * Get geo
   * @return geo
   */
  @javax.annotation.Nullable
  public GeoPt getGeo() {
    return geo;
  }

  public void setGeo(GeoPt geo) {
    this.geo = geo;
  }


  public PlaceReference geometry(Object geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Shape defined per GeoJSON spec
   * @return geometry
   */
  @javax.annotation.Nullable
  public Object getGeometry() {
    return geometry;
  }

  public void setGeometry(Object geometry) {
    this.geometry = geometry;
  }


  public PlaceReference location(VirtualLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public VirtualLocation getLocation() {
    return location;
  }

  public void setLocation(VirtualLocation location) {
    this.location = location;
  }


  public PlaceReference logo(ImageMeta logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public ImageMeta getLogo() {
    return logo;
  }

  public void setLogo(ImageMeta logo) {
    this.logo = logo;
  }


  public PlaceReference name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlaceReference tag(List<FeatureReference> tag) {
    this.tag = tag;
    return this;
  }

  public PlaceReference addTagItem(FeatureReference tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getTag() {
    return tag;
  }

  public void setTag(List<FeatureReference> tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceReference placeReference = (PlaceReference) o;
    return Objects.equals(this.atId, placeReference.atId) &&
        Objects.equals(this.atType, placeReference.atType) &&
        Objects.equals(this.address, placeReference.address) &&
        Objects.equals(this.geo, placeReference.geo) &&
        Objects.equals(this.geometry, placeReference.geometry) &&
        Objects.equals(this.location, placeReference.location) &&
        Objects.equals(this.logo, placeReference.logo) &&
        Objects.equals(this.name, placeReference.name) &&
        Objects.equals(this.tag, placeReference.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atId, atType, address, geo, geometry, location, logo, name, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceReference {\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    geo: ").append(toIndentedString(geo)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("address");
    openapiFields.add("geo");
    openapiFields.add("geometry");
    openapiFields.add("location");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaceReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaceReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaceReference is not found in the empty JSON string", PlaceReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaceReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaceReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("@id") != null && !jsonObj.get("@id").isJsonNull()) && !jsonObj.get("@id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@id").toString()));
      }
      if ((jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) && !jsonObj.get("@type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@type").toString()));
      }
      // validate the optional field `@type`
      if (jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) {
        AtTypeEnum.validateJsonElement(jsonObj.get("@type"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `geo`
      if (jsonObj.get("geo") != null && !jsonObj.get("geo").isJsonNull()) {
        GeoPt.validateJsonElement(jsonObj.get("geo"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        VirtualLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        ImageMeta.validateJsonElement(jsonObj.get("logo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        JsonArray jsonArraytag = jsonObj.getAsJsonArray("tag");
        if (jsonArraytag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
          }

          // validate the optional field `tag` (array)
          for (int i = 0; i < jsonArraytag.size(); i++) {
            FeatureReference.validateJsonElement(jsonArraytag.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaceReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaceReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaceReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaceReference.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaceReference>() {
           @Override
           public void write(JsonWriter out, PlaceReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaceReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaceReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaceReference
   * @throws IOException if the JSON string is invalid with respect to PlaceReference
   */
  public static PlaceReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaceReference.class);
  }

  /**
   * Convert an instance of PlaceReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

