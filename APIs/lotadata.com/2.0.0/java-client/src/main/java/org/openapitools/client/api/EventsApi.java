/*
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.EventOccurenceDetail;
import org.openapitools.client.model.EventsSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventsGet
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required EventCategory ids (Tier 1) (optional)
     * @param activity List of required activity type ids (compliment to category) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param genre List of required genre ids (optional)
     * @param name Matching on event and place names (optional)
     * @param q Text query matching titles, description, various text, tags, category (optional)
     * @param fromDay Start on or after date specified (2015-10-16) (optional)
     * @param toDay Start on or before date specified (2015-10-16) (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetCall(String fieldset, List<String> category, String activity, String ambience, String genre, String name, String q, String fromDay, String toDay, BigDecimal capacityMin, BigDecimal capacityMax, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (ambience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ambience", ambience));
        }

        if (genre != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genre", genre));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_day", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_day", toDay));
        }

        if (capacityMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capacity_min", capacityMin));
        }

        if (capacityMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capacity_max", capacityMax));
        }

        if (center != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("center", center));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (bbox != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "bbox", bbox));
        }

        if (polygon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "polygon", polygon));
        }

        if (within != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within", within));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fieldset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldset", fieldset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetValidateBeforeCall(String fieldset, List<String> category, String activity, String ambience, String genre, String name, String q, String fromDay, String toDay, BigDecimal capacityMin, BigDecimal capacityMax, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldset' is set
        if (fieldset == null) {
            throw new ApiException("Missing the required parameter 'fieldset' when calling eventsGet(Async)");
        }

        return eventsGetCall(fieldset, category, activity, ambience, genre, name, q, fromDay, toDay, capacityMin, capacityMax, center, radius, bbox, polygon, within, offset, limit, _callback);

    }

    /**
     * Find event occurrences in the area. Returns results at specific place and time, event groups are expanded for every occurrence.
     * 
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required EventCategory ids (Tier 1) (optional)
     * @param activity List of required activity type ids (compliment to category) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param genre List of required genre ids (optional)
     * @param name Matching on event and place names (optional)
     * @param q Text query matching titles, description, various text, tags, category (optional)
     * @param fromDay Start on or after date specified (2015-10-16) (optional)
     * @param toDay Start on or before date specified (2015-10-16) (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @return EventsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public EventsSearchResponse eventsGet(String fieldset, List<String> category, String activity, String ambience, String genre, String name, String q, String fromDay, String toDay, BigDecimal capacityMin, BigDecimal capacityMax, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit) throws ApiException {
        ApiResponse<EventsSearchResponse> localVarResp = eventsGetWithHttpInfo(fieldset, category, activity, ambience, genre, name, q, fromDay, toDay, capacityMin, capacityMax, center, radius, bbox, polygon, within, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Find event occurrences in the area. Returns results at specific place and time, event groups are expanded for every occurrence.
     * 
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required EventCategory ids (Tier 1) (optional)
     * @param activity List of required activity type ids (compliment to category) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param genre List of required genre ids (optional)
     * @param name Matching on event and place names (optional)
     * @param q Text query matching titles, description, various text, tags, category (optional)
     * @param fromDay Start on or after date specified (2015-10-16) (optional)
     * @param toDay Start on or before date specified (2015-10-16) (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @return ApiResponse&lt;EventsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsSearchResponse> eventsGetWithHttpInfo(String fieldset, List<String> category, String activity, String ambience, String genre, String name, String q, String fromDay, String toDay, BigDecimal capacityMin, BigDecimal capacityMax, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(fieldset, category, activity, ambience, genre, name, q, fromDay, toDay, capacityMin, capacityMax, center, radius, bbox, polygon, within, offset, limit, null);
        Type localVarReturnType = new TypeToken<EventsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find event occurrences in the area. Returns results at specific place and time, event groups are expanded for every occurrence. (asynchronously)
     * 
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required EventCategory ids (Tier 1) (optional)
     * @param activity List of required activity type ids (compliment to category) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param genre List of required genre ids (optional)
     * @param name Matching on event and place names (optional)
     * @param q Text query matching titles, description, various text, tags, category (optional)
     * @param fromDay Start on or after date specified (2015-10-16) (optional)
     * @param toDay Start on or before date specified (2015-10-16) (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetAsync(String fieldset, List<String> category, String activity, String ambience, String genre, String name, String q, String fromDay, String toDay, BigDecimal capacityMin, BigDecimal capacityMax, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit, final ApiCallback<EventsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(fieldset, category, activity, ambience, genre, name, q, fromDay, toDay, capacityMin, capacityMax, center, radius, bbox, polygon, within, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<EventsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsIdGet
     * @param id event @id (required)
     * @param fieldset  (optional, default to summary)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested event </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdGetCall(String id, String fieldset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldset", fieldset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsIdGetValidateBeforeCall(String id, String fieldset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsIdGet(Async)");
        }

        return eventsIdGetCall(id, fieldset, _callback);

    }

    /**
     * Get Specific event details.
     * 
     * @param id event @id (required)
     * @param fieldset  (optional, default to summary)
     * @return EventOccurenceDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested event </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public EventOccurenceDetail eventsIdGet(String id, String fieldset) throws ApiException {
        ApiResponse<EventOccurenceDetail> localVarResp = eventsIdGetWithHttpInfo(id, fieldset);
        return localVarResp.getData();
    }

    /**
     * Get Specific event details.
     * 
     * @param id event @id (required)
     * @param fieldset  (optional, default to summary)
     * @return ApiResponse&lt;EventOccurenceDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested event </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventOccurenceDetail> eventsIdGetWithHttpInfo(String id, String fieldset) throws ApiException {
        okhttp3.Call localVarCall = eventsIdGetValidateBeforeCall(id, fieldset, null);
        Type localVarReturnType = new TypeToken<EventOccurenceDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Specific event details. (asynchronously)
     * 
     * @param id event @id (required)
     * @param fieldset  (optional, default to summary)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested event </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdGetAsync(String id, String fieldset, final ApiCallback<EventOccurenceDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsIdGetValidateBeforeCall(id, fieldset, _callback);
        Type localVarReturnType = new TypeToken<EventOccurenceDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
