/*
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactDetail;
import org.openapitools.client.model.FeatureReference;
import org.openapitools.client.model.ImageMeta;
import org.openapitools.client.model.OccurrenceReference;
import org.openapitools.client.model.PlaceReference;
import org.openapitools.client.model.TicketOffer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event Occurrence Detail limited to requested fieldset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:02.676450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventOccurenceDetail {
  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private String atId;

  /**
   * Type of occurrence. You will usually see Organized as the type for most events. While Virtual events will get their own Virtual type.
   */
  @JsonAdapter(AtTypeEnum.Adapter.class)
  public enum AtTypeEnum {
    ORGANIZED("Organized"),
    
    SCREENING("Screening"),
    
    ENVIRONMENTAL("Environmental"),
    
    VIRTUAL("Virtual");

    private String value;

    AtTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtTypeEnum fromValue(String value) {
      for (AtTypeEnum b : AtTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private AtTypeEnum atType;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private List<FeatureReference> activity = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMBIENCE = "ambience";
  @SerializedName(SERIALIZED_NAME_AMBIENCE)
  private List<FeatureReference> ambience = new ArrayList<>();

  public static final String SERIALIZED_NAME_AT = "at";
  @SerializedName(SERIALIZED_NAME_AT)
  private PlaceReference at;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "awayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private FeatureReference awayTeam;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<FeatureReference> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT_POINT = "contactPoint";
  @SerializedName(SERIALIZED_NAME_CONTACT_POINT)
  private ContactDetail contactPoint;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOOR_TIME = "doorTime";
  @SerializedName(SERIALIZED_NAME_DOOR_TIME)
  private OffsetDateTime doorTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_END_APPROX = "endApprox";
  @SerializedName(SERIALIZED_NAME_END_APPROX)
  private Boolean endApprox;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXT_TAXONOMY = "extTaxonomy";
  @SerializedName(SERIALIZED_NAME_EXT_TAXONOMY)
  private List<FeatureReference> extTaxonomy = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private List<FeatureReference> genre = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_HOME_TEAM = "homeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private FeatureReference homeTeam;

  public static final String SERIALIZED_NAME_HTML_DESCRIPTION = "htmlDescription";
  @SerializedName(SERIALIZED_NAME_HTML_DESCRIPTION)
  private String htmlDescription;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ImageMeta image;

  public static final String SERIALIZED_NAME_IN_LANGUAGE = "inLanguage";
  @SerializedName(SERIALIZED_NAME_IN_LANGUAGE)
  private FeatureReference inLanguage;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_TIME = "noTime";
  @SerializedName(SERIALIZED_NAME_NO_TIME)
  private Boolean noTime;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<TicketOffer> offers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_DEMAND = "onDemand";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND)
  private Boolean onDemand;

  public static final String SERIALIZED_NAME_PERFORMER = "performer";
  @SerializedName(SERIALIZED_NAME_PERFORMER)
  private List<FeatureReference> performer = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTO = "photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private List<ImageMeta> photo = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_SUPER_EVENT = "superEvent";
  @SerializedName(SERIALIZED_NAME_SUPER_EVENT)
  private OccurrenceReference superEvent;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WORK_PERFORMED = "workPerformed";
  @SerializedName(SERIALIZED_NAME_WORK_PERFORMED)
  private List<FeatureReference> workPerformed = new ArrayList<>();

  public EventOccurenceDetail() {
  }

  public EventOccurenceDetail atId(String atId) {
    this.atId = atId;
    return this;
  }

  /**
   * Unique event id
   * @return atId
   */
  @javax.annotation.Nullable
  public String getAtId() {
    return atId;
  }

  public void setAtId(String atId) {
    this.atId = atId;
  }


  public EventOccurenceDetail atType(AtTypeEnum atType) {
    this.atType = atType;
    return this;
  }

  /**
   * Type of occurrence. You will usually see Organized as the type for most events. While Virtual events will get their own Virtual type.
   * @return atType
   */
  @javax.annotation.Nullable
  public AtTypeEnum getAtType() {
    return atType;
  }

  public void setAtType(AtTypeEnum atType) {
    this.atType = atType;
  }


  public EventOccurenceDetail activity(List<FeatureReference> activity) {
    this.activity = activity;
    return this;
  }

  public EventOccurenceDetail addActivityItem(FeatureReference activityItem) {
    if (this.activity == null) {
      this.activity = new ArrayList<>();
    }
    this.activity.add(activityItem);
    return this;
  }

  /**
   * Associated ActivityType entries
   * @return activity
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getActivity() {
    return activity;
  }

  public void setActivity(List<FeatureReference> activity) {
    this.activity = activity;
  }


  public EventOccurenceDetail ambience(List<FeatureReference> ambience) {
    this.ambience = ambience;
    return this;
  }

  public EventOccurenceDetail addAmbienceItem(FeatureReference ambienceItem) {
    if (this.ambience == null) {
      this.ambience = new ArrayList<>();
    }
    this.ambience.add(ambienceItem);
    return this;
  }

  /**
   * expected mood and feel of the event
   * @return ambience
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getAmbience() {
    return ambience;
  }

  public void setAmbience(List<FeatureReference> ambience) {
    this.ambience = ambience;
  }


  public EventOccurenceDetail at(PlaceReference at) {
    this.at = at;
    return this;
  }

  /**
   * Get at
   * @return at
   */
  @javax.annotation.Nullable
  public PlaceReference getAt() {
    return at;
  }

  public void setAt(PlaceReference at) {
    this.at = at;
  }


  public EventOccurenceDetail awayTeam(FeatureReference awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public FeatureReference getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(FeatureReference awayTeam) {
    this.awayTeam = awayTeam;
  }


  public EventOccurenceDetail category(List<FeatureReference> category) {
    this.category = category;
    return this;
  }

  public EventOccurenceDetail addCategoryItem(FeatureReference categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Associated EventCategory. May be multiple, such as Charity Music event
   * @return category
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getCategory() {
    return category;
  }

  public void setCategory(List<FeatureReference> category) {
    this.category = category;
  }


  public EventOccurenceDetail contactPoint(ContactDetail contactPoint) {
    this.contactPoint = contactPoint;
    return this;
  }

  /**
   * Get contactPoint
   * @return contactPoint
   */
  @javax.annotation.Nullable
  public ContactDetail getContactPoint() {
    return contactPoint;
  }

  public void setContactPoint(ContactDetail contactPoint) {
    this.contactPoint = contactPoint;
  }


  public EventOccurenceDetail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Full description in plain text
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EventOccurenceDetail doorTime(OffsetDateTime doorTime) {
    this.doorTime = doorTime;
    return this;
  }

  /**
   * Time when the admission starts
   * @return doorTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDoorTime() {
    return doorTime;
  }

  public void setDoorTime(OffsetDateTime doorTime) {
    this.doorTime = doorTime;
  }


  public EventOccurenceDetail duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration of the event in ISO-8601 format (PT45M) - 45 minutes
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public EventOccurenceDetail endApprox(Boolean endApprox) {
    this.endApprox = endApprox;
    return this;
  }

  /**
   * endDate is approximated based on historical data
   * @return endApprox
   */
  @javax.annotation.Nullable
  public Boolean getEndApprox() {
    return endApprox;
  }

  public void setEndApprox(Boolean endApprox) {
    this.endApprox = endApprox;
  }


  public EventOccurenceDetail endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Time when the event ends, if known
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public EventOccurenceDetail extTaxonomy(List<FeatureReference> extTaxonomy) {
    this.extTaxonomy = extTaxonomy;
    return this;
  }

  public EventOccurenceDetail addExtTaxonomyItem(FeatureReference extTaxonomyItem) {
    if (this.extTaxonomy == null) {
      this.extTaxonomy = new ArrayList<>();
    }
    this.extTaxonomy.add(extTaxonomyItem);
    return this;
  }

  /**
   * extended taxonomy such as IAB and Google AdWords
   * @return extTaxonomy
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getExtTaxonomy() {
    return extTaxonomy;
  }

  public void setExtTaxonomy(List<FeatureReference> extTaxonomy) {
    this.extTaxonomy = extTaxonomy;
  }


  public EventOccurenceDetail genre(List<FeatureReference> genre) {
    this.genre = genre;
    return this;
  }

  public EventOccurenceDetail addGenreItem(FeatureReference genreItem) {
    if (this.genre == null) {
      this.genre = new ArrayList<>();
    }
    this.genre.add(genreItem);
    return this;
  }

  /**
   * applicable Genres. (Tier 2 taxonomy). May include related genres from categories, not deemed as primary
   * @return genre
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getGenre() {
    return genre;
  }

  public void setGenre(List<FeatureReference> genre) {
    this.genre = genre;
  }


  public EventOccurenceDetail headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * Optional short description in plain text
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public EventOccurenceDetail homeTeam(FeatureReference homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public FeatureReference getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(FeatureReference homeTeam) {
    this.homeTeam = homeTeam;
  }


  public EventOccurenceDetail htmlDescription(String htmlDescription) {
    this.htmlDescription = htmlDescription;
    return this;
  }

  /**
   * Full description with HTML formatting, where available
   * @return htmlDescription
   */
  @javax.annotation.Nullable
  public String getHtmlDescription() {
    return htmlDescription;
  }

  public void setHtmlDescription(String htmlDescription) {
    this.htmlDescription = htmlDescription;
  }


  public EventOccurenceDetail image(ImageMeta image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ImageMeta getImage() {
    return image;
  }

  public void setImage(ImageMeta image) {
    this.image = image;
  }


  public EventOccurenceDetail inLanguage(FeatureReference inLanguage) {
    this.inLanguage = inLanguage;
    return this;
  }

  /**
   * Get inLanguage
   * @return inLanguage
   */
  @javax.annotation.Nullable
  public FeatureReference getInLanguage() {
    return inLanguage;
  }

  public void setInLanguage(FeatureReference inLanguage) {
    this.inLanguage = inLanguage;
  }


  public EventOccurenceDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the event in plain text
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventOccurenceDetail noTime(Boolean noTime) {
    this.noTime = noTime;
    return this;
  }

  /**
   * Specific time of the event is unknown. (shown only when true)
   * @return noTime
   */
  @javax.annotation.Nullable
  public Boolean getNoTime() {
    return noTime;
  }

  public void setNoTime(Boolean noTime) {
    this.noTime = noTime;
  }


  public EventOccurenceDetail offers(List<TicketOffer> offers) {
    this.offers = offers;
    return this;
  }

  public EventOccurenceDetail addOffersItem(TicketOffer offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Ticketing options
   * @return offers
   */
  @javax.annotation.Nullable
  public List<TicketOffer> getOffers() {
    return offers;
  }

  public void setOffers(List<TicketOffer> offers) {
    this.offers = offers;
  }


  public EventOccurenceDetail onDemand(Boolean onDemand) {
    this.onDemand = onDemand;
    return this;
  }

  /**
   * This event can start at any time during specified window
   * @return onDemand
   */
  @javax.annotation.Nullable
  public Boolean getOnDemand() {
    return onDemand;
  }

  public void setOnDemand(Boolean onDemand) {
    this.onDemand = onDemand;
  }


  public EventOccurenceDetail performer(List<FeatureReference> performer) {
    this.performer = performer;
    return this;
  }

  public EventOccurenceDetail addPerformerItem(FeatureReference performerItem) {
    if (this.performer == null) {
      this.performer = new ArrayList<>();
    }
    this.performer.add(performerItem);
    return this;
  }

  /**
   * List of Personas significant for this event
   * @return performer
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getPerformer() {
    return performer;
  }

  public void setPerformer(List<FeatureReference> performer) {
    this.performer = performer;
  }


  public EventOccurenceDetail photo(List<ImageMeta> photo) {
    this.photo = photo;
    return this;
  }

  public EventOccurenceDetail addPhotoItem(ImageMeta photoItem) {
    if (this.photo == null) {
      this.photo = new ArrayList<>();
    }
    this.photo.add(photoItem);
    return this;
  }

  /**
   * Primary image
   * @return photo
   */
  @javax.annotation.Nullable
  public List<ImageMeta> getPhoto() {
    return photo;
  }

  public void setPhoto(List<ImageMeta> photo) {
    this.photo = photo;
  }


  public EventOccurenceDetail startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Time when the event starts
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public EventOccurenceDetail superEvent(OccurrenceReference superEvent) {
    this.superEvent = superEvent;
    return this;
  }

  /**
   * Get superEvent
   * @return superEvent
   */
  @javax.annotation.Nullable
  public OccurrenceReference getSuperEvent() {
    return superEvent;
  }

  public void setSuperEvent(OccurrenceReference superEvent) {
    this.superEvent = superEvent;
  }


  public EventOccurenceDetail updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of last modification (UTC)
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public EventOccurenceDetail url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Primary url for published event
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public EventOccurenceDetail workPerformed(List<FeatureReference> workPerformed) {
    this.workPerformed = workPerformed;
    return this;
  }

  public EventOccurenceDetail addWorkPerformedItem(FeatureReference workPerformedItem) {
    if (this.workPerformed == null) {
      this.workPerformed = new ArrayList<>();
    }
    this.workPerformed.add(workPerformedItem);
    return this;
  }

  /**
   * Subject matter of the event
   * @return workPerformed
   */
  @javax.annotation.Nullable
  public List<FeatureReference> getWorkPerformed() {
    return workPerformed;
  }

  public void setWorkPerformed(List<FeatureReference> workPerformed) {
    this.workPerformed = workPerformed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventOccurenceDetail eventOccurenceDetail = (EventOccurenceDetail) o;
    return Objects.equals(this.atId, eventOccurenceDetail.atId) &&
        Objects.equals(this.atType, eventOccurenceDetail.atType) &&
        Objects.equals(this.activity, eventOccurenceDetail.activity) &&
        Objects.equals(this.ambience, eventOccurenceDetail.ambience) &&
        Objects.equals(this.at, eventOccurenceDetail.at) &&
        Objects.equals(this.awayTeam, eventOccurenceDetail.awayTeam) &&
        Objects.equals(this.category, eventOccurenceDetail.category) &&
        Objects.equals(this.contactPoint, eventOccurenceDetail.contactPoint) &&
        Objects.equals(this.description, eventOccurenceDetail.description) &&
        Objects.equals(this.doorTime, eventOccurenceDetail.doorTime) &&
        Objects.equals(this.duration, eventOccurenceDetail.duration) &&
        Objects.equals(this.endApprox, eventOccurenceDetail.endApprox) &&
        Objects.equals(this.endDate, eventOccurenceDetail.endDate) &&
        Objects.equals(this.extTaxonomy, eventOccurenceDetail.extTaxonomy) &&
        Objects.equals(this.genre, eventOccurenceDetail.genre) &&
        Objects.equals(this.headline, eventOccurenceDetail.headline) &&
        Objects.equals(this.homeTeam, eventOccurenceDetail.homeTeam) &&
        Objects.equals(this.htmlDescription, eventOccurenceDetail.htmlDescription) &&
        Objects.equals(this.image, eventOccurenceDetail.image) &&
        Objects.equals(this.inLanguage, eventOccurenceDetail.inLanguage) &&
        Objects.equals(this.name, eventOccurenceDetail.name) &&
        Objects.equals(this.noTime, eventOccurenceDetail.noTime) &&
        Objects.equals(this.offers, eventOccurenceDetail.offers) &&
        Objects.equals(this.onDemand, eventOccurenceDetail.onDemand) &&
        Objects.equals(this.performer, eventOccurenceDetail.performer) &&
        Objects.equals(this.photo, eventOccurenceDetail.photo) &&
        Objects.equals(this.startDate, eventOccurenceDetail.startDate) &&
        Objects.equals(this.superEvent, eventOccurenceDetail.superEvent) &&
        Objects.equals(this.updated, eventOccurenceDetail.updated) &&
        Objects.equals(this.url, eventOccurenceDetail.url) &&
        Objects.equals(this.workPerformed, eventOccurenceDetail.workPerformed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atId, atType, activity, ambience, at, awayTeam, category, contactPoint, description, doorTime, duration, endApprox, endDate, extTaxonomy, genre, headline, homeTeam, htmlDescription, image, inLanguage, name, noTime, offers, onDemand, performer, photo, startDate, superEvent, updated, url, workPerformed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventOccurenceDetail {\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    ambience: ").append(toIndentedString(ambience)).append("\n");
    sb.append("    at: ").append(toIndentedString(at)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    contactPoint: ").append(toIndentedString(contactPoint)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doorTime: ").append(toIndentedString(doorTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endApprox: ").append(toIndentedString(endApprox)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    extTaxonomy: ").append(toIndentedString(extTaxonomy)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    htmlDescription: ").append(toIndentedString(htmlDescription)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    inLanguage: ").append(toIndentedString(inLanguage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noTime: ").append(toIndentedString(noTime)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    onDemand: ").append(toIndentedString(onDemand)).append("\n");
    sb.append("    performer: ").append(toIndentedString(performer)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    superEvent: ").append(toIndentedString(superEvent)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    workPerformed: ").append(toIndentedString(workPerformed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("activity");
    openapiFields.add("ambience");
    openapiFields.add("at");
    openapiFields.add("awayTeam");
    openapiFields.add("category");
    openapiFields.add("contactPoint");
    openapiFields.add("description");
    openapiFields.add("doorTime");
    openapiFields.add("duration");
    openapiFields.add("endApprox");
    openapiFields.add("endDate");
    openapiFields.add("extTaxonomy");
    openapiFields.add("genre");
    openapiFields.add("headline");
    openapiFields.add("homeTeam");
    openapiFields.add("htmlDescription");
    openapiFields.add("image");
    openapiFields.add("inLanguage");
    openapiFields.add("name");
    openapiFields.add("noTime");
    openapiFields.add("offers");
    openapiFields.add("onDemand");
    openapiFields.add("performer");
    openapiFields.add("photo");
    openapiFields.add("startDate");
    openapiFields.add("superEvent");
    openapiFields.add("updated");
    openapiFields.add("url");
    openapiFields.add("workPerformed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventOccurenceDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventOccurenceDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventOccurenceDetail is not found in the empty JSON string", EventOccurenceDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventOccurenceDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventOccurenceDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("@id") != null && !jsonObj.get("@id").isJsonNull()) && !jsonObj.get("@id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@id").toString()));
      }
      if ((jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) && !jsonObj.get("@type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@type").toString()));
      }
      // validate the optional field `@type`
      if (jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) {
        AtTypeEnum.validateJsonElement(jsonObj.get("@type"));
      }
      if (jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) {
        JsonArray jsonArrayactivity = jsonObj.getAsJsonArray("activity");
        if (jsonArrayactivity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activity` to be an array in the JSON string but got `%s`", jsonObj.get("activity").toString()));
          }

          // validate the optional field `activity` (array)
          for (int i = 0; i < jsonArrayactivity.size(); i++) {
            FeatureReference.validateJsonElement(jsonArrayactivity.get(i));
          };
        }
      }
      if (jsonObj.get("ambience") != null && !jsonObj.get("ambience").isJsonNull()) {
        JsonArray jsonArrayambience = jsonObj.getAsJsonArray("ambience");
        if (jsonArrayambience != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ambience").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ambience` to be an array in the JSON string but got `%s`", jsonObj.get("ambience").toString()));
          }

          // validate the optional field `ambience` (array)
          for (int i = 0; i < jsonArrayambience.size(); i++) {
            FeatureReference.validateJsonElement(jsonArrayambience.get(i));
          };
        }
      }
      // validate the optional field `at`
      if (jsonObj.get("at") != null && !jsonObj.get("at").isJsonNull()) {
        PlaceReference.validateJsonElement(jsonObj.get("at"));
      }
      // validate the optional field `awayTeam`
      if (jsonObj.get("awayTeam") != null && !jsonObj.get("awayTeam").isJsonNull()) {
        FeatureReference.validateJsonElement(jsonObj.get("awayTeam"));
      }
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        JsonArray jsonArraycategory = jsonObj.getAsJsonArray("category");
        if (jsonArraycategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
          }

          // validate the optional field `category` (array)
          for (int i = 0; i < jsonArraycategory.size(); i++) {
            FeatureReference.validateJsonElement(jsonArraycategory.get(i));
          };
        }
      }
      // validate the optional field `contactPoint`
      if (jsonObj.get("contactPoint") != null && !jsonObj.get("contactPoint").isJsonNull()) {
        ContactDetail.validateJsonElement(jsonObj.get("contactPoint"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (jsonObj.get("extTaxonomy") != null && !jsonObj.get("extTaxonomy").isJsonNull()) {
        JsonArray jsonArrayextTaxonomy = jsonObj.getAsJsonArray("extTaxonomy");
        if (jsonArrayextTaxonomy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extTaxonomy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extTaxonomy` to be an array in the JSON string but got `%s`", jsonObj.get("extTaxonomy").toString()));
          }

          // validate the optional field `extTaxonomy` (array)
          for (int i = 0; i < jsonArrayextTaxonomy.size(); i++) {
            FeatureReference.validateJsonElement(jsonArrayextTaxonomy.get(i));
          };
        }
      }
      if (jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) {
        JsonArray jsonArraygenre = jsonObj.getAsJsonArray("genre");
        if (jsonArraygenre != null) {
          // ensure the json data is an array
          if (!jsonObj.get("genre").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `genre` to be an array in the JSON string but got `%s`", jsonObj.get("genre").toString()));
          }

          // validate the optional field `genre` (array)
          for (int i = 0; i < jsonArraygenre.size(); i++) {
            FeatureReference.validateJsonElement(jsonArraygenre.get(i));
          };
        }
      }
      if ((jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) && !jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      // validate the optional field `homeTeam`
      if (jsonObj.get("homeTeam") != null && !jsonObj.get("homeTeam").isJsonNull()) {
        FeatureReference.validateJsonElement(jsonObj.get("homeTeam"));
      }
      if ((jsonObj.get("htmlDescription") != null && !jsonObj.get("htmlDescription").isJsonNull()) && !jsonObj.get("htmlDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlDescription").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ImageMeta.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `inLanguage`
      if (jsonObj.get("inLanguage") != null && !jsonObj.get("inLanguage").isJsonNull()) {
        FeatureReference.validateJsonElement(jsonObj.get("inLanguage"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("offers") != null && !jsonObj.get("offers").isJsonNull()) {
        JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
        if (jsonArrayoffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
          }

          // validate the optional field `offers` (array)
          for (int i = 0; i < jsonArrayoffers.size(); i++) {
            TicketOffer.validateJsonElement(jsonArrayoffers.get(i));
          };
        }
      }
      if (jsonObj.get("performer") != null && !jsonObj.get("performer").isJsonNull()) {
        JsonArray jsonArrayperformer = jsonObj.getAsJsonArray("performer");
        if (jsonArrayperformer != null) {
          // ensure the json data is an array
          if (!jsonObj.get("performer").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `performer` to be an array in the JSON string but got `%s`", jsonObj.get("performer").toString()));
          }

          // validate the optional field `performer` (array)
          for (int i = 0; i < jsonArrayperformer.size(); i++) {
            FeatureReference.validateJsonElement(jsonArrayperformer.get(i));
          };
        }
      }
      if (jsonObj.get("photo") != null && !jsonObj.get("photo").isJsonNull()) {
        JsonArray jsonArrayphoto = jsonObj.getAsJsonArray("photo");
        if (jsonArrayphoto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("photo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `photo` to be an array in the JSON string but got `%s`", jsonObj.get("photo").toString()));
          }

          // validate the optional field `photo` (array)
          for (int i = 0; i < jsonArrayphoto.size(); i++) {
            ImageMeta.validateJsonElement(jsonArrayphoto.get(i));
          };
        }
      }
      // validate the optional field `superEvent`
      if (jsonObj.get("superEvent") != null && !jsonObj.get("superEvent").isJsonNull()) {
        OccurrenceReference.validateJsonElement(jsonObj.get("superEvent"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("workPerformed") != null && !jsonObj.get("workPerformed").isJsonNull()) {
        JsonArray jsonArrayworkPerformed = jsonObj.getAsJsonArray("workPerformed");
        if (jsonArrayworkPerformed != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workPerformed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workPerformed` to be an array in the JSON string but got `%s`", jsonObj.get("workPerformed").toString()));
          }

          // validate the optional field `workPerformed` (array)
          for (int i = 0; i < jsonArrayworkPerformed.size(); i++) {
            FeatureReference.validateJsonElement(jsonArrayworkPerformed.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventOccurenceDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventOccurenceDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventOccurenceDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventOccurenceDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<EventOccurenceDetail>() {
           @Override
           public void write(JsonWriter out, EventOccurenceDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventOccurenceDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventOccurenceDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventOccurenceDetail
   * @throws IOException if the JSON string is invalid with respect to EventOccurenceDetail
   */
  public static EventOccurenceDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventOccurenceDetail.class);
  }

  /**
   * Convert an instance of EventOccurenceDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

