/*
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Timeframe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:02.676450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Timeframe {
  public static final String SERIALIZED_NAME_CLOSES = "closes";
  @SerializedName(SERIALIZED_NAME_CLOSES)
  private OffsetDateTime closes;

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private List<Integer> dayOfWeek = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPEN247 = "open247";
  @SerializedName(SERIALIZED_NAME_OPEN247)
  private Boolean open247;

  public static final String SERIALIZED_NAME_OPENS = "opens";
  @SerializedName(SERIALIZED_NAME_OPENS)
  private OffsetDateTime opens;

  public Timeframe() {
  }

  public Timeframe closes(OffsetDateTime closes) {
    this.closes = closes;
    return this;
  }

  /**
   * Close time for all days mentioned in the dayOfWeek. If close time is less than open, then it is following day.
   * @return closes
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCloses() {
    return closes;
  }

  public void setCloses(OffsetDateTime closes) {
    this.closes = closes;
  }


  public Timeframe dayOfWeek(List<Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  public Timeframe addDayOfWeekItem(Integer dayOfWeekItem) {
    if (this.dayOfWeek == null) {
      this.dayOfWeek = new ArrayList<>();
    }
    this.dayOfWeek.add(dayOfWeekItem);
    return this;
  }

  /**
   * ISO day of the week. 1- Monday, 7- Sunday
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public List<Integer> getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(List<Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public Timeframe open247(Boolean open247) {
    this.open247 = open247;
    return this;
  }

  /**
   * Open around the clock
   * @return open247
   */
  @javax.annotation.Nullable
  public Boolean getOpen247() {
    return open247;
  }

  public void setOpen247(Boolean open247) {
    this.open247 = open247;
  }


  public Timeframe opens(OffsetDateTime opens) {
    this.opens = opens;
    return this;
  }

  /**
   * Open time for all days mentioned in the dayOfWeek
   * @return opens
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOpens() {
    return opens;
  }

  public void setOpens(OffsetDateTime opens) {
    this.opens = opens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeframe timeframe = (Timeframe) o;
    return Objects.equals(this.closes, timeframe.closes) &&
        Objects.equals(this.dayOfWeek, timeframe.dayOfWeek) &&
        Objects.equals(this.open247, timeframe.open247) &&
        Objects.equals(this.opens, timeframe.opens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closes, dayOfWeek, open247, opens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeframe {\n");
    sb.append("    closes: ").append(toIndentedString(closes)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    open247: ").append(toIndentedString(open247)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closes");
    openapiFields.add("dayOfWeek");
    openapiFields.add("open247");
    openapiFields.add("opens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Timeframe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Timeframe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timeframe is not found in the empty JSON string", Timeframe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Timeframe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Timeframe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull() && !jsonObj.get("dayOfWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be an array in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timeframe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timeframe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timeframe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timeframe.class));

       return (TypeAdapter<T>) new TypeAdapter<Timeframe>() {
           @Override
           public void write(JsonWriter out, Timeframe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Timeframe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Timeframe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Timeframe
   * @throws IOException if the JSON string is invalid with respect to Timeframe
   */
  public static Timeframe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timeframe.class);
  }

  /**
   * Convert an instance of Timeframe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

