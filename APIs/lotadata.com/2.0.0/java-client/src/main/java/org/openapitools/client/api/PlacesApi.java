/*
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PlaceDetail;
import org.openapitools.client.model.PlacesSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for placesGet
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required PlaceCategory ids (Tier 1) (optional)
     * @param function List of required PlaceFunction ids (Tier 2) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param tag List of required tags (optional)
     * @param type Specific PlaceType to return (optional)
     * @param name Match on place names (optional)
     * @param exact Require an exact name match (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param street Address of the place or street component of the address (optional)
     * @param locality city, town, or neighborhood of the place (optional)
     * @param region region or state (optional)
     * @param postalCode Postal or zip code (optional)
     * @param country country component of the address (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placesGetCall(String fieldset, List<String> category, List<String> function, List<String> ambience, List<String> tag, String type, String name, Boolean exact, BigDecimal capacityMin, BigDecimal capacityMax, String street, String locality, String region, String postalCode, String country, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (function != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "function", function));
        }

        if (ambience != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ambience", ambience));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tag", tag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (capacityMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capacity_min", capacityMin));
        }

        if (capacityMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capacity_max", capacityMax));
        }

        if (street != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street", street));
        }

        if (locality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locality", locality));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_code", postalCode));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (center != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("center", center));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (bbox != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "bbox", bbox));
        }

        if (polygon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "polygon", polygon));
        }

        if (within != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within", within));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fieldset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldset", fieldset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placesGetValidateBeforeCall(String fieldset, List<String> category, List<String> function, List<String> ambience, List<String> tag, String type, String name, Boolean exact, BigDecimal capacityMin, BigDecimal capacityMax, String street, String locality, String region, String postalCode, String country, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldset' is set
        if (fieldset == null) {
            throw new ApiException("Missing the required parameter 'fieldset' when calling placesGet(Async)");
        }

        return placesGetCall(fieldset, category, function, ambience, tag, type, name, exact, capacityMin, capacityMax, street, locality, region, postalCode, country, center, radius, bbox, polygon, within, offset, limit, _callback);

    }

    /**
     * Venues, landmarks, regions, these are all places to search.
     * 
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required PlaceCategory ids (Tier 1) (optional)
     * @param function List of required PlaceFunction ids (Tier 2) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param tag List of required tags (optional)
     * @param type Specific PlaceType to return (optional)
     * @param name Match on place names (optional)
     * @param exact Require an exact name match (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param street Address of the place or street component of the address (optional)
     * @param locality city, town, or neighborhood of the place (optional)
     * @param region region or state (optional)
     * @param postalCode Postal or zip code (optional)
     * @param country country component of the address (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @return PlacesSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PlacesSearchResponse placesGet(String fieldset, List<String> category, List<String> function, List<String> ambience, List<String> tag, String type, String name, Boolean exact, BigDecimal capacityMin, BigDecimal capacityMax, String street, String locality, String region, String postalCode, String country, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PlacesSearchResponse> localVarResp = placesGetWithHttpInfo(fieldset, category, function, ambience, tag, type, name, exact, capacityMin, capacityMax, street, locality, region, postalCode, country, center, radius, bbox, polygon, within, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Venues, landmarks, regions, these are all places to search.
     * 
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required PlaceCategory ids (Tier 1) (optional)
     * @param function List of required PlaceFunction ids (Tier 2) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param tag List of required tags (optional)
     * @param type Specific PlaceType to return (optional)
     * @param name Match on place names (optional)
     * @param exact Require an exact name match (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param street Address of the place or street component of the address (optional)
     * @param locality city, town, or neighborhood of the place (optional)
     * @param region region or state (optional)
     * @param postalCode Postal or zip code (optional)
     * @param country country component of the address (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @return ApiResponse&lt;PlacesSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlacesSearchResponse> placesGetWithHttpInfo(String fieldset, List<String> category, List<String> function, List<String> ambience, List<String> tag, String type, String name, Boolean exact, BigDecimal capacityMin, BigDecimal capacityMax, String street, String locality, String region, String postalCode, String country, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = placesGetValidateBeforeCall(fieldset, category, function, ambience, tag, type, name, exact, capacityMin, capacityMax, street, locality, region, postalCode, country, center, radius, bbox, polygon, within, offset, limit, null);
        Type localVarReturnType = new TypeToken<PlacesSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Venues, landmarks, regions, these are all places to search. (asynchronously)
     * 
     * @param fieldset Return results starting at specified offset (summary, context, detail) (required)
     * @param category List of required PlaceCategory ids (Tier 1) (optional)
     * @param function List of required PlaceFunction ids (Tier 2) (optional)
     * @param ambience List of required ambience ids (optional)
     * @param tag List of required tags (optional)
     * @param type Specific PlaceType to return (optional)
     * @param name Match on place names (optional)
     * @param exact Require an exact name match (optional)
     * @param capacityMin Min capacity at location (optional)
     * @param capacityMax Min capacity at location (optional)
     * @param street Address of the place or street component of the address (optional)
     * @param locality city, town, or neighborhood of the place (optional)
     * @param region region or state (optional)
     * @param postalCode Postal or zip code (optional)
     * @param country country component of the address (optional)
     * @param center latitude,longitude of the origin point (optional)
     * @param radius Distance from origin in meters (optional)
     * @param bbox Corner of a bounding box (lat,lng). Requires 0 or 2 pairs (optional)
     * @param polygon Closed custom polygon. Ordered list of lat,lng pairs (optional)
     * @param within Search within specified geopolitical place id (optional)
     * @param offset Return results starting at specified offset (optional)
     * @param limit Max results to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matching events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placesGetAsync(String fieldset, List<String> category, List<String> function, List<String> ambience, List<String> tag, String type, String name, Boolean exact, BigDecimal capacityMin, BigDecimal capacityMax, String street, String locality, String region, String postalCode, String country, String center, Integer radius, List<String> bbox, List<String> polygon, String within, Integer offset, Integer limit, final ApiCallback<PlacesSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = placesGetValidateBeforeCall(fieldset, category, function, ambience, tag, type, name, exact, capacityMin, capacityMax, street, locality, region, postalCode, country, center, radius, bbox, polygon, within, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PlacesSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placesIdGet
     * @param id place @id (required)
     * @param fieldset  (optional, default to summary)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested place </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placesIdGetCall(String id, String fieldset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldset", fieldset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placesIdGetValidateBeforeCall(String id, String fieldset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling placesIdGet(Async)");
        }

        return placesIdGetCall(id, fieldset, _callback);

    }

    /**
     * Get specific place details
     * 
     * @param id place @id (required)
     * @param fieldset  (optional, default to summary)
     * @return PlaceDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested place </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PlaceDetail placesIdGet(String id, String fieldset) throws ApiException {
        ApiResponse<PlaceDetail> localVarResp = placesIdGetWithHttpInfo(id, fieldset);
        return localVarResp.getData();
    }

    /**
     * Get specific place details
     * 
     * @param id place @id (required)
     * @param fieldset  (optional, default to summary)
     * @return ApiResponse&lt;PlaceDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested place </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceDetail> placesIdGetWithHttpInfo(String id, String fieldset) throws ApiException {
        okhttp3.Call localVarCall = placesIdGetValidateBeforeCall(id, fieldset, null);
        Type localVarReturnType = new TypeToken<PlaceDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific place details (asynchronously)
     * 
     * @param id place @id (required)
     * @param fieldset  (optional, default to summary)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested place </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placesIdGetAsync(String id, String fieldset, final ApiCallback<PlaceDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = placesIdGetValidateBeforeCall(id, fieldset, _callback);
        Type localVarReturnType = new TypeToken<PlaceDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
