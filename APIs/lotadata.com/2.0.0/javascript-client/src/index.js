/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import ContactDetail from './model/ContactDetail';
import Error from './model/Error';
import ErrorCause from './model/ErrorCause';
import ErrorTracking from './model/ErrorTracking';
import EventOccurenceDetail from './model/EventOccurenceDetail';
import EventsQuery from './model/EventsQuery';
import EventsSearchResponse from './model/EventsSearchResponse';
import FeatureReference from './model/FeatureReference';
import GeoPt from './model/GeoPt';
import ImageMeta from './model/ImageMeta';
import OccurrenceReference from './model/OccurrenceReference';
import PlaceDetail from './model/PlaceDetail';
import PlaceReference from './model/PlaceReference';
import PlacesQuery from './model/PlacesQuery';
import PlacesSearchResponse from './model/PlacesSearchResponse';
import SearchStatsMetaResult from './model/SearchStatsMetaResult';
import TicketOffer from './model/TicketOffer';
import TicketOfferInventory from './model/TicketOfferInventory';
import Timeframe from './model/Timeframe';
import VirtualLocation from './model/VirtualLocation';
import EventsApi from './api/EventsApi';
import PlacesApi from './api/PlacesApi';


/**
* Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var LotaData = require('index'); // See note below*.
* var xxxSvc = new LotaData.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new LotaData.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new LotaData.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new LotaData.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The ContactDetail model constructor.
     * @property {module:model/ContactDetail}
     */
    ContactDetail,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorCause model constructor.
     * @property {module:model/ErrorCause}
     */
    ErrorCause,

    /**
     * The ErrorTracking model constructor.
     * @property {module:model/ErrorTracking}
     */
    ErrorTracking,

    /**
     * The EventOccurenceDetail model constructor.
     * @property {module:model/EventOccurenceDetail}
     */
    EventOccurenceDetail,

    /**
     * The EventsQuery model constructor.
     * @property {module:model/EventsQuery}
     */
    EventsQuery,

    /**
     * The EventsSearchResponse model constructor.
     * @property {module:model/EventsSearchResponse}
     */
    EventsSearchResponse,

    /**
     * The FeatureReference model constructor.
     * @property {module:model/FeatureReference}
     */
    FeatureReference,

    /**
     * The GeoPt model constructor.
     * @property {module:model/GeoPt}
     */
    GeoPt,

    /**
     * The ImageMeta model constructor.
     * @property {module:model/ImageMeta}
     */
    ImageMeta,

    /**
     * The OccurrenceReference model constructor.
     * @property {module:model/OccurrenceReference}
     */
    OccurrenceReference,

    /**
     * The PlaceDetail model constructor.
     * @property {module:model/PlaceDetail}
     */
    PlaceDetail,

    /**
     * The PlaceReference model constructor.
     * @property {module:model/PlaceReference}
     */
    PlaceReference,

    /**
     * The PlacesQuery model constructor.
     * @property {module:model/PlacesQuery}
     */
    PlacesQuery,

    /**
     * The PlacesSearchResponse model constructor.
     * @property {module:model/PlacesSearchResponse}
     */
    PlacesSearchResponse,

    /**
     * The SearchStatsMetaResult model constructor.
     * @property {module:model/SearchStatsMetaResult}
     */
    SearchStatsMetaResult,

    /**
     * The TicketOffer model constructor.
     * @property {module:model/TicketOffer}
     */
    TicketOffer,

    /**
     * The TicketOfferInventory model constructor.
     * @property {module:model/TicketOfferInventory}
     */
    TicketOfferInventory,

    /**
     * The Timeframe model constructor.
     * @property {module:model/Timeframe}
     */
    Timeframe,

    /**
     * The VirtualLocation model constructor.
     * @property {module:model/VirtualLocation}
     */
    VirtualLocation,

    /**
    * The EventsApi service constructor.
    * @property {module:api/EventsApi}
    */
    EventsApi,

    /**
    * The PlacesApi service constructor.
    * @property {module:api/PlacesApi}
    */
    PlacesApi
};
