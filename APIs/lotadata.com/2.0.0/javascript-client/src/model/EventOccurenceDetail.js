/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactDetail from './ContactDetail';
import FeatureReference from './FeatureReference';
import ImageMeta from './ImageMeta';
import OccurrenceReference from './OccurrenceReference';
import PlaceReference from './PlaceReference';
import TicketOffer from './TicketOffer';

/**
 * The EventOccurenceDetail model module.
 * @module model/EventOccurenceDetail
 * @version 2.0.0
 */
class EventOccurenceDetail {
    /**
     * Constructs a new <code>EventOccurenceDetail</code>.
     * Event Occurrence Detail limited to requested fieldset.
     * @alias module:model/EventOccurenceDetail
     */
    constructor() { 
        
        EventOccurenceDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventOccurenceDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventOccurenceDetail} obj Optional instance to populate.
     * @return {module:model/EventOccurenceDetail} The populated <code>EventOccurenceDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventOccurenceDetail();

            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], 'String');
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], [FeatureReference]);
            }
            if (data.hasOwnProperty('ambience')) {
                obj['ambience'] = ApiClient.convertToType(data['ambience'], [FeatureReference]);
            }
            if (data.hasOwnProperty('at')) {
                obj['at'] = PlaceReference.constructFromObject(data['at']);
            }
            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = FeatureReference.constructFromObject(data['awayTeam']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], [FeatureReference]);
            }
            if (data.hasOwnProperty('contactPoint')) {
                obj['contactPoint'] = ContactDetail.constructFromObject(data['contactPoint']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doorTime')) {
                obj['doorTime'] = ApiClient.convertToType(data['doorTime'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('endApprox')) {
                obj['endApprox'] = ApiClient.convertToType(data['endApprox'], 'Boolean');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('extTaxonomy')) {
                obj['extTaxonomy'] = ApiClient.convertToType(data['extTaxonomy'], [FeatureReference]);
            }
            if (data.hasOwnProperty('genre')) {
                obj['genre'] = ApiClient.convertToType(data['genre'], [FeatureReference]);
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = FeatureReference.constructFromObject(data['homeTeam']);
            }
            if (data.hasOwnProperty('htmlDescription')) {
                obj['htmlDescription'] = ApiClient.convertToType(data['htmlDescription'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ImageMeta.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('inLanguage')) {
                obj['inLanguage'] = FeatureReference.constructFromObject(data['inLanguage']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noTime')) {
                obj['noTime'] = ApiClient.convertToType(data['noTime'], 'Boolean');
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = ApiClient.convertToType(data['offers'], [TicketOffer]);
            }
            if (data.hasOwnProperty('onDemand')) {
                obj['onDemand'] = ApiClient.convertToType(data['onDemand'], 'Boolean');
            }
            if (data.hasOwnProperty('performer')) {
                obj['performer'] = ApiClient.convertToType(data['performer'], [FeatureReference]);
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], [ImageMeta]);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('superEvent')) {
                obj['superEvent'] = OccurrenceReference.constructFromObject(data['superEvent']);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('workPerformed')) {
                obj['workPerformed'] = ApiClient.convertToType(data['workPerformed'], [FeatureReference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventOccurenceDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventOccurenceDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is a string
        if (data['@type'] && !(typeof data['@type'] === 'string' || data['@type'] instanceof String)) {
            throw new Error("Expected the field `@type` to be a primitive type in the JSON string but got " + data['@type']);
        }
        if (data['activity']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activity'])) {
                throw new Error("Expected the field `activity` to be an array in the JSON data but got " + data['activity']);
            }
            // validate the optional field `activity` (array)
            for (const item of data['activity']) {
                FeatureReference.validateJSON(item);
            };
        }
        if (data['ambience']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ambience'])) {
                throw new Error("Expected the field `ambience` to be an array in the JSON data but got " + data['ambience']);
            }
            // validate the optional field `ambience` (array)
            for (const item of data['ambience']) {
                FeatureReference.validateJSON(item);
            };
        }
        // validate the optional field `at`
        if (data['at']) { // data not null
          PlaceReference.validateJSON(data['at']);
        }
        // validate the optional field `awayTeam`
        if (data['awayTeam']) { // data not null
          FeatureReference.validateJSON(data['awayTeam']);
        }
        if (data['category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category'])) {
                throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
            }
            // validate the optional field `category` (array)
            for (const item of data['category']) {
                FeatureReference.validateJSON(item);
            };
        }
        // validate the optional field `contactPoint`
        if (data['contactPoint']) { // data not null
          ContactDetail.validateJSON(data['contactPoint']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        if (data['extTaxonomy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extTaxonomy'])) {
                throw new Error("Expected the field `extTaxonomy` to be an array in the JSON data but got " + data['extTaxonomy']);
            }
            // validate the optional field `extTaxonomy` (array)
            for (const item of data['extTaxonomy']) {
                FeatureReference.validateJSON(item);
            };
        }
        if (data['genre']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['genre'])) {
                throw new Error("Expected the field `genre` to be an array in the JSON data but got " + data['genre']);
            }
            // validate the optional field `genre` (array)
            for (const item of data['genre']) {
                FeatureReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['headline'] && !(typeof data['headline'] === 'string' || data['headline'] instanceof String)) {
            throw new Error("Expected the field `headline` to be a primitive type in the JSON string but got " + data['headline']);
        }
        // validate the optional field `homeTeam`
        if (data['homeTeam']) { // data not null
          FeatureReference.validateJSON(data['homeTeam']);
        }
        // ensure the json data is a string
        if (data['htmlDescription'] && !(typeof data['htmlDescription'] === 'string' || data['htmlDescription'] instanceof String)) {
            throw new Error("Expected the field `htmlDescription` to be a primitive type in the JSON string but got " + data['htmlDescription']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ImageMeta.validateJSON(data['image']);
        }
        // validate the optional field `inLanguage`
        if (data['inLanguage']) { // data not null
          FeatureReference.validateJSON(data['inLanguage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offers'])) {
                throw new Error("Expected the field `offers` to be an array in the JSON data but got " + data['offers']);
            }
            // validate the optional field `offers` (array)
            for (const item of data['offers']) {
                TicketOffer.validateJSON(item);
            };
        }
        if (data['performer']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['performer'])) {
                throw new Error("Expected the field `performer` to be an array in the JSON data but got " + data['performer']);
            }
            // validate the optional field `performer` (array)
            for (const item of data['performer']) {
                FeatureReference.validateJSON(item);
            };
        }
        if (data['photo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photo'])) {
                throw new Error("Expected the field `photo` to be an array in the JSON data but got " + data['photo']);
            }
            // validate the optional field `photo` (array)
            for (const item of data['photo']) {
                ImageMeta.validateJSON(item);
            };
        }
        // validate the optional field `superEvent`
        if (data['superEvent']) { // data not null
          OccurrenceReference.validateJSON(data['superEvent']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['workPerformed']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workPerformed'])) {
                throw new Error("Expected the field `workPerformed` to be an array in the JSON data but got " + data['workPerformed']);
            }
            // validate the optional field `workPerformed` (array)
            for (const item of data['workPerformed']) {
                FeatureReference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique event id
 * @member {String} @id
 */
EventOccurenceDetail.prototype['@id'] = undefined;

/**
 * Type of occurrence. You will usually see Organized as the type for most events. While Virtual events will get their own Virtual type.
 * @member {module:model/EventOccurenceDetail.TypeEnum} @type
 */
EventOccurenceDetail.prototype['@type'] = undefined;

/**
 * Associated ActivityType entries
 * @member {Array.<module:model/FeatureReference>} activity
 */
EventOccurenceDetail.prototype['activity'] = undefined;

/**
 * expected mood and feel of the event
 * @member {Array.<module:model/FeatureReference>} ambience
 */
EventOccurenceDetail.prototype['ambience'] = undefined;

/**
 * @member {module:model/PlaceReference} at
 */
EventOccurenceDetail.prototype['at'] = undefined;

/**
 * @member {module:model/FeatureReference} awayTeam
 */
EventOccurenceDetail.prototype['awayTeam'] = undefined;

/**
 * Associated EventCategory. May be multiple, such as Charity Music event
 * @member {Array.<module:model/FeatureReference>} category
 */
EventOccurenceDetail.prototype['category'] = undefined;

/**
 * @member {module:model/ContactDetail} contactPoint
 */
EventOccurenceDetail.prototype['contactPoint'] = undefined;

/**
 * Full description in plain text
 * @member {String} description
 */
EventOccurenceDetail.prototype['description'] = undefined;

/**
 * Time when the admission starts
 * @member {Date} doorTime
 */
EventOccurenceDetail.prototype['doorTime'] = undefined;

/**
 * Duration of the event in ISO-8601 format (PT45M) - 45 minutes
 * @member {String} duration
 */
EventOccurenceDetail.prototype['duration'] = undefined;

/**
 * endDate is approximated based on historical data
 * @member {Boolean} endApprox
 */
EventOccurenceDetail.prototype['endApprox'] = undefined;

/**
 * Time when the event ends, if known
 * @member {Date} endDate
 */
EventOccurenceDetail.prototype['endDate'] = undefined;

/**
 * extended taxonomy such as IAB and Google AdWords
 * @member {Array.<module:model/FeatureReference>} extTaxonomy
 */
EventOccurenceDetail.prototype['extTaxonomy'] = undefined;

/**
 * applicable Genres. (Tier 2 taxonomy). May include related genres from categories, not deemed as primary
 * @member {Array.<module:model/FeatureReference>} genre
 */
EventOccurenceDetail.prototype['genre'] = undefined;

/**
 * Optional short description in plain text
 * @member {String} headline
 */
EventOccurenceDetail.prototype['headline'] = undefined;

/**
 * @member {module:model/FeatureReference} homeTeam
 */
EventOccurenceDetail.prototype['homeTeam'] = undefined;

/**
 * Full description with HTML formatting, where available
 * @member {String} htmlDescription
 */
EventOccurenceDetail.prototype['htmlDescription'] = undefined;

/**
 * @member {module:model/ImageMeta} image
 */
EventOccurenceDetail.prototype['image'] = undefined;

/**
 * @member {module:model/FeatureReference} inLanguage
 */
EventOccurenceDetail.prototype['inLanguage'] = undefined;

/**
 * Name of the event in plain text
 * @member {String} name
 */
EventOccurenceDetail.prototype['name'] = undefined;

/**
 * Specific time of the event is unknown. (shown only when true)
 * @member {Boolean} noTime
 */
EventOccurenceDetail.prototype['noTime'] = undefined;

/**
 * Ticketing options
 * @member {Array.<module:model/TicketOffer>} offers
 */
EventOccurenceDetail.prototype['offers'] = undefined;

/**
 * This event can start at any time during specified window
 * @member {Boolean} onDemand
 */
EventOccurenceDetail.prototype['onDemand'] = undefined;

/**
 * List of Personas significant for this event
 * @member {Array.<module:model/FeatureReference>} performer
 */
EventOccurenceDetail.prototype['performer'] = undefined;

/**
 * Primary image
 * @member {Array.<module:model/ImageMeta>} photo
 */
EventOccurenceDetail.prototype['photo'] = undefined;

/**
 * Time when the event starts
 * @member {Date} startDate
 */
EventOccurenceDetail.prototype['startDate'] = undefined;

/**
 * @member {module:model/OccurrenceReference} superEvent
 */
EventOccurenceDetail.prototype['superEvent'] = undefined;

/**
 * Timestamp of last modification (UTC)
 * @member {Date} updated
 */
EventOccurenceDetail.prototype['updated'] = undefined;

/**
 * Primary url for published event
 * @member {String} url
 */
EventOccurenceDetail.prototype['url'] = undefined;

/**
 * Subject matter of the event
 * @member {Array.<module:model/FeatureReference>} workPerformed
 */
EventOccurenceDetail.prototype['workPerformed'] = undefined;





/**
 * Allowed values for the <code>@type</code> property.
 * @enum {String}
 * @readonly
 */
EventOccurenceDetail['TypeEnum'] = {

    /**
     * value: "Organized"
     * @const
     */
    "Organized": "Organized",

    /**
     * value: "Screening"
     * @const
     */
    "Screening": "Screening",

    /**
     * value: "Environmental"
     * @const
     */
    "Environmental": "Environmental",

    /**
     * value: "Virtual"
     * @const
     */
    "Virtual": "Virtual"
};



export default EventOccurenceDetail;

