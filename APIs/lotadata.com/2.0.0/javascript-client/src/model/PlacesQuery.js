/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The PlacesQuery model module.
 * @module model/PlacesQuery
 * @version 2.0.0
 */
class PlacesQuery {
    /**
     * Constructs a new <code>PlacesQuery</code>.
     * Specific filters understood and executed for this query. If your parameter is not visible here, then consult the documentation for correct usage.
     * @alias module:model/PlacesQuery
     */
    constructor() { 
        
        PlacesQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlacesQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlacesQuery} obj Optional instance to populate.
     * @return {module:model/PlacesQuery} The populated <code>PlacesQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlacesQuery();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlacesQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlacesQuery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
PlacesQuery.prototype['address'] = undefined;

/**
 * required categories
 * @member {Array.<String>} category
 */
PlacesQuery.prototype['category'] = undefined;

/**
 * maximum number of matches to return
 * @member {Number} limit
 */
PlacesQuery.prototype['limit'] = undefined;






export default PlacesQuery;

