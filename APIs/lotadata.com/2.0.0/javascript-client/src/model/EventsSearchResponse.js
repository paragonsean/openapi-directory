/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventOccurenceDetail from './EventOccurenceDetail';
import EventsQuery from './EventsQuery';
import SearchStatsMetaResult from './SearchStatsMetaResult';

/**
 * The EventsSearchResponse model module.
 * @module model/EventsSearchResponse
 * @version 2.0.0
 */
class EventsSearchResponse {
    /**
     * Constructs a new <code>EventsSearchResponse</code>.
     * @alias module:model/EventsSearchResponse
     */
    constructor() { 
        
        EventsSearchResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsSearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsSearchResponse} obj Optional instance to populate.
     * @return {module:model/EventsSearchResponse} The populated <code>EventsSearchResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsSearchResponse();

            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [EventOccurenceDetail]);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = EventsQuery.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = SearchStatsMetaResult.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsSearchResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsSearchResponse</code>.
     */
    static validateJSON(data) {
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                EventOccurenceDetail.validateJSON(item);
            };
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          EventsQuery.validateJSON(data['query']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          SearchStatsMetaResult.validateJSON(data['stats']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/EventOccurenceDetail>} events
 */
EventsSearchResponse.prototype['events'] = undefined;

/**
 * @member {module:model/EventsQuery} query
 */
EventsSearchResponse.prototype['query'] = undefined;

/**
 * @member {module:model/SearchStatsMetaResult} stats
 */
EventsSearchResponse.prototype['stats'] = undefined;






export default EventsSearchResponse;

