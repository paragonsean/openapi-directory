/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TicketOfferInventory from './TicketOfferInventory';

/**
 * The TicketOffer model module.
 * @module model/TicketOffer
 * @version 2.0.0
 */
class TicketOffer {
    /**
     * Constructs a new <code>TicketOffer</code>.
     * @alias module:model/TicketOffer
     */
    constructor() { 
        
        TicketOffer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TicketOffer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TicketOffer} obj Optional instance to populate.
     * @return {module:model/TicketOffer} The populated <code>TicketOffer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TicketOffer();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('donation')) {
                obj['donation'] = ApiClient.convertToType(data['donation'], 'Boolean');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('highPrice')) {
                obj['highPrice'] = ApiClient.convertToType(data['highPrice'], 'Number');
            }
            if (data.hasOwnProperty('inventory')) {
                obj['inventory'] = TicketOfferInventory.constructFromObject(data['inventory']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('priceCurrency')) {
                obj['priceCurrency'] = ApiClient.convertToType(data['priceCurrency'], 'String');
            }
            if (data.hasOwnProperty('priceUnknown')) {
                obj['priceUnknown'] = ApiClient.convertToType(data['priceUnknown'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TicketOffer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TicketOffer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `inventory`
        if (data['inventory']) { // data not null
          TicketOfferInventory.validateJSON(data['inventory']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['priceCurrency'] && !(typeof data['priceCurrency'] === 'string' || data['priceCurrency'] instanceof String)) {
            throw new Error("Expected the field `priceCurrency` to be a primitive type in the JSON string but got " + data['priceCurrency']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/TicketOffer.AvailabilityEnum} availability
 */
TicketOffer.prototype['availability'] = undefined;

/**
 * @member {module:model/TicketOffer.CategoryEnum} category
 */
TicketOffer.prototype['category'] = undefined;

/**
 * @member {Boolean} donation
 */
TicketOffer.prototype['donation'] = undefined;

/**
 * @member {Number} fee
 */
TicketOffer.prototype['fee'] = undefined;

/**
 * @member {Number} highPrice
 */
TicketOffer.prototype['highPrice'] = undefined;

/**
 * @member {module:model/TicketOfferInventory} inventory
 */
TicketOffer.prototype['inventory'] = undefined;

/**
 * @member {String} name
 */
TicketOffer.prototype['name'] = undefined;

/**
 * @member {Number} price
 */
TicketOffer.prototype['price'] = undefined;

/**
 * @member {String} priceCurrency
 */
TicketOffer.prototype['priceCurrency'] = undefined;

/**
 * @member {Boolean} priceUnknown
 */
TicketOffer.prototype['priceUnknown'] = undefined;

/**
 * @member {String} url
 */
TicketOffer.prototype['url'] = undefined;





/**
 * Allowed values for the <code>availability</code> property.
 * @enum {String}
 * @readonly
 */
TicketOffer['AvailabilityEnum'] = {

    /**
     * value: "Discontinued"
     * @const
     */
    "Discontinued": "Discontinued",

    /**
     * value: "InStock"
     * @const
     */
    "InStock": "InStock",

    /**
     * value: "InStoreOnly"
     * @const
     */
    "InStoreOnly": "InStoreOnly",

    /**
     * value: "LimitedAvailability"
     * @const
     */
    "LimitedAvailability": "LimitedAvailability",

    /**
     * value: "OnlineOnly"
     * @const
     */
    "OnlineOnly": "OnlineOnly",

    /**
     * value: "OutOfStock"
     * @const
     */
    "OutOfStock": "OutOfStock",

    /**
     * value: "PreOrder"
     * @const
     */
    "PreOrder": "PreOrder",

    /**
     * value: "SoldOut"
     * @const
     */
    "SoldOut": "SoldOut"
};


/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
TicketOffer['CategoryEnum'] = {

    /**
     * value: "primary"
     * @const
     */
    "primary": "primary",

    /**
     * value: "secondary"
     * @const
     */
    "secondary": "secondary",

    /**
     * value: "presale"
     * @const
     */
    "presale": "presale",

    /**
     * value: "member"
     * @const
     */
    "member": "member",

    /**
     * value: "premium"
     * @const
     */
    "premium": "premium",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default TicketOffer;

