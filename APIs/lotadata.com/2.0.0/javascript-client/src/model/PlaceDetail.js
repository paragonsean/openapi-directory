/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import ContactDetail from './ContactDetail';
import FeatureReference from './FeatureReference';
import GeoPt from './GeoPt';
import ImageMeta from './ImageMeta';
import PlaceReference from './PlaceReference';
import Timeframe from './Timeframe';
import VirtualLocation from './VirtualLocation';

/**
 * The PlaceDetail model module.
 * @module model/PlaceDetail
 * @version 2.0.0
 */
class PlaceDetail {
    /**
     * Constructs a new <code>PlaceDetail</code>.
     * @alias module:model/PlaceDetail
     * @implements module:model/PlaceReference
     */
    constructor() { 
        PlaceReference.initialize(this);
        PlaceDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaceDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaceDetail} obj Optional instance to populate.
     * @return {module:model/PlaceDetail} The populated <code>PlaceDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaceDetail();
            PlaceReference.constructFromObject(data, obj);

            if (data.hasOwnProperty('ambience')) {
                obj['ambience'] = ApiClient.convertToType(data['ambience'], [FeatureReference]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], [FeatureReference]);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ContactDetail.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], [FeatureReference]);
            }
            if (data.hasOwnProperty('openingHours')) {
                obj['openingHours'] = ApiClient.convertToType(data['openingHours'], [Timeframe]);
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], [ImageMeta]);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('geo')) {
                obj['geo'] = GeoPt.constructFromObject(data['geo']);
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = ApiClient.convertToType(data['geometry'], Object);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = VirtualLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ImageMeta.constructFromObject(data['logo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], [FeatureReference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaceDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaceDetail</code>.
     */
    static validateJSON(data) {
        if (data['ambience']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ambience'])) {
                throw new Error("Expected the field `ambience` to be an array in the JSON data but got " + data['ambience']);
            }
            // validate the optional field `ambience` (array)
            for (const item of data['ambience']) {
                FeatureReference.validateJSON(item);
            };
        }
        if (data['category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category'])) {
                throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
            }
            // validate the optional field `category` (array)
            for (const item of data['category']) {
                FeatureReference.validateJSON(item);
            };
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          ContactDetail.validateJSON(data['contact']);
        }
        if (data['function']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['function'])) {
                throw new Error("Expected the field `function` to be an array in the JSON data but got " + data['function']);
            }
            // validate the optional field `function` (array)
            for (const item of data['function']) {
                FeatureReference.validateJSON(item);
            };
        }
        if (data['openingHours']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['openingHours'])) {
                throw new Error("Expected the field `openingHours` to be an array in the JSON data but got " + data['openingHours']);
            }
            // validate the optional field `openingHours` (array)
            for (const item of data['openingHours']) {
                Timeframe.validateJSON(item);
            };
        }
        if (data['photo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photo'])) {
                throw new Error("Expected the field `photo` to be an array in the JSON data but got " + data['photo']);
            }
            // validate the optional field `photo` (array)
            for (const item of data['photo']) {
                ImageMeta.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is a string
        if (data['@type'] && !(typeof data['@type'] === 'string' || data['@type'] instanceof String)) {
            throw new Error("Expected the field `@type` to be a primitive type in the JSON string but got " + data['@type']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // validate the optional field `geo`
        if (data['geo']) { // data not null
          GeoPt.validateJSON(data['geo']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          VirtualLocation.validateJSON(data['location']);
        }
        // validate the optional field `logo`
        if (data['logo']) { // data not null
          ImageMeta.validateJSON(data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['tag']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tag'])) {
                throw new Error("Expected the field `tag` to be an array in the JSON data but got " + data['tag']);
            }
            // validate the optional field `tag` (array)
            for (const item of data['tag']) {
                FeatureReference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * expected mood and feel of the event
 * @member {Array.<module:model/FeatureReference>} ambience
 */
PlaceDetail.prototype['ambience'] = undefined;

/**
 * Associated PlaceCategory. May be multiple (Tier 1)
 * @member {Array.<module:model/FeatureReference>} category
 */
PlaceDetail.prototype['category'] = undefined;

/**
 * @member {module:model/ContactDetail} contact
 */
PlaceDetail.prototype['contact'] = undefined;

/**
 * PlaceFunction. (Tier 2 taxonomy)
 * @member {Array.<module:model/FeatureReference>} function
 */
PlaceDetail.prototype['function'] = undefined;

/**
 * @member {Array.<module:model/Timeframe>} openingHours
 */
PlaceDetail.prototype['openingHours'] = undefined;

/**
 * @member {Array.<module:model/ImageMeta>} photo
 */
PlaceDetail.prototype['photo'] = undefined;

/**
 * @member {String} @id
 */
PlaceDetail.prototype['@id'] = undefined;

/**
 * Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world
 * @member {module:model/PlaceDetail.TypeEnum} @type
 */
PlaceDetail.prototype['@type'] = undefined;

/**
 * @member {module:model/Address} address
 */
PlaceDetail.prototype['address'] = undefined;

/**
 * @member {module:model/GeoPt} geo
 */
PlaceDetail.prototype['geo'] = undefined;

/**
 * Shape defined per GeoJSON spec
 * @member {Object} geometry
 */
PlaceDetail.prototype['geometry'] = undefined;

/**
 * @member {module:model/VirtualLocation} location
 */
PlaceDetail.prototype['location'] = undefined;

/**
 * @member {module:model/ImageMeta} logo
 */
PlaceDetail.prototype['logo'] = undefined;

/**
 * @member {String} name
 */
PlaceDetail.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/FeatureReference>} tag
 */
PlaceDetail.prototype['tag'] = undefined;


// Implement PlaceReference interface:
/**
 * @member {String} @id
 */
PlaceReference.prototype['@id'] = undefined;
/**
 * Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world
 * @member {module:model/PlaceReference.TypeEnum} @type
 */
PlaceReference.prototype['@type'] = undefined;
/**
 * @member {module:model/Address} address
 */
PlaceReference.prototype['address'] = undefined;
/**
 * @member {module:model/GeoPt} geo
 */
PlaceReference.prototype['geo'] = undefined;
/**
 * Shape defined per GeoJSON spec
 * @member {Object} geometry
 */
PlaceReference.prototype['geometry'] = undefined;
/**
 * @member {module:model/VirtualLocation} location
 */
PlaceReference.prototype['location'] = undefined;
/**
 * @member {module:model/ImageMeta} logo
 */
PlaceReference.prototype['logo'] = undefined;
/**
 * @member {String} name
 */
PlaceReference.prototype['name'] = undefined;
/**
 * @member {Array.<module:model/FeatureReference>} tag
 */
PlaceReference.prototype['tag'] = undefined;



/**
 * Allowed values for the <code>@type</code> property.
 * @enum {String}
 * @readonly
 */
PlaceDetail['TypeEnum'] = {

    /**
     * value: "Place"
     * @const
     */
    "Place": "Place",

    /**
     * value: "LocalBusiness"
     * @const
     */
    "LocalBusiness": "LocalBusiness",

    /**
     * value: "AdministrativeArea"
     * @const
     */
    "AdministrativeArea": "AdministrativeArea",

    /**
     * value: "TouristAttraction"
     * @const
     */
    "TouristAttraction": "TouristAttraction",

    /**
     * value: "Landform"
     * @const
     */
    "Landform": "Landform",

    /**
     * value: "LandmarksOrHistoricalBuildings"
     * @const
     */
    "LandmarksOrHistoricalBuildings": "LandmarksOrHistoricalBuildings",

    /**
     * value: "Residence"
     * @const
     */
    "Residence": "Residence",

    /**
     * value: "Virtual"
     * @const
     */
    "Virtual": "Virtual"
};



export default PlaceDetail;

