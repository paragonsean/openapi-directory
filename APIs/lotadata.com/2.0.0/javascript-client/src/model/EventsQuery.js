/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventsQuery model module.
 * @module model/EventsQuery
 * @version 2.0.0
 */
class EventsQuery {
    /**
     * Constructs a new <code>EventsQuery</code>.
     * Specific filters understood and executed for this query. If your parameter is not visible here, then consult the documentation for correct usage.
     * @alias module:model/EventsQuery
     */
    constructor() { 
        
        EventsQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsQuery} obj Optional instance to populate.
     * @return {module:model/EventsQuery} The populated <code>EventsQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsQuery();

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], ['String']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['activity'])) {
            throw new Error("Expected the field `activity` to be an array in the JSON data but got " + data['activity']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }

        return true;
    }


}



/**
 * required activity types
 * @member {Array.<String>} activity
 */
EventsQuery.prototype['activity'] = undefined;

/**
 * required categories
 * @member {Array.<String>} category
 */
EventsQuery.prototype['category'] = undefined;

/**
 * maximum number of matches to return
 * @member {Number} limit
 */
EventsQuery.prototype['limit'] = undefined;






export default EventsQuery;

