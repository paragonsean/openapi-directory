/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import PlaceDetail from '../model/PlaceDetail';
import PlacesSearchResponse from '../model/PlacesSearchResponse';

/**
* Places service.
* @module api/PlacesApi
* @version 2.0.0
*/
export default class PlacesApi {

    /**
    * Constructs a new PlacesApi. 
    * @alias module:api/PlacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the placesGet operation.
     * @callback module:api/PlacesApi~placesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlacesSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Venues, landmarks, regions, these are all places to search.
     * @param {module:model/String} fieldset Return results starting at specified offset (summary, context, detail)
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [category] List of required PlaceCategory ids (Tier 1)
     * @param {Array.<String>} [_function] List of required PlaceFunction ids (Tier 2)
     * @param {Array.<String>} [ambience] List of required ambience ids
     * @param {Array.<String>} [tag] List of required tags
     * @param {String} [type] Specific PlaceType to return
     * @param {String} [name] Match on place names
     * @param {Boolean} [exact] Require an exact name match
     * @param {Number} [capacityMin] Min capacity at location
     * @param {Number} [capacityMax] Min capacity at location
     * @param {String} [street] Address of the place or street component of the address
     * @param {String} [locality] city, town, or neighborhood of the place
     * @param {String} [region] region or state
     * @param {String} [postalCode] Postal or zip code
     * @param {String} [country] country component of the address
     * @param {String} [center] latitude,longitude of the origin point
     * @param {Number} [radius] Distance from origin in meters
     * @param {Array.<String>} [bbox] Corner of a bounding box (lat,lng). Requires 0 or 2 pairs
     * @param {Array.<String>} [polygon] Closed custom polygon. Ordered list of lat,lng pairs
     * @param {String} [within] Search within specified geopolitical place id
     * @param {Number} [offset] Return results starting at specified offset
     * @param {Number} [limit] Max results to return
     * @param {module:api/PlacesApi~placesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlacesSearchResponse}
     */
    placesGet(fieldset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldset' is set
      if (fieldset === undefined || fieldset === null) {
        throw new Error("Missing the required parameter 'fieldset' when calling placesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': this.apiClient.buildCollectionParam(opts['category'], 'multi'),
        'function': this.apiClient.buildCollectionParam(opts['_function'], 'multi'),
        'ambience': this.apiClient.buildCollectionParam(opts['ambience'], 'csv'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'csv'),
        'type': opts['type'],
        'name': opts['name'],
        'exact': opts['exact'],
        'capacity_min': opts['capacityMin'],
        'capacity_max': opts['capacityMax'],
        'street': opts['street'],
        'locality': opts['locality'],
        'region': opts['region'],
        'postal_code': opts['postalCode'],
        'country': opts['country'],
        'center': opts['center'],
        'radius': opts['radius'],
        'bbox': this.apiClient.buildCollectionParam(opts['bbox'], 'multi'),
        'polygon': this.apiClient.buildCollectionParam(opts['polygon'], 'multi'),
        'within': opts['within'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'fieldset': fieldset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlacesSearchResponse;
      return this.apiClient.callApi(
        '/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placesIdGet operation.
     * @callback module:api/PlacesApi~placesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaceDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific place details
     * @param {String} id place @id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [fieldset = 'summary')] 
     * @param {module:api/PlacesApi~placesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaceDetail}
     */
    placesIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling placesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaceDetail;
      return this.apiClient.callApi(
        '/places/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
