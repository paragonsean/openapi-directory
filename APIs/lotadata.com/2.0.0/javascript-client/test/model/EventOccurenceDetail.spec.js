/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LotaData);
  }
}(this, function(expect, LotaData) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LotaData.EventOccurenceDetail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EventOccurenceDetail', function() {
    it('should create an instance of EventOccurenceDetail', function() {
      // uncomment below and update the code to test EventOccurenceDetail
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be.a(LotaData.EventOccurenceDetail);
    });

    it('should have the property id (base name: "@id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "@type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property activity (base name: "activity")', function() {
      // uncomment below and update the code to test the property activity
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property ambience (base name: "ambience")', function() {
      // uncomment below and update the code to test the property ambience
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property at (base name: "at")', function() {
      // uncomment below and update the code to test the property at
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property awayTeam (base name: "awayTeam")', function() {
      // uncomment below and update the code to test the property awayTeam
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property contactPoint (base name: "contactPoint")', function() {
      // uncomment below and update the code to test the property contactPoint
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property doorTime (base name: "doorTime")', function() {
      // uncomment below and update the code to test the property doorTime
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property endApprox (base name: "endApprox")', function() {
      // uncomment below and update the code to test the property endApprox
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property extTaxonomy (base name: "extTaxonomy")', function() {
      // uncomment below and update the code to test the property extTaxonomy
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property genre (base name: "genre")', function() {
      // uncomment below and update the code to test the property genre
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property headline (base name: "headline")', function() {
      // uncomment below and update the code to test the property headline
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property homeTeam (base name: "homeTeam")', function() {
      // uncomment below and update the code to test the property homeTeam
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property htmlDescription (base name: "htmlDescription")', function() {
      // uncomment below and update the code to test the property htmlDescription
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property inLanguage (base name: "inLanguage")', function() {
      // uncomment below and update the code to test the property inLanguage
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property noTime (base name: "noTime")', function() {
      // uncomment below and update the code to test the property noTime
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property offers (base name: "offers")', function() {
      // uncomment below and update the code to test the property offers
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property onDemand (base name: "onDemand")', function() {
      // uncomment below and update the code to test the property onDemand
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property performer (base name: "performer")', function() {
      // uncomment below and update the code to test the property performer
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property photo (base name: "photo")', function() {
      // uncomment below and update the code to test the property photo
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property superEvent (base name: "superEvent")', function() {
      // uncomment below and update the code to test the property superEvent
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

    it('should have the property workPerformed (base name: "workPerformed")', function() {
      // uncomment below and update the code to test the property workPerformed
      //var instance = new LotaData.EventOccurenceDetail();
      //expect(instance).to.be();
    });

  });

}));
