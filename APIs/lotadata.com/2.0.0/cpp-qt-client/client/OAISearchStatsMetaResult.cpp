/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchStatsMetaResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchStatsMetaResult::OAISearchStatsMetaResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchStatsMetaResult::OAISearchStatsMetaResult() {
    this->initializeModel();
}

OAISearchStatsMetaResult::~OAISearchStatsMetaResult() {}

void OAISearchStatsMetaResult::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_fieldset_isSet = false;
    m_fieldset_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;
}

void OAISearchStatsMetaResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchStatsMetaResult::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_fieldset_isValid = ::OpenAPI::fromJsonValue(m_fieldset, json[QString("fieldset")]);
    m_fieldset_isSet = !json[QString("fieldset")].isNull() && m_fieldset_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;
}

QString OAISearchStatsMetaResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchStatsMetaResult::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_fieldset_isSet) {
        obj.insert(QString("fieldset"), ::OpenAPI::toJsonValue(m_fieldset));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    return obj;
}

qint32 OAISearchStatsMetaResult::getCount() const {
    return m_count;
}
void OAISearchStatsMetaResult::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISearchStatsMetaResult::is_count_Set() const{
    return m_count_isSet;
}

bool OAISearchStatsMetaResult::is_count_Valid() const{
    return m_count_isValid;
}

QString OAISearchStatsMetaResult::getFieldset() const {
    return m_fieldset;
}
void OAISearchStatsMetaResult::setFieldset(const QString &fieldset) {
    m_fieldset = fieldset;
    m_fieldset_isSet = true;
}

bool OAISearchStatsMetaResult::is_fieldset_Set() const{
    return m_fieldset_isSet;
}

bool OAISearchStatsMetaResult::is_fieldset_Valid() const{
    return m_fieldset_isValid;
}

qint32 OAISearchStatsMetaResult::getRuntime() const {
    return m_runtime;
}
void OAISearchStatsMetaResult::setRuntime(const qint32 &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAISearchStatsMetaResult::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAISearchStatsMetaResult::is_runtime_Valid() const{
    return m_runtime_isValid;
}

bool OAISearchStatsMetaResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fieldset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchStatsMetaResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
