/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaceReference.h
 *
 * Unique Location
 */

#ifndef OAIPlaceReference_H
#define OAIPlaceReference_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIFeatureReference.h"
#include "OAIGeoPt.h"
#include "OAIImageMeta.h"
#include "OAIObject.h"
#include "OAIVirtualLocation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddress;
class OAIGeoPt;
class OAIVirtualLocation;
class OAIImageMeta;
class OAIFeatureReference;

class OAIPlaceReference : public OAIObject {
public:
    OAIPlaceReference();
    OAIPlaceReference(QString json);
    ~OAIPlaceReference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIAddress getAddress() const;
    void setAddress(const OAIAddress &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    OAIGeoPt getGeo() const;
    void setGeo(const OAIGeoPt &geo);
    bool is_geo_Set() const;
    bool is_geo_Valid() const;

    OAIObject getGeometry() const;
    void setGeometry(const OAIObject &geometry);
    bool is_geometry_Set() const;
    bool is_geometry_Valid() const;

    OAIVirtualLocation getLocation() const;
    void setLocation(const OAIVirtualLocation &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    OAIImageMeta getLogo() const;
    void setLogo(const OAIImageMeta &logo);
    bool is_logo_Set() const;
    bool is_logo_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIFeatureReference> getTag() const;
    void setTag(const QList<OAIFeatureReference> &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIAddress m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    OAIGeoPt m_geo;
    bool m_geo_isSet;
    bool m_geo_isValid;

    OAIObject m_geometry;
    bool m_geometry_isSet;
    bool m_geometry_isValid;

    OAIVirtualLocation m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    OAIImageMeta m_logo;
    bool m_logo_isSet;
    bool m_logo_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIFeatureReference> m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaceReference)

#endif // OAIPlaceReference_H
