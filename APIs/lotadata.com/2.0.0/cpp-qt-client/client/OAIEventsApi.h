/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIEventOccurenceDetail.h"
#include "OAIEventsSearchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fieldset QString [required]
    * @param[in]  category QList<QString> [optional]
    * @param[in]  activity QString [optional]
    * @param[in]  ambience QString [optional]
    * @param[in]  genre QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  capacity_min double [optional]
    * @param[in]  capacity_max double [optional]
    * @param[in]  center QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  bbox QList<QString> [optional]
    * @param[in]  polygon QList<QString> [optional]
    * @param[in]  within QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void eventsGet(const QString &fieldset, const ::OpenAPI::OptionalParam<QList<QString>> &category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &activity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ambience = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &genre = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &capacity_min = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &capacity_max = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &center = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &bbox = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &polygon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fieldset QString [optional]
    */
    virtual void eventsIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &fieldset = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventsGetCallback(OAIHttpRequestWorker *worker);
    void eventsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventsGetSignal(OAIEventsSearchResponse summary);
    void eventsIdGetSignal(OAIEventOccurenceDetail summary);


    void eventsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventsSearchResponse summary);
    void eventsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIEventOccurenceDetail summary);

    Q_DECL_DEPRECATED_X("Use eventsGetSignalError() instead")
    void eventsGetSignalE(OAIEventsSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalError(OAIEventsSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdGetSignalError() instead")
    void eventsIdGetSignalE(OAIEventOccurenceDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdGetSignalError(OAIEventOccurenceDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventsGetSignalErrorFull() instead")
    void eventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdGetSignalErrorFull() instead")
    void eventsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
