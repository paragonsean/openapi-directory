/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_cause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_cause::OAIError_cause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_cause::OAIError_cause() {
    this->initializeModel();
}

OAIError_cause::~OAIError_cause() {}

void OAIError_cause::initializeModel() {

    m_expected_isSet = false;
    m_expected_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIError_cause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_cause::fromJsonObject(QJsonObject json) {

    m_expected_isValid = ::OpenAPI::fromJsonValue(m_expected, json[QString("expected")]);
    m_expected_isSet = !json[QString("expected")].isNull() && m_expected_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIError_cause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_cause::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_isSet) {
        obj.insert(QString("expected"), ::OpenAPI::toJsonValue(m_expected));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIError_cause::getExpected() const {
    return m_expected;
}
void OAIError_cause::setExpected(const QString &expected) {
    m_expected = expected;
    m_expected_isSet = true;
}

bool OAIError_cause::is_expected_Set() const{
    return m_expected_isSet;
}

bool OAIError_cause::is_expected_Valid() const{
    return m_expected_isValid;
}

QString OAIError_cause::getPath() const {
    return m_path;
}
void OAIError_cause::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIError_cause::is_path_Set() const{
    return m_path_isSet;
}

bool OAIError_cause::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIError_cause::getRule() const {
    return m_rule;
}
void OAIError_cause::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIError_cause::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIError_cause::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAIError_cause::getValue() const {
    return m_value;
}
void OAIError_cause::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIError_cause::is_value_Set() const{
    return m_value_isSet;
}

bool OAIError_cause::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIError_cause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_cause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
