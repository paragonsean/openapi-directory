/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketOffer_inventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketOffer_inventory::OAITicketOffer_inventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketOffer_inventory::OAITicketOffer_inventory() {
    this->initializeModel();
}

OAITicketOffer_inventory::~OAITicketOffer_inventory() {}

void OAITicketOffer_inventory::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAITicketOffer_inventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketOffer_inventory::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAITicketOffer_inventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketOffer_inventory::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAITicketOffer_inventory::getAvailable() const {
    return m_available;
}
void OAITicketOffer_inventory::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAITicketOffer_inventory::is_available_Set() const{
    return m_available_isSet;
}

bool OAITicketOffer_inventory::is_available_Valid() const{
    return m_available_isValid;
}

qint32 OAITicketOffer_inventory::getTotal() const {
    return m_total;
}
void OAITicketOffer_inventory::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITicketOffer_inventory::is_total_Set() const{
    return m_total_isSet;
}

bool OAITicketOffer_inventory::is_total_Valid() const{
    return m_total_isValid;
}

bool OAITicketOffer_inventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketOffer_inventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
