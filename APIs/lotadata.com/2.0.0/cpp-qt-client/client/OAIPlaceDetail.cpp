/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceDetail::OAIPlaceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceDetail::OAIPlaceDetail() {
    this->initializeModel();
}

OAIPlaceDetail::~OAIPlaceDetail() {}

void OAIPlaceDetail::initializeModel() {

    m_ambience_isSet = false;
    m_ambience_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_opening_hours_isSet = false;
    m_opening_hours_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIPlaceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceDetail::fromJsonObject(QJsonObject json) {

    m_ambience_isValid = ::OpenAPI::fromJsonValue(m_ambience, json[QString("ambience")]);
    m_ambience_isSet = !json[QString("ambience")].isNull() && m_ambience_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_opening_hours, json[QString("openingHours")]);
    m_opening_hours_isSet = !json[QString("openingHours")].isNull() && m_opening_hours_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("photo")]);
    m_photo_isSet = !json[QString("photo")].isNull() && m_photo_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIPlaceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_ambience.size() > 0) {
        obj.insert(QString("ambience"), ::OpenAPI::toJsonValue(m_ambience));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_function.size() > 0) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_opening_hours.size() > 0) {
        obj.insert(QString("openingHours"), ::OpenAPI::toJsonValue(m_opening_hours));
    }
    if (m_photo.size() > 0) {
        obj.insert(QString("photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_geometry_isSet) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tag.size() > 0) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QList<OAIFeatureReference> OAIPlaceDetail::getAmbience() const {
    return m_ambience;
}
void OAIPlaceDetail::setAmbience(const QList<OAIFeatureReference> &ambience) {
    m_ambience = ambience;
    m_ambience_isSet = true;
}

bool OAIPlaceDetail::is_ambience_Set() const{
    return m_ambience_isSet;
}

bool OAIPlaceDetail::is_ambience_Valid() const{
    return m_ambience_isValid;
}

QList<OAIFeatureReference> OAIPlaceDetail::getCategory() const {
    return m_category;
}
void OAIPlaceDetail::setCategory(const QList<OAIFeatureReference> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPlaceDetail::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPlaceDetail::is_category_Valid() const{
    return m_category_isValid;
}

OAIContactDetail OAIPlaceDetail::getContact() const {
    return m_contact;
}
void OAIPlaceDetail::setContact(const OAIContactDetail &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIPlaceDetail::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIPlaceDetail::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<OAIFeatureReference> OAIPlaceDetail::getFunction() const {
    return m_function;
}
void OAIPlaceDetail::setFunction(const QList<OAIFeatureReference> &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIPlaceDetail::is_function_Set() const{
    return m_function_isSet;
}

bool OAIPlaceDetail::is_function_Valid() const{
    return m_function_isValid;
}

QList<OAITimeframe> OAIPlaceDetail::getOpeningHours() const {
    return m_opening_hours;
}
void OAIPlaceDetail::setOpeningHours(const QList<OAITimeframe> &opening_hours) {
    m_opening_hours = opening_hours;
    m_opening_hours_isSet = true;
}

bool OAIPlaceDetail::is_opening_hours_Set() const{
    return m_opening_hours_isSet;
}

bool OAIPlaceDetail::is_opening_hours_Valid() const{
    return m_opening_hours_isValid;
}

QList<OAIImageMeta> OAIPlaceDetail::getPhoto() const {
    return m_photo;
}
void OAIPlaceDetail::setPhoto(const QList<OAIImageMeta> &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIPlaceDetail::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIPlaceDetail::is_photo_Valid() const{
    return m_photo_isValid;
}

QString OAIPlaceDetail::getId() const {
    return m_id;
}
void OAIPlaceDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaceDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaceDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaceDetail::getType() const {
    return m_type;
}
void OAIPlaceDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaceDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaceDetail::is_type_Valid() const{
    return m_type_isValid;
}

OAIAddress OAIPlaceDetail::getAddress() const {
    return m_address;
}
void OAIPlaceDetail::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPlaceDetail::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPlaceDetail::is_address_Valid() const{
    return m_address_isValid;
}

OAIGeoPt OAIPlaceDetail::getGeo() const {
    return m_geo;
}
void OAIPlaceDetail::setGeo(const OAIGeoPt &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAIPlaceDetail::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAIPlaceDetail::is_geo_Valid() const{
    return m_geo_isValid;
}

OAIObject OAIPlaceDetail::getGeometry() const {
    return m_geometry;
}
void OAIPlaceDetail::setGeometry(const OAIObject &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIPlaceDetail::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIPlaceDetail::is_geometry_Valid() const{
    return m_geometry_isValid;
}

OAIVirtualLocation OAIPlaceDetail::getLocation() const {
    return m_location;
}
void OAIPlaceDetail::setLocation(const OAIVirtualLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPlaceDetail::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPlaceDetail::is_location_Valid() const{
    return m_location_isValid;
}

OAIImageMeta OAIPlaceDetail::getLogo() const {
    return m_logo;
}
void OAIPlaceDetail::setLogo(const OAIImageMeta &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIPlaceDetail::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIPlaceDetail::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIPlaceDetail::getName() const {
    return m_name;
}
void OAIPlaceDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaceDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaceDetail::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIFeatureReference> OAIPlaceDetail::getTag() const {
    return m_tag;
}
void OAIPlaceDetail::setTag(const QList<OAIFeatureReference> &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIPlaceDetail::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIPlaceDetail::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIPlaceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ambience.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
