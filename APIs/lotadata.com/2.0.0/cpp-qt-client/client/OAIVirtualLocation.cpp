/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualLocation::OAIVirtualLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualLocation::OAIVirtualLocation() {
    this->initializeModel();
}

OAIVirtualLocation::~OAIVirtualLocation() {}

void OAIVirtualLocation::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVirtualLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualLocation::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVirtualLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVirtualLocation::getDomain() const {
    return m_domain;
}
void OAIVirtualLocation::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIVirtualLocation::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIVirtualLocation::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIVirtualLocation::getPlatform() const {
    return m_platform;
}
void OAIVirtualLocation::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIVirtualLocation::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIVirtualLocation::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIVirtualLocation::getUrl() const {
    return m_url;
}
void OAIVirtualLocation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVirtualLocation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVirtualLocation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVirtualLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
