/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeframe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeframe::OAITimeframe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeframe::OAITimeframe() {
    this->initializeModel();
}

OAITimeframe::~OAITimeframe() {}

void OAITimeframe::initializeModel() {

    m_closes_isSet = false;
    m_closes_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_open247_isSet = false;
    m_open247_isValid = false;

    m_opens_isSet = false;
    m_opens_isValid = false;
}

void OAITimeframe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeframe::fromJsonObject(QJsonObject json) {

    m_closes_isValid = ::OpenAPI::fromJsonValue(m_closes, json[QString("closes")]);
    m_closes_isSet = !json[QString("closes")].isNull() && m_closes_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_open247_isValid = ::OpenAPI::fromJsonValue(m_open247, json[QString("open247")]);
    m_open247_isSet = !json[QString("open247")].isNull() && m_open247_isValid;

    m_opens_isValid = ::OpenAPI::fromJsonValue(m_opens, json[QString("opens")]);
    m_opens_isSet = !json[QString("opens")].isNull() && m_opens_isValid;
}

QString OAITimeframe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeframe::asJsonObject() const {
    QJsonObject obj;
    if (m_closes_isSet) {
        obj.insert(QString("closes"), ::OpenAPI::toJsonValue(m_closes));
    }
    if (m_day_of_week.size() > 0) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_open247_isSet) {
        obj.insert(QString("open247"), ::OpenAPI::toJsonValue(m_open247));
    }
    if (m_opens_isSet) {
        obj.insert(QString("opens"), ::OpenAPI::toJsonValue(m_opens));
    }
    return obj;
}

QDateTime OAITimeframe::getCloses() const {
    return m_closes;
}
void OAITimeframe::setCloses(const QDateTime &closes) {
    m_closes = closes;
    m_closes_isSet = true;
}

bool OAITimeframe::is_closes_Set() const{
    return m_closes_isSet;
}

bool OAITimeframe::is_closes_Valid() const{
    return m_closes_isValid;
}

QList<qint32> OAITimeframe::getDayOfWeek() const {
    return m_day_of_week;
}
void OAITimeframe::setDayOfWeek(const QList<qint32> &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAITimeframe::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAITimeframe::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

bool OAITimeframe::isOpen247() const {
    return m_open247;
}
void OAITimeframe::setOpen247(const bool &open247) {
    m_open247 = open247;
    m_open247_isSet = true;
}

bool OAITimeframe::is_open247_Set() const{
    return m_open247_isSet;
}

bool OAITimeframe::is_open247_Valid() const{
    return m_open247_isValid;
}

QDateTime OAITimeframe::getOpens() const {
    return m_opens;
}
void OAITimeframe::setOpens(const QDateTime &opens) {
    m_opens = opens;
    m_opens_isSet = true;
}

bool OAITimeframe::is_opens_Set() const{
    return m_opens_isSet;
}

bool OAITimeframe::is_opens_Valid() const{
    return m_opens_isValid;
}

bool OAITimeframe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_open247_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeframe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
