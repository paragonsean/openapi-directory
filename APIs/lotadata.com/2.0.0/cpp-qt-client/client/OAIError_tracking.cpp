/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_tracking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_tracking::OAIError_tracking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_tracking::OAIError_tracking() {
    this->initializeModel();
}

OAIError_tracking::~OAIError_tracking() {}

void OAIError_tracking::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAIError_tracking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_tracking::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAIError_tracking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_tracking::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_session_isSet) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

QString OAIError_tracking::getId() const {
    return m_id;
}
void OAIError_tracking::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIError_tracking::is_id_Set() const{
    return m_id_isSet;
}

bool OAIError_tracking::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIError_tracking::getSession() const {
    return m_session;
}
void OAIError_tracking::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIError_tracking::is_session_Set() const{
    return m_session_isSet;
}

bool OAIError_tracking::is_session_Valid() const{
    return m_session_isValid;
}

bool OAIError_tracking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_tracking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
