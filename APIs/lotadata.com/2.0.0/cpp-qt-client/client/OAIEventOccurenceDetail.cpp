/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventOccurenceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventOccurenceDetail::OAIEventOccurenceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventOccurenceDetail::OAIEventOccurenceDetail() {
    this->initializeModel();
}

OAIEventOccurenceDetail::~OAIEventOccurenceDetail() {}

void OAIEventOccurenceDetail::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_ambience_isSet = false;
    m_ambience_isValid = false;

    m_at_isSet = false;
    m_at_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_contact_point_isSet = false;
    m_contact_point_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_door_time_isSet = false;
    m_door_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_approx_isSet = false;
    m_end_approx_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_ext_taxonomy_isSet = false;
    m_ext_taxonomy_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_html_description_isSet = false;
    m_html_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_in_language_isSet = false;
    m_in_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_time_isSet = false;
    m_no_time_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_on_demand_isSet = false;
    m_on_demand_isValid = false;

    m_performer_isSet = false;
    m_performer_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_super_event_isSet = false;
    m_super_event_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_work_performed_isSet = false;
    m_work_performed_isValid = false;
}

void OAIEventOccurenceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventOccurenceDetail::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_ambience_isValid = ::OpenAPI::fromJsonValue(m_ambience, json[QString("ambience")]);
    m_ambience_isSet = !json[QString("ambience")].isNull() && m_ambience_isValid;

    m_at_isValid = ::OpenAPI::fromJsonValue(m_at, json[QString("at")]);
    m_at_isSet = !json[QString("at")].isNull() && m_at_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_contact_point_isValid = ::OpenAPI::fromJsonValue(m_contact_point, json[QString("contactPoint")]);
    m_contact_point_isSet = !json[QString("contactPoint")].isNull() && m_contact_point_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_door_time_isValid = ::OpenAPI::fromJsonValue(m_door_time, json[QString("doorTime")]);
    m_door_time_isSet = !json[QString("doorTime")].isNull() && m_door_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_approx_isValid = ::OpenAPI::fromJsonValue(m_end_approx, json[QString("endApprox")]);
    m_end_approx_isSet = !json[QString("endApprox")].isNull() && m_end_approx_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_ext_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_ext_taxonomy, json[QString("extTaxonomy")]);
    m_ext_taxonomy_isSet = !json[QString("extTaxonomy")].isNull() && m_ext_taxonomy_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_html_description_isValid = ::OpenAPI::fromJsonValue(m_html_description, json[QString("htmlDescription")]);
    m_html_description_isSet = !json[QString("htmlDescription")].isNull() && m_html_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_in_language_isValid = ::OpenAPI::fromJsonValue(m_in_language, json[QString("inLanguage")]);
    m_in_language_isSet = !json[QString("inLanguage")].isNull() && m_in_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_no_time_isValid = ::OpenAPI::fromJsonValue(m_no_time, json[QString("noTime")]);
    m_no_time_isSet = !json[QString("noTime")].isNull() && m_no_time_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_on_demand_isValid = ::OpenAPI::fromJsonValue(m_on_demand, json[QString("onDemand")]);
    m_on_demand_isSet = !json[QString("onDemand")].isNull() && m_on_demand_isValid;

    m_performer_isValid = ::OpenAPI::fromJsonValue(m_performer, json[QString("performer")]);
    m_performer_isSet = !json[QString("performer")].isNull() && m_performer_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("photo")]);
    m_photo_isSet = !json[QString("photo")].isNull() && m_photo_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_super_event_isValid = ::OpenAPI::fromJsonValue(m_super_event, json[QString("superEvent")]);
    m_super_event_isSet = !json[QString("superEvent")].isNull() && m_super_event_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_work_performed_isValid = ::OpenAPI::fromJsonValue(m_work_performed, json[QString("workPerformed")]);
    m_work_performed_isSet = !json[QString("workPerformed")].isNull() && m_work_performed_isValid;
}

QString OAIEventOccurenceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventOccurenceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_activity.size() > 0) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_ambience.size() > 0) {
        obj.insert(QString("ambience"), ::OpenAPI::toJsonValue(m_ambience));
    }
    if (m_at.isSet()) {
        obj.insert(QString("at"), ::OpenAPI::toJsonValue(m_at));
    }
    if (m_away_team.isSet()) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_contact_point.isSet()) {
        obj.insert(QString("contactPoint"), ::OpenAPI::toJsonValue(m_contact_point));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_door_time_isSet) {
        obj.insert(QString("doorTime"), ::OpenAPI::toJsonValue(m_door_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_approx_isSet) {
        obj.insert(QString("endApprox"), ::OpenAPI::toJsonValue(m_end_approx));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_ext_taxonomy.size() > 0) {
        obj.insert(QString("extTaxonomy"), ::OpenAPI::toJsonValue(m_ext_taxonomy));
    }
    if (m_genre.size() > 0) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_home_team.isSet()) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_html_description_isSet) {
        obj.insert(QString("htmlDescription"), ::OpenAPI::toJsonValue(m_html_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_in_language.isSet()) {
        obj.insert(QString("inLanguage"), ::OpenAPI::toJsonValue(m_in_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_time_isSet) {
        obj.insert(QString("noTime"), ::OpenAPI::toJsonValue(m_no_time));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_on_demand_isSet) {
        obj.insert(QString("onDemand"), ::OpenAPI::toJsonValue(m_on_demand));
    }
    if (m_performer.size() > 0) {
        obj.insert(QString("performer"), ::OpenAPI::toJsonValue(m_performer));
    }
    if (m_photo.size() > 0) {
        obj.insert(QString("photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_super_event.isSet()) {
        obj.insert(QString("superEvent"), ::OpenAPI::toJsonValue(m_super_event));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_work_performed.size() > 0) {
        obj.insert(QString("workPerformed"), ::OpenAPI::toJsonValue(m_work_performed));
    }
    return obj;
}

QString OAIEventOccurenceDetail::getId() const {
    return m_id;
}
void OAIEventOccurenceDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventOccurenceDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventOccurenceDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventOccurenceDetail::getType() const {
    return m_type;
}
void OAIEventOccurenceDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventOccurenceDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventOccurenceDetail::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getActivity() const {
    return m_activity;
}
void OAIEventOccurenceDetail::setActivity(const QList<OAIFeatureReference> &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIEventOccurenceDetail::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIEventOccurenceDetail::is_activity_Valid() const{
    return m_activity_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getAmbience() const {
    return m_ambience;
}
void OAIEventOccurenceDetail::setAmbience(const QList<OAIFeatureReference> &ambience) {
    m_ambience = ambience;
    m_ambience_isSet = true;
}

bool OAIEventOccurenceDetail::is_ambience_Set() const{
    return m_ambience_isSet;
}

bool OAIEventOccurenceDetail::is_ambience_Valid() const{
    return m_ambience_isValid;
}

OAIPlaceReference OAIEventOccurenceDetail::getAt() const {
    return m_at;
}
void OAIEventOccurenceDetail::setAt(const OAIPlaceReference &at) {
    m_at = at;
    m_at_isSet = true;
}

bool OAIEventOccurenceDetail::is_at_Set() const{
    return m_at_isSet;
}

bool OAIEventOccurenceDetail::is_at_Valid() const{
    return m_at_isValid;
}

OAIFeatureReference OAIEventOccurenceDetail::getAwayTeam() const {
    return m_away_team;
}
void OAIEventOccurenceDetail::setAwayTeam(const OAIFeatureReference &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIEventOccurenceDetail::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIEventOccurenceDetail::is_away_team_Valid() const{
    return m_away_team_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getCategory() const {
    return m_category;
}
void OAIEventOccurenceDetail::setCategory(const QList<OAIFeatureReference> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEventOccurenceDetail::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEventOccurenceDetail::is_category_Valid() const{
    return m_category_isValid;
}

OAIContactDetail OAIEventOccurenceDetail::getContactPoint() const {
    return m_contact_point;
}
void OAIEventOccurenceDetail::setContactPoint(const OAIContactDetail &contact_point) {
    m_contact_point = contact_point;
    m_contact_point_isSet = true;
}

bool OAIEventOccurenceDetail::is_contact_point_Set() const{
    return m_contact_point_isSet;
}

bool OAIEventOccurenceDetail::is_contact_point_Valid() const{
    return m_contact_point_isValid;
}

QString OAIEventOccurenceDetail::getDescription() const {
    return m_description;
}
void OAIEventOccurenceDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventOccurenceDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventOccurenceDetail::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIEventOccurenceDetail::getDoorTime() const {
    return m_door_time;
}
void OAIEventOccurenceDetail::setDoorTime(const QDateTime &door_time) {
    m_door_time = door_time;
    m_door_time_isSet = true;
}

bool OAIEventOccurenceDetail::is_door_time_Set() const{
    return m_door_time_isSet;
}

bool OAIEventOccurenceDetail::is_door_time_Valid() const{
    return m_door_time_isValid;
}

QString OAIEventOccurenceDetail::getDuration() const {
    return m_duration;
}
void OAIEventOccurenceDetail::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIEventOccurenceDetail::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIEventOccurenceDetail::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIEventOccurenceDetail::isEndApprox() const {
    return m_end_approx;
}
void OAIEventOccurenceDetail::setEndApprox(const bool &end_approx) {
    m_end_approx = end_approx;
    m_end_approx_isSet = true;
}

bool OAIEventOccurenceDetail::is_end_approx_Set() const{
    return m_end_approx_isSet;
}

bool OAIEventOccurenceDetail::is_end_approx_Valid() const{
    return m_end_approx_isValid;
}

QDateTime OAIEventOccurenceDetail::getEndDate() const {
    return m_end_date;
}
void OAIEventOccurenceDetail::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEventOccurenceDetail::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEventOccurenceDetail::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getExtTaxonomy() const {
    return m_ext_taxonomy;
}
void OAIEventOccurenceDetail::setExtTaxonomy(const QList<OAIFeatureReference> &ext_taxonomy) {
    m_ext_taxonomy = ext_taxonomy;
    m_ext_taxonomy_isSet = true;
}

bool OAIEventOccurenceDetail::is_ext_taxonomy_Set() const{
    return m_ext_taxonomy_isSet;
}

bool OAIEventOccurenceDetail::is_ext_taxonomy_Valid() const{
    return m_ext_taxonomy_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getGenre() const {
    return m_genre;
}
void OAIEventOccurenceDetail::setGenre(const QList<OAIFeatureReference> &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIEventOccurenceDetail::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIEventOccurenceDetail::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAIEventOccurenceDetail::getHeadline() const {
    return m_headline;
}
void OAIEventOccurenceDetail::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIEventOccurenceDetail::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIEventOccurenceDetail::is_headline_Valid() const{
    return m_headline_isValid;
}

OAIFeatureReference OAIEventOccurenceDetail::getHomeTeam() const {
    return m_home_team;
}
void OAIEventOccurenceDetail::setHomeTeam(const OAIFeatureReference &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIEventOccurenceDetail::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIEventOccurenceDetail::is_home_team_Valid() const{
    return m_home_team_isValid;
}

QString OAIEventOccurenceDetail::getHtmlDescription() const {
    return m_html_description;
}
void OAIEventOccurenceDetail::setHtmlDescription(const QString &html_description) {
    m_html_description = html_description;
    m_html_description_isSet = true;
}

bool OAIEventOccurenceDetail::is_html_description_Set() const{
    return m_html_description_isSet;
}

bool OAIEventOccurenceDetail::is_html_description_Valid() const{
    return m_html_description_isValid;
}

OAIImageMeta OAIEventOccurenceDetail::getImage() const {
    return m_image;
}
void OAIEventOccurenceDetail::setImage(const OAIImageMeta &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIEventOccurenceDetail::is_image_Set() const{
    return m_image_isSet;
}

bool OAIEventOccurenceDetail::is_image_Valid() const{
    return m_image_isValid;
}

OAIFeatureReference OAIEventOccurenceDetail::getInLanguage() const {
    return m_in_language;
}
void OAIEventOccurenceDetail::setInLanguage(const OAIFeatureReference &in_language) {
    m_in_language = in_language;
    m_in_language_isSet = true;
}

bool OAIEventOccurenceDetail::is_in_language_Set() const{
    return m_in_language_isSet;
}

bool OAIEventOccurenceDetail::is_in_language_Valid() const{
    return m_in_language_isValid;
}

QString OAIEventOccurenceDetail::getName() const {
    return m_name;
}
void OAIEventOccurenceDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventOccurenceDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventOccurenceDetail::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEventOccurenceDetail::isNoTime() const {
    return m_no_time;
}
void OAIEventOccurenceDetail::setNoTime(const bool &no_time) {
    m_no_time = no_time;
    m_no_time_isSet = true;
}

bool OAIEventOccurenceDetail::is_no_time_Set() const{
    return m_no_time_isSet;
}

bool OAIEventOccurenceDetail::is_no_time_Valid() const{
    return m_no_time_isValid;
}

QList<OAITicketOffer> OAIEventOccurenceDetail::getOffers() const {
    return m_offers;
}
void OAIEventOccurenceDetail::setOffers(const QList<OAITicketOffer> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIEventOccurenceDetail::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIEventOccurenceDetail::is_offers_Valid() const{
    return m_offers_isValid;
}

bool OAIEventOccurenceDetail::isOnDemand() const {
    return m_on_demand;
}
void OAIEventOccurenceDetail::setOnDemand(const bool &on_demand) {
    m_on_demand = on_demand;
    m_on_demand_isSet = true;
}

bool OAIEventOccurenceDetail::is_on_demand_Set() const{
    return m_on_demand_isSet;
}

bool OAIEventOccurenceDetail::is_on_demand_Valid() const{
    return m_on_demand_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getPerformer() const {
    return m_performer;
}
void OAIEventOccurenceDetail::setPerformer(const QList<OAIFeatureReference> &performer) {
    m_performer = performer;
    m_performer_isSet = true;
}

bool OAIEventOccurenceDetail::is_performer_Set() const{
    return m_performer_isSet;
}

bool OAIEventOccurenceDetail::is_performer_Valid() const{
    return m_performer_isValid;
}

QList<OAIImageMeta> OAIEventOccurenceDetail::getPhoto() const {
    return m_photo;
}
void OAIEventOccurenceDetail::setPhoto(const QList<OAIImageMeta> &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIEventOccurenceDetail::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIEventOccurenceDetail::is_photo_Valid() const{
    return m_photo_isValid;
}

QDateTime OAIEventOccurenceDetail::getStartDate() const {
    return m_start_date;
}
void OAIEventOccurenceDetail::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEventOccurenceDetail::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEventOccurenceDetail::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIOccurrenceReference OAIEventOccurenceDetail::getSuperEvent() const {
    return m_super_event;
}
void OAIEventOccurenceDetail::setSuperEvent(const OAIOccurrenceReference &super_event) {
    m_super_event = super_event;
    m_super_event_isSet = true;
}

bool OAIEventOccurenceDetail::is_super_event_Set() const{
    return m_super_event_isSet;
}

bool OAIEventOccurenceDetail::is_super_event_Valid() const{
    return m_super_event_isValid;
}

QDateTime OAIEventOccurenceDetail::getUpdated() const {
    return m_updated;
}
void OAIEventOccurenceDetail::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIEventOccurenceDetail::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIEventOccurenceDetail::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIEventOccurenceDetail::getUrl() const {
    return m_url;
}
void OAIEventOccurenceDetail::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEventOccurenceDetail::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEventOccurenceDetail::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIFeatureReference> OAIEventOccurenceDetail::getWorkPerformed() const {
    return m_work_performed;
}
void OAIEventOccurenceDetail::setWorkPerformed(const QList<OAIFeatureReference> &work_performed) {
    m_work_performed = work_performed;
    m_work_performed_isSet = true;
}

bool OAIEventOccurenceDetail::is_work_performed_Set() const{
    return m_work_performed_isSet;
}

bool OAIEventOccurenceDetail::is_work_performed_Valid() const{
    return m_work_performed_isValid;
}

bool OAIEventOccurenceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ambience.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_door_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_approx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_taxonomy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performer.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_performed.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventOccurenceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
