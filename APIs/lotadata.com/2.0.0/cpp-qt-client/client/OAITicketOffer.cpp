/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketOffer::OAITicketOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketOffer::OAITicketOffer() {
    this->initializeModel();
}

OAITicketOffer::~OAITicketOffer() {}

void OAITicketOffer::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_donation_isSet = false;
    m_donation_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_high_price_isSet = false;
    m_high_price_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_currency_isSet = false;
    m_price_currency_isValid = false;

    m_price_unknown_isSet = false;
    m_price_unknown_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITicketOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketOffer::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_donation_isValid = ::OpenAPI::fromJsonValue(m_donation, json[QString("donation")]);
    m_donation_isSet = !json[QString("donation")].isNull() && m_donation_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_high_price_isValid = ::OpenAPI::fromJsonValue(m_high_price, json[QString("highPrice")]);
    m_high_price_isSet = !json[QString("highPrice")].isNull() && m_high_price_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_currency_isValid = ::OpenAPI::fromJsonValue(m_price_currency, json[QString("priceCurrency")]);
    m_price_currency_isSet = !json[QString("priceCurrency")].isNull() && m_price_currency_isValid;

    m_price_unknown_isValid = ::OpenAPI::fromJsonValue(m_price_unknown, json[QString("priceUnknown")]);
    m_price_unknown_isSet = !json[QString("priceUnknown")].isNull() && m_price_unknown_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITicketOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_donation_isSet) {
        obj.insert(QString("donation"), ::OpenAPI::toJsonValue(m_donation));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_high_price_isSet) {
        obj.insert(QString("highPrice"), ::OpenAPI::toJsonValue(m_high_price));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_currency_isSet) {
        obj.insert(QString("priceCurrency"), ::OpenAPI::toJsonValue(m_price_currency));
    }
    if (m_price_unknown_isSet) {
        obj.insert(QString("priceUnknown"), ::OpenAPI::toJsonValue(m_price_unknown));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITicketOffer::getAvailability() const {
    return m_availability;
}
void OAITicketOffer::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAITicketOffer::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAITicketOffer::is_availability_Valid() const{
    return m_availability_isValid;
}

QString OAITicketOffer::getCategory() const {
    return m_category;
}
void OAITicketOffer::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITicketOffer::is_category_Set() const{
    return m_category_isSet;
}

bool OAITicketOffer::is_category_Valid() const{
    return m_category_isValid;
}

bool OAITicketOffer::isDonation() const {
    return m_donation;
}
void OAITicketOffer::setDonation(const bool &donation) {
    m_donation = donation;
    m_donation_isSet = true;
}

bool OAITicketOffer::is_donation_Set() const{
    return m_donation_isSet;
}

bool OAITicketOffer::is_donation_Valid() const{
    return m_donation_isValid;
}

double OAITicketOffer::getFee() const {
    return m_fee;
}
void OAITicketOffer::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAITicketOffer::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAITicketOffer::is_fee_Valid() const{
    return m_fee_isValid;
}

double OAITicketOffer::getHighPrice() const {
    return m_high_price;
}
void OAITicketOffer::setHighPrice(const double &high_price) {
    m_high_price = high_price;
    m_high_price_isSet = true;
}

bool OAITicketOffer::is_high_price_Set() const{
    return m_high_price_isSet;
}

bool OAITicketOffer::is_high_price_Valid() const{
    return m_high_price_isValid;
}

OAITicketOffer_inventory OAITicketOffer::getInventory() const {
    return m_inventory;
}
void OAITicketOffer::setInventory(const OAITicketOffer_inventory &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAITicketOffer::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAITicketOffer::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAITicketOffer::getName() const {
    return m_name;
}
void OAITicketOffer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITicketOffer::is_name_Set() const{
    return m_name_isSet;
}

bool OAITicketOffer::is_name_Valid() const{
    return m_name_isValid;
}

double OAITicketOffer::getPrice() const {
    return m_price;
}
void OAITicketOffer::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAITicketOffer::is_price_Set() const{
    return m_price_isSet;
}

bool OAITicketOffer::is_price_Valid() const{
    return m_price_isValid;
}

QString OAITicketOffer::getPriceCurrency() const {
    return m_price_currency;
}
void OAITicketOffer::setPriceCurrency(const QString &price_currency) {
    m_price_currency = price_currency;
    m_price_currency_isSet = true;
}

bool OAITicketOffer::is_price_currency_Set() const{
    return m_price_currency_isSet;
}

bool OAITicketOffer::is_price_currency_Valid() const{
    return m_price_currency_isValid;
}

bool OAITicketOffer::isPriceUnknown() const {
    return m_price_unknown;
}
void OAITicketOffer::setPriceUnknown(const bool &price_unknown) {
    m_price_unknown = price_unknown;
    m_price_unknown_isSet = true;
}

bool OAITicketOffer::is_price_unknown_Set() const{
    return m_price_unknown_isSet;
}

bool OAITicketOffer::is_price_unknown_Valid() const{
    return m_price_unknown_isValid;
}

QString OAITicketOffer::getUrl() const {
    return m_url;
}
void OAITicketOffer::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITicketOffer::is_url_Set() const{
    return m_url_isSet;
}

bool OAITicketOffer::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITicketOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
