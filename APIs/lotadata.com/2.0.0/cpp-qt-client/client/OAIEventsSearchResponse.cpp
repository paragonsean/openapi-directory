/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsSearchResponse::OAIEventsSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsSearchResponse::OAIEventsSearchResponse() {
    this->initializeModel();
}

OAIEventsSearchResponse::~OAIEventsSearchResponse() {}

void OAIEventsSearchResponse::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIEventsSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsSearchResponse::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIEventsSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

QList<OAIEventOccurenceDetail> OAIEventsSearchResponse::getEvents() const {
    return m_events;
}
void OAIEventsSearchResponse::setEvents(const QList<OAIEventOccurenceDetail> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIEventsSearchResponse::is_events_Set() const{
    return m_events_isSet;
}

bool OAIEventsSearchResponse::is_events_Valid() const{
    return m_events_isValid;
}

OAIEventsQuery OAIEventsSearchResponse::getQuery() const {
    return m_query;
}
void OAIEventsSearchResponse::setQuery(const OAIEventsQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIEventsSearchResponse::is_query_Set() const{
    return m_query_isSet;
}

bool OAIEventsSearchResponse::is_query_Valid() const{
    return m_query_isValid;
}

OAISearchStatsMetaResult OAIEventsSearchResponse::getStats() const {
    return m_stats;
}
void OAIEventsSearchResponse::setStats(const OAISearchStatsMetaResult &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIEventsSearchResponse::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIEventsSearchResponse::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIEventsSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
