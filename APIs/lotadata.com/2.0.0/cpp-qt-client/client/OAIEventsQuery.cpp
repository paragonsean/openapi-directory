/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsQuery::OAIEventsQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsQuery::OAIEventsQuery() {
    this->initializeModel();
}

OAIEventsQuery::~OAIEventsQuery() {}

void OAIEventsQuery::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIEventsQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsQuery::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;
}

QString OAIEventsQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_activity.size() > 0) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

QList<QString> OAIEventsQuery::getActivity() const {
    return m_activity;
}
void OAIEventsQuery::setActivity(const QList<QString> &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIEventsQuery::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIEventsQuery::is_activity_Valid() const{
    return m_activity_isValid;
}

QList<QString> OAIEventsQuery::getCategory() const {
    return m_category;
}
void OAIEventsQuery::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEventsQuery::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEventsQuery::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAIEventsQuery::getLimit() const {
    return m_limit;
}
void OAIEventsQuery::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIEventsQuery::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIEventsQuery::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIEventsQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
