/**
 * LotaData
 * Access the most exhaustive, accurate and up-to-date collection of global and hyper-local geocoded events and activities across a wide range of categories and genres
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceReference::OAIPlaceReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceReference::OAIPlaceReference() {
    this->initializeModel();
}

OAIPlaceReference::~OAIPlaceReference() {}

void OAIPlaceReference::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIPlaceReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceReference::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIPlaceReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceReference::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_geometry_isSet) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tag.size() > 0) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAIPlaceReference::getId() const {
    return m_id;
}
void OAIPlaceReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaceReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaceReference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaceReference::getType() const {
    return m_type;
}
void OAIPlaceReference::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaceReference::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaceReference::is_type_Valid() const{
    return m_type_isValid;
}

OAIAddress OAIPlaceReference::getAddress() const {
    return m_address;
}
void OAIPlaceReference::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPlaceReference::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPlaceReference::is_address_Valid() const{
    return m_address_isValid;
}

OAIGeoPt OAIPlaceReference::getGeo() const {
    return m_geo;
}
void OAIPlaceReference::setGeo(const OAIGeoPt &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAIPlaceReference::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAIPlaceReference::is_geo_Valid() const{
    return m_geo_isValid;
}

OAIObject OAIPlaceReference::getGeometry() const {
    return m_geometry;
}
void OAIPlaceReference::setGeometry(const OAIObject &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIPlaceReference::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIPlaceReference::is_geometry_Valid() const{
    return m_geometry_isValid;
}

OAIVirtualLocation OAIPlaceReference::getLocation() const {
    return m_location;
}
void OAIPlaceReference::setLocation(const OAIVirtualLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPlaceReference::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPlaceReference::is_location_Valid() const{
    return m_location_isValid;
}

OAIImageMeta OAIPlaceReference::getLogo() const {
    return m_logo;
}
void OAIPlaceReference::setLogo(const OAIImageMeta &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIPlaceReference::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIPlaceReference::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIPlaceReference::getName() const {
    return m_name;
}
void OAIPlaceReference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaceReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaceReference::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIFeatureReference> OAIPlaceReference::getTag() const {
    return m_tag;
}
void OAIPlaceReference::setTag(const QList<OAIFeatureReference> &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIPlaceReference::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIPlaceReference::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIPlaceReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
