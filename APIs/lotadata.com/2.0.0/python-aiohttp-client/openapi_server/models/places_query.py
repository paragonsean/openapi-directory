# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class PlacesQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, category: List[str]=None, limit: int=None):
        """PlacesQuery - a model defined in OpenAPI

        :param address: The address of this PlacesQuery.
        :param category: The category of this PlacesQuery.
        :param limit: The limit of this PlacesQuery.
        """
        self.openapi_types = {
            'address': Address,
            'category': List[str],
            'limit': int
        }

        self.attribute_map = {
            'address': 'address',
            'category': 'category',
            'limit': 'limit'
        }

        self._address = address
        self._category = category
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacesQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlacesQuery of this PlacesQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PlacesQuery.


        :return: The address of this PlacesQuery.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PlacesQuery.


        :param address: The address of this PlacesQuery.
        :type address: Address
        """

        self._address = address

    @property
    def category(self):
        """Gets the category of this PlacesQuery.

        required categories

        :return: The category of this PlacesQuery.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PlacesQuery.

        required categories

        :param category: The category of this PlacesQuery.
        :type category: List[str]
        """

        self._category = category

    @property
    def limit(self):
        """Gets the limit of this PlacesQuery.

        maximum number of matches to return

        :return: The limit of this PlacesQuery.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PlacesQuery.

        maximum number of matches to return

        :param limit: The limit of this PlacesQuery.
        :type limit: int
        """

        self._limit = limit
