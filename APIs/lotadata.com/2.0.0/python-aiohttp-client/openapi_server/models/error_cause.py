# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorCause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected: str=None, path: str=None, rule: str=None, value: str=None):
        """ErrorCause - a model defined in OpenAPI

        :param expected: The expected of this ErrorCause.
        :param path: The path of this ErrorCause.
        :param rule: The rule of this ErrorCause.
        :param value: The value of this ErrorCause.
        """
        self.openapi_types = {
            'expected': str,
            'path': str,
            'rule': str,
            'value': str
        }

        self.attribute_map = {
            'expected': 'expected',
            'path': 'path',
            'rule': 'rule',
            'value': 'value'
        }

        self._expected = expected
        self._path = path
        self._rule = rule
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorCause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error_cause of this ErrorCause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected(self):
        """Gets the expected of this ErrorCause.


        :return: The expected of this ErrorCause.
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this ErrorCause.


        :param expected: The expected of this ErrorCause.
        :type expected: str
        """

        self._expected = expected

    @property
    def path(self):
        """Gets the path of this ErrorCause.


        :return: The path of this ErrorCause.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ErrorCause.


        :param path: The path of this ErrorCause.
        :type path: str
        """

        self._path = path

    @property
    def rule(self):
        """Gets the rule of this ErrorCause.


        :return: The rule of this ErrorCause.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ErrorCause.


        :param rule: The rule of this ErrorCause.
        :type rule: str
        """

        self._rule = rule

    @property
    def value(self):
        """Gets the value of this ErrorCause.


        :return: The value of this ErrorCause.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ErrorCause.


        :param value: The value of this ErrorCause.
        :type value: str
        """

        self._value = value
