# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_occurence_detail import EventOccurenceDetail
from openapi_server.models.events_query import EventsQuery
from openapi_server.models.search_stats_meta_result import SearchStatsMetaResult
from openapi_server import util


class EventsSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[EventOccurenceDetail]=None, query: EventsQuery=None, stats: SearchStatsMetaResult=None):
        """EventsSearchResponse - a model defined in OpenAPI

        :param events: The events of this EventsSearchResponse.
        :param query: The query of this EventsSearchResponse.
        :param stats: The stats of this EventsSearchResponse.
        """
        self.openapi_types = {
            'events': List[EventOccurenceDetail],
            'query': EventsQuery,
            'stats': SearchStatsMetaResult
        }

        self.attribute_map = {
            'events': 'events',
            'query': 'query',
            'stats': 'stats'
        }

        self._events = events
        self._query = query
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsSearchResponse of this EventsSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this EventsSearchResponse.


        :return: The events of this EventsSearchResponse.
        :rtype: List[EventOccurenceDetail]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this EventsSearchResponse.


        :param events: The events of this EventsSearchResponse.
        :type events: List[EventOccurenceDetail]
        """

        self._events = events

    @property
    def query(self):
        """Gets the query of this EventsSearchResponse.


        :return: The query of this EventsSearchResponse.
        :rtype: EventsQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this EventsSearchResponse.


        :param query: The query of this EventsSearchResponse.
        :type query: EventsQuery
        """

        self._query = query

    @property
    def stats(self):
        """Gets the stats of this EventsSearchResponse.


        :return: The stats of this EventsSearchResponse.
        :rtype: SearchStatsMetaResult
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this EventsSearchResponse.


        :param stats: The stats of this EventsSearchResponse.
        :type stats: SearchStatsMetaResult
        """

        self._stats = stats
