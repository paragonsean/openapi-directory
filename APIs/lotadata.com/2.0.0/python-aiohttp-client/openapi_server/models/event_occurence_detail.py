# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_detail import ContactDetail
from openapi_server.models.feature_reference import FeatureReference
from openapi_server.models.image_meta import ImageMeta
from openapi_server.models.occurrence_reference import OccurrenceReference
from openapi_server.models.place_reference import PlaceReference
from openapi_server.models.ticket_offer import TicketOffer
from openapi_server import util


class EventOccurenceDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, activity: List[FeatureReference]=None, ambience: List[FeatureReference]=None, at: PlaceReference=None, away_team: FeatureReference=None, category: List[FeatureReference]=None, contact_point: ContactDetail=None, description: str=None, door_time: datetime=None, duration: str=None, end_approx: bool=None, end_date: datetime=None, ext_taxonomy: List[FeatureReference]=None, genre: List[FeatureReference]=None, headline: str=None, home_team: FeatureReference=None, html_description: str=None, image: ImageMeta=None, in_language: FeatureReference=None, name: str=None, no_time: bool=None, offers: List[TicketOffer]=None, on_demand: bool=None, performer: List[FeatureReference]=None, photo: List[ImageMeta]=None, start_date: datetime=None, super_event: OccurrenceReference=None, updated: datetime=None, url: str=None, work_performed: List[FeatureReference]=None):
        """EventOccurenceDetail - a model defined in OpenAPI

        :param id: The id of this EventOccurenceDetail.
        :param type: The type of this EventOccurenceDetail.
        :param activity: The activity of this EventOccurenceDetail.
        :param ambience: The ambience of this EventOccurenceDetail.
        :param at: The at of this EventOccurenceDetail.
        :param away_team: The away_team of this EventOccurenceDetail.
        :param category: The category of this EventOccurenceDetail.
        :param contact_point: The contact_point of this EventOccurenceDetail.
        :param description: The description of this EventOccurenceDetail.
        :param door_time: The door_time of this EventOccurenceDetail.
        :param duration: The duration of this EventOccurenceDetail.
        :param end_approx: The end_approx of this EventOccurenceDetail.
        :param end_date: The end_date of this EventOccurenceDetail.
        :param ext_taxonomy: The ext_taxonomy of this EventOccurenceDetail.
        :param genre: The genre of this EventOccurenceDetail.
        :param headline: The headline of this EventOccurenceDetail.
        :param home_team: The home_team of this EventOccurenceDetail.
        :param html_description: The html_description of this EventOccurenceDetail.
        :param image: The image of this EventOccurenceDetail.
        :param in_language: The in_language of this EventOccurenceDetail.
        :param name: The name of this EventOccurenceDetail.
        :param no_time: The no_time of this EventOccurenceDetail.
        :param offers: The offers of this EventOccurenceDetail.
        :param on_demand: The on_demand of this EventOccurenceDetail.
        :param performer: The performer of this EventOccurenceDetail.
        :param photo: The photo of this EventOccurenceDetail.
        :param start_date: The start_date of this EventOccurenceDetail.
        :param super_event: The super_event of this EventOccurenceDetail.
        :param updated: The updated of this EventOccurenceDetail.
        :param url: The url of this EventOccurenceDetail.
        :param work_performed: The work_performed of this EventOccurenceDetail.
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'activity': List[FeatureReference],
            'ambience': List[FeatureReference],
            'at': PlaceReference,
            'away_team': FeatureReference,
            'category': List[FeatureReference],
            'contact_point': ContactDetail,
            'description': str,
            'door_time': datetime,
            'duration': str,
            'end_approx': bool,
            'end_date': datetime,
            'ext_taxonomy': List[FeatureReference],
            'genre': List[FeatureReference],
            'headline': str,
            'home_team': FeatureReference,
            'html_description': str,
            'image': ImageMeta,
            'in_language': FeatureReference,
            'name': str,
            'no_time': bool,
            'offers': List[TicketOffer],
            'on_demand': bool,
            'performer': List[FeatureReference],
            'photo': List[ImageMeta],
            'start_date': datetime,
            'super_event': OccurrenceReference,
            'updated': datetime,
            'url': str,
            'work_performed': List[FeatureReference]
        }

        self.attribute_map = {
            'id': '@id',
            'type': '@type',
            'activity': 'activity',
            'ambience': 'ambience',
            'at': 'at',
            'away_team': 'awayTeam',
            'category': 'category',
            'contact_point': 'contactPoint',
            'description': 'description',
            'door_time': 'doorTime',
            'duration': 'duration',
            'end_approx': 'endApprox',
            'end_date': 'endDate',
            'ext_taxonomy': 'extTaxonomy',
            'genre': 'genre',
            'headline': 'headline',
            'home_team': 'homeTeam',
            'html_description': 'htmlDescription',
            'image': 'image',
            'in_language': 'inLanguage',
            'name': 'name',
            'no_time': 'noTime',
            'offers': 'offers',
            'on_demand': 'onDemand',
            'performer': 'performer',
            'photo': 'photo',
            'start_date': 'startDate',
            'super_event': 'superEvent',
            'updated': 'updated',
            'url': 'url',
            'work_performed': 'workPerformed'
        }

        self._id = id
        self._type = type
        self._activity = activity
        self._ambience = ambience
        self._at = at
        self._away_team = away_team
        self._category = category
        self._contact_point = contact_point
        self._description = description
        self._door_time = door_time
        self._duration = duration
        self._end_approx = end_approx
        self._end_date = end_date
        self._ext_taxonomy = ext_taxonomy
        self._genre = genre
        self._headline = headline
        self._home_team = home_team
        self._html_description = html_description
        self._image = image
        self._in_language = in_language
        self._name = name
        self._no_time = no_time
        self._offers = offers
        self._on_demand = on_demand
        self._performer = performer
        self._photo = photo
        self._start_date = start_date
        self._super_event = super_event
        self._updated = updated
        self._url = url
        self._work_performed = work_performed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventOccurenceDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventOccurenceDetail of this EventOccurenceDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EventOccurenceDetail.

        Unique event id

        :return: The id of this EventOccurenceDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventOccurenceDetail.

        Unique event id

        :param id: The id of this EventOccurenceDetail.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EventOccurenceDetail.

        Type of occurrence. You will usually see Organized as the type for most events. While Virtual events will get their own Virtual type.

        :return: The type of this EventOccurenceDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventOccurenceDetail.

        Type of occurrence. You will usually see Organized as the type for most events. While Virtual events will get their own Virtual type.

        :param type: The type of this EventOccurenceDetail.
        :type type: str
        """
        allowed_values = ["Organized", "Screening", "Environmental", "Virtual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def activity(self):
        """Gets the activity of this EventOccurenceDetail.

        Associated ActivityType entries

        :return: The activity of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this EventOccurenceDetail.

        Associated ActivityType entries

        :param activity: The activity of this EventOccurenceDetail.
        :type activity: List[FeatureReference]
        """

        self._activity = activity

    @property
    def ambience(self):
        """Gets the ambience of this EventOccurenceDetail.

        expected mood and feel of the event

        :return: The ambience of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._ambience

    @ambience.setter
    def ambience(self, ambience):
        """Sets the ambience of this EventOccurenceDetail.

        expected mood and feel of the event

        :param ambience: The ambience of this EventOccurenceDetail.
        :type ambience: List[FeatureReference]
        """

        self._ambience = ambience

    @property
    def at(self):
        """Gets the at of this EventOccurenceDetail.


        :return: The at of this EventOccurenceDetail.
        :rtype: PlaceReference
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this EventOccurenceDetail.


        :param at: The at of this EventOccurenceDetail.
        :type at: PlaceReference
        """

        self._at = at

    @property
    def away_team(self):
        """Gets the away_team of this EventOccurenceDetail.


        :return: The away_team of this EventOccurenceDetail.
        :rtype: FeatureReference
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this EventOccurenceDetail.


        :param away_team: The away_team of this EventOccurenceDetail.
        :type away_team: FeatureReference
        """

        self._away_team = away_team

    @property
    def category(self):
        """Gets the category of this EventOccurenceDetail.

        Associated EventCategory. May be multiple, such as Charity Music event

        :return: The category of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventOccurenceDetail.

        Associated EventCategory. May be multiple, such as Charity Music event

        :param category: The category of this EventOccurenceDetail.
        :type category: List[FeatureReference]
        """

        self._category = category

    @property
    def contact_point(self):
        """Gets the contact_point of this EventOccurenceDetail.


        :return: The contact_point of this EventOccurenceDetail.
        :rtype: ContactDetail
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point):
        """Sets the contact_point of this EventOccurenceDetail.


        :param contact_point: The contact_point of this EventOccurenceDetail.
        :type contact_point: ContactDetail
        """

        self._contact_point = contact_point

    @property
    def description(self):
        """Gets the description of this EventOccurenceDetail.

        Full description in plain text

        :return: The description of this EventOccurenceDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventOccurenceDetail.

        Full description in plain text

        :param description: The description of this EventOccurenceDetail.
        :type description: str
        """

        self._description = description

    @property
    def door_time(self):
        """Gets the door_time of this EventOccurenceDetail.

        Time when the admission starts

        :return: The door_time of this EventOccurenceDetail.
        :rtype: datetime
        """
        return self._door_time

    @door_time.setter
    def door_time(self, door_time):
        """Sets the door_time of this EventOccurenceDetail.

        Time when the admission starts

        :param door_time: The door_time of this EventOccurenceDetail.
        :type door_time: datetime
        """

        self._door_time = door_time

    @property
    def duration(self):
        """Gets the duration of this EventOccurenceDetail.

        Duration of the event in ISO-8601 format (PT45M) - 45 minutes

        :return: The duration of this EventOccurenceDetail.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventOccurenceDetail.

        Duration of the event in ISO-8601 format (PT45M) - 45 minutes

        :param duration: The duration of this EventOccurenceDetail.
        :type duration: str
        """

        self._duration = duration

    @property
    def end_approx(self):
        """Gets the end_approx of this EventOccurenceDetail.

        endDate is approximated based on historical data

        :return: The end_approx of this EventOccurenceDetail.
        :rtype: bool
        """
        return self._end_approx

    @end_approx.setter
    def end_approx(self, end_approx):
        """Sets the end_approx of this EventOccurenceDetail.

        endDate is approximated based on historical data

        :param end_approx: The end_approx of this EventOccurenceDetail.
        :type end_approx: bool
        """

        self._end_approx = end_approx

    @property
    def end_date(self):
        """Gets the end_date of this EventOccurenceDetail.

        Time when the event ends, if known

        :return: The end_date of this EventOccurenceDetail.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EventOccurenceDetail.

        Time when the event ends, if known

        :param end_date: The end_date of this EventOccurenceDetail.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def ext_taxonomy(self):
        """Gets the ext_taxonomy of this EventOccurenceDetail.

        extended taxonomy such as IAB and Google AdWords

        :return: The ext_taxonomy of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._ext_taxonomy

    @ext_taxonomy.setter
    def ext_taxonomy(self, ext_taxonomy):
        """Sets the ext_taxonomy of this EventOccurenceDetail.

        extended taxonomy such as IAB and Google AdWords

        :param ext_taxonomy: The ext_taxonomy of this EventOccurenceDetail.
        :type ext_taxonomy: List[FeatureReference]
        """

        self._ext_taxonomy = ext_taxonomy

    @property
    def genre(self):
        """Gets the genre of this EventOccurenceDetail.

        applicable Genres. (Tier 2 taxonomy). May include related genres from categories, not deemed as primary

        :return: The genre of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this EventOccurenceDetail.

        applicable Genres. (Tier 2 taxonomy). May include related genres from categories, not deemed as primary

        :param genre: The genre of this EventOccurenceDetail.
        :type genre: List[FeatureReference]
        """

        self._genre = genre

    @property
    def headline(self):
        """Gets the headline of this EventOccurenceDetail.

        Optional short description in plain text

        :return: The headline of this EventOccurenceDetail.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this EventOccurenceDetail.

        Optional short description in plain text

        :param headline: The headline of this EventOccurenceDetail.
        :type headline: str
        """

        self._headline = headline

    @property
    def home_team(self):
        """Gets the home_team of this EventOccurenceDetail.


        :return: The home_team of this EventOccurenceDetail.
        :rtype: FeatureReference
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this EventOccurenceDetail.


        :param home_team: The home_team of this EventOccurenceDetail.
        :type home_team: FeatureReference
        """

        self._home_team = home_team

    @property
    def html_description(self):
        """Gets the html_description of this EventOccurenceDetail.

        Full description with HTML formatting, where available

        :return: The html_description of this EventOccurenceDetail.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this EventOccurenceDetail.

        Full description with HTML formatting, where available

        :param html_description: The html_description of this EventOccurenceDetail.
        :type html_description: str
        """

        self._html_description = html_description

    @property
    def image(self):
        """Gets the image of this EventOccurenceDetail.


        :return: The image of this EventOccurenceDetail.
        :rtype: ImageMeta
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EventOccurenceDetail.


        :param image: The image of this EventOccurenceDetail.
        :type image: ImageMeta
        """

        self._image = image

    @property
    def in_language(self):
        """Gets the in_language of this EventOccurenceDetail.


        :return: The in_language of this EventOccurenceDetail.
        :rtype: FeatureReference
        """
        return self._in_language

    @in_language.setter
    def in_language(self, in_language):
        """Sets the in_language of this EventOccurenceDetail.


        :param in_language: The in_language of this EventOccurenceDetail.
        :type in_language: FeatureReference
        """

        self._in_language = in_language

    @property
    def name(self):
        """Gets the name of this EventOccurenceDetail.

        Name of the event in plain text

        :return: The name of this EventOccurenceDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventOccurenceDetail.

        Name of the event in plain text

        :param name: The name of this EventOccurenceDetail.
        :type name: str
        """

        self._name = name

    @property
    def no_time(self):
        """Gets the no_time of this EventOccurenceDetail.

        Specific time of the event is unknown. (shown only when true)

        :return: The no_time of this EventOccurenceDetail.
        :rtype: bool
        """
        return self._no_time

    @no_time.setter
    def no_time(self, no_time):
        """Sets the no_time of this EventOccurenceDetail.

        Specific time of the event is unknown. (shown only when true)

        :param no_time: The no_time of this EventOccurenceDetail.
        :type no_time: bool
        """

        self._no_time = no_time

    @property
    def offers(self):
        """Gets the offers of this EventOccurenceDetail.

        Ticketing options

        :return: The offers of this EventOccurenceDetail.
        :rtype: List[TicketOffer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this EventOccurenceDetail.

        Ticketing options

        :param offers: The offers of this EventOccurenceDetail.
        :type offers: List[TicketOffer]
        """

        self._offers = offers

    @property
    def on_demand(self):
        """Gets the on_demand of this EventOccurenceDetail.

        This event can start at any time during specified window

        :return: The on_demand of this EventOccurenceDetail.
        :rtype: bool
        """
        return self._on_demand

    @on_demand.setter
    def on_demand(self, on_demand):
        """Sets the on_demand of this EventOccurenceDetail.

        This event can start at any time during specified window

        :param on_demand: The on_demand of this EventOccurenceDetail.
        :type on_demand: bool
        """

        self._on_demand = on_demand

    @property
    def performer(self):
        """Gets the performer of this EventOccurenceDetail.

        List of Personas significant for this event

        :return: The performer of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._performer

    @performer.setter
    def performer(self, performer):
        """Sets the performer of this EventOccurenceDetail.

        List of Personas significant for this event

        :param performer: The performer of this EventOccurenceDetail.
        :type performer: List[FeatureReference]
        """

        self._performer = performer

    @property
    def photo(self):
        """Gets the photo of this EventOccurenceDetail.

        Primary image

        :return: The photo of this EventOccurenceDetail.
        :rtype: List[ImageMeta]
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this EventOccurenceDetail.

        Primary image

        :param photo: The photo of this EventOccurenceDetail.
        :type photo: List[ImageMeta]
        """

        self._photo = photo

    @property
    def start_date(self):
        """Gets the start_date of this EventOccurenceDetail.

        Time when the event starts

        :return: The start_date of this EventOccurenceDetail.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EventOccurenceDetail.

        Time when the event starts

        :param start_date: The start_date of this EventOccurenceDetail.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def super_event(self):
        """Gets the super_event of this EventOccurenceDetail.


        :return: The super_event of this EventOccurenceDetail.
        :rtype: OccurrenceReference
        """
        return self._super_event

    @super_event.setter
    def super_event(self, super_event):
        """Sets the super_event of this EventOccurenceDetail.


        :param super_event: The super_event of this EventOccurenceDetail.
        :type super_event: OccurrenceReference
        """

        self._super_event = super_event

    @property
    def updated(self):
        """Gets the updated of this EventOccurenceDetail.

        Timestamp of last modification (UTC)

        :return: The updated of this EventOccurenceDetail.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EventOccurenceDetail.

        Timestamp of last modification (UTC)

        :param updated: The updated of this EventOccurenceDetail.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this EventOccurenceDetail.

        Primary url for published event

        :return: The url of this EventOccurenceDetail.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventOccurenceDetail.

        Primary url for published event

        :param url: The url of this EventOccurenceDetail.
        :type url: str
        """

        self._url = url

    @property
    def work_performed(self):
        """Gets the work_performed of this EventOccurenceDetail.

        Subject matter of the event

        :return: The work_performed of this EventOccurenceDetail.
        :rtype: List[FeatureReference]
        """
        return self._work_performed

    @work_performed.setter
    def work_performed(self, work_performed):
        """Sets the work_performed of this EventOccurenceDetail.

        Subject matter of the event

        :param work_performed: The work_performed of this EventOccurenceDetail.
        :type work_performed: List[FeatureReference]
        """

        self._work_performed = work_performed
