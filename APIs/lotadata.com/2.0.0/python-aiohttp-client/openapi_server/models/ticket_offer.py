# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ticket_offer_inventory import TicketOfferInventory
from openapi_server import util


class TicketOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: str=None, category: str=None, donation: bool=None, fee: float=None, high_price: float=None, inventory: TicketOfferInventory=None, name: str=None, price: float=None, price_currency: str=None, price_unknown: bool=None, url: str=None):
        """TicketOffer - a model defined in OpenAPI

        :param availability: The availability of this TicketOffer.
        :param category: The category of this TicketOffer.
        :param donation: The donation of this TicketOffer.
        :param fee: The fee of this TicketOffer.
        :param high_price: The high_price of this TicketOffer.
        :param inventory: The inventory of this TicketOffer.
        :param name: The name of this TicketOffer.
        :param price: The price of this TicketOffer.
        :param price_currency: The price_currency of this TicketOffer.
        :param price_unknown: The price_unknown of this TicketOffer.
        :param url: The url of this TicketOffer.
        """
        self.openapi_types = {
            'availability': str,
            'category': str,
            'donation': bool,
            'fee': float,
            'high_price': float,
            'inventory': TicketOfferInventory,
            'name': str,
            'price': float,
            'price_currency': str,
            'price_unknown': bool,
            'url': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'category': 'category',
            'donation': 'donation',
            'fee': 'fee',
            'high_price': 'highPrice',
            'inventory': 'inventory',
            'name': 'name',
            'price': 'price',
            'price_currency': 'priceCurrency',
            'price_unknown': 'priceUnknown',
            'url': 'url'
        }

        self._availability = availability
        self._category = category
        self._donation = donation
        self._fee = fee
        self._high_price = high_price
        self._inventory = inventory
        self._name = name
        self._price = price
        self._price_currency = price_currency
        self._price_unknown = price_unknown
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketOffer of this TicketOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this TicketOffer.


        :return: The availability of this TicketOffer.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this TicketOffer.


        :param availability: The availability of this TicketOffer.
        :type availability: str
        """
        allowed_values = ["Discontinued", "InStock", "InStoreOnly", "LimitedAvailability", "OnlineOnly", "OutOfStock", "PreOrder", "SoldOut"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def category(self):
        """Gets the category of this TicketOffer.


        :return: The category of this TicketOffer.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TicketOffer.


        :param category: The category of this TicketOffer.
        :type category: str
        """
        allowed_values = ["primary", "secondary", "presale", "member", "premium", "unknown"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def donation(self):
        """Gets the donation of this TicketOffer.


        :return: The donation of this TicketOffer.
        :rtype: bool
        """
        return self._donation

    @donation.setter
    def donation(self, donation):
        """Sets the donation of this TicketOffer.


        :param donation: The donation of this TicketOffer.
        :type donation: bool
        """

        self._donation = donation

    @property
    def fee(self):
        """Gets the fee of this TicketOffer.


        :return: The fee of this TicketOffer.
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this TicketOffer.


        :param fee: The fee of this TicketOffer.
        :type fee: float
        """

        self._fee = fee

    @property
    def high_price(self):
        """Gets the high_price of this TicketOffer.


        :return: The high_price of this TicketOffer.
        :rtype: float
        """
        return self._high_price

    @high_price.setter
    def high_price(self, high_price):
        """Sets the high_price of this TicketOffer.


        :param high_price: The high_price of this TicketOffer.
        :type high_price: float
        """

        self._high_price = high_price

    @property
    def inventory(self):
        """Gets the inventory of this TicketOffer.


        :return: The inventory of this TicketOffer.
        :rtype: TicketOfferInventory
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this TicketOffer.


        :param inventory: The inventory of this TicketOffer.
        :type inventory: TicketOfferInventory
        """

        self._inventory = inventory

    @property
    def name(self):
        """Gets the name of this TicketOffer.


        :return: The name of this TicketOffer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TicketOffer.


        :param name: The name of this TicketOffer.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this TicketOffer.


        :return: The price of this TicketOffer.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TicketOffer.


        :param price: The price of this TicketOffer.
        :type price: float
        """

        self._price = price

    @property
    def price_currency(self):
        """Gets the price_currency of this TicketOffer.


        :return: The price_currency of this TicketOffer.
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this TicketOffer.


        :param price_currency: The price_currency of this TicketOffer.
        :type price_currency: str
        """

        self._price_currency = price_currency

    @property
    def price_unknown(self):
        """Gets the price_unknown of this TicketOffer.


        :return: The price_unknown of this TicketOffer.
        :rtype: bool
        """
        return self._price_unknown

    @price_unknown.setter
    def price_unknown(self, price_unknown):
        """Sets the price_unknown of this TicketOffer.


        :param price_unknown: The price_unknown of this TicketOffer.
        :type price_unknown: bool
        """

        self._price_unknown = price_unknown

    @property
    def url(self):
        """Gets the url of this TicketOffer.


        :return: The url of this TicketOffer.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TicketOffer.


        :param url: The url of this TicketOffer.
        :type url: str
        """

        self._url = url
