# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.feature_reference import FeatureReference
from openapi_server.models.geo_pt import GeoPt
from openapi_server.models.image_meta import ImageMeta
from openapi_server.models.virtual_location import VirtualLocation
from openapi_server import util


class PlaceReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, address: Address=None, geo: GeoPt=None, geometry: object=None, location: VirtualLocation=None, logo: ImageMeta=None, name: str=None, tag: List[FeatureReference]=None):
        """PlaceReference - a model defined in OpenAPI

        :param id: The id of this PlaceReference.
        :param type: The type of this PlaceReference.
        :param address: The address of this PlaceReference.
        :param geo: The geo of this PlaceReference.
        :param geometry: The geometry of this PlaceReference.
        :param location: The location of this PlaceReference.
        :param logo: The logo of this PlaceReference.
        :param name: The name of this PlaceReference.
        :param tag: The tag of this PlaceReference.
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'address': Address,
            'geo': GeoPt,
            'geometry': object,
            'location': VirtualLocation,
            'logo': ImageMeta,
            'name': str,
            'tag': List[FeatureReference]
        }

        self.attribute_map = {
            'id': '@id',
            'type': '@type',
            'address': 'address',
            'geo': 'geo',
            'geometry': 'geometry',
            'location': 'location',
            'logo': 'logo',
            'name': 'name',
            'tag': 'tag'
        }

        self._id = id
        self._type = type
        self._address = address
        self._geo = geo
        self._geometry = geometry
        self._location = location
        self._logo = logo
        self._name = name
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceReference of this PlaceReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PlaceReference.


        :return: The id of this PlaceReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaceReference.


        :param id: The id of this PlaceReference.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PlaceReference.

        Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world

        :return: The type of this PlaceReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaceReference.

        Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world

        :param type: The type of this PlaceReference.
        :type type: str
        """
        allowed_values = ["Place", "LocalBusiness", "AdministrativeArea", "TouristAttraction", "Landform", "LandmarksOrHistoricalBuildings", "Residence", "Virtual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def address(self):
        """Gets the address of this PlaceReference.


        :return: The address of this PlaceReference.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PlaceReference.


        :param address: The address of this PlaceReference.
        :type address: Address
        """

        self._address = address

    @property
    def geo(self):
        """Gets the geo of this PlaceReference.


        :return: The geo of this PlaceReference.
        :rtype: GeoPt
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this PlaceReference.


        :param geo: The geo of this PlaceReference.
        :type geo: GeoPt
        """

        self._geo = geo

    @property
    def geometry(self):
        """Gets the geometry of this PlaceReference.

        Shape defined per GeoJSON spec

        :return: The geometry of this PlaceReference.
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this PlaceReference.

        Shape defined per GeoJSON spec

        :param geometry: The geometry of this PlaceReference.
        :type geometry: object
        """

        self._geometry = geometry

    @property
    def location(self):
        """Gets the location of this PlaceReference.


        :return: The location of this PlaceReference.
        :rtype: VirtualLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PlaceReference.


        :param location: The location of this PlaceReference.
        :type location: VirtualLocation
        """

        self._location = location

    @property
    def logo(self):
        """Gets the logo of this PlaceReference.


        :return: The logo of this PlaceReference.
        :rtype: ImageMeta
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this PlaceReference.


        :param logo: The logo of this PlaceReference.
        :type logo: ImageMeta
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this PlaceReference.


        :return: The name of this PlaceReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaceReference.


        :param name: The name of this PlaceReference.
        :type name: str
        """

        self._name = name

    @property
    def tag(self):
        """Gets the tag of this PlaceReference.


        :return: The tag of this PlaceReference.
        :rtype: List[FeatureReference]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this PlaceReference.


        :param tag: The tag of this PlaceReference.
        :type tag: List[FeatureReference]
        """

        self._tag = tag
