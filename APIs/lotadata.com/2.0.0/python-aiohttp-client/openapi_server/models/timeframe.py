# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Timeframe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closes: datetime=None, day_of_week: List[int]=None, open247: bool=None, opens: datetime=None):
        """Timeframe - a model defined in OpenAPI

        :param closes: The closes of this Timeframe.
        :param day_of_week: The day_of_week of this Timeframe.
        :param open247: The open247 of this Timeframe.
        :param opens: The opens of this Timeframe.
        """
        self.openapi_types = {
            'closes': datetime,
            'day_of_week': List[int],
            'open247': bool,
            'opens': datetime
        }

        self.attribute_map = {
            'closes': 'closes',
            'day_of_week': 'dayOfWeek',
            'open247': 'open247',
            'opens': 'opens'
        }

        self._closes = closes
        self._day_of_week = day_of_week
        self._open247 = open247
        self._opens = opens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Timeframe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Timeframe of this Timeframe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closes(self):
        """Gets the closes of this Timeframe.

        Close time for all days mentioned in the dayOfWeek. If close time is less than open, then it is following day.

        :return: The closes of this Timeframe.
        :rtype: datetime
        """
        return self._closes

    @closes.setter
    def closes(self, closes):
        """Sets the closes of this Timeframe.

        Close time for all days mentioned in the dayOfWeek. If close time is less than open, then it is following day.

        :param closes: The closes of this Timeframe.
        :type closes: datetime
        """

        self._closes = closes

    @property
    def day_of_week(self):
        """Gets the day_of_week of this Timeframe.

        ISO day of the week. 1- Monday, 7- Sunday

        :return: The day_of_week of this Timeframe.
        :rtype: List[int]
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this Timeframe.

        ISO day of the week. 1- Monday, 7- Sunday

        :param day_of_week: The day_of_week of this Timeframe.
        :type day_of_week: List[int]
        """

        self._day_of_week = day_of_week

    @property
    def open247(self):
        """Gets the open247 of this Timeframe.

        Open around the clock

        :return: The open247 of this Timeframe.
        :rtype: bool
        """
        return self._open247

    @open247.setter
    def open247(self, open247):
        """Sets the open247 of this Timeframe.

        Open around the clock

        :param open247: The open247 of this Timeframe.
        :type open247: bool
        """

        self._open247 = open247

    @property
    def opens(self):
        """Gets the opens of this Timeframe.

        Open time for all days mentioned in the dayOfWeek

        :return: The opens of this Timeframe.
        :rtype: datetime
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this Timeframe.

        Open time for all days mentioned in the dayOfWeek

        :param opens: The opens of this Timeframe.
        :type opens: datetime
        """

        self._opens = opens
