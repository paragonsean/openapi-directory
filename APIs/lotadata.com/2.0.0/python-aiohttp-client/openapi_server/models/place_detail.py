# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.contact_detail import ContactDetail
from openapi_server.models.feature_reference import FeatureReference
from openapi_server.models.geo_pt import GeoPt
from openapi_server.models.image_meta import ImageMeta
from openapi_server.models.timeframe import Timeframe
from openapi_server.models.virtual_location import VirtualLocation
from openapi_server import util


class PlaceDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ambience: List[FeatureReference]=None, category: List[FeatureReference]=None, contact: ContactDetail=None, function: List[FeatureReference]=None, opening_hours: List[Timeframe]=None, photo: List[ImageMeta]=None, id: str=None, type: str=None, address: Address=None, geo: GeoPt=None, geometry: object=None, location: VirtualLocation=None, logo: ImageMeta=None, name: str=None, tag: List[FeatureReference]=None):
        """PlaceDetail - a model defined in OpenAPI

        :param ambience: The ambience of this PlaceDetail.
        :param category: The category of this PlaceDetail.
        :param contact: The contact of this PlaceDetail.
        :param function: The function of this PlaceDetail.
        :param opening_hours: The opening_hours of this PlaceDetail.
        :param photo: The photo of this PlaceDetail.
        :param id: The id of this PlaceDetail.
        :param type: The type of this PlaceDetail.
        :param address: The address of this PlaceDetail.
        :param geo: The geo of this PlaceDetail.
        :param geometry: The geometry of this PlaceDetail.
        :param location: The location of this PlaceDetail.
        :param logo: The logo of this PlaceDetail.
        :param name: The name of this PlaceDetail.
        :param tag: The tag of this PlaceDetail.
        """
        self.openapi_types = {
            'ambience': List[FeatureReference],
            'category': List[FeatureReference],
            'contact': ContactDetail,
            'function': List[FeatureReference],
            'opening_hours': List[Timeframe],
            'photo': List[ImageMeta],
            'id': str,
            'type': str,
            'address': Address,
            'geo': GeoPt,
            'geometry': object,
            'location': VirtualLocation,
            'logo': ImageMeta,
            'name': str,
            'tag': List[FeatureReference]
        }

        self.attribute_map = {
            'ambience': 'ambience',
            'category': 'category',
            'contact': 'contact',
            'function': 'function',
            'opening_hours': 'openingHours',
            'photo': 'photo',
            'id': '@id',
            'type': '@type',
            'address': 'address',
            'geo': 'geo',
            'geometry': 'geometry',
            'location': 'location',
            'logo': 'logo',
            'name': 'name',
            'tag': 'tag'
        }

        self._ambience = ambience
        self._category = category
        self._contact = contact
        self._function = function
        self._opening_hours = opening_hours
        self._photo = photo
        self._id = id
        self._type = type
        self._address = address
        self._geo = geo
        self._geometry = geometry
        self._location = location
        self._logo = logo
        self._name = name
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceDetail of this PlaceDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ambience(self):
        """Gets the ambience of this PlaceDetail.

        expected mood and feel of the event

        :return: The ambience of this PlaceDetail.
        :rtype: List[FeatureReference]
        """
        return self._ambience

    @ambience.setter
    def ambience(self, ambience):
        """Sets the ambience of this PlaceDetail.

        expected mood and feel of the event

        :param ambience: The ambience of this PlaceDetail.
        :type ambience: List[FeatureReference]
        """

        self._ambience = ambience

    @property
    def category(self):
        """Gets the category of this PlaceDetail.

        Associated PlaceCategory. May be multiple (Tier 1)

        :return: The category of this PlaceDetail.
        :rtype: List[FeatureReference]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PlaceDetail.

        Associated PlaceCategory. May be multiple (Tier 1)

        :param category: The category of this PlaceDetail.
        :type category: List[FeatureReference]
        """

        self._category = category

    @property
    def contact(self):
        """Gets the contact of this PlaceDetail.


        :return: The contact of this PlaceDetail.
        :rtype: ContactDetail
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PlaceDetail.


        :param contact: The contact of this PlaceDetail.
        :type contact: ContactDetail
        """

        self._contact = contact

    @property
    def function(self):
        """Gets the function of this PlaceDetail.

        PlaceFunction. (Tier 2 taxonomy)

        :return: The function of this PlaceDetail.
        :rtype: List[FeatureReference]
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this PlaceDetail.

        PlaceFunction. (Tier 2 taxonomy)

        :param function: The function of this PlaceDetail.
        :type function: List[FeatureReference]
        """

        self._function = function

    @property
    def opening_hours(self):
        """Gets the opening_hours of this PlaceDetail.


        :return: The opening_hours of this PlaceDetail.
        :rtype: List[Timeframe]
        """
        return self._opening_hours

    @opening_hours.setter
    def opening_hours(self, opening_hours):
        """Sets the opening_hours of this PlaceDetail.


        :param opening_hours: The opening_hours of this PlaceDetail.
        :type opening_hours: List[Timeframe]
        """

        self._opening_hours = opening_hours

    @property
    def photo(self):
        """Gets the photo of this PlaceDetail.


        :return: The photo of this PlaceDetail.
        :rtype: List[ImageMeta]
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this PlaceDetail.


        :param photo: The photo of this PlaceDetail.
        :type photo: List[ImageMeta]
        """

        self._photo = photo

    @property
    def id(self):
        """Gets the id of this PlaceDetail.


        :return: The id of this PlaceDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaceDetail.


        :param id: The id of this PlaceDetail.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PlaceDetail.

        Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world

        :return: The type of this PlaceDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaceDetail.

        Type of place where Place is a physical address, LocalBusiness is any type of comercial property, AdministrativeArea is a political or colloquial area, and Virtual is out of this world

        :param type: The type of this PlaceDetail.
        :type type: str
        """
        allowed_values = ["Place", "LocalBusiness", "AdministrativeArea", "TouristAttraction", "Landform", "LandmarksOrHistoricalBuildings", "Residence", "Virtual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def address(self):
        """Gets the address of this PlaceDetail.


        :return: The address of this PlaceDetail.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PlaceDetail.


        :param address: The address of this PlaceDetail.
        :type address: Address
        """

        self._address = address

    @property
    def geo(self):
        """Gets the geo of this PlaceDetail.


        :return: The geo of this PlaceDetail.
        :rtype: GeoPt
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this PlaceDetail.


        :param geo: The geo of this PlaceDetail.
        :type geo: GeoPt
        """

        self._geo = geo

    @property
    def geometry(self):
        """Gets the geometry of this PlaceDetail.

        Shape defined per GeoJSON spec

        :return: The geometry of this PlaceDetail.
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this PlaceDetail.

        Shape defined per GeoJSON spec

        :param geometry: The geometry of this PlaceDetail.
        :type geometry: object
        """

        self._geometry = geometry

    @property
    def location(self):
        """Gets the location of this PlaceDetail.


        :return: The location of this PlaceDetail.
        :rtype: VirtualLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PlaceDetail.


        :param location: The location of this PlaceDetail.
        :type location: VirtualLocation
        """

        self._location = location

    @property
    def logo(self):
        """Gets the logo of this PlaceDetail.


        :return: The logo of this PlaceDetail.
        :rtype: ImageMeta
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this PlaceDetail.


        :param logo: The logo of this PlaceDetail.
        :type logo: ImageMeta
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this PlaceDetail.


        :return: The name of this PlaceDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaceDetail.


        :param name: The name of this PlaceDetail.
        :type name: str
        """

        self._name = name

    @property
    def tag(self):
        """Gets the tag of this PlaceDetail.


        :return: The tag of this PlaceDetail.
        :rtype: List[FeatureReference]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this PlaceDetail.


        :param tag: The tag of this PlaceDetail.
        :type tag: List[FeatureReference]
        """

        self._tag = tag
