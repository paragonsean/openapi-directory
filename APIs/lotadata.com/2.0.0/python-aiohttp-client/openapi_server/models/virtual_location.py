# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, platform: str=None, url: str=None):
        """VirtualLocation - a model defined in OpenAPI

        :param domain: The domain of this VirtualLocation.
        :param platform: The platform of this VirtualLocation.
        :param url: The url of this VirtualLocation.
        """
        self.openapi_types = {
            'domain': str,
            'platform': str,
            'url': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'platform': 'platform',
            'url': 'url'
        }

        self._domain = domain
        self._platform = platform
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualLocation of this VirtualLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this VirtualLocation.


        :return: The domain of this VirtualLocation.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this VirtualLocation.


        :param domain: The domain of this VirtualLocation.
        :type domain: str
        """

        self._domain = domain

    @property
    def platform(self):
        """Gets the platform of this VirtualLocation.


        :return: The platform of this VirtualLocation.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VirtualLocation.


        :param platform: The platform of this VirtualLocation.
        :type platform: str
        """

        self._platform = platform

    @property
    def url(self):
        """Gets the url of this VirtualLocation.


        :return: The url of this VirtualLocation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VirtualLocation.


        :param url: The url of this VirtualLocation.
        :type url: str
        """

        self._url = url
