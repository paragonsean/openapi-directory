/**
 * SEDRA IV API
 * The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation. # Introduction This document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience. Additionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd. # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. # Samples Explaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works. 1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json) 2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json) 3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json) 4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sedra@bethmardutho.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_word__id__get_200_response_inner.h
 *
 * 
 */

#ifndef OAI_word__id__get_200_response_inner_H
#define OAI_word__id__get_200_response_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAI_word__id__get_200_response_inner_word.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAI_word__id__get_200_response_inner_word;

class OAI_word__id__get_200_response_inner : public OAIObject {
public:
    OAI_word__id__get_200_response_inner();
    OAI_word__id__get_200_response_inner(QString json);
    ~OAI_word__id__get_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEastern() const;
    void setEastern(const QString &eastern);
    bool is_eastern_Set() const;
    bool is_eastern_Valid() const;

    QString getGender() const;
    void setGender(const QString &gender);
    bool is_gender_Set() const;
    bool is_gender_Valid() const;

    QMap<QString, QList<QString>> getGlosses() const;
    void setGlosses(const QMap<QString, QList<QString>> &glosses);
    bool is_glosses_Set() const;
    bool is_glosses_Valid() const;

    bool isHasSeyame() const;
    void setHasSeyame(const bool &has_seyame);
    bool is_has_seyame_Set() const;
    bool is_has_seyame_Valid() const;

    bool isIsEnclitic() const;
    void setIsEnclitic(const bool &is_enclitic);
    bool is_is_enclitic_Set() const;
    bool is_is_enclitic_Valid() const;

    bool isIsLexicalForm() const;
    void setIsLexicalForm(const bool &is_lexical_form);
    bool is_is_lexical_form_Set() const;
    bool is_is_lexical_form_Valid() const;

    bool isIsTheoretical() const;
    void setIsTheoretical(const bool &is_theoretical);
    bool is_is_theoretical_Set() const;
    bool is_is_theoretical_Valid() const;

    QString getKaylo() const;
    void setKaylo(const QString &kaylo);
    bool is_kaylo_Set() const;
    bool is_kaylo_Valid() const;

    OAIObject getLexeme() const;
    void setLexeme(const OAIObject &lexeme);
    bool is_lexeme_Set() const;
    bool is_lexeme_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getPerson() const;
    void setPerson(const QString &person);
    bool is_person_Set() const;
    bool is_person_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIObject getSuffixGender() const;
    void setSuffixGender(const OAIObject &suffix_gender);
    bool is_suffix_gender_Set() const;
    bool is_suffix_gender_Valid() const;

    OAIObject getSuffixNumber() const;
    void setSuffixNumber(const OAIObject &suffix_number);
    bool is_suffix_number_Set() const;
    bool is_suffix_number_Valid() const;

    OAIObject getSuffixPerson() const;
    void setSuffixPerson(const OAIObject &suffix_person);
    bool is_suffix_person_Set() const;
    bool is_suffix_person_Valid() const;

    QString getSuffixType() const;
    void setSuffixType(const QString &suffix_type);
    bool is_suffix_type_Set() const;
    bool is_suffix_type_Valid() const;

    QString getSyriac() const;
    void setSyriac(const QString &syriac);
    bool is_syriac_Set() const;
    bool is_syriac_Valid() const;

    QString getTense() const;
    void setTense(const QString &tense);
    bool is_tense_Set() const;
    bool is_tense_Valid() const;

    QString getWestern() const;
    void setWestern(const QString &western);
    bool is_western_Set() const;
    bool is_western_Valid() const;

    OAI_word__id__get_200_response_inner_word getWord() const;
    void setWord(const OAI_word__id__get_200_response_inner_word &word);
    bool is_word_Set() const;
    bool is_word_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_eastern;
    bool m_eastern_isSet;
    bool m_eastern_isValid;

    QString m_gender;
    bool m_gender_isSet;
    bool m_gender_isValid;

    QMap<QString, QList<QString>> m_glosses;
    bool m_glosses_isSet;
    bool m_glosses_isValid;

    bool m_has_seyame;
    bool m_has_seyame_isSet;
    bool m_has_seyame_isValid;

    bool m_is_enclitic;
    bool m_is_enclitic_isSet;
    bool m_is_enclitic_isValid;

    bool m_is_lexical_form;
    bool m_is_lexical_form_isSet;
    bool m_is_lexical_form_isValid;

    bool m_is_theoretical;
    bool m_is_theoretical_isSet;
    bool m_is_theoretical_isValid;

    QString m_kaylo;
    bool m_kaylo_isSet;
    bool m_kaylo_isValid;

    OAIObject m_lexeme;
    bool m_lexeme_isSet;
    bool m_lexeme_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_person;
    bool m_person_isSet;
    bool m_person_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIObject m_suffix_gender;
    bool m_suffix_gender_isSet;
    bool m_suffix_gender_isValid;

    OAIObject m_suffix_number;
    bool m_suffix_number_isSet;
    bool m_suffix_number_isValid;

    OAIObject m_suffix_person;
    bool m_suffix_person_isSet;
    bool m_suffix_person_isValid;

    QString m_suffix_type;
    bool m_suffix_type_isSet;
    bool m_suffix_type_isValid;

    QString m_syriac;
    bool m_syriac_isSet;
    bool m_syriac_isValid;

    QString m_tense;
    bool m_tense_isSet;
    bool m_tense_isValid;

    QString m_western;
    bool m_western_isSet;
    bool m_western_isValid;

    OAI_word__id__get_200_response_inner_word m_word;
    bool m_word_isSet;
    bool m_word_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_word__id__get_200_response_inner)

#endif // OAI_word__id__get_200_response_inner_H
