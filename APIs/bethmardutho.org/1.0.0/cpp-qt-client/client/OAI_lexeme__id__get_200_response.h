/**
 * SEDRA IV API
 * The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation. # Introduction This document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience. Additionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd. # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. # Samples Explaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works. 1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json) 2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json) 3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json) 4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sedra@bethmardutho.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_lexeme__id__get_200_response.h
 *
 * 
 */

#ifndef OAI_lexeme__id__get_200_response_H
#define OAI_lexeme__id__get_200_response_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_lexeme__id__get_200_response : public OAIObject {
public:
    OAI_lexeme__id__get_200_response();
    OAI_lexeme__id__get_200_response(QString json);
    ~OAI_lexeme__id__get_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategoryType() const;
    void setCategoryType(const QString &category_type);
    bool is_category_type_Set() const;
    bool is_category_type_Valid() const;

    OAIObject getEtymologies() const;
    void setEtymologies(const OAIObject &etymologies);
    bool is_etymologies_Set() const;
    bool is_etymologies_Valid() const;

    OAIObject getGlosses() const;
    void setGlosses(const OAIObject &glosses);
    bool is_glosses_Set() const;
    bool is_glosses_Valid() const;

    OAIObject getKaylo() const;
    void setKaylo(const OAIObject &kaylo);
    bool is_kaylo_Set() const;
    bool is_kaylo_Valid() const;

    OAIObject getLexeme() const;
    void setLexeme(const OAIObject &lexeme);
    bool is_lexeme_Set() const;
    bool is_lexeme_Valid() const;

    OAIObject getRoot() const;
    void setRoot(const OAIObject &root);
    bool is_root_Set() const;
    bool is_root_Valid() const;

    QString getSyriac() const;
    void setSyriac(const QString &syriac);
    bool is_syriac_Set() const;
    bool is_syriac_Valid() const;

    QList<OAIObject> getWords() const;
    void setWords(const QList<OAIObject> &words);
    bool is_words_Set() const;
    bool is_words_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category_type;
    bool m_category_type_isSet;
    bool m_category_type_isValid;

    OAIObject m_etymologies;
    bool m_etymologies_isSet;
    bool m_etymologies_isValid;

    OAIObject m_glosses;
    bool m_glosses_isSet;
    bool m_glosses_isValid;

    OAIObject m_kaylo;
    bool m_kaylo_isSet;
    bool m_kaylo_isValid;

    OAIObject m_lexeme;
    bool m_lexeme_isSet;
    bool m_lexeme_isValid;

    OAIObject m_root;
    bool m_root_isSet;
    bool m_root_isValid;

    QString m_syriac;
    bool m_syriac_isSet;
    bool m_syriac_isValid;

    QList<OAIObject> m_words;
    bool m_words_isSet;
    bool m_words_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_lexeme__id__get_200_response)

#endif // OAI_lexeme__id__get_200_response_H
