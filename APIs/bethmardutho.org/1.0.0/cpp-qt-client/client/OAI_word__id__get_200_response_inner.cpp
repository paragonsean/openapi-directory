/**
 * SEDRA IV API
 * The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation. # Introduction This document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience. Additionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd. # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. # Samples Explaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works. 1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json) 2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json) 3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json) 4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sedra@bethmardutho.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_word__id__get_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_word__id__get_200_response_inner::OAI_word__id__get_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_word__id__get_200_response_inner::OAI_word__id__get_200_response_inner() {
    this->initializeModel();
}

OAI_word__id__get_200_response_inner::~OAI_word__id__get_200_response_inner() {}

void OAI_word__id__get_200_response_inner::initializeModel() {

    m_eastern_isSet = false;
    m_eastern_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_glosses_isSet = false;
    m_glosses_isValid = false;

    m_has_seyame_isSet = false;
    m_has_seyame_isValid = false;

    m_is_enclitic_isSet = false;
    m_is_enclitic_isValid = false;

    m_is_lexical_form_isSet = false;
    m_is_lexical_form_isValid = false;

    m_is_theoretical_isSet = false;
    m_is_theoretical_isValid = false;

    m_kaylo_isSet = false;
    m_kaylo_isValid = false;

    m_lexeme_isSet = false;
    m_lexeme_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_suffix_gender_isSet = false;
    m_suffix_gender_isValid = false;

    m_suffix_number_isSet = false;
    m_suffix_number_isValid = false;

    m_suffix_person_isSet = false;
    m_suffix_person_isValid = false;

    m_suffix_type_isSet = false;
    m_suffix_type_isValid = false;

    m_syriac_isSet = false;
    m_syriac_isValid = false;

    m_tense_isSet = false;
    m_tense_isValid = false;

    m_western_isSet = false;
    m_western_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAI_word__id__get_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_word__id__get_200_response_inner::fromJsonObject(QJsonObject json) {

    m_eastern_isValid = ::OpenAPI::fromJsonValue(m_eastern, json[QString("eastern")]);
    m_eastern_isSet = !json[QString("eastern")].isNull() && m_eastern_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    if(json["glosses"].isObject()){
        auto varmap = json["glosses"].toObject().toVariantMap();
        m_glosses_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_glosses_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_glosses_isSet &= !jval.isNull() && m_glosses_isValid;
                m_glosses.insert(m_glosses.end(), val, item);
            }
        }
    }

    m_has_seyame_isValid = ::OpenAPI::fromJsonValue(m_has_seyame, json[QString("hasSeyame")]);
    m_has_seyame_isSet = !json[QString("hasSeyame")].isNull() && m_has_seyame_isValid;

    m_is_enclitic_isValid = ::OpenAPI::fromJsonValue(m_is_enclitic, json[QString("isEnclitic")]);
    m_is_enclitic_isSet = !json[QString("isEnclitic")].isNull() && m_is_enclitic_isValid;

    m_is_lexical_form_isValid = ::OpenAPI::fromJsonValue(m_is_lexical_form, json[QString("isLexicalForm")]);
    m_is_lexical_form_isSet = !json[QString("isLexicalForm")].isNull() && m_is_lexical_form_isValid;

    m_is_theoretical_isValid = ::OpenAPI::fromJsonValue(m_is_theoretical, json[QString("isTheoretical")]);
    m_is_theoretical_isSet = !json[QString("isTheoretical")].isNull() && m_is_theoretical_isValid;

    m_kaylo_isValid = ::OpenAPI::fromJsonValue(m_kaylo, json[QString("kaylo")]);
    m_kaylo_isSet = !json[QString("kaylo")].isNull() && m_kaylo_isValid;

    m_lexeme_isValid = ::OpenAPI::fromJsonValue(m_lexeme, json[QString("lexeme")]);
    m_lexeme_isSet = !json[QString("lexeme")].isNull() && m_lexeme_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_suffix_gender_isValid = ::OpenAPI::fromJsonValue(m_suffix_gender, json[QString("suffixGender")]);
    m_suffix_gender_isSet = !json[QString("suffixGender")].isNull() && m_suffix_gender_isValid;

    m_suffix_number_isValid = ::OpenAPI::fromJsonValue(m_suffix_number, json[QString("suffixNumber")]);
    m_suffix_number_isSet = !json[QString("suffixNumber")].isNull() && m_suffix_number_isValid;

    m_suffix_person_isValid = ::OpenAPI::fromJsonValue(m_suffix_person, json[QString("suffixPerson")]);
    m_suffix_person_isSet = !json[QString("suffixPerson")].isNull() && m_suffix_person_isValid;

    m_suffix_type_isValid = ::OpenAPI::fromJsonValue(m_suffix_type, json[QString("suffixType")]);
    m_suffix_type_isSet = !json[QString("suffixType")].isNull() && m_suffix_type_isValid;

    m_syriac_isValid = ::OpenAPI::fromJsonValue(m_syriac, json[QString("syriac")]);
    m_syriac_isSet = !json[QString("syriac")].isNull() && m_syriac_isValid;

    m_tense_isValid = ::OpenAPI::fromJsonValue(m_tense, json[QString("tense")]);
    m_tense_isSet = !json[QString("tense")].isNull() && m_tense_isValid;

    m_western_isValid = ::OpenAPI::fromJsonValue(m_western, json[QString("western")]);
    m_western_isSet = !json[QString("western")].isNull() && m_western_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAI_word__id__get_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_word__id__get_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_eastern_isSet) {
        obj.insert(QString("eastern"), ::OpenAPI::toJsonValue(m_eastern));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_glosses.size() > 0) {
        
        obj.insert(QString("glosses"), toJsonValue(m_glosses));
    }
    if (m_has_seyame_isSet) {
        obj.insert(QString("hasSeyame"), ::OpenAPI::toJsonValue(m_has_seyame));
    }
    if (m_is_enclitic_isSet) {
        obj.insert(QString("isEnclitic"), ::OpenAPI::toJsonValue(m_is_enclitic));
    }
    if (m_is_lexical_form_isSet) {
        obj.insert(QString("isLexicalForm"), ::OpenAPI::toJsonValue(m_is_lexical_form));
    }
    if (m_is_theoretical_isSet) {
        obj.insert(QString("isTheoretical"), ::OpenAPI::toJsonValue(m_is_theoretical));
    }
    if (m_kaylo_isSet) {
        obj.insert(QString("kaylo"), ::OpenAPI::toJsonValue(m_kaylo));
    }
    if (m_lexeme.isSet()) {
        obj.insert(QString("lexeme"), ::OpenAPI::toJsonValue(m_lexeme));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_person_isSet) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_suffix_gender.isSet()) {
        obj.insert(QString("suffixGender"), ::OpenAPI::toJsonValue(m_suffix_gender));
    }
    if (m_suffix_number.isSet()) {
        obj.insert(QString("suffixNumber"), ::OpenAPI::toJsonValue(m_suffix_number));
    }
    if (m_suffix_person.isSet()) {
        obj.insert(QString("suffixPerson"), ::OpenAPI::toJsonValue(m_suffix_person));
    }
    if (m_suffix_type_isSet) {
        obj.insert(QString("suffixType"), ::OpenAPI::toJsonValue(m_suffix_type));
    }
    if (m_syriac_isSet) {
        obj.insert(QString("syriac"), ::OpenAPI::toJsonValue(m_syriac));
    }
    if (m_tense_isSet) {
        obj.insert(QString("tense"), ::OpenAPI::toJsonValue(m_tense));
    }
    if (m_western_isSet) {
        obj.insert(QString("western"), ::OpenAPI::toJsonValue(m_western));
    }
    if (m_word.isSet()) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QString OAI_word__id__get_200_response_inner::getEastern() const {
    return m_eastern;
}
void OAI_word__id__get_200_response_inner::setEastern(const QString &eastern) {
    m_eastern = eastern;
    m_eastern_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_eastern_Set() const{
    return m_eastern_isSet;
}

bool OAI_word__id__get_200_response_inner::is_eastern_Valid() const{
    return m_eastern_isValid;
}

QString OAI_word__id__get_200_response_inner::getGender() const {
    return m_gender;
}
void OAI_word__id__get_200_response_inner::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAI_word__id__get_200_response_inner::is_gender_Valid() const{
    return m_gender_isValid;
}

QMap<QString, QList<QString>> OAI_word__id__get_200_response_inner::getGlosses() const {
    return m_glosses;
}
void OAI_word__id__get_200_response_inner::setGlosses(const QMap<QString, QList<QString>> &glosses) {
    m_glosses = glosses;
    m_glosses_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_glosses_Set() const{
    return m_glosses_isSet;
}

bool OAI_word__id__get_200_response_inner::is_glosses_Valid() const{
    return m_glosses_isValid;
}

bool OAI_word__id__get_200_response_inner::isHasSeyame() const {
    return m_has_seyame;
}
void OAI_word__id__get_200_response_inner::setHasSeyame(const bool &has_seyame) {
    m_has_seyame = has_seyame;
    m_has_seyame_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_has_seyame_Set() const{
    return m_has_seyame_isSet;
}

bool OAI_word__id__get_200_response_inner::is_has_seyame_Valid() const{
    return m_has_seyame_isValid;
}

bool OAI_word__id__get_200_response_inner::isIsEnclitic() const {
    return m_is_enclitic;
}
void OAI_word__id__get_200_response_inner::setIsEnclitic(const bool &is_enclitic) {
    m_is_enclitic = is_enclitic;
    m_is_enclitic_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_is_enclitic_Set() const{
    return m_is_enclitic_isSet;
}

bool OAI_word__id__get_200_response_inner::is_is_enclitic_Valid() const{
    return m_is_enclitic_isValid;
}

bool OAI_word__id__get_200_response_inner::isIsLexicalForm() const {
    return m_is_lexical_form;
}
void OAI_word__id__get_200_response_inner::setIsLexicalForm(const bool &is_lexical_form) {
    m_is_lexical_form = is_lexical_form;
    m_is_lexical_form_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_is_lexical_form_Set() const{
    return m_is_lexical_form_isSet;
}

bool OAI_word__id__get_200_response_inner::is_is_lexical_form_Valid() const{
    return m_is_lexical_form_isValid;
}

bool OAI_word__id__get_200_response_inner::isIsTheoretical() const {
    return m_is_theoretical;
}
void OAI_word__id__get_200_response_inner::setIsTheoretical(const bool &is_theoretical) {
    m_is_theoretical = is_theoretical;
    m_is_theoretical_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_is_theoretical_Set() const{
    return m_is_theoretical_isSet;
}

bool OAI_word__id__get_200_response_inner::is_is_theoretical_Valid() const{
    return m_is_theoretical_isValid;
}

QString OAI_word__id__get_200_response_inner::getKaylo() const {
    return m_kaylo;
}
void OAI_word__id__get_200_response_inner::setKaylo(const QString &kaylo) {
    m_kaylo = kaylo;
    m_kaylo_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_kaylo_Set() const{
    return m_kaylo_isSet;
}

bool OAI_word__id__get_200_response_inner::is_kaylo_Valid() const{
    return m_kaylo_isValid;
}

OAIObject OAI_word__id__get_200_response_inner::getLexeme() const {
    return m_lexeme;
}
void OAI_word__id__get_200_response_inner::setLexeme(const OAIObject &lexeme) {
    m_lexeme = lexeme;
    m_lexeme_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_lexeme_Set() const{
    return m_lexeme_isSet;
}

bool OAI_word__id__get_200_response_inner::is_lexeme_Valid() const{
    return m_lexeme_isValid;
}

QString OAI_word__id__get_200_response_inner::getNumber() const {
    return m_number;
}
void OAI_word__id__get_200_response_inner::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAI_word__id__get_200_response_inner::is_number_Valid() const{
    return m_number_isValid;
}

QString OAI_word__id__get_200_response_inner::getPerson() const {
    return m_person;
}
void OAI_word__id__get_200_response_inner::setPerson(const QString &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_person_Set() const{
    return m_person_isSet;
}

bool OAI_word__id__get_200_response_inner::is_person_Valid() const{
    return m_person_isValid;
}

QString OAI_word__id__get_200_response_inner::getState() const {
    return m_state;
}
void OAI_word__id__get_200_response_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAI_word__id__get_200_response_inner::is_state_Valid() const{
    return m_state_isValid;
}

OAIObject OAI_word__id__get_200_response_inner::getSuffixGender() const {
    return m_suffix_gender;
}
void OAI_word__id__get_200_response_inner::setSuffixGender(const OAIObject &suffix_gender) {
    m_suffix_gender = suffix_gender;
    m_suffix_gender_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_suffix_gender_Set() const{
    return m_suffix_gender_isSet;
}

bool OAI_word__id__get_200_response_inner::is_suffix_gender_Valid() const{
    return m_suffix_gender_isValid;
}

OAIObject OAI_word__id__get_200_response_inner::getSuffixNumber() const {
    return m_suffix_number;
}
void OAI_word__id__get_200_response_inner::setSuffixNumber(const OAIObject &suffix_number) {
    m_suffix_number = suffix_number;
    m_suffix_number_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_suffix_number_Set() const{
    return m_suffix_number_isSet;
}

bool OAI_word__id__get_200_response_inner::is_suffix_number_Valid() const{
    return m_suffix_number_isValid;
}

OAIObject OAI_word__id__get_200_response_inner::getSuffixPerson() const {
    return m_suffix_person;
}
void OAI_word__id__get_200_response_inner::setSuffixPerson(const OAIObject &suffix_person) {
    m_suffix_person = suffix_person;
    m_suffix_person_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_suffix_person_Set() const{
    return m_suffix_person_isSet;
}

bool OAI_word__id__get_200_response_inner::is_suffix_person_Valid() const{
    return m_suffix_person_isValid;
}

QString OAI_word__id__get_200_response_inner::getSuffixType() const {
    return m_suffix_type;
}
void OAI_word__id__get_200_response_inner::setSuffixType(const QString &suffix_type) {
    m_suffix_type = suffix_type;
    m_suffix_type_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_suffix_type_Set() const{
    return m_suffix_type_isSet;
}

bool OAI_word__id__get_200_response_inner::is_suffix_type_Valid() const{
    return m_suffix_type_isValid;
}

QString OAI_word__id__get_200_response_inner::getSyriac() const {
    return m_syriac;
}
void OAI_word__id__get_200_response_inner::setSyriac(const QString &syriac) {
    m_syriac = syriac;
    m_syriac_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_syriac_Set() const{
    return m_syriac_isSet;
}

bool OAI_word__id__get_200_response_inner::is_syriac_Valid() const{
    return m_syriac_isValid;
}

QString OAI_word__id__get_200_response_inner::getTense() const {
    return m_tense;
}
void OAI_word__id__get_200_response_inner::setTense(const QString &tense) {
    m_tense = tense;
    m_tense_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_tense_Set() const{
    return m_tense_isSet;
}

bool OAI_word__id__get_200_response_inner::is_tense_Valid() const{
    return m_tense_isValid;
}

QString OAI_word__id__get_200_response_inner::getWestern() const {
    return m_western;
}
void OAI_word__id__get_200_response_inner::setWestern(const QString &western) {
    m_western = western;
    m_western_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_western_Set() const{
    return m_western_isSet;
}

bool OAI_word__id__get_200_response_inner::is_western_Valid() const{
    return m_western_isValid;
}

OAI_word__id__get_200_response_inner_word OAI_word__id__get_200_response_inner::getWord() const {
    return m_word;
}
void OAI_word__id__get_200_response_inner::setWord(const OAI_word__id__get_200_response_inner_word &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAI_word__id__get_200_response_inner::is_word_Set() const{
    return m_word_isSet;
}

bool OAI_word__id__get_200_response_inner::is_word_Valid() const{
    return m_word_isValid;
}

bool OAI_word__id__get_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eastern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glosses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_seyame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enclitic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_lexical_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theoretical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kaylo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lexeme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syriac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_western_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_word__id__get_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lexeme_isValid && m_syriac_isValid && m_word_isValid && true;
}

} // namespace OpenAPI
