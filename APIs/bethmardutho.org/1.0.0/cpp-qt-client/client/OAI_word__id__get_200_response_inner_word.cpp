/**
 * SEDRA IV API
 * The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation. # Introduction This document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience. Additionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd. # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. # Samples Explaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works. 1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json) 2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json) 3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json) 4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sedra@bethmardutho.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_word__id__get_200_response_inner_word.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_word__id__get_200_response_inner_word::OAI_word__id__get_200_response_inner_word(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_word__id__get_200_response_inner_word::OAI_word__id__get_200_response_inner_word() {
    this->initializeModel();
}

OAI_word__id__get_200_response_inner_word::~OAI_word__id__get_200_response_inner_word() {}

void OAI_word__id__get_200_response_inner_word::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAI_word__id__get_200_response_inner_word::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_word__id__get_200_response_inner_word::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAI_word__id__get_200_response_inner_word::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_word__id__get_200_response_inner_word::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

qint32 OAI_word__id__get_200_response_inner_word::getId() const {
    return m_id;
}
void OAI_word__id__get_200_response_inner_word::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI_word__id__get_200_response_inner_word::is_id_Set() const{
    return m_id_isSet;
}

bool OAI_word__id__get_200_response_inner_word::is_id_Valid() const{
    return m_id_isValid;
}

QString OAI_word__id__get_200_response_inner_word::getUri() const {
    return m_uri;
}
void OAI_word__id__get_200_response_inner_word::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAI_word__id__get_200_response_inner_word::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAI_word__id__get_200_response_inner_word::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAI_word__id__get_200_response_inner_word::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_word__id__get_200_response_inner_word::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
