/*
 * SEDRA IV API
 * The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation. # Introduction This document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience. Additionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd. # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. # Samples Explaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works. 1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json) 2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json) 3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json) 4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sedra@bethmardutho.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.WordIdGet200ResponseInnerWord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WordIdGet200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:20.574350-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WordIdGet200ResponseInner {
  public static final String SERIALIZED_NAME_EASTERN = "eastern";
  @SerializedName(SERIALIZED_NAME_EASTERN)
  private String eastern;

  /**
   * The gender of a Syriac adjective, noun, numeral, pronoun, suffix, or verb.
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    COMMON("common"),
    
    FEMININE("feminine"),
    
    MASCULINE("masculine");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_GLOSSES = "glosses";
  @SerializedName(SERIALIZED_NAME_GLOSSES)
  private Map<String, List<String>> glosses = new HashMap<>();

  public static final String SERIALIZED_NAME_HAS_SEYAME = "hasSeyame";
  @SerializedName(SERIALIZED_NAME_HAS_SEYAME)
  private Boolean hasSeyame;

  public static final String SERIALIZED_NAME_IS_ENCLITIC = "isEnclitic";
  @SerializedName(SERIALIZED_NAME_IS_ENCLITIC)
  private Boolean isEnclitic;

  public static final String SERIALIZED_NAME_IS_LEXICAL_FORM = "isLexicalForm";
  @SerializedName(SERIALIZED_NAME_IS_LEXICAL_FORM)
  private Boolean isLexicalForm;

  public static final String SERIALIZED_NAME_IS_THEORETICAL = "isTheoretical";
  @SerializedName(SERIALIZED_NAME_IS_THEORETICAL)
  private Boolean isTheoretical;

  /**
   * The Kaylo or conjugation of a Syriac verb.
   */
  @JsonAdapter(KayloEnum.Adapter.class)
  public enum KayloEnum {
    ETTAPH_AL_PASS_OF_TAPH_EL_("ettaphʿal (pass. of Taphʿel)"),
    
    IVA("IVa"),
    
    IVP("IVp"),
    
    P_AL("pʿal"),
    
    PA_EL("paʿʿel"),
    
    SHAPH_EL("shaphʿel"),
    
    PALPEL("palpel"),
    
    ETHPA_AL("ethpaʿʿal"),
    
    APH_EL("aphʿel"),
    
    ETTAPH_AL("ettaphʿal"),
    
    SAPH_EL("saphʿel"),
    
    ETHP_EL("ethpʿel"),
    
    P("p"),
    
    ETHP("ethp"),
    
    ETHPALPAL("ethpalpal"),
    
    PAY_EL("payʿel"),
    
    ETHPAY_AL("ethpayʿal"),
    
    ETHPAR_AL("ethparʿal"),
    
    ESHTAPH_AL("eshtaphʿal"),
    
    ETHPAW_AL("ethpawʿal"),
    
    PAW_EL("pawʿel"),
    
    PALPAL("palpal"),
    
    PAM_EL("pamʿel"),
    
    TAPH_EL("taphʿel"),
    
    PAR_EL("parʿel"),
    
    ESTAPH_AL("estaphʿal"),
    
    ETHPA_LI("ethpaʿli"),
    
    PA_LI("paʿli");

    private String value;

    KayloEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KayloEnum fromValue(String value) {
      for (KayloEnum b : KayloEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KayloEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KayloEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KayloEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KayloEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KayloEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KAYLO = "kaylo";
  @SerializedName(SERIALIZED_NAME_KAYLO)
  private KayloEnum kaylo;

  public static final String SERIALIZED_NAME_LEXEME = "lexeme";
  @SerializedName(SERIALIZED_NAME_LEXEME)
  private Object lexeme = null;

  /**
   * The number of a Syriac adjective, noun, suffix, or verb.
   */
  @JsonAdapter(NumberEnum.Adapter.class)
  public enum NumberEnum {
    PLURAL("plural"),
    
    SINGULAR("singular");

    private String value;

    NumberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberEnum fromValue(String value) {
      for (NumberEnum b : NumberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NumberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private NumberEnum number;

  /**
   * The person of a Syriac verb.
   */
  @JsonAdapter(PersonEnum.Adapter.class)
  public enum PersonEnum {
    FIRST("first"),
    
    SECOND("second"),
    
    THIRD("third");

    private String value;

    PersonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersonEnum fromValue(String value) {
      for (PersonEnum b : PersonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PersonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PersonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PersonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private PersonEnum person;

  /**
   * The state of a Syriac substantive or adjective.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ABSOLUTE("absolute"),
    
    EMPHATIC("emphatic"),
    
    CONSTRUCT("construct");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUFFIX_GENDER = "suffixGender";
  @SerializedName(SERIALIZED_NAME_SUFFIX_GENDER)
  private Object suffixGender = null;

  public static final String SERIALIZED_NAME_SUFFIX_NUMBER = "suffixNumber";
  @SerializedName(SERIALIZED_NAME_SUFFIX_NUMBER)
  private Object suffixNumber = null;

  public static final String SERIALIZED_NAME_SUFFIX_PERSON = "suffixPerson";
  @SerializedName(SERIALIZED_NAME_SUFFIX_PERSON)
  private Object suffixPerson = null;

  /**
   * The type of suffix attached to the Syriac word.
   */
  @JsonAdapter(SuffixTypeEnum.Adapter.class)
  public enum SuffixTypeEnum {
    CONTRACTION("contraction"),
    
    SUFFIX("suffix");

    private String value;

    SuffixTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuffixTypeEnum fromValue(String value) {
      for (SuffixTypeEnum b : SuffixTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuffixTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuffixTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuffixTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuffixTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuffixTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUFFIX_TYPE = "suffixType";
  @SerializedName(SERIALIZED_NAME_SUFFIX_TYPE)
  private SuffixTypeEnum suffixType;

  public static final String SERIALIZED_NAME_SYRIAC = "syriac";
  @SerializedName(SERIALIZED_NAME_SYRIAC)
  private String syriac;

  /**
   * The tense of a Syriac verb.
   */
  @JsonAdapter(TenseEnum.Adapter.class)
  public enum TenseEnum {
    ACTIVE_PARTICIPLE("active participle"),
    
    IMPERATIVE("imperative"),
    
    IMPERFECT("imperfect"),
    
    INFINITIVE("infinitive"),
    
    PARTICIPLE("participle"),
    
    PASSIVE_PARTICIPLE("passive participle"),
    
    PERFECT("perfect");

    private String value;

    TenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TenseEnum fromValue(String value) {
      for (TenseEnum b : TenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TenseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TenseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TENSE = "tense";
  @SerializedName(SERIALIZED_NAME_TENSE)
  private TenseEnum tense;

  public static final String SERIALIZED_NAME_WESTERN = "western";
  @SerializedName(SERIALIZED_NAME_WESTERN)
  private String western;

  public static final String SERIALIZED_NAME_WORD = "word";
  @SerializedName(SERIALIZED_NAME_WORD)
  private WordIdGet200ResponseInnerWord word;

  public WordIdGet200ResponseInner() {
  }

  public WordIdGet200ResponseInner eastern(String eastern) {
    this.eastern = eastern;
    return this;
  }

  /**
   * Eastern vocalized form of this Syriac word.
   * @return eastern
   */
  @javax.annotation.Nullable
  public String getEastern() {
    return eastern;
  }

  public void setEastern(String eastern) {
    this.eastern = eastern;
  }


  public WordIdGet200ResponseInner gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The gender of a Syriac adjective, noun, numeral, pronoun, suffix, or verb.
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public WordIdGet200ResponseInner glosses(Map<String, List<String>> glosses) {
    this.glosses = glosses;
    return this;
  }

  public WordIdGet200ResponseInner putGlossesItem(String key, List<String> glossesItem) {
    if (this.glosses == null) {
      this.glosses = new HashMap<>();
    }
    this.glosses.put(key, glossesItem);
    return this;
  }

  /**
   * A hashmap with language name as a key and and array of text strings in that language
   * @return glosses
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getGlosses() {
    return glosses;
  }

  public void setGlosses(Map<String, List<String>> glosses) {
    this.glosses = glosses;
  }


  public WordIdGet200ResponseInner hasSeyame(Boolean hasSeyame) {
    this.hasSeyame = hasSeyame;
    return this;
  }

  /**
   * Indicator to the presence of a Seyame in this word.
   * @return hasSeyame
   */
  @javax.annotation.Nullable
  public Boolean getHasSeyame() {
    return hasSeyame;
  }

  public void setHasSeyame(Boolean hasSeyame) {
    this.hasSeyame = hasSeyame;
  }


  public WordIdGet200ResponseInner isEnclitic(Boolean isEnclitic) {
    this.isEnclitic = isEnclitic;
    return this;
  }

  /**
   * Indicator if this Syriac word is an enclitic.
   * @return isEnclitic
   */
  @javax.annotation.Nullable
  public Boolean getIsEnclitic() {
    return isEnclitic;
  }

  public void setIsEnclitic(Boolean isEnclitic) {
    this.isEnclitic = isEnclitic;
  }


  public WordIdGet200ResponseInner isLexicalForm(Boolean isLexicalForm) {
    this.isLexicalForm = isLexicalForm;
    return this;
  }

  /**
   * Indicator if this Syriac word is the lexeme form.
   * @return isLexicalForm
   */
  @javax.annotation.Nullable
  public Boolean getIsLexicalForm() {
    return isLexicalForm;
  }

  public void setIsLexicalForm(Boolean isLexicalForm) {
    this.isLexicalForm = isLexicalForm;
  }


  public WordIdGet200ResponseInner isTheoretical(Boolean isTheoretical) {
    this.isTheoretical = isTheoretical;
    return this;
  }

  /**
   * Indicator if this Syriac word is theoretical or it is attested.
   * @return isTheoretical
   */
  @javax.annotation.Nullable
  public Boolean getIsTheoretical() {
    return isTheoretical;
  }

  public void setIsTheoretical(Boolean isTheoretical) {
    this.isTheoretical = isTheoretical;
  }


  public WordIdGet200ResponseInner kaylo(KayloEnum kaylo) {
    this.kaylo = kaylo;
    return this;
  }

  /**
   * The Kaylo or conjugation of a Syriac verb.
   * @return kaylo
   */
  @javax.annotation.Nullable
  public KayloEnum getKaylo() {
    return kaylo;
  }

  public void setKaylo(KayloEnum kaylo) {
    this.kaylo = kaylo;
  }


  public WordIdGet200ResponseInner lexeme(Object lexeme) {
    this.lexeme = lexeme;
    return this;
  }

  /**
   * Get lexeme
   * @return lexeme
   */
  @javax.annotation.Nonnull
  public Object getLexeme() {
    return lexeme;
  }

  public void setLexeme(Object lexeme) {
    this.lexeme = lexeme;
  }


  public WordIdGet200ResponseInner number(NumberEnum number) {
    this.number = number;
    return this;
  }

  /**
   * The number of a Syriac adjective, noun, suffix, or verb.
   * @return number
   */
  @javax.annotation.Nullable
  public NumberEnum getNumber() {
    return number;
  }

  public void setNumber(NumberEnum number) {
    this.number = number;
  }


  public WordIdGet200ResponseInner person(PersonEnum person) {
    this.person = person;
    return this;
  }

  /**
   * The person of a Syriac verb.
   * @return person
   */
  @javax.annotation.Nullable
  public PersonEnum getPerson() {
    return person;
  }

  public void setPerson(PersonEnum person) {
    this.person = person;
  }


  public WordIdGet200ResponseInner state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of a Syriac substantive or adjective.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public WordIdGet200ResponseInner suffixGender(Object suffixGender) {
    this.suffixGender = suffixGender;
    return this;
  }

  /**
   * Get suffixGender
   * @return suffixGender
   */
  @javax.annotation.Nullable
  public Object getSuffixGender() {
    return suffixGender;
  }

  public void setSuffixGender(Object suffixGender) {
    this.suffixGender = suffixGender;
  }


  public WordIdGet200ResponseInner suffixNumber(Object suffixNumber) {
    this.suffixNumber = suffixNumber;
    return this;
  }

  /**
   * Get suffixNumber
   * @return suffixNumber
   */
  @javax.annotation.Nullable
  public Object getSuffixNumber() {
    return suffixNumber;
  }

  public void setSuffixNumber(Object suffixNumber) {
    this.suffixNumber = suffixNumber;
  }


  public WordIdGet200ResponseInner suffixPerson(Object suffixPerson) {
    this.suffixPerson = suffixPerson;
    return this;
  }

  /**
   * Get suffixPerson
   * @return suffixPerson
   */
  @javax.annotation.Nullable
  public Object getSuffixPerson() {
    return suffixPerson;
  }

  public void setSuffixPerson(Object suffixPerson) {
    this.suffixPerson = suffixPerson;
  }


  public WordIdGet200ResponseInner suffixType(SuffixTypeEnum suffixType) {
    this.suffixType = suffixType;
    return this;
  }

  /**
   * The type of suffix attached to the Syriac word.
   * @return suffixType
   */
  @javax.annotation.Nullable
  public SuffixTypeEnum getSuffixType() {
    return suffixType;
  }

  public void setSuffixType(SuffixTypeEnum suffixType) {
    this.suffixType = suffixType;
  }


  public WordIdGet200ResponseInner syriac(String syriac) {
    this.syriac = syriac;
    return this;
  }

  /**
   * Consonantal form of this Syriac word.
   * @return syriac
   */
  @javax.annotation.Nonnull
  public String getSyriac() {
    return syriac;
  }

  public void setSyriac(String syriac) {
    this.syriac = syriac;
  }


  public WordIdGet200ResponseInner tense(TenseEnum tense) {
    this.tense = tense;
    return this;
  }

  /**
   * The tense of a Syriac verb.
   * @return tense
   */
  @javax.annotation.Nullable
  public TenseEnum getTense() {
    return tense;
  }

  public void setTense(TenseEnum tense) {
    this.tense = tense;
  }


  public WordIdGet200ResponseInner western(String western) {
    this.western = western;
    return this;
  }

  /**
   * Western vocalized form of this Syriac word.
   * @return western
   */
  @javax.annotation.Nullable
  public String getWestern() {
    return western;
  }

  public void setWestern(String western) {
    this.western = western;
  }


  public WordIdGet200ResponseInner word(WordIdGet200ResponseInnerWord word) {
    this.word = word;
    return this;
  }

  /**
   * Get word
   * @return word
   */
  @javax.annotation.Nonnull
  public WordIdGet200ResponseInnerWord getWord() {
    return word;
  }

  public void setWord(WordIdGet200ResponseInnerWord word) {
    this.word = word;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WordIdGet200ResponseInner wordIdGet200ResponseInner = (WordIdGet200ResponseInner) o;
    return Objects.equals(this.eastern, wordIdGet200ResponseInner.eastern) &&
        Objects.equals(this.gender, wordIdGet200ResponseInner.gender) &&
        Objects.equals(this.glosses, wordIdGet200ResponseInner.glosses) &&
        Objects.equals(this.hasSeyame, wordIdGet200ResponseInner.hasSeyame) &&
        Objects.equals(this.isEnclitic, wordIdGet200ResponseInner.isEnclitic) &&
        Objects.equals(this.isLexicalForm, wordIdGet200ResponseInner.isLexicalForm) &&
        Objects.equals(this.isTheoretical, wordIdGet200ResponseInner.isTheoretical) &&
        Objects.equals(this.kaylo, wordIdGet200ResponseInner.kaylo) &&
        Objects.equals(this.lexeme, wordIdGet200ResponseInner.lexeme) &&
        Objects.equals(this.number, wordIdGet200ResponseInner.number) &&
        Objects.equals(this.person, wordIdGet200ResponseInner.person) &&
        Objects.equals(this.state, wordIdGet200ResponseInner.state) &&
        Objects.equals(this.suffixGender, wordIdGet200ResponseInner.suffixGender) &&
        Objects.equals(this.suffixNumber, wordIdGet200ResponseInner.suffixNumber) &&
        Objects.equals(this.suffixPerson, wordIdGet200ResponseInner.suffixPerson) &&
        Objects.equals(this.suffixType, wordIdGet200ResponseInner.suffixType) &&
        Objects.equals(this.syriac, wordIdGet200ResponseInner.syriac) &&
        Objects.equals(this.tense, wordIdGet200ResponseInner.tense) &&
        Objects.equals(this.western, wordIdGet200ResponseInner.western) &&
        Objects.equals(this.word, wordIdGet200ResponseInner.word);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eastern, gender, glosses, hasSeyame, isEnclitic, isLexicalForm, isTheoretical, kaylo, lexeme, number, person, state, suffixGender, suffixNumber, suffixPerson, suffixType, syriac, tense, western, word);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WordIdGet200ResponseInner {\n");
    sb.append("    eastern: ").append(toIndentedString(eastern)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    glosses: ").append(toIndentedString(glosses)).append("\n");
    sb.append("    hasSeyame: ").append(toIndentedString(hasSeyame)).append("\n");
    sb.append("    isEnclitic: ").append(toIndentedString(isEnclitic)).append("\n");
    sb.append("    isLexicalForm: ").append(toIndentedString(isLexicalForm)).append("\n");
    sb.append("    isTheoretical: ").append(toIndentedString(isTheoretical)).append("\n");
    sb.append("    kaylo: ").append(toIndentedString(kaylo)).append("\n");
    sb.append("    lexeme: ").append(toIndentedString(lexeme)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    suffixGender: ").append(toIndentedString(suffixGender)).append("\n");
    sb.append("    suffixNumber: ").append(toIndentedString(suffixNumber)).append("\n");
    sb.append("    suffixPerson: ").append(toIndentedString(suffixPerson)).append("\n");
    sb.append("    suffixType: ").append(toIndentedString(suffixType)).append("\n");
    sb.append("    syriac: ").append(toIndentedString(syriac)).append("\n");
    sb.append("    tense: ").append(toIndentedString(tense)).append("\n");
    sb.append("    western: ").append(toIndentedString(western)).append("\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eastern");
    openapiFields.add("gender");
    openapiFields.add("glosses");
    openapiFields.add("hasSeyame");
    openapiFields.add("isEnclitic");
    openapiFields.add("isLexicalForm");
    openapiFields.add("isTheoretical");
    openapiFields.add("kaylo");
    openapiFields.add("lexeme");
    openapiFields.add("number");
    openapiFields.add("person");
    openapiFields.add("state");
    openapiFields.add("suffixGender");
    openapiFields.add("suffixNumber");
    openapiFields.add("suffixPerson");
    openapiFields.add("suffixType");
    openapiFields.add("syriac");
    openapiFields.add("tense");
    openapiFields.add("western");
    openapiFields.add("word");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lexeme");
    openapiRequiredFields.add("syriac");
    openapiRequiredFields.add("word");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WordIdGet200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WordIdGet200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WordIdGet200ResponseInner is not found in the empty JSON string", WordIdGet200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WordIdGet200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WordIdGet200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WordIdGet200ResponseInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eastern") != null && !jsonObj.get("eastern").isJsonNull()) && !jsonObj.get("eastern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eastern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eastern").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("kaylo") != null && !jsonObj.get("kaylo").isJsonNull()) && !jsonObj.get("kaylo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kaylo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kaylo").toString()));
      }
      // validate the optional field `kaylo`
      if (jsonObj.get("kaylo") != null && !jsonObj.get("kaylo").isJsonNull()) {
        KayloEnum.validateJsonElement(jsonObj.get("kaylo"));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `number`
      if (jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) {
        NumberEnum.validateJsonElement(jsonObj.get("number"));
      }
      if ((jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) && !jsonObj.get("person").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `person` to be a primitive type in the JSON string but got `%s`", jsonObj.get("person").toString()));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        PersonEnum.validateJsonElement(jsonObj.get("person"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("suffixType") != null && !jsonObj.get("suffixType").isJsonNull()) && !jsonObj.get("suffixType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffixType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffixType").toString()));
      }
      // validate the optional field `suffixType`
      if (jsonObj.get("suffixType") != null && !jsonObj.get("suffixType").isJsonNull()) {
        SuffixTypeEnum.validateJsonElement(jsonObj.get("suffixType"));
      }
      if (!jsonObj.get("syriac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syriac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syriac").toString()));
      }
      if ((jsonObj.get("tense") != null && !jsonObj.get("tense").isJsonNull()) && !jsonObj.get("tense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tense").toString()));
      }
      // validate the optional field `tense`
      if (jsonObj.get("tense") != null && !jsonObj.get("tense").isJsonNull()) {
        TenseEnum.validateJsonElement(jsonObj.get("tense"));
      }
      if ((jsonObj.get("western") != null && !jsonObj.get("western").isJsonNull()) && !jsonObj.get("western").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `western` to be a primitive type in the JSON string but got `%s`", jsonObj.get("western").toString()));
      }
      // validate the required field `word`
      WordIdGet200ResponseInnerWord.validateJsonElement(jsonObj.get("word"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WordIdGet200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WordIdGet200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WordIdGet200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WordIdGet200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WordIdGet200ResponseInner>() {
           @Override
           public void write(JsonWriter out, WordIdGet200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WordIdGet200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WordIdGet200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WordIdGet200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to WordIdGet200ResponseInner
   */
  public static WordIdGet200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WordIdGet200ResponseInner.class);
  }

  /**
   * Convert an instance of WordIdGet200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

