/**
 * SEDRA IV API
 * The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation. # Introduction This document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience. Additionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd. # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. # Samples Explaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works. 1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json) 2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json) 3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json) 4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sedra@bethmardutho.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SedraIvApi);
  }
}(this, function(expect, SedraIvApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SedraIvApi.WordIdGet200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WordIdGet200ResponseInner', function() {
    it('should create an instance of WordIdGet200ResponseInner', function() {
      // uncomment below and update the code to test WordIdGet200ResponseInner
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be.a(SedraIvApi.WordIdGet200ResponseInner);
    });

    it('should have the property eastern (base name: "eastern")', function() {
      // uncomment below and update the code to test the property eastern
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property glosses (base name: "glosses")', function() {
      // uncomment below and update the code to test the property glosses
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property hasSeyame (base name: "hasSeyame")', function() {
      // uncomment below and update the code to test the property hasSeyame
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isEnclitic (base name: "isEnclitic")', function() {
      // uncomment below and update the code to test the property isEnclitic
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isLexicalForm (base name: "isLexicalForm")', function() {
      // uncomment below and update the code to test the property isLexicalForm
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isTheoretical (base name: "isTheoretical")', function() {
      // uncomment below and update the code to test the property isTheoretical
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property kaylo (base name: "kaylo")', function() {
      // uncomment below and update the code to test the property kaylo
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property lexeme (base name: "lexeme")', function() {
      // uncomment below and update the code to test the property lexeme
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property person (base name: "person")', function() {
      // uncomment below and update the code to test the property person
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property suffixGender (base name: "suffixGender")', function() {
      // uncomment below and update the code to test the property suffixGender
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property suffixNumber (base name: "suffixNumber")', function() {
      // uncomment below and update the code to test the property suffixNumber
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property suffixPerson (base name: "suffixPerson")', function() {
      // uncomment below and update the code to test the property suffixPerson
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property suffixType (base name: "suffixType")', function() {
      // uncomment below and update the code to test the property suffixType
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property syriac (base name: "syriac")', function() {
      // uncomment below and update the code to test the property syriac
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property tense (base name: "tense")', function() {
      // uncomment below and update the code to test the property tense
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property western (base name: "western")', function() {
      // uncomment below and update the code to test the property western
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property word (base name: "word")', function() {
      // uncomment below and update the code to test the property word
      //var instance = new SedraIvApi.WordIdGet200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
