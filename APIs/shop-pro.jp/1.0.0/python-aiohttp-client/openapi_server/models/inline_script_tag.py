# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InlineScriptTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, display_scope: str=None, id: int=None, make_date: int=None, oauth_application_id: int=None, script: str=None, trigger_event: str=None, update_date: int=None):
        """InlineScriptTag - a model defined in OpenAPI

        :param account_id: The account_id of this InlineScriptTag.
        :param display_scope: The display_scope of this InlineScriptTag.
        :param id: The id of this InlineScriptTag.
        :param make_date: The make_date of this InlineScriptTag.
        :param oauth_application_id: The oauth_application_id of this InlineScriptTag.
        :param script: The script of this InlineScriptTag.
        :param trigger_event: The trigger_event of this InlineScriptTag.
        :param update_date: The update_date of this InlineScriptTag.
        """
        self.openapi_types = {
            'account_id': str,
            'display_scope': str,
            'id': int,
            'make_date': int,
            'oauth_application_id': int,
            'script': str,
            'trigger_event': str,
            'update_date': int
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'display_scope': 'display_scope',
            'id': 'id',
            'make_date': 'make_date',
            'oauth_application_id': 'oauth_application_id',
            'script': 'script',
            'trigger_event': 'trigger_event',
            'update_date': 'update_date'
        }

        self._account_id = account_id
        self._display_scope = display_scope
        self._id = id
        self._make_date = make_date
        self._oauth_application_id = oauth_application_id
        self._script = script
        self._trigger_event = trigger_event
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineScriptTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InlineScriptTag of this InlineScriptTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this InlineScriptTag.

        アカウントID

        :return: The account_id of this InlineScriptTag.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineScriptTag.

        アカウントID

        :param account_id: The account_id of this InlineScriptTag.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def display_scope(self):
        """Gets the display_scope of this InlineScriptTag.

        インラインスクリプトを出力するページ。  - `all`: カートの途中のページと注文完了ページの両方 - `thanks_page`: 注文完了ページ - `cart`: カートの途中のページ 

        :return: The display_scope of this InlineScriptTag.
        :rtype: str
        """
        return self._display_scope

    @display_scope.setter
    def display_scope(self, display_scope):
        """Sets the display_scope of this InlineScriptTag.

        インラインスクリプトを出力するページ。  - `all`: カートの途中のページと注文完了ページの両方 - `thanks_page`: 注文完了ページ - `cart`: カートの途中のページ 

        :param display_scope: The display_scope of this InlineScriptTag.
        :type display_scope: str
        """
        allowed_values = ["all", "thanks_page", "cart"]  # noqa: E501
        if display_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `display_scope` ({0}), must be one of {1}"
                .format(display_scope, allowed_values)
            )

        self._display_scope = display_scope

    @property
    def id(self):
        """Gets the id of this InlineScriptTag.

        インラインスクリプトタグID

        :return: The id of this InlineScriptTag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineScriptTag.

        インラインスクリプトタグID

        :param id: The id of this InlineScriptTag.
        :type id: int
        """

        self._id = id

    @property
    def make_date(self):
        """Gets the make_date of this InlineScriptTag.

        作成日時

        :return: The make_date of this InlineScriptTag.
        :rtype: int
        """
        return self._make_date

    @make_date.setter
    def make_date(self, make_date):
        """Sets the make_date of this InlineScriptTag.

        作成日時

        :param make_date: The make_date of this InlineScriptTag.
        :type make_date: int
        """

        self._make_date = make_date

    @property
    def oauth_application_id(self):
        """Gets the oauth_application_id of this InlineScriptTag.

        アプリID

        :return: The oauth_application_id of this InlineScriptTag.
        :rtype: int
        """
        return self._oauth_application_id

    @oauth_application_id.setter
    def oauth_application_id(self, oauth_application_id):
        """Sets the oauth_application_id of this InlineScriptTag.

        アプリID

        :param oauth_application_id: The oauth_application_id of this InlineScriptTag.
        :type oauth_application_id: int
        """

        self._oauth_application_id = oauth_application_id

    @property
    def script(self):
        """Gets the script of this InlineScriptTag.

        インラインスクリプト

        :return: The script of this InlineScriptTag.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this InlineScriptTag.

        インラインスクリプト

        :param script: The script of this InlineScriptTag.
        :type script: str
        """

        self._script = script

    @property
    def trigger_event(self):
        """Gets the trigger_event of this InlineScriptTag.

        インラインスクリプトを実行するタイミング。  - `object_builded`: JSオブジェクトの作成が完了した時 

        :return: The trigger_event of this InlineScriptTag.
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this InlineScriptTag.

        インラインスクリプトを実行するタイミング。  - `object_builded`: JSオブジェクトの作成が完了した時 

        :param trigger_event: The trigger_event of this InlineScriptTag.
        :type trigger_event: str
        """
        allowed_values = ["object_builded"]  # noqa: E501
        if trigger_event not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_event` ({0}), must be one of {1}"
                .format(trigger_event, allowed_values)
            )

        self._trigger_event = trigger_event

    @property
    def update_date(self):
        """Gets the update_date of this InlineScriptTag.

        更新日時

        :return: The update_date of this InlineScriptTag.
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this InlineScriptTag.

        更新日時

        :param update_date: The update_date of this InlineScriptTag.
        :type update_date: int
        """

        self._update_date = update_date
