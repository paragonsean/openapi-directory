# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateInlineScriptTagRequestInlineScriptTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_scope: str=None, script: str=None, trigger_event: str=None):
        """CreateInlineScriptTagRequestInlineScriptTag - a model defined in OpenAPI

        :param display_scope: The display_scope of this CreateInlineScriptTagRequestInlineScriptTag.
        :param script: The script of this CreateInlineScriptTagRequestInlineScriptTag.
        :param trigger_event: The trigger_event of this CreateInlineScriptTagRequestInlineScriptTag.
        """
        self.openapi_types = {
            'display_scope': str,
            'script': str,
            'trigger_event': str
        }

        self.attribute_map = {
            'display_scope': 'display_scope',
            'script': 'script',
            'trigger_event': 'trigger_event'
        }

        self._display_scope = display_scope
        self._script = script
        self._trigger_event = trigger_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInlineScriptTagRequestInlineScriptTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createInlineScriptTag_request_inline_script_tag of this CreateInlineScriptTagRequestInlineScriptTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_scope(self):
        """Gets the display_scope of this CreateInlineScriptTagRequestInlineScriptTag.

        インラインスクリプトを出力するページ。  - `all`: カートの途中のページと注文完了ページの両方 - `thanks_page`: 注文完了ページ - `cart`: カートの途中のページ 

        :return: The display_scope of this CreateInlineScriptTagRequestInlineScriptTag.
        :rtype: str
        """
        return self._display_scope

    @display_scope.setter
    def display_scope(self, display_scope):
        """Sets the display_scope of this CreateInlineScriptTagRequestInlineScriptTag.

        インラインスクリプトを出力するページ。  - `all`: カートの途中のページと注文完了ページの両方 - `thanks_page`: 注文完了ページ - `cart`: カートの途中のページ 

        :param display_scope: The display_scope of this CreateInlineScriptTagRequestInlineScriptTag.
        :type display_scope: str
        """
        allowed_values = ["all", "thanks_page", "cart"]  # noqa: E501
        if display_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `display_scope` ({0}), must be one of {1}"
                .format(display_scope, allowed_values)
            )

        self._display_scope = display_scope

    @property
    def script(self):
        """Gets the script of this CreateInlineScriptTagRequestInlineScriptTag.

        インラインスクリプト

        :return: The script of this CreateInlineScriptTagRequestInlineScriptTag.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this CreateInlineScriptTagRequestInlineScriptTag.

        インラインスクリプト

        :param script: The script of this CreateInlineScriptTagRequestInlineScriptTag.
        :type script: str
        """

        self._script = script

    @property
    def trigger_event(self):
        """Gets the trigger_event of this CreateInlineScriptTagRequestInlineScriptTag.

        インラインスクリプトを実行するタイミング。  - `object_builded`: JSオブジェクトの作成が完了した時 

        :return: The trigger_event of this CreateInlineScriptTagRequestInlineScriptTag.
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this CreateInlineScriptTagRequestInlineScriptTag.

        インラインスクリプトを実行するタイミング。  - `object_builded`: JSオブジェクトの作成が完了した時 

        :param trigger_event: The trigger_event of this CreateInlineScriptTagRequestInlineScriptTag.
        :type trigger_event: str
        """
        allowed_values = ["object_builded"]  # noqa: E501
        if trigger_event not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_event` ({0}), must be one of {1}"
                .format(trigger_event, allowed_values)
            )

        self._trigger_event = trigger_event
