/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.HealthCheck200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HealthCheckApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HealthCheckApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthCheckApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for healthCheck
     * @param authorization  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 OK response means the messaging service is up. </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout  | code | suggested_action | | :--- | :--- | | GATEWAY_TIMEOUT | The service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) or [contact support](mailto:telstradev@team.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call healthCheckCall(String authorization, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/health-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCheckValidateBeforeCall(String authorization, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling healthCheck(Async)");
        }

        return healthCheckCall(authorization, telstraApiVersion, _callback);

    }

    /**
     * health check
     * Use this endpoint to check the operational status of the messaging service. A 200 OK response means the service is up. If you receive a 504 response, the service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) to see if there&#39;s an active incident.
     * @param authorization  (required)
     * @param telstraApiVersion  (optional)
     * @return HealthCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 OK response means the messaging service is up. </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout  | code | suggested_action | | :--- | :--- | | GATEWAY_TIMEOUT | The service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) or [contact support](mailto:telstradev@team.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public HealthCheck200Response healthCheck(String authorization, String telstraApiVersion) throws ApiException {
        ApiResponse<HealthCheck200Response> localVarResp = healthCheckWithHttpInfo(authorization, telstraApiVersion);
        return localVarResp.getData();
    }

    /**
     * health check
     * Use this endpoint to check the operational status of the messaging service. A 200 OK response means the service is up. If you receive a 504 response, the service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) to see if there&#39;s an active incident.
     * @param authorization  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;HealthCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 OK response means the messaging service is up. </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout  | code | suggested_action | | :--- | :--- | | GATEWAY_TIMEOUT | The service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) or [contact support](mailto:telstradev@team.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<HealthCheck200Response> healthCheckWithHttpInfo(String authorization, String telstraApiVersion) throws ApiException {
        okhttp3.Call localVarCall = healthCheckValidateBeforeCall(authorization, telstraApiVersion, null);
        Type localVarReturnType = new TypeToken<HealthCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * health check (asynchronously)
     * Use this endpoint to check the operational status of the messaging service. A 200 OK response means the service is up. If you receive a 504 response, the service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) to see if there&#39;s an active incident.
     * @param authorization  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 OK response means the messaging service is up. </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout  | code | suggested_action | | :--- | :--- | | GATEWAY_TIMEOUT | The service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) or [contact support](mailto:telstradev@team.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call healthCheckAsync(String authorization, String telstraApiVersion, final ApiCallback<HealthCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCheckValidateBeforeCall(authorization, telstraApiVersion, _callback);
        Type localVarReturnType = new TypeToken<HealthCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
