/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.GetMessages200Response;
import org.openapitools.client.model.MessageGet;
import org.openapitools.client.model.MessageSent;
import org.openapitools.client.model.MessageUpdate;
import org.openapitools.client.model.SendMessagesRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateMessageByIdRequest;
import org.openapitools.client.model.UpdateMessageTagsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMessageById
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 response means your message has been deleted.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | DELETE_INVALID_MSG_SENT | The message can&#39;t be deleted because it&#39;s already been sent. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is DELETE. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageByIdCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (contentLanguage != null) {
            localVarHeaderParams.put("Content-Language", localVarApiClient.parameterToString(contentLanguage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (acceptCharset != null) {
            localVarHeaderParams.put("Accept-Charset", localVarApiClient.parameterToString(acceptCharset));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageByIdValidateBeforeCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessageById(Async)");
        }

        return deleteMessageByIdCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion, _callback);

    }

    /**
     * delete a message
     * Use this endpoint to delete a message that&#39;s been scheduled for sending, but hasn&#39;t yet sent. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 response means your message has been deleted.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | DELETE_INVALID_MSG_SENT | The message can&#39;t be deleted because it&#39;s already been sent. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is DELETE. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public void deleteMessageById(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        deleteMessageByIdWithHttpInfo(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion);
    }

    /**
     * delete a message
     * Use this endpoint to delete a message that&#39;s been scheduled for sending, but hasn&#39;t yet sent. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 response means your message has been deleted.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | DELETE_INVALID_MSG_SENT | The message can&#39;t be deleted because it&#39;s already been sent. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is DELETE. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessageByIdWithHttpInfo(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete a message (asynchronously)
     * Use this endpoint to delete a message that&#39;s been scheduled for sending, but hasn&#39;t yet sent. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 response means your message has been deleted.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | DELETE_INVALID_MSG_SENT | The message can&#39;t be deleted because it&#39;s already been sent. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is DELETE. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageByIdAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessageById
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | FIELD_INVALID | Check the field and the field formatting are correct. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 406 </td><td> Media type invalid  | code | suggested_action | | :--- | :--- | | MEDIA_TYPE_INVALID | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 415 </td><td> Payload media type error  | code | suggested_action | | :--- | :--- | | PAYLOAD_MEDIA_TYPE_ERR | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 422 </td><td> Logic error  | code | suggested_action | | :--- | :--- | | LOGIC_ERR | Check the logic of the request and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMessageByIdCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (contentLanguage != null) {
            localVarHeaderParams.put("Content-Language", localVarApiClient.parameterToString(contentLanguage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (acceptCharset != null) {
            localVarHeaderParams.put("Accept-Charset", localVarApiClient.parameterToString(acceptCharset));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageByIdValidateBeforeCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getMessageById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMessageById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getMessageById(Async)");
        }

        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getMessageById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getMessageById(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageById(Async)");
        }

        return getMessageByIdCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion, _callback);

    }

    /**
     * fetch a specific message
     * Use the **messageId** to fetch a message that&#39;s been sent from/to your account within the last 30 days. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @return MessageGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | FIELD_INVALID | Check the field and the field formatting are correct. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 406 </td><td> Media type invalid  | code | suggested_action | | :--- | :--- | | MEDIA_TYPE_INVALID | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 415 </td><td> Payload media type error  | code | suggested_action | | :--- | :--- | | PAYLOAD_MEDIA_TYPE_ERR | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 422 </td><td> Logic error  | code | suggested_action | | :--- | :--- | | LOGIC_ERR | Check the logic of the request and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public MessageGet getMessageById(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        ApiResponse<MessageGet> localVarResp = getMessageByIdWithHttpInfo(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion);
        return localVarResp.getData();
    }

    /**
     * fetch a specific message
     * Use the **messageId** to fetch a message that&#39;s been sent from/to your account within the last 30 days. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;MessageGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | FIELD_INVALID | Check the field and the field formatting are correct. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 406 </td><td> Media type invalid  | code | suggested_action | | :--- | :--- | | MEDIA_TYPE_INVALID | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 415 </td><td> Payload media type error  | code | suggested_action | | :--- | :--- | | PAYLOAD_MEDIA_TYPE_ERR | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 422 </td><td> Logic error  | code | suggested_action | | :--- | :--- | | LOGIC_ERR | Check the logic of the request and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<MessageGet> getMessageByIdWithHttpInfo(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        okhttp3.Call localVarCall = getMessageByIdValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion, null);
        Type localVarReturnType = new TypeToken<MessageGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fetch a specific message (asynchronously)
     * Use the **messageId** to fetch a message that&#39;s been sent from/to your account within the last 30 days. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from/to this account. | | FIELD_INVALID | Check the field and the field formatting are correct. | | TIMEFRAME_ERR | Ensure the messageId corresponds to a message that is not more than 30 days old. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 406 </td><td> Media type invalid  | code | suggested_action | | :--- | :--- | | MEDIA_TYPE_INVALID | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 415 </td><td> Payload media type error  | code | suggested_action | | :--- | :--- | | PAYLOAD_MEDIA_TYPE_ERR | Check the media type in the Accept header. It should be application/json. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 422 </td><td> Logic error  | code | suggested_action | | :--- | :--- | | LOGIC_ERR | Check the logic of the request and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMessageByIdAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback<MessageGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageByIdValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, telstraApiVersion, _callback);
        Type localVarReturnType = new TypeToken<MessageGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessages
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#39;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#39;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (contentLanguage != null) {
            localVarHeaderParams.put("Content-Language", localVarApiClient.parameterToString(contentLanguage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (acceptCharset != null) {
            localVarHeaderParams.put("Accept-Charset", localVarApiClient.parameterToString(acceptCharset));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesValidateBeforeCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getMessages(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMessages(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getMessages(Async)");
        }

        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getMessages(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getMessages(Async)");
        }

        return getMessagesCall(contentLanguage, authorization, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter, _callback);

    }

    /**
     * fetch all sent/received messages
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#39;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#39;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @return GetMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public GetMessages200Response getMessages(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter) throws ApiException {
        ApiResponse<GetMessages200Response> localVarResp = getMessagesWithHttpInfo(contentLanguage, authorization, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter);
        return localVarResp.getData();
    }

    /**
     * fetch all sent/received messages
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#39;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#39;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @return ApiResponse&lt;GetMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetMessages200Response> getMessagesWithHttpInfo(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter, null);
        Type localVarReturnType = new TypeToken<GetMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fetch all sent/received messages (asynchronously)
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#39;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#39;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is GET. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter, final ApiCallback<GetMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter, _callback);
        Type localVarReturnType = new TypeToken<GetMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessages
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param sendMessagesRequest  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A 201 Created response means your message has sent.  </td><td>  * Content-Language -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | RECIPIENT_OPTOUT | Use GET/recipient-optouts/{number} to check which numbers have opted out of receiving messages from a Virtual Number. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email telstradev@team.telstra.com to request approval for this senderName. | | MODERATION_ERR | Please remove any swear words or offensive language. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | ACCOUNT_LIMIT_ERROR | Check the credit and limits on your account [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is POST. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessagesCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, SendMessagesRequest sendMessagesRequest, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessagesRequest;

        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (contentLanguage != null) {
            localVarHeaderParams.put("Content-Language", localVarApiClient.parameterToString(contentLanguage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (acceptCharset != null) {
            localVarHeaderParams.put("Accept-Charset", localVarApiClient.parameterToString(acceptCharset));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessagesValidateBeforeCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, SendMessagesRequest sendMessagesRequest, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling sendMessages(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling sendMessages(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling sendMessages(Async)");
        }

        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling sendMessages(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling sendMessages(Async)");
        }

        // verify the required parameter 'sendMessagesRequest' is set
        if (sendMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'sendMessagesRequest' when calling sendMessages(Async)");
        }

        return sendMessagesCall(contentLanguage, authorization, accept, acceptCharset, contentType, sendMessagesRequest, telstraApiVersion, _callback);

    }

    /**
     * send messages
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param sendMessagesRequest  (required)
     * @param telstraApiVersion  (optional)
     * @return MessageSent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A 201 Created response means your message has sent.  </td><td>  * Content-Language -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | RECIPIENT_OPTOUT | Use GET/recipient-optouts/{number} to check which numbers have opted out of receiving messages from a Virtual Number. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email telstradev@team.telstra.com to request approval for this senderName. | | MODERATION_ERR | Please remove any swear words or offensive language. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | ACCOUNT_LIMIT_ERROR | Check the credit and limits on your account [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is POST. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public MessageSent sendMessages(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, SendMessagesRequest sendMessagesRequest, String telstraApiVersion) throws ApiException {
        ApiResponse<MessageSent> localVarResp = sendMessagesWithHttpInfo(contentLanguage, authorization, accept, acceptCharset, contentType, sendMessagesRequest, telstraApiVersion);
        return localVarResp.getData();
    }

    /**
     * send messages
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param sendMessagesRequest  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;MessageSent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A 201 Created response means your message has sent.  </td><td>  * Content-Language -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | RECIPIENT_OPTOUT | Use GET/recipient-optouts/{number} to check which numbers have opted out of receiving messages from a Virtual Number. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email telstradev@team.telstra.com to request approval for this senderName. | | MODERATION_ERR | Please remove any swear words or offensive language. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | ACCOUNT_LIMIT_ERROR | Check the credit and limits on your account [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is POST. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<MessageSent> sendMessagesWithHttpInfo(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, SendMessagesRequest sendMessagesRequest, String telstraApiVersion) throws ApiException {
        okhttp3.Call localVarCall = sendMessagesValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, sendMessagesRequest, telstraApiVersion, null);
        Type localVarReturnType = new TypeToken<MessageSent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send messages (asynchronously)
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param sendMessagesRequest  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A 201 Created response means your message has sent.  </td><td>  * Content-Language -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | RECIPIENT_OPTOUT | Use GET/recipient-optouts/{number} to check which numbers have opted out of receiving messages from a Virtual Number. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email telstradev@team.telstra.com to request approval for this senderName. | | MODERATION_ERR | Please remove any swear words or offensive language. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | ACCOUNT_LIMIT_ERROR | Check the credit and limits on your account [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is POST. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessagesAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, SendMessagesRequest sendMessagesRequest, String telstraApiVersion, final ApiCallback<MessageSent> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessagesValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, sendMessagesRequest, telstraApiVersion, _callback);
        Type localVarReturnType = new TypeToken<MessageSent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessageById
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageByIdRequest  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | UPDATE_INVALID_MSG_SENT | The message can&#39;t be updated because it&#39;s already been sent. | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | RECIPIENT_OPTOUT | The recipient has opted out of receiving messages from this Virtual Number.  | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email (telstradev@team.telstra.com) to request approval for this senderName.| | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PUT. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageByIdCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageByIdRequest updateMessageByIdRequest, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessageByIdRequest;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (contentLanguage != null) {
            localVarHeaderParams.put("Content-Language", localVarApiClient.parameterToString(contentLanguage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (acceptCharset != null) {
            localVarHeaderParams.put("Accept-Charset", localVarApiClient.parameterToString(acceptCharset));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageByIdValidateBeforeCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageByIdRequest updateMessageByIdRequest, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateMessageById(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateMessageById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateMessageById(Async)");
        }

        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling updateMessageById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateMessageById(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessageById(Async)");
        }

        // verify the required parameter 'updateMessageByIdRequest' is set
        if (updateMessageByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMessageByIdRequest' when calling updateMessageById(Async)");
        }

        return updateMessageByIdCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageByIdRequest, telstraApiVersion, _callback);

    }

    /**
     * update a message
     * Need to update a message that&#39;s scheduled for sending? You can change any of the below parameters, as long as the message hasn&#39;t been sent yet. This request body will override the original POST/ messages call. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageByIdRequest  (required)
     * @param telstraApiVersion  (optional)
     * @return MessageUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | UPDATE_INVALID_MSG_SENT | The message can&#39;t be updated because it&#39;s already been sent. | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | RECIPIENT_OPTOUT | The recipient has opted out of receiving messages from this Virtual Number.  | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email (telstradev@team.telstra.com) to request approval for this senderName.| | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PUT. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public MessageUpdate updateMessageById(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageByIdRequest updateMessageByIdRequest, String telstraApiVersion) throws ApiException {
        ApiResponse<MessageUpdate> localVarResp = updateMessageByIdWithHttpInfo(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageByIdRequest, telstraApiVersion);
        return localVarResp.getData();
    }

    /**
     * update a message
     * Need to update a message that&#39;s scheduled for sending? You can change any of the below parameters, as long as the message hasn&#39;t been sent yet. This request body will override the original POST/ messages call. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageByIdRequest  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;MessageUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | UPDATE_INVALID_MSG_SENT | The message can&#39;t be updated because it&#39;s already been sent. | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | RECIPIENT_OPTOUT | The recipient has opted out of receiving messages from this Virtual Number.  | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email (telstradev@team.telstra.com) to request approval for this senderName.| | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PUT. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<MessageUpdate> updateMessageByIdWithHttpInfo(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageByIdRequest updateMessageByIdRequest, String telstraApiVersion) throws ApiException {
        okhttp3.Call localVarCall = updateMessageByIdValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageByIdRequest, telstraApiVersion, null);
        Type localVarReturnType = new TypeToken<MessageUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update a message (asynchronously)
     * Need to update a message that&#39;s scheduled for sending? You can change any of the below parameters, as long as the message hasn&#39;t been sent yet. This request body will override the original POST/ messages call. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageByIdRequest  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 response means the call has been successful.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | UPDATE_INVALID_MSG_SENT | The message can&#39;t be updated because it&#39;s already been sent. | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | RECIPIENT_OPTOUT | The recipient has opted out of receiving messages from this Virtual Number.  | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | SENDERNAME_ERR | Email (telstradev@team.telstra.com) to request approval for this senderName.| | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_LENGTH_ERR | Check the field is within character limits. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. | | MULTIMEDIA_TOO_LARGE | Reduce the multimedia file size and try again. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). | | FREE_TRIAL_INTERNATIONAL_ERR | Move to a paid plan to send a message to an international destination. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PUT. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | MULTIMEDIA_TOO_LARGE | Reduce multimedia size | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageByIdAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageByIdRequest updateMessageByIdRequest, String telstraApiVersion, final ApiCallback<MessageUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageByIdValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageByIdRequest, telstraApiVersion, _callback);
        Type localVarReturnType = new TypeToken<MessageUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessageTags
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageTagsRequest  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 No Content response means your tag(s) have been successfully updated.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PATCH. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageTagsCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageTagsRequest updateMessageTagsRequest, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessageTagsRequest;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (telstraApiVersion != null) {
            localVarHeaderParams.put("Telstra-api-version", localVarApiClient.parameterToString(telstraApiVersion));
        }

        if (contentLanguage != null) {
            localVarHeaderParams.put("Content-Language", localVarApiClient.parameterToString(contentLanguage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (acceptCharset != null) {
            localVarHeaderParams.put("Accept-Charset", localVarApiClient.parameterToString(acceptCharset));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageTagsValidateBeforeCall(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageTagsRequest updateMessageTagsRequest, String telstraApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'updateMessageTagsRequest' is set
        if (updateMessageTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMessageTagsRequest' when calling updateMessageTags(Async)");
        }

        return updateMessageTagsCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageTagsRequest, telstraApiVersion, _callback);

    }

    /**
     * update message tags
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageTagsRequest  (required)
     * @param telstraApiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 No Content response means your tag(s) have been successfully updated.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PATCH. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public void updateMessageTags(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageTagsRequest updateMessageTagsRequest, String telstraApiVersion) throws ApiException {
        updateMessageTagsWithHttpInfo(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageTagsRequest, telstraApiVersion);
    }

    /**
     * update message tags
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageTagsRequest  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 No Content response means your tag(s) have been successfully updated.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PATCH. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMessageTagsWithHttpInfo(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageTagsRequest updateMessageTagsRequest, String telstraApiVersion) throws ApiException {
        okhttp3.Call localVarCall = updateMessageTagsValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageTagsRequest, telstraApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update message tags (asynchronously)
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param updateMessageTagsRequest  (required)
     * @param telstraApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A 204 No Content response means your tag(s) have been successfully updated.  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  | code | suggested_action | | :--- | :--- | | ID_INVALID | Ensure the messageId corresponds to an outgoing message. | | ID_NOT_ASSIGNED | Ensure the messageId corresponds to a message that has been sent from this account. | | TAGS_ERR | Ensure you&#39;ve assigned no more than 10 tags, using up to 64 characters for each. | | FIELD_INVALID | Check the field and the field formatting are correct. | | FIELD_MISSING | Ensure you&#39;ve supplied all the required fields. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized  | code | suggested_action | | :--- | :--- | | TOKEN_INVALID | Check the access token. | | TOKEN_EXPIRED | Please refresh the token. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 402 </td><td> Payment Required  | code | suggested_action | | :--- | :--- | | ACCOUNT_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | RATE_PLAN_ERR | Contact [support](mailto:telstradev@team.telstra.com) for help with your account. | | ACCOUNT_NOT_LINKED | Check you&#39;ve registered for the Messaging API [here](https://dev.telstra.com). |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden  | code | suggested_action | | :--- | :--- | | RESOURCE_AUTH_ERR | Check the permissions associated with your account. | | INSUFFICIENT_SCOPE | The access token you generated does not have sufficient permissions for this request. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found  | code | suggested_action | | :--- | :--- | | RESOURCE_TEMP_ERR | Check the API status page to see if an active incident is causing a temporary issue with the resource. | | RESOURCE_NOT_FOUND | Check the endpoint is correct. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed  | code | suggested_action | | :--- | :--- | | METHOD_INVALID | Ensure the method is PATCH. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large  | code | suggested_action | | :--- | :--- | | PAYLOAD_TOO_LARGE | Reduce body payload size |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests  | code | suggested_action | | :--- | :--- | | TOO_MANY_REQUESTS | Reduce the number of concurrent calls. |  </td><td>  * Content-Language -  <br>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  | code | suggested_action | | :--- | :--- | | INTERNAL_TIMEOUT | Try the call again. If the issue persists, check the API [status page](https://dev.telstra.com/api/status) to see if there&#39;s an active incident. | | INTERNAL_SERVER_ERR | Check the API [status page](https://dev.telstra.com/api/status) to see if an active incident is causing the internal error. | | NETWORK_ERR | Please try again later. |  </td><td>  * Content-Language -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected  </td><td>  * Content-Language -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageTagsAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, UUID messageId, UpdateMessageTagsRequest updateMessageTagsRequest, String telstraApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageTagsValidateBeforeCall(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageTagsRequest, telstraApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
