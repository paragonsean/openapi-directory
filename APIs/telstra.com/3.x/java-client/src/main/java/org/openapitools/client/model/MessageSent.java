/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessageSentMessageId;
import org.openapitools.client.model.MessageSentTo;
import org.openapitools.client.model.MultimediaGet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessageSent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:10.449267-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageSent {
  public static final String SERIALIZED_NAME_DELIVERY_NOTIFICATION = "deliveryNotification";
  @SerializedName(SERIALIZED_NAME_DELIVERY_NOTIFICATION)
  private Boolean deliveryNotification = false;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_MESSAGE_CONTENT = "messageContent";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CONTENT)
  private String messageContent;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private MessageSentMessageId messageId;

  public static final String SERIALIZED_NAME_MULTIMEDIA = "multimedia";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA)
  private List<MultimediaGet> multimedia = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETRY_TIMEOUT = "retryTimeout";
  @SerializedName(SERIALIZED_NAME_RETRY_TIMEOUT)
  private Integer retryTimeout;

  public static final String SERIALIZED_NAME_SCHEDULE_SEND = "scheduleSend";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_SEND)
  private OffsetDateTime scheduleSend;

  /**
   * The status will be either queued, sent, delivered, expired or undeliverable.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("queued"),
    
    SENT("sent"),
    
    DELIVERED("delivered"),
    
    EXPIRED("expired"),
    
    UNDELIVERABLE("undeliverable");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_CALLBACK_URL = "statusCallbackUrl";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK_URL)
  private String statusCallbackUrl;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private MessageSentTo to;

  public MessageSent() {
  }

  public MessageSent deliveryNotification(Boolean deliveryNotification) {
    this.deliveryNotification = deliveryNotification;
    return this;
  }

  /**
   * If set to **true**, you will receive a notification to the statusCallbackUrl when your SMS is delivered (paid feature).
   * @return deliveryNotification
   */
  @javax.annotation.Nullable
  public Boolean getDeliveryNotification() {
    return deliveryNotification;
  }

  public void setDeliveryNotification(Boolean deliveryNotification) {
    this.deliveryNotification = deliveryNotification;
  }


  public MessageSent from(String from) {
    this.from = from;
    return this;
  }

  /**
   * This will be either \&quot;privateNumber\&quot;, one of your Virtual Numbers or your senderName.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public MessageSent messageContent(String messageContent) {
    this.messageContent = messageContent;
    return this;
  }

  /**
   * The content of the message.
   * @return messageContent
   */
  @javax.annotation.Nullable
  public String getMessageContent() {
    return messageContent;
  }

  public void setMessageContent(String messageContent) {
    this.messageContent = messageContent;
  }


  public MessageSent messageId(MessageSentMessageId messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nullable
  public MessageSentMessageId getMessageId() {
    return messageId;
  }

  public void setMessageId(MessageSentMessageId messageId) {
    this.messageId = messageId;
  }


  public MessageSent multimedia(List<MultimediaGet> multimedia) {
    this.multimedia = multimedia;
    return this;
  }

  public MessageSent addMultimediaItem(MultimediaGet multimediaItem) {
    if (this.multimedia == null) {
      this.multimedia = new ArrayList<>();
    }
    this.multimedia.add(multimediaItem);
    return this;
  }

  /**
   * The multimedia content of the message (MMS only). It will include: 
   * @return multimedia
   */
  @javax.annotation.Nullable
  public List<MultimediaGet> getMultimedia() {
    return multimedia;
  }

  public void setMultimedia(List<MultimediaGet> multimedia) {
    this.multimedia = multimedia;
  }


  public MessageSent retryTimeout(Integer retryTimeout) {
    this.retryTimeout = retryTimeout;
    return this;
  }

  /**
   * How many minutes you asked the server to keep trying to send the message.
   * minimum: 1
   * maximum: 1440
   * @return retryTimeout
   */
  @javax.annotation.Nullable
  public Integer getRetryTimeout() {
    return retryTimeout;
  }

  public void setRetryTimeout(Integer retryTimeout) {
    this.retryTimeout = retryTimeout;
  }


  public MessageSent scheduleSend(OffsetDateTime scheduleSend) {
    this.scheduleSend = scheduleSend;
    return this;
  }

  /**
   * The time (in Central Standard Time) the message is scheduled to send.
   * @return scheduleSend
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduleSend() {
    return scheduleSend;
  }

  public void setScheduleSend(OffsetDateTime scheduleSend) {
    this.scheduleSend = scheduleSend;
  }


  public MessageSent status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status will be either queued, sent, delivered, expired or undeliverable.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public MessageSent statusCallbackUrl(String statusCallbackUrl) {
    this.statusCallbackUrl = statusCallbackUrl;
    return this;
  }

  /**
   * The URL the API will call when the status of the message changes.
   * @return statusCallbackUrl
   */
  @javax.annotation.Nullable
  public String getStatusCallbackUrl() {
    return statusCallbackUrl;
  }

  public void setStatusCallbackUrl(String statusCallbackUrl) {
    this.statusCallbackUrl = statusCallbackUrl;
  }


  public MessageSent tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public MessageSent addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Any customisable tags assigned to the message.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public MessageSent to(MessageSentTo to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public MessageSentTo getTo() {
    return to;
  }

  public void setTo(MessageSentTo to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageSent messageSent = (MessageSent) o;
    return Objects.equals(this.deliveryNotification, messageSent.deliveryNotification) &&
        Objects.equals(this.from, messageSent.from) &&
        Objects.equals(this.messageContent, messageSent.messageContent) &&
        Objects.equals(this.messageId, messageSent.messageId) &&
        Objects.equals(this.multimedia, messageSent.multimedia) &&
        Objects.equals(this.retryTimeout, messageSent.retryTimeout) &&
        Objects.equals(this.scheduleSend, messageSent.scheduleSend) &&
        Objects.equals(this.status, messageSent.status) &&
        Objects.equals(this.statusCallbackUrl, messageSent.statusCallbackUrl) &&
        Objects.equals(this.tags, messageSent.tags) &&
        Objects.equals(this.to, messageSent.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryNotification, from, messageContent, messageId, multimedia, retryTimeout, scheduleSend, status, statusCallbackUrl, tags, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageSent {\n");
    sb.append("    deliveryNotification: ").append(toIndentedString(deliveryNotification)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    messageContent: ").append(toIndentedString(messageContent)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    multimedia: ").append(toIndentedString(multimedia)).append("\n");
    sb.append("    retryTimeout: ").append(toIndentedString(retryTimeout)).append("\n");
    sb.append("    scheduleSend: ").append(toIndentedString(scheduleSend)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusCallbackUrl: ").append(toIndentedString(statusCallbackUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryNotification");
    openapiFields.add("from");
    openapiFields.add("messageContent");
    openapiFields.add("messageId");
    openapiFields.add("multimedia");
    openapiFields.add("retryTimeout");
    openapiFields.add("scheduleSend");
    openapiFields.add("status");
    openapiFields.add("statusCallbackUrl");
    openapiFields.add("tags");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageSent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageSent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageSent is not found in the empty JSON string", MessageSent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageSent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageSent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("messageContent") != null && !jsonObj.get("messageContent").isJsonNull()) && !jsonObj.get("messageContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageContent").toString()));
      }
      // validate the optional field `messageId`
      if (jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) {
        MessageSentMessageId.validateJsonElement(jsonObj.get("messageId"));
      }
      if (jsonObj.get("multimedia") != null && !jsonObj.get("multimedia").isJsonNull()) {
        JsonArray jsonArraymultimedia = jsonObj.getAsJsonArray("multimedia");
        if (jsonArraymultimedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multimedia").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multimedia` to be an array in the JSON string but got `%s`", jsonObj.get("multimedia").toString()));
          }

          // validate the optional field `multimedia` (array)
          for (int i = 0; i < jsonArraymultimedia.size(); i++) {
            MultimediaGet.validateJsonElement(jsonArraymultimedia.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusCallbackUrl") != null && !jsonObj.get("statusCallbackUrl").isJsonNull()) && !jsonObj.get("statusCallbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCallbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCallbackUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        MessageSentTo.validateJsonElement(jsonObj.get("to"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageSent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageSent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageSent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageSent.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageSent>() {
           @Override
           public void write(JsonWriter out, MessageSent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageSent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageSent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageSent
   * @throws IOException if the JSON string is invalid with respect to MessageSent
   */
  public static MessageSent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageSent.class);
  }

  /**
   * Convert an instance of MessageSent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

