/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Multimedia;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateMessageByIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:10.449267-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateMessageByIdRequest {
  public static final String SERIALIZED_NAME_DELIVERY_NOTIFICATION = "deliveryNotification";
  @SerializedName(SERIALIZED_NAME_DELIVERY_NOTIFICATION)
  private Boolean deliveryNotification = false;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_MESSAGE_CONTENT = "messageContent";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CONTENT)
  private String messageContent;

  public static final String SERIALIZED_NAME_MULTIMEDIA = "multimedia";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA)
  private List<Multimedia> multimedia = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETRY_TIMEOUT = "retryTimeout";
  @SerializedName(SERIALIZED_NAME_RETRY_TIMEOUT)
  private Integer retryTimeout = 10;

  public static final String SERIALIZED_NAME_SCHEDULE_SEND = "scheduleSend";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_SEND)
  private OffsetDateTime scheduleSend;

  public static final String SERIALIZED_NAME_STATUS_CALLBACK_URL = "statusCallbackUrl";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK_URL)
  private String statusCallbackUrl;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public UpdateMessageByIdRequest() {
  }

  public UpdateMessageByIdRequest deliveryNotification(Boolean deliveryNotification) {
    this.deliveryNotification = deliveryNotification;
    return this;
  }

  /**
   * To receive a notification when your SMS has been delivered, set this parameter to **true** and make sure you provide a **statusCallbackUrl** (paid feature). 
   * @return deliveryNotification
   */
  @javax.annotation.Nullable
  public Boolean getDeliveryNotification() {
    return deliveryNotification;
  }

  public void setDeliveryNotification(Boolean deliveryNotification) {
    this.deliveryNotification = deliveryNotification;
  }


  public UpdateMessageByIdRequest from(String from) {
    this.from = from;
    return this;
  }

  /**
   * When the recipient receives your message, you can choose whether they&#39;ll see a privateNumber, virtualNumber or senderName (paid plans only) in the **from** field.  * privateNumber: Use this string to have the message appear on the recipient&#39;s device as from \&quot;anonymous\&quot;, \&quot;private\&quot; or similar. * 04xxxxxxxx: Use one of the Virtual Numbers associated with your account. You&#39;ll also be able to receive SMS replies to this number. * senderName: Choose a unique alphanumeric string of up to 11 characters (paid feature). 
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public UpdateMessageByIdRequest messageContent(String messageContent) {
    this.messageContent = messageContent;
    return this;
  }

  /**
   * Use this field to send an SMS. Your text message goes here.   Note: either messageContent or multimedia are required, or you can use both field if you want to send multimedia with text. 
   * @return messageContent
   */
  @javax.annotation.Nullable
  public String getMessageContent() {
    return messageContent;
  }

  public void setMessageContent(String messageContent) {
    this.messageContent = messageContent;
  }


  public UpdateMessageByIdRequest multimedia(List<Multimedia> multimedia) {
    this.multimedia = multimedia;
    return this;
  }

  public UpdateMessageByIdRequest addMultimediaItem(Multimedia multimediaItem) {
    if (this.multimedia == null) {
      this.multimedia = new ArrayList<>();
    }
    this.multimedia.add(multimediaItem);
    return this;
  }

  /**
   * Use this field to send an MMS. Add your image, video or audio content here.   Note: either messageContent or multimedia are required, or you can use both fields if you want to send multimedia with text.   Include a JSON payload with:  type: the type of multimedia content file you&#39;re sending (image, audio or video) followed by the file type. Use the format &#39;multimedia type/file type&#39;, e.g. \&quot;image/PNG\&quot; or \&quot;audio/MP3\&quot;. Supported file types: JPEG, BMP, GIF87a, GIF89a, PNG, MP3, WAV, MPEG, MPG, MP4, 3GP and US-ASCII.  fileName: the name of your multimedia file.   payload: the base64 encoded content. You can use [this online tool](https://elmah.io/tools/base64-image-encoder/) to encode an image, or [Base64 Guru](https://base64.guru/) to encode a video or audio file. 
   * @return multimedia
   */
  @javax.annotation.Nullable
  public List<Multimedia> getMultimedia() {
    return multimedia;
  }

  public void setMultimedia(List<Multimedia> multimedia) {
    this.multimedia = multimedia;
  }


  public UpdateMessageByIdRequest retryTimeout(Integer retryTimeout) {
    this.retryTimeout = retryTimeout;
    return this;
  }

  /**
   * If the message is queued or unable to reach the recipient&#39;s device, tell us how many minutes the network should keep trying. Use an integer between 1 and 1440. If you don&#39;t set a value, we&#39;ll try for 10 minutes. 
   * minimum: 1
   * maximum: 1440
   * @return retryTimeout
   */
  @javax.annotation.Nullable
  public Integer getRetryTimeout() {
    return retryTimeout;
  }

  public void setRetryTimeout(Integer retryTimeout) {
    this.retryTimeout = retryTimeout;
  }


  public UpdateMessageByIdRequest scheduleSend(OffsetDateTime scheduleSend) {
    this.scheduleSend = scheduleSend;
    return this;
  }

  /**
   * Don&#39;t want to send the message right away? Tell us what time you want to add it to the queue for sending instead.  Set the time in London Greenwich Mean Time (adjusting for any time difference) and use ISO format, e.g. \&quot;2019-08-24T15:39:00Z\&quot;.  You can schedule a message up to 10 days into the future. If you specify a timestamp outside of this limit, the API will return a FIELD_INVALID error. 
   * @return scheduleSend
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduleSend() {
    return scheduleSend;
  }

  public void setScheduleSend(OffsetDateTime scheduleSend) {
    this.scheduleSend = scheduleSend;
  }


  public UpdateMessageByIdRequest statusCallbackUrl(String statusCallbackUrl) {
    this.statusCallbackUrl = statusCallbackUrl;
    return this;
  }

  /**
   * Tell us the URL you want the API to call when the status of your SMS updates.   To receive a status update, this field must be provided and deliveryNotification must be set to **true**.   The status will be either:   * **queued** – the message is in the queue for sending (default). * **sent** – your message has been sent from the server. * **expired** – we weren&#39;t able to send the message within the **retryTimeout** timeframe. * **delivered** – the message has successfully reached the recipient&#39;s device. Note that we will only be able to return this status if you set **deliveryNotification** to **true** (paid feature). * **undeliverable** – the delivery of your message failed (paid feature).  Sample callback response:  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;0476543210\&quot;,    \&quot;from\&quot;:\&quot;0401234567\&quot;,    \&quot;timestamp\&quot;:\&quot;2022-11-10T05:06:42.823Z\&quot;,    \&quot;messageId\&quot;:\&quot;1520b774-46b0-4415-a05f-7bcb1c032c59\&quot;,    \&quot;status\&quot;:\&quot;delivered\&quot;  }&lt;/code&gt;&lt;/pre&gt; 
   * @return statusCallbackUrl
   */
  @javax.annotation.Nullable
  public String getStatusCallbackUrl() {
    return statusCallbackUrl;
  }

  public void setStatusCallbackUrl(String statusCallbackUrl) {
    this.statusCallbackUrl = statusCallbackUrl;
  }


  public UpdateMessageByIdRequest tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateMessageByIdRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Create your own tags and use them to fetch and sort your messages through our other endpoints. You can assign up to 10 tags per message. 
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public UpdateMessageByIdRequest to(String to) {
    this.to = to;
    return this;
  }

  /**
   * This is the mobile number you want to send your message to. Write Australian numbers in national format (e.g. 0412345678) and international numbers (paid plans only) in E.164 format (e.g. +441234567890).  Use a string for a single recipient, and an array of strings for multiple recipients, e.g. \&quot;to\&quot;: [\&quot;0412345678\&quot;, \&quot;+441234567890\&quot;]. If you&#39;re using the Free Trial, you can include up to 5 recipient numbers in the array. If you&#39;re using a paid plan, you can bulk send up to 500 messages at once. 
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMessageByIdRequest updateMessageByIdRequest = (UpdateMessageByIdRequest) o;
    return Objects.equals(this.deliveryNotification, updateMessageByIdRequest.deliveryNotification) &&
        Objects.equals(this.from, updateMessageByIdRequest.from) &&
        Objects.equals(this.messageContent, updateMessageByIdRequest.messageContent) &&
        Objects.equals(this.multimedia, updateMessageByIdRequest.multimedia) &&
        Objects.equals(this.retryTimeout, updateMessageByIdRequest.retryTimeout) &&
        Objects.equals(this.scheduleSend, updateMessageByIdRequest.scheduleSend) &&
        Objects.equals(this.statusCallbackUrl, updateMessageByIdRequest.statusCallbackUrl) &&
        Objects.equals(this.tags, updateMessageByIdRequest.tags) &&
        Objects.equals(this.to, updateMessageByIdRequest.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryNotification, from, messageContent, multimedia, retryTimeout, scheduleSend, statusCallbackUrl, tags, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMessageByIdRequest {\n");
    sb.append("    deliveryNotification: ").append(toIndentedString(deliveryNotification)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    messageContent: ").append(toIndentedString(messageContent)).append("\n");
    sb.append("    multimedia: ").append(toIndentedString(multimedia)).append("\n");
    sb.append("    retryTimeout: ").append(toIndentedString(retryTimeout)).append("\n");
    sb.append("    scheduleSend: ").append(toIndentedString(scheduleSend)).append("\n");
    sb.append("    statusCallbackUrl: ").append(toIndentedString(statusCallbackUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryNotification");
    openapiFields.add("from");
    openapiFields.add("messageContent");
    openapiFields.add("multimedia");
    openapiFields.add("retryTimeout");
    openapiFields.add("scheduleSend");
    openapiFields.add("statusCallbackUrl");
    openapiFields.add("tags");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateMessageByIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateMessageByIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateMessageByIdRequest is not found in the empty JSON string", UpdateMessageByIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateMessageByIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateMessageByIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateMessageByIdRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("messageContent") != null && !jsonObj.get("messageContent").isJsonNull()) && !jsonObj.get("messageContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageContent").toString()));
      }
      if (jsonObj.get("multimedia") != null && !jsonObj.get("multimedia").isJsonNull()) {
        JsonArray jsonArraymultimedia = jsonObj.getAsJsonArray("multimedia");
        if (jsonArraymultimedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multimedia").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multimedia` to be an array in the JSON string but got `%s`", jsonObj.get("multimedia").toString()));
          }

          // validate the optional field `multimedia` (array)
          for (int i = 0; i < jsonArraymultimedia.size(); i++) {
            Multimedia.validateJsonElement(jsonArraymultimedia.get(i));
          };
        }
      }
      if ((jsonObj.get("statusCallbackUrl") != null && !jsonObj.get("statusCallbackUrl").isJsonNull()) && !jsonObj.get("statusCallbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCallbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCallbackUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateMessageByIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateMessageByIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateMessageByIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateMessageByIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateMessageByIdRequest>() {
           @Override
           public void write(JsonWriter out, UpdateMessageByIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateMessageByIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateMessageByIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateMessageByIdRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateMessageByIdRequest
   */
  public static UpdateMessageByIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateMessageByIdRequest.class);
  }

  /**
   * Convert an instance of UpdateMessageByIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

