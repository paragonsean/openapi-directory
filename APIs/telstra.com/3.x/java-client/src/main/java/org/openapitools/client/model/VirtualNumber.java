/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualNumber
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:10.449267-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNumber {
  public static final String SERIALIZED_NAME_LAST_USE = "lastUse";
  @SerializedName(SERIALIZED_NAME_LAST_USE)
  private OffsetDateTime lastUse;

  public static final String SERIALIZED_NAME_REPLY_CALLBACK_URL = "replyCallbackUrl";
  @SerializedName(SERIALIZED_NAME_REPLY_CALLBACK_URL)
  private String replyCallbackUrl;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NUMBER = "virtualNumber";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NUMBER)
  private String virtualNumber;

  public VirtualNumber() {
  }

  public VirtualNumber lastUse(OffsetDateTime lastUse) {
    this.lastUse = lastUse;
    return this;
  }

  /**
   * The last time the Virtual Number was used to send a message.
   * @return lastUse
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUse() {
    return lastUse;
  }

  public void setLastUse(OffsetDateTime lastUse) {
    this.lastUse = lastUse;
  }


  public VirtualNumber replyCallbackUrl(String replyCallbackUrl) {
    this.replyCallbackUrl = replyCallbackUrl;
    return this;
  }

  /**
   * The URL that replies to the Virtual Number will be posted to.
   * @return replyCallbackUrl
   */
  @javax.annotation.Nullable
  public String getReplyCallbackUrl() {
    return replyCallbackUrl;
  }

  public void setReplyCallbackUrl(String replyCallbackUrl) {
    this.replyCallbackUrl = replyCallbackUrl;
  }


  public VirtualNumber tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public VirtualNumber addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Any customisable tags assigned to the Virtual Number. 
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public VirtualNumber virtualNumber(String virtualNumber) {
    this.virtualNumber = virtualNumber;
    return this;
  }

  /**
   * The Virtual Number assigned to your account. 
   * @return virtualNumber
   */
  @javax.annotation.Nullable
  public String getVirtualNumber() {
    return virtualNumber;
  }

  public void setVirtualNumber(String virtualNumber) {
    this.virtualNumber = virtualNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNumber virtualNumber = (VirtualNumber) o;
    return Objects.equals(this.lastUse, virtualNumber.lastUse) &&
        Objects.equals(this.replyCallbackUrl, virtualNumber.replyCallbackUrl) &&
        Objects.equals(this.tags, virtualNumber.tags) &&
        Objects.equals(this.virtualNumber, virtualNumber.virtualNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUse, replyCallbackUrl, tags, virtualNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNumber {\n");
    sb.append("    lastUse: ").append(toIndentedString(lastUse)).append("\n");
    sb.append("    replyCallbackUrl: ").append(toIndentedString(replyCallbackUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    virtualNumber: ").append(toIndentedString(virtualNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastUse");
    openapiFields.add("replyCallbackUrl");
    openapiFields.add("tags");
    openapiFields.add("virtualNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNumber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNumber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNumber is not found in the empty JSON string", VirtualNumber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNumber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNumber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("replyCallbackUrl") != null && !jsonObj.get("replyCallbackUrl").isJsonNull()) && !jsonObj.get("replyCallbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyCallbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyCallbackUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("virtualNumber") != null && !jsonObj.get("virtualNumber").isJsonNull()) && !jsonObj.get("virtualNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNumber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNumber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNumber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNumber.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNumber>() {
           @Override
           public void write(JsonWriter out, VirtualNumber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNumber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNumber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNumber
   * @throws IOException if the JSON string is invalid with respect to VirtualNumber
   */
  public static VirtualNumber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNumber.class);
  }

  /**
   * Convert an instance of VirtualNumber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

