/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignNumberRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.GetNumbers200Response;
import org.openapitools.client.model.GetRecipientOptouts200Response;
import org.openapitools.client.model.UpdateNumberRequest;
import org.openapitools.client.model.VirtualNumber;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualNumbersApi
 */
@Disabled
public class VirtualNumbersApiTest {

    private final VirtualNumbersApi api = new VirtualNumbersApi();

    /**
     * assign a virtual number
     *
     * When a recipient receives your message, you can choose whether they&#39;ll see a privateNumber, Virtual Number or senderName (paid plans only) in the **from** field. If you want to use a Virtual Number, use this endpoint to assign one. Free Trial users can assign one Virtual Number, and those on a paid plan can assign up to 100.   Virtual Numbers that have not sent a message in 30 days (Free Trial) or sent/received a message in 18 months (paid plans) will be automatically unassigned from your account. You can check the **lastUse** date of your Virtual Number at any time using GET /virtual-numbers/{virtual-number}.  Note that Virtual Numbers used in v2 of the Messaging API cannot be used to send messages in v3. Please assign a new Virtual Number instead. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignNumberTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        AssignNumberRequest assignNumberRequest = null;
        String telstraApiVersion = null;
        VirtualNumber response = api.assignNumber(contentLanguage, authorization, accept, acceptCharset, contentType, assignNumberRequest, telstraApiVersion);
        // TODO: test validations
    }

    /**
     * delete a virtual number
     *
     * Use **virtual-number** to remove a Virtual Number that&#39;s been assigned to your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNumberTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        String virtualNumber = null;
        String telstraApiVersion = null;
        api.deleteNumber(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion);
        // TODO: test validations
    }

    /**
     * fetch all virtual numbers
     *
     * Use this endpoint to fetch all Virtual Numbers currently assigned to your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNumbersTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        String telstraApiVersion = null;
        Integer limit = null;
        Integer offset = null;
        String filter = null;
        GetNumbers200Response response = api.getNumbers(contentLanguage, authorization, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, filter);
        // TODO: test validations
    }

    /**
     * Get recipient optouts list
     *
     * Use this endpoint to fetch any mobile number(s) that have opted out of receiving messages from a Virtual Number assigned to your account.  Recipients can opt out at any time by sending a message with industry standard keywords such as STOP, STOPALL, UNSUBSCRIBE, QUIT, END and CANCEL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipientOptoutsTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        String virtualNumber = null;
        String telstraApiVersion = null;
        Integer limit = null;
        Integer offset = null;
        GetRecipientOptouts200Response response = api.getRecipientOptouts(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, limit, offset);
        // TODO: test validations
    }

    /**
     * fetch a virtual number
     *
     * Fetch the tags, replyCallbackUrl and lastUse date for a Virtual Number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualNumberTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        String virtualNumber = null;
        String telstraApiVersion = null;
        VirtualNumber response = api.getVirtualNumber(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion);
        // TODO: test validations
    }

    /**
     * update a virtual number
     *
     * Use **virtual-number** to update the tags and/or replyCallbackUrl of a Virtual Number.  This request body will override the original POST/ virtual-numbers call. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNumberTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        String virtualNumber = null;
        UpdateNumberRequest updateNumberRequest = null;
        String telstraApiVersion = null;
        VirtualNumber response = api.updateNumber(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, updateNumberRequest, telstraApiVersion);
        // TODO: test validations
    }

}
