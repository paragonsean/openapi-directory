/*
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.GetReport200Response;
import org.openapitools.client.model.GetReports200Response;
import org.openapitools.client.model.MessagesReport201Response;
import org.openapitools.client.model.MessagesReportRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * fetch a specific report
     *
     * Fetch a download link for a report generated with POST /reports/{reportId} using the **reportId** returned in the response. Once ready, your report will be available for download for one week. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        UUID reportId = null;
        String telstraApiVersion = null;
        GetReport200Response response = api.getReport(contentLanguage, authorization, accept, acceptCharset, contentType, reportId, telstraApiVersion);
        // TODO: test validations
    }

    /**
     * fetch all reports
     *
     * Fetch details of all reports recently generated for your account. Use it to check the status of a report, plus fetch the report ID, status, report type and expiry date. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportsTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        String telstraApiVersion = null;
        GetReports200Response response = api.getReports(contentLanguage, authorization, accept, acceptCharset, contentType, telstraApiVersion);
        // TODO: test validations
    }

    /**
     * submit a request for a messages report
     *
     * Request a CSV report of messages (both incoming and outgoing) that have been sent to/from your account within the last three months. You can request details for a specific timeframe, and filter your messages by tags, recipient number or Virtual Number.  A 201 Created means your report has been queued for generation. Make a note of the reportId returned in the response. You&#39;ll need this to check the status of your report and fetch your download link with GET reports/{reportId}. If you supplied a reportCallbackUrl in the request we&#39;ll also notify it when your report is ready for download.  Once your report is generated, it will be available for download for one week. The expiry date is returned in the response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesReportTest() throws ApiException {
        String contentLanguage = null;
        String authorization = null;
        String accept = null;
        String acceptCharset = null;
        String contentType = null;
        MessagesReportRequest messagesReportRequest = null;
        String telstraApiVersion = null;
        MessagesReport201Response response = api.messagesReport(contentLanguage, authorization, accept, acceptCharset, contentType, messagesReportRequest, telstraApiVersion);
        // TODO: test validations
    }

}
