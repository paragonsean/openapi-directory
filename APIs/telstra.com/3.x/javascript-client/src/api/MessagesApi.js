/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import GetMessages200Response from '../model/GetMessages200Response';
import MessageGet from '../model/MessageGet';
import MessageSent from '../model/MessageSent';
import MessageUpdate from '../model/MessageUpdate';
import SendMessagesRequest from '../model/SendMessagesRequest';
import UpdateMessageByIdRequest from '../model/UpdateMessageByIdRequest';
import UpdateMessageTagsRequest from '../model/UpdateMessageTagsRequest';

/**
* Messages service.
* @module api/MessagesApi
* @version 3.x
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMessageById operation.
     * @callback module:api/MessagesApi~deleteMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a message
     * Use this endpoint to delete a message that's been scheduled for sending, but hasn't yet sent. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints. 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/MessagesApi~deleteMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessageById(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling deleteMessageById");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteMessageById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteMessageById");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling deleteMessageById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteMessageById");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteMessageById");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/messages/{messageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageById operation.
     * @callback module:api/MessagesApi~getMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch a specific message
     * Use the **messageId** to fetch a message that's been sent from/to your account within the last 30 days. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later. 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/MessagesApi~getMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageGet}
     */
    getMessageById(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getMessageById");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMessageById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getMessageById");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getMessageById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getMessageById");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getMessageById");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageGet;
      return this.apiClient.callApi(
        '/messages/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/MessagesApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMessages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch all sent/received messages
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {Number} [limit = 10)] Tell us how many results you want us to return, up to a maximum of 50. 
     * @param {Number} [offset = 0)] Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on. 
     * @param {module:model/String} [direction] Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account. 
     * @param {module:model/String} [status] Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient's device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn't be sent within the **retryTimeout** timeframe. 
     * @param {String} [filter] Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to. 
     * @param {module:api/MessagesApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMessages200Response}
     */
    getMessages(contentLanguage, authorization, accept, acceptCharset, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getMessages");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMessages");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getMessages");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getMessages");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'direction': opts['direction'],
        'status': opts['status'],
        'filter': opts['filter']
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMessages200Response;
      return this.apiClient.callApi(
        '/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessages operation.
     * @callback module:api/MessagesApi~sendMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageSent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send messages
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {module:model/SendMessagesRequest} sendMessagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/MessagesApi~sendMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageSent}
     */
    sendMessages(contentLanguage, authorization, accept, acceptCharset, contentType, sendMessagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendMessagesRequest;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling sendMessages");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling sendMessages");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling sendMessages");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling sendMessages");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sendMessages");
      }
      // verify the required parameter 'sendMessagesRequest' is set
      if (sendMessagesRequest === undefined || sendMessagesRequest === null) {
        throw new Error("Missing the required parameter 'sendMessagesRequest' when calling sendMessages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageSent;
      return this.apiClient.callApi(
        '/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessageById operation.
     * @callback module:api/MessagesApi~updateMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a message
     * Need to update a message that's scheduled for sending? You can change any of the below parameters, as long as the message hasn't been sent yet. This request body will override the original POST/ messages call. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints. 
     * @param {module:model/UpdateMessageByIdRequest} updateMessageByIdRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/MessagesApi~updateMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageUpdate}
     */
    updateMessageById(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageByIdRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMessageByIdRequest;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling updateMessageById");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateMessageById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateMessageById");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling updateMessageById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateMessageById");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling updateMessageById");
      }
      // verify the required parameter 'updateMessageByIdRequest' is set
      if (updateMessageByIdRequest === undefined || updateMessageByIdRequest === null) {
        throw new Error("Missing the required parameter 'updateMessageByIdRequest' when calling updateMessageById");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageUpdate;
      return this.apiClient.callApi(
        '/messages/{messageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessageTags operation.
     * @callback module:api/MessagesApi~updateMessageTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update message tags
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints. 
     * @param {module:model/UpdateMessageTagsRequest} updateMessageTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/MessagesApi~updateMessageTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMessageTags(contentLanguage, authorization, accept, acceptCharset, contentType, messageId, updateMessageTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMessageTagsRequest;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling updateMessageTags");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateMessageTags");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateMessageTags");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling updateMessageTags");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateMessageTags");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling updateMessageTags");
      }
      // verify the required parameter 'updateMessageTagsRequest' is set
      if (updateMessageTagsRequest === undefined || updateMessageTagsRequest === null) {
        throw new Error("Missing the required parameter 'updateMessageTagsRequest' when calling updateMessageTags");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/messages/{messageId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
