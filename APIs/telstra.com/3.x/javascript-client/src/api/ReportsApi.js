/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import GetReport200Response from '../model/GetReport200Response';
import GetReports200Response from '../model/GetReports200Response';
import MessagesReport201Response from '../model/MessagesReport201Response';
import MessagesReportRequest from '../model/MessagesReportRequest';

/**
* Reports service.
* @module api/ReportsApi
* @version 3.x
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getReport operation.
     * @callback module:api/ReportsApi~getReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch a specific report
     * Fetch a download link for a report generated with POST /reports/{reportId} using the **reportId** returned in the response. Once ready, your report will be available for download for one week. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} reportId Use the reportId returned in the POST /reports/{reportType} response. 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/ReportsApi~getReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReport200Response}
     */
    getReport(contentLanguage, authorization, accept, acceptCharset, contentType, reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getReport");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReport");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getReport");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getReport");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getReport");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getReport");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReport200Response;
      return this.apiClient.callApi(
        '/reports/{reportId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReports operation.
     * @callback module:api/ReportsApi~getReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReports200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch all reports
     * Fetch details of all reports recently generated for your account. Use it to check the status of a report, plus fetch the report ID, status, report type and expiry date. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/ReportsApi~getReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReports200Response}
     */
    getReports(contentLanguage, authorization, accept, acceptCharset, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getReports");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReports");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getReports");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getReports");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getReports");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReports200Response;
      return this.apiClient.callApi(
        '/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesReport operation.
     * @callback module:api/ReportsApi~messagesReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesReport201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a request for a messages report
     * Request a CSV report of messages (both incoming and outgoing) that have been sent to/from your account within the last three months. You can request details for a specific timeframe, and filter your messages by tags, recipient number or Virtual Number.  A 201 Created means your report has been queued for generation. Make a note of the reportId returned in the response. You'll need this to check the status of your report and fetch your download link with GET reports/{reportId}. If you supplied a reportCallbackUrl in the request we'll also notify it when your report is ready for download.  Once your report is generated, it will be available for download for one week. The expiry date is returned in the response. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {module:model/MessagesReportRequest} messagesReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/ReportsApi~messagesReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesReport201Response}
     */
    messagesReport(contentLanguage, authorization, accept, acceptCharset, contentType, messagesReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = messagesReportRequest;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling messagesReport");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling messagesReport");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling messagesReport");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling messagesReport");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling messagesReport");
      }
      // verify the required parameter 'messagesReportRequest' is set
      if (messagesReportRequest === undefined || messagesReportRequest === null) {
        throw new Error("Missing the required parameter 'messagesReportRequest' when calling messagesReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessagesReport201Response;
      return this.apiClient.callApi(
        '/reports/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
