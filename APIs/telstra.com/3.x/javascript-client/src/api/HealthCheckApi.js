/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import HealthCheck200Response from '../model/HealthCheck200Response';

/**
* HealthCheck service.
* @module api/HealthCheckApi
* @version 3.x
*/
export default class HealthCheckApi {

    /**
    * Constructs a new HealthCheckApi. 
    * @alias module:api/HealthCheckApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the healthCheck operation.
     * @callback module:api/HealthCheckApi~healthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthCheck200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * health check
     * Use this endpoint to check the operational status of the messaging service. A 200 OK response means the service is up. If you receive a 504 response, the service is temporarily down. Check the [API Live Status page] (https://dev.telstra.com/api/status) to see if there's an active incident.
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/HealthCheckApi~healthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthCheck200Response}
     */
    healthCheck(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling healthCheck");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthCheck200Response;
      return this.apiClient.callApi(
        '/health-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
