/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignNumberRequest from '../model/AssignNumberRequest';
import Errors from '../model/Errors';
import GetNumbers200Response from '../model/GetNumbers200Response';
import GetRecipientOptouts200Response from '../model/GetRecipientOptouts200Response';
import UpdateNumberRequest from '../model/UpdateNumberRequest';
import VirtualNumber from '../model/VirtualNumber';

/**
* VirtualNumbers service.
* @module api/VirtualNumbersApi
* @version 3.x
*/
export default class VirtualNumbersApi {

    /**
    * Constructs a new VirtualNumbersApi. 
    * @alias module:api/VirtualNumbersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignNumber operation.
     * @callback module:api/VirtualNumbersApi~assignNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assign a virtual number
     * When a recipient receives your message, you can choose whether they'll see a privateNumber, Virtual Number or senderName (paid plans only) in the **from** field. If you want to use a Virtual Number, use this endpoint to assign one. Free Trial users can assign one Virtual Number, and those on a paid plan can assign up to 100.   Virtual Numbers that have not sent a message in 30 days (Free Trial) or sent/received a message in 18 months (paid plans) will be automatically unassigned from your account. You can check the **lastUse** date of your Virtual Number at any time using GET /virtual-numbers/{virtual-number}.  Note that Virtual Numbers used in v2 of the Messaging API cannot be used to send messages in v3. Please assign a new Virtual Number instead. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {module:model/AssignNumberRequest} assignNumberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/VirtualNumbersApi~assignNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualNumber}
     */
    assignNumber(contentLanguage, authorization, accept, acceptCharset, contentType, assignNumberRequest, opts, callback) {
      opts = opts || {};
      let postBody = assignNumberRequest;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling assignNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling assignNumber");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling assignNumber");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling assignNumber");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling assignNumber");
      }
      // verify the required parameter 'assignNumberRequest' is set
      if (assignNumberRequest === undefined || assignNumberRequest === null) {
        throw new Error("Missing the required parameter 'assignNumberRequest' when calling assignNumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualNumber;
      return this.apiClient.callApi(
        '/virtual-numbers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNumber operation.
     * @callback module:api/VirtualNumbersApi~deleteNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a virtual number
     * Use **virtual-number** to remove a Virtual Number that's been assigned to your account. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678). 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/VirtualNumbersApi~deleteNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNumber(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling deleteNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteNumber");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteNumber");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling deleteNumber");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteNumber");
      }
      // verify the required parameter 'virtualNumber' is set
      if (virtualNumber === undefined || virtualNumber === null) {
        throw new Error("Missing the required parameter 'virtualNumber' when calling deleteNumber");
      }

      let pathParams = {
        'virtual-number': virtualNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtual-numbers/{virtual-number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNumbers operation.
     * @callback module:api/VirtualNumbersApi~getNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNumbers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch all virtual numbers
     * Use this endpoint to fetch all Virtual Numbers currently assigned to your account. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {Number} [limit = 10)] Tell us how many results you want us to return, up to a maximum of 50. 
     * @param {Number} [offset = 0)] Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on. 
     * @param {String} [filter] Filter your Virtual Numbers by tag or by number.
     * @param {module:api/VirtualNumbersApi~getNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNumbers200Response}
     */
    getNumbers(contentLanguage, authorization, accept, acceptCharset, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getNumbers");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNumbers");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getNumbers");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getNumbers");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getNumbers");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter']
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNumbers200Response;
      return this.apiClient.callApi(
        '/virtual-numbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipientOptouts operation.
     * @callback module:api/VirtualNumbersApi~getRecipientOptoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecipientOptouts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recipient optouts list
     * Use this endpoint to fetch any mobile number(s) that have opted out of receiving messages from a Virtual Number assigned to your account.  Recipients can opt out at any time by sending a message with industry standard keywords such as STOP, STOPALL, UNSUBSCRIBE, QUIT, END and CANCEL. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678). 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {Number} [limit = 10)] Tell us how many results you want us to return, up to a maximum of 50. 
     * @param {Number} [offset = 0)] Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on. 
     * @param {module:api/VirtualNumbersApi~getRecipientOptoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecipientOptouts200Response}
     */
    getRecipientOptouts(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getRecipientOptouts");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRecipientOptouts");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRecipientOptouts");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getRecipientOptouts");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getRecipientOptouts");
      }
      // verify the required parameter 'virtualNumber' is set
      if (virtualNumber === undefined || virtualNumber === null) {
        throw new Error("Missing the required parameter 'virtualNumber' when calling getRecipientOptouts");
      }

      let pathParams = {
        'virtual-number': virtualNumber
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecipientOptouts200Response;
      return this.apiClient.callApi(
        '/virtual-numbers/{virtual-number}/optouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualNumber operation.
     * @callback module:api/VirtualNumbersApi~getVirtualNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch a virtual number
     * Fetch the tags, replyCallbackUrl and lastUse date for a Virtual Number.
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678). 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/VirtualNumbersApi~getVirtualNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualNumber}
     */
    getVirtualNumber(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling getVirtualNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getVirtualNumber");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getVirtualNumber");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling getVirtualNumber");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getVirtualNumber");
      }
      // verify the required parameter 'virtualNumber' is set
      if (virtualNumber === undefined || virtualNumber === null) {
        throw new Error("Missing the required parameter 'virtualNumber' when calling getVirtualNumber");
      }

      let pathParams = {
        'virtual-number': virtualNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualNumber;
      return this.apiClient.callApi(
        '/virtual-numbers/{virtual-number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNumber operation.
     * @callback module:api/VirtualNumbersApi~updateNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a virtual number
     * Use **virtual-number** to update the tags and/or replyCallbackUrl of a Virtual Number.  This request body will override the original POST/ virtual-numbers call. 
     * @param {String} contentLanguage 
     * @param {String} authorization 
     * @param {String} accept 
     * @param {String} acceptCharset 
     * @param {String} contentType 
     * @param {String} virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678). 
     * @param {module:model/UpdateNumberRequest} updateNumberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [telstraApiVersion] 
     * @param {module:api/VirtualNumbersApi~updateNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualNumber}
     */
    updateNumber(contentLanguage, authorization, accept, acceptCharset, contentType, virtualNumber, updateNumberRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateNumberRequest;
      // verify the required parameter 'contentLanguage' is set
      if (contentLanguage === undefined || contentLanguage === null) {
        throw new Error("Missing the required parameter 'contentLanguage' when calling updateNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateNumber");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateNumber");
      }
      // verify the required parameter 'acceptCharset' is set
      if (acceptCharset === undefined || acceptCharset === null) {
        throw new Error("Missing the required parameter 'acceptCharset' when calling updateNumber");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateNumber");
      }
      // verify the required parameter 'virtualNumber' is set
      if (virtualNumber === undefined || virtualNumber === null) {
        throw new Error("Missing the required parameter 'virtualNumber' when calling updateNumber");
      }
      // verify the required parameter 'updateNumberRequest' is set
      if (updateNumberRequest === undefined || updateNumberRequest === null) {
        throw new Error("Missing the required parameter 'updateNumberRequest' when calling updateNumber");
      }

      let pathParams = {
        'virtual-number': virtualNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Telstra-api-version': opts['telstraApiVersion'],
        'Content-Language': contentLanguage,
        'Authorization': authorization,
        'Accept': accept,
        'Accept-Charset': acceptCharset,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualNumber;
      return this.apiClient.callApi(
        '/virtual-numbers/{virtual-number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
