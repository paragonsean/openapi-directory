/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Error model module.
 * @module model/Error
 * @version 3.x
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * @alias module:model/Error
     * @param code {String} Unique code of the error
     * @param issue {String} The reason for the error
     * @param suggestedAction {String} Suggest practical actions for this particular issue.
     */
    constructor(code, issue, suggestedAction) { 
        
        Error.initialize(this, code, issue, suggestedAction);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, issue, suggestedAction) { 
        obj['code'] = code;
        obj['issue'] = issue;
        obj['suggested_action'] = suggestedAction;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = ApiClient.convertToType(data['issue'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('suggested_action')) {
                obj['suggested_action'] = ApiClient.convertToType(data['suggested_action'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['issue'] && !(typeof data['issue'] === 'string' || data['issue'] instanceof String)) {
            throw new Error("Expected the field `issue` to be a primitive type in the JSON string but got " + data['issue']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['suggested_action'] && !(typeof data['suggested_action'] === 'string' || data['suggested_action'] instanceof String)) {
            throw new Error("Expected the field `suggested_action` to be a primitive type in the JSON string but got " + data['suggested_action']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Error.RequiredProperties = ["code", "issue", "suggested_action"];

/**
 * Unique code of the error
 * @member {String} code
 */
Error.prototype['code'] = undefined;

/**
 * The field that caused the error
 * @member {String} field
 */
Error.prototype['field'] = undefined;

/**
 * The reason for the error
 * @member {String} issue
 */
Error.prototype['issue'] = undefined;

/**
 * URI for detailed information related to this error for the developer.
 * @member {String} link
 */
Error.prototype['link'] = undefined;

/**
 * The location of the field that caused the error.
 * @member {module:model/Error.LocationEnum} location
 */
Error.prototype['location'] = undefined;

/**
 * Suggest practical actions for this particular issue.
 * @member {String} suggested_action
 */
Error.prototype['suggested_action'] = undefined;

/**
 * The value of the field that caused the error
 * @member {String} value
 */
Error.prototype['value'] = undefined;





/**
 * Allowed values for the <code>location</code> property.
 * @enum {String}
 * @readonly
 */
Error['LocationEnum'] = {

    /**
     * value: "body"
     * @const
     */
    "body": "body",

    /**
     * value: "path"
     * @const
     */
    "path": "path",

    /**
     * value: "query"
     * @const
     */
    "query": "query"
};



export default Error;

