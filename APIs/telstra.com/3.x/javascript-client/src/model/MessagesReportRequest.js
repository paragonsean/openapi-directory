/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MessagesReportRequest model module.
 * @module model/MessagesReportRequest
 * @version 3.x
 */
class MessagesReportRequest {
    /**
     * Constructs a new <code>MessagesReportRequest</code>.
     * @alias module:model/MessagesReportRequest
     * @param endDate {Date} Type the end date (inclusive) of your reporting period here.  Your endDate must be a date in the past, and less than three months from your startDate. Use ISO format(yyyy-mm-dd). 
     * @param startDate {Date} Set the time period you want to generate a report for by typing the start date (inclusive) here.  Note that we only retain data for three months, so please ensure your startDate is not more than three months old.  Use ISO format(yyyy-mm-dd), e.g. 2019-08-24. 
     */
    constructor(endDate, startDate) { 
        
        MessagesReportRequest.initialize(this, endDate, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endDate, startDate) { 
        obj['endDate'] = endDate;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>MessagesReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessagesReportRequest} obj Optional instance to populate.
     * @return {module:model/MessagesReportRequest} The populated <code>MessagesReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessagesReportRequest();

            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('reportCallbackUrl')) {
                obj['reportCallbackUrl'] = ApiClient.convertToType(data['reportCallbackUrl'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessagesReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessagesReportRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessagesReportRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['reportCallbackUrl'] && !(typeof data['reportCallbackUrl'] === 'string' || data['reportCallbackUrl'] instanceof String)) {
            throw new Error("Expected the field `reportCallbackUrl` to be a primitive type in the JSON string but got " + data['reportCallbackUrl']);
        }

        return true;
    }


}

MessagesReportRequest.RequiredProperties = ["endDate", "startDate"];

/**
 * Type the end date (inclusive) of your reporting period here.  Your endDate must be a date in the past, and less than three months from your startDate. Use ISO format(yyyy-mm-dd). 
 * @member {Date} endDate
 */
MessagesReportRequest.prototype['endDate'] = undefined;

/**
 * Filter your messages report by:   * tag - use one of the tags assigned to your message(s)   * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to. 
 * @member {String} filter
 */
MessagesReportRequest.prototype['filter'] = undefined;

/**
 * Tell us the callbackUrl you want us to notify when your report is ready for download.  Sample callback response:  <pre><code class=\"language-sh\">{   \"reportId\":\"1520b774-46b0-4415-a05f-7bcb1c032c59\",   \"reportStatus\":\"completed\",   \"timestamp\":\"2022-11-10T05:06:42.823Z\" }</code></pre> 
 * @member {String} reportCallbackUrl
 */
MessagesReportRequest.prototype['reportCallbackUrl'] = undefined;

/**
 * Set the time period you want to generate a report for by typing the start date (inclusive) here.  Note that we only retain data for three months, so please ensure your startDate is not more than three months old.  Use ISO format(yyyy-mm-dd), e.g. 2019-08-24. 
 * @member {Date} startDate
 */
MessagesReportRequest.prototype['startDate'] = undefined;






export default MessagesReportRequest;

