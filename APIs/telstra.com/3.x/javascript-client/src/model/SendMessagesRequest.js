/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Multimedia from './Multimedia';
import SendMessagesRequestTo from './SendMessagesRequestTo';

/**
 * The SendMessagesRequest model module.
 * @module model/SendMessagesRequest
 * @version 3.x
 */
class SendMessagesRequest {
    /**
     * Constructs a new <code>SendMessagesRequest</code>.
     * @alias module:model/SendMessagesRequest
     * @param from {String} When the recipient receives your message, you can choose whether they'll see a privateNumber, virtualNumber or senderName (paid plans only) in the **from** field.    * privateNumber: Use this string to have the message appear on the recipient's device as from \"anonymous\", \"private\" or similar.   * 04xxxxxxxx: Use one of the Virtual Numbers associated with your account. You'll also be able to receive SMS replies to this number.  * senderName: Choose a unique alphanumeric string of up to 11 characters (paid feature). 
     * @param to {module:model/SendMessagesRequestTo} 
     */
    constructor(from, to) { 
        
        SendMessagesRequest.initialize(this, from, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, to) { 
        obj['deliveryNotification'] = false;
        obj['from'] = from;
        obj['retryTimeout'] = 10;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>SendMessagesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMessagesRequest} obj Optional instance to populate.
     * @return {module:model/SendMessagesRequest} The populated <code>SendMessagesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendMessagesRequest();

            if (data.hasOwnProperty('deliveryNotification')) {
                obj['deliveryNotification'] = ApiClient.convertToType(data['deliveryNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('messageContent')) {
                obj['messageContent'] = ApiClient.convertToType(data['messageContent'], 'String');
            }
            if (data.hasOwnProperty('multimedia')) {
                obj['multimedia'] = ApiClient.convertToType(data['multimedia'], [Multimedia]);
            }
            if (data.hasOwnProperty('retryTimeout')) {
                obj['retryTimeout'] = ApiClient.convertToType(data['retryTimeout'], 'Number');
            }
            if (data.hasOwnProperty('scheduleSend')) {
                obj['scheduleSend'] = ApiClient.convertToType(data['scheduleSend'], 'Date');
            }
            if (data.hasOwnProperty('statusCallbackUrl')) {
                obj['statusCallbackUrl'] = ApiClient.convertToType(data['statusCallbackUrl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = SendMessagesRequestTo.constructFromObject(data['to']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendMessagesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendMessagesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendMessagesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['messageContent'] && !(typeof data['messageContent'] === 'string' || data['messageContent'] instanceof String)) {
            throw new Error("Expected the field `messageContent` to be a primitive type in the JSON string but got " + data['messageContent']);
        }
        if (data['multimedia']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multimedia'])) {
                throw new Error("Expected the field `multimedia` to be an array in the JSON data but got " + data['multimedia']);
            }
            // validate the optional field `multimedia` (array)
            for (const item of data['multimedia']) {
                Multimedia.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['statusCallbackUrl'] && !(typeof data['statusCallbackUrl'] === 'string' || data['statusCallbackUrl'] instanceof String)) {
            throw new Error("Expected the field `statusCallbackUrl` to be a primitive type in the JSON string but got " + data['statusCallbackUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `to`
        if (data['to']) { // data not null
          SendMessagesRequestTo.validateJSON(data['to']);
        }

        return true;
    }


}

SendMessagesRequest.RequiredProperties = ["from", "to"];

/**
 * To receive a notification when your SMS has been delivered, set this parameter to **true** and make sure you provide a **statusCallbackUrl** (paid feature). 
 * @member {Boolean} deliveryNotification
 * @default false
 */
SendMessagesRequest.prototype['deliveryNotification'] = false;

/**
 * When the recipient receives your message, you can choose whether they'll see a privateNumber, virtualNumber or senderName (paid plans only) in the **from** field.    * privateNumber: Use this string to have the message appear on the recipient's device as from \"anonymous\", \"private\" or similar.   * 04xxxxxxxx: Use one of the Virtual Numbers associated with your account. You'll also be able to receive SMS replies to this number.  * senderName: Choose a unique alphanumeric string of up to 11 characters (paid feature). 
 * @member {String} from
 */
SendMessagesRequest.prototype['from'] = undefined;

/**
 * Use this field to send an SMS. Your text message goes here.     Note: either messageContent or multimedia are required, or you can use both field if you want to send multimedia with text. 
 * @member {String} messageContent
 */
SendMessagesRequest.prototype['messageContent'] = undefined;

/**
 * Use this field to send an MMS. Add your image, video or audio content here.   Note: either messageContent or multimedia are required, or you can use both field if you want to send multimedia with text.  Include a JSON payload with:  type: the type of multimedia content file you're sending (image, audio or video) followed by the file type. Use the format \"multimedia type/file type\", e.g. \"image/PNG\" or \"audio/MP3\". Supported file types: JPEG, BMP, GIF87a, GIF89a, PNG, MP3, WAV, MPEG, MPG, MP4, 3GP and US-ASCII.  fileName: the name of your multimedia file.  payload: the base64 encoded content. You can use [this online tool](https://elmah.io/tools/base64-image-encoder/) to encode an image, or [Base64 Guru](https://base64.guru/) to encode a video or audio file. 
 * @member {Array.<module:model/Multimedia>} multimedia
 */
SendMessagesRequest.prototype['multimedia'] = undefined;

/**
 * If the message is queued or unable to reach the recipient's device, tell us how many minutes the network should keep trying. Use an integer between 1 and 1440. If you don't set a value, we'll try for 10 minutes. 
 * @member {Number} retryTimeout
 * @default 10
 */
SendMessagesRequest.prototype['retryTimeout'] = 10;

/**
 * Don't want to send the message right away? Tell us what time you want to add it to the queue for sending instead.  Set the time in London Greenwich Mean Time (adjusting for any time difference) and use ISO format, e.g. \"2019-08-24T15:39:00Z\".  You can schedule a message up to 10 days into the future. If you specify a timestamp outside of this limit, the API will return a FIELD_INVALID error. 
 * @member {Date} scheduleSend
 */
SendMessagesRequest.prototype['scheduleSend'] = undefined;

/**
 * Tell us the URL you want the API to call when the status of your SMS updates.   To receive a status update, this field must be provided and deliveryNotification must be set to **true**.   The status will be either:   * **queued** – the message is in the queue for sending (default). * **sent** – your message has been sent from the server. * **expired** – we weren't able to send the message within the **retryTimeout** timeframe. * **delivered** – the message has successfully reached the recipient's device. Note that we will only be able to return this status if you set **deliveryNotification** to **true** (paid feature). * **undeliverable** – the delivery of your message failed (paid feature).  Sample callback response:  <pre><code class=\"language-sh\">{   \"to\":\"0476543210\",    \"from\":\"0401234567\",     \"timestamp\":\"2022-11-10T05:06:42.823Z\",    \"messageId\":\"1520b774-46b0-4415-a05f-7bcb1c032c59\",    \"status\":\"delivered\"  }</code></pre> 
 * @member {String} statusCallbackUrl
 */
SendMessagesRequest.prototype['statusCallbackUrl'] = undefined;

/**
 * Create your own tags and use them to fetch and sort your messages through our other endpoints. You can assign up to 10 tags per message. 
 * @member {Array.<String>} tags
 */
SendMessagesRequest.prototype['tags'] = undefined;

/**
 * @member {module:model/SendMessagesRequestTo} to
 */
SendMessagesRequest.prototype['to'] = undefined;






export default SendMessagesRequest;

