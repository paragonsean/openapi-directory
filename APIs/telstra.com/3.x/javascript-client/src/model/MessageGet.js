/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MultimediaGet from './MultimediaGet';

/**
 * The MessageGet model module.
 * @module model/MessageGet
 * @version 3.x
 */
class MessageGet {
    /**
     * Constructs a new <code>MessageGet</code>.
     * @alias module:model/MessageGet
     */
    constructor() { 
        
        MessageGet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['deliveryNotification'] = false;
        obj['queuePriority'] = 2;
        obj['retryTimeout'] = 10;
    }

    /**
     * Constructs a <code>MessageGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageGet} obj Optional instance to populate.
     * @return {module:model/MessageGet} The populated <code>MessageGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageGet();

            if (data.hasOwnProperty('createTimestamp')) {
                obj['createTimestamp'] = ApiClient.convertToType(data['createTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('deliveryNotification')) {
                obj['deliveryNotification'] = ApiClient.convertToType(data['deliveryNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('messageContent')) {
                obj['messageContent'] = ApiClient.convertToType(data['messageContent'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('multimedia')) {
                obj['multimedia'] = ApiClient.convertToType(data['multimedia'], [MultimediaGet]);
            }
            if (data.hasOwnProperty('queuePriority')) {
                obj['queuePriority'] = ApiClient.convertToType(data['queuePriority'], 'Number');
            }
            if (data.hasOwnProperty('receivedTimestamp')) {
                obj['receivedTimestamp'] = ApiClient.convertToType(data['receivedTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('retryTimeout')) {
                obj['retryTimeout'] = ApiClient.convertToType(data['retryTimeout'], 'Number');
            }
            if (data.hasOwnProperty('scheduleSend')) {
                obj['scheduleSend'] = ApiClient.convertToType(data['scheduleSend'], 'Date');
            }
            if (data.hasOwnProperty('sentTimestamp')) {
                obj['sentTimestamp'] = ApiClient.convertToType(data['sentTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusCallbackUrl')) {
                obj['statusCallbackUrl'] = ApiClient.convertToType(data['statusCallbackUrl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageGet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['messageContent'] && !(typeof data['messageContent'] === 'string' || data['messageContent'] instanceof String)) {
            throw new Error("Expected the field `messageContent` to be a primitive type in the JSON string but got " + data['messageContent']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        if (data['multimedia']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multimedia'])) {
                throw new Error("Expected the field `multimedia` to be an array in the JSON data but got " + data['multimedia']);
            }
            // validate the optional field `multimedia` (array)
            for (const item of data['multimedia']) {
                MultimediaGet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusCallbackUrl'] && !(typeof data['statusCallbackUrl'] === 'string' || data['statusCallbackUrl'] instanceof String)) {
            throw new Error("Expected the field `statusCallbackUrl` to be a primitive type in the JSON string but got " + data['statusCallbackUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * The time you submitted the message to the queue for sending.
 * @member {Date} createTimestamp
 */
MessageGet.prototype['createTimestamp'] = undefined;

/**
 * If set to **true**, you will receive a notification to the statusCallbackUrl when your message is delivered (paid feature).
 * @member {Boolean} deliveryNotification
 * @default false
 */
MessageGet.prototype['deliveryNotification'] = false;

/**
 * * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account. 
 * @member {module:model/MessageGet.DirectionEnum} direction
 */
MessageGet.prototype['direction'] = undefined;

/**
 * This will be either \"privateNumber\", one of your Virtual Numbers or your senderName.
 * @member {String} from
 */
MessageGet.prototype['from'] = undefined;

/**
 * The content of the message.
 * @member {String} messageContent
 */
MessageGet.prototype['messageContent'] = undefined;

/**
 * Use this UUID with our other endpoints to fetch, update or delete the message.
 * @member {String} messageId
 */
MessageGet.prototype['messageId'] = undefined;

/**
 * The multimedia content of the message (MMS only). It will include: 
 * @member {Array.<module:model/MultimediaGet>} multimedia
 */
MessageGet.prototype['multimedia'] = undefined;

/**
 * The priority assigned to the message.
 * @member {Number} queuePriority
 * @default 2
 */
MessageGet.prototype['queuePriority'] = 2;

/**
 * The time the message was received by the recipient's device.
 * @member {Date} receivedTimestamp
 */
MessageGet.prototype['receivedTimestamp'] = undefined;

/**
 * How many minutes you asked the server to keep trying to send the message.
 * @member {Number} retryTimeout
 * @default 10
 */
MessageGet.prototype['retryTimeout'] = 10;

/**
 * The time the message is scheduled to send.
 * @member {Date} scheduleSend
 */
MessageGet.prototype['scheduleSend'] = undefined;

/**
 * The time the message was sent from the server.
 * @member {Date} sentTimestamp
 */
MessageGet.prototype['sentTimestamp'] = undefined;

/**
 * The status will be either queued, sent, delivered, expired or undeliverable.
 * @member {module:model/MessageGet.StatusEnum} status
 */
MessageGet.prototype['status'] = undefined;

/**
 * The URL the API will call when the status of the message changes.
 * @member {String} statusCallbackUrl
 */
MessageGet.prototype['statusCallbackUrl'] = undefined;

/**
 * Any customisable tags assigned to the message.
 * @member {Array.<String>} tags
 */
MessageGet.prototype['tags'] = undefined;

/**
 * The recipient's mobile number.
 * @member {String} to
 */
MessageGet.prototype['to'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
MessageGet['DirectionEnum'] = {

    /**
     * value: "outgoing"
     * @const
     */
    "outgoing": "outgoing",

    /**
     * value: "incoming"
     * @const
     */
    "incoming": "incoming"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MessageGet['StatusEnum'] = {

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "sent"
     * @const
     */
    "sent": "sent",

    /**
     * value: "delivered"
     * @const
     */
    "delivered": "delivered",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "undeliverable"
     * @const
     */
    "undeliverable": "undeliverable"
};



export default MessageGet;

