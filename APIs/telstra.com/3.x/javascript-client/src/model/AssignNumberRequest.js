/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssignNumberRequest model module.
 * @module model/AssignNumberRequest
 * @version 3.x
 */
class AssignNumberRequest {
    /**
     * Constructs a new <code>AssignNumberRequest</code>.
     * @alias module:model/AssignNumberRequest
     */
    constructor() { 
        
        AssignNumberRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssignNumberRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssignNumberRequest} obj Optional instance to populate.
     * @return {module:model/AssignNumberRequest} The populated <code>AssignNumberRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssignNumberRequest();

            if (data.hasOwnProperty('replyCallbackUrl')) {
                obj['replyCallbackUrl'] = ApiClient.convertToType(data['replyCallbackUrl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssignNumberRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssignNumberRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['replyCallbackUrl'] && !(typeof data['replyCallbackUrl'] === 'string' || data['replyCallbackUrl'] instanceof String)) {
            throw new Error("Expected the field `replyCallbackUrl` to be a primitive type in the JSON string but got " + data['replyCallbackUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Tell us the URL that replies to the Virtual Number should be sent to.  Sample callback response:  <pre><code class=\"language-sh\">{   \"to\":\"0476543210\",    \"from\":\"0401234567\",    \"timestamp\":\"2022-11-10T05:06:42.823Z\",    \"messageId\":\"75f263c0-60b5-11ed-8456-71ae4c63550d\",    \"messageContent\":\"Hi, example message\",    \"multimedia\": {      \"fileName:\"image.jpeg\"      \"type:\"image/jpeg\"      \"payload\":\"base64 payload\"   } }</code></pre> 
 * @member {String} replyCallbackUrl
 */
AssignNumberRequest.prototype['replyCallbackUrl'] = undefined;

/**
 * Create your own tags and use them to fetch, sort and report on your Virtual Numbers through our other endpoints. You can assign up to 10 tags per number. 
 * @member {Array.<String>} tags
 */
AssignNumberRequest.prototype['tags'] = undefined;






export default AssignNumberRequest;

