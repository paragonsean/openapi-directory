/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagesReport_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessagesReport_request::OAIMessagesReport_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessagesReport_request::OAIMessagesReport_request() {
    this->initializeModel();
}

OAIMessagesReport_request::~OAIMessagesReport_request() {}

void OAIMessagesReport_request::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_report_callback_url_isSet = false;
    m_report_callback_url_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIMessagesReport_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessagesReport_request::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_report_callback_url_isValid = ::OpenAPI::fromJsonValue(m_report_callback_url, json[QString("reportCallbackUrl")]);
    m_report_callback_url_isSet = !json[QString("reportCallbackUrl")].isNull() && m_report_callback_url_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIMessagesReport_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessagesReport_request::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_report_callback_url_isSet) {
        obj.insert(QString("reportCallbackUrl"), ::OpenAPI::toJsonValue(m_report_callback_url));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QDate OAIMessagesReport_request::getEndDate() const {
    return m_end_date;
}
void OAIMessagesReport_request::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIMessagesReport_request::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIMessagesReport_request::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIMessagesReport_request::getFilter() const {
    return m_filter;
}
void OAIMessagesReport_request::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIMessagesReport_request::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIMessagesReport_request::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIMessagesReport_request::getReportCallbackUrl() const {
    return m_report_callback_url;
}
void OAIMessagesReport_request::setReportCallbackUrl(const QString &report_callback_url) {
    m_report_callback_url = report_callback_url;
    m_report_callback_url_isSet = true;
}

bool OAIMessagesReport_request::is_report_callback_url_Set() const{
    return m_report_callback_url_isSet;
}

bool OAIMessagesReport_request::is_report_callback_url_Valid() const{
    return m_report_callback_url_isValid;
}

QDate OAIMessagesReport_request::getStartDate() const {
    return m_start_date;
}
void OAIMessagesReport_request::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIMessagesReport_request::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIMessagesReport_request::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIMessagesReport_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessagesReport_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
