/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateMessageById_request.h
 *
 * 
 */

#ifndef OAIUpdateMessageById_request_H
#define OAIUpdateMessageById_request_H

#include <QJsonObject>

#include "OAIMultimedia.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMultimedia;

class OAIUpdateMessageById_request : public OAIObject {
public:
    OAIUpdateMessageById_request();
    OAIUpdateMessageById_request(QString json);
    ~OAIUpdateMessageById_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDeliveryNotification() const;
    void setDeliveryNotification(const bool &delivery_notification);
    bool is_delivery_notification_Set() const;
    bool is_delivery_notification_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getMessageContent() const;
    void setMessageContent(const QString &message_content);
    bool is_message_content_Set() const;
    bool is_message_content_Valid() const;

    QList<OAIMultimedia> getMultimedia() const;
    void setMultimedia(const QList<OAIMultimedia> &multimedia);
    bool is_multimedia_Set() const;
    bool is_multimedia_Valid() const;

    qint32 getRetryTimeout() const;
    void setRetryTimeout(const qint32 &retry_timeout);
    bool is_retry_timeout_Set() const;
    bool is_retry_timeout_Valid() const;

    QDateTime getScheduleSend() const;
    void setScheduleSend(const QDateTime &schedule_send);
    bool is_schedule_send_Set() const;
    bool is_schedule_send_Valid() const;

    QString getStatusCallbackUrl() const;
    void setStatusCallbackUrl(const QString &status_callback_url);
    bool is_status_callback_url_Set() const;
    bool is_status_callback_url_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_delivery_notification;
    bool m_delivery_notification_isSet;
    bool m_delivery_notification_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_message_content;
    bool m_message_content_isSet;
    bool m_message_content_isValid;

    QList<OAIMultimedia> m_multimedia;
    bool m_multimedia_isSet;
    bool m_multimedia_isValid;

    qint32 m_retry_timeout;
    bool m_retry_timeout_isSet;
    bool m_retry_timeout_isValid;

    QDateTime m_schedule_send;
    bool m_schedule_send_isSet;
    bool m_schedule_send_isValid;

    QString m_status_callback_url;
    bool m_status_callback_url_isSet;
    bool m_status_callback_url_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateMessageById_request)

#endif // OAIUpdateMessageById_request_H
