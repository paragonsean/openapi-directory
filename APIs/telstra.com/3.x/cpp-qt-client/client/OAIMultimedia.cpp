/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultimedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultimedia::OAIMultimedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultimedia::OAIMultimedia() {
    this->initializeModel();
}

OAIMultimedia::~OAIMultimedia() {}

void OAIMultimedia::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMultimedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultimedia::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMultimedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultimedia::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMultimedia::getFileName() const {
    return m_file_name;
}
void OAIMultimedia::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIMultimedia::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIMultimedia::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIMultimedia::getPayload() const {
    return m_payload;
}
void OAIMultimedia::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIMultimedia::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIMultimedia::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIMultimedia::getType() const {
    return m_type;
}
void OAIMultimedia::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMultimedia::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMultimedia::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMultimedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultimedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && m_payload_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
