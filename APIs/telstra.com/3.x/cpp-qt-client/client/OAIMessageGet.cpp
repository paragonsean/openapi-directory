/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageGet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageGet::OAIMessageGet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageGet::OAIMessageGet() {
    this->initializeModel();
}

OAIMessageGet::~OAIMessageGet() {}

void OAIMessageGet::initializeModel() {

    m_create_timestamp_isSet = false;
    m_create_timestamp_isValid = false;

    m_delivery_notification_isSet = false;
    m_delivery_notification_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_content_isSet = false;
    m_message_content_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_multimedia_isSet = false;
    m_multimedia_isValid = false;

    m_queue_priority_isSet = false;
    m_queue_priority_isValid = false;

    m_received_timestamp_isSet = false;
    m_received_timestamp_isValid = false;

    m_retry_timeout_isSet = false;
    m_retry_timeout_isValid = false;

    m_schedule_send_isSet = false;
    m_schedule_send_isValid = false;

    m_sent_timestamp_isSet = false;
    m_sent_timestamp_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_callback_url_isSet = false;
    m_status_callback_url_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessageGet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageGet::fromJsonObject(QJsonObject json) {

    m_create_timestamp_isValid = ::OpenAPI::fromJsonValue(m_create_timestamp, json[QString("createTimestamp")]);
    m_create_timestamp_isSet = !json[QString("createTimestamp")].isNull() && m_create_timestamp_isValid;

    m_delivery_notification_isValid = ::OpenAPI::fromJsonValue(m_delivery_notification, json[QString("deliveryNotification")]);
    m_delivery_notification_isSet = !json[QString("deliveryNotification")].isNull() && m_delivery_notification_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_content_isValid = ::OpenAPI::fromJsonValue(m_message_content, json[QString("messageContent")]);
    m_message_content_isSet = !json[QString("messageContent")].isNull() && m_message_content_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_multimedia_isValid = ::OpenAPI::fromJsonValue(m_multimedia, json[QString("multimedia")]);
    m_multimedia_isSet = !json[QString("multimedia")].isNull() && m_multimedia_isValid;

    m_queue_priority_isValid = ::OpenAPI::fromJsonValue(m_queue_priority, json[QString("queuePriority")]);
    m_queue_priority_isSet = !json[QString("queuePriority")].isNull() && m_queue_priority_isValid;

    m_received_timestamp_isValid = ::OpenAPI::fromJsonValue(m_received_timestamp, json[QString("receivedTimestamp")]);
    m_received_timestamp_isSet = !json[QString("receivedTimestamp")].isNull() && m_received_timestamp_isValid;

    m_retry_timeout_isValid = ::OpenAPI::fromJsonValue(m_retry_timeout, json[QString("retryTimeout")]);
    m_retry_timeout_isSet = !json[QString("retryTimeout")].isNull() && m_retry_timeout_isValid;

    m_schedule_send_isValid = ::OpenAPI::fromJsonValue(m_schedule_send, json[QString("scheduleSend")]);
    m_schedule_send_isSet = !json[QString("scheduleSend")].isNull() && m_schedule_send_isValid;

    m_sent_timestamp_isValid = ::OpenAPI::fromJsonValue(m_sent_timestamp, json[QString("sentTimestamp")]);
    m_sent_timestamp_isSet = !json[QString("sentTimestamp")].isNull() && m_sent_timestamp_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_callback_url_isValid = ::OpenAPI::fromJsonValue(m_status_callback_url, json[QString("statusCallbackUrl")]);
    m_status_callback_url_isSet = !json[QString("statusCallbackUrl")].isNull() && m_status_callback_url_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessageGet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageGet::asJsonObject() const {
    QJsonObject obj;
    if (m_create_timestamp_isSet) {
        obj.insert(QString("createTimestamp"), ::OpenAPI::toJsonValue(m_create_timestamp));
    }
    if (m_delivery_notification_isSet) {
        obj.insert(QString("deliveryNotification"), ::OpenAPI::toJsonValue(m_delivery_notification));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_content_isSet) {
        obj.insert(QString("messageContent"), ::OpenAPI::toJsonValue(m_message_content));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_multimedia.size() > 0) {
        obj.insert(QString("multimedia"), ::OpenAPI::toJsonValue(m_multimedia));
    }
    if (m_queue_priority_isSet) {
        obj.insert(QString("queuePriority"), ::OpenAPI::toJsonValue(m_queue_priority));
    }
    if (m_received_timestamp_isSet) {
        obj.insert(QString("receivedTimestamp"), ::OpenAPI::toJsonValue(m_received_timestamp));
    }
    if (m_retry_timeout_isSet) {
        obj.insert(QString("retryTimeout"), ::OpenAPI::toJsonValue(m_retry_timeout));
    }
    if (m_schedule_send_isSet) {
        obj.insert(QString("scheduleSend"), ::OpenAPI::toJsonValue(m_schedule_send));
    }
    if (m_sent_timestamp_isSet) {
        obj.insert(QString("sentTimestamp"), ::OpenAPI::toJsonValue(m_sent_timestamp));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_callback_url_isSet) {
        obj.insert(QString("statusCallbackUrl"), ::OpenAPI::toJsonValue(m_status_callback_url));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QDateTime OAIMessageGet::getCreateTimestamp() const {
    return m_create_timestamp;
}
void OAIMessageGet::setCreateTimestamp(const QDateTime &create_timestamp) {
    m_create_timestamp = create_timestamp;
    m_create_timestamp_isSet = true;
}

bool OAIMessageGet::is_create_timestamp_Set() const{
    return m_create_timestamp_isSet;
}

bool OAIMessageGet::is_create_timestamp_Valid() const{
    return m_create_timestamp_isValid;
}

bool OAIMessageGet::isDeliveryNotification() const {
    return m_delivery_notification;
}
void OAIMessageGet::setDeliveryNotification(const bool &delivery_notification) {
    m_delivery_notification = delivery_notification;
    m_delivery_notification_isSet = true;
}

bool OAIMessageGet::is_delivery_notification_Set() const{
    return m_delivery_notification_isSet;
}

bool OAIMessageGet::is_delivery_notification_Valid() const{
    return m_delivery_notification_isValid;
}

QString OAIMessageGet::getDirection() const {
    return m_direction;
}
void OAIMessageGet::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIMessageGet::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIMessageGet::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIMessageGet::getFrom() const {
    return m_from;
}
void OAIMessageGet::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessageGet::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessageGet::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMessageGet::getMessageContent() const {
    return m_message_content;
}
void OAIMessageGet::setMessageContent(const QString &message_content) {
    m_message_content = message_content;
    m_message_content_isSet = true;
}

bool OAIMessageGet::is_message_content_Set() const{
    return m_message_content_isSet;
}

bool OAIMessageGet::is_message_content_Valid() const{
    return m_message_content_isValid;
}

QString OAIMessageGet::getMessageId() const {
    return m_message_id;
}
void OAIMessageGet::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIMessageGet::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMessageGet::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QList<OAIMultimediaGet> OAIMessageGet::getMultimedia() const {
    return m_multimedia;
}
void OAIMessageGet::setMultimedia(const QList<OAIMultimediaGet> &multimedia) {
    m_multimedia = multimedia;
    m_multimedia_isSet = true;
}

bool OAIMessageGet::is_multimedia_Set() const{
    return m_multimedia_isSet;
}

bool OAIMessageGet::is_multimedia_Valid() const{
    return m_multimedia_isValid;
}

qint32 OAIMessageGet::getQueuePriority() const {
    return m_queue_priority;
}
void OAIMessageGet::setQueuePriority(const qint32 &queue_priority) {
    m_queue_priority = queue_priority;
    m_queue_priority_isSet = true;
}

bool OAIMessageGet::is_queue_priority_Set() const{
    return m_queue_priority_isSet;
}

bool OAIMessageGet::is_queue_priority_Valid() const{
    return m_queue_priority_isValid;
}

QDateTime OAIMessageGet::getReceivedTimestamp() const {
    return m_received_timestamp;
}
void OAIMessageGet::setReceivedTimestamp(const QDateTime &received_timestamp) {
    m_received_timestamp = received_timestamp;
    m_received_timestamp_isSet = true;
}

bool OAIMessageGet::is_received_timestamp_Set() const{
    return m_received_timestamp_isSet;
}

bool OAIMessageGet::is_received_timestamp_Valid() const{
    return m_received_timestamp_isValid;
}

qint32 OAIMessageGet::getRetryTimeout() const {
    return m_retry_timeout;
}
void OAIMessageGet::setRetryTimeout(const qint32 &retry_timeout) {
    m_retry_timeout = retry_timeout;
    m_retry_timeout_isSet = true;
}

bool OAIMessageGet::is_retry_timeout_Set() const{
    return m_retry_timeout_isSet;
}

bool OAIMessageGet::is_retry_timeout_Valid() const{
    return m_retry_timeout_isValid;
}

QDateTime OAIMessageGet::getScheduleSend() const {
    return m_schedule_send;
}
void OAIMessageGet::setScheduleSend(const QDateTime &schedule_send) {
    m_schedule_send = schedule_send;
    m_schedule_send_isSet = true;
}

bool OAIMessageGet::is_schedule_send_Set() const{
    return m_schedule_send_isSet;
}

bool OAIMessageGet::is_schedule_send_Valid() const{
    return m_schedule_send_isValid;
}

QDateTime OAIMessageGet::getSentTimestamp() const {
    return m_sent_timestamp;
}
void OAIMessageGet::setSentTimestamp(const QDateTime &sent_timestamp) {
    m_sent_timestamp = sent_timestamp;
    m_sent_timestamp_isSet = true;
}

bool OAIMessageGet::is_sent_timestamp_Set() const{
    return m_sent_timestamp_isSet;
}

bool OAIMessageGet::is_sent_timestamp_Valid() const{
    return m_sent_timestamp_isValid;
}

QString OAIMessageGet::getStatus() const {
    return m_status;
}
void OAIMessageGet::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessageGet::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessageGet::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessageGet::getStatusCallbackUrl() const {
    return m_status_callback_url;
}
void OAIMessageGet::setStatusCallbackUrl(const QString &status_callback_url) {
    m_status_callback_url = status_callback_url;
    m_status_callback_url_isSet = true;
}

bool OAIMessageGet::is_status_callback_url_Set() const{
    return m_status_callback_url_isSet;
}

bool OAIMessageGet::is_status_callback_url_Valid() const{
    return m_status_callback_url_isValid;
}

QList<QString> OAIMessageGet::getTags() const {
    return m_tags;
}
void OAIMessageGet::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMessageGet::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMessageGet::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIMessageGet::getTo() const {
    return m_to;
}
void OAIMessageGet::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessageGet::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessageGet::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessageGet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multimedia.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_send_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageGet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
