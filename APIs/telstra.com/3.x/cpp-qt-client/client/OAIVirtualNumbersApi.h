/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNumbersApi_H
#define OAI_OAIVirtualNumbersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignNumber_request.h"
#include "OAIErrors.h"
#include "OAIGetNumbers_200_response.h"
#include "OAIGetRecipientOptouts_200_response.h"
#include "OAIUpdateNumber_request.h"
#include "OAIVirtual_number.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNumbersApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNumbersApi(const int timeOut = 0);
    ~OAIVirtualNumbersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_assign_number_request OAIAssignNumber_request [required]
    * @param[in]  telstra_api_version QString [optional]
    */
    virtual void assignNumber(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const OAIAssignNumber_request &oai_assign_number_request, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  virtual_number QString [required]
    * @param[in]  telstra_api_version QString [optional]
    */
    virtual void deleteNumber(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const QString &virtual_number, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  telstra_api_version QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getNumbers(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  virtual_number QString [required]
    * @param[in]  telstra_api_version QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getRecipientOptouts(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const QString &virtual_number, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  virtual_number QString [required]
    * @param[in]  telstra_api_version QString [optional]
    */
    virtual void getVirtualNumber(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const QString &virtual_number, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  virtual_number QString [required]
    * @param[in]  oai_update_number_request OAIUpdateNumber_request [required]
    * @param[in]  telstra_api_version QString [optional]
    */
    virtual void updateNumber(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const QString &virtual_number, const OAIUpdateNumber_request &oai_update_number_request, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignNumberCallback(OAIHttpRequestWorker *worker);
    void deleteNumberCallback(OAIHttpRequestWorker *worker);
    void getNumbersCallback(OAIHttpRequestWorker *worker);
    void getRecipientOptoutsCallback(OAIHttpRequestWorker *worker);
    void getVirtualNumberCallback(OAIHttpRequestWorker *worker);
    void updateNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignNumberSignal(OAIVirtual_number summary);
    void deleteNumberSignal();
    void getNumbersSignal(OAIGetNumbers_200_response summary);
    void getRecipientOptoutsSignal(OAIGetRecipientOptouts_200_response summary);
    void getVirtualNumberSignal(OAIVirtual_number summary);
    void updateNumberSignal(OAIVirtual_number summary);


    void assignNumberSignalFull(OAIHttpRequestWorker *worker, OAIVirtual_number summary);
    void deleteNumberSignalFull(OAIHttpRequestWorker *worker);
    void getNumbersSignalFull(OAIHttpRequestWorker *worker, OAIGetNumbers_200_response summary);
    void getRecipientOptoutsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipientOptouts_200_response summary);
    void getVirtualNumberSignalFull(OAIHttpRequestWorker *worker, OAIVirtual_number summary);
    void updateNumberSignalFull(OAIHttpRequestWorker *worker, OAIVirtual_number summary);

    Q_DECL_DEPRECATED_X("Use assignNumberSignalError() instead")
    void assignNumberSignalE(OAIVirtual_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignNumberSignalError(OAIVirtual_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNumberSignalError() instead")
    void deleteNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumbersSignalError() instead")
    void getNumbersSignalE(OAIGetNumbers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumbersSignalError(OAIGetNumbers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipientOptoutsSignalError() instead")
    void getRecipientOptoutsSignalE(OAIGetRecipientOptouts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipientOptoutsSignalError(OAIGetRecipientOptouts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVirtualNumberSignalError() instead")
    void getVirtualNumberSignalE(OAIVirtual_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVirtualNumberSignalError(OAIVirtual_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNumberSignalError() instead")
    void updateNumberSignalE(OAIVirtual_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNumberSignalError(OAIVirtual_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignNumberSignalErrorFull() instead")
    void assignNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNumberSignalErrorFull() instead")
    void deleteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumbersSignalErrorFull() instead")
    void getNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipientOptoutsSignalErrorFull() instead")
    void getRecipientOptoutsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipientOptoutsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVirtualNumberSignalErrorFull() instead")
    void getVirtualNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVirtualNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNumberSignalErrorFull() instead")
    void updateNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
