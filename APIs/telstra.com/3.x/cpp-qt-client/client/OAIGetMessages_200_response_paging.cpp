/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMessages_200_response_paging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMessages_200_response_paging::OAIGetMessages_200_response_paging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMessages_200_response_paging::OAIGetMessages_200_response_paging() {
    this->initializeModel();
}

OAIGetMessages_200_response_paging::~OAIGetMessages_200_response_paging() {}

void OAIGetMessages_200_response_paging::initializeModel() {

    m_last_page_isSet = false;
    m_last_page_isValid = false;

    m_next_page_isSet = false;
    m_next_page_isValid = false;

    m_previous_page_isSet = false;
    m_previous_page_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIGetMessages_200_response_paging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMessages_200_response_paging::fromJsonObject(QJsonObject json) {

    m_last_page_isValid = ::OpenAPI::fromJsonValue(m_last_page, json[QString("lastPage")]);
    m_last_page_isSet = !json[QString("lastPage")].isNull() && m_last_page_isValid;

    m_next_page_isValid = ::OpenAPI::fromJsonValue(m_next_page, json[QString("nextPage")]);
    m_next_page_isSet = !json[QString("nextPage")].isNull() && m_next_page_isValid;

    m_previous_page_isValid = ::OpenAPI::fromJsonValue(m_previous_page, json[QString("previousPage")]);
    m_previous_page_isSet = !json[QString("previousPage")].isNull() && m_previous_page_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIGetMessages_200_response_paging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMessages_200_response_paging::asJsonObject() const {
    QJsonObject obj;
    if (m_last_page_isSet) {
        obj.insert(QString("lastPage"), ::OpenAPI::toJsonValue(m_last_page));
    }
    if (m_next_page_isSet) {
        obj.insert(QString("nextPage"), ::OpenAPI::toJsonValue(m_next_page));
    }
    if (m_previous_page_isSet) {
        obj.insert(QString("previousPage"), ::OpenAPI::toJsonValue(m_previous_page));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QString OAIGetMessages_200_response_paging::getLastPage() const {
    return m_last_page;
}
void OAIGetMessages_200_response_paging::setLastPage(const QString &last_page) {
    m_last_page = last_page;
    m_last_page_isSet = true;
}

bool OAIGetMessages_200_response_paging::is_last_page_Set() const{
    return m_last_page_isSet;
}

bool OAIGetMessages_200_response_paging::is_last_page_Valid() const{
    return m_last_page_isValid;
}

QString OAIGetMessages_200_response_paging::getNextPage() const {
    return m_next_page;
}
void OAIGetMessages_200_response_paging::setNextPage(const QString &next_page) {
    m_next_page = next_page;
    m_next_page_isSet = true;
}

bool OAIGetMessages_200_response_paging::is_next_page_Set() const{
    return m_next_page_isSet;
}

bool OAIGetMessages_200_response_paging::is_next_page_Valid() const{
    return m_next_page_isValid;
}

QString OAIGetMessages_200_response_paging::getPreviousPage() const {
    return m_previous_page;
}
void OAIGetMessages_200_response_paging::setPreviousPage(const QString &previous_page) {
    m_previous_page = previous_page;
    m_previous_page_isSet = true;
}

bool OAIGetMessages_200_response_paging::is_previous_page_Set() const{
    return m_previous_page_isSet;
}

bool OAIGetMessages_200_response_paging::is_previous_page_Valid() const{
    return m_previous_page_isValid;
}

double OAIGetMessages_200_response_paging::getTotalCount() const {
    return m_total_count;
}
void OAIGetMessages_200_response_paging::setTotalCount(const double &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIGetMessages_200_response_paging::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIGetMessages_200_response_paging::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIGetMessages_200_response_paging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMessages_200_response_paging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
