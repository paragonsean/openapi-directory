/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagesReport_201_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessagesReport_201_response::OAIMessagesReport_201_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessagesReport_201_response::OAIMessagesReport_201_response() {
    this->initializeModel();
}

OAIMessagesReport_201_response::~OAIMessagesReport_201_response() {}

void OAIMessagesReport_201_response::initializeModel() {

    m_report_callback_url_isSet = false;
    m_report_callback_url_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;

    m_report_status_isSet = false;
    m_report_status_isValid = false;
}

void OAIMessagesReport_201_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessagesReport_201_response::fromJsonObject(QJsonObject json) {

    m_report_callback_url_isValid = ::OpenAPI::fromJsonValue(m_report_callback_url, json[QString("reportCallbackUrl")]);
    m_report_callback_url_isSet = !json[QString("reportCallbackUrl")].isNull() && m_report_callback_url_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("reportId")]);
    m_report_id_isSet = !json[QString("reportId")].isNull() && m_report_id_isValid;

    m_report_status_isValid = ::OpenAPI::fromJsonValue(m_report_status, json[QString("reportStatus")]);
    m_report_status_isSet = !json[QString("reportStatus")].isNull() && m_report_status_isValid;
}

QString OAIMessagesReport_201_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessagesReport_201_response::asJsonObject() const {
    QJsonObject obj;
    if (m_report_callback_url_isSet) {
        obj.insert(QString("reportCallbackUrl"), ::OpenAPI::toJsonValue(m_report_callback_url));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("reportId"), ::OpenAPI::toJsonValue(m_report_id));
    }
    if (m_report_status_isSet) {
        obj.insert(QString("reportStatus"), ::OpenAPI::toJsonValue(m_report_status));
    }
    return obj;
}

QString OAIMessagesReport_201_response::getReportCallbackUrl() const {
    return m_report_callback_url;
}
void OAIMessagesReport_201_response::setReportCallbackUrl(const QString &report_callback_url) {
    m_report_callback_url = report_callback_url;
    m_report_callback_url_isSet = true;
}

bool OAIMessagesReport_201_response::is_report_callback_url_Set() const{
    return m_report_callback_url_isSet;
}

bool OAIMessagesReport_201_response::is_report_callback_url_Valid() const{
    return m_report_callback_url_isValid;
}

QString OAIMessagesReport_201_response::getReportId() const {
    return m_report_id;
}
void OAIMessagesReport_201_response::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIMessagesReport_201_response::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIMessagesReport_201_response::is_report_id_Valid() const{
    return m_report_id_isValid;
}

QString OAIMessagesReport_201_response::getReportStatus() const {
    return m_report_status;
}
void OAIMessagesReport_201_response::setReportStatus(const QString &report_status) {
    m_report_status = report_status;
    m_report_status_isSet = true;
}

bool OAIMessagesReport_201_response::is_report_status_Set() const{
    return m_report_status_isSet;
}

bool OAIMessagesReport_201_response::is_report_status_Valid() const{
    return m_report_status_isValid;
}

bool OAIMessagesReport_201_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessagesReport_201_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
