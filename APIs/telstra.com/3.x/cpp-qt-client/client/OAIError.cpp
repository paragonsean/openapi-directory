/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_suggested_action_isSet = false;
    m_suggested_action_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_suggested_action_isValid = ::OpenAPI::fromJsonValue(m_suggested_action, json[QString("suggested_action")]);
    m_suggested_action_isSet = !json[QString("suggested_action")].isNull() && m_suggested_action_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_issue_isSet) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_suggested_action_isSet) {
        obj.insert(QString("suggested_action"), ::OpenAPI::toJsonValue(m_suggested_action));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIError::getCode() const {
    return m_code;
}
void OAIError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIError::getField() const {
    return m_field;
}
void OAIError::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIError::is_field_Set() const{
    return m_field_isSet;
}

bool OAIError::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIError::getIssue() const {
    return m_issue;
}
void OAIError::setIssue(const QString &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIError::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIError::is_issue_Valid() const{
    return m_issue_isValid;
}

QString OAIError::getLink() const {
    return m_link;
}
void OAIError::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIError::is_link_Set() const{
    return m_link_isSet;
}

bool OAIError::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIError::getLocation() const {
    return m_location;
}
void OAIError::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIError::is_location_Set() const{
    return m_location_isSet;
}

bool OAIError::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIError::getSuggestedAction() const {
    return m_suggested_action;
}
void OAIError::setSuggestedAction(const QString &suggested_action) {
    m_suggested_action = suggested_action;
    m_suggested_action_isSet = true;
}

bool OAIError::is_suggested_action_Set() const{
    return m_suggested_action_isSet;
}

bool OAIError::is_suggested_action_Valid() const{
    return m_suggested_action_isValid;
}

QString OAIError::getValue() const {
    return m_value;
}
void OAIError::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIError::is_value_Set() const{
    return m_value_isSet;
}

bool OAIError::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_issue_isValid && m_suggested_action_isValid && true;
}

} // namespace OpenAPI
