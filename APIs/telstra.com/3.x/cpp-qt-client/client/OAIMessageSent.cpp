/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageSent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageSent::OAIMessageSent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageSent::OAIMessageSent() {
    this->initializeModel();
}

OAIMessageSent::~OAIMessageSent() {}

void OAIMessageSent::initializeModel() {

    m_delivery_notification_isSet = false;
    m_delivery_notification_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_content_isSet = false;
    m_message_content_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_multimedia_isSet = false;
    m_multimedia_isValid = false;

    m_retry_timeout_isSet = false;
    m_retry_timeout_isValid = false;

    m_schedule_send_isSet = false;
    m_schedule_send_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_callback_url_isSet = false;
    m_status_callback_url_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessageSent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageSent::fromJsonObject(QJsonObject json) {

    m_delivery_notification_isValid = ::OpenAPI::fromJsonValue(m_delivery_notification, json[QString("deliveryNotification")]);
    m_delivery_notification_isSet = !json[QString("deliveryNotification")].isNull() && m_delivery_notification_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_content_isValid = ::OpenAPI::fromJsonValue(m_message_content, json[QString("messageContent")]);
    m_message_content_isSet = !json[QString("messageContent")].isNull() && m_message_content_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_multimedia_isValid = ::OpenAPI::fromJsonValue(m_multimedia, json[QString("multimedia")]);
    m_multimedia_isSet = !json[QString("multimedia")].isNull() && m_multimedia_isValid;

    m_retry_timeout_isValid = ::OpenAPI::fromJsonValue(m_retry_timeout, json[QString("retryTimeout")]);
    m_retry_timeout_isSet = !json[QString("retryTimeout")].isNull() && m_retry_timeout_isValid;

    m_schedule_send_isValid = ::OpenAPI::fromJsonValue(m_schedule_send, json[QString("scheduleSend")]);
    m_schedule_send_isSet = !json[QString("scheduleSend")].isNull() && m_schedule_send_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_callback_url_isValid = ::OpenAPI::fromJsonValue(m_status_callback_url, json[QString("statusCallbackUrl")]);
    m_status_callback_url_isSet = !json[QString("statusCallbackUrl")].isNull() && m_status_callback_url_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessageSent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageSent::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_notification_isSet) {
        obj.insert(QString("deliveryNotification"), ::OpenAPI::toJsonValue(m_delivery_notification));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_content_isSet) {
        obj.insert(QString("messageContent"), ::OpenAPI::toJsonValue(m_message_content));
    }
    if (m_message_id.isSet()) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_multimedia.size() > 0) {
        obj.insert(QString("multimedia"), ::OpenAPI::toJsonValue(m_multimedia));
    }
    if (m_retry_timeout_isSet) {
        obj.insert(QString("retryTimeout"), ::OpenAPI::toJsonValue(m_retry_timeout));
    }
    if (m_schedule_send_isSet) {
        obj.insert(QString("scheduleSend"), ::OpenAPI::toJsonValue(m_schedule_send));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_callback_url_isSet) {
        obj.insert(QString("statusCallbackUrl"), ::OpenAPI::toJsonValue(m_status_callback_url));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

bool OAIMessageSent::isDeliveryNotification() const {
    return m_delivery_notification;
}
void OAIMessageSent::setDeliveryNotification(const bool &delivery_notification) {
    m_delivery_notification = delivery_notification;
    m_delivery_notification_isSet = true;
}

bool OAIMessageSent::is_delivery_notification_Set() const{
    return m_delivery_notification_isSet;
}

bool OAIMessageSent::is_delivery_notification_Valid() const{
    return m_delivery_notification_isValid;
}

QString OAIMessageSent::getFrom() const {
    return m_from;
}
void OAIMessageSent::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessageSent::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessageSent::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMessageSent::getMessageContent() const {
    return m_message_content;
}
void OAIMessageSent::setMessageContent(const QString &message_content) {
    m_message_content = message_content;
    m_message_content_isSet = true;
}

bool OAIMessageSent::is_message_content_Set() const{
    return m_message_content_isSet;
}

bool OAIMessageSent::is_message_content_Valid() const{
    return m_message_content_isValid;
}

OAIMessageSent_messageId OAIMessageSent::getMessageId() const {
    return m_message_id;
}
void OAIMessageSent::setMessageId(const OAIMessageSent_messageId &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIMessageSent::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMessageSent::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QList<OAIMultimediaGet> OAIMessageSent::getMultimedia() const {
    return m_multimedia;
}
void OAIMessageSent::setMultimedia(const QList<OAIMultimediaGet> &multimedia) {
    m_multimedia = multimedia;
    m_multimedia_isSet = true;
}

bool OAIMessageSent::is_multimedia_Set() const{
    return m_multimedia_isSet;
}

bool OAIMessageSent::is_multimedia_Valid() const{
    return m_multimedia_isValid;
}

qint32 OAIMessageSent::getRetryTimeout() const {
    return m_retry_timeout;
}
void OAIMessageSent::setRetryTimeout(const qint32 &retry_timeout) {
    m_retry_timeout = retry_timeout;
    m_retry_timeout_isSet = true;
}

bool OAIMessageSent::is_retry_timeout_Set() const{
    return m_retry_timeout_isSet;
}

bool OAIMessageSent::is_retry_timeout_Valid() const{
    return m_retry_timeout_isValid;
}

QDateTime OAIMessageSent::getScheduleSend() const {
    return m_schedule_send;
}
void OAIMessageSent::setScheduleSend(const QDateTime &schedule_send) {
    m_schedule_send = schedule_send;
    m_schedule_send_isSet = true;
}

bool OAIMessageSent::is_schedule_send_Set() const{
    return m_schedule_send_isSet;
}

bool OAIMessageSent::is_schedule_send_Valid() const{
    return m_schedule_send_isValid;
}

QString OAIMessageSent::getStatus() const {
    return m_status;
}
void OAIMessageSent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessageSent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessageSent::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessageSent::getStatusCallbackUrl() const {
    return m_status_callback_url;
}
void OAIMessageSent::setStatusCallbackUrl(const QString &status_callback_url) {
    m_status_callback_url = status_callback_url;
    m_status_callback_url_isSet = true;
}

bool OAIMessageSent::is_status_callback_url_Set() const{
    return m_status_callback_url_isSet;
}

bool OAIMessageSent::is_status_callback_url_Valid() const{
    return m_status_callback_url_isValid;
}

QList<QString> OAIMessageSent::getTags() const {
    return m_tags;
}
void OAIMessageSent::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMessageSent::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMessageSent::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIMessageSent_to OAIMessageSent::getTo() const {
    return m_to;
}
void OAIMessageSent::setTo(const OAIMessageSent_to &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessageSent::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessageSent::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessageSent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multimedia.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_send_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageSent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
