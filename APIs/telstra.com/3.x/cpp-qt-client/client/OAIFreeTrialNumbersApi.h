/**
 * Messaging API v3.x
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.  # Introduction  # Features  # Getting Access to the API  # Getting Started  # Frequently Asked Questions 
 *
 * The version of the OpenAPI document: 3.x
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFreeTrialNumbersApi_H
#define OAI_OAIFreeTrialNumbersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTrialNumbers_request.h"
#include "OAIErrors.h"
#include "OAIFreeTrialNumbers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFreeTrialNumbersApi : public QObject {
    Q_OBJECT

public:
    OAIFreeTrialNumbersApi(const int timeOut = 0);
    ~OAIFreeTrialNumbersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_create_trial_numbers_request OAICreateTrialNumbers_request [required]
    * @param[in]  telstra_api_version QString [optional]
    */
    virtual void createTrialNumbers(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const OAICreateTrialNumbers_request &oai_create_trial_numbers_request, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_language QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  accept_charset QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  telstra_api_version QString [optional]
    */
    virtual void getTrialNumbers(const QString &content_language, const QString &authorization, const QString &accept, const QString &accept_charset, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &telstra_api_version = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTrialNumbersCallback(OAIHttpRequestWorker *worker);
    void getTrialNumbersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTrialNumbersSignal(OAIFreeTrialNumbers summary);
    void getTrialNumbersSignal(OAIFreeTrialNumbers summary);


    void createTrialNumbersSignalFull(OAIHttpRequestWorker *worker, OAIFreeTrialNumbers summary);
    void getTrialNumbersSignalFull(OAIHttpRequestWorker *worker, OAIFreeTrialNumbers summary);

    Q_DECL_DEPRECATED_X("Use createTrialNumbersSignalError() instead")
    void createTrialNumbersSignalE(OAIFreeTrialNumbers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrialNumbersSignalError(OAIFreeTrialNumbers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrialNumbersSignalError() instead")
    void getTrialNumbersSignalE(OAIFreeTrialNumbers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrialNumbersSignalError(OAIFreeTrialNumbers summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTrialNumbersSignalErrorFull() instead")
    void createTrialNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrialNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrialNumbersSignalErrorFull() instead")
    void getTrialNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrialNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
