/**
 * Stats
 * API that provides statistical data about Players and Matches.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  company_id QString [required]
    */
    virtual void halo5Company(const QString &company_id);

    /**
    * @param[in]  company_id QString [required]
    */
    virtual void halo5CompanyCommendations(const QString &company_id);

    /**
    * @param[in]  season_id QString [required]
    * @param[in]  playlist_id QString [required]
    * @param[in]  count double [optional]
    */
    virtual void halo5LeaderboardPlayerCSR(const QString &season_id, const QString &playlist_id, const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5MatchEvents(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5MatchResultArena(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5MatchResultCampaign(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5MatchResultCustom(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5MatchResultCustomLocal(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5MatchResultWarzone(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void halo5PCMatchResultCustom(const QString &match_id);

    /**
    * @param[in]  player QString [required]
    * @param[in]  modes QString [optional]
    * @param[in]  start double [optional]
    * @param[in]  count double [optional]
    * @param[in]  include_times bool [optional]
    */
    virtual void halo5PCPlayerMatchHistory(const QString &player, const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &include_times = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  players QString [required]
    */
    virtual void halo5PCPlayerServiceRecordsCustom(const QString &players);

    /**
    * @param[in]  player QString [required]
    */
    virtual void halo5PlayerCommendations(const QString &player);

    /**
    * @param[in]  player QString [required]
    * @param[in]  modes QString [optional]
    * @param[in]  start double [optional]
    * @param[in]  count double [optional]
    * @param[in]  include_times bool [optional]
    */
    virtual void halo5PlayerMatchHistory(const QString &player, const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &include_times = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  players QString [required]
    * @param[in]  season_id QString [optional]
    */
    virtual void halo5PlayerServiceRecordsArena(const QString &players, const ::OpenAPI::OptionalParam<QString> &season_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  players QString [required]
    */
    virtual void halo5PlayerServiceRecordsCampaign(const QString &players);

    /**
    * @param[in]  players QString [required]
    */
    virtual void halo5PlayerServiceRecordsCustom(const QString &players);

    /**
    * @param[in]  players QString [required]
    */
    virtual void halo5PlayerServiceRecordsCustomLocal(const QString &players);

    /**
    * @param[in]  players QString [required]
    */
    virtual void halo5PlayerServiceRecordsWarzone(const QString &players);

    /**
    * @param[in]  season_id QString [required]
    * @param[in]  playlist_id QString [required]
    * @param[in]  count double [optional]
    */
    virtual void haloWars2LeaderboardPlayerCSR(const QString &season_id, const QString &playlist_id, const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void haloWars2MatchEvents(const QString &match_id);

    /**
    * @param[in]  match_id QString [required]
    */
    virtual void haloWars2MatchResult(const QString &match_id);

    /**
    * @param[in]  player QString [required]
    */
    virtual void haloWars2PlayerCampaignProgress(const QString &player);

    /**
    * @param[in]  player QString [required]
    * @param[in]  match_type QString [optional]
    * @param[in]  start double [optional]
    * @param[in]  count double [optional]
    */
    virtual void haloWars2PlayerMatchHistory(const QString &player, const ::OpenAPI::OptionalParam<QString> &match_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  players QString [required]
    */
    virtual void haloWars2PlayerPlaylistRatings(const QString &playlist_id, const QString &players);

    /**
    * @param[in]  player QString [required]
    * @param[in]  season_id QString [required]
    */
    virtual void haloWars2PlayerSeasonStatsSummary(const QString &player, const QString &season_id);

    /**
    * @param[in]  player QString [required]
    */
    virtual void haloWars2PlayerStatsSummary(const QString &player);

    /**
    * @param[in]  players QString [required]
    */
    virtual void haloWars2PlayerXPs(const QString &players);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void halo5CompanyCallback(OAIHttpRequestWorker *worker);
    void halo5CompanyCommendationsCallback(OAIHttpRequestWorker *worker);
    void halo5LeaderboardPlayerCSRCallback(OAIHttpRequestWorker *worker);
    void halo5MatchEventsCallback(OAIHttpRequestWorker *worker);
    void halo5MatchResultArenaCallback(OAIHttpRequestWorker *worker);
    void halo5MatchResultCampaignCallback(OAIHttpRequestWorker *worker);
    void halo5MatchResultCustomCallback(OAIHttpRequestWorker *worker);
    void halo5MatchResultCustomLocalCallback(OAIHttpRequestWorker *worker);
    void halo5MatchResultWarzoneCallback(OAIHttpRequestWorker *worker);
    void halo5PCMatchResultCustomCallback(OAIHttpRequestWorker *worker);
    void halo5PCPlayerMatchHistoryCallback(OAIHttpRequestWorker *worker);
    void halo5PCPlayerServiceRecordsCustomCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerCommendationsCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerMatchHistoryCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsArenaCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsCampaignCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsCustomCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsCustomLocalCallback(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsWarzoneCallback(OAIHttpRequestWorker *worker);
    void haloWars2LeaderboardPlayerCSRCallback(OAIHttpRequestWorker *worker);
    void haloWars2MatchEventsCallback(OAIHttpRequestWorker *worker);
    void haloWars2MatchResultCallback(OAIHttpRequestWorker *worker);
    void haloWars2PlayerCampaignProgressCallback(OAIHttpRequestWorker *worker);
    void haloWars2PlayerMatchHistoryCallback(OAIHttpRequestWorker *worker);
    void haloWars2PlayerPlaylistRatingsCallback(OAIHttpRequestWorker *worker);
    void haloWars2PlayerSeasonStatsSummaryCallback(OAIHttpRequestWorker *worker);
    void haloWars2PlayerStatsSummaryCallback(OAIHttpRequestWorker *worker);
    void haloWars2PlayerXPsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void halo5CompanySignal();
    void halo5CompanyCommendationsSignal();
    void halo5LeaderboardPlayerCSRSignal();
    void halo5MatchEventsSignal();
    void halo5MatchResultArenaSignal();
    void halo5MatchResultCampaignSignal();
    void halo5MatchResultCustomSignal();
    void halo5MatchResultCustomLocalSignal();
    void halo5MatchResultWarzoneSignal();
    void halo5PCMatchResultCustomSignal();
    void halo5PCPlayerMatchHistorySignal();
    void halo5PCPlayerServiceRecordsCustomSignal();
    void halo5PlayerCommendationsSignal();
    void halo5PlayerMatchHistorySignal();
    void halo5PlayerServiceRecordsArenaSignal();
    void halo5PlayerServiceRecordsCampaignSignal();
    void halo5PlayerServiceRecordsCustomSignal();
    void halo5PlayerServiceRecordsCustomLocalSignal();
    void halo5PlayerServiceRecordsWarzoneSignal();
    void haloWars2LeaderboardPlayerCSRSignal();
    void haloWars2MatchEventsSignal();
    void haloWars2MatchResultSignal();
    void haloWars2PlayerCampaignProgressSignal();
    void haloWars2PlayerMatchHistorySignal();
    void haloWars2PlayerPlaylistRatingsSignal();
    void haloWars2PlayerSeasonStatsSummarySignal();
    void haloWars2PlayerStatsSummarySignal();
    void haloWars2PlayerXPsSignal();


    void halo5CompanySignalFull(OAIHttpRequestWorker *worker);
    void halo5CompanyCommendationsSignalFull(OAIHttpRequestWorker *worker);
    void halo5LeaderboardPlayerCSRSignalFull(OAIHttpRequestWorker *worker);
    void halo5MatchEventsSignalFull(OAIHttpRequestWorker *worker);
    void halo5MatchResultArenaSignalFull(OAIHttpRequestWorker *worker);
    void halo5MatchResultCampaignSignalFull(OAIHttpRequestWorker *worker);
    void halo5MatchResultCustomSignalFull(OAIHttpRequestWorker *worker);
    void halo5MatchResultCustomLocalSignalFull(OAIHttpRequestWorker *worker);
    void halo5MatchResultWarzoneSignalFull(OAIHttpRequestWorker *worker);
    void halo5PCMatchResultCustomSignalFull(OAIHttpRequestWorker *worker);
    void halo5PCPlayerMatchHistorySignalFull(OAIHttpRequestWorker *worker);
    void halo5PCPlayerServiceRecordsCustomSignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerCommendationsSignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerMatchHistorySignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsArenaSignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsCampaignSignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsCustomSignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsCustomLocalSignalFull(OAIHttpRequestWorker *worker);
    void halo5PlayerServiceRecordsWarzoneSignalFull(OAIHttpRequestWorker *worker);
    void haloWars2LeaderboardPlayerCSRSignalFull(OAIHttpRequestWorker *worker);
    void haloWars2MatchEventsSignalFull(OAIHttpRequestWorker *worker);
    void haloWars2MatchResultSignalFull(OAIHttpRequestWorker *worker);
    void haloWars2PlayerCampaignProgressSignalFull(OAIHttpRequestWorker *worker);
    void haloWars2PlayerMatchHistorySignalFull(OAIHttpRequestWorker *worker);
    void haloWars2PlayerPlaylistRatingsSignalFull(OAIHttpRequestWorker *worker);
    void haloWars2PlayerSeasonStatsSummarySignalFull(OAIHttpRequestWorker *worker);
    void haloWars2PlayerStatsSummarySignalFull(OAIHttpRequestWorker *worker);
    void haloWars2PlayerXPsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use halo5CompanySignalError() instead")
    void halo5CompanySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5CompanySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5CompanyCommendationsSignalError() instead")
    void halo5CompanyCommendationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5CompanyCommendationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5LeaderboardPlayerCSRSignalError() instead")
    void halo5LeaderboardPlayerCSRSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5LeaderboardPlayerCSRSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchEventsSignalError() instead")
    void halo5MatchEventsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchEventsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultArenaSignalError() instead")
    void halo5MatchResultArenaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultArenaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultCampaignSignalError() instead")
    void halo5MatchResultCampaignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultCampaignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultCustomSignalError() instead")
    void halo5MatchResultCustomSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultCustomSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultCustomLocalSignalError() instead")
    void halo5MatchResultCustomLocalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultCustomLocalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultWarzoneSignalError() instead")
    void halo5MatchResultWarzoneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultWarzoneSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PCMatchResultCustomSignalError() instead")
    void halo5PCMatchResultCustomSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PCMatchResultCustomSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PCPlayerMatchHistorySignalError() instead")
    void halo5PCPlayerMatchHistorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PCPlayerMatchHistorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PCPlayerServiceRecordsCustomSignalError() instead")
    void halo5PCPlayerServiceRecordsCustomSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PCPlayerServiceRecordsCustomSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerCommendationsSignalError() instead")
    void halo5PlayerCommendationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerCommendationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerMatchHistorySignalError() instead")
    void halo5PlayerMatchHistorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerMatchHistorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsArenaSignalError() instead")
    void halo5PlayerServiceRecordsArenaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsArenaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsCampaignSignalError() instead")
    void halo5PlayerServiceRecordsCampaignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsCampaignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsCustomSignalError() instead")
    void halo5PlayerServiceRecordsCustomSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsCustomSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsCustomLocalSignalError() instead")
    void halo5PlayerServiceRecordsCustomLocalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsCustomLocalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsWarzoneSignalError() instead")
    void halo5PlayerServiceRecordsWarzoneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsWarzoneSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2LeaderboardPlayerCSRSignalError() instead")
    void haloWars2LeaderboardPlayerCSRSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2LeaderboardPlayerCSRSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2MatchEventsSignalError() instead")
    void haloWars2MatchEventsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2MatchEventsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2MatchResultSignalError() instead")
    void haloWars2MatchResultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2MatchResultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerCampaignProgressSignalError() instead")
    void haloWars2PlayerCampaignProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerCampaignProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerMatchHistorySignalError() instead")
    void haloWars2PlayerMatchHistorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerMatchHistorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerPlaylistRatingsSignalError() instead")
    void haloWars2PlayerPlaylistRatingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerPlaylistRatingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerSeasonStatsSummarySignalError() instead")
    void haloWars2PlayerSeasonStatsSummarySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerSeasonStatsSummarySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerStatsSummarySignalError() instead")
    void haloWars2PlayerStatsSummarySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerStatsSummarySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerXPsSignalError() instead")
    void haloWars2PlayerXPsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerXPsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use halo5CompanySignalErrorFull() instead")
    void halo5CompanySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5CompanySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5CompanyCommendationsSignalErrorFull() instead")
    void halo5CompanyCommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5CompanyCommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5LeaderboardPlayerCSRSignalErrorFull() instead")
    void halo5LeaderboardPlayerCSRSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5LeaderboardPlayerCSRSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchEventsSignalErrorFull() instead")
    void halo5MatchEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultArenaSignalErrorFull() instead")
    void halo5MatchResultArenaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultArenaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultCampaignSignalErrorFull() instead")
    void halo5MatchResultCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultCustomSignalErrorFull() instead")
    void halo5MatchResultCustomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultCustomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultCustomLocalSignalErrorFull() instead")
    void halo5MatchResultCustomLocalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultCustomLocalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5MatchResultWarzoneSignalErrorFull() instead")
    void halo5MatchResultWarzoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5MatchResultWarzoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PCMatchResultCustomSignalErrorFull() instead")
    void halo5PCMatchResultCustomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PCMatchResultCustomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PCPlayerMatchHistorySignalErrorFull() instead")
    void halo5PCPlayerMatchHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PCPlayerMatchHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PCPlayerServiceRecordsCustomSignalErrorFull() instead")
    void halo5PCPlayerServiceRecordsCustomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PCPlayerServiceRecordsCustomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerCommendationsSignalErrorFull() instead")
    void halo5PlayerCommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerCommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerMatchHistorySignalErrorFull() instead")
    void halo5PlayerMatchHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerMatchHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsArenaSignalErrorFull() instead")
    void halo5PlayerServiceRecordsArenaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsArenaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsCampaignSignalErrorFull() instead")
    void halo5PlayerServiceRecordsCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsCustomSignalErrorFull() instead")
    void halo5PlayerServiceRecordsCustomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsCustomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsCustomLocalSignalErrorFull() instead")
    void halo5PlayerServiceRecordsCustomLocalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsCustomLocalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use halo5PlayerServiceRecordsWarzoneSignalErrorFull() instead")
    void halo5PlayerServiceRecordsWarzoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void halo5PlayerServiceRecordsWarzoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2LeaderboardPlayerCSRSignalErrorFull() instead")
    void haloWars2LeaderboardPlayerCSRSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2LeaderboardPlayerCSRSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2MatchEventsSignalErrorFull() instead")
    void haloWars2MatchEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2MatchEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2MatchResultSignalErrorFull() instead")
    void haloWars2MatchResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2MatchResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerCampaignProgressSignalErrorFull() instead")
    void haloWars2PlayerCampaignProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerCampaignProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerMatchHistorySignalErrorFull() instead")
    void haloWars2PlayerMatchHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerMatchHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerPlaylistRatingsSignalErrorFull() instead")
    void haloWars2PlayerPlaylistRatingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerPlaylistRatingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerSeasonStatsSummarySignalErrorFull() instead")
    void haloWars2PlayerSeasonStatsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerSeasonStatsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerStatsSummarySignalErrorFull() instead")
    void haloWars2PlayerStatsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerStatsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haloWars2PlayerXPsSignalErrorFull() instead")
    void haloWars2PlayerXPsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haloWars2PlayerXPsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
