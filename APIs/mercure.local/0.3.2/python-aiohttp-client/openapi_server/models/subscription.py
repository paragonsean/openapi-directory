# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, active: bool=None, id: str=None, last_event_id: str=None, payload: object=None, subscriber: str=None, topic: str=None, type: str=None):
        """Subscription - a model defined in OpenAPI

        :param context: The context of this Subscription.
        :param active: The active of this Subscription.
        :param id: The id of this Subscription.
        :param last_event_id: The last_event_id of this Subscription.
        :param payload: The payload of this Subscription.
        :param subscriber: The subscriber of this Subscription.
        :param topic: The topic of this Subscription.
        :param type: The type of this Subscription.
        """
        self.openapi_types = {
            'context': str,
            'active': bool,
            'id': str,
            'last_event_id': str,
            'payload': object,
            'subscriber': str,
            'topic': str,
            'type': str
        }

        self.attribute_map = {
            'context': '@context',
            'active': 'active',
            'id': 'id',
            'last_event_id': 'lastEventID',
            'payload': 'payload',
            'subscriber': 'subscriber',
            'topic': 'topic',
            'type': 'type'
        }

        self._context = context
        self._active = active
        self._id = id
        self._last_event_id = last_event_id
        self._payload = payload
        self._subscriber = subscriber
        self._topic = topic
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this Subscription.


        :return: The context of this Subscription.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Subscription.


        :param context: The context of this Subscription.
        :type context: str
        """

        self._context = context

    @property
    def active(self):
        """Gets the active of this Subscription.


        :return: The active of this Subscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Subscription.


        :param active: The active of this Subscription.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def id(self):
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_event_id(self):
        """Gets the last_event_id of this Subscription.


        :return: The last_event_id of this Subscription.
        :rtype: str
        """
        return self._last_event_id

    @last_event_id.setter
    def last_event_id(self, last_event_id):
        """Sets the last_event_id of this Subscription.


        :param last_event_id: The last_event_id of this Subscription.
        :type last_event_id: str
        """

        self._last_event_id = last_event_id

    @property
    def payload(self):
        """Gets the payload of this Subscription.


        :return: The payload of this Subscription.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Subscription.


        :param payload: The payload of this Subscription.
        :type payload: object
        """

        self._payload = payload

    @property
    def subscriber(self):
        """Gets the subscriber of this Subscription.


        :return: The subscriber of this Subscription.
        :rtype: str
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this Subscription.


        :param subscriber: The subscriber of this Subscription.
        :type subscriber: str
        """
        if subscriber is None:
            raise ValueError("Invalid value for `subscriber`, must not be `None`")

        self._subscriber = subscriber

    @property
    def topic(self):
        """Gets the topic of this Subscription.


        :return: The topic of this Subscription.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Subscription.


        :param topic: The topic of this Subscription.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def type(self):
        """Gets the type of this Subscription.


        :return: The type of this Subscription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscription.


        :param type: The type of this Subscription.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
