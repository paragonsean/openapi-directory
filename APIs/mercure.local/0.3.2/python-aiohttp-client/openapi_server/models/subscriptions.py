# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription import Subscription
from openapi_server import util


class Subscriptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, id: str=None, last_event_id: str=None, subscriptions: List[Subscription]=None, type: str=None):
        """Subscriptions - a model defined in OpenAPI

        :param context: The context of this Subscriptions.
        :param id: The id of this Subscriptions.
        :param last_event_id: The last_event_id of this Subscriptions.
        :param subscriptions: The subscriptions of this Subscriptions.
        :param type: The type of this Subscriptions.
        """
        self.openapi_types = {
            'context': str,
            'id': str,
            'last_event_id': str,
            'subscriptions': List[Subscription],
            'type': str
        }

        self.attribute_map = {
            'context': '@context',
            'id': 'id',
            'last_event_id': 'lastEventID',
            'subscriptions': 'subscriptions',
            'type': 'type'
        }

        self._context = context
        self._id = id
        self._last_event_id = last_event_id
        self._subscriptions = subscriptions
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscriptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscriptions of this Subscriptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this Subscriptions.


        :return: The context of this Subscriptions.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Subscriptions.


        :param context: The context of this Subscriptions.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def id(self):
        """Gets the id of this Subscriptions.


        :return: The id of this Subscriptions.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscriptions.


        :param id: The id of this Subscriptions.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_event_id(self):
        """Gets the last_event_id of this Subscriptions.


        :return: The last_event_id of this Subscriptions.
        :rtype: str
        """
        return self._last_event_id

    @last_event_id.setter
    def last_event_id(self, last_event_id):
        """Sets the last_event_id of this Subscriptions.


        :param last_event_id: The last_event_id of this Subscriptions.
        :type last_event_id: str
        """
        if last_event_id is None:
            raise ValueError("Invalid value for `last_event_id`, must not be `None`")

        self._last_event_id = last_event_id

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Subscriptions.


        :return: The subscriptions of this Subscriptions.
        :rtype: List[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Subscriptions.


        :param subscriptions: The subscriptions of this Subscriptions.
        :type subscriptions: List[Subscription]
        """
        if subscriptions is None:
            raise ValueError("Invalid value for `subscriptions`, must not be `None`")

        self._subscriptions = subscriptions

    @property
    def type(self):
        """Gets the type of this Subscriptions.


        :return: The type of this Subscriptions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscriptions.


        :param type: The type of this Subscriptions.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
