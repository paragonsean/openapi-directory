/**
 * The Mercure protocol
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * The version of the OpenAPI document: 0.3.2
 * Contact: contact@mercure.rocks
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Subscription from './Subscription';

/**
 * The Subscriptions model module.
 * @module model/Subscriptions
 * @version 0.3.2
 */
class Subscriptions {
    /**
     * Constructs a new <code>Subscriptions</code>.
     * @alias module:model/Subscriptions
     * @param context {String} 
     * @param id {String} 
     * @param lastEventID {String} 
     * @param subscriptions {Array.<module:model/Subscription>} 
     * @param type {String} 
     */
    constructor(context, id, lastEventID, subscriptions, type) { 
        
        Subscriptions.initialize(this, context, id, lastEventID, subscriptions, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, context, id, lastEventID, subscriptions, type) { 
        obj['@context'] = context;
        obj['id'] = id;
        obj['lastEventID'] = lastEventID;
        obj['subscriptions'] = subscriptions;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Subscriptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscriptions} obj Optional instance to populate.
     * @return {module:model/Subscriptions} The populated <code>Subscriptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscriptions();

            if (data.hasOwnProperty('@context')) {
                obj['@context'] = ApiClient.convertToType(data['@context'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastEventID')) {
                obj['lastEventID'] = ApiClient.convertToType(data['lastEventID'], 'String');
            }
            if (data.hasOwnProperty('subscriptions')) {
                obj['subscriptions'] = ApiClient.convertToType(data['subscriptions'], [Subscription]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscriptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscriptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Subscriptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['@context'] && !(typeof data['@context'] === 'string' || data['@context'] instanceof String)) {
            throw new Error("Expected the field `@context` to be a primitive type in the JSON string but got " + data['@context']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastEventID'] && !(typeof data['lastEventID'] === 'string' || data['lastEventID'] instanceof String)) {
            throw new Error("Expected the field `lastEventID` to be a primitive type in the JSON string but got " + data['lastEventID']);
        }
        if (data['subscriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subscriptions'])) {
                throw new Error("Expected the field `subscriptions` to be an array in the JSON data but got " + data['subscriptions']);
            }
            // validate the optional field `subscriptions` (array)
            for (const item of data['subscriptions']) {
                Subscription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Subscriptions.RequiredProperties = ["@context", "id", "lastEventID", "subscriptions", "type"];

/**
 * @member {String} @context
 */
Subscriptions.prototype['@context'] = undefined;

/**
 * @member {String} id
 */
Subscriptions.prototype['id'] = undefined;

/**
 * @member {String} lastEventID
 */
Subscriptions.prototype['lastEventID'] = undefined;

/**
 * @member {Array.<module:model/Subscription>} subscriptions
 */
Subscriptions.prototype['subscriptions'] = undefined;

/**
 * @member {String} type
 */
Subscriptions.prototype['type'] = undefined;






export default Subscriptions;

