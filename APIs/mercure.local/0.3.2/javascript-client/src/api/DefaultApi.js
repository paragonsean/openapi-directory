/**
 * The Mercure protocol
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * The version of the OpenAPI document: 0.3.2
 * Contact: contact@mercure.rocks
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subscriptions from '../model/Subscriptions';

/**
* Default service.
* @module api/DefaultApi
* @version 0.3.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the wellKnownMercureGet operation.
     * @callback module:api/DefaultApi~wellKnownMercureGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to updates
     * @param {Array.<String>} topic The topic to get updates from, can be a URI template (RFC6570).
     * @param {Object} opts Optional parameters
     * @param {String} [lastEventID] The last received event id, to retrieve missed events.
     * @param {String} [lastEventID2] The last received event id, to retrieve missed events, takes precedence over the query parameter.
     * @param {module:api/DefaultApi~wellKnownMercureGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    wellKnownMercureGet(topic, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling wellKnownMercureGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'topic': this.apiClient.buildCollectionParam(topic, 'multi'),
        'Last-Event-ID': opts['lastEventID']
      };
      let headerParams = {
        'Last-Event-ID': opts['lastEventID2']
      };
      let formParams = {
      };

      let authNames = ['Cookie', 'Bearer'];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/.well-known/mercure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellKnownMercurePost operation.
     * @callback module:api/DefaultApi~wellKnownMercurePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish an update
     * @param {String} data The content of the new version of this topic.
     * @param {Array.<String>} topic IRIs of the updated topic. If this key is present several times, the first occurrence is considered to be the canonical URL of the topic, and other ones are considered to be alternate URLs.
     * @param {Object} opts Optional parameters
     * @param {String} [id] The topic's revision identifier: it will be used as the SSE's `id` property.
     * @param {Boolean} [_private] To mark an update as private. If not provided, this update will be public.
     * @param {Number} [retry] The SSE's `retry` property (the reconnection time).
     * @param {String} [type] The SSE's `event` property (a specific event type).
     * @param {module:api/DefaultApi~wellKnownMercurePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    wellKnownMercurePost(data, topic, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling wellKnownMercurePost");
      }
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling wellKnownMercurePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': data,
        'id': opts['id'],
        'private': opts['_private'],
        'retry': opts['retry'],
        'topic': this.apiClient.buildCollectionParam(topic, 'csv'),
        'type': opts['type']
      };

      let authNames = ['Cookie', 'Bearer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/.well-known/mercure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellKnownMercureSubscriptionsGet operation.
     * @callback module:api/DefaultApi~wellKnownMercureSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Active subscriptions
     * @param {module:api/DefaultApi~wellKnownMercureSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscriptions}
     */
    wellKnownMercureSubscriptionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Cookie', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/ld+json'];
      let returnType = Subscriptions;
      return this.apiClient.callApi(
        '/.well-known/mercure/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellKnownMercureSubscriptionsTopicGet operation.
     * @callback module:api/DefaultApi~wellKnownMercureSubscriptionsTopicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Active subscriptions for the given topic
     * @param {String} topic 
     * @param {module:api/DefaultApi~wellKnownMercureSubscriptionsTopicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscriptions}
     */
    wellKnownMercureSubscriptionsTopicGet(topic, callback) {
      let postBody = null;
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling wellKnownMercureSubscriptionsTopicGet");
      }

      let pathParams = {
        'topic': topic
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Cookie', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/ld+json'];
      let returnType = Subscriptions;
      return this.apiClient.callApi(
        '/.well-known/mercure/subscriptions/{topic}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellKnownMercureSubscriptionsTopicSubscriberGet operation.
     * @callback module:api/DefaultApi~wellKnownMercureSubscriptionsTopicSubscriberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Active subscription for the given topic and subscriber
     * @param {String} topic 
     * @param {String} subscriber 
     * @param {module:api/DefaultApi~wellKnownMercureSubscriptionsTopicSubscriberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscriptions}
     */
    wellKnownMercureSubscriptionsTopicSubscriberGet(topic, subscriber, callback) {
      let postBody = null;
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling wellKnownMercureSubscriptionsTopicSubscriberGet");
      }
      // verify the required parameter 'subscriber' is set
      if (subscriber === undefined || subscriber === null) {
        throw new Error("Missing the required parameter 'subscriber' when calling wellKnownMercureSubscriptionsTopicSubscriberGet");
      }

      let pathParams = {
        'topic': topic,
        'subscriber': subscriber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Cookie', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/ld+json'];
      let returnType = Subscriptions;
      return this.apiClient.callApi(
        '/.well-known/mercure/subscriptions/{topic}/{subscriber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
