/*
 * The Mercure protocol
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * The version of the OpenAPI document: 0.3.2
 * Contact: contact@mercure.rocks
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Subscriptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wellKnownMercureGet
     * @param topic The topic to get updates from, can be a URI template (RFC6570). (required)
     * @param lastEventID The last received event id, to retrieve missed events. (optional)
     * @param lastEventID2 The last received event id, to retrieve missed events, takes precedence over the query parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event stream opened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing topic parameter or invalid URI template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription specification
     * @see <a href="https://mercure.rocks/spec#subscription">Subscribe to updates Documentation</a>
     */
    public okhttp3.Call wellKnownMercureGetCall(List<String> topic, String lastEventID, String lastEventID2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/.well-known/mercure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topic != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "topic", topic));
        }

        if (lastEventID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Last-Event-ID", lastEventID));
        }

        if (lastEventID2 != null) {
            localVarHeaderParams.put("Last-Event-ID", localVarApiClient.parameterToString(lastEventID2));
        }

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Cookie", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wellKnownMercureGetValidateBeforeCall(List<String> topic, String lastEventID, String lastEventID2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling wellKnownMercureGet(Async)");
        }

        return wellKnownMercureGetCall(topic, lastEventID, lastEventID2, _callback);

    }

    /**
     * Subscribe to updates
     * 
     * @param topic The topic to get updates from, can be a URI template (RFC6570). (required)
     * @param lastEventID The last received event id, to retrieve missed events. (optional)
     * @param lastEventID2 The last received event id, to retrieve missed events, takes precedence over the query parameter. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event stream opened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing topic parameter or invalid URI template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription specification
     * @see <a href="https://mercure.rocks/spec#subscription">Subscribe to updates Documentation</a>
     */
    public void wellKnownMercureGet(List<String> topic, String lastEventID, String lastEventID2) throws ApiException {
        wellKnownMercureGetWithHttpInfo(topic, lastEventID, lastEventID2);
    }

    /**
     * Subscribe to updates
     * 
     * @param topic The topic to get updates from, can be a URI template (RFC6570). (required)
     * @param lastEventID The last received event id, to retrieve missed events. (optional)
     * @param lastEventID2 The last received event id, to retrieve missed events, takes precedence over the query parameter. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event stream opened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing topic parameter or invalid URI template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription specification
     * @see <a href="https://mercure.rocks/spec#subscription">Subscribe to updates Documentation</a>
     */
    public ApiResponse<Void> wellKnownMercureGetWithHttpInfo(List<String> topic, String lastEventID, String lastEventID2) throws ApiException {
        okhttp3.Call localVarCall = wellKnownMercureGetValidateBeforeCall(topic, lastEventID, lastEventID2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Subscribe to updates (asynchronously)
     * 
     * @param topic The topic to get updates from, can be a URI template (RFC6570). (required)
     * @param lastEventID The last received event id, to retrieve missed events. (optional)
     * @param lastEventID2 The last received event id, to retrieve missed events, takes precedence over the query parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event stream opened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing topic parameter or invalid URI template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription specification
     * @see <a href="https://mercure.rocks/spec#subscription">Subscribe to updates Documentation</a>
     */
    public okhttp3.Call wellKnownMercureGetAsync(List<String> topic, String lastEventID, String lastEventID2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wellKnownMercureGetValidateBeforeCall(topic, lastEventID, lastEventID2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wellKnownMercurePost
     * @param data The content of the new version of this topic. (required)
     * @param topic IRIs of the updated topic. If this key is present several times, the first occurrence is considered to be the canonical URL of the topic, and other ones are considered to be alternate URLs. (required)
     * @param id The topic&#39;s revision identifier: it will be used as the SSE&#39;s &#x60;id&#x60; property. (optional)
     * @param _private To mark an update as private. If not provided, this update will be public. (optional)
     * @param retry The SSE&#39;s &#x60;retry&#x60; property (the reconnection time). (optional)
     * @param type The SSE&#39;s &#x60;event&#x60; property (a specific event type). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The id of this update </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Publishing specification
     * @see <a href="https://mercure.rocks/spec#publication">Publish an update Documentation</a>
     */
    public okhttp3.Call wellKnownMercurePostCall(String data, List<String> topic, String id, Boolean _private, Integer retry, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/.well-known/mercure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (_private != null) {
            localVarFormParams.put("private", _private);
        }

        if (retry != null) {
            localVarFormParams.put("retry", retry);
        }

        if (topic != null) {
            localVarFormParams.put("topic", topic);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Cookie", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wellKnownMercurePostValidateBeforeCall(String data, List<String> topic, String id, Boolean _private, Integer retry, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling wellKnownMercurePost(Async)");
        }

        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling wellKnownMercurePost(Async)");
        }

        return wellKnownMercurePostCall(data, topic, id, _private, retry, type, _callback);

    }

    /**
     * Publish an update
     * 
     * @param data The content of the new version of this topic. (required)
     * @param topic IRIs of the updated topic. If this key is present several times, the first occurrence is considered to be the canonical URL of the topic, and other ones are considered to be alternate URLs. (required)
     * @param id The topic&#39;s revision identifier: it will be used as the SSE&#39;s &#x60;id&#x60; property. (optional)
     * @param _private To mark an update as private. If not provided, this update will be public. (optional)
     * @param retry The SSE&#39;s &#x60;retry&#x60; property (the reconnection time). (optional)
     * @param type The SSE&#39;s &#x60;event&#x60; property (a specific event type). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The id of this update </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Publishing specification
     * @see <a href="https://mercure.rocks/spec#publication">Publish an update Documentation</a>
     */
    public void wellKnownMercurePost(String data, List<String> topic, String id, Boolean _private, Integer retry, String type) throws ApiException {
        wellKnownMercurePostWithHttpInfo(data, topic, id, _private, retry, type);
    }

    /**
     * Publish an update
     * 
     * @param data The content of the new version of this topic. (required)
     * @param topic IRIs of the updated topic. If this key is present several times, the first occurrence is considered to be the canonical URL of the topic, and other ones are considered to be alternate URLs. (required)
     * @param id The topic&#39;s revision identifier: it will be used as the SSE&#39;s &#x60;id&#x60; property. (optional)
     * @param _private To mark an update as private. If not provided, this update will be public. (optional)
     * @param retry The SSE&#39;s &#x60;retry&#x60; property (the reconnection time). (optional)
     * @param type The SSE&#39;s &#x60;event&#x60; property (a specific event type). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The id of this update </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Publishing specification
     * @see <a href="https://mercure.rocks/spec#publication">Publish an update Documentation</a>
     */
    public ApiResponse<Void> wellKnownMercurePostWithHttpInfo(String data, List<String> topic, String id, Boolean _private, Integer retry, String type) throws ApiException {
        okhttp3.Call localVarCall = wellKnownMercurePostValidateBeforeCall(data, topic, id, _private, retry, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publish an update (asynchronously)
     * 
     * @param data The content of the new version of this topic. (required)
     * @param topic IRIs of the updated topic. If this key is present several times, the first occurrence is considered to be the canonical URL of the topic, and other ones are considered to be alternate URLs. (required)
     * @param id The topic&#39;s revision identifier: it will be used as the SSE&#39;s &#x60;id&#x60; property. (optional)
     * @param _private To mark an update as private. If not provided, this update will be public. (optional)
     * @param retry The SSE&#39;s &#x60;retry&#x60; property (the reconnection time). (optional)
     * @param type The SSE&#39;s &#x60;event&#x60; property (a specific event type). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The id of this update </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Publishing specification
     * @see <a href="https://mercure.rocks/spec#publication">Publish an update Documentation</a>
     */
    public okhttp3.Call wellKnownMercurePostAsync(String data, List<String> topic, String id, Boolean _private, Integer retry, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wellKnownMercurePostValidateBeforeCall(data, topic, id, _private, retry, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wellKnownMercureSubscriptionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions Documentation</a>
     */
    public okhttp3.Call wellKnownMercureSubscriptionsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/.well-known/mercure/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Cookie", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wellKnownMercureSubscriptionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return wellKnownMercureSubscriptionsGetCall(_callback);

    }

    /**
     * Active subscriptions
     * 
     * @return Subscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions Documentation</a>
     */
    public Subscriptions wellKnownMercureSubscriptionsGet() throws ApiException {
        ApiResponse<Subscriptions> localVarResp = wellKnownMercureSubscriptionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Active subscriptions
     * 
     * @return ApiResponse&lt;Subscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions Documentation</a>
     */
    public ApiResponse<Subscriptions> wellKnownMercureSubscriptionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = wellKnownMercureSubscriptionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Subscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Active subscriptions (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions Documentation</a>
     */
    public okhttp3.Call wellKnownMercureSubscriptionsGetAsync(final ApiCallback<Subscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = wellKnownMercureSubscriptionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Subscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wellKnownMercureSubscriptionsTopicGet
     * @param topic  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions for the given topic Documentation</a>
     */
    public okhttp3.Call wellKnownMercureSubscriptionsTopicGetCall(String topic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/.well-known/mercure/subscriptions/{topic}"
            .replace("{" + "topic" + "}", localVarApiClient.escapeString(topic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Cookie", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wellKnownMercureSubscriptionsTopicGetValidateBeforeCall(String topic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling wellKnownMercureSubscriptionsTopicGet(Async)");
        }

        return wellKnownMercureSubscriptionsTopicGetCall(topic, _callback);

    }

    /**
     * Active subscriptions for the given topic
     * 
     * @param topic  (required)
     * @return Subscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions for the given topic Documentation</a>
     */
    public Subscriptions wellKnownMercureSubscriptionsTopicGet(String topic) throws ApiException {
        ApiResponse<Subscriptions> localVarResp = wellKnownMercureSubscriptionsTopicGetWithHttpInfo(topic);
        return localVarResp.getData();
    }

    /**
     * Active subscriptions for the given topic
     * 
     * @param topic  (required)
     * @return ApiResponse&lt;Subscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions for the given topic Documentation</a>
     */
    public ApiResponse<Subscriptions> wellKnownMercureSubscriptionsTopicGetWithHttpInfo(String topic) throws ApiException {
        okhttp3.Call localVarCall = wellKnownMercureSubscriptionsTopicGetValidateBeforeCall(topic, null);
        Type localVarReturnType = new TypeToken<Subscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Active subscriptions for the given topic (asynchronously)
     * 
     * @param topic  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#subscription-api">Active subscriptions for the given topic Documentation</a>
     */
    public okhttp3.Call wellKnownMercureSubscriptionsTopicGetAsync(String topic, final ApiCallback<Subscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = wellKnownMercureSubscriptionsTopicGetValidateBeforeCall(topic, _callback);
        Type localVarReturnType = new TypeToken<Subscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wellKnownMercureSubscriptionsTopicSubscriberGet
     * @param topic  (required)
     * @param subscriber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#active-subscriptions">Active subscription for the given topic and subscriber Documentation</a>
     */
    public okhttp3.Call wellKnownMercureSubscriptionsTopicSubscriberGetCall(String topic, String subscriber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/.well-known/mercure/subscriptions/{topic}/{subscriber}"
            .replace("{" + "topic" + "}", localVarApiClient.escapeString(topic.toString()))
            .replace("{" + "subscriber" + "}", localVarApiClient.escapeString(subscriber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Cookie", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wellKnownMercureSubscriptionsTopicSubscriberGetValidateBeforeCall(String topic, String subscriber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling wellKnownMercureSubscriptionsTopicSubscriberGet(Async)");
        }

        // verify the required parameter 'subscriber' is set
        if (subscriber == null) {
            throw new ApiException("Missing the required parameter 'subscriber' when calling wellKnownMercureSubscriptionsTopicSubscriberGet(Async)");
        }

        return wellKnownMercureSubscriptionsTopicSubscriberGetCall(topic, subscriber, _callback);

    }

    /**
     * Active subscription for the given topic and subscriber
     * 
     * @param topic  (required)
     * @param subscriber  (required)
     * @return Subscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#active-subscriptions">Active subscription for the given topic and subscriber Documentation</a>
     */
    public Subscriptions wellKnownMercureSubscriptionsTopicSubscriberGet(String topic, String subscriber) throws ApiException {
        ApiResponse<Subscriptions> localVarResp = wellKnownMercureSubscriptionsTopicSubscriberGetWithHttpInfo(topic, subscriber);
        return localVarResp.getData();
    }

    /**
     * Active subscription for the given topic and subscriber
     * 
     * @param topic  (required)
     * @param subscriber  (required)
     * @return ApiResponse&lt;Subscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#active-subscriptions">Active subscription for the given topic and subscriber Documentation</a>
     */
    public ApiResponse<Subscriptions> wellKnownMercureSubscriptionsTopicSubscriberGetWithHttpInfo(String topic, String subscriber) throws ApiException {
        okhttp3.Call localVarCall = wellKnownMercureSubscriptionsTopicSubscriberGetValidateBeforeCall(topic, subscriber, null);
        Type localVarReturnType = new TypeToken<Subscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Active subscription for the given topic and subscriber (asynchronously)
     * 
     * @param topic  (required)
     * @param subscriber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of active subscriptions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized (missing or invalid JWT). </td><td>  -  </td></tr>
     </table>
     * Subscription API
     * @see <a href="https://mercure.rocks/spec#active-subscriptions">Active subscription for the given topic and subscriber Documentation</a>
     */
    public okhttp3.Call wellKnownMercureSubscriptionsTopicSubscriberGetAsync(String topic, String subscriber, final ApiCallback<Subscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = wellKnownMercureSubscriptionsTopicSubscriberGetValidateBeforeCall(topic, subscriber, _callback);
        Type localVarReturnType = new TypeToken<Subscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
