/**
 * The Mercure protocol
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * The version of the OpenAPI document: 0.3.2
 * Contact: contact@mercure.rocks
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptions::OAISubscriptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptions::OAISubscriptions() {
    this->initializeModel();
}

OAISubscriptions::~OAISubscriptions() {}

void OAISubscriptions::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_event_id_isSet = false;
    m_last_event_id_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISubscriptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptions::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_event_id_isValid = ::OpenAPI::fromJsonValue(m_last_event_id, json[QString("lastEventID")]);
    m_last_event_id_isSet = !json[QString("lastEventID")].isNull() && m_last_event_id_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISubscriptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptions::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_event_id_isSet) {
        obj.insert(QString("lastEventID"), ::OpenAPI::toJsonValue(m_last_event_id));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISubscriptions::getContext() const {
    return m_context;
}
void OAISubscriptions::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISubscriptions::is_context_Set() const{
    return m_context_isSet;
}

bool OAISubscriptions::is_context_Valid() const{
    return m_context_isValid;
}

QString OAISubscriptions::getId() const {
    return m_id;
}
void OAISubscriptions::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptions::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptions::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubscriptions::getLastEventId() const {
    return m_last_event_id;
}
void OAISubscriptions::setLastEventId(const QString &last_event_id) {
    m_last_event_id = last_event_id;
    m_last_event_id_isSet = true;
}

bool OAISubscriptions::is_last_event_id_Set() const{
    return m_last_event_id_isSet;
}

bool OAISubscriptions::is_last_event_id_Valid() const{
    return m_last_event_id_isValid;
}

QList<OAISubscription> OAISubscriptions::getSubscriptions() const {
    return m_subscriptions;
}
void OAISubscriptions::setSubscriptions(const QList<OAISubscription> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAISubscriptions::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAISubscriptions::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

QString OAISubscriptions::getType() const {
    return m_type;
}
void OAISubscriptions::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISubscriptions::is_type_Set() const{
    return m_type_isSet;
}

bool OAISubscriptions::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISubscriptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_isValid && m_id_isValid && m_last_event_id_isValid && m_subscriptions_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
