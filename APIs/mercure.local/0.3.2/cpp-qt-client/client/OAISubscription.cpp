/**
 * The Mercure protocol
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * The version of the OpenAPI document: 0.3.2
 * Contact: contact@mercure.rocks
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_event_id_isSet = false;
    m_last_event_id_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_subscriber_isSet = false;
    m_subscriber_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_event_id_isValid = ::OpenAPI::fromJsonValue(m_last_event_id, json[QString("lastEventID")]);
    m_last_event_id_isSet = !json[QString("lastEventID")].isNull() && m_last_event_id_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_subscriber_isValid = ::OpenAPI::fromJsonValue(m_subscriber, json[QString("subscriber")]);
    m_subscriber_isSet = !json[QString("subscriber")].isNull() && m_subscriber_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_event_id_isSet) {
        obj.insert(QString("lastEventID"), ::OpenAPI::toJsonValue(m_last_event_id));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_subscriber_isSet) {
        obj.insert(QString("subscriber"), ::OpenAPI::toJsonValue(m_subscriber));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISubscription::getContext() const {
    return m_context;
}
void OAISubscription::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISubscription::is_context_Set() const{
    return m_context_isSet;
}

bool OAISubscription::is_context_Valid() const{
    return m_context_isValid;
}

bool OAISubscription::isActive() const {
    return m_active;
}
void OAISubscription::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISubscription::is_active_Set() const{
    return m_active_isSet;
}

bool OAISubscription::is_active_Valid() const{
    return m_active_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubscription::getLastEventId() const {
    return m_last_event_id;
}
void OAISubscription::setLastEventId(const QString &last_event_id) {
    m_last_event_id = last_event_id;
    m_last_event_id_isSet = true;
}

bool OAISubscription::is_last_event_id_Set() const{
    return m_last_event_id_isSet;
}

bool OAISubscription::is_last_event_id_Valid() const{
    return m_last_event_id_isValid;
}

OAIObject OAISubscription::getPayload() const {
    return m_payload;
}
void OAISubscription::setPayload(const OAIObject &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAISubscription::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAISubscription::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAISubscription::getSubscriber() const {
    return m_subscriber;
}
void OAISubscription::setSubscriber(const QString &subscriber) {
    m_subscriber = subscriber;
    m_subscriber_isSet = true;
}

bool OAISubscription::is_subscriber_Set() const{
    return m_subscriber_isSet;
}

bool OAISubscription::is_subscriber_Valid() const{
    return m_subscriber_isValid;
}

QString OAISubscription::getTopic() const {
    return m_topic;
}
void OAISubscription::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAISubscription::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAISubscription::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAISubscription::getType() const {
    return m_type;
}
void OAISubscription::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISubscription::is_type_Set() const{
    return m_type_isSet;
}

bool OAISubscription::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_id_isValid && m_subscriber_isValid && m_topic_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
