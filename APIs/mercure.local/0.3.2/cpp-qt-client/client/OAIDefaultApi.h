/**
 * The Mercure protocol
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * The version of the OpenAPI document: 0.3.2
 * Contact: contact@mercure.rocks
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISubscriptions.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  topic QList<QString> [required]
    * @param[in]  last_event_id QString [optional]
    * @param[in]  last_event_id2 QString [optional]
    */
    virtual void wellKnownMercureGet(const QList<QString> &topic, const ::OpenAPI::OptionalParam<QString> &last_event_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_event_id2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data QString [required]
    * @param[in]  topic QList<QString> [required]
    * @param[in]  id QString [optional]
    * @param[in]  r_private bool [optional]
    * @param[in]  retry qint32 [optional]
    * @param[in]  type QString [optional]
    */
    virtual void wellKnownMercurePost(const QString &data, const QList<QString> &topic, const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &retry = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());


    virtual void wellKnownMercureSubscriptionsGet();

    /**
    * @param[in]  topic QString [required]
    */
    virtual void wellKnownMercureSubscriptionsTopicGet(const QString &topic);

    /**
    * @param[in]  topic QString [required]
    * @param[in]  subscriber QString [required]
    */
    virtual void wellKnownMercureSubscriptionsTopicSubscriberGet(const QString &topic, const QString &subscriber);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void wellKnownMercureGetCallback(OAIHttpRequestWorker *worker);
    void wellKnownMercurePostCallback(OAIHttpRequestWorker *worker);
    void wellKnownMercureSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void wellKnownMercureSubscriptionsTopicGetCallback(OAIHttpRequestWorker *worker);
    void wellKnownMercureSubscriptionsTopicSubscriberGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void wellKnownMercureGetSignal();
    void wellKnownMercurePostSignal();
    void wellKnownMercureSubscriptionsGetSignal(OAISubscriptions summary);
    void wellKnownMercureSubscriptionsTopicGetSignal(OAISubscriptions summary);
    void wellKnownMercureSubscriptionsTopicSubscriberGetSignal(OAISubscriptions summary);


    void wellKnownMercureGetSignalFull(OAIHttpRequestWorker *worker);
    void wellKnownMercurePostSignalFull(OAIHttpRequestWorker *worker);
    void wellKnownMercureSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAISubscriptions summary);
    void wellKnownMercureSubscriptionsTopicGetSignalFull(OAIHttpRequestWorker *worker, OAISubscriptions summary);
    void wellKnownMercureSubscriptionsTopicSubscriberGetSignalFull(OAIHttpRequestWorker *worker, OAISubscriptions summary);

    Q_DECL_DEPRECATED_X("Use wellKnownMercureGetSignalError() instead")
    void wellKnownMercureGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercurePostSignalError() instead")
    void wellKnownMercurePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercurePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercureSubscriptionsGetSignalError() instead")
    void wellKnownMercureSubscriptionsGetSignalE(OAISubscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureSubscriptionsGetSignalError(OAISubscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercureSubscriptionsTopicGetSignalError() instead")
    void wellKnownMercureSubscriptionsTopicGetSignalE(OAISubscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureSubscriptionsTopicGetSignalError(OAISubscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercureSubscriptionsTopicSubscriberGetSignalError() instead")
    void wellKnownMercureSubscriptionsTopicSubscriberGetSignalE(OAISubscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureSubscriptionsTopicSubscriberGetSignalError(OAISubscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use wellKnownMercureGetSignalErrorFull() instead")
    void wellKnownMercureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercurePostSignalErrorFull() instead")
    void wellKnownMercurePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercurePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercureSubscriptionsGetSignalErrorFull() instead")
    void wellKnownMercureSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercureSubscriptionsTopicGetSignalErrorFull() instead")
    void wellKnownMercureSubscriptionsTopicGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureSubscriptionsTopicGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellKnownMercureSubscriptionsTopicSubscriberGetSignalErrorFull() instead")
    void wellKnownMercureSubscriptionsTopicSubscriberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellKnownMercureSubscriptionsTopicSubscriberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
