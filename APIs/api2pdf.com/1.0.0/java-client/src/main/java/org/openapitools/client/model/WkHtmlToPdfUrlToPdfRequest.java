/*
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WkHtmlToPdfAdvancedOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WkHtmlToPdfUrlToPdfRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:08.432451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WkHtmlToPdfUrlToPdfRequest {
  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_INLINE_PDF = "inlinePdf";
  @SerializedName(SERIALIZED_NAME_INLINE_PDF)
  private Boolean inlinePdf;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private WkHtmlToPdfAdvancedOptions options;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public WkHtmlToPdfUrlToPdfRequest() {
  }

  public WkHtmlToPdfUrlToPdfRequest fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public WkHtmlToPdfUrlToPdfRequest inlinePdf(Boolean inlinePdf) {
    this.inlinePdf = inlinePdf;
    return this;
  }

  /**
   * Get inlinePdf
   * @return inlinePdf
   */
  @javax.annotation.Nullable
  public Boolean getInlinePdf() {
    return inlinePdf;
  }

  public void setInlinePdf(Boolean inlinePdf) {
    this.inlinePdf = inlinePdf;
  }


  public WkHtmlToPdfUrlToPdfRequest options(WkHtmlToPdfAdvancedOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public WkHtmlToPdfAdvancedOptions getOptions() {
    return options;
  }

  public void setOptions(WkHtmlToPdfAdvancedOptions options) {
    this.options = options;
  }


  public WkHtmlToPdfUrlToPdfRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WkHtmlToPdfUrlToPdfRequest wkHtmlToPdfUrlToPdfRequest = (WkHtmlToPdfUrlToPdfRequest) o;
    return Objects.equals(this.fileName, wkHtmlToPdfUrlToPdfRequest.fileName) &&
        Objects.equals(this.inlinePdf, wkHtmlToPdfUrlToPdfRequest.inlinePdf) &&
        Objects.equals(this.options, wkHtmlToPdfUrlToPdfRequest.options) &&
        Objects.equals(this.url, wkHtmlToPdfUrlToPdfRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileName, inlinePdf, options, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WkHtmlToPdfUrlToPdfRequest {\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    inlinePdf: ").append(toIndentedString(inlinePdf)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileName");
    openapiFields.add("inlinePdf");
    openapiFields.add("options");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WkHtmlToPdfUrlToPdfRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WkHtmlToPdfUrlToPdfRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WkHtmlToPdfUrlToPdfRequest is not found in the empty JSON string", WkHtmlToPdfUrlToPdfRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WkHtmlToPdfUrlToPdfRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WkHtmlToPdfUrlToPdfRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WkHtmlToPdfUrlToPdfRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        WkHtmlToPdfAdvancedOptions.validateJsonElement(jsonObj.get("options"));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WkHtmlToPdfUrlToPdfRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WkHtmlToPdfUrlToPdfRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WkHtmlToPdfUrlToPdfRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WkHtmlToPdfUrlToPdfRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WkHtmlToPdfUrlToPdfRequest>() {
           @Override
           public void write(JsonWriter out, WkHtmlToPdfUrlToPdfRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WkHtmlToPdfUrlToPdfRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WkHtmlToPdfUrlToPdfRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WkHtmlToPdfUrlToPdfRequest
   * @throws IOException if the JSON string is invalid with respect to WkHtmlToPdfUrlToPdfRequest
   */
  public static WkHtmlToPdfUrlToPdfRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WkHtmlToPdfUrlToPdfRequest.class);
  }

  /**
   * Convert an instance of WkHtmlToPdfUrlToPdfRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

