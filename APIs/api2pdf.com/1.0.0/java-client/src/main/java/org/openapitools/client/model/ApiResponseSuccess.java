/*
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiResponseSuccess
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:08.432451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiResponseSuccess {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_MB_IN = "mbIn";
  @SerializedName(SERIALIZED_NAME_MB_IN)
  private BigDecimal mbIn;

  public static final String SERIALIZED_NAME_MB_OUT = "mbOut";
  @SerializedName(SERIALIZED_NAME_MB_OUT)
  private BigDecimal mbOut;

  public static final String SERIALIZED_NAME_PDF = "pdf";
  @SerializedName(SERIALIZED_NAME_PDF)
  private String pdf;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public ApiResponseSuccess() {
  }

  public ApiResponseSuccess cost(BigDecimal cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Cost of the operation (mbIn + mbOut) * $.001
   * @return cost
   */
  @javax.annotation.Nullable
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public ApiResponseSuccess mbIn(BigDecimal mbIn) {
    this.mbIn = mbIn;
    return this;
  }

  /**
   * The amount of megabytes of bandwidth used to process the pdf
   * @return mbIn
   */
  @javax.annotation.Nullable
  public BigDecimal getMbIn() {
    return mbIn;
  }

  public void setMbIn(BigDecimal mbIn) {
    this.mbIn = mbIn;
  }


  public ApiResponseSuccess mbOut(BigDecimal mbOut) {
    this.mbOut = mbOut;
    return this;
  }

  /**
   * The amount of megabytes of bandwidth generated from the resulting pdf
   * @return mbOut
   */
  @javax.annotation.Nullable
  public BigDecimal getMbOut() {
    return mbOut;
  }

  public void setMbOut(BigDecimal mbOut) {
    this.mbOut = mbOut;
  }


  public ApiResponseSuccess pdf(String pdf) {
    this.pdf = pdf;
    return this;
  }

  /**
   * A url to the PDF that will exist only for 24 hours
   * @return pdf
   */
  @javax.annotation.Nullable
  public String getPdf() {
    return pdf;
  }

  public void setPdf(String pdf) {
    this.pdf = pdf;
  }


  public ApiResponseSuccess success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Will be true if the operation suceeded
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiResponseSuccess apiResponseSuccess = (ApiResponseSuccess) o;
    return Objects.equals(this.cost, apiResponseSuccess.cost) &&
        Objects.equals(this.mbIn, apiResponseSuccess.mbIn) &&
        Objects.equals(this.mbOut, apiResponseSuccess.mbOut) &&
        Objects.equals(this.pdf, apiResponseSuccess.pdf) &&
        Objects.equals(this.success, apiResponseSuccess.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, mbIn, mbOut, pdf, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiResponseSuccess {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    mbIn: ").append(toIndentedString(mbIn)).append("\n");
    sb.append("    mbOut: ").append(toIndentedString(mbOut)).append("\n");
    sb.append("    pdf: ").append(toIndentedString(pdf)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost");
    openapiFields.add("mbIn");
    openapiFields.add("mbOut");
    openapiFields.add("pdf");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiResponseSuccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiResponseSuccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiResponseSuccess is not found in the empty JSON string", ApiResponseSuccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiResponseSuccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiResponseSuccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pdf") != null && !jsonObj.get("pdf").isJsonNull()) && !jsonObj.get("pdf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiResponseSuccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiResponseSuccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiResponseSuccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiResponseSuccess.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiResponseSuccess>() {
           @Override
           public void write(JsonWriter out, ApiResponseSuccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiResponseSuccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiResponseSuccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiResponseSuccess
   * @throws IOException if the JSON string is invalid with respect to ApiResponseSuccess
   */
  public static ApiResponseSuccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiResponseSuccess.class);
  }

  /**
   * Convert an instance of ApiResponseSuccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

