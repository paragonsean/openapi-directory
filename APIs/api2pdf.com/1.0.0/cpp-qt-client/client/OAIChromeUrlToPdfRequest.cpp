/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChromeUrlToPdfRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChromeUrlToPdfRequest::OAIChromeUrlToPdfRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChromeUrlToPdfRequest::OAIChromeUrlToPdfRequest() {
    this->initializeModel();
}

OAIChromeUrlToPdfRequest::~OAIChromeUrlToPdfRequest() {}

void OAIChromeUrlToPdfRequest::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_inline_pdf_isSet = false;
    m_inline_pdf_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIChromeUrlToPdfRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChromeUrlToPdfRequest::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_inline_pdf_isValid = ::OpenAPI::fromJsonValue(m_inline_pdf, json[QString("inlinePdf")]);
    m_inline_pdf_isSet = !json[QString("inlinePdf")].isNull() && m_inline_pdf_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIChromeUrlToPdfRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChromeUrlToPdfRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_inline_pdf_isSet) {
        obj.insert(QString("inlinePdf"), ::OpenAPI::toJsonValue(m_inline_pdf));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIChromeUrlToPdfRequest::getFileName() const {
    return m_file_name;
}
void OAIChromeUrlToPdfRequest::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIChromeUrlToPdfRequest::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIChromeUrlToPdfRequest::is_file_name_Valid() const{
    return m_file_name_isValid;
}

bool OAIChromeUrlToPdfRequest::isInlinePdf() const {
    return m_inline_pdf;
}
void OAIChromeUrlToPdfRequest::setInlinePdf(const bool &inline_pdf) {
    m_inline_pdf = inline_pdf;
    m_inline_pdf_isSet = true;
}

bool OAIChromeUrlToPdfRequest::is_inline_pdf_Set() const{
    return m_inline_pdf_isSet;
}

bool OAIChromeUrlToPdfRequest::is_inline_pdf_Valid() const{
    return m_inline_pdf_isValid;
}

OAIChromeAdvancedOptions OAIChromeUrlToPdfRequest::getOptions() const {
    return m_options;
}
void OAIChromeUrlToPdfRequest::setOptions(const OAIChromeAdvancedOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIChromeUrlToPdfRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAIChromeUrlToPdfRequest::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIChromeUrlToPdfRequest::getUrl() const {
    return m_url;
}
void OAIChromeUrlToPdfRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIChromeUrlToPdfRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChromeUrlToPdfRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIChromeUrlToPdfRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_pdf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChromeUrlToPdfRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
