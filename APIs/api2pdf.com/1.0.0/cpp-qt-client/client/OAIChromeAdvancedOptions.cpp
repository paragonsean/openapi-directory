/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChromeAdvancedOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChromeAdvancedOptions::OAIChromeAdvancedOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChromeAdvancedOptions::OAIChromeAdvancedOptions() {
    this->initializeModel();
}

OAIChromeAdvancedOptions::~OAIChromeAdvancedOptions() {}

void OAIChromeAdvancedOptions::initializeModel() {

    m_landscape_isSet = false;
    m_landscape_isValid = false;

    m_print_background_isSet = false;
    m_print_background_isValid = false;
}

void OAIChromeAdvancedOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChromeAdvancedOptions::fromJsonObject(QJsonObject json) {

    m_landscape_isValid = ::OpenAPI::fromJsonValue(m_landscape, json[QString("landscape")]);
    m_landscape_isSet = !json[QString("landscape")].isNull() && m_landscape_isValid;

    m_print_background_isValid = ::OpenAPI::fromJsonValue(m_print_background, json[QString("printBackground")]);
    m_print_background_isSet = !json[QString("printBackground")].isNull() && m_print_background_isValid;
}

QString OAIChromeAdvancedOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChromeAdvancedOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_landscape_isSet) {
        obj.insert(QString("landscape"), ::OpenAPI::toJsonValue(m_landscape));
    }
    if (m_print_background_isSet) {
        obj.insert(QString("printBackground"), ::OpenAPI::toJsonValue(m_print_background));
    }
    return obj;
}

QString OAIChromeAdvancedOptions::getLandscape() const {
    return m_landscape;
}
void OAIChromeAdvancedOptions::setLandscape(const QString &landscape) {
    m_landscape = landscape;
    m_landscape_isSet = true;
}

bool OAIChromeAdvancedOptions::is_landscape_Set() const{
    return m_landscape_isSet;
}

bool OAIChromeAdvancedOptions::is_landscape_Valid() const{
    return m_landscape_isValid;
}

bool OAIChromeAdvancedOptions::isPrintBackground() const {
    return m_print_background;
}
void OAIChromeAdvancedOptions::setPrintBackground(const bool &print_background) {
    m_print_background = print_background;
    m_print_background_isSet = true;
}

bool OAIChromeAdvancedOptions::is_print_background_Set() const{
    return m_print_background_isSet;
}

bool OAIChromeAdvancedOptions::is_print_background_Valid() const{
    return m_print_background_isValid;
}

bool OAIChromeAdvancedOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_landscape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_background_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChromeAdvancedOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
