/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApiResponseSuccess.h
 *
 * 
 */

#ifndef OAIApiResponseSuccess_H
#define OAIApiResponseSuccess_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApiResponseSuccess : public OAIObject {
public:
    OAIApiResponseSuccess();
    OAIApiResponseSuccess(QString json);
    ~OAIApiResponseSuccess() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCost() const;
    void setCost(const double &cost);
    bool is_cost_Set() const;
    bool is_cost_Valid() const;

    double getMbIn() const;
    void setMbIn(const double &mb_in);
    bool is_mb_in_Set() const;
    bool is_mb_in_Valid() const;

    double getMbOut() const;
    void setMbOut(const double &mb_out);
    bool is_mb_out_Set() const;
    bool is_mb_out_Valid() const;

    QString getPdf() const;
    void setPdf(const QString &pdf);
    bool is_pdf_Set() const;
    bool is_pdf_Valid() const;

    bool isSuccess() const;
    void setSuccess(const bool &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cost;
    bool m_cost_isSet;
    bool m_cost_isValid;

    double m_mb_in;
    bool m_mb_in_isSet;
    bool m_mb_in_isValid;

    double m_mb_out;
    bool m_mb_out_isSet;
    bool m_mb_out_isValid;

    QString m_pdf;
    bool m_pdf_isSet;
    bool m_pdf_isValid;

    bool m_success;
    bool m_success_isSet;
    bool m_success_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApiResponseSuccess)

#endif // OAIApiResponseSuccess_H
