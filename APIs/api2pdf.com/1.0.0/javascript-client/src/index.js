/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ApiResponseFailure from './model/ApiResponseFailure';
import ApiResponseSuccess from './model/ApiResponseSuccess';
import ChromeAdvancedOptions from './model/ChromeAdvancedOptions';
import ChromeHtmlToPdfRequest from './model/ChromeHtmlToPdfRequest';
import ChromeUrlToPdfRequest from './model/ChromeUrlToPdfRequest';
import LibreOfficeConvertRequest from './model/LibreOfficeConvertRequest';
import MergeRequest from './model/MergeRequest';
import WkHtmlToPdfAdvancedOptions from './model/WkHtmlToPdfAdvancedOptions';
import WkHtmlToPdfHtmlToPdfRequest from './model/WkHtmlToPdfHtmlToPdfRequest';
import WkHtmlToPdfUrlToPdfRequest from './model/WkHtmlToPdfUrlToPdfRequest';
import HeadlessChromeApi from './api/HeadlessChromeApi';
import LibreOfficeApi from './api/LibreOfficeApi';
import MergeCombinePdfsApi from './api/MergeCombinePdfsApi';
import WkhtmltopdfApi from './api/WkhtmltopdfApi';
import ZXINGZebraCrossingBarCodesApi from './api/ZXINGZebraCrossingBarCodesApi';


/**
*  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs &amp; Client Libraries We&#39;ve made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey&#x3D;YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. &#x60;&#x60;&#x60; Authorization: YOUR-API-KEY &#x60;&#x60;&#x60;  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: &#x60;&#x60;&#x60; https://v2018.api2pdf.com/chrome/url?url&#x3D;{UrlToConvert}&amp;apikey&#x3D;{YourApiKey} &#x60;&#x60;&#x60;  For more advanced usage and settings, see the API specification below. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Api2PdfPdfGenerationPoweredByAwsLambda = require('index'); // See note below*.
* var xxxSvc = new Api2PdfPdfGenerationPoweredByAwsLambda.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Api2PdfPdfGenerationPoweredByAwsLambda.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Api2PdfPdfGenerationPoweredByAwsLambda.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Api2PdfPdfGenerationPoweredByAwsLambda.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiResponseFailure model constructor.
     * @property {module:model/ApiResponseFailure}
     */
    ApiResponseFailure,

    /**
     * The ApiResponseSuccess model constructor.
     * @property {module:model/ApiResponseSuccess}
     */
    ApiResponseSuccess,

    /**
     * The ChromeAdvancedOptions model constructor.
     * @property {module:model/ChromeAdvancedOptions}
     */
    ChromeAdvancedOptions,

    /**
     * The ChromeHtmlToPdfRequest model constructor.
     * @property {module:model/ChromeHtmlToPdfRequest}
     */
    ChromeHtmlToPdfRequest,

    /**
     * The ChromeUrlToPdfRequest model constructor.
     * @property {module:model/ChromeUrlToPdfRequest}
     */
    ChromeUrlToPdfRequest,

    /**
     * The LibreOfficeConvertRequest model constructor.
     * @property {module:model/LibreOfficeConvertRequest}
     */
    LibreOfficeConvertRequest,

    /**
     * The MergeRequest model constructor.
     * @property {module:model/MergeRequest}
     */
    MergeRequest,

    /**
     * The WkHtmlToPdfAdvancedOptions model constructor.
     * @property {module:model/WkHtmlToPdfAdvancedOptions}
     */
    WkHtmlToPdfAdvancedOptions,

    /**
     * The WkHtmlToPdfHtmlToPdfRequest model constructor.
     * @property {module:model/WkHtmlToPdfHtmlToPdfRequest}
     */
    WkHtmlToPdfHtmlToPdfRequest,

    /**
     * The WkHtmlToPdfUrlToPdfRequest model constructor.
     * @property {module:model/WkHtmlToPdfUrlToPdfRequest}
     */
    WkHtmlToPdfUrlToPdfRequest,

    /**
    * The HeadlessChromeApi service constructor.
    * @property {module:api/HeadlessChromeApi}
    */
    HeadlessChromeApi,

    /**
    * The LibreOfficeApi service constructor.
    * @property {module:api/LibreOfficeApi}
    */
    LibreOfficeApi,

    /**
    * The MergeCombinePdfsApi service constructor.
    * @property {module:api/MergeCombinePdfsApi}
    */
    MergeCombinePdfsApi,

    /**
    * The WkhtmltopdfApi service constructor.
    * @property {module:api/WkhtmltopdfApi}
    */
    WkhtmltopdfApi,

    /**
    * The ZXINGZebraCrossingBarCodesApi service constructor.
    * @property {module:api/ZXINGZebraCrossingBarCodesApi}
    */
    ZXINGZebraCrossingBarCodesApi
};
