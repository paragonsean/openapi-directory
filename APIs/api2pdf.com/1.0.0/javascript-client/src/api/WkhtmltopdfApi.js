/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseFailure from '../model/ApiResponseFailure';
import ApiResponseSuccess from '../model/ApiResponseSuccess';
import WkHtmlToPdfHtmlToPdfRequest from '../model/WkHtmlToPdfHtmlToPdfRequest';
import WkHtmlToPdfUrlToPdfRequest from '../model/WkHtmlToPdfUrlToPdfRequest';

/**
* Wkhtmltopdf service.
* @module api/WkhtmltopdfApi
* @version 1.0.0
*/
export default class WkhtmltopdfApi {

    /**
    * Constructs a new WkhtmltopdfApi. 
    * @alias module:api/WkhtmltopdfApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the wkhtmltopdfFromHtmlPost operation.
     * @callback module:api/WkhtmltopdfApi~wkhtmltopdfFromHtmlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert raw HTML to PDF
     * Convert HTML to a PDF using WkHtmlToPdf on AWS Lambda. ### Authorize via Header of Request **Authorization: YOUR-API-KEY**
     * @param {Object} opts Optional parameters
     * @param {module:model/WkHtmlToPdfHtmlToPdfRequest} [wkHtmlToPdfHtmlToPdfRequest] A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below: - `html` *(string, required)* - raw HTML to convert to PDF - `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false. - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified. - `options` *(object, optional)* - Include advanced WkHtmlToPdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).
     * @param {module:api/WkhtmltopdfApi~wkhtmltopdfFromHtmlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseSuccess}
     */
    wkhtmltopdfFromHtmlPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['wkHtmlToPdfHtmlToPdfRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponseSuccess;
      return this.apiClient.callApi(
        '/wkhtmltopdf/html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wkhtmltopdfFromUrlGET operation.
     * @callback module:api/WkhtmltopdfApi~wkhtmltopdfFromUrlGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert URL to PDF
     * Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility. ### Authorize via Query String Parameter **apikey=YOUR-API-KEY** ### Example ``` https://v2018.api2pdf.com/wkhtmltopdf/url?url={UrlToConvert}&apikey={YourApiKey} ``` 
     * @param {String} url Url of the page to convert to PDF. Must start with http:// or https://.
     * @param {Object} opts Optional parameters
     * @param {String} [output] Specify output=json to receive a JSON output. Defaults to PDF file.
     * @param {module:api/WkhtmltopdfApi~wkhtmltopdfFromUrlGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseSuccess}
     */
    wkhtmltopdfFromUrlGET(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling wkhtmltopdfFromUrlGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'output': opts['output']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['QueryApiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = ApiResponseSuccess;
      return this.apiClient.callApi(
        '/wkhtmltopdf/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wkhtmltopdfFromUrlPost operation.
     * @callback module:api/WkhtmltopdfApi~wkhtmltopdfFromUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert URL to PDF
     * Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda.. ### Authorize via Header of Request **Authorization: YOUR-API-KEY**
     * @param {Object} opts Optional parameters
     * @param {module:model/WkHtmlToPdfUrlToPdfRequest} [wkHtmlToPdfUrlToPdfRequest] A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below: - `url` *(string, required)* - Url to the web page to convert to PDF - `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false. - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified. - `options` *(object, optional)* - Include advanced WkHtmlToPdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).
     * @param {module:api/WkhtmltopdfApi~wkhtmltopdfFromUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseSuccess}
     */
    wkhtmltopdfFromUrlPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['wkHtmlToPdfUrlToPdfRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponseSuccess;
      return this.apiClient.callApi(
        '/wkhtmltopdf/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
