/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseFailure from '../model/ApiResponseFailure';
import ApiResponseSuccess from '../model/ApiResponseSuccess';
import LibreOfficeConvertRequest from '../model/LibreOfficeConvertRequest';

/**
* LibreOffice service.
* @module api/LibreOfficeApi
* @version 1.0.0
*/
export default class LibreOfficeApi {

    /**
    * Constructs a new LibreOfficeApi. 
    * @alias module:api/LibreOfficeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the libreConvertPost operation.
     * @callback module:api/LibreOfficeApi~libreConvertPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert office document or image to PDF
     * Convert an office document (Word, Excel, Powerpoint) or an image (jpg, gif, png) to a PDF using LibreOffice on AWS Lambda. ### Authorize via Header of Request **Authorization: YOUR-API-KEY**
     * @param {Object} opts Optional parameters
     * @param {module:model/LibreOfficeConvertRequest} [libreOfficeConvertRequest] A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below: - `url` *(string, required)* - A direct URL to the file. Api2Pdf will consume the file at that URL and then convert it. - `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false. - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified. 
     * @param {module:api/LibreOfficeApi~libreConvertPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseSuccess}
     */
    libreConvertPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['libreOfficeConvertRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponseSuccess;
      return this.apiClient.callApi(
        '/libreoffice/convert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
