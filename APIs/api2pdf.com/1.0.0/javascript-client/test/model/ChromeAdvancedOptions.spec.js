/**
 * Api2Pdf - PDF Generation, Powered by AWS Lambda
 *  # Introduction [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing). # SDKs & Client Libraries We've made a number of open source libraries available for the API - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python) - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet) - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node) - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php) - Ruby: (Coming soon) # Authorization Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.  **Authorize your API calls** - GET requests, include apikey=YOUR-API-KEY as a query string parameter - POST requests, add **Authorization** to your header. ``` Authorization: YOUR-API-KEY ```  # Quickstart If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like: ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  For more advanced usage and settings, see the API specification below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@api2pdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Api2PdfPdfGenerationPoweredByAwsLambda);
  }
}(this, function(expect, Api2PdfPdfGenerationPoweredByAwsLambda) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Api2PdfPdfGenerationPoweredByAwsLambda.ChromeAdvancedOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChromeAdvancedOptions', function() {
    it('should create an instance of ChromeAdvancedOptions', function() {
      // uncomment below and update the code to test ChromeAdvancedOptions
      //var instance = new Api2PdfPdfGenerationPoweredByAwsLambda.ChromeAdvancedOptions();
      //expect(instance).to.be.a(Api2PdfPdfGenerationPoweredByAwsLambda.ChromeAdvancedOptions);
    });

    it('should have the property landscape (base name: "landscape")', function() {
      // uncomment below and update the code to test the property landscape
      //var instance = new Api2PdfPdfGenerationPoweredByAwsLambda.ChromeAdvancedOptions();
      //expect(instance).to.be();
    });

    it('should have the property printBackground (base name: "printBackground")', function() {
      // uncomment below and update the code to test the property printBackground
      //var instance = new Api2PdfPdfGenerationPoweredByAwsLambda.ChromeAdvancedOptions();
      //expect(instance).to.be();
    });

  });

}));
