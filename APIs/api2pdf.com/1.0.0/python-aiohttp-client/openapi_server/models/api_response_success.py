# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiResponseSuccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, mb_in: float=None, mb_out: float=None, pdf: str=None, success: bool=None):
        """ApiResponseSuccess - a model defined in OpenAPI

        :param cost: The cost of this ApiResponseSuccess.
        :param mb_in: The mb_in of this ApiResponseSuccess.
        :param mb_out: The mb_out of this ApiResponseSuccess.
        :param pdf: The pdf of this ApiResponseSuccess.
        :param success: The success of this ApiResponseSuccess.
        """
        self.openapi_types = {
            'cost': float,
            'mb_in': float,
            'mb_out': float,
            'pdf': str,
            'success': bool
        }

        self.attribute_map = {
            'cost': 'cost',
            'mb_in': 'mbIn',
            'mb_out': 'mbOut',
            'pdf': 'pdf',
            'success': 'success'
        }

        self._cost = cost
        self._mb_in = mb_in
        self._mb_out = mb_out
        self._pdf = pdf
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiResponseSuccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiResponseSuccess of this ApiResponseSuccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this ApiResponseSuccess.

        Cost of the operation (mbIn + mbOut) * $.001

        :return: The cost of this ApiResponseSuccess.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ApiResponseSuccess.

        Cost of the operation (mbIn + mbOut) * $.001

        :param cost: The cost of this ApiResponseSuccess.
        :type cost: float
        """

        self._cost = cost

    @property
    def mb_in(self):
        """Gets the mb_in of this ApiResponseSuccess.

        The amount of megabytes of bandwidth used to process the pdf

        :return: The mb_in of this ApiResponseSuccess.
        :rtype: float
        """
        return self._mb_in

    @mb_in.setter
    def mb_in(self, mb_in):
        """Sets the mb_in of this ApiResponseSuccess.

        The amount of megabytes of bandwidth used to process the pdf

        :param mb_in: The mb_in of this ApiResponseSuccess.
        :type mb_in: float
        """

        self._mb_in = mb_in

    @property
    def mb_out(self):
        """Gets the mb_out of this ApiResponseSuccess.

        The amount of megabytes of bandwidth generated from the resulting pdf

        :return: The mb_out of this ApiResponseSuccess.
        :rtype: float
        """
        return self._mb_out

    @mb_out.setter
    def mb_out(self, mb_out):
        """Sets the mb_out of this ApiResponseSuccess.

        The amount of megabytes of bandwidth generated from the resulting pdf

        :param mb_out: The mb_out of this ApiResponseSuccess.
        :type mb_out: float
        """

        self._mb_out = mb_out

    @property
    def pdf(self):
        """Gets the pdf of this ApiResponseSuccess.

        A url to the PDF that will exist only for 24 hours

        :return: The pdf of this ApiResponseSuccess.
        :rtype: str
        """
        return self._pdf

    @pdf.setter
    def pdf(self, pdf):
        """Sets the pdf of this ApiResponseSuccess.

        A url to the PDF that will exist only for 24 hours

        :param pdf: The pdf of this ApiResponseSuccess.
        :type pdf: str
        """

        self._pdf = pdf

    @property
    def success(self):
        """Gets the success of this ApiResponseSuccess.

        Will be true if the operation suceeded

        :return: The success of this ApiResponseSuccess.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ApiResponseSuccess.

        Will be true if the operation suceeded

        :param success: The success of this ApiResponseSuccess.
        :type success: bool
        """

        self._success = success
