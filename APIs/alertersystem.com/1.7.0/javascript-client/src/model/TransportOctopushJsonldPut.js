/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportOctopushJsonldPut model module.
 * @module model/TransportOctopushJsonldPut
 * @version 1.7.0
 */
class TransportOctopushJsonldPut {
    /**
     * Constructs a new <code>TransportOctopushJsonldPut</code>.
     * The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service.
     * @alias module:model/TransportOctopushJsonldPut
     * @param octopushApiKey {String} The API key for the Octopush service. Stored in encrypted format.
     * @param octopushFrom {String} The sender value for the Octopush service.
     * @param octopushType {String} The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
     * @param octopushUserLogin {String} The user login (email) for the Octopush service.
     * @param transportName {String} The name of the transport.
     */
    constructor(octopushApiKey, octopushFrom, octopushType, octopushUserLogin, transportName) { 
        
        TransportOctopushJsonldPut.initialize(this, octopushApiKey, octopushFrom, octopushType, octopushUserLogin, transportName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, octopushApiKey, octopushFrom, octopushType, octopushUserLogin, transportName) { 
        obj['octopushApiKey'] = octopushApiKey;
        obj['octopushFrom'] = octopushFrom;
        obj['octopushType'] = octopushType;
        obj['octopushUserLogin'] = octopushUserLogin;
        obj['transportName'] = transportName;
    }

    /**
     * Constructs a <code>TransportOctopushJsonldPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportOctopushJsonldPut} obj Optional instance to populate.
     * @return {module:model/TransportOctopushJsonldPut} The populated <code>TransportOctopushJsonldPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportOctopushJsonldPut();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('octopushApiKey')) {
                obj['octopushApiKey'] = ApiClient.convertToType(data['octopushApiKey'], 'String');
            }
            if (data.hasOwnProperty('octopushFrom')) {
                obj['octopushFrom'] = ApiClient.convertToType(data['octopushFrom'], 'String');
            }
            if (data.hasOwnProperty('octopushType')) {
                obj['octopushType'] = ApiClient.convertToType(data['octopushType'], 'String');
            }
            if (data.hasOwnProperty('octopushUserLogin')) {
                obj['octopushUserLogin'] = ApiClient.convertToType(data['octopushUserLogin'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportOctopushJsonldPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportOctopushJsonldPut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportOctopushJsonldPut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['octopushApiKey'] && !(typeof data['octopushApiKey'] === 'string' || data['octopushApiKey'] instanceof String)) {
            throw new Error("Expected the field `octopushApiKey` to be a primitive type in the JSON string but got " + data['octopushApiKey']);
        }
        // ensure the json data is a string
        if (data['octopushFrom'] && !(typeof data['octopushFrom'] === 'string' || data['octopushFrom'] instanceof String)) {
            throw new Error("Expected the field `octopushFrom` to be a primitive type in the JSON string but got " + data['octopushFrom']);
        }
        // ensure the json data is a string
        if (data['octopushType'] && !(typeof data['octopushType'] === 'string' || data['octopushType'] instanceof String)) {
            throw new Error("Expected the field `octopushType` to be a primitive type in the JSON string but got " + data['octopushType']);
        }
        // ensure the json data is a string
        if (data['octopushUserLogin'] && !(typeof data['octopushUserLogin'] === 'string' || data['octopushUserLogin'] instanceof String)) {
            throw new Error("Expected the field `octopushUserLogin` to be a primitive type in the JSON string but got " + data['octopushUserLogin']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }

        return true;
    }


}

TransportOctopushJsonldPut.RequiredProperties = ["octopushApiKey", "octopushFrom", "octopushType", "octopushUserLogin", "transportName"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportOctopushJsonldPut.prototype['dataSegmentCode'] = undefined;

/**
 * The API key for the Octopush service. Stored in encrypted format.
 * @member {String} octopushApiKey
 */
TransportOctopushJsonldPut.prototype['octopushApiKey'] = undefined;

/**
 * The sender value for the Octopush service.
 * @member {String} octopushFrom
 */
TransportOctopushJsonldPut.prototype['octopushFrom'] = undefined;

/**
 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
 * @member {String} octopushType
 */
TransportOctopushJsonldPut.prototype['octopushType'] = undefined;

/**
 * The user login (email) for the Octopush service.
 * @member {String} octopushUserLogin
 */
TransportOctopushJsonldPut.prototype['octopushUserLogin'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportOctopushJsonldPut.prototype['transportName'] = undefined;






export default TransportOctopushJsonldPut;

