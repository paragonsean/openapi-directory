/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportEmailPatch model module.
 * @module model/TransportEmailPatch
 * @version 1.7.0
 */
class TransportEmailPatch {
    /**
     * Constructs a new <code>TransportEmailPatch</code>.
     * The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
     * @alias module:model/TransportEmailPatch
     * @param emailFromAddress {String} The sender email address for the SMTP Email service.
     * @param emailFromName {String} The sender name for the SMTP Email service.
     * @param emailPassword {String} The password for the SMTP Email service. Stored in encrypted format.
     * @param emailPort {Number} The port for the SMTP Email service.
     * @param emailServer {String} The server for the SMTP Email service.
     * @param emailUsername {String} The username for the SMTP Email service.
     * @param transportName {String} The name of the transport.
     */
    constructor(emailFromAddress, emailFromName, emailPassword, emailPort, emailServer, emailUsername, transportName) { 
        
        TransportEmailPatch.initialize(this, emailFromAddress, emailFromName, emailPassword, emailPort, emailServer, emailUsername, transportName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, emailFromAddress, emailFromName, emailPassword, emailPort, emailServer, emailUsername, transportName) { 
        obj['emailFromAddress'] = emailFromAddress;
        obj['emailFromName'] = emailFromName;
        obj['emailPassword'] = emailPassword;
        obj['emailPort'] = emailPort;
        obj['emailServer'] = emailServer;
        obj['emailUsername'] = emailUsername;
        obj['transportName'] = transportName;
    }

    /**
     * Constructs a <code>TransportEmailPatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportEmailPatch} obj Optional instance to populate.
     * @return {module:model/TransportEmailPatch} The populated <code>TransportEmailPatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportEmailPatch();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('emailFromAddress')) {
                obj['emailFromAddress'] = ApiClient.convertToType(data['emailFromAddress'], 'String');
            }
            if (data.hasOwnProperty('emailFromName')) {
                obj['emailFromName'] = ApiClient.convertToType(data['emailFromName'], 'String');
            }
            if (data.hasOwnProperty('emailPassword')) {
                obj['emailPassword'] = ApiClient.convertToType(data['emailPassword'], 'String');
            }
            if (data.hasOwnProperty('emailPort')) {
                obj['emailPort'] = ApiClient.convertToType(data['emailPort'], 'Number');
            }
            if (data.hasOwnProperty('emailServer')) {
                obj['emailServer'] = ApiClient.convertToType(data['emailServer'], 'String');
            }
            if (data.hasOwnProperty('emailUsername')) {
                obj['emailUsername'] = ApiClient.convertToType(data['emailUsername'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportEmailPatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportEmailPatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportEmailPatch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['emailFromAddress'] && !(typeof data['emailFromAddress'] === 'string' || data['emailFromAddress'] instanceof String)) {
            throw new Error("Expected the field `emailFromAddress` to be a primitive type in the JSON string but got " + data['emailFromAddress']);
        }
        // ensure the json data is a string
        if (data['emailFromName'] && !(typeof data['emailFromName'] === 'string' || data['emailFromName'] instanceof String)) {
            throw new Error("Expected the field `emailFromName` to be a primitive type in the JSON string but got " + data['emailFromName']);
        }
        // ensure the json data is a string
        if (data['emailPassword'] && !(typeof data['emailPassword'] === 'string' || data['emailPassword'] instanceof String)) {
            throw new Error("Expected the field `emailPassword` to be a primitive type in the JSON string but got " + data['emailPassword']);
        }
        // ensure the json data is a string
        if (data['emailServer'] && !(typeof data['emailServer'] === 'string' || data['emailServer'] instanceof String)) {
            throw new Error("Expected the field `emailServer` to be a primitive type in the JSON string but got " + data['emailServer']);
        }
        // ensure the json data is a string
        if (data['emailUsername'] && !(typeof data['emailUsername'] === 'string' || data['emailUsername'] instanceof String)) {
            throw new Error("Expected the field `emailUsername` to be a primitive type in the JSON string but got " + data['emailUsername']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }

        return true;
    }


}

TransportEmailPatch.RequiredProperties = ["emailFromAddress", "emailFromName", "emailPassword", "emailPort", "emailServer", "emailUsername", "transportName"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportEmailPatch.prototype['dataSegmentCode'] = undefined;

/**
 * The sender email address for the SMTP Email service.
 * @member {String} emailFromAddress
 */
TransportEmailPatch.prototype['emailFromAddress'] = undefined;

/**
 * The sender name for the SMTP Email service.
 * @member {String} emailFromName
 */
TransportEmailPatch.prototype['emailFromName'] = undefined;

/**
 * The password for the SMTP Email service. Stored in encrypted format.
 * @member {String} emailPassword
 */
TransportEmailPatch.prototype['emailPassword'] = undefined;

/**
 * The port for the SMTP Email service.
 * @member {Number} emailPort
 */
TransportEmailPatch.prototype['emailPort'] = undefined;

/**
 * The server for the SMTP Email service.
 * @member {String} emailServer
 */
TransportEmailPatch.prototype['emailServer'] = undefined;

/**
 * The username for the SMTP Email service.
 * @member {String} emailUsername
 */
TransportEmailPatch.prototype['emailUsername'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportEmailPatch.prototype['transportName'] = undefined;






export default TransportEmailPatch;

