/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportLightSmsJsonldPost model module.
 * @module model/TransportLightSmsJsonldPost
 * @version 1.7.0
 */
class TransportLightSmsJsonldPost {
    /**
     * Constructs a new <code>TransportLightSmsJsonldPost</code>.
     * The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service.
     * @alias module:model/TransportLightSmsJsonldPost
     * @param lightSmsLogin {String} The login for the LightSMS service.
     * @param lightSmsPhone {String} The sender phone number for the LightSMS service.
     * @param lightSmsToken {String} The token for the LightSMS service. Stored in encrypted format.
     * @param partition {String} The partition that contains this resource instance. The resource cannot be moved to another partition.
     * @param transportName {String} The name of the transport.
     */
    constructor(lightSmsLogin, lightSmsPhone, lightSmsToken, partition, transportName) { 
        
        TransportLightSmsJsonldPost.initialize(this, lightSmsLogin, lightSmsPhone, lightSmsToken, partition, transportName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lightSmsLogin, lightSmsPhone, lightSmsToken, partition, transportName) { 
        obj['lightSmsLogin'] = lightSmsLogin;
        obj['lightSmsPhone'] = lightSmsPhone;
        obj['lightSmsToken'] = lightSmsToken;
        obj['partition'] = partition;
        obj['transportName'] = transportName;
    }

    /**
     * Constructs a <code>TransportLightSmsJsonldPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportLightSmsJsonldPost} obj Optional instance to populate.
     * @return {module:model/TransportLightSmsJsonldPost} The populated <code>TransportLightSmsJsonldPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportLightSmsJsonldPost();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('lightSmsLogin')) {
                obj['lightSmsLogin'] = ApiClient.convertToType(data['lightSmsLogin'], 'String');
            }
            if (data.hasOwnProperty('lightSmsPhone')) {
                obj['lightSmsPhone'] = ApiClient.convertToType(data['lightSmsPhone'], 'String');
            }
            if (data.hasOwnProperty('lightSmsToken')) {
                obj['lightSmsToken'] = ApiClient.convertToType(data['lightSmsToken'], 'String');
            }
            if (data.hasOwnProperty('partition')) {
                obj['partition'] = ApiClient.convertToType(data['partition'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportLightSmsJsonldPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportLightSmsJsonldPost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportLightSmsJsonldPost.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['lightSmsLogin'] && !(typeof data['lightSmsLogin'] === 'string' || data['lightSmsLogin'] instanceof String)) {
            throw new Error("Expected the field `lightSmsLogin` to be a primitive type in the JSON string but got " + data['lightSmsLogin']);
        }
        // ensure the json data is a string
        if (data['lightSmsPhone'] && !(typeof data['lightSmsPhone'] === 'string' || data['lightSmsPhone'] instanceof String)) {
            throw new Error("Expected the field `lightSmsPhone` to be a primitive type in the JSON string but got " + data['lightSmsPhone']);
        }
        // ensure the json data is a string
        if (data['lightSmsToken'] && !(typeof data['lightSmsToken'] === 'string' || data['lightSmsToken'] instanceof String)) {
            throw new Error("Expected the field `lightSmsToken` to be a primitive type in the JSON string but got " + data['lightSmsToken']);
        }
        // ensure the json data is a string
        if (data['partition'] && !(typeof data['partition'] === 'string' || data['partition'] instanceof String)) {
            throw new Error("Expected the field `partition` to be a primitive type in the JSON string but got " + data['partition']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }

        return true;
    }


}

TransportLightSmsJsonldPost.RequiredProperties = ["lightSmsLogin", "lightSmsPhone", "lightSmsToken", "partition", "transportName"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportLightSmsJsonldPost.prototype['dataSegmentCode'] = undefined;

/**
 * The login for the LightSMS service.
 * @member {String} lightSmsLogin
 */
TransportLightSmsJsonldPost.prototype['lightSmsLogin'] = undefined;

/**
 * The sender phone number for the LightSMS service.
 * @member {String} lightSmsPhone
 */
TransportLightSmsJsonldPost.prototype['lightSmsPhone'] = undefined;

/**
 * The token for the LightSMS service. Stored in encrypted format.
 * @member {String} lightSmsToken
 */
TransportLightSmsJsonldPost.prototype['lightSmsToken'] = undefined;

/**
 * The partition that contains this resource instance. The resource cannot be moved to another partition.
 * @member {String} partition
 */
TransportLightSmsJsonldPost.prototype['partition'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportLightSmsJsonldPost.prototype['transportName'] = undefined;






export default TransportLightSmsJsonldPost;

