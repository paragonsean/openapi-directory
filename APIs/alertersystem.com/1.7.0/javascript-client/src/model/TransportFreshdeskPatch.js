/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportFreshdeskPatch model module.
 * @module model/TransportFreshdeskPatch
 * @version 1.7.0
 */
class TransportFreshdeskPatch {
    /**
     * Constructs a new <code>TransportFreshdeskPatch</code>.
     * The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service.
     * @alias module:model/TransportFreshdeskPatch
     * @param freshdeskApiKey {String} The API key for the Freshdesk service. Stored in encrypted format.
     * @param freshdeskEmail {String} The requester email address for the Freshdesk service.
     * @param freshdeskHost {String} The host name for the Freshdesk service (domain.freshdesk.com).
     * @param transportName {String} The name of the transport.
     */
    constructor(freshdeskApiKey, freshdeskEmail, freshdeskHost, transportName) { 
        
        TransportFreshdeskPatch.initialize(this, freshdeskApiKey, freshdeskEmail, freshdeskHost, transportName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, freshdeskApiKey, freshdeskEmail, freshdeskHost, transportName) { 
        obj['freshdeskApiKey'] = freshdeskApiKey;
        obj['freshdeskEmail'] = freshdeskEmail;
        obj['freshdeskHost'] = freshdeskHost;
        obj['transportName'] = transportName;
    }

    /**
     * Constructs a <code>TransportFreshdeskPatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportFreshdeskPatch} obj Optional instance to populate.
     * @return {module:model/TransportFreshdeskPatch} The populated <code>TransportFreshdeskPatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportFreshdeskPatch();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('freshdeskApiKey')) {
                obj['freshdeskApiKey'] = ApiClient.convertToType(data['freshdeskApiKey'], 'String');
            }
            if (data.hasOwnProperty('freshdeskEmail')) {
                obj['freshdeskEmail'] = ApiClient.convertToType(data['freshdeskEmail'], 'String');
            }
            if (data.hasOwnProperty('freshdeskHost')) {
                obj['freshdeskHost'] = ApiClient.convertToType(data['freshdeskHost'], 'String');
            }
            if (data.hasOwnProperty('freshdeskPriority')) {
                obj['freshdeskPriority'] = ApiClient.convertToType(data['freshdeskPriority'], 'String');
            }
            if (data.hasOwnProperty('freshdeskType')) {
                obj['freshdeskType'] = ApiClient.convertToType(data['freshdeskType'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportFreshdeskPatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportFreshdeskPatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportFreshdeskPatch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['freshdeskApiKey'] && !(typeof data['freshdeskApiKey'] === 'string' || data['freshdeskApiKey'] instanceof String)) {
            throw new Error("Expected the field `freshdeskApiKey` to be a primitive type in the JSON string but got " + data['freshdeskApiKey']);
        }
        // ensure the json data is a string
        if (data['freshdeskEmail'] && !(typeof data['freshdeskEmail'] === 'string' || data['freshdeskEmail'] instanceof String)) {
            throw new Error("Expected the field `freshdeskEmail` to be a primitive type in the JSON string but got " + data['freshdeskEmail']);
        }
        // ensure the json data is a string
        if (data['freshdeskHost'] && !(typeof data['freshdeskHost'] === 'string' || data['freshdeskHost'] instanceof String)) {
            throw new Error("Expected the field `freshdeskHost` to be a primitive type in the JSON string but got " + data['freshdeskHost']);
        }
        // ensure the json data is a string
        if (data['freshdeskPriority'] && !(typeof data['freshdeskPriority'] === 'string' || data['freshdeskPriority'] instanceof String)) {
            throw new Error("Expected the field `freshdeskPriority` to be a primitive type in the JSON string but got " + data['freshdeskPriority']);
        }
        // ensure the json data is a string
        if (data['freshdeskType'] && !(typeof data['freshdeskType'] === 'string' || data['freshdeskType'] instanceof String)) {
            throw new Error("Expected the field `freshdeskType` to be a primitive type in the JSON string but got " + data['freshdeskType']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }

        return true;
    }


}

TransportFreshdeskPatch.RequiredProperties = ["freshdeskApiKey", "freshdeskEmail", "freshdeskHost", "transportName"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportFreshdeskPatch.prototype['dataSegmentCode'] = undefined;

/**
 * The API key for the Freshdesk service. Stored in encrypted format.
 * @member {String} freshdeskApiKey
 */
TransportFreshdeskPatch.prototype['freshdeskApiKey'] = undefined;

/**
 * The requester email address for the Freshdesk service.
 * @member {String} freshdeskEmail
 */
TransportFreshdeskPatch.prototype['freshdeskEmail'] = undefined;

/**
 * The host name for the Freshdesk service (domain.freshdesk.com).
 * @member {String} freshdeskHost
 */
TransportFreshdeskPatch.prototype['freshdeskHost'] = undefined;

/**
 * The ticket priority for the Freshdesk service.
 * @member {String} freshdeskPriority
 */
TransportFreshdeskPatch.prototype['freshdeskPriority'] = undefined;

/**
 * The ticket type for the Freshdesk service.
 * @member {String} freshdeskType
 */
TransportFreshdeskPatch.prototype['freshdeskType'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportFreshdeskPatch.prototype['transportName'] = undefined;






export default TransportFreshdeskPatch;

