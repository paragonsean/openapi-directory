/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertLogJsonldGetContext from './AlertLogJsonldGetContext';

/**
 * The TransportGoogleChatJsonldGet model module.
 * @module model/TransportGoogleChatJsonldGet
 * @version 1.7.0
 */
class TransportGoogleChatJsonldGet {
    /**
     * Constructs a new <code>TransportGoogleChatJsonldGet</code>.
     * The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
     * @alias module:model/TransportGoogleChatJsonldGet
     * @param googleChatAccessKey {String} The access key for the Google Chat service.
     * @param googleChatAccessToken {String} The access token for the Google Chat service. Stored in encrypted format.
     * @param googleChatSpace {String} The space name for the Google Chat service.
     * @param partition {String} The partition that contains this resource instance. The resource cannot be moved to another partition.
     * @param transportName {String} The name of the transport.
     */
    constructor(googleChatAccessKey, googleChatAccessToken, googleChatSpace, partition, transportName) { 
        
        TransportGoogleChatJsonldGet.initialize(this, googleChatAccessKey, googleChatAccessToken, googleChatSpace, partition, transportName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, googleChatAccessKey, googleChatAccessToken, googleChatSpace, partition, transportName) { 
        obj['googleChatAccessKey'] = googleChatAccessKey;
        obj['googleChatAccessToken'] = googleChatAccessToken;
        obj['googleChatSpace'] = googleChatSpace;
        obj['partition'] = partition;
        obj['transportName'] = transportName;
    }

    /**
     * Constructs a <code>TransportGoogleChatJsonldGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportGoogleChatJsonldGet} obj Optional instance to populate.
     * @return {module:model/TransportGoogleChatJsonldGet} The populated <code>TransportGoogleChatJsonldGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportGoogleChatJsonldGet();

            if (data.hasOwnProperty('@context')) {
                obj['@context'] = AlertLogJsonldGetContext.constructFromObject(data['@context']);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('googleChatAccessKey')) {
                obj['googleChatAccessKey'] = ApiClient.convertToType(data['googleChatAccessKey'], 'String');
            }
            if (data.hasOwnProperty('googleChatAccessToken')) {
                obj['googleChatAccessToken'] = ApiClient.convertToType(data['googleChatAccessToken'], 'String');
            }
            if (data.hasOwnProperty('googleChatSpace')) {
                obj['googleChatSpace'] = ApiClient.convertToType(data['googleChatSpace'], 'String');
            }
            if (data.hasOwnProperty('googleChatThreadKey')) {
                obj['googleChatThreadKey'] = ApiClient.convertToType(data['googleChatThreadKey'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('partition')) {
                obj['partition'] = ApiClient.convertToType(data['partition'], 'String');
            }
            if (data.hasOwnProperty('resourceOwner')) {
                obj['resourceOwner'] = ApiClient.convertToType(data['resourceOwner'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportGoogleChatJsonldGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportGoogleChatJsonldGet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportGoogleChatJsonldGet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `@context`
        if (data['@context']) { // data not null
          AlertLogJsonldGetContext.validateJSON(data['@context']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is a string
        if (data['@type'] && !(typeof data['@type'] === 'string' || data['@type'] instanceof String)) {
            throw new Error("Expected the field `@type` to be a primitive type in the JSON string but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['googleChatAccessKey'] && !(typeof data['googleChatAccessKey'] === 'string' || data['googleChatAccessKey'] instanceof String)) {
            throw new Error("Expected the field `googleChatAccessKey` to be a primitive type in the JSON string but got " + data['googleChatAccessKey']);
        }
        // ensure the json data is a string
        if (data['googleChatAccessToken'] && !(typeof data['googleChatAccessToken'] === 'string' || data['googleChatAccessToken'] instanceof String)) {
            throw new Error("Expected the field `googleChatAccessToken` to be a primitive type in the JSON string but got " + data['googleChatAccessToken']);
        }
        // ensure the json data is a string
        if (data['googleChatSpace'] && !(typeof data['googleChatSpace'] === 'string' || data['googleChatSpace'] instanceof String)) {
            throw new Error("Expected the field `googleChatSpace` to be a primitive type in the JSON string but got " + data['googleChatSpace']);
        }
        // ensure the json data is a string
        if (data['googleChatThreadKey'] && !(typeof data['googleChatThreadKey'] === 'string' || data['googleChatThreadKey'] instanceof String)) {
            throw new Error("Expected the field `googleChatThreadKey` to be a primitive type in the JSON string but got " + data['googleChatThreadKey']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['partition'] && !(typeof data['partition'] === 'string' || data['partition'] instanceof String)) {
            throw new Error("Expected the field `partition` to be a primitive type in the JSON string but got " + data['partition']);
        }
        // ensure the json data is a string
        if (data['resourceOwner'] && !(typeof data['resourceOwner'] === 'string' || data['resourceOwner'] instanceof String)) {
            throw new Error("Expected the field `resourceOwner` to be a primitive type in the JSON string but got " + data['resourceOwner']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }

        return true;
    }


}

TransportGoogleChatJsonldGet.RequiredProperties = ["googleChatAccessKey", "googleChatAccessToken", "googleChatSpace", "partition", "transportName"];

/**
 * @member {module:model/AlertLogJsonldGetContext} @context
 */
TransportGoogleChatJsonldGet.prototype['@context'] = undefined;

/**
 * @member {String} @id
 */
TransportGoogleChatJsonldGet.prototype['@id'] = undefined;

/**
 * @member {String} @type
 */
TransportGoogleChatJsonldGet.prototype['@type'] = undefined;

/**
 * When the resource instance was created. This date-time is in the UTC timezone.
 * @member {Date} createdAt
 */
TransportGoogleChatJsonldGet.prototype['createdAt'] = undefined;

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportGoogleChatJsonldGet.prototype['dataSegmentCode'] = undefined;

/**
 * The access key for the Google Chat service.
 * @member {String} googleChatAccessKey
 */
TransportGoogleChatJsonldGet.prototype['googleChatAccessKey'] = undefined;

/**
 * The access token for the Google Chat service. Stored in encrypted format.
 * @member {String} googleChatAccessToken
 */
TransportGoogleChatJsonldGet.prototype['googleChatAccessToken'] = undefined;

/**
 * The space name for the Google Chat service.
 * @member {String} googleChatSpace
 */
TransportGoogleChatJsonldGet.prototype['googleChatSpace'] = undefined;

/**
 * The optional thread key for the Google Chat service.
 * @member {String} googleChatThreadKey
 */
TransportGoogleChatJsonldGet.prototype['googleChatThreadKey'] = undefined;

/**
 * The unique identifier of the resource instance.
 * @member {String} id
 */
TransportGoogleChatJsonldGet.prototype['id'] = undefined;

/**
 * The partition that contains this resource instance. The resource cannot be moved to another partition.
 * @member {String} partition
 */
TransportGoogleChatJsonldGet.prototype['partition'] = undefined;

/**
 * The name of the person who owns this resource.
 * @member {String} resourceOwner
 */
TransportGoogleChatJsonldGet.prototype['resourceOwner'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportGoogleChatJsonldGet.prototype['transportName'] = undefined;






export default TransportGoogleChatJsonldGet;

