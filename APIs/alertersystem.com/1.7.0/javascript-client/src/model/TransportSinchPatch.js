/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportSinchPatch model module.
 * @module model/TransportSinchPatch
 * @version 1.7.0
 */
class TransportSinchPatch {
    /**
     * Constructs a new <code>TransportSinchPatch</code>.
     * The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service.
     * @alias module:model/TransportSinchPatch
     * @param sinchAuthToken {String} The auth token for the Sinch service. Stored in encrypted format.
     * @param sinchFrom {String} The sender for the Sinch service.
     * @param sinchServicePlanId {String} The service plan ID for the Sinch service.
     * @param transportName {String} The name of the transport.
     */
    constructor(sinchAuthToken, sinchFrom, sinchServicePlanId, transportName) { 
        
        TransportSinchPatch.initialize(this, sinchAuthToken, sinchFrom, sinchServicePlanId, transportName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sinchAuthToken, sinchFrom, sinchServicePlanId, transportName) { 
        obj['sinchAuthToken'] = sinchAuthToken;
        obj['sinchFrom'] = sinchFrom;
        obj['sinchServicePlanId'] = sinchServicePlanId;
        obj['transportName'] = transportName;
    }

    /**
     * Constructs a <code>TransportSinchPatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportSinchPatch} obj Optional instance to populate.
     * @return {module:model/TransportSinchPatch} The populated <code>TransportSinchPatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportSinchPatch();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('sinchAuthToken')) {
                obj['sinchAuthToken'] = ApiClient.convertToType(data['sinchAuthToken'], 'String');
            }
            if (data.hasOwnProperty('sinchFrom')) {
                obj['sinchFrom'] = ApiClient.convertToType(data['sinchFrom'], 'String');
            }
            if (data.hasOwnProperty('sinchServicePlanId')) {
                obj['sinchServicePlanId'] = ApiClient.convertToType(data['sinchServicePlanId'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportSinchPatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportSinchPatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportSinchPatch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['sinchAuthToken'] && !(typeof data['sinchAuthToken'] === 'string' || data['sinchAuthToken'] instanceof String)) {
            throw new Error("Expected the field `sinchAuthToken` to be a primitive type in the JSON string but got " + data['sinchAuthToken']);
        }
        // ensure the json data is a string
        if (data['sinchFrom'] && !(typeof data['sinchFrom'] === 'string' || data['sinchFrom'] instanceof String)) {
            throw new Error("Expected the field `sinchFrom` to be a primitive type in the JSON string but got " + data['sinchFrom']);
        }
        // ensure the json data is a string
        if (data['sinchServicePlanId'] && !(typeof data['sinchServicePlanId'] === 'string' || data['sinchServicePlanId'] instanceof String)) {
            throw new Error("Expected the field `sinchServicePlanId` to be a primitive type in the JSON string but got " + data['sinchServicePlanId']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }

        return true;
    }


}

TransportSinchPatch.RequiredProperties = ["sinchAuthToken", "sinchFrom", "sinchServicePlanId", "transportName"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportSinchPatch.prototype['dataSegmentCode'] = undefined;

/**
 * The auth token for the Sinch service. Stored in encrypted format.
 * @member {String} sinchAuthToken
 */
TransportSinchPatch.prototype['sinchAuthToken'] = undefined;

/**
 * The sender for the Sinch service.
 * @member {String} sinchFrom
 */
TransportSinchPatch.prototype['sinchFrom'] = undefined;

/**
 * The service plan ID for the Sinch service.
 * @member {String} sinchServicePlanId
 */
TransportSinchPatch.prototype['sinchServicePlanId'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportSinchPatch.prototype['transportName'] = undefined;






export default TransportSinchPatch;

