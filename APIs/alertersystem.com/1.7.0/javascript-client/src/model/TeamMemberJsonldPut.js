/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamMemberJsonldPut model module.
 * @module model/TeamMemberJsonldPut
 * @version 1.7.0
 */
class TeamMemberJsonldPut {
    /**
     * Constructs a new <code>TeamMemberJsonldPut</code>.
     * The TeamMember resource is a collection of active team members of the partitions in a user account.
     * @alias module:model/TeamMemberJsonldPut
     * @param teamMemberRoleCode {String} The role of the team member on the team.
     */
    constructor(teamMemberRoleCode) { 
        
        TeamMemberJsonldPut.initialize(this, teamMemberRoleCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, teamMemberRoleCode) { 
        obj['teamMemberRoleCode'] = teamMemberRoleCode;
    }

    /**
     * Constructs a <code>TeamMemberJsonldPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamMemberJsonldPut} obj Optional instance to populate.
     * @return {module:model/TeamMemberJsonldPut} The populated <code>TeamMemberJsonldPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamMemberJsonldPut();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('teamMemberRoleCode')) {
                obj['teamMemberRoleCode'] = ApiClient.convertToType(data['teamMemberRoleCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamMemberJsonldPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamMemberJsonldPut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TeamMemberJsonldPut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['teamMemberRoleCode'] && !(typeof data['teamMemberRoleCode'] === 'string' || data['teamMemberRoleCode'] instanceof String)) {
            throw new Error("Expected the field `teamMemberRoleCode` to be a primitive type in the JSON string but got " + data['teamMemberRoleCode']);
        }

        return true;
    }


}

TeamMemberJsonldPut.RequiredProperties = ["teamMemberRoleCode"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TeamMemberJsonldPut.prototype['dataSegmentCode'] = undefined;

/**
 * The role of the team member on the team.
 * @member {String} teamMemberRoleCode
 */
TeamMemberJsonldPut.prototype['teamMemberRoleCode'] = undefined;






export default TeamMemberJsonldPut;

