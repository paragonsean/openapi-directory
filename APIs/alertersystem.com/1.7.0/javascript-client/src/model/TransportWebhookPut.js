/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportWebhookPut model module.
 * @module model/TransportWebhookPut
 * @version 1.7.0
 */
class TransportWebhookPut {
    /**
     * Constructs a new <code>TransportWebhookPut</code>.
     * The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination.
     * @alias module:model/TransportWebhookPut
     * @param httpMethodCode {String} The HTTP request method that must be used.
     * @param transportName {String} The name of the transport.
     * @param webhookUrl {String} The URL for the Webhook service.
     */
    constructor(httpMethodCode, transportName, webhookUrl) { 
        
        TransportWebhookPut.initialize(this, httpMethodCode, transportName, webhookUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, httpMethodCode, transportName, webhookUrl) { 
        obj['httpMethodCode'] = httpMethodCode;
        obj['transportName'] = transportName;
        obj['webhookUrl'] = webhookUrl;
    }

    /**
     * Constructs a <code>TransportWebhookPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportWebhookPut} obj Optional instance to populate.
     * @return {module:model/TransportWebhookPut} The populated <code>TransportWebhookPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportWebhookPut();

            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('httpMethodCode')) {
                obj['httpMethodCode'] = ApiClient.convertToType(data['httpMethodCode'], 'String');
            }
            if (data.hasOwnProperty('mustBeEncryptedValue')) {
                obj['mustBeEncryptedValue'] = ApiClient.convertToType(data['mustBeEncryptedValue'], 'String');
            }
            if (data.hasOwnProperty('transportName')) {
                obj['transportName'] = ApiClient.convertToType(data['transportName'], 'String');
            }
            if (data.hasOwnProperty('webhookHeaders')) {
                obj['webhookHeaders'] = ApiClient.convertToType(data['webhookHeaders'], ['String']);
            }
            if (data.hasOwnProperty('webhookUrl')) {
                obj['webhookUrl'] = ApiClient.convertToType(data['webhookUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportWebhookPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportWebhookPut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportWebhookPut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['httpMethodCode'] && !(typeof data['httpMethodCode'] === 'string' || data['httpMethodCode'] instanceof String)) {
            throw new Error("Expected the field `httpMethodCode` to be a primitive type in the JSON string but got " + data['httpMethodCode']);
        }
        // ensure the json data is a string
        if (data['mustBeEncryptedValue'] && !(typeof data['mustBeEncryptedValue'] === 'string' || data['mustBeEncryptedValue'] instanceof String)) {
            throw new Error("Expected the field `mustBeEncryptedValue` to be a primitive type in the JSON string but got " + data['mustBeEncryptedValue']);
        }
        // ensure the json data is a string
        if (data['transportName'] && !(typeof data['transportName'] === 'string' || data['transportName'] instanceof String)) {
            throw new Error("Expected the field `transportName` to be a primitive type in the JSON string but got " + data['transportName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webhookHeaders'])) {
            throw new Error("Expected the field `webhookHeaders` to be an array in the JSON data but got " + data['webhookHeaders']);
        }
        // ensure the json data is a string
        if (data['webhookUrl'] && !(typeof data['webhookUrl'] === 'string' || data['webhookUrl'] instanceof String)) {
            throw new Error("Expected the field `webhookUrl` to be a primitive type in the JSON string but got " + data['webhookUrl']);
        }

        return true;
    }


}

TransportWebhookPut.RequiredProperties = ["httpMethodCode", "transportName", "webhookUrl"];

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
TransportWebhookPut.prototype['dataSegmentCode'] = undefined;

/**
 * The HTTP request method that must be used.
 * @member {String} httpMethodCode
 */
TransportWebhookPut.prototype['httpMethodCode'] = undefined;

/**
 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
 * @member {String} mustBeEncryptedValue
 */
TransportWebhookPut.prototype['mustBeEncryptedValue'] = undefined;

/**
 * The name of the transport.
 * @member {String} transportName
 */
TransportWebhookPut.prototype['transportName'] = undefined;

/**
 * The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.
 * @member {Array.<String>} webhookHeaders
 */
TransportWebhookPut.prototype['webhookHeaders'] = undefined;

/**
 * The URL for the Webhook service.
 * @member {String} webhookUrl
 */
TransportWebhookPut.prototype['webhookUrl'] = undefined;






export default TransportWebhookPut;

