/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertLogJsonldGetContext from './AlertLogJsonldGetContext';

/**
 * The PartitionJsonldGet model module.
 * @module model/PartitionJsonldGet
 * @version 1.7.0
 */
class PartitionJsonldGet {
    /**
     * Constructs a new <code>PartitionJsonldGet</code>.
     * The Partition resource is a collection of siloed monitor and alert environments in the user account.
     * @alias module:model/PartitionJsonldGet
     * @param partitionName {String} The name of the partition. Max 255 characters.
     */
    constructor(partitionName) { 
        
        PartitionJsonldGet.initialize(this, partitionName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partitionName) { 
        obj['partitionName'] = partitionName;
    }

    /**
     * Constructs a <code>PartitionJsonldGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionJsonldGet} obj Optional instance to populate.
     * @return {module:model/PartitionJsonldGet} The populated <code>PartitionJsonldGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionJsonldGet();

            if (data.hasOwnProperty('@context')) {
                obj['@context'] = AlertLogJsonldGetContext.constructFromObject(data['@context']);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], 'String');
            }
            if (data.hasOwnProperty('alertServices')) {
                obj['alertServices'] = ApiClient.convertToType(data['alertServices'], ['String']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('monitors')) {
                obj['monitors'] = ApiClient.convertToType(data['monitors'], ['String']);
            }
            if (data.hasOwnProperty('partitionName')) {
                obj['partitionName'] = ApiClient.convertToType(data['partitionName'], 'String');
            }
            if (data.hasOwnProperty('partitionNotes')) {
                obj['partitionNotes'] = ApiClient.convertToType(data['partitionNotes'], 'String');
            }
            if (data.hasOwnProperty('resourceOwner')) {
                obj['resourceOwner'] = ApiClient.convertToType(data['resourceOwner'], 'String');
            }
            if (data.hasOwnProperty('teamInvitations')) {
                obj['teamInvitations'] = ApiClient.convertToType(data['teamInvitations'], ['String']);
            }
            if (data.hasOwnProperty('teamMembers')) {
                obj['teamMembers'] = ApiClient.convertToType(data['teamMembers'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionJsonldGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionJsonldGet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PartitionJsonldGet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `@context`
        if (data['@context']) { // data not null
          AlertLogJsonldGetContext.validateJSON(data['@context']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is a string
        if (data['@type'] && !(typeof data['@type'] === 'string' || data['@type'] instanceof String)) {
            throw new Error("Expected the field `@type` to be a primitive type in the JSON string but got " + data['@type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alertServices'])) {
            throw new Error("Expected the field `alertServices` to be an array in the JSON data but got " + data['alertServices']);
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['monitors'])) {
            throw new Error("Expected the field `monitors` to be an array in the JSON data but got " + data['monitors']);
        }
        // ensure the json data is a string
        if (data['partitionName'] && !(typeof data['partitionName'] === 'string' || data['partitionName'] instanceof String)) {
            throw new Error("Expected the field `partitionName` to be a primitive type in the JSON string but got " + data['partitionName']);
        }
        // ensure the json data is a string
        if (data['partitionNotes'] && !(typeof data['partitionNotes'] === 'string' || data['partitionNotes'] instanceof String)) {
            throw new Error("Expected the field `partitionNotes` to be a primitive type in the JSON string but got " + data['partitionNotes']);
        }
        // ensure the json data is a string
        if (data['resourceOwner'] && !(typeof data['resourceOwner'] === 'string' || data['resourceOwner'] instanceof String)) {
            throw new Error("Expected the field `resourceOwner` to be a primitive type in the JSON string but got " + data['resourceOwner']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teamInvitations'])) {
            throw new Error("Expected the field `teamInvitations` to be an array in the JSON data but got " + data['teamInvitations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teamMembers'])) {
            throw new Error("Expected the field `teamMembers` to be an array in the JSON data but got " + data['teamMembers']);
        }

        return true;
    }


}

PartitionJsonldGet.RequiredProperties = ["partitionName"];

/**
 * @member {module:model/AlertLogJsonldGetContext} @context
 */
PartitionJsonldGet.prototype['@context'] = undefined;

/**
 * @member {String} @id
 */
PartitionJsonldGet.prototype['@id'] = undefined;

/**
 * @member {String} @type
 */
PartitionJsonldGet.prototype['@type'] = undefined;

/**
 * The alert services that are related to this resource.
 * @member {Array.<String>} alertServices
 */
PartitionJsonldGet.prototype['alertServices'] = undefined;

/**
 * When the resource instance was created. This date-time is in the UTC timezone.
 * @member {Date} createdAt
 */
PartitionJsonldGet.prototype['createdAt'] = undefined;

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
PartitionJsonldGet.prototype['dataSegmentCode'] = undefined;

/**
 * The unique identifier of the resource instance.
 * @member {String} id
 */
PartitionJsonldGet.prototype['id'] = undefined;

/**
 * The monitors that are associated with this partition.
 * @member {Array.<String>} monitors
 */
PartitionJsonldGet.prototype['monitors'] = undefined;

/**
 * The name of the partition. Max 255 characters.
 * @member {String} partitionName
 */
PartitionJsonldGet.prototype['partitionName'] = undefined;

/**
 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
 * @member {String} partitionNotes
 */
PartitionJsonldGet.prototype['partitionNotes'] = undefined;

/**
 * The name of the person who owns this resource.
 * @member {String} resourceOwner
 */
PartitionJsonldGet.prototype['resourceOwner'] = undefined;

/**
 * The team invitations that are related to this resource.
 * @member {Array.<String>} teamInvitations
 */
PartitionJsonldGet.prototype['teamInvitations'] = undefined;

/**
 * The team members of this resource.
 * @member {Array.<String>} teamMembers
 */
PartitionJsonldGet.prototype['teamMembers'] = undefined;






export default PartitionJsonldGet;

