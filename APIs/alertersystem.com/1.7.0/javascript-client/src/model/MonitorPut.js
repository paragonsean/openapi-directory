/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MonitorPut model module.
 * @module model/MonitorPut
 * @version 1.7.0
 */
class MonitorPut {
    /**
     * Constructs a new <code>MonitorPut</code>.
     * The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
     * @alias module:model/MonitorPut
     * @param monitorName {String} The name of the monitor. Max 255 characters.
     * @param timezoneCode {String} The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
     */
    constructor(monitorName, timezoneCode) { 
        
        MonitorPut.initialize(this, monitorName, timezoneCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, monitorName, timezoneCode) { 
        obj['monitorName'] = monitorName;
        obj['timezoneCode'] = timezoneCode;
    }

    /**
     * Constructs a <code>MonitorPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitorPut} obj Optional instance to populate.
     * @return {module:model/MonitorPut} The populated <code>MonitorPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitorPut();

            if (data.hasOwnProperty('alertPayloadExtended')) {
                obj['alertPayloadExtended'] = ApiClient.convertToType(data['alertPayloadExtended'], 'String');
            }
            if (data.hasOwnProperty('alertPayloadShort')) {
                obj['alertPayloadShort'] = ApiClient.convertToType(data['alertPayloadShort'], 'String');
            }
            if (data.hasOwnProperty('alertServices')) {
                obj['alertServices'] = ApiClient.convertToType(data['alertServices'], ['String']);
            }
            if (data.hasOwnProperty('allowUnauthenticatedPings')) {
                obj['allowUnauthenticatedPings'] = ApiClient.convertToType(data['allowUnauthenticatedPings'], 'Boolean');
            }
            if (data.hasOwnProperty('contentCheckMustNotExist')) {
                obj['contentCheckMustNotExist'] = ApiClient.convertToType(data['contentCheckMustNotExist'], 'Boolean');
            }
            if (data.hasOwnProperty('contentCheckText')) {
                obj['contentCheckText'] = ApiClient.convertToType(data['contentCheckText'], 'String');
            }
            if (data.hasOwnProperty('contentCheckUrl')) {
                obj['contentCheckUrl'] = ApiClient.convertToType(data['contentCheckUrl'], 'String');
            }
            if (data.hasOwnProperty('contentCheckXpathFilter')) {
                obj['contentCheckXpathFilter'] = ApiClient.convertToType(data['contentCheckXpathFilter'], 'String');
            }
            if (data.hasOwnProperty('dataSegmentCode')) {
                obj['dataSegmentCode'] = ApiClient.convertToType(data['dataSegmentCode'], 'String');
            }
            if (data.hasOwnProperty('graceSeconds')) {
                obj['graceSeconds'] = ApiClient.convertToType(data['graceSeconds'], 'Number');
            }
            if (data.hasOwnProperty('intervalDays')) {
                obj['intervalDays'] = ApiClient.convertToType(data['intervalDays'], 'Number');
            }
            if (data.hasOwnProperty('intervalHours')) {
                obj['intervalHours'] = ApiClient.convertToType(data['intervalHours'], 'Number');
            }
            if (data.hasOwnProperty('intervalMinutes')) {
                obj['intervalMinutes'] = ApiClient.convertToType(data['intervalMinutes'], 'Number');
            }
            if (data.hasOwnProperty('intervalMonths')) {
                obj['intervalMonths'] = ApiClient.convertToType(data['intervalMonths'], 'Number');
            }
            if (data.hasOwnProperty('intervalSeconds')) {
                obj['intervalSeconds'] = ApiClient.convertToType(data['intervalSeconds'], 'Number');
            }
            if (data.hasOwnProperty('intervalYears')) {
                obj['intervalYears'] = ApiClient.convertToType(data['intervalYears'], 'Number');
            }
            if (data.hasOwnProperty('isMonitorPaused')) {
                obj['isMonitorPaused'] = ApiClient.convertToType(data['isMonitorPaused'], 'Boolean');
            }
            if (data.hasOwnProperty('monitorName')) {
                obj['monitorName'] = ApiClient.convertToType(data['monitorName'], 'String');
            }
            if (data.hasOwnProperty('monitorNotes')) {
                obj['monitorNotes'] = ApiClient.convertToType(data['monitorNotes'], 'String');
            }
            if (data.hasOwnProperty('publicDescription')) {
                obj['publicDescription'] = ApiClient.convertToType(data['publicDescription'], 'String');
            }
            if (data.hasOwnProperty('startMonitorAt')) {
                obj['startMonitorAt'] = ApiClient.convertToType(data['startMonitorAt'], 'Date');
            }
            if (data.hasOwnProperty('timezoneCode')) {
                obj['timezoneCode'] = ApiClient.convertToType(data['timezoneCode'], 'String');
            }
            if (data.hasOwnProperty('webResponseSecondsLimit')) {
                obj['webResponseSecondsLimit'] = ApiClient.convertToType(data['webResponseSecondsLimit'], 'Number');
            }
            if (data.hasOwnProperty('webResponseUrl')) {
                obj['webResponseUrl'] = ApiClient.convertToType(data['webResponseUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitorPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitorPut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MonitorPut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alertPayloadExtended'] && !(typeof data['alertPayloadExtended'] === 'string' || data['alertPayloadExtended'] instanceof String)) {
            throw new Error("Expected the field `alertPayloadExtended` to be a primitive type in the JSON string but got " + data['alertPayloadExtended']);
        }
        // ensure the json data is a string
        if (data['alertPayloadShort'] && !(typeof data['alertPayloadShort'] === 'string' || data['alertPayloadShort'] instanceof String)) {
            throw new Error("Expected the field `alertPayloadShort` to be a primitive type in the JSON string but got " + data['alertPayloadShort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alertServices'])) {
            throw new Error("Expected the field `alertServices` to be an array in the JSON data but got " + data['alertServices']);
        }
        // ensure the json data is a string
        if (data['contentCheckText'] && !(typeof data['contentCheckText'] === 'string' || data['contentCheckText'] instanceof String)) {
            throw new Error("Expected the field `contentCheckText` to be a primitive type in the JSON string but got " + data['contentCheckText']);
        }
        // ensure the json data is a string
        if (data['contentCheckUrl'] && !(typeof data['contentCheckUrl'] === 'string' || data['contentCheckUrl'] instanceof String)) {
            throw new Error("Expected the field `contentCheckUrl` to be a primitive type in the JSON string but got " + data['contentCheckUrl']);
        }
        // ensure the json data is a string
        if (data['contentCheckXpathFilter'] && !(typeof data['contentCheckXpathFilter'] === 'string' || data['contentCheckXpathFilter'] instanceof String)) {
            throw new Error("Expected the field `contentCheckXpathFilter` to be a primitive type in the JSON string but got " + data['contentCheckXpathFilter']);
        }
        // ensure the json data is a string
        if (data['dataSegmentCode'] && !(typeof data['dataSegmentCode'] === 'string' || data['dataSegmentCode'] instanceof String)) {
            throw new Error("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got " + data['dataSegmentCode']);
        }
        // ensure the json data is a string
        if (data['monitorName'] && !(typeof data['monitorName'] === 'string' || data['monitorName'] instanceof String)) {
            throw new Error("Expected the field `monitorName` to be a primitive type in the JSON string but got " + data['monitorName']);
        }
        // ensure the json data is a string
        if (data['monitorNotes'] && !(typeof data['monitorNotes'] === 'string' || data['monitorNotes'] instanceof String)) {
            throw new Error("Expected the field `monitorNotes` to be a primitive type in the JSON string but got " + data['monitorNotes']);
        }
        // ensure the json data is a string
        if (data['publicDescription'] && !(typeof data['publicDescription'] === 'string' || data['publicDescription'] instanceof String)) {
            throw new Error("Expected the field `publicDescription` to be a primitive type in the JSON string but got " + data['publicDescription']);
        }
        // ensure the json data is a string
        if (data['timezoneCode'] && !(typeof data['timezoneCode'] === 'string' || data['timezoneCode'] instanceof String)) {
            throw new Error("Expected the field `timezoneCode` to be a primitive type in the JSON string but got " + data['timezoneCode']);
        }
        // ensure the json data is a string
        if (data['webResponseUrl'] && !(typeof data['webResponseUrl'] === 'string' || data['webResponseUrl'] instanceof String)) {
            throw new Error("Expected the field `webResponseUrl` to be a primitive type in the JSON string but got " + data['webResponseUrl']);
        }

        return true;
    }


}

MonitorPut.RequiredProperties = ["monitorName", "timezoneCode"];

/**
 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
 * @member {String} alertPayloadExtended
 */
MonitorPut.prototype['alertPayloadExtended'] = undefined;

/**
 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
 * @member {String} alertPayloadShort
 */
MonitorPut.prototype['alertPayloadShort'] = undefined;

/**
 * The alert services that are related to this resource.
 * @member {Array.<String>} alertServices
 */
MonitorPut.prototype['alertServices'] = undefined;

/**
 * Indicates that the monitor will accept pings that are not OAuth authenticated.
 * @member {Boolean} allowUnauthenticatedPings
 */
MonitorPut.prototype['allowUnauthenticatedPings'] = undefined;

/**
 * Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.
 * @member {Boolean} contentCheckMustNotExist
 */
MonitorPut.prototype['contentCheckMustNotExist'] = undefined;

/**
 * The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.
 * @member {String} contentCheckText
 */
MonitorPut.prototype['contentCheckText'] = undefined;

/**
 * The URL that the Web Content monitor type must evaluate for the specified conditions.
 * @member {String} contentCheckUrl
 */
MonitorPut.prototype['contentCheckUrl'] = undefined;

/**
 * The Xpath filter (<a href=\"https://en.wikipedia.org/wiki/XPath\">Xpath</a>, <a href=\"https://devhints.io/xpath\">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.
 * @member {String} contentCheckXpathFilter
 */
MonitorPut.prototype['contentCheckXpathFilter'] = undefined;

/**
 * User-provided string on which to segment and filter data. Max 50 characters.
 * @member {String} dataSegmentCode
 */
MonitorPut.prototype['dataSegmentCode'] = undefined;

/**
 * The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.
 * @member {Number} graceSeconds
 */
MonitorPut.prototype['graceSeconds'] = undefined;

/**
 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
 * @member {Number} intervalDays
 */
MonitorPut.prototype['intervalDays'] = undefined;

/**
 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
 * @member {Number} intervalHours
 */
MonitorPut.prototype['intervalHours'] = undefined;

/**
 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
 * @member {Number} intervalMinutes
 */
MonitorPut.prototype['intervalMinutes'] = undefined;

/**
 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
 * @member {Number} intervalMonths
 */
MonitorPut.prototype['intervalMonths'] = undefined;

/**
 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
 * @member {Number} intervalSeconds
 */
MonitorPut.prototype['intervalSeconds'] = undefined;

/**
 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
 * @member {Number} intervalYears
 */
MonitorPut.prototype['intervalYears'] = undefined;

/**
 * Indicates that the monitor is paused and will not send alerts.
 * @member {Boolean} isMonitorPaused
 */
MonitorPut.prototype['isMonitorPaused'] = undefined;

/**
 * The name of the monitor. Max 255 characters.
 * @member {String} monitorName
 */
MonitorPut.prototype['monitorName'] = undefined;

/**
 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
 * @member {String} monitorNotes
 */
MonitorPut.prototype['monitorNotes'] = undefined;

/**
 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
 * @member {String} publicDescription
 */
MonitorPut.prototype['publicDescription'] = undefined;

/**
 * When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.
 * @member {Date} startMonitorAt
 */
MonitorPut.prototype['startMonitorAt'] = undefined;

/**
 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
 * @member {String} timezoneCode
 */
MonitorPut.prototype['timezoneCode'] = undefined;

/**
 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
 * @member {Number} webResponseSecondsLimit
 */
MonitorPut.prototype['webResponseSecondsLimit'] = undefined;

/**
 * The URL that the Web Response monitor type must evaluate for the specified conditions.
 * @member {String} webResponseUrl
 */
MonitorPut.prototype['webResponseUrl'] = undefined;






export default MonitorPut;

