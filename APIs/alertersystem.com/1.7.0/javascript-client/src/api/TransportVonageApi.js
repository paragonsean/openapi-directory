/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportVonageGetCollection200Response from '../model/ApiTransportVonageGetCollection200Response';
import TransportVonageGet from '../model/TransportVonageGet';
import TransportVonageJsonldGet from '../model/TransportVonageJsonldGet';
import TransportVonageJsonldPost from '../model/TransportVonageJsonldPost';
import TransportVonageJsonldPut from '../model/TransportVonageJsonldPut';
import TransportVonagePatch from '../model/TransportVonagePatch';
import TransportVonagePost from '../model/TransportVonagePost';
import TransportVonagePut from '../model/TransportVonagePut';

/**
* TransportVonage service.
* @module api/TransportVonageApi
* @version 1.7.0
*/
export default class TransportVonageApi {

    /**
    * Constructs a new TransportVonageApi. 
    * @alias module:api/TransportVonageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportVonageGetCollection operation.
     * @callback module:api/TransportVonageApi~apiTransportVonageGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportVonageGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportVonage resources.
     * Retrieves the collection of TransportVonage resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportVonageApi~apiTransportVonageGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportVonageGet>}
     */
    apiTransportVonageGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportVonageGet];
      return this.apiClient.callApi(
        '/api/transport-vonage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportVonageIdDelete operation.
     * @callback module:api/TransportVonageApi~apiTransportVonageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportVonage resource.
     * Removes the TransportVonage resource.
     * @param {String} id TransportVonage identifier
     * @param {module:api/TransportVonageApi~apiTransportVonageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportVonageIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportVonageIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-vonage/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportVonageIdGet operation.
     * @callback module:api/TransportVonageApi~apiTransportVonageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportVonageGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportVonage resource.
     * Retrieves a TransportVonage resource.
     * @param {String} id TransportVonage identifier
     * @param {module:api/TransportVonageApi~apiTransportVonageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportVonageGet}
     */
    apiTransportVonageIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportVonageIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportVonageGet;
      return this.apiClient.callApi(
        '/api/transport-vonage/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportVonageIdPatch operation.
     * @callback module:api/TransportVonageApi~apiTransportVonageIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportVonageGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportVonage resource.
     * Updates the TransportVonage resource.
     * @param {String} id TransportVonage identifier
     * @param {module:model/TransportVonagePatch} transportVonagePatch The updated TransportVonage resource
     * @param {module:api/TransportVonageApi~apiTransportVonageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportVonageGet}
     */
    apiTransportVonageIdPatch(id, transportVonagePatch, callback) {
      let postBody = transportVonagePatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportVonageIdPatch");
      }
      // verify the required parameter 'transportVonagePatch' is set
      if (transportVonagePatch === undefined || transportVonagePatch === null) {
        throw new Error("Missing the required parameter 'transportVonagePatch' when calling apiTransportVonageIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportVonageGet;
      return this.apiClient.callApi(
        '/api/transport-vonage/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportVonageIdPut operation.
     * @callback module:api/TransportVonageApi~apiTransportVonageIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportVonageGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportVonage resource.
     * Replaces the TransportVonage resource.
     * @param {String} id TransportVonage identifier
     * @param {module:model/TransportVonagePut} transportVonagePut The updated TransportVonage resource
     * @param {module:api/TransportVonageApi~apiTransportVonageIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportVonageGet}
     */
    apiTransportVonageIdPut(id, transportVonagePut, callback) {
      let postBody = transportVonagePut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportVonageIdPut");
      }
      // verify the required parameter 'transportVonagePut' is set
      if (transportVonagePut === undefined || transportVonagePut === null) {
        throw new Error("Missing the required parameter 'transportVonagePut' when calling apiTransportVonageIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportVonageGet;
      return this.apiClient.callApi(
        '/api/transport-vonage/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportVonagePost operation.
     * @callback module:api/TransportVonageApi~apiTransportVonagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportVonageGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportVonage resource.
     * Creates a TransportVonage resource.
     * @param {module:model/TransportVonagePost} transportVonagePost The new TransportVonage resource
     * @param {module:api/TransportVonageApi~apiTransportVonagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportVonageGet}
     */
    apiTransportVonagePost(transportVonagePost, callback) {
      let postBody = transportVonagePost;
      // verify the required parameter 'transportVonagePost' is set
      if (transportVonagePost === undefined || transportVonagePost === null) {
        throw new Error("Missing the required parameter 'transportVonagePost' when calling apiTransportVonagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportVonageGet;
      return this.apiClient.callApi(
        '/api/transport-vonage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
