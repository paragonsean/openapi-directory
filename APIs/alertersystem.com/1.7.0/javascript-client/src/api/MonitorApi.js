/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiMonitorGetCollection200Response from '../model/ApiMonitorGetCollection200Response';
import MonitorGet from '../model/MonitorGet';
import MonitorJsonldGet from '../model/MonitorJsonldGet';
import MonitorJsonldPost from '../model/MonitorJsonldPost';
import MonitorJsonldPut from '../model/MonitorJsonldPut';
import MonitorPatch from '../model/MonitorPatch';
import MonitorPost from '../model/MonitorPost';
import MonitorPut from '../model/MonitorPut';

/**
* Monitor service.
* @module api/MonitorApi
* @version 1.7.0
*/
export default class MonitorApi {

    /**
    * Constructs a new MonitorApi. 
    * @alias module:api/MonitorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiMonitorGetCollection operation.
     * @callback module:api/MonitorApi~apiMonitorGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MonitorGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Monitor resources.
     * Retrieves the collection of Monitor resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/MonitorApi~apiMonitorGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MonitorGet>}
     */
    apiMonitorGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [MonitorGet];
      return this.apiClient.callApi(
        '/api/monitor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMonitorIdDelete operation.
     * @callback module:api/MonitorApi~apiMonitorIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Monitor resource.
     * Removes the Monitor resource.
     * @param {String} id Monitor identifier
     * @param {module:api/MonitorApi~apiMonitorIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMonitorIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMonitorIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/monitor/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMonitorIdGet operation.
     * @callback module:api/MonitorApi~apiMonitorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonitorGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Monitor resource.
     * Retrieves a Monitor resource.
     * @param {String} id Monitor identifier
     * @param {module:api/MonitorApi~apiMonitorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonitorGet}
     */
    apiMonitorIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMonitorIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = MonitorGet;
      return this.apiClient.callApi(
        '/api/monitor/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMonitorIdPatch operation.
     * @callback module:api/MonitorApi~apiMonitorIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonitorGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Monitor resource.
     * Updates the Monitor resource.
     * @param {String} id Monitor identifier
     * @param {module:model/MonitorPatch} monitorPatch The updated Monitor resource
     * @param {module:api/MonitorApi~apiMonitorIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonitorGet}
     */
    apiMonitorIdPatch(id, monitorPatch, callback) {
      let postBody = monitorPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMonitorIdPatch");
      }
      // verify the required parameter 'monitorPatch' is set
      if (monitorPatch === undefined || monitorPatch === null) {
        throw new Error("Missing the required parameter 'monitorPatch' when calling apiMonitorIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = MonitorGet;
      return this.apiClient.callApi(
        '/api/monitor/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMonitorIdPut operation.
     * @callback module:api/MonitorApi~apiMonitorIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonitorGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Monitor resource.
     * Replaces the Monitor resource.
     * @param {String} id Monitor identifier
     * @param {module:model/MonitorPut} monitorPut The updated Monitor resource
     * @param {module:api/MonitorApi~apiMonitorIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonitorGet}
     */
    apiMonitorIdPut(id, monitorPut, callback) {
      let postBody = monitorPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMonitorIdPut");
      }
      // verify the required parameter 'monitorPut' is set
      if (monitorPut === undefined || monitorPut === null) {
        throw new Error("Missing the required parameter 'monitorPut' when calling apiMonitorIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = MonitorGet;
      return this.apiClient.callApi(
        '/api/monitor/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMonitorPost operation.
     * @callback module:api/MonitorApi~apiMonitorPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonitorGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Monitor resource.
     * Creates a Monitor resource.
     * @param {module:model/MonitorPost} monitorPost The new Monitor resource
     * @param {module:api/MonitorApi~apiMonitorPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonitorGet}
     */
    apiMonitorPost(monitorPost, callback) {
      let postBody = monitorPost;
      // verify the required parameter 'monitorPost' is set
      if (monitorPost === undefined || monitorPost === null) {
        throw new Error("Missing the required parameter 'monitorPost' when calling apiMonitorPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = MonitorGet;
      return this.apiClient.callApi(
        '/api/monitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
