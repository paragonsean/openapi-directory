/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportLightSmsGetCollection200Response from '../model/ApiTransportLightSmsGetCollection200Response';
import TransportLightSmsGet from '../model/TransportLightSmsGet';
import TransportLightSmsJsonldGet from '../model/TransportLightSmsJsonldGet';
import TransportLightSmsJsonldPost from '../model/TransportLightSmsJsonldPost';
import TransportLightSmsJsonldPut from '../model/TransportLightSmsJsonldPut';
import TransportLightSmsPatch from '../model/TransportLightSmsPatch';
import TransportLightSmsPost from '../model/TransportLightSmsPost';
import TransportLightSmsPut from '../model/TransportLightSmsPut';

/**
* TransportLightSms service.
* @module api/TransportLightSmsApi
* @version 1.7.0
*/
export default class TransportLightSmsApi {

    /**
    * Constructs a new TransportLightSmsApi. 
    * @alias module:api/TransportLightSmsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportLightSmsGetCollection operation.
     * @callback module:api/TransportLightSmsApi~apiTransportLightSmsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportLightSmsGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportLightSms resources.
     * Retrieves the collection of TransportLightSms resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportLightSmsApi~apiTransportLightSmsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportLightSmsGet>}
     */
    apiTransportLightSmsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportLightSmsGet];
      return this.apiClient.callApi(
        '/api/transport-light-sms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportLightSmsIdDelete operation.
     * @callback module:api/TransportLightSmsApi~apiTransportLightSmsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportLightSms resource.
     * Removes the TransportLightSms resource.
     * @param {String} id TransportLightSms identifier
     * @param {module:api/TransportLightSmsApi~apiTransportLightSmsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportLightSmsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportLightSmsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-light-sms/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportLightSmsIdGet operation.
     * @callback module:api/TransportLightSmsApi~apiTransportLightSmsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportLightSmsGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportLightSms resource.
     * Retrieves a TransportLightSms resource.
     * @param {String} id TransportLightSms identifier
     * @param {module:api/TransportLightSmsApi~apiTransportLightSmsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportLightSmsGet}
     */
    apiTransportLightSmsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportLightSmsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportLightSmsGet;
      return this.apiClient.callApi(
        '/api/transport-light-sms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportLightSmsIdPatch operation.
     * @callback module:api/TransportLightSmsApi~apiTransportLightSmsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportLightSmsGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportLightSms resource.
     * Updates the TransportLightSms resource.
     * @param {String} id TransportLightSms identifier
     * @param {module:model/TransportLightSmsPatch} transportLightSmsPatch The updated TransportLightSms resource
     * @param {module:api/TransportLightSmsApi~apiTransportLightSmsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportLightSmsGet}
     */
    apiTransportLightSmsIdPatch(id, transportLightSmsPatch, callback) {
      let postBody = transportLightSmsPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportLightSmsIdPatch");
      }
      // verify the required parameter 'transportLightSmsPatch' is set
      if (transportLightSmsPatch === undefined || transportLightSmsPatch === null) {
        throw new Error("Missing the required parameter 'transportLightSmsPatch' when calling apiTransportLightSmsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportLightSmsGet;
      return this.apiClient.callApi(
        '/api/transport-light-sms/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportLightSmsIdPut operation.
     * @callback module:api/TransportLightSmsApi~apiTransportLightSmsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportLightSmsGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportLightSms resource.
     * Replaces the TransportLightSms resource.
     * @param {String} id TransportLightSms identifier
     * @param {module:model/TransportLightSmsPut} transportLightSmsPut The updated TransportLightSms resource
     * @param {module:api/TransportLightSmsApi~apiTransportLightSmsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportLightSmsGet}
     */
    apiTransportLightSmsIdPut(id, transportLightSmsPut, callback) {
      let postBody = transportLightSmsPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportLightSmsIdPut");
      }
      // verify the required parameter 'transportLightSmsPut' is set
      if (transportLightSmsPut === undefined || transportLightSmsPut === null) {
        throw new Error("Missing the required parameter 'transportLightSmsPut' when calling apiTransportLightSmsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportLightSmsGet;
      return this.apiClient.callApi(
        '/api/transport-light-sms/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportLightSmsPost operation.
     * @callback module:api/TransportLightSmsApi~apiTransportLightSmsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportLightSmsGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportLightSms resource.
     * Creates a TransportLightSms resource.
     * @param {module:model/TransportLightSmsPost} transportLightSmsPost The new TransportLightSms resource
     * @param {module:api/TransportLightSmsApi~apiTransportLightSmsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportLightSmsGet}
     */
    apiTransportLightSmsPost(transportLightSmsPost, callback) {
      let postBody = transportLightSmsPost;
      // verify the required parameter 'transportLightSmsPost' is set
      if (transportLightSmsPost === undefined || transportLightSmsPost === null) {
        throw new Error("Missing the required parameter 'transportLightSmsPost' when calling apiTransportLightSmsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportLightSmsGet;
      return this.apiClient.callApi(
        '/api/transport-light-sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
