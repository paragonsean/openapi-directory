/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportGitterGetCollection200Response from '../model/ApiTransportGitterGetCollection200Response';
import TransportGitterGet from '../model/TransportGitterGet';
import TransportGitterJsonldGet from '../model/TransportGitterJsonldGet';
import TransportGitterJsonldPost from '../model/TransportGitterJsonldPost';
import TransportGitterJsonldPut from '../model/TransportGitterJsonldPut';
import TransportGitterPatch from '../model/TransportGitterPatch';
import TransportGitterPost from '../model/TransportGitterPost';
import TransportGitterPut from '../model/TransportGitterPut';

/**
* TransportGitter service.
* @module api/TransportGitterApi
* @version 1.7.0
*/
export default class TransportGitterApi {

    /**
    * Constructs a new TransportGitterApi. 
    * @alias module:api/TransportGitterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportGitterGetCollection operation.
     * @callback module:api/TransportGitterApi~apiTransportGitterGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportGitterGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportGitter resources.
     * Retrieves the collection of TransportGitter resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportGitterApi~apiTransportGitterGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportGitterGet>}
     */
    apiTransportGitterGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportGitterGet];
      return this.apiClient.callApi(
        '/api/transport-gitter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportGitterIdDelete operation.
     * @callback module:api/TransportGitterApi~apiTransportGitterIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportGitter resource.
     * Removes the TransportGitter resource.
     * @param {String} id TransportGitter identifier
     * @param {module:api/TransportGitterApi~apiTransportGitterIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportGitterIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportGitterIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-gitter/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportGitterIdGet operation.
     * @callback module:api/TransportGitterApi~apiTransportGitterIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportGitterGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportGitter resource.
     * Retrieves a TransportGitter resource.
     * @param {String} id TransportGitter identifier
     * @param {module:api/TransportGitterApi~apiTransportGitterIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportGitterGet}
     */
    apiTransportGitterIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportGitterIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportGitterGet;
      return this.apiClient.callApi(
        '/api/transport-gitter/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportGitterIdPatch operation.
     * @callback module:api/TransportGitterApi~apiTransportGitterIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportGitterGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportGitter resource.
     * Updates the TransportGitter resource.
     * @param {String} id TransportGitter identifier
     * @param {module:model/TransportGitterPatch} transportGitterPatch The updated TransportGitter resource
     * @param {module:api/TransportGitterApi~apiTransportGitterIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportGitterGet}
     */
    apiTransportGitterIdPatch(id, transportGitterPatch, callback) {
      let postBody = transportGitterPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportGitterIdPatch");
      }
      // verify the required parameter 'transportGitterPatch' is set
      if (transportGitterPatch === undefined || transportGitterPatch === null) {
        throw new Error("Missing the required parameter 'transportGitterPatch' when calling apiTransportGitterIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportGitterGet;
      return this.apiClient.callApi(
        '/api/transport-gitter/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportGitterIdPut operation.
     * @callback module:api/TransportGitterApi~apiTransportGitterIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportGitterGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportGitter resource.
     * Replaces the TransportGitter resource.
     * @param {String} id TransportGitter identifier
     * @param {module:model/TransportGitterPut} transportGitterPut The updated TransportGitter resource
     * @param {module:api/TransportGitterApi~apiTransportGitterIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportGitterGet}
     */
    apiTransportGitterIdPut(id, transportGitterPut, callback) {
      let postBody = transportGitterPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportGitterIdPut");
      }
      // verify the required parameter 'transportGitterPut' is set
      if (transportGitterPut === undefined || transportGitterPut === null) {
        throw new Error("Missing the required parameter 'transportGitterPut' when calling apiTransportGitterIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportGitterGet;
      return this.apiClient.callApi(
        '/api/transport-gitter/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportGitterPost operation.
     * @callback module:api/TransportGitterApi~apiTransportGitterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportGitterGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportGitter resource.
     * Creates a TransportGitter resource.
     * @param {module:model/TransportGitterPost} transportGitterPost The new TransportGitter resource
     * @param {module:api/TransportGitterApi~apiTransportGitterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportGitterGet}
     */
    apiTransportGitterPost(transportGitterPost, callback) {
      let postBody = transportGitterPost;
      // verify the required parameter 'transportGitterPost' is set
      if (transportGitterPost === undefined || transportGitterPost === null) {
        throw new Error("Missing the required parameter 'transportGitterPost' when calling apiTransportGitterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportGitterGet;
      return this.apiClient.callApi(
        '/api/transport-gitter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
