/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlertServiceGet from '../model/AlertServiceGet';
import AlertServiceJsonldGet from '../model/AlertServiceJsonldGet';
import AlertServiceJsonldPost from '../model/AlertServiceJsonldPost';
import AlertServiceJsonldPut from '../model/AlertServiceJsonldPut';
import AlertServicePatch from '../model/AlertServicePatch';
import AlertServicePost from '../model/AlertServicePost';
import AlertServicePut from '../model/AlertServicePut';
import ApiAlertServiceGetCollection200Response from '../model/ApiAlertServiceGetCollection200Response';

/**
* AlertService service.
* @module api/AlertServiceApi
* @version 1.7.0
*/
export default class AlertServiceApi {

    /**
    * Constructs a new AlertServiceApi. 
    * @alias module:api/AlertServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAlertServiceGetCollection operation.
     * @callback module:api/AlertServiceApi~apiAlertServiceGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlertServiceGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of AlertService resources.
     * Retrieves the collection of AlertService resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/AlertServiceApi~apiAlertServiceGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlertServiceGet>}
     */
    apiAlertServiceGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [AlertServiceGet];
      return this.apiClient.callApi(
        '/api/alert-service', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertServiceIdDelete operation.
     * @callback module:api/AlertServiceApi~apiAlertServiceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the AlertService resource.
     * Removes the AlertService resource.
     * @param {String} id AlertService identifier
     * @param {module:api/AlertServiceApi~apiAlertServiceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertServiceIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertServiceIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert-service/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertServiceIdGet operation.
     * @callback module:api/AlertServiceApi~apiAlertServiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertServiceGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a AlertService resource.
     * Retrieves a AlertService resource.
     * @param {String} id AlertService identifier
     * @param {module:api/AlertServiceApi~apiAlertServiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertServiceGet}
     */
    apiAlertServiceIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertServiceIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = AlertServiceGet;
      return this.apiClient.callApi(
        '/api/alert-service/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertServiceIdPatch operation.
     * @callback module:api/AlertServiceApi~apiAlertServiceIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertServiceGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the AlertService resource.
     * Updates the AlertService resource.
     * @param {String} id AlertService identifier
     * @param {module:model/AlertServicePatch} alertServicePatch The updated AlertService resource
     * @param {module:api/AlertServiceApi~apiAlertServiceIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertServiceGet}
     */
    apiAlertServiceIdPatch(id, alertServicePatch, callback) {
      let postBody = alertServicePatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertServiceIdPatch");
      }
      // verify the required parameter 'alertServicePatch' is set
      if (alertServicePatch === undefined || alertServicePatch === null) {
        throw new Error("Missing the required parameter 'alertServicePatch' when calling apiAlertServiceIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = AlertServiceGet;
      return this.apiClient.callApi(
        '/api/alert-service/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertServiceIdPut operation.
     * @callback module:api/AlertServiceApi~apiAlertServiceIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertServiceGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the AlertService resource.
     * Replaces the AlertService resource.
     * @param {String} id AlertService identifier
     * @param {module:model/AlertServicePut} alertServicePut The updated AlertService resource
     * @param {module:api/AlertServiceApi~apiAlertServiceIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertServiceGet}
     */
    apiAlertServiceIdPut(id, alertServicePut, callback) {
      let postBody = alertServicePut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertServiceIdPut");
      }
      // verify the required parameter 'alertServicePut' is set
      if (alertServicePut === undefined || alertServicePut === null) {
        throw new Error("Missing the required parameter 'alertServicePut' when calling apiAlertServiceIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = AlertServiceGet;
      return this.apiClient.callApi(
        '/api/alert-service/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertServicePost operation.
     * @callback module:api/AlertServiceApi~apiAlertServicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertServiceGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a AlertService resource.
     * Creates a AlertService resource.
     * @param {module:model/AlertServicePost} alertServicePost The new AlertService resource
     * @param {module:api/AlertServiceApi~apiAlertServicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertServiceGet}
     */
    apiAlertServicePost(alertServicePost, callback) {
      let postBody = alertServicePost;
      // verify the required parameter 'alertServicePost' is set
      if (alertServicePost === undefined || alertServicePost === null) {
        throw new Error("Missing the required parameter 'alertServicePost' when calling apiAlertServicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = AlertServiceGet;
      return this.apiClient.callApi(
        '/api/alert-service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
