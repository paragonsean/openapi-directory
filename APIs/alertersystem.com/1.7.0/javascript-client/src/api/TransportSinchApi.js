/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportSinchGetCollection200Response from '../model/ApiTransportSinchGetCollection200Response';
import TransportSinchGet from '../model/TransportSinchGet';
import TransportSinchJsonldGet from '../model/TransportSinchJsonldGet';
import TransportSinchJsonldPost from '../model/TransportSinchJsonldPost';
import TransportSinchJsonldPut from '../model/TransportSinchJsonldPut';
import TransportSinchPatch from '../model/TransportSinchPatch';
import TransportSinchPost from '../model/TransportSinchPost';
import TransportSinchPut from '../model/TransportSinchPut';

/**
* TransportSinch service.
* @module api/TransportSinchApi
* @version 1.7.0
*/
export default class TransportSinchApi {

    /**
    * Constructs a new TransportSinchApi. 
    * @alias module:api/TransportSinchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportSinchGetCollection operation.
     * @callback module:api/TransportSinchApi~apiTransportSinchGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportSinchGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportSinch resources.
     * Retrieves the collection of TransportSinch resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportSinchApi~apiTransportSinchGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportSinchGet>}
     */
    apiTransportSinchGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportSinchGet];
      return this.apiClient.callApi(
        '/api/transport-sinch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportSinchIdDelete operation.
     * @callback module:api/TransportSinchApi~apiTransportSinchIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportSinch resource.
     * Removes the TransportSinch resource.
     * @param {String} id TransportSinch identifier
     * @param {module:api/TransportSinchApi~apiTransportSinchIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportSinchIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportSinchIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-sinch/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportSinchIdGet operation.
     * @callback module:api/TransportSinchApi~apiTransportSinchIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportSinchGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportSinch resource.
     * Retrieves a TransportSinch resource.
     * @param {String} id TransportSinch identifier
     * @param {module:api/TransportSinchApi~apiTransportSinchIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportSinchGet}
     */
    apiTransportSinchIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportSinchIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportSinchGet;
      return this.apiClient.callApi(
        '/api/transport-sinch/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportSinchIdPatch operation.
     * @callback module:api/TransportSinchApi~apiTransportSinchIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportSinchGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportSinch resource.
     * Updates the TransportSinch resource.
     * @param {String} id TransportSinch identifier
     * @param {module:model/TransportSinchPatch} transportSinchPatch The updated TransportSinch resource
     * @param {module:api/TransportSinchApi~apiTransportSinchIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportSinchGet}
     */
    apiTransportSinchIdPatch(id, transportSinchPatch, callback) {
      let postBody = transportSinchPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportSinchIdPatch");
      }
      // verify the required parameter 'transportSinchPatch' is set
      if (transportSinchPatch === undefined || transportSinchPatch === null) {
        throw new Error("Missing the required parameter 'transportSinchPatch' when calling apiTransportSinchIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportSinchGet;
      return this.apiClient.callApi(
        '/api/transport-sinch/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportSinchIdPut operation.
     * @callback module:api/TransportSinchApi~apiTransportSinchIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportSinchGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportSinch resource.
     * Replaces the TransportSinch resource.
     * @param {String} id TransportSinch identifier
     * @param {module:model/TransportSinchPut} transportSinchPut The updated TransportSinch resource
     * @param {module:api/TransportSinchApi~apiTransportSinchIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportSinchGet}
     */
    apiTransportSinchIdPut(id, transportSinchPut, callback) {
      let postBody = transportSinchPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportSinchIdPut");
      }
      // verify the required parameter 'transportSinchPut' is set
      if (transportSinchPut === undefined || transportSinchPut === null) {
        throw new Error("Missing the required parameter 'transportSinchPut' when calling apiTransportSinchIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportSinchGet;
      return this.apiClient.callApi(
        '/api/transport-sinch/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportSinchPost operation.
     * @callback module:api/TransportSinchApi~apiTransportSinchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportSinchGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportSinch resource.
     * Creates a TransportSinch resource.
     * @param {module:model/TransportSinchPost} transportSinchPost The new TransportSinch resource
     * @param {module:api/TransportSinchApi~apiTransportSinchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportSinchGet}
     */
    apiTransportSinchPost(transportSinchPost, callback) {
      let postBody = transportSinchPost;
      // verify the required parameter 'transportSinchPost' is set
      if (transportSinchPost === undefined || transportSinchPost === null) {
        throw new Error("Missing the required parameter 'transportSinchPost' when calling apiTransportSinchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportSinchGet;
      return this.apiClient.callApi(
        '/api/transport-sinch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
