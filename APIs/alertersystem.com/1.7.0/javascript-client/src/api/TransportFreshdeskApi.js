/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportFreshdeskGetCollection200Response from '../model/ApiTransportFreshdeskGetCollection200Response';
import TransportFreshdeskGet from '../model/TransportFreshdeskGet';
import TransportFreshdeskJsonldGet from '../model/TransportFreshdeskJsonldGet';
import TransportFreshdeskJsonldPost from '../model/TransportFreshdeskJsonldPost';
import TransportFreshdeskJsonldPut from '../model/TransportFreshdeskJsonldPut';
import TransportFreshdeskPatch from '../model/TransportFreshdeskPatch';
import TransportFreshdeskPost from '../model/TransportFreshdeskPost';
import TransportFreshdeskPut from '../model/TransportFreshdeskPut';

/**
* TransportFreshdesk service.
* @module api/TransportFreshdeskApi
* @version 1.7.0
*/
export default class TransportFreshdeskApi {

    /**
    * Constructs a new TransportFreshdeskApi. 
    * @alias module:api/TransportFreshdeskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportFreshdeskGetCollection operation.
     * @callback module:api/TransportFreshdeskApi~apiTransportFreshdeskGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportFreshdeskGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportFreshdesk resources.
     * Retrieves the collection of TransportFreshdesk resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportFreshdeskApi~apiTransportFreshdeskGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportFreshdeskGet>}
     */
    apiTransportFreshdeskGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportFreshdeskGet];
      return this.apiClient.callApi(
        '/api/transport-freshdesk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFreshdeskIdDelete operation.
     * @callback module:api/TransportFreshdeskApi~apiTransportFreshdeskIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportFreshdesk resource.
     * Removes the TransportFreshdesk resource.
     * @param {String} id TransportFreshdesk identifier
     * @param {module:api/TransportFreshdeskApi~apiTransportFreshdeskIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportFreshdeskIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFreshdeskIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-freshdesk/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFreshdeskIdGet operation.
     * @callback module:api/TransportFreshdeskApi~apiTransportFreshdeskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFreshdeskGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportFreshdesk resource.
     * Retrieves a TransportFreshdesk resource.
     * @param {String} id TransportFreshdesk identifier
     * @param {module:api/TransportFreshdeskApi~apiTransportFreshdeskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFreshdeskGet}
     */
    apiTransportFreshdeskIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFreshdeskIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFreshdeskGet;
      return this.apiClient.callApi(
        '/api/transport-freshdesk/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFreshdeskIdPatch operation.
     * @callback module:api/TransportFreshdeskApi~apiTransportFreshdeskIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFreshdeskGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportFreshdesk resource.
     * Updates the TransportFreshdesk resource.
     * @param {String} id TransportFreshdesk identifier
     * @param {module:model/TransportFreshdeskPatch} transportFreshdeskPatch The updated TransportFreshdesk resource
     * @param {module:api/TransportFreshdeskApi~apiTransportFreshdeskIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFreshdeskGet}
     */
    apiTransportFreshdeskIdPatch(id, transportFreshdeskPatch, callback) {
      let postBody = transportFreshdeskPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFreshdeskIdPatch");
      }
      // verify the required parameter 'transportFreshdeskPatch' is set
      if (transportFreshdeskPatch === undefined || transportFreshdeskPatch === null) {
        throw new Error("Missing the required parameter 'transportFreshdeskPatch' when calling apiTransportFreshdeskIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFreshdeskGet;
      return this.apiClient.callApi(
        '/api/transport-freshdesk/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFreshdeskIdPut operation.
     * @callback module:api/TransportFreshdeskApi~apiTransportFreshdeskIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFreshdeskGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportFreshdesk resource.
     * Replaces the TransportFreshdesk resource.
     * @param {String} id TransportFreshdesk identifier
     * @param {module:model/TransportFreshdeskPut} transportFreshdeskPut The updated TransportFreshdesk resource
     * @param {module:api/TransportFreshdeskApi~apiTransportFreshdeskIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFreshdeskGet}
     */
    apiTransportFreshdeskIdPut(id, transportFreshdeskPut, callback) {
      let postBody = transportFreshdeskPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFreshdeskIdPut");
      }
      // verify the required parameter 'transportFreshdeskPut' is set
      if (transportFreshdeskPut === undefined || transportFreshdeskPut === null) {
        throw new Error("Missing the required parameter 'transportFreshdeskPut' when calling apiTransportFreshdeskIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFreshdeskGet;
      return this.apiClient.callApi(
        '/api/transport-freshdesk/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFreshdeskPost operation.
     * @callback module:api/TransportFreshdeskApi~apiTransportFreshdeskPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFreshdeskGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportFreshdesk resource.
     * Creates a TransportFreshdesk resource.
     * @param {module:model/TransportFreshdeskPost} transportFreshdeskPost The new TransportFreshdesk resource
     * @param {module:api/TransportFreshdeskApi~apiTransportFreshdeskPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFreshdeskGet}
     */
    apiTransportFreshdeskPost(transportFreshdeskPost, callback) {
      let postBody = transportFreshdeskPost;
      // verify the required parameter 'transportFreshdeskPost' is set
      if (transportFreshdeskPost === undefined || transportFreshdeskPost === null) {
        throw new Error("Missing the required parameter 'transportFreshdeskPost' when calling apiTransportFreshdeskPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFreshdeskGet;
      return this.apiClient.callApi(
        '/api/transport-freshdesk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
