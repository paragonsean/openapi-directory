/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiUserAccountGetCollection200Response from '../model/ApiUserAccountGetCollection200Response';
import UserAccountGet from '../model/UserAccountGet';
import UserAccountJsonldGet from '../model/UserAccountJsonldGet';
import UserAccountJsonldPut from '../model/UserAccountJsonldPut';
import UserAccountPatch from '../model/UserAccountPatch';
import UserAccountPut from '../model/UserAccountPut';

/**
* UserAccount service.
* @module api/UserAccountApi
* @version 1.7.0
*/
export default class UserAccountApi {

    /**
    * Constructs a new UserAccountApi. 
    * @alias module:api/UserAccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiUserAccountGetCollection operation.
     * @callback module:api/UserAccountApi~apiUserAccountGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserAccountGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of UserAccount resources.
     * Retrieves the collection of UserAccount resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/UserAccountApi~apiUserAccountGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserAccountGet>}
     */
    apiUserAccountGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [UserAccountGet];
      return this.apiClient.callApi(
        '/api/user-account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserAccountIdGet operation.
     * @callback module:api/UserAccountApi~apiUserAccountIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccountGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a UserAccount resource.
     * Retrieves a UserAccount resource.
     * @param {String} id UserAccount identifier
     * @param {module:api/UserAccountApi~apiUserAccountIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccountGet}
     */
    apiUserAccountIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserAccountIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = UserAccountGet;
      return this.apiClient.callApi(
        '/api/user-account/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserAccountIdPatch operation.
     * @callback module:api/UserAccountApi~apiUserAccountIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccountGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the UserAccount resource.
     * Updates the UserAccount resource.
     * @param {String} id UserAccount identifier
     * @param {module:model/UserAccountPatch} userAccountPatch The updated UserAccount resource
     * @param {module:api/UserAccountApi~apiUserAccountIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccountGet}
     */
    apiUserAccountIdPatch(id, userAccountPatch, callback) {
      let postBody = userAccountPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserAccountIdPatch");
      }
      // verify the required parameter 'userAccountPatch' is set
      if (userAccountPatch === undefined || userAccountPatch === null) {
        throw new Error("Missing the required parameter 'userAccountPatch' when calling apiUserAccountIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = UserAccountGet;
      return this.apiClient.callApi(
        '/api/user-account/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserAccountIdPut operation.
     * @callback module:api/UserAccountApi~apiUserAccountIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccountGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the UserAccount resource.
     * Replaces the UserAccount resource.
     * @param {String} id UserAccount identifier
     * @param {module:model/UserAccountPut} userAccountPut The updated UserAccount resource
     * @param {module:api/UserAccountApi~apiUserAccountIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccountGet}
     */
    apiUserAccountIdPut(id, userAccountPut, callback) {
      let postBody = userAccountPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserAccountIdPut");
      }
      // verify the required parameter 'userAccountPut' is set
      if (userAccountPut === undefined || userAccountPut === null) {
        throw new Error("Missing the required parameter 'userAccountPut' when calling apiUserAccountIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = UserAccountGet;
      return this.apiClient.callApi(
        '/api/user-account/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
