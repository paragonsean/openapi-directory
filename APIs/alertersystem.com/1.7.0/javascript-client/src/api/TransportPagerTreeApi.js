/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportPagerTreeGetCollection200Response from '../model/ApiTransportPagerTreeGetCollection200Response';
import TransportPagerTreeGet from '../model/TransportPagerTreeGet';
import TransportPagerTreeJsonldGet from '../model/TransportPagerTreeJsonldGet';
import TransportPagerTreeJsonldPost from '../model/TransportPagerTreeJsonldPost';
import TransportPagerTreeJsonldPut from '../model/TransportPagerTreeJsonldPut';
import TransportPagerTreePatch from '../model/TransportPagerTreePatch';
import TransportPagerTreePost from '../model/TransportPagerTreePost';
import TransportPagerTreePut from '../model/TransportPagerTreePut';

/**
* TransportPagerTree service.
* @module api/TransportPagerTreeApi
* @version 1.7.0
*/
export default class TransportPagerTreeApi {

    /**
    * Constructs a new TransportPagerTreeApi. 
    * @alias module:api/TransportPagerTreeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportPagerTreeGetCollection operation.
     * @callback module:api/TransportPagerTreeApi~apiTransportPagerTreeGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportPagerTreeGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportPagerTree resources.
     * Retrieves the collection of TransportPagerTree resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportPagerTreeApi~apiTransportPagerTreeGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportPagerTreeGet>}
     */
    apiTransportPagerTreeGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportPagerTreeGet];
      return this.apiClient.callApi(
        '/api/transport-pager-tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportPagerTreeIdDelete operation.
     * @callback module:api/TransportPagerTreeApi~apiTransportPagerTreeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportPagerTree resource.
     * Removes the TransportPagerTree resource.
     * @param {String} id TransportPagerTree identifier
     * @param {module:api/TransportPagerTreeApi~apiTransportPagerTreeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportPagerTreeIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportPagerTreeIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-pager-tree/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportPagerTreeIdGet operation.
     * @callback module:api/TransportPagerTreeApi~apiTransportPagerTreeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportPagerTreeGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportPagerTree resource.
     * Retrieves a TransportPagerTree resource.
     * @param {String} id TransportPagerTree identifier
     * @param {module:api/TransportPagerTreeApi~apiTransportPagerTreeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportPagerTreeGet}
     */
    apiTransportPagerTreeIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportPagerTreeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportPagerTreeGet;
      return this.apiClient.callApi(
        '/api/transport-pager-tree/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportPagerTreeIdPatch operation.
     * @callback module:api/TransportPagerTreeApi~apiTransportPagerTreeIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportPagerTreeGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportPagerTree resource.
     * Updates the TransportPagerTree resource.
     * @param {String} id TransportPagerTree identifier
     * @param {module:model/TransportPagerTreePatch} transportPagerTreePatch The updated TransportPagerTree resource
     * @param {module:api/TransportPagerTreeApi~apiTransportPagerTreeIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportPagerTreeGet}
     */
    apiTransportPagerTreeIdPatch(id, transportPagerTreePatch, callback) {
      let postBody = transportPagerTreePatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportPagerTreeIdPatch");
      }
      // verify the required parameter 'transportPagerTreePatch' is set
      if (transportPagerTreePatch === undefined || transportPagerTreePatch === null) {
        throw new Error("Missing the required parameter 'transportPagerTreePatch' when calling apiTransportPagerTreeIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportPagerTreeGet;
      return this.apiClient.callApi(
        '/api/transport-pager-tree/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportPagerTreeIdPut operation.
     * @callback module:api/TransportPagerTreeApi~apiTransportPagerTreeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportPagerTreeGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportPagerTree resource.
     * Replaces the TransportPagerTree resource.
     * @param {String} id TransportPagerTree identifier
     * @param {module:model/TransportPagerTreePut} transportPagerTreePut The updated TransportPagerTree resource
     * @param {module:api/TransportPagerTreeApi~apiTransportPagerTreeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportPagerTreeGet}
     */
    apiTransportPagerTreeIdPut(id, transportPagerTreePut, callback) {
      let postBody = transportPagerTreePut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportPagerTreeIdPut");
      }
      // verify the required parameter 'transportPagerTreePut' is set
      if (transportPagerTreePut === undefined || transportPagerTreePut === null) {
        throw new Error("Missing the required parameter 'transportPagerTreePut' when calling apiTransportPagerTreeIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportPagerTreeGet;
      return this.apiClient.callApi(
        '/api/transport-pager-tree/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportPagerTreePost operation.
     * @callback module:api/TransportPagerTreeApi~apiTransportPagerTreePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportPagerTreeGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportPagerTree resource.
     * Creates a TransportPagerTree resource.
     * @param {module:model/TransportPagerTreePost} transportPagerTreePost The new TransportPagerTree resource
     * @param {module:api/TransportPagerTreeApi~apiTransportPagerTreePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportPagerTreeGet}
     */
    apiTransportPagerTreePost(transportPagerTreePost, callback) {
      let postBody = transportPagerTreePost;
      // verify the required parameter 'transportPagerTreePost' is set
      if (transportPagerTreePost === undefined || transportPagerTreePost === null) {
        throw new Error("Missing the required parameter 'transportPagerTreePost' when calling apiTransportPagerTreePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportPagerTreeGet;
      return this.apiClient.callApi(
        '/api/transport-pager-tree', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
