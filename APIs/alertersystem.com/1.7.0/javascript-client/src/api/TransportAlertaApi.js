/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportAlertaGetCollection200Response from '../model/ApiTransportAlertaGetCollection200Response';
import TransportAlertaGet from '../model/TransportAlertaGet';
import TransportAlertaJsonldGet from '../model/TransportAlertaJsonldGet';
import TransportAlertaJsonldPost from '../model/TransportAlertaJsonldPost';
import TransportAlertaJsonldPut from '../model/TransportAlertaJsonldPut';
import TransportAlertaPatch from '../model/TransportAlertaPatch';
import TransportAlertaPost from '../model/TransportAlertaPost';
import TransportAlertaPut from '../model/TransportAlertaPut';

/**
* TransportAlerta service.
* @module api/TransportAlertaApi
* @version 1.7.0
*/
export default class TransportAlertaApi {

    /**
    * Constructs a new TransportAlertaApi. 
    * @alias module:api/TransportAlertaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportAlertaGetCollection operation.
     * @callback module:api/TransportAlertaApi~apiTransportAlertaGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportAlertaGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportAlerta resources.
     * Retrieves the collection of TransportAlerta resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportAlertaApi~apiTransportAlertaGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportAlertaGet>}
     */
    apiTransportAlertaGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportAlertaGet];
      return this.apiClient.callApi(
        '/api/transport-alerta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportAlertaIdDelete operation.
     * @callback module:api/TransportAlertaApi~apiTransportAlertaIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportAlerta resource.
     * Removes the TransportAlerta resource.
     * @param {String} id TransportAlerta identifier
     * @param {module:api/TransportAlertaApi~apiTransportAlertaIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportAlertaIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportAlertaIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-alerta/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportAlertaIdGet operation.
     * @callback module:api/TransportAlertaApi~apiTransportAlertaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportAlertaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportAlerta resource.
     * Retrieves a TransportAlerta resource.
     * @param {String} id TransportAlerta identifier
     * @param {module:api/TransportAlertaApi~apiTransportAlertaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportAlertaGet}
     */
    apiTransportAlertaIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportAlertaIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportAlertaGet;
      return this.apiClient.callApi(
        '/api/transport-alerta/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportAlertaIdPatch operation.
     * @callback module:api/TransportAlertaApi~apiTransportAlertaIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportAlertaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportAlerta resource.
     * Updates the TransportAlerta resource.
     * @param {String} id TransportAlerta identifier
     * @param {module:model/TransportAlertaPatch} transportAlertaPatch The updated TransportAlerta resource
     * @param {module:api/TransportAlertaApi~apiTransportAlertaIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportAlertaGet}
     */
    apiTransportAlertaIdPatch(id, transportAlertaPatch, callback) {
      let postBody = transportAlertaPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportAlertaIdPatch");
      }
      // verify the required parameter 'transportAlertaPatch' is set
      if (transportAlertaPatch === undefined || transportAlertaPatch === null) {
        throw new Error("Missing the required parameter 'transportAlertaPatch' when calling apiTransportAlertaIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportAlertaGet;
      return this.apiClient.callApi(
        '/api/transport-alerta/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportAlertaIdPut operation.
     * @callback module:api/TransportAlertaApi~apiTransportAlertaIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportAlertaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportAlerta resource.
     * Replaces the TransportAlerta resource.
     * @param {String} id TransportAlerta identifier
     * @param {module:model/TransportAlertaPut} transportAlertaPut The updated TransportAlerta resource
     * @param {module:api/TransportAlertaApi~apiTransportAlertaIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportAlertaGet}
     */
    apiTransportAlertaIdPut(id, transportAlertaPut, callback) {
      let postBody = transportAlertaPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportAlertaIdPut");
      }
      // verify the required parameter 'transportAlertaPut' is set
      if (transportAlertaPut === undefined || transportAlertaPut === null) {
        throw new Error("Missing the required parameter 'transportAlertaPut' when calling apiTransportAlertaIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportAlertaGet;
      return this.apiClient.callApi(
        '/api/transport-alerta/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportAlertaPost operation.
     * @callback module:api/TransportAlertaApi~apiTransportAlertaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportAlertaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportAlerta resource.
     * Creates a TransportAlerta resource.
     * @param {module:model/TransportAlertaPost} transportAlertaPost The new TransportAlerta resource
     * @param {module:api/TransportAlertaApi~apiTransportAlertaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportAlertaGet}
     */
    apiTransportAlertaPost(transportAlertaPost, callback) {
      let postBody = transportAlertaPost;
      // verify the required parameter 'transportAlertaPost' is set
      if (transportAlertaPost === undefined || transportAlertaPost === null) {
        throw new Error("Missing the required parameter 'transportAlertaPost' when calling apiTransportAlertaPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportAlertaGet;
      return this.apiClient.callApi(
        '/api/transport-alerta', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
