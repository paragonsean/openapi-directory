/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportChatworkGetCollection200Response from '../model/ApiTransportChatworkGetCollection200Response';
import TransportChatworkGet from '../model/TransportChatworkGet';
import TransportChatworkJsonldGet from '../model/TransportChatworkJsonldGet';
import TransportChatworkJsonldPost from '../model/TransportChatworkJsonldPost';
import TransportChatworkJsonldPut from '../model/TransportChatworkJsonldPut';
import TransportChatworkPatch from '../model/TransportChatworkPatch';
import TransportChatworkPost from '../model/TransportChatworkPost';
import TransportChatworkPut from '../model/TransportChatworkPut';

/**
* TransportChatwork service.
* @module api/TransportChatworkApi
* @version 1.7.0
*/
export default class TransportChatworkApi {

    /**
    * Constructs a new TransportChatworkApi. 
    * @alias module:api/TransportChatworkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportChatworkGetCollection operation.
     * @callback module:api/TransportChatworkApi~apiTransportChatworkGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportChatworkGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportChatwork resources.
     * Retrieves the collection of TransportChatwork resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportChatworkApi~apiTransportChatworkGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportChatworkGet>}
     */
    apiTransportChatworkGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportChatworkGet];
      return this.apiClient.callApi(
        '/api/transport-chatwork', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportChatworkIdDelete operation.
     * @callback module:api/TransportChatworkApi~apiTransportChatworkIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportChatwork resource.
     * Removes the TransportChatwork resource.
     * @param {String} id TransportChatwork identifier
     * @param {module:api/TransportChatworkApi~apiTransportChatworkIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportChatworkIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportChatworkIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-chatwork/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportChatworkIdGet operation.
     * @callback module:api/TransportChatworkApi~apiTransportChatworkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportChatworkGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportChatwork resource.
     * Retrieves a TransportChatwork resource.
     * @param {String} id TransportChatwork identifier
     * @param {module:api/TransportChatworkApi~apiTransportChatworkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportChatworkGet}
     */
    apiTransportChatworkIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportChatworkIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportChatworkGet;
      return this.apiClient.callApi(
        '/api/transport-chatwork/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportChatworkIdPatch operation.
     * @callback module:api/TransportChatworkApi~apiTransportChatworkIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportChatworkGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportChatwork resource.
     * Updates the TransportChatwork resource.
     * @param {String} id TransportChatwork identifier
     * @param {module:model/TransportChatworkPatch} transportChatworkPatch The updated TransportChatwork resource
     * @param {module:api/TransportChatworkApi~apiTransportChatworkIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportChatworkGet}
     */
    apiTransportChatworkIdPatch(id, transportChatworkPatch, callback) {
      let postBody = transportChatworkPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportChatworkIdPatch");
      }
      // verify the required parameter 'transportChatworkPatch' is set
      if (transportChatworkPatch === undefined || transportChatworkPatch === null) {
        throw new Error("Missing the required parameter 'transportChatworkPatch' when calling apiTransportChatworkIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportChatworkGet;
      return this.apiClient.callApi(
        '/api/transport-chatwork/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportChatworkIdPut operation.
     * @callback module:api/TransportChatworkApi~apiTransportChatworkIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportChatworkGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportChatwork resource.
     * Replaces the TransportChatwork resource.
     * @param {String} id TransportChatwork identifier
     * @param {module:model/TransportChatworkPut} transportChatworkPut The updated TransportChatwork resource
     * @param {module:api/TransportChatworkApi~apiTransportChatworkIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportChatworkGet}
     */
    apiTransportChatworkIdPut(id, transportChatworkPut, callback) {
      let postBody = transportChatworkPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportChatworkIdPut");
      }
      // verify the required parameter 'transportChatworkPut' is set
      if (transportChatworkPut === undefined || transportChatworkPut === null) {
        throw new Error("Missing the required parameter 'transportChatworkPut' when calling apiTransportChatworkIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportChatworkGet;
      return this.apiClient.callApi(
        '/api/transport-chatwork/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportChatworkPost operation.
     * @callback module:api/TransportChatworkApi~apiTransportChatworkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportChatworkGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportChatwork resource.
     * Creates a TransportChatwork resource.
     * @param {module:model/TransportChatworkPost} transportChatworkPost The new TransportChatwork resource
     * @param {module:api/TransportChatworkApi~apiTransportChatworkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportChatworkGet}
     */
    apiTransportChatworkPost(transportChatworkPost, callback) {
      let postBody = transportChatworkPost;
      // verify the required parameter 'transportChatworkPost' is set
      if (transportChatworkPost === undefined || transportChatworkPost === null) {
        throw new Error("Missing the required parameter 'transportChatworkPost' when calling apiTransportChatworkPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportChatworkGet;
      return this.apiClient.callApi(
        '/api/transport-chatwork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
