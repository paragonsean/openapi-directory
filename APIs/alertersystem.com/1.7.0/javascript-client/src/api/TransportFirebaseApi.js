/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportFirebaseGetCollection200Response from '../model/ApiTransportFirebaseGetCollection200Response';
import TransportFirebaseGet from '../model/TransportFirebaseGet';
import TransportFirebaseJsonldGet from '../model/TransportFirebaseJsonldGet';
import TransportFirebaseJsonldPost from '../model/TransportFirebaseJsonldPost';
import TransportFirebaseJsonldPut from '../model/TransportFirebaseJsonldPut';
import TransportFirebasePatch from '../model/TransportFirebasePatch';
import TransportFirebasePost from '../model/TransportFirebasePost';
import TransportFirebasePut from '../model/TransportFirebasePut';

/**
* TransportFirebase service.
* @module api/TransportFirebaseApi
* @version 1.7.0
*/
export default class TransportFirebaseApi {

    /**
    * Constructs a new TransportFirebaseApi. 
    * @alias module:api/TransportFirebaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportFirebaseGetCollection operation.
     * @callback module:api/TransportFirebaseApi~apiTransportFirebaseGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportFirebaseGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportFirebase resources.
     * Retrieves the collection of TransportFirebase resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportFirebaseApi~apiTransportFirebaseGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportFirebaseGet>}
     */
    apiTransportFirebaseGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportFirebaseGet];
      return this.apiClient.callApi(
        '/api/transport-firebase', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFirebaseIdDelete operation.
     * @callback module:api/TransportFirebaseApi~apiTransportFirebaseIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportFirebase resource.
     * Removes the TransportFirebase resource.
     * @param {String} id TransportFirebase identifier
     * @param {module:api/TransportFirebaseApi~apiTransportFirebaseIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportFirebaseIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFirebaseIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-firebase/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFirebaseIdGet operation.
     * @callback module:api/TransportFirebaseApi~apiTransportFirebaseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFirebaseGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportFirebase resource.
     * Retrieves a TransportFirebase resource.
     * @param {String} id TransportFirebase identifier
     * @param {module:api/TransportFirebaseApi~apiTransportFirebaseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFirebaseGet}
     */
    apiTransportFirebaseIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFirebaseIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFirebaseGet;
      return this.apiClient.callApi(
        '/api/transport-firebase/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFirebaseIdPatch operation.
     * @callback module:api/TransportFirebaseApi~apiTransportFirebaseIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFirebaseGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportFirebase resource.
     * Updates the TransportFirebase resource.
     * @param {String} id TransportFirebase identifier
     * @param {module:model/TransportFirebasePatch} transportFirebasePatch The updated TransportFirebase resource
     * @param {module:api/TransportFirebaseApi~apiTransportFirebaseIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFirebaseGet}
     */
    apiTransportFirebaseIdPatch(id, transportFirebasePatch, callback) {
      let postBody = transportFirebasePatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFirebaseIdPatch");
      }
      // verify the required parameter 'transportFirebasePatch' is set
      if (transportFirebasePatch === undefined || transportFirebasePatch === null) {
        throw new Error("Missing the required parameter 'transportFirebasePatch' when calling apiTransportFirebaseIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFirebaseGet;
      return this.apiClient.callApi(
        '/api/transport-firebase/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFirebaseIdPut operation.
     * @callback module:api/TransportFirebaseApi~apiTransportFirebaseIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFirebaseGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportFirebase resource.
     * Replaces the TransportFirebase resource.
     * @param {String} id TransportFirebase identifier
     * @param {module:model/TransportFirebasePut} transportFirebasePut The updated TransportFirebase resource
     * @param {module:api/TransportFirebaseApi~apiTransportFirebaseIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFirebaseGet}
     */
    apiTransportFirebaseIdPut(id, transportFirebasePut, callback) {
      let postBody = transportFirebasePut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportFirebaseIdPut");
      }
      // verify the required parameter 'transportFirebasePut' is set
      if (transportFirebasePut === undefined || transportFirebasePut === null) {
        throw new Error("Missing the required parameter 'transportFirebasePut' when calling apiTransportFirebaseIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFirebaseGet;
      return this.apiClient.callApi(
        '/api/transport-firebase/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportFirebasePost operation.
     * @callback module:api/TransportFirebaseApi~apiTransportFirebasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportFirebaseGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportFirebase resource.
     * Creates a TransportFirebase resource.
     * @param {module:model/TransportFirebasePost} transportFirebasePost The new TransportFirebase resource
     * @param {module:api/TransportFirebaseApi~apiTransportFirebasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportFirebaseGet}
     */
    apiTransportFirebasePost(transportFirebasePost, callback) {
      let postBody = transportFirebasePost;
      // verify the required parameter 'transportFirebasePost' is set
      if (transportFirebasePost === undefined || transportFirebasePost === null) {
        throw new Error("Missing the required parameter 'transportFirebasePost' when calling apiTransportFirebasePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportFirebaseGet;
      return this.apiClient.callApi(
        '/api/transport-firebase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
