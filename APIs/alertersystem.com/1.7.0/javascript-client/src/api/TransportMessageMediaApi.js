/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportMessageMediaGetCollection200Response from '../model/ApiTransportMessageMediaGetCollection200Response';
import TransportMessageMediaGet from '../model/TransportMessageMediaGet';
import TransportMessageMediaJsonldGet from '../model/TransportMessageMediaJsonldGet';
import TransportMessageMediaJsonldPost from '../model/TransportMessageMediaJsonldPost';
import TransportMessageMediaJsonldPut from '../model/TransportMessageMediaJsonldPut';
import TransportMessageMediaPatch from '../model/TransportMessageMediaPatch';
import TransportMessageMediaPost from '../model/TransportMessageMediaPost';
import TransportMessageMediaPut from '../model/TransportMessageMediaPut';

/**
* TransportMessageMedia service.
* @module api/TransportMessageMediaApi
* @version 1.7.0
*/
export default class TransportMessageMediaApi {

    /**
    * Constructs a new TransportMessageMediaApi. 
    * @alias module:api/TransportMessageMediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportMessageMediaGetCollection operation.
     * @callback module:api/TransportMessageMediaApi~apiTransportMessageMediaGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportMessageMediaGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportMessageMedia resources.
     * Retrieves the collection of TransportMessageMedia resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportMessageMediaApi~apiTransportMessageMediaGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportMessageMediaGet>}
     */
    apiTransportMessageMediaGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportMessageMediaGet];
      return this.apiClient.callApi(
        '/api/transport-message-media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageMediaIdDelete operation.
     * @callback module:api/TransportMessageMediaApi~apiTransportMessageMediaIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportMessageMedia resource.
     * Removes the TransportMessageMedia resource.
     * @param {String} id TransportMessageMedia identifier
     * @param {module:api/TransportMessageMediaApi~apiTransportMessageMediaIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportMessageMediaIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageMediaIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-message-media/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageMediaIdGet operation.
     * @callback module:api/TransportMessageMediaApi~apiTransportMessageMediaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageMediaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportMessageMedia resource.
     * Retrieves a TransportMessageMedia resource.
     * @param {String} id TransportMessageMedia identifier
     * @param {module:api/TransportMessageMediaApi~apiTransportMessageMediaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageMediaGet}
     */
    apiTransportMessageMediaIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageMediaIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageMediaGet;
      return this.apiClient.callApi(
        '/api/transport-message-media/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageMediaIdPatch operation.
     * @callback module:api/TransportMessageMediaApi~apiTransportMessageMediaIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageMediaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportMessageMedia resource.
     * Updates the TransportMessageMedia resource.
     * @param {String} id TransportMessageMedia identifier
     * @param {module:model/TransportMessageMediaPatch} transportMessageMediaPatch The updated TransportMessageMedia resource
     * @param {module:api/TransportMessageMediaApi~apiTransportMessageMediaIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageMediaGet}
     */
    apiTransportMessageMediaIdPatch(id, transportMessageMediaPatch, callback) {
      let postBody = transportMessageMediaPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageMediaIdPatch");
      }
      // verify the required parameter 'transportMessageMediaPatch' is set
      if (transportMessageMediaPatch === undefined || transportMessageMediaPatch === null) {
        throw new Error("Missing the required parameter 'transportMessageMediaPatch' when calling apiTransportMessageMediaIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageMediaGet;
      return this.apiClient.callApi(
        '/api/transport-message-media/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageMediaIdPut operation.
     * @callback module:api/TransportMessageMediaApi~apiTransportMessageMediaIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageMediaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportMessageMedia resource.
     * Replaces the TransportMessageMedia resource.
     * @param {String} id TransportMessageMedia identifier
     * @param {module:model/TransportMessageMediaPut} transportMessageMediaPut The updated TransportMessageMedia resource
     * @param {module:api/TransportMessageMediaApi~apiTransportMessageMediaIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageMediaGet}
     */
    apiTransportMessageMediaIdPut(id, transportMessageMediaPut, callback) {
      let postBody = transportMessageMediaPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageMediaIdPut");
      }
      // verify the required parameter 'transportMessageMediaPut' is set
      if (transportMessageMediaPut === undefined || transportMessageMediaPut === null) {
        throw new Error("Missing the required parameter 'transportMessageMediaPut' when calling apiTransportMessageMediaIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageMediaGet;
      return this.apiClient.callApi(
        '/api/transport-message-media/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageMediaPost operation.
     * @callback module:api/TransportMessageMediaApi~apiTransportMessageMediaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageMediaGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportMessageMedia resource.
     * Creates a TransportMessageMedia resource.
     * @param {module:model/TransportMessageMediaPost} transportMessageMediaPost The new TransportMessageMedia resource
     * @param {module:api/TransportMessageMediaApi~apiTransportMessageMediaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageMediaGet}
     */
    apiTransportMessageMediaPost(transportMessageMediaPost, callback) {
      let postBody = transportMessageMediaPost;
      // verify the required parameter 'transportMessageMediaPost' is set
      if (transportMessageMediaPost === undefined || transportMessageMediaPost === null) {
        throw new Error("Missing the required parameter 'transportMessageMediaPost' when calling apiTransportMessageMediaPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageMediaGet;
      return this.apiClient.callApi(
        '/api/transport-message-media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
