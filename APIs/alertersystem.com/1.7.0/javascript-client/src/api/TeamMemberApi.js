/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTeamMemberGetCollection200Response from '../model/ApiTeamMemberGetCollection200Response';
import TeamMemberGet from '../model/TeamMemberGet';
import TeamMemberJsonldGet from '../model/TeamMemberJsonldGet';
import TeamMemberJsonldPut from '../model/TeamMemberJsonldPut';
import TeamMemberPatch from '../model/TeamMemberPatch';
import TeamMemberPut from '../model/TeamMemberPut';

/**
* TeamMember service.
* @module api/TeamMemberApi
* @version 1.7.0
*/
export default class TeamMemberApi {

    /**
    * Constructs a new TeamMemberApi. 
    * @alias module:api/TeamMemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTeamMemberGetCollection operation.
     * @callback module:api/TeamMemberApi~apiTeamMemberGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamMemberGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TeamMember resources.
     * Retrieves the collection of TeamMember resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {String} [userAccount] 
     * @param {Array.<String>} [userAccount2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TeamMemberApi~apiTeamMemberGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamMemberGet>}
     */
    apiTeamMemberGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'userAccount': opts['userAccount'],
        'userAccount[]': this.apiClient.buildCollectionParam(opts['userAccount2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TeamMemberGet];
      return this.apiClient.callApi(
        '/api/team-member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTeamMemberIdDelete operation.
     * @callback module:api/TeamMemberApi~apiTeamMemberIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TeamMember resource.
     * Removes the TeamMember resource.
     * @param {String} id TeamMember identifier
     * @param {module:api/TeamMemberApi~apiTeamMemberIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTeamMemberIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTeamMemberIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/team-member/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTeamMemberIdGet operation.
     * @callback module:api/TeamMemberApi~apiTeamMemberIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TeamMember resource.
     * Retrieves a TeamMember resource.
     * @param {String} id TeamMember identifier
     * @param {module:api/TeamMemberApi~apiTeamMemberIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberGet}
     */
    apiTeamMemberIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTeamMemberIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TeamMemberGet;
      return this.apiClient.callApi(
        '/api/team-member/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTeamMemberIdPatch operation.
     * @callback module:api/TeamMemberApi~apiTeamMemberIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TeamMember resource.
     * Updates the TeamMember resource.
     * @param {String} id TeamMember identifier
     * @param {module:model/TeamMemberPatch} teamMemberPatch The updated TeamMember resource
     * @param {module:api/TeamMemberApi~apiTeamMemberIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberGet}
     */
    apiTeamMemberIdPatch(id, teamMemberPatch, callback) {
      let postBody = teamMemberPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTeamMemberIdPatch");
      }
      // verify the required parameter 'teamMemberPatch' is set
      if (teamMemberPatch === undefined || teamMemberPatch === null) {
        throw new Error("Missing the required parameter 'teamMemberPatch' when calling apiTeamMemberIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TeamMemberGet;
      return this.apiClient.callApi(
        '/api/team-member/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTeamMemberIdPut operation.
     * @callback module:api/TeamMemberApi~apiTeamMemberIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TeamMember resource.
     * Replaces the TeamMember resource.
     * @param {String} id TeamMember identifier
     * @param {module:model/TeamMemberPut} teamMemberPut The updated TeamMember resource
     * @param {module:api/TeamMemberApi~apiTeamMemberIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberGet}
     */
    apiTeamMemberIdPut(id, teamMemberPut, callback) {
      let postBody = teamMemberPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTeamMemberIdPut");
      }
      // verify the required parameter 'teamMemberPut' is set
      if (teamMemberPut === undefined || teamMemberPut === null) {
        throw new Error("Missing the required parameter 'teamMemberPut' when calling apiTeamMemberIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TeamMemberGet;
      return this.apiClient.callApi(
        '/api/team-member/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
