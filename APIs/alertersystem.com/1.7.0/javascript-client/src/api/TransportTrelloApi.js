/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportTrelloGetCollection200Response from '../model/ApiTransportTrelloGetCollection200Response';
import TransportTrelloGet from '../model/TransportTrelloGet';
import TransportTrelloJsonldGet from '../model/TransportTrelloJsonldGet';
import TransportTrelloJsonldPost from '../model/TransportTrelloJsonldPost';
import TransportTrelloJsonldPut from '../model/TransportTrelloJsonldPut';
import TransportTrelloPatch from '../model/TransportTrelloPatch';
import TransportTrelloPost from '../model/TransportTrelloPost';
import TransportTrelloPut from '../model/TransportTrelloPut';

/**
* TransportTrello service.
* @module api/TransportTrelloApi
* @version 1.7.0
*/
export default class TransportTrelloApi {

    /**
    * Constructs a new TransportTrelloApi. 
    * @alias module:api/TransportTrelloApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportTrelloGetCollection operation.
     * @callback module:api/TransportTrelloApi~apiTransportTrelloGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportTrelloGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportTrello resources.
     * Retrieves the collection of TransportTrello resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportTrelloApi~apiTransportTrelloGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportTrelloGet>}
     */
    apiTransportTrelloGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportTrelloGet];
      return this.apiClient.callApi(
        '/api/transport-trello', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportTrelloIdDelete operation.
     * @callback module:api/TransportTrelloApi~apiTransportTrelloIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportTrello resource.
     * Removes the TransportTrello resource.
     * @param {String} id TransportTrello identifier
     * @param {module:api/TransportTrelloApi~apiTransportTrelloIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportTrelloIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportTrelloIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-trello/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportTrelloIdGet operation.
     * @callback module:api/TransportTrelloApi~apiTransportTrelloIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportTrelloGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportTrello resource.
     * Retrieves a TransportTrello resource.
     * @param {String} id TransportTrello identifier
     * @param {module:api/TransportTrelloApi~apiTransportTrelloIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportTrelloGet}
     */
    apiTransportTrelloIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportTrelloIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportTrelloGet;
      return this.apiClient.callApi(
        '/api/transport-trello/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportTrelloIdPatch operation.
     * @callback module:api/TransportTrelloApi~apiTransportTrelloIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportTrelloGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportTrello resource.
     * Updates the TransportTrello resource.
     * @param {String} id TransportTrello identifier
     * @param {module:model/TransportTrelloPatch} transportTrelloPatch The updated TransportTrello resource
     * @param {module:api/TransportTrelloApi~apiTransportTrelloIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportTrelloGet}
     */
    apiTransportTrelloIdPatch(id, transportTrelloPatch, callback) {
      let postBody = transportTrelloPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportTrelloIdPatch");
      }
      // verify the required parameter 'transportTrelloPatch' is set
      if (transportTrelloPatch === undefined || transportTrelloPatch === null) {
        throw new Error("Missing the required parameter 'transportTrelloPatch' when calling apiTransportTrelloIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportTrelloGet;
      return this.apiClient.callApi(
        '/api/transport-trello/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportTrelloIdPut operation.
     * @callback module:api/TransportTrelloApi~apiTransportTrelloIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportTrelloGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportTrello resource.
     * Replaces the TransportTrello resource.
     * @param {String} id TransportTrello identifier
     * @param {module:model/TransportTrelloPut} transportTrelloPut The updated TransportTrello resource
     * @param {module:api/TransportTrelloApi~apiTransportTrelloIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportTrelloGet}
     */
    apiTransportTrelloIdPut(id, transportTrelloPut, callback) {
      let postBody = transportTrelloPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportTrelloIdPut");
      }
      // verify the required parameter 'transportTrelloPut' is set
      if (transportTrelloPut === undefined || transportTrelloPut === null) {
        throw new Error("Missing the required parameter 'transportTrelloPut' when calling apiTransportTrelloIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportTrelloGet;
      return this.apiClient.callApi(
        '/api/transport-trello/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportTrelloPost operation.
     * @callback module:api/TransportTrelloApi~apiTransportTrelloPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportTrelloGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportTrello resource.
     * Creates a TransportTrello resource.
     * @param {module:model/TransportTrelloPost} transportTrelloPost The new TransportTrello resource
     * @param {module:api/TransportTrelloApi~apiTransportTrelloPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportTrelloGet}
     */
    apiTransportTrelloPost(transportTrelloPost, callback) {
      let postBody = transportTrelloPost;
      // verify the required parameter 'transportTrelloPost' is set
      if (transportTrelloPost === undefined || transportTrelloPost === null) {
        throw new Error("Missing the required parameter 'transportTrelloPost' when calling apiTransportTrelloPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportTrelloGet;
      return this.apiClient.callApi(
        '/api/transport-trello', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
