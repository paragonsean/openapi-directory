/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportRocketChatGetCollection200Response from '../model/ApiTransportRocketChatGetCollection200Response';
import TransportRocketChatGet from '../model/TransportRocketChatGet';
import TransportRocketChatJsonldGet from '../model/TransportRocketChatJsonldGet';
import TransportRocketChatJsonldPost from '../model/TransportRocketChatJsonldPost';
import TransportRocketChatJsonldPut from '../model/TransportRocketChatJsonldPut';
import TransportRocketChatPatch from '../model/TransportRocketChatPatch';
import TransportRocketChatPost from '../model/TransportRocketChatPost';
import TransportRocketChatPut from '../model/TransportRocketChatPut';

/**
* TransportRocketChat service.
* @module api/TransportRocketChatApi
* @version 1.7.0
*/
export default class TransportRocketChatApi {

    /**
    * Constructs a new TransportRocketChatApi. 
    * @alias module:api/TransportRocketChatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportRocketChatGetCollection operation.
     * @callback module:api/TransportRocketChatApi~apiTransportRocketChatGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportRocketChatGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportRocketChat resources.
     * Retrieves the collection of TransportRocketChat resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportRocketChatApi~apiTransportRocketChatGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportRocketChatGet>}
     */
    apiTransportRocketChatGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportRocketChatGet];
      return this.apiClient.callApi(
        '/api/transport-rocket-chat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportRocketChatIdDelete operation.
     * @callback module:api/TransportRocketChatApi~apiTransportRocketChatIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportRocketChat resource.
     * Removes the TransportRocketChat resource.
     * @param {String} id TransportRocketChat identifier
     * @param {module:api/TransportRocketChatApi~apiTransportRocketChatIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportRocketChatIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportRocketChatIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-rocket-chat/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportRocketChatIdGet operation.
     * @callback module:api/TransportRocketChatApi~apiTransportRocketChatIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportRocketChatGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportRocketChat resource.
     * Retrieves a TransportRocketChat resource.
     * @param {String} id TransportRocketChat identifier
     * @param {module:api/TransportRocketChatApi~apiTransportRocketChatIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportRocketChatGet}
     */
    apiTransportRocketChatIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportRocketChatIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportRocketChatGet;
      return this.apiClient.callApi(
        '/api/transport-rocket-chat/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportRocketChatIdPatch operation.
     * @callback module:api/TransportRocketChatApi~apiTransportRocketChatIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportRocketChatGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportRocketChat resource.
     * Updates the TransportRocketChat resource.
     * @param {String} id TransportRocketChat identifier
     * @param {module:model/TransportRocketChatPatch} transportRocketChatPatch The updated TransportRocketChat resource
     * @param {module:api/TransportRocketChatApi~apiTransportRocketChatIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportRocketChatGet}
     */
    apiTransportRocketChatIdPatch(id, transportRocketChatPatch, callback) {
      let postBody = transportRocketChatPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportRocketChatIdPatch");
      }
      // verify the required parameter 'transportRocketChatPatch' is set
      if (transportRocketChatPatch === undefined || transportRocketChatPatch === null) {
        throw new Error("Missing the required parameter 'transportRocketChatPatch' when calling apiTransportRocketChatIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportRocketChatGet;
      return this.apiClient.callApi(
        '/api/transport-rocket-chat/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportRocketChatIdPut operation.
     * @callback module:api/TransportRocketChatApi~apiTransportRocketChatIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportRocketChatGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportRocketChat resource.
     * Replaces the TransportRocketChat resource.
     * @param {String} id TransportRocketChat identifier
     * @param {module:model/TransportRocketChatPut} transportRocketChatPut The updated TransportRocketChat resource
     * @param {module:api/TransportRocketChatApi~apiTransportRocketChatIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportRocketChatGet}
     */
    apiTransportRocketChatIdPut(id, transportRocketChatPut, callback) {
      let postBody = transportRocketChatPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportRocketChatIdPut");
      }
      // verify the required parameter 'transportRocketChatPut' is set
      if (transportRocketChatPut === undefined || transportRocketChatPut === null) {
        throw new Error("Missing the required parameter 'transportRocketChatPut' when calling apiTransportRocketChatIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportRocketChatGet;
      return this.apiClient.callApi(
        '/api/transport-rocket-chat/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportRocketChatPost operation.
     * @callback module:api/TransportRocketChatApi~apiTransportRocketChatPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportRocketChatGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportRocketChat resource.
     * Creates a TransportRocketChat resource.
     * @param {module:model/TransportRocketChatPost} transportRocketChatPost The new TransportRocketChat resource
     * @param {module:api/TransportRocketChatApi~apiTransportRocketChatPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportRocketChatGet}
     */
    apiTransportRocketChatPost(transportRocketChatPost, callback) {
      let postBody = transportRocketChatPost;
      // verify the required parameter 'transportRocketChatPost' is set
      if (transportRocketChatPost === undefined || transportRocketChatPost === null) {
        throw new Error("Missing the required parameter 'transportRocketChatPost' when calling apiTransportRocketChatPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportRocketChatGet;
      return this.apiClient.callApi(
        '/api/transport-rocket-chat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
