/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportDiscordGetCollection200Response from '../model/ApiTransportDiscordGetCollection200Response';
import TransportDiscordGet from '../model/TransportDiscordGet';
import TransportDiscordJsonldGet from '../model/TransportDiscordJsonldGet';
import TransportDiscordJsonldPost from '../model/TransportDiscordJsonldPost';
import TransportDiscordJsonldPut from '../model/TransportDiscordJsonldPut';
import TransportDiscordPatch from '../model/TransportDiscordPatch';
import TransportDiscordPost from '../model/TransportDiscordPost';
import TransportDiscordPut from '../model/TransportDiscordPut';

/**
* TransportDiscord service.
* @module api/TransportDiscordApi
* @version 1.7.0
*/
export default class TransportDiscordApi {

    /**
    * Constructs a new TransportDiscordApi. 
    * @alias module:api/TransportDiscordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportDiscordGetCollection operation.
     * @callback module:api/TransportDiscordApi~apiTransportDiscordGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportDiscordGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportDiscord resources.
     * Retrieves the collection of TransportDiscord resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportDiscordApi~apiTransportDiscordGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportDiscordGet>}
     */
    apiTransportDiscordGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportDiscordGet];
      return this.apiClient.callApi(
        '/api/transport-discord', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportDiscordIdDelete operation.
     * @callback module:api/TransportDiscordApi~apiTransportDiscordIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportDiscord resource.
     * Removes the TransportDiscord resource.
     * @param {String} id TransportDiscord identifier
     * @param {module:api/TransportDiscordApi~apiTransportDiscordIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportDiscordIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportDiscordIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-discord/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportDiscordIdGet operation.
     * @callback module:api/TransportDiscordApi~apiTransportDiscordIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportDiscordGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportDiscord resource.
     * Retrieves a TransportDiscord resource.
     * @param {String} id TransportDiscord identifier
     * @param {module:api/TransportDiscordApi~apiTransportDiscordIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportDiscordGet}
     */
    apiTransportDiscordIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportDiscordIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportDiscordGet;
      return this.apiClient.callApi(
        '/api/transport-discord/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportDiscordIdPatch operation.
     * @callback module:api/TransportDiscordApi~apiTransportDiscordIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportDiscordGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportDiscord resource.
     * Updates the TransportDiscord resource.
     * @param {String} id TransportDiscord identifier
     * @param {module:model/TransportDiscordPatch} transportDiscordPatch The updated TransportDiscord resource
     * @param {module:api/TransportDiscordApi~apiTransportDiscordIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportDiscordGet}
     */
    apiTransportDiscordIdPatch(id, transportDiscordPatch, callback) {
      let postBody = transportDiscordPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportDiscordIdPatch");
      }
      // verify the required parameter 'transportDiscordPatch' is set
      if (transportDiscordPatch === undefined || transportDiscordPatch === null) {
        throw new Error("Missing the required parameter 'transportDiscordPatch' when calling apiTransportDiscordIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportDiscordGet;
      return this.apiClient.callApi(
        '/api/transport-discord/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportDiscordIdPut operation.
     * @callback module:api/TransportDiscordApi~apiTransportDiscordIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportDiscordGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportDiscord resource.
     * Replaces the TransportDiscord resource.
     * @param {String} id TransportDiscord identifier
     * @param {module:model/TransportDiscordPut} transportDiscordPut The updated TransportDiscord resource
     * @param {module:api/TransportDiscordApi~apiTransportDiscordIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportDiscordGet}
     */
    apiTransportDiscordIdPut(id, transportDiscordPut, callback) {
      let postBody = transportDiscordPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportDiscordIdPut");
      }
      // verify the required parameter 'transportDiscordPut' is set
      if (transportDiscordPut === undefined || transportDiscordPut === null) {
        throw new Error("Missing the required parameter 'transportDiscordPut' when calling apiTransportDiscordIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportDiscordGet;
      return this.apiClient.callApi(
        '/api/transport-discord/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportDiscordPost operation.
     * @callback module:api/TransportDiscordApi~apiTransportDiscordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportDiscordGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportDiscord resource.
     * Creates a TransportDiscord resource.
     * @param {module:model/TransportDiscordPost} transportDiscordPost The new TransportDiscord resource
     * @param {module:api/TransportDiscordApi~apiTransportDiscordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportDiscordGet}
     */
    apiTransportDiscordPost(transportDiscordPost, callback) {
      let postBody = transportDiscordPost;
      // verify the required parameter 'transportDiscordPost' is set
      if (transportDiscordPost === undefined || transportDiscordPost === null) {
        throw new Error("Missing the required parameter 'transportDiscordPost' when calling apiTransportDiscordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportDiscordGet;
      return this.apiClient.callApi(
        '/api/transport-discord', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
