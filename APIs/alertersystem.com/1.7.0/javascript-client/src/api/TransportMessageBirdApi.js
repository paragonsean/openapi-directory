/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTransportMessageBirdGetCollection200Response from '../model/ApiTransportMessageBirdGetCollection200Response';
import TransportMessageBirdGet from '../model/TransportMessageBirdGet';
import TransportMessageBirdJsonldGet from '../model/TransportMessageBirdJsonldGet';
import TransportMessageBirdJsonldPost from '../model/TransportMessageBirdJsonldPost';
import TransportMessageBirdJsonldPut from '../model/TransportMessageBirdJsonldPut';
import TransportMessageBirdPatch from '../model/TransportMessageBirdPatch';
import TransportMessageBirdPost from '../model/TransportMessageBirdPost';
import TransportMessageBirdPut from '../model/TransportMessageBirdPut';

/**
* TransportMessageBird service.
* @module api/TransportMessageBirdApi
* @version 1.7.0
*/
export default class TransportMessageBirdApi {

    /**
    * Constructs a new TransportMessageBirdApi. 
    * @alias module:api/TransportMessageBirdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTransportMessageBirdGetCollection operation.
     * @callback module:api/TransportMessageBirdApi~apiTransportMessageBirdGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransportMessageBirdGet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TransportMessageBird resources.
     * Retrieves the collection of TransportMessageBird resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The collection page number
     * @param {String} [dataSegmentCode] 
     * @param {Array.<String>} [dataSegmentCode2] 
     * @param {String} [partition] 
     * @param {Array.<String>} [partition2] 
     * @param {Array.<String>} [properties] Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
     * @param {module:api/TransportMessageBirdApi~apiTransportMessageBirdGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransportMessageBirdGet>}
     */
    apiTransportMessageBirdGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'dataSegmentCode': opts['dataSegmentCode'],
        'dataSegmentCode[]': this.apiClient.buildCollectionParam(opts['dataSegmentCode2'], 'multi'),
        'partition': opts['partition'],
        'partition[]': this.apiClient.buildCollectionParam(opts['partition2'], 'multi'),
        'properties[]': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = [TransportMessageBirdGet];
      return this.apiClient.callApi(
        '/api/transport-message-bird', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageBirdIdDelete operation.
     * @callback module:api/TransportMessageBirdApi~apiTransportMessageBirdIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TransportMessageBird resource.
     * Removes the TransportMessageBird resource.
     * @param {String} id TransportMessageBird identifier
     * @param {module:api/TransportMessageBirdApi~apiTransportMessageBirdIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTransportMessageBirdIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageBirdIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/transport-message-bird/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageBirdIdGet operation.
     * @callback module:api/TransportMessageBirdApi~apiTransportMessageBirdIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageBirdGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TransportMessageBird resource.
     * Retrieves a TransportMessageBird resource.
     * @param {String} id TransportMessageBird identifier
     * @param {module:api/TransportMessageBirdApi~apiTransportMessageBirdIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageBirdGet}
     */
    apiTransportMessageBirdIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageBirdIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageBirdGet;
      return this.apiClient.callApi(
        '/api/transport-message-bird/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageBirdIdPatch operation.
     * @callback module:api/TransportMessageBirdApi~apiTransportMessageBirdIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageBirdGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the TransportMessageBird resource.
     * Updates the TransportMessageBird resource.
     * @param {String} id TransportMessageBird identifier
     * @param {module:model/TransportMessageBirdPatch} transportMessageBirdPatch The updated TransportMessageBird resource
     * @param {module:api/TransportMessageBirdApi~apiTransportMessageBirdIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageBirdGet}
     */
    apiTransportMessageBirdIdPatch(id, transportMessageBirdPatch, callback) {
      let postBody = transportMessageBirdPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageBirdIdPatch");
      }
      // verify the required parameter 'transportMessageBirdPatch' is set
      if (transportMessageBirdPatch === undefined || transportMessageBirdPatch === null) {
        throw new Error("Missing the required parameter 'transportMessageBirdPatch' when calling apiTransportMessageBirdIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageBirdGet;
      return this.apiClient.callApi(
        '/api/transport-message-bird/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageBirdIdPut operation.
     * @callback module:api/TransportMessageBirdApi~apiTransportMessageBirdIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageBirdGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TransportMessageBird resource.
     * Replaces the TransportMessageBird resource.
     * @param {String} id TransportMessageBird identifier
     * @param {module:model/TransportMessageBirdPut} transportMessageBirdPut The updated TransportMessageBird resource
     * @param {module:api/TransportMessageBirdApi~apiTransportMessageBirdIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageBirdGet}
     */
    apiTransportMessageBirdIdPut(id, transportMessageBirdPut, callback) {
      let postBody = transportMessageBirdPut;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTransportMessageBirdIdPut");
      }
      // verify the required parameter 'transportMessageBirdPut' is set
      if (transportMessageBirdPut === undefined || transportMessageBirdPut === null) {
        throw new Error("Missing the required parameter 'transportMessageBirdPut' when calling apiTransportMessageBirdIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageBirdGet;
      return this.apiClient.callApi(
        '/api/transport-message-bird/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTransportMessageBirdPost operation.
     * @callback module:api/TransportMessageBirdApi~apiTransportMessageBirdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransportMessageBirdGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TransportMessageBird resource.
     * Creates a TransportMessageBird resource.
     * @param {module:model/TransportMessageBirdPost} transportMessageBirdPost The new TransportMessageBird resource
     * @param {module:api/TransportMessageBirdApi~apiTransportMessageBirdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransportMessageBirdGet}
     */
    apiTransportMessageBirdPost(transportMessageBirdPost, callback) {
      let postBody = transportMessageBirdPost;
      // verify the required parameter 'transportMessageBirdPost' is set
      if (transportMessageBirdPost === undefined || transportMessageBirdPost === null) {
        throw new Error("Missing the required parameter 'transportMessageBirdPost' when calling apiTransportMessageBirdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      let accepts = ['application/json', 'application/ld+json', 'text/html'];
      let returnType = TransportMessageBirdGet;
      return this.apiClient.callApi(
        '/api/transport-message-bird', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
