/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AlerterSystemApi);
  }
}(this, function(expect, AlerterSystemApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AlerterSystemApi.TransportTurboSmsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransportTurboSmsApi', function() {
    describe('apiTransportTurboSmsGetCollection', function() {
      it('should call apiTransportTurboSmsGetCollection successfully', function(done) {
        //uncomment below and update the code to test apiTransportTurboSmsGetCollection
        //instance.apiTransportTurboSmsGetCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTransportTurboSmsIdDelete', function() {
      it('should call apiTransportTurboSmsIdDelete successfully', function(done) {
        //uncomment below and update the code to test apiTransportTurboSmsIdDelete
        //instance.apiTransportTurboSmsIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTransportTurboSmsIdGet', function() {
      it('should call apiTransportTurboSmsIdGet successfully', function(done) {
        //uncomment below and update the code to test apiTransportTurboSmsIdGet
        //instance.apiTransportTurboSmsIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTransportTurboSmsIdPatch', function() {
      it('should call apiTransportTurboSmsIdPatch successfully', function(done) {
        //uncomment below and update the code to test apiTransportTurboSmsIdPatch
        //instance.apiTransportTurboSmsIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTransportTurboSmsIdPut', function() {
      it('should call apiTransportTurboSmsIdPut successfully', function(done) {
        //uncomment below and update the code to test apiTransportTurboSmsIdPut
        //instance.apiTransportTurboSmsIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTransportTurboSmsPost', function() {
      it('should call apiTransportTurboSmsPost successfully', function(done) {
        //uncomment below and update the code to test apiTransportTurboSmsPost
        //instance.apiTransportTurboSmsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
