/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiMonitorGetCollection200Response;
import org.openapitools.client.model.MonitorGet;
import org.openapitools.client.model.MonitorJsonldGet;
import org.openapitools.client.model.MonitorJsonldPost;
import org.openapitools.client.model.MonitorJsonldPut;
import org.openapitools.client.model.MonitorPatch;
import org.openapitools.client.model.MonitorPost;
import org.openapitools.client.model.MonitorPut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitorApi
 */
@Disabled
public class MonitorApiTest {

    private final MonitorApi api = new MonitorApi();

    /**
     * Retrieves the collection of Monitor resources.
     *
     * Retrieves the collection of Monitor resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMonitorGetCollectionTest() throws ApiException {
        Integer page = null;
        String dataSegmentCode = null;
        List<String> dataSegmentCode2 = null;
        String partition = null;
        List<String> partition2 = null;
        List<String> properties = null;
        List<MonitorGet> response = api.apiMonitorGetCollection(page, dataSegmentCode, dataSegmentCode2, partition, partition2, properties);
        // TODO: test validations
    }

    /**
     * Removes the Monitor resource.
     *
     * Removes the Monitor resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMonitorIdDeleteTest() throws ApiException {
        String id = null;
        api.apiMonitorIdDelete(id);
        // TODO: test validations
    }

    /**
     * Retrieves a Monitor resource.
     *
     * Retrieves a Monitor resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMonitorIdGetTest() throws ApiException {
        String id = null;
        MonitorGet response = api.apiMonitorIdGet(id);
        // TODO: test validations
    }

    /**
     * Updates the Monitor resource.
     *
     * Updates the Monitor resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMonitorIdPatchTest() throws ApiException {
        String id = null;
        MonitorPatch monitorPatch = null;
        MonitorGet response = api.apiMonitorIdPatch(id, monitorPatch);
        // TODO: test validations
    }

    /**
     * Replaces the Monitor resource.
     *
     * Replaces the Monitor resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMonitorIdPutTest() throws ApiException {
        String id = null;
        MonitorPut monitorPut = null;
        MonitorGet response = api.apiMonitorIdPut(id, monitorPut);
        // TODO: test validations
    }

    /**
     * Creates a Monitor resource.
     *
     * Creates a Monitor resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiMonitorPostTest() throws ApiException {
        MonitorPost monitorPost = null;
        MonitorGet response = api.apiMonitorPost(monitorPost);
        // TODO: test validations
    }

}
