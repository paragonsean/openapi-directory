/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiTransportPagerTreeGetCollection200Response;
import org.openapitools.client.model.TransportPagerTreeGet;
import org.openapitools.client.model.TransportPagerTreeJsonldGet;
import org.openapitools.client.model.TransportPagerTreeJsonldPost;
import org.openapitools.client.model.TransportPagerTreeJsonldPut;
import org.openapitools.client.model.TransportPagerTreePatch;
import org.openapitools.client.model.TransportPagerTreePost;
import org.openapitools.client.model.TransportPagerTreePut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransportPagerTreeApi
 */
@Disabled
public class TransportPagerTreeApiTest {

    private final TransportPagerTreeApi api = new TransportPagerTreeApi();

    /**
     * Retrieves the collection of TransportPagerTree resources.
     *
     * Retrieves the collection of TransportPagerTree resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransportPagerTreeGetCollectionTest() throws ApiException {
        Integer page = null;
        String dataSegmentCode = null;
        List<String> dataSegmentCode2 = null;
        String partition = null;
        List<String> partition2 = null;
        List<String> properties = null;
        List<TransportPagerTreeGet> response = api.apiTransportPagerTreeGetCollection(page, dataSegmentCode, dataSegmentCode2, partition, partition2, properties);
        // TODO: test validations
    }

    /**
     * Removes the TransportPagerTree resource.
     *
     * Removes the TransportPagerTree resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransportPagerTreeIdDeleteTest() throws ApiException {
        String id = null;
        api.apiTransportPagerTreeIdDelete(id);
        // TODO: test validations
    }

    /**
     * Retrieves a TransportPagerTree resource.
     *
     * Retrieves a TransportPagerTree resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransportPagerTreeIdGetTest() throws ApiException {
        String id = null;
        TransportPagerTreeGet response = api.apiTransportPagerTreeIdGet(id);
        // TODO: test validations
    }

    /**
     * Updates the TransportPagerTree resource.
     *
     * Updates the TransportPagerTree resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransportPagerTreeIdPatchTest() throws ApiException {
        String id = null;
        TransportPagerTreePatch transportPagerTreePatch = null;
        TransportPagerTreeGet response = api.apiTransportPagerTreeIdPatch(id, transportPagerTreePatch);
        // TODO: test validations
    }

    /**
     * Replaces the TransportPagerTree resource.
     *
     * Replaces the TransportPagerTree resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransportPagerTreeIdPutTest() throws ApiException {
        String id = null;
        TransportPagerTreePut transportPagerTreePut = null;
        TransportPagerTreeGet response = api.apiTransportPagerTreeIdPut(id, transportPagerTreePut);
        // TODO: test validations
    }

    /**
     * Creates a TransportPagerTree resource.
     *
     * Creates a TransportPagerTree resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransportPagerTreePostTest() throws ApiException {
        TransportPagerTreePost transportPagerTreePost = null;
        TransportPagerTreeGet response = api.apiTransportPagerTreePost(transportPagerTreePost);
        // TODO: test validations
    }

}
