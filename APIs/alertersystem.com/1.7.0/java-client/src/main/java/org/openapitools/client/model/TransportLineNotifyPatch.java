/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransportLineNotifyPatch {
  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_LINE_NOTIFY_ACCESS_TOKEN = "lineNotifyAccessToken";
  @SerializedName(SERIALIZED_NAME_LINE_NOTIFY_ACCESS_TOKEN)
  private String lineNotifyAccessToken;

  public static final String SERIALIZED_NAME_LINE_NOTIFY_STICKER_ID = "lineNotifyStickerId";
  @SerializedName(SERIALIZED_NAME_LINE_NOTIFY_STICKER_ID)
  private String lineNotifyStickerId;

  public static final String SERIALIZED_NAME_LINE_NOTIFY_STICKER_PACKAGE_ID = "lineNotifyStickerPackageId";
  @SerializedName(SERIALIZED_NAME_LINE_NOTIFY_STICKER_PACKAGE_ID)
  private String lineNotifyStickerPackageId;

  public static final String SERIALIZED_NAME_TRANSPORT_NAME = "transportName";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_NAME)
  private String transportName;

  public TransportLineNotifyPatch() {
  }

  public TransportLineNotifyPatch dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  public TransportLineNotifyPatch lineNotifyAccessToken(String lineNotifyAccessToken) {
    this.lineNotifyAccessToken = lineNotifyAccessToken;
    return this;
  }

  /**
   * The access token for the LINE Notify service. Stored in encrypted format.
   * @return lineNotifyAccessToken
   */
  @javax.annotation.Nullable
  public String getLineNotifyAccessToken() {
    return lineNotifyAccessToken;
  }

  public void setLineNotifyAccessToken(String lineNotifyAccessToken) {
    this.lineNotifyAccessToken = lineNotifyAccessToken;
  }


  public TransportLineNotifyPatch lineNotifyStickerId(String lineNotifyStickerId) {
    this.lineNotifyStickerId = lineNotifyStickerId;
    return this;
  }

  /**
   * The sticker ID value for the LINE Notify service.
   * @return lineNotifyStickerId
   */
  @javax.annotation.Nullable
  public String getLineNotifyStickerId() {
    return lineNotifyStickerId;
  }

  public void setLineNotifyStickerId(String lineNotifyStickerId) {
    this.lineNotifyStickerId = lineNotifyStickerId;
  }


  public TransportLineNotifyPatch lineNotifyStickerPackageId(String lineNotifyStickerPackageId) {
    this.lineNotifyStickerPackageId = lineNotifyStickerPackageId;
    return this;
  }

  /**
   * The sticker package ID value for the LINE Notify service.
   * @return lineNotifyStickerPackageId
   */
  @javax.annotation.Nullable
  public String getLineNotifyStickerPackageId() {
    return lineNotifyStickerPackageId;
  }

  public void setLineNotifyStickerPackageId(String lineNotifyStickerPackageId) {
    this.lineNotifyStickerPackageId = lineNotifyStickerPackageId;
  }


  public TransportLineNotifyPatch transportName(String transportName) {
    this.transportName = transportName;
    return this;
  }

  /**
   * The name of the transport.
   * @return transportName
   */
  @javax.annotation.Nullable
  public String getTransportName() {
    return transportName;
  }

  public void setTransportName(String transportName) {
    this.transportName = transportName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportLineNotifyPatch transportLineNotifyPatch = (TransportLineNotifyPatch) o;
    return Objects.equals(this.dataSegmentCode, transportLineNotifyPatch.dataSegmentCode) &&
        Objects.equals(this.lineNotifyAccessToken, transportLineNotifyPatch.lineNotifyAccessToken) &&
        Objects.equals(this.lineNotifyStickerId, transportLineNotifyPatch.lineNotifyStickerId) &&
        Objects.equals(this.lineNotifyStickerPackageId, transportLineNotifyPatch.lineNotifyStickerPackageId) &&
        Objects.equals(this.transportName, transportLineNotifyPatch.transportName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSegmentCode, lineNotifyAccessToken, lineNotifyStickerId, lineNotifyStickerPackageId, transportName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportLineNotifyPatch {\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    lineNotifyAccessToken: ").append(toIndentedString(lineNotifyAccessToken)).append("\n");
    sb.append("    lineNotifyStickerId: ").append(toIndentedString(lineNotifyStickerId)).append("\n");
    sb.append("    lineNotifyStickerPackageId: ").append(toIndentedString(lineNotifyStickerPackageId)).append("\n");
    sb.append("    transportName: ").append(toIndentedString(transportName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSegmentCode");
    openapiFields.add("lineNotifyAccessToken");
    openapiFields.add("lineNotifyStickerId");
    openapiFields.add("lineNotifyStickerPackageId");
    openapiFields.add("transportName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lineNotifyAccessToken");
    openapiRequiredFields.add("transportName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransportLineNotifyPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransportLineNotifyPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransportLineNotifyPatch is not found in the empty JSON string", TransportLineNotifyPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransportLineNotifyPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransportLineNotifyPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransportLineNotifyPatch.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("lineNotifyAccessToken") != null && !jsonObj.get("lineNotifyAccessToken").isJsonNull()) && !jsonObj.get("lineNotifyAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineNotifyAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineNotifyAccessToken").toString()));
      }
      if ((jsonObj.get("lineNotifyStickerId") != null && !jsonObj.get("lineNotifyStickerId").isJsonNull()) && !jsonObj.get("lineNotifyStickerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineNotifyStickerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineNotifyStickerId").toString()));
      }
      if ((jsonObj.get("lineNotifyStickerPackageId") != null && !jsonObj.get("lineNotifyStickerPackageId").isJsonNull()) && !jsonObj.get("lineNotifyStickerPackageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineNotifyStickerPackageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineNotifyStickerPackageId").toString()));
      }
      if ((jsonObj.get("transportName") != null && !jsonObj.get("transportName").isJsonNull()) && !jsonObj.get("transportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransportLineNotifyPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransportLineNotifyPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransportLineNotifyPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransportLineNotifyPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<TransportLineNotifyPatch>() {
           @Override
           public void write(JsonWriter out, TransportLineNotifyPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransportLineNotifyPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransportLineNotifyPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransportLineNotifyPatch
   * @throws IOException if the JSON string is invalid with respect to TransportLineNotifyPatch
   */
  public static TransportLineNotifyPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransportLineNotifyPatch.class);
  }

  /**
   * Convert an instance of TransportLineNotifyPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

