/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AlertLogJsonldGetContext;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreditsConsumptionJsonldGet {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private AlertLogJsonldGetContext atContext;

  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private String atId;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private String atType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREDITS_CONSUMPTION_EVENT_CODE = "creditsConsumptionEventCode";
  @SerializedName(SERIALIZED_NAME_CREDITS_CONSUMPTION_EVENT_CODE)
  private String creditsConsumptionEventCode;

  public static final String SERIALIZED_NAME_CREDITS_CONSUMPTION_NOTES = "creditsConsumptionNotes";
  @SerializedName(SERIALIZED_NAME_CREDITS_CONSUMPTION_NOTES)
  private String creditsConsumptionNotes;

  public static final String SERIALIZED_NAME_CREDITS_EVENT_ID = "creditsEventId";
  @SerializedName(SERIALIZED_NAME_CREDITS_EVENT_ID)
  private UUID creditsEventId;

  public static final String SERIALIZED_NAME_CREDITS_EVENT_IRI = "creditsEventIri";
  @SerializedName(SERIALIZED_NAME_CREDITS_EVENT_IRI)
  private String creditsEventIri;

  public static final String SERIALIZED_NAME_CREDITS_USED = "creditsUsed";
  @SerializedName(SERIALIZED_NAME_CREDITS_USED)
  private String creditsUsed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public CreditsConsumptionJsonldGet() {
  }

  public CreditsConsumptionJsonldGet(
     String atId, 
     String atType, 
     OffsetDateTime createdAt, 
     String creditsConsumptionEventCode, 
     String creditsUsed, 
     UUID id
  ) {
    this();
    this.atId = atId;
    this.atType = atType;
    this.createdAt = createdAt;
    this.creditsConsumptionEventCode = creditsConsumptionEventCode;
    this.creditsUsed = creditsUsed;
    this.id = id;
  }

  public CreditsConsumptionJsonldGet atContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nullable
  public AlertLogJsonldGetContext getAtContext() {
    return atContext;
  }

  public void setAtContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
  }


  /**
   * Get atId
   * @return atId
   */
  @javax.annotation.Nullable
  public String getAtId() {
    return atId;
  }



  /**
   * Get atType
   * @return atType
   */
  @javax.annotation.Nullable
  public String getAtType() {
    return atType;
  }



  /**
   * When the resource instance was created. This date-time is in the UTC timezone.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * The type of event that consumed the credits.
   * @return creditsConsumptionEventCode
   */
  @javax.annotation.Nullable
  public String getCreditsConsumptionEventCode() {
    return creditsConsumptionEventCode;
  }



  public CreditsConsumptionJsonldGet creditsConsumptionNotes(String creditsConsumptionNotes) {
    this.creditsConsumptionNotes = creditsConsumptionNotes;
    return this;
  }

  /**
   * Notes that add additional information to the resource.
   * @return creditsConsumptionNotes
   */
  @javax.annotation.Nullable
  public String getCreditsConsumptionNotes() {
    return creditsConsumptionNotes;
  }

  public void setCreditsConsumptionNotes(String creditsConsumptionNotes) {
    this.creditsConsumptionNotes = creditsConsumptionNotes;
  }


  public CreditsConsumptionJsonldGet creditsEventId(UUID creditsEventId) {
    this.creditsEventId = creditsEventId;
    return this;
  }

  /**
   * The ID of the event (Ping resource or AlertLog resource) that consumed the credits.
   * @return creditsEventId
   */
  @javax.annotation.Nullable
  public UUID getCreditsEventId() {
    return creditsEventId;
  }

  public void setCreditsEventId(UUID creditsEventId) {
    this.creditsEventId = creditsEventId;
  }


  public CreditsConsumptionJsonldGet creditsEventIri(String creditsEventIri) {
    this.creditsEventIri = creditsEventIri;
    return this;
  }

  /**
   * The IRI of the event that is related to this resource.
   * @return creditsEventIri
   */
  @javax.annotation.Nullable
  public String getCreditsEventIri() {
    return creditsEventIri;
  }

  public void setCreditsEventIri(String creditsEventIri) {
    this.creditsEventIri = creditsEventIri;
  }


  /**
   * The number of credits that were consumed.
   * @return creditsUsed
   */
  @javax.annotation.Nullable
  public String getCreditsUsed() {
    return creditsUsed;
  }



  /**
   * The unique identifier of the resource instance.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditsConsumptionJsonldGet creditsConsumptionJsonldGet = (CreditsConsumptionJsonldGet) o;
    return Objects.equals(this.atContext, creditsConsumptionJsonldGet.atContext) &&
        Objects.equals(this.atId, creditsConsumptionJsonldGet.atId) &&
        Objects.equals(this.atType, creditsConsumptionJsonldGet.atType) &&
        Objects.equals(this.createdAt, creditsConsumptionJsonldGet.createdAt) &&
        Objects.equals(this.creditsConsumptionEventCode, creditsConsumptionJsonldGet.creditsConsumptionEventCode) &&
        Objects.equals(this.creditsConsumptionNotes, creditsConsumptionJsonldGet.creditsConsumptionNotes) &&
        Objects.equals(this.creditsEventId, creditsConsumptionJsonldGet.creditsEventId) &&
        Objects.equals(this.creditsEventIri, creditsConsumptionJsonldGet.creditsEventIri) &&
        Objects.equals(this.creditsUsed, creditsConsumptionJsonldGet.creditsUsed) &&
        Objects.equals(this.id, creditsConsumptionJsonldGet.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, atId, atType, createdAt, creditsConsumptionEventCode, creditsConsumptionNotes, creditsEventId, creditsEventIri, creditsUsed, id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditsConsumptionJsonldGet {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creditsConsumptionEventCode: ").append(toIndentedString(creditsConsumptionEventCode)).append("\n");
    sb.append("    creditsConsumptionNotes: ").append(toIndentedString(creditsConsumptionNotes)).append("\n");
    sb.append("    creditsEventId: ").append(toIndentedString(creditsEventId)).append("\n");
    sb.append("    creditsEventIri: ").append(toIndentedString(creditsEventIri)).append("\n");
    sb.append("    creditsUsed: ").append(toIndentedString(creditsUsed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("createdAt");
    openapiFields.add("creditsConsumptionEventCode");
    openapiFields.add("creditsConsumptionNotes");
    openapiFields.add("creditsEventId");
    openapiFields.add("creditsEventIri");
    openapiFields.add("creditsUsed");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreditsConsumptionJsonldGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditsConsumptionJsonldGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditsConsumptionJsonldGet is not found in the empty JSON string", CreditsConsumptionJsonldGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditsConsumptionJsonldGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditsConsumptionJsonldGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `@context`
      if (jsonObj.get("@context") != null && !jsonObj.get("@context").isJsonNull()) {
        AlertLogJsonldGetContext.validateJsonElement(jsonObj.get("@context"));
      }
      if ((jsonObj.get("@id") != null && !jsonObj.get("@id").isJsonNull()) && !jsonObj.get("@id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@id").toString()));
      }
      if ((jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) && !jsonObj.get("@type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@type").toString()));
      }
      if ((jsonObj.get("creditsConsumptionEventCode") != null && !jsonObj.get("creditsConsumptionEventCode").isJsonNull()) && !jsonObj.get("creditsConsumptionEventCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditsConsumptionEventCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditsConsumptionEventCode").toString()));
      }
      if ((jsonObj.get("creditsConsumptionNotes") != null && !jsonObj.get("creditsConsumptionNotes").isJsonNull()) && !jsonObj.get("creditsConsumptionNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditsConsumptionNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditsConsumptionNotes").toString()));
      }
      if ((jsonObj.get("creditsEventId") != null && !jsonObj.get("creditsEventId").isJsonNull()) && !jsonObj.get("creditsEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditsEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditsEventId").toString()));
      }
      if ((jsonObj.get("creditsEventIri") != null && !jsonObj.get("creditsEventIri").isJsonNull()) && !jsonObj.get("creditsEventIri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditsEventIri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditsEventIri").toString()));
      }
      if ((jsonObj.get("creditsUsed") != null && !jsonObj.get("creditsUsed").isJsonNull()) && !jsonObj.get("creditsUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditsUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditsUsed").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditsConsumptionJsonldGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditsConsumptionJsonldGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditsConsumptionJsonldGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditsConsumptionJsonldGet.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditsConsumptionJsonldGet>() {
           @Override
           public void write(JsonWriter out, CreditsConsumptionJsonldGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditsConsumptionJsonldGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreditsConsumptionJsonldGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreditsConsumptionJsonldGet
   * @throws IOException if the JSON string is invalid with respect to CreditsConsumptionJsonldGet
   */
  public static CreditsConsumptionJsonldGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditsConsumptionJsonldGet.class);
  }

  /**
   * Convert an instance of CreditsConsumptionJsonldGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

