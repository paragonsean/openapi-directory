/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiTransportSmsFactorGetCollection200Response;
import org.openapitools.client.model.TransportSmsFactorGet;
import org.openapitools.client.model.TransportSmsFactorJsonldGet;
import org.openapitools.client.model.TransportSmsFactorJsonldPost;
import org.openapitools.client.model.TransportSmsFactorJsonldPut;
import org.openapitools.client.model.TransportSmsFactorPatch;
import org.openapitools.client.model.TransportSmsFactorPost;
import org.openapitools.client.model.TransportSmsFactorPut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransportSmsFactorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransportSmsFactorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransportSmsFactorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiTransportSmsFactorGetCollection
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorGetCollectionCall(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String partition, List<String> partition2, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transport-sms-factor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (dataSegmentCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSegmentCode", dataSegmentCode));
        }

        if (dataSegmentCode2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dataSegmentCode[]", dataSegmentCode2));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (partition2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partition[]", partition2));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties[]", properties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransportSmsFactorGetCollectionValidateBeforeCall(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String partition, List<String> partition2, List<String> properties, final ApiCallback _callback) throws ApiException {
        return apiTransportSmsFactorGetCollectionCall(page, dataSegmentCode, dataSegmentCode2, partition, partition2, properties, _callback);

    }

    /**
     * Retrieves the collection of TransportSmsFactor resources.
     * Retrieves the collection of TransportSmsFactor resources.
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @return List&lt;TransportSmsFactorGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TransportSmsFactorGet> apiTransportSmsFactorGetCollection(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String partition, List<String> partition2, List<String> properties) throws ApiException {
        ApiResponse<List<TransportSmsFactorGet>> localVarResp = apiTransportSmsFactorGetCollectionWithHttpInfo(page, dataSegmentCode, dataSegmentCode2, partition, partition2, properties);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of TransportSmsFactor resources.
     * Retrieves the collection of TransportSmsFactor resources.
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @return ApiResponse&lt;List&lt;TransportSmsFactorGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransportSmsFactorGet>> apiTransportSmsFactorGetCollectionWithHttpInfo(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String partition, List<String> partition2, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = apiTransportSmsFactorGetCollectionValidateBeforeCall(page, dataSegmentCode, dataSegmentCode2, partition, partition2, properties, null);
        Type localVarReturnType = new TypeToken<List<TransportSmsFactorGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of TransportSmsFactor resources. (asynchronously)
     * Retrieves the collection of TransportSmsFactor resources.
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorGetCollectionAsync(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String partition, List<String> partition2, List<String> properties, final ApiCallback<List<TransportSmsFactorGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransportSmsFactorGetCollectionValidateBeforeCall(page, dataSegmentCode, dataSegmentCode2, partition, partition2, properties, _callback);
        Type localVarReturnType = new TypeToken<List<TransportSmsFactorGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransportSmsFactorIdDelete
     * @param id TransportSmsFactor identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TransportSmsFactor resource deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transport-sms-factor/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransportSmsFactorIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiTransportSmsFactorIdDelete(Async)");
        }

        return apiTransportSmsFactorIdDeleteCall(id, _callback);

    }

    /**
     * Removes the TransportSmsFactor resource.
     * Removes the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TransportSmsFactor resource deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransportSmsFactorIdDelete(String id) throws ApiException {
        apiTransportSmsFactorIdDeleteWithHttpInfo(id);
    }

    /**
     * Removes the TransportSmsFactor resource.
     * Removes the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TransportSmsFactor resource deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransportSmsFactorIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiTransportSmsFactorIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the TransportSmsFactor resource. (asynchronously)
     * Removes the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TransportSmsFactor resource deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransportSmsFactorIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransportSmsFactorIdGet
     * @param id TransportSmsFactor identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transport-sms-factor/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransportSmsFactorIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiTransportSmsFactorIdGet(Async)");
        }

        return apiTransportSmsFactorIdGetCall(id, _callback);

    }

    /**
     * Retrieves a TransportSmsFactor resource.
     * Retrieves a TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @return TransportSmsFactorGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TransportSmsFactorGet apiTransportSmsFactorIdGet(String id) throws ApiException {
        ApiResponse<TransportSmsFactorGet> localVarResp = apiTransportSmsFactorIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a TransportSmsFactor resource.
     * Retrieves a TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @return ApiResponse&lt;TransportSmsFactorGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransportSmsFactorGet> apiTransportSmsFactorIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiTransportSmsFactorIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a TransportSmsFactor resource. (asynchronously)
     * Retrieves a TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdGetAsync(String id, final ApiCallback<TransportSmsFactorGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransportSmsFactorIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransportSmsFactorIdPatch
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPatch The updated TransportSmsFactor resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdPatchCall(String id, TransportSmsFactorPatch transportSmsFactorPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transportSmsFactorPatch;

        // create path and map variables
        String localVarPath = "/api/transport-sms-factor/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransportSmsFactorIdPatchValidateBeforeCall(String id, TransportSmsFactorPatch transportSmsFactorPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiTransportSmsFactorIdPatch(Async)");
        }

        // verify the required parameter 'transportSmsFactorPatch' is set
        if (transportSmsFactorPatch == null) {
            throw new ApiException("Missing the required parameter 'transportSmsFactorPatch' when calling apiTransportSmsFactorIdPatch(Async)");
        }

        return apiTransportSmsFactorIdPatchCall(id, transportSmsFactorPatch, _callback);

    }

    /**
     * Updates the TransportSmsFactor resource.
     * Updates the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPatch The updated TransportSmsFactor resource (required)
     * @return TransportSmsFactorGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TransportSmsFactorGet apiTransportSmsFactorIdPatch(String id, TransportSmsFactorPatch transportSmsFactorPatch) throws ApiException {
        ApiResponse<TransportSmsFactorGet> localVarResp = apiTransportSmsFactorIdPatchWithHttpInfo(id, transportSmsFactorPatch);
        return localVarResp.getData();
    }

    /**
     * Updates the TransportSmsFactor resource.
     * Updates the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPatch The updated TransportSmsFactor resource (required)
     * @return ApiResponse&lt;TransportSmsFactorGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransportSmsFactorGet> apiTransportSmsFactorIdPatchWithHttpInfo(String id, TransportSmsFactorPatch transportSmsFactorPatch) throws ApiException {
        okhttp3.Call localVarCall = apiTransportSmsFactorIdPatchValidateBeforeCall(id, transportSmsFactorPatch, null);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the TransportSmsFactor resource. (asynchronously)
     * Updates the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPatch The updated TransportSmsFactor resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdPatchAsync(String id, TransportSmsFactorPatch transportSmsFactorPatch, final ApiCallback<TransportSmsFactorGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransportSmsFactorIdPatchValidateBeforeCall(id, transportSmsFactorPatch, _callback);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransportSmsFactorIdPut
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPut The updated TransportSmsFactor resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdPutCall(String id, TransportSmsFactorPut transportSmsFactorPut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transportSmsFactorPut;

        // create path and map variables
        String localVarPath = "/api/transport-sms-factor/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransportSmsFactorIdPutValidateBeforeCall(String id, TransportSmsFactorPut transportSmsFactorPut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiTransportSmsFactorIdPut(Async)");
        }

        // verify the required parameter 'transportSmsFactorPut' is set
        if (transportSmsFactorPut == null) {
            throw new ApiException("Missing the required parameter 'transportSmsFactorPut' when calling apiTransportSmsFactorIdPut(Async)");
        }

        return apiTransportSmsFactorIdPutCall(id, transportSmsFactorPut, _callback);

    }

    /**
     * Replaces the TransportSmsFactor resource.
     * Replaces the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPut The updated TransportSmsFactor resource (required)
     * @return TransportSmsFactorGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TransportSmsFactorGet apiTransportSmsFactorIdPut(String id, TransportSmsFactorPut transportSmsFactorPut) throws ApiException {
        ApiResponse<TransportSmsFactorGet> localVarResp = apiTransportSmsFactorIdPutWithHttpInfo(id, transportSmsFactorPut);
        return localVarResp.getData();
    }

    /**
     * Replaces the TransportSmsFactor resource.
     * Replaces the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPut The updated TransportSmsFactor resource (required)
     * @return ApiResponse&lt;TransportSmsFactorGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransportSmsFactorGet> apiTransportSmsFactorIdPutWithHttpInfo(String id, TransportSmsFactorPut transportSmsFactorPut) throws ApiException {
        okhttp3.Call localVarCall = apiTransportSmsFactorIdPutValidateBeforeCall(id, transportSmsFactorPut, null);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the TransportSmsFactor resource. (asynchronously)
     * Replaces the TransportSmsFactor resource.
     * @param id TransportSmsFactor identifier (required)
     * @param transportSmsFactorPut The updated TransportSmsFactor resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TransportSmsFactor resource updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorIdPutAsync(String id, TransportSmsFactorPut transportSmsFactorPut, final ApiCallback<TransportSmsFactorGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransportSmsFactorIdPutValidateBeforeCall(id, transportSmsFactorPut, _callback);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransportSmsFactorPost
     * @param transportSmsFactorPost The new TransportSmsFactor resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TransportSmsFactor resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorPostCall(TransportSmsFactorPost transportSmsFactorPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transportSmsFactorPost;

        // create path and map variables
        String localVarPath = "/api/transport-sms-factor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransportSmsFactorPostValidateBeforeCall(TransportSmsFactorPost transportSmsFactorPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transportSmsFactorPost' is set
        if (transportSmsFactorPost == null) {
            throw new ApiException("Missing the required parameter 'transportSmsFactorPost' when calling apiTransportSmsFactorPost(Async)");
        }

        return apiTransportSmsFactorPostCall(transportSmsFactorPost, _callback);

    }

    /**
     * Creates a TransportSmsFactor resource.
     * Creates a TransportSmsFactor resource.
     * @param transportSmsFactorPost The new TransportSmsFactor resource (required)
     * @return TransportSmsFactorGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TransportSmsFactor resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TransportSmsFactorGet apiTransportSmsFactorPost(TransportSmsFactorPost transportSmsFactorPost) throws ApiException {
        ApiResponse<TransportSmsFactorGet> localVarResp = apiTransportSmsFactorPostWithHttpInfo(transportSmsFactorPost);
        return localVarResp.getData();
    }

    /**
     * Creates a TransportSmsFactor resource.
     * Creates a TransportSmsFactor resource.
     * @param transportSmsFactorPost The new TransportSmsFactor resource (required)
     * @return ApiResponse&lt;TransportSmsFactorGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TransportSmsFactor resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransportSmsFactorGet> apiTransportSmsFactorPostWithHttpInfo(TransportSmsFactorPost transportSmsFactorPost) throws ApiException {
        okhttp3.Call localVarCall = apiTransportSmsFactorPostValidateBeforeCall(transportSmsFactorPost, null);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a TransportSmsFactor resource. (asynchronously)
     * Creates a TransportSmsFactor resource.
     * @param transportSmsFactorPost The new TransportSmsFactor resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TransportSmsFactor resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransportSmsFactorPostAsync(TransportSmsFactorPost transportSmsFactorPost, final ApiCallback<TransportSmsFactorGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransportSmsFactorPostValidateBeforeCall(transportSmsFactorPost, _callback);
        Type localVarReturnType = new TypeToken<TransportSmsFactorGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
