/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransportEmailJsonldPut {
  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_EMAIL_FROM_ADDRESS = "emailFromAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_FROM_ADDRESS)
  private String emailFromAddress;

  public static final String SERIALIZED_NAME_EMAIL_FROM_NAME = "emailFromName";
  @SerializedName(SERIALIZED_NAME_EMAIL_FROM_NAME)
  private String emailFromName;

  public static final String SERIALIZED_NAME_EMAIL_PASSWORD = "emailPassword";
  @SerializedName(SERIALIZED_NAME_EMAIL_PASSWORD)
  private String emailPassword;

  public static final String SERIALIZED_NAME_EMAIL_PORT = "emailPort";
  @SerializedName(SERIALIZED_NAME_EMAIL_PORT)
  private Integer emailPort;

  public static final String SERIALIZED_NAME_EMAIL_SERVER = "emailServer";
  @SerializedName(SERIALIZED_NAME_EMAIL_SERVER)
  private String emailServer;

  public static final String SERIALIZED_NAME_EMAIL_USERNAME = "emailUsername";
  @SerializedName(SERIALIZED_NAME_EMAIL_USERNAME)
  private String emailUsername;

  public static final String SERIALIZED_NAME_TRANSPORT_NAME = "transportName";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_NAME)
  private String transportName;

  public TransportEmailJsonldPut() {
  }

  public TransportEmailJsonldPut dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  public TransportEmailJsonldPut emailFromAddress(String emailFromAddress) {
    this.emailFromAddress = emailFromAddress;
    return this;
  }

  /**
   * The sender email address for the SMTP Email service.
   * @return emailFromAddress
   */
  @javax.annotation.Nullable
  public String getEmailFromAddress() {
    return emailFromAddress;
  }

  public void setEmailFromAddress(String emailFromAddress) {
    this.emailFromAddress = emailFromAddress;
  }


  public TransportEmailJsonldPut emailFromName(String emailFromName) {
    this.emailFromName = emailFromName;
    return this;
  }

  /**
   * The sender name for the SMTP Email service.
   * @return emailFromName
   */
  @javax.annotation.Nullable
  public String getEmailFromName() {
    return emailFromName;
  }

  public void setEmailFromName(String emailFromName) {
    this.emailFromName = emailFromName;
  }


  public TransportEmailJsonldPut emailPassword(String emailPassword) {
    this.emailPassword = emailPassword;
    return this;
  }

  /**
   * The password for the SMTP Email service. Stored in encrypted format.
   * @return emailPassword
   */
  @javax.annotation.Nullable
  public String getEmailPassword() {
    return emailPassword;
  }

  public void setEmailPassword(String emailPassword) {
    this.emailPassword = emailPassword;
  }


  public TransportEmailJsonldPut emailPort(Integer emailPort) {
    this.emailPort = emailPort;
    return this;
  }

  /**
   * The port for the SMTP Email service.
   * minimum: 0
   * @return emailPort
   */
  @javax.annotation.Nullable
  public Integer getEmailPort() {
    return emailPort;
  }

  public void setEmailPort(Integer emailPort) {
    this.emailPort = emailPort;
  }


  public TransportEmailJsonldPut emailServer(String emailServer) {
    this.emailServer = emailServer;
    return this;
  }

  /**
   * The server for the SMTP Email service.
   * @return emailServer
   */
  @javax.annotation.Nullable
  public String getEmailServer() {
    return emailServer;
  }

  public void setEmailServer(String emailServer) {
    this.emailServer = emailServer;
  }


  public TransportEmailJsonldPut emailUsername(String emailUsername) {
    this.emailUsername = emailUsername;
    return this;
  }

  /**
   * The username for the SMTP Email service.
   * @return emailUsername
   */
  @javax.annotation.Nullable
  public String getEmailUsername() {
    return emailUsername;
  }

  public void setEmailUsername(String emailUsername) {
    this.emailUsername = emailUsername;
  }


  public TransportEmailJsonldPut transportName(String transportName) {
    this.transportName = transportName;
    return this;
  }

  /**
   * The name of the transport.
   * @return transportName
   */
  @javax.annotation.Nullable
  public String getTransportName() {
    return transportName;
  }

  public void setTransportName(String transportName) {
    this.transportName = transportName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportEmailJsonldPut transportEmailJsonldPut = (TransportEmailJsonldPut) o;
    return Objects.equals(this.dataSegmentCode, transportEmailJsonldPut.dataSegmentCode) &&
        Objects.equals(this.emailFromAddress, transportEmailJsonldPut.emailFromAddress) &&
        Objects.equals(this.emailFromName, transportEmailJsonldPut.emailFromName) &&
        Objects.equals(this.emailPassword, transportEmailJsonldPut.emailPassword) &&
        Objects.equals(this.emailPort, transportEmailJsonldPut.emailPort) &&
        Objects.equals(this.emailServer, transportEmailJsonldPut.emailServer) &&
        Objects.equals(this.emailUsername, transportEmailJsonldPut.emailUsername) &&
        Objects.equals(this.transportName, transportEmailJsonldPut.transportName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSegmentCode, emailFromAddress, emailFromName, emailPassword, emailPort, emailServer, emailUsername, transportName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportEmailJsonldPut {\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    emailFromAddress: ").append(toIndentedString(emailFromAddress)).append("\n");
    sb.append("    emailFromName: ").append(toIndentedString(emailFromName)).append("\n");
    sb.append("    emailPassword: ").append(toIndentedString(emailPassword)).append("\n");
    sb.append("    emailPort: ").append(toIndentedString(emailPort)).append("\n");
    sb.append("    emailServer: ").append(toIndentedString(emailServer)).append("\n");
    sb.append("    emailUsername: ").append(toIndentedString(emailUsername)).append("\n");
    sb.append("    transportName: ").append(toIndentedString(transportName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSegmentCode");
    openapiFields.add("emailFromAddress");
    openapiFields.add("emailFromName");
    openapiFields.add("emailPassword");
    openapiFields.add("emailPort");
    openapiFields.add("emailServer");
    openapiFields.add("emailUsername");
    openapiFields.add("transportName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emailFromAddress");
    openapiRequiredFields.add("emailFromName");
    openapiRequiredFields.add("emailPassword");
    openapiRequiredFields.add("emailPort");
    openapiRequiredFields.add("emailServer");
    openapiRequiredFields.add("emailUsername");
    openapiRequiredFields.add("transportName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransportEmailJsonldPut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransportEmailJsonldPut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransportEmailJsonldPut is not found in the empty JSON string", TransportEmailJsonldPut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransportEmailJsonldPut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransportEmailJsonldPut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransportEmailJsonldPut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("emailFromAddress") != null && !jsonObj.get("emailFromAddress").isJsonNull()) && !jsonObj.get("emailFromAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailFromAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailFromAddress").toString()));
      }
      if ((jsonObj.get("emailFromName") != null && !jsonObj.get("emailFromName").isJsonNull()) && !jsonObj.get("emailFromName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailFromName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailFromName").toString()));
      }
      if ((jsonObj.get("emailPassword") != null && !jsonObj.get("emailPassword").isJsonNull()) && !jsonObj.get("emailPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailPassword").toString()));
      }
      if ((jsonObj.get("emailServer") != null && !jsonObj.get("emailServer").isJsonNull()) && !jsonObj.get("emailServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailServer").toString()));
      }
      if ((jsonObj.get("emailUsername") != null && !jsonObj.get("emailUsername").isJsonNull()) && !jsonObj.get("emailUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailUsername").toString()));
      }
      if ((jsonObj.get("transportName") != null && !jsonObj.get("transportName").isJsonNull()) && !jsonObj.get("transportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransportEmailJsonldPut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransportEmailJsonldPut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransportEmailJsonldPut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransportEmailJsonldPut.class));

       return (TypeAdapter<T>) new TypeAdapter<TransportEmailJsonldPut>() {
           @Override
           public void write(JsonWriter out, TransportEmailJsonldPut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransportEmailJsonldPut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransportEmailJsonldPut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransportEmailJsonldPut
   * @throws IOException if the JSON string is invalid with respect to TransportEmailJsonldPut
   */
  public static TransportEmailJsonldPut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransportEmailJsonldPut.class);
  }

  /**
   * Convert an instance of TransportEmailJsonldPut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

