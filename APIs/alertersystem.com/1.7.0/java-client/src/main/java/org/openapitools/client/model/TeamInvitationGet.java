/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamInvitationGet {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INVITEE_EMAIL = "inviteeEmail";
  @SerializedName(SERIALIZED_NAME_INVITEE_EMAIL)
  private String inviteeEmail;

  public static final String SERIALIZED_NAME_INVITEE_FIRST_NAME = "inviteeFirstName";
  @SerializedName(SERIALIZED_NAME_INVITEE_FIRST_NAME)
  private String inviteeFirstName;

  public static final String SERIALIZED_NAME_INVITEE_LAST_NAME = "inviteeLastName";
  @SerializedName(SERIALIZED_NAME_INVITEE_LAST_NAME)
  private String inviteeLastName;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "resourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  private String resourceOwner;

  public static final String SERIALIZED_NAME_STATUS_AT = "statusAt";
  @SerializedName(SERIALIZED_NAME_STATUS_AT)
  private OffsetDateTime statusAt;

  public static final String SERIALIZED_NAME_TEAM_INVITATION_STATUS = "teamInvitationStatus";
  @SerializedName(SERIALIZED_NAME_TEAM_INVITATION_STATUS)
  private String teamInvitationStatus;

  public static final String SERIALIZED_NAME_TEAM_MEMBER_ROLE_CODE = "teamMemberRoleCode";
  @SerializedName(SERIALIZED_NAME_TEAM_MEMBER_ROLE_CODE)
  private String teamMemberRoleCode;

  public TeamInvitationGet() {
  }

  public TeamInvitationGet(
     OffsetDateTime createdAt, 
     UUID id, 
     String teamInvitationStatus
  ) {
    this();
    this.createdAt = createdAt;
    this.id = id;
    this.teamInvitationStatus = teamInvitationStatus;
  }

  /**
   * When the resource instance was created. This date-time is in the UTC timezone.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public TeamInvitationGet dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  /**
   * The unique identifier of the resource instance.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public TeamInvitationGet inviteeEmail(String inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
    return this;
  }

  /**
   * The email address of the person that is being invited.
   * @return inviteeEmail
   */
  @javax.annotation.Nullable
  public String getInviteeEmail() {
    return inviteeEmail;
  }

  public void setInviteeEmail(String inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
  }


  public TeamInvitationGet inviteeFirstName(String inviteeFirstName) {
    this.inviteeFirstName = inviteeFirstName;
    return this;
  }

  /**
   * The first name of the person that is being invited.
   * @return inviteeFirstName
   */
  @javax.annotation.Nullable
  public String getInviteeFirstName() {
    return inviteeFirstName;
  }

  public void setInviteeFirstName(String inviteeFirstName) {
    this.inviteeFirstName = inviteeFirstName;
  }


  public TeamInvitationGet inviteeLastName(String inviteeLastName) {
    this.inviteeLastName = inviteeLastName;
    return this;
  }

  /**
   * The last name of the person that is being invited.
   * @return inviteeLastName
   */
  @javax.annotation.Nullable
  public String getInviteeLastName() {
    return inviteeLastName;
  }

  public void setInviteeLastName(String inviteeLastName) {
    this.inviteeLastName = inviteeLastName;
  }


  public TeamInvitationGet partition(String partition) {
    this.partition = partition;
    return this;
  }

  /**
   * The partition that contains this resource instance. The resource cannot be moved to another partition.
   * @return partition
   */
  @javax.annotation.Nonnull
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }


  public TeamInvitationGet resourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * The name of the person who owns this resource.
   * @return resourceOwner
   */
  @javax.annotation.Nullable
  public String getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
  }


  public TeamInvitationGet statusAt(OffsetDateTime statusAt) {
    this.statusAt = statusAt;
    return this;
  }

  /**
   * When the current status too effect. This date-time is in the UTC timezone. 
   * @return statusAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusAt() {
    return statusAt;
  }

  public void setStatusAt(OffsetDateTime statusAt) {
    this.statusAt = statusAt;
  }


  /**
   * The current status of the invitation.
   * @return teamInvitationStatus
   */
  @javax.annotation.Nullable
  public String getTeamInvitationStatus() {
    return teamInvitationStatus;
  }



  public TeamInvitationGet teamMemberRoleCode(String teamMemberRoleCode) {
    this.teamMemberRoleCode = teamMemberRoleCode;
    return this;
  }

  /**
   * The role of the team member on the team.
   * @return teamMemberRoleCode
   */
  @javax.annotation.Nullable
  public String getTeamMemberRoleCode() {
    return teamMemberRoleCode;
  }

  public void setTeamMemberRoleCode(String teamMemberRoleCode) {
    this.teamMemberRoleCode = teamMemberRoleCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamInvitationGet teamInvitationGet = (TeamInvitationGet) o;
    return Objects.equals(this.createdAt, teamInvitationGet.createdAt) &&
        Objects.equals(this.dataSegmentCode, teamInvitationGet.dataSegmentCode) &&
        Objects.equals(this.id, teamInvitationGet.id) &&
        Objects.equals(this.inviteeEmail, teamInvitationGet.inviteeEmail) &&
        Objects.equals(this.inviteeFirstName, teamInvitationGet.inviteeFirstName) &&
        Objects.equals(this.inviteeLastName, teamInvitationGet.inviteeLastName) &&
        Objects.equals(this.partition, teamInvitationGet.partition) &&
        Objects.equals(this.resourceOwner, teamInvitationGet.resourceOwner) &&
        Objects.equals(this.statusAt, teamInvitationGet.statusAt) &&
        Objects.equals(this.teamInvitationStatus, teamInvitationGet.teamInvitationStatus) &&
        Objects.equals(this.teamMemberRoleCode, teamInvitationGet.teamMemberRoleCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, dataSegmentCode, id, inviteeEmail, inviteeFirstName, inviteeLastName, partition, resourceOwner, statusAt, teamInvitationStatus, teamMemberRoleCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamInvitationGet {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteeEmail: ").append(toIndentedString(inviteeEmail)).append("\n");
    sb.append("    inviteeFirstName: ").append(toIndentedString(inviteeFirstName)).append("\n");
    sb.append("    inviteeLastName: ").append(toIndentedString(inviteeLastName)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("    statusAt: ").append(toIndentedString(statusAt)).append("\n");
    sb.append("    teamInvitationStatus: ").append(toIndentedString(teamInvitationStatus)).append("\n");
    sb.append("    teamMemberRoleCode: ").append(toIndentedString(teamMemberRoleCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("dataSegmentCode");
    openapiFields.add("id");
    openapiFields.add("inviteeEmail");
    openapiFields.add("inviteeFirstName");
    openapiFields.add("inviteeLastName");
    openapiFields.add("partition");
    openapiFields.add("resourceOwner");
    openapiFields.add("statusAt");
    openapiFields.add("teamInvitationStatus");
    openapiFields.add("teamMemberRoleCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inviteeEmail");
    openapiRequiredFields.add("inviteeFirstName");
    openapiRequiredFields.add("inviteeLastName");
    openapiRequiredFields.add("partition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamInvitationGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamInvitationGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamInvitationGet is not found in the empty JSON string", TeamInvitationGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamInvitationGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamInvitationGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamInvitationGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("inviteeEmail") != null && !jsonObj.get("inviteeEmail").isJsonNull()) && !jsonObj.get("inviteeEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inviteeEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inviteeEmail").toString()));
      }
      if ((jsonObj.get("inviteeFirstName") != null && !jsonObj.get("inviteeFirstName").isJsonNull()) && !jsonObj.get("inviteeFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inviteeFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inviteeFirstName").toString()));
      }
      if ((jsonObj.get("inviteeLastName") != null && !jsonObj.get("inviteeLastName").isJsonNull()) && !jsonObj.get("inviteeLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inviteeLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inviteeLastName").toString()));
      }
      if (!jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      if ((jsonObj.get("resourceOwner") != null && !jsonObj.get("resourceOwner").isJsonNull()) && !jsonObj.get("resourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwner").toString()));
      }
      if ((jsonObj.get("teamInvitationStatus") != null && !jsonObj.get("teamInvitationStatus").isJsonNull()) && !jsonObj.get("teamInvitationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamInvitationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamInvitationStatus").toString()));
      }
      if ((jsonObj.get("teamMemberRoleCode") != null && !jsonObj.get("teamMemberRoleCode").isJsonNull()) && !jsonObj.get("teamMemberRoleCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamMemberRoleCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamMemberRoleCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamInvitationGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamInvitationGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamInvitationGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamInvitationGet.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamInvitationGet>() {
           @Override
           public void write(JsonWriter out, TeamInvitationGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamInvitationGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamInvitationGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamInvitationGet
   * @throws IOException if the JSON string is invalid with respect to TeamInvitationGet
   */
  public static TeamInvitationGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamInvitationGet.class);
  }

  /**
   * Convert an instance of TeamInvitationGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

