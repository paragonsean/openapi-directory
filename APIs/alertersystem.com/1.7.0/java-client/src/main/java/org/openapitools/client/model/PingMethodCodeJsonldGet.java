/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertLogJsonldGetContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The PingMethodCode resource is a set of codes that describes the different methods of sending pings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PingMethodCodeJsonldGet {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private AlertLogJsonldGetContext atContext;

  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private String atId;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private String atType;

  public static final String SERIALIZED_NAME_CODE_NAME = "codeName";
  @SerializedName(SERIALIZED_NAME_CODE_NAME)
  private String codeName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public PingMethodCodeJsonldGet() {
  }

  public PingMethodCodeJsonldGet(
     String atId, 
     String atType, 
     String codeName, 
     String id
  ) {
    this();
    this.atId = atId;
    this.atType = atType;
    this.codeName = codeName;
    this.id = id;
  }

  public PingMethodCodeJsonldGet atContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nullable
  public AlertLogJsonldGetContext getAtContext() {
    return atContext;
  }

  public void setAtContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
  }


  /**
   * Get atId
   * @return atId
   */
  @javax.annotation.Nullable
  public String getAtId() {
    return atId;
  }



  /**
   * Get atType
   * @return atType
   */
  @javax.annotation.Nullable
  public String getAtType() {
    return atType;
  }



  /**
   * Get codeName
   * @return codeName
   */
  @javax.annotation.Nullable
  public String getCodeName() {
    return codeName;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PingMethodCodeJsonldGet pingMethodCodeJsonldGet = (PingMethodCodeJsonldGet) o;
    return Objects.equals(this.atContext, pingMethodCodeJsonldGet.atContext) &&
        Objects.equals(this.atId, pingMethodCodeJsonldGet.atId) &&
        Objects.equals(this.atType, pingMethodCodeJsonldGet.atType) &&
        Objects.equals(this.codeName, pingMethodCodeJsonldGet.codeName) &&
        Objects.equals(this.id, pingMethodCodeJsonldGet.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, atId, atType, codeName, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PingMethodCodeJsonldGet {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    codeName: ").append(toIndentedString(codeName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("codeName");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PingMethodCodeJsonldGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PingMethodCodeJsonldGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PingMethodCodeJsonldGet is not found in the empty JSON string", PingMethodCodeJsonldGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PingMethodCodeJsonldGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PingMethodCodeJsonldGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `@context`
      if (jsonObj.get("@context") != null && !jsonObj.get("@context").isJsonNull()) {
        AlertLogJsonldGetContext.validateJsonElement(jsonObj.get("@context"));
      }
      if ((jsonObj.get("@id") != null && !jsonObj.get("@id").isJsonNull()) && !jsonObj.get("@id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@id").toString()));
      }
      if ((jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) && !jsonObj.get("@type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@type").toString()));
      }
      if ((jsonObj.get("codeName") != null && !jsonObj.get("codeName").isJsonNull()) && !jsonObj.get("codeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PingMethodCodeJsonldGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PingMethodCodeJsonldGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PingMethodCodeJsonldGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PingMethodCodeJsonldGet.class));

       return (TypeAdapter<T>) new TypeAdapter<PingMethodCodeJsonldGet>() {
           @Override
           public void write(JsonWriter out, PingMethodCodeJsonldGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PingMethodCodeJsonldGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PingMethodCodeJsonldGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PingMethodCodeJsonldGet
   * @throws IOException if the JSON string is invalid with respect to PingMethodCodeJsonldGet
   */
  public static PingMethodCodeJsonldGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PingMethodCodeJsonldGet.class);
  }

  /**
   * Convert an instance of PingMethodCodeJsonldGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

