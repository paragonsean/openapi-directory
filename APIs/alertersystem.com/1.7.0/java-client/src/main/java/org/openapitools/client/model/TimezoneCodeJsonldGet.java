/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AlertLogJsonldGetContext;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TimezoneCode resource is a set of codes that describes the different international timezones.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimezoneCodeJsonldGet {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private AlertLogJsonldGetContext atContext;

  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private String atId;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private String atType;

  public static final String SERIALIZED_NAME_CODE_NAME = "codeName";
  @SerializedName(SERIALIZED_NAME_CODE_NAME)
  private String codeName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OFFSET_FROM_UTC = "offsetFromUtc";
  @SerializedName(SERIALIZED_NAME_OFFSET_FROM_UTC)
  private BigDecimal offsetFromUtc;

  public static final String SERIALIZED_NAME_TIMEZONE_DATE_STRING = "timezoneDateString";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_DATE_STRING)
  private String timezoneDateString;

  public TimezoneCodeJsonldGet() {
  }

  public TimezoneCodeJsonldGet(
     String atId, 
     String atType, 
     String codeName, 
     BigDecimal offsetFromUtc, 
     String timezoneDateString
  ) {
    this();
    this.atId = atId;
    this.atType = atType;
    this.codeName = codeName;
    this.offsetFromUtc = offsetFromUtc;
    this.timezoneDateString = timezoneDateString;
  }

  public TimezoneCodeJsonldGet atContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nullable
  public AlertLogJsonldGetContext getAtContext() {
    return atContext;
  }

  public void setAtContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
  }


  /**
   * Get atId
   * @return atId
   */
  @javax.annotation.Nullable
  public String getAtId() {
    return atId;
  }



  /**
   * Get atType
   * @return atType
   */
  @javax.annotation.Nullable
  public String getAtType() {
    return atType;
  }



  /**
   * The name of the code.
   * @return codeName
   */
  @javax.annotation.Nullable
  public String getCodeName() {
    return codeName;
  }



  public TimezoneCodeJsonldGet id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the resource instance.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * The numeric offset from the UTC timezone.
   * @return offsetFromUtc
   */
  @javax.annotation.Nullable
  public BigDecimal getOffsetFromUtc() {
    return offsetFromUtc;
  }



  /**
   * The text offset from the UTC timezone that forms part of the ISO 8601 date time format.
   * @return timezoneDateString
   */
  @javax.annotation.Nullable
  public String getTimezoneDateString() {
    return timezoneDateString;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimezoneCodeJsonldGet timezoneCodeJsonldGet = (TimezoneCodeJsonldGet) o;
    return Objects.equals(this.atContext, timezoneCodeJsonldGet.atContext) &&
        Objects.equals(this.atId, timezoneCodeJsonldGet.atId) &&
        Objects.equals(this.atType, timezoneCodeJsonldGet.atType) &&
        Objects.equals(this.codeName, timezoneCodeJsonldGet.codeName) &&
        Objects.equals(this.id, timezoneCodeJsonldGet.id) &&
        Objects.equals(this.offsetFromUtc, timezoneCodeJsonldGet.offsetFromUtc) &&
        Objects.equals(this.timezoneDateString, timezoneCodeJsonldGet.timezoneDateString);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, atId, atType, codeName, id, offsetFromUtc, timezoneDateString);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimezoneCodeJsonldGet {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    codeName: ").append(toIndentedString(codeName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offsetFromUtc: ").append(toIndentedString(offsetFromUtc)).append("\n");
    sb.append("    timezoneDateString: ").append(toIndentedString(timezoneDateString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("codeName");
    openapiFields.add("id");
    openapiFields.add("offsetFromUtc");
    openapiFields.add("timezoneDateString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimezoneCodeJsonldGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimezoneCodeJsonldGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimezoneCodeJsonldGet is not found in the empty JSON string", TimezoneCodeJsonldGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimezoneCodeJsonldGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimezoneCodeJsonldGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `@context`
      if (jsonObj.get("@context") != null && !jsonObj.get("@context").isJsonNull()) {
        AlertLogJsonldGetContext.validateJsonElement(jsonObj.get("@context"));
      }
      if ((jsonObj.get("@id") != null && !jsonObj.get("@id").isJsonNull()) && !jsonObj.get("@id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@id").toString()));
      }
      if ((jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) && !jsonObj.get("@type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@type").toString()));
      }
      if ((jsonObj.get("codeName") != null && !jsonObj.get("codeName").isJsonNull()) && !jsonObj.get("codeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("timezoneDateString") != null && !jsonObj.get("timezoneDateString").isJsonNull()) && !jsonObj.get("timezoneDateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneDateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneDateString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimezoneCodeJsonldGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimezoneCodeJsonldGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimezoneCodeJsonldGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimezoneCodeJsonldGet.class));

       return (TypeAdapter<T>) new TypeAdapter<TimezoneCodeJsonldGet>() {
           @Override
           public void write(JsonWriter out, TimezoneCodeJsonldGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimezoneCodeJsonldGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimezoneCodeJsonldGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimezoneCodeJsonldGet
   * @throws IOException if the JSON string is invalid with respect to TimezoneCodeJsonldGet
   */
  public static TimezoneCodeJsonldGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimezoneCodeJsonldGet.class);
  }

  /**
   * Convert an instance of TimezoneCodeJsonldGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

