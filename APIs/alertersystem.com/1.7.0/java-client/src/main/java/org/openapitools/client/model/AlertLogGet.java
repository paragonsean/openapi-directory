/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertLogGet {
  public static final String SERIALIZED_NAME_ALERT_LOG_ERROR_MESSAGE = "alertLogErrorMessage";
  @SerializedName(SERIALIZED_NAME_ALERT_LOG_ERROR_MESSAGE)
  private String alertLogErrorMessage;

  public static final String SERIALIZED_NAME_ALERT_LOG_MESSAGE_ID = "alertLogMessageId";
  @SerializedName(SERIALIZED_NAME_ALERT_LOG_MESSAGE_ID)
  private String alertLogMessageId;

  public static final String SERIALIZED_NAME_ALERT_LOG_STATUS_CODE = "alertLogStatusCode";
  @SerializedName(SERIALIZED_NAME_ALERT_LOG_STATUS_CODE)
  private String alertLogStatusCode;

  public static final String SERIALIZED_NAME_ALERT_SERVICE = "alertService";
  @SerializedName(SERIALIZED_NAME_ALERT_SERVICE)
  private String alertService;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private String monitor;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_PING = "ping";
  @SerializedName(SERIALIZED_NAME_PING)
  private String ping;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "resourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  private String resourceOwner;

  public static final String SERIALIZED_NAME_WEBHOOK_RESPONSE_BODY = "webhookResponseBody";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_RESPONSE_BODY)
  private String webhookResponseBody;

  public static final String SERIALIZED_NAME_WEBHOOK_RESPONSE_HEADERS = "webhookResponseHeaders";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_RESPONSE_HEADERS)
  private List<String> webhookResponseHeaders;

  public AlertLogGet() {
  }

  public AlertLogGet(
     OffsetDateTime createdAt, 
     UUID id
  ) {
    this();
    this.createdAt = createdAt;
    this.id = id;
  }

  public AlertLogGet alertLogErrorMessage(String alertLogErrorMessage) {
    this.alertLogErrorMessage = alertLogErrorMessage;
    return this;
  }

  /**
   * The reason why the dispatch of the alert failed.
   * @return alertLogErrorMessage
   */
  @javax.annotation.Nullable
  public String getAlertLogErrorMessage() {
    return alertLogErrorMessage;
  }

  public void setAlertLogErrorMessage(String alertLogErrorMessage) {
    this.alertLogErrorMessage = alertLogErrorMessage;
  }


  public AlertLogGet alertLogMessageId(String alertLogMessageId) {
    this.alertLogMessageId = alertLogMessageId;
    return this;
  }

  /**
   * The id of the successfully dispatched message as received from the transport that was used.
   * @return alertLogMessageId
   */
  @javax.annotation.Nullable
  public String getAlertLogMessageId() {
    return alertLogMessageId;
  }

  public void setAlertLogMessageId(String alertLogMessageId) {
    this.alertLogMessageId = alertLogMessageId;
  }


  public AlertLogGet alertLogStatusCode(String alertLogStatusCode) {
    this.alertLogStatusCode = alertLogStatusCode;
    return this;
  }

  /**
   * The status of the alert log.
   * @return alertLogStatusCode
   */
  @javax.annotation.Nullable
  public String getAlertLogStatusCode() {
    return alertLogStatusCode;
  }

  public void setAlertLogStatusCode(String alertLogStatusCode) {
    this.alertLogStatusCode = alertLogStatusCode;
  }


  public AlertLogGet alertService(String alertService) {
    this.alertService = alertService;
    return this;
  }

  /**
   * The alert service that is related to this resource.
   * @return alertService
   */
  @javax.annotation.Nullable
  public String getAlertService() {
    return alertService;
  }

  public void setAlertService(String alertService) {
    this.alertService = alertService;
  }


  /**
   * When the resource instance was created. This date-time is in the UTC timezone.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AlertLogGet dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  /**
   * The unique identifier of the resource instance.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public AlertLogGet monitor(String monitor) {
    this.monitor = monitor;
    return this;
  }

  /**
   * The monitor that is related to this resource instance.
   * @return monitor
   */
  @javax.annotation.Nullable
  public String getMonitor() {
    return monitor;
  }

  public void setMonitor(String monitor) {
    this.monitor = monitor;
  }


  public AlertLogGet partition(String partition) {
    this.partition = partition;
    return this;
  }

  /**
   * The partition that contains this resource instance. The resource cannot be moved to another partition.
   * @return partition
   */
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }


  public AlertLogGet ping(String ping) {
    this.ping = ping;
    return this;
  }

  /**
   * The ping that triggered this resource instance.
   * @return ping
   */
  @javax.annotation.Nullable
  public String getPing() {
    return ping;
  }

  public void setPing(String ping) {
    this.ping = ping;
  }


  public AlertLogGet resourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * The name of the person who owns this resource.
   * @return resourceOwner
   */
  @javax.annotation.Nullable
  public String getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
  }


  public AlertLogGet webhookResponseBody(String webhookResponseBody) {
    this.webhookResponseBody = webhookResponseBody;
    return this;
  }

  /**
   * The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters.
   * @return webhookResponseBody
   */
  @javax.annotation.Nullable
  public String getWebhookResponseBody() {
    return webhookResponseBody;
  }

  public void setWebhookResponseBody(String webhookResponseBody) {
    this.webhookResponseBody = webhookResponseBody;
  }


  public AlertLogGet webhookResponseHeaders(List<String> webhookResponseHeaders) {
    this.webhookResponseHeaders = webhookResponseHeaders;
    return this;
  }

  public AlertLogGet addWebhookResponseHeadersItem(String webhookResponseHeadersItem) {
    if (this.webhookResponseHeaders == null) {
      this.webhookResponseHeaders = new ArrayList<>();
    }
    this.webhookResponseHeaders.add(webhookResponseHeadersItem);
    return this;
  }

  /**
   * The response headers returned by a successful request to a webhook URL.
   * @return webhookResponseHeaders
   */
  @javax.annotation.Nullable
  public List<String> getWebhookResponseHeaders() {
    return webhookResponseHeaders;
  }

  public void setWebhookResponseHeaders(List<String> webhookResponseHeaders) {
    this.webhookResponseHeaders = webhookResponseHeaders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertLogGet alertLogGet = (AlertLogGet) o;
    return Objects.equals(this.alertLogErrorMessage, alertLogGet.alertLogErrorMessage) &&
        Objects.equals(this.alertLogMessageId, alertLogGet.alertLogMessageId) &&
        Objects.equals(this.alertLogStatusCode, alertLogGet.alertLogStatusCode) &&
        Objects.equals(this.alertService, alertLogGet.alertService) &&
        Objects.equals(this.createdAt, alertLogGet.createdAt) &&
        Objects.equals(this.dataSegmentCode, alertLogGet.dataSegmentCode) &&
        Objects.equals(this.id, alertLogGet.id) &&
        Objects.equals(this.monitor, alertLogGet.monitor) &&
        Objects.equals(this.partition, alertLogGet.partition) &&
        Objects.equals(this.ping, alertLogGet.ping) &&
        Objects.equals(this.resourceOwner, alertLogGet.resourceOwner) &&
        Objects.equals(this.webhookResponseBody, alertLogGet.webhookResponseBody) &&
        Objects.equals(this.webhookResponseHeaders, alertLogGet.webhookResponseHeaders);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertLogErrorMessage, alertLogMessageId, alertLogStatusCode, alertService, createdAt, dataSegmentCode, id, monitor, partition, ping, resourceOwner, webhookResponseBody, webhookResponseHeaders);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertLogGet {\n");
    sb.append("    alertLogErrorMessage: ").append(toIndentedString(alertLogErrorMessage)).append("\n");
    sb.append("    alertLogMessageId: ").append(toIndentedString(alertLogMessageId)).append("\n");
    sb.append("    alertLogStatusCode: ").append(toIndentedString(alertLogStatusCode)).append("\n");
    sb.append("    alertService: ").append(toIndentedString(alertService)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    ping: ").append(toIndentedString(ping)).append("\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("    webhookResponseBody: ").append(toIndentedString(webhookResponseBody)).append("\n");
    sb.append("    webhookResponseHeaders: ").append(toIndentedString(webhookResponseHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertLogErrorMessage");
    openapiFields.add("alertLogMessageId");
    openapiFields.add("alertLogStatusCode");
    openapiFields.add("alertService");
    openapiFields.add("createdAt");
    openapiFields.add("dataSegmentCode");
    openapiFields.add("id");
    openapiFields.add("monitor");
    openapiFields.add("partition");
    openapiFields.add("ping");
    openapiFields.add("resourceOwner");
    openapiFields.add("webhookResponseBody");
    openapiFields.add("webhookResponseHeaders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertLogGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertLogGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertLogGet is not found in the empty JSON string", AlertLogGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertLogGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertLogGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alertLogErrorMessage") != null && !jsonObj.get("alertLogErrorMessage").isJsonNull()) && !jsonObj.get("alertLogErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertLogErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertLogErrorMessage").toString()));
      }
      if ((jsonObj.get("alertLogMessageId") != null && !jsonObj.get("alertLogMessageId").isJsonNull()) && !jsonObj.get("alertLogMessageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertLogMessageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertLogMessageId").toString()));
      }
      if ((jsonObj.get("alertLogStatusCode") != null && !jsonObj.get("alertLogStatusCode").isJsonNull()) && !jsonObj.get("alertLogStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertLogStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertLogStatusCode").toString()));
      }
      if ((jsonObj.get("alertService") != null && !jsonObj.get("alertService").isJsonNull()) && !jsonObj.get("alertService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertService").toString()));
      }
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("monitor") != null && !jsonObj.get("monitor").isJsonNull()) && !jsonObj.get("monitor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor").toString()));
      }
      if ((jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) && !jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      if ((jsonObj.get("ping") != null && !jsonObj.get("ping").isJsonNull()) && !jsonObj.get("ping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping").toString()));
      }
      if ((jsonObj.get("resourceOwner") != null && !jsonObj.get("resourceOwner").isJsonNull()) && !jsonObj.get("resourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwner").toString()));
      }
      if ((jsonObj.get("webhookResponseBody") != null && !jsonObj.get("webhookResponseBody").isJsonNull()) && !jsonObj.get("webhookResponseBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookResponseBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookResponseBody").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webhookResponseHeaders") != null && !jsonObj.get("webhookResponseHeaders").isJsonNull() && !jsonObj.get("webhookResponseHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookResponseHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("webhookResponseHeaders").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertLogGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertLogGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertLogGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertLogGet.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertLogGet>() {
           @Override
           public void write(JsonWriter out, AlertLogGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertLogGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertLogGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertLogGet
   * @throws IOException if the JSON string is invalid with respect to AlertLogGet
   */
  public static AlertLogGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertLogGet.class);
  }

  /**
   * Convert an instance of AlertLogGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

