/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlertLogGet;
import org.openapitools.client.model.AlertLogJsonldGet;
import org.openapitools.client.model.ApiAlertLogGetCollection200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertLogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertLogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiAlertLogGetCollection
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param monitor  (optional)
     * @param monitor2  (optional)
     * @param alertService  (optional)
     * @param alertService2  (optional)
     * @param alertLogStatusCode  (optional)
     * @param alertLogStatusCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAlertLogGetCollectionCall(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String monitor, List<String> monitor2, String alertService, List<String> alertService2, String alertLogStatusCode, List<String> alertLogStatusCode2, String partition, List<String> partition2, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/alert-log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (dataSegmentCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSegmentCode", dataSegmentCode));
        }

        if (dataSegmentCode2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dataSegmentCode[]", dataSegmentCode2));
        }

        if (monitor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitor", monitor));
        }

        if (monitor2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "monitor[]", monitor2));
        }

        if (alertService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertService", alertService));
        }

        if (alertService2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "alertService[]", alertService2));
        }

        if (alertLogStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertLogStatusCode", alertLogStatusCode));
        }

        if (alertLogStatusCode2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "alertLogStatusCode[]", alertLogStatusCode2));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (partition2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partition[]", partition2));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties[]", properties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAlertLogGetCollectionValidateBeforeCall(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String monitor, List<String> monitor2, String alertService, List<String> alertService2, String alertLogStatusCode, List<String> alertLogStatusCode2, String partition, List<String> partition2, List<String> properties, final ApiCallback _callback) throws ApiException {
        return apiAlertLogGetCollectionCall(page, dataSegmentCode, dataSegmentCode2, monitor, monitor2, alertService, alertService2, alertLogStatusCode, alertLogStatusCode2, partition, partition2, properties, _callback);

    }

    /**
     * Retrieves the collection of AlertLog resources.
     * Retrieves the collection of AlertLog resources.
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param monitor  (optional)
     * @param monitor2  (optional)
     * @param alertService  (optional)
     * @param alertService2  (optional)
     * @param alertLogStatusCode  (optional)
     * @param alertLogStatusCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @return List&lt;AlertLogGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<AlertLogGet> apiAlertLogGetCollection(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String monitor, List<String> monitor2, String alertService, List<String> alertService2, String alertLogStatusCode, List<String> alertLogStatusCode2, String partition, List<String> partition2, List<String> properties) throws ApiException {
        ApiResponse<List<AlertLogGet>> localVarResp = apiAlertLogGetCollectionWithHttpInfo(page, dataSegmentCode, dataSegmentCode2, monitor, monitor2, alertService, alertService2, alertLogStatusCode, alertLogStatusCode2, partition, partition2, properties);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of AlertLog resources.
     * Retrieves the collection of AlertLog resources.
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param monitor  (optional)
     * @param monitor2  (optional)
     * @param alertService  (optional)
     * @param alertService2  (optional)
     * @param alertLogStatusCode  (optional)
     * @param alertLogStatusCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @return ApiResponse&lt;List&lt;AlertLogGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlertLogGet>> apiAlertLogGetCollectionWithHttpInfo(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String monitor, List<String> monitor2, String alertService, List<String> alertService2, String alertLogStatusCode, List<String> alertLogStatusCode2, String partition, List<String> partition2, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = apiAlertLogGetCollectionValidateBeforeCall(page, dataSegmentCode, dataSegmentCode2, monitor, monitor2, alertService, alertService2, alertLogStatusCode, alertLogStatusCode2, partition, partition2, properties, null);
        Type localVarReturnType = new TypeToken<List<AlertLogGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of AlertLog resources. (asynchronously)
     * Retrieves the collection of AlertLog resources.
     * @param page The collection page number (optional, default to 1)
     * @param dataSegmentCode  (optional)
     * @param dataSegmentCode2  (optional)
     * @param monitor  (optional)
     * @param monitor2  (optional)
     * @param alertService  (optional)
     * @param alertService2  (optional)
     * @param alertLogStatusCode  (optional)
     * @param alertLogStatusCode2  (optional)
     * @param partition  (optional)
     * @param partition2  (optional)
     * @param properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog collection </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAlertLogGetCollectionAsync(Integer page, String dataSegmentCode, List<String> dataSegmentCode2, String monitor, List<String> monitor2, String alertService, List<String> alertService2, String alertLogStatusCode, List<String> alertLogStatusCode2, String partition, List<String> partition2, List<String> properties, final ApiCallback<List<AlertLogGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAlertLogGetCollectionValidateBeforeCall(page, dataSegmentCode, dataSegmentCode2, monitor, monitor2, alertService, alertService2, alertLogStatusCode, alertLogStatusCode2, partition, partition2, properties, _callback);
        Type localVarReturnType = new TypeToken<List<AlertLogGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAlertLogIdGet
     * @param id AlertLog identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAlertLogIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/alert-log/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/ld+json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAlertLogIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiAlertLogIdGet(Async)");
        }

        return apiAlertLogIdGetCall(id, _callback);

    }

    /**
     * Retrieves a AlertLog resource.
     * Retrieves a AlertLog resource.
     * @param id AlertLog identifier (required)
     * @return AlertLogGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public AlertLogGet apiAlertLogIdGet(String id) throws ApiException {
        ApiResponse<AlertLogGet> localVarResp = apiAlertLogIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a AlertLog resource.
     * Retrieves a AlertLog resource.
     * @param id AlertLog identifier (required)
     * @return ApiResponse&lt;AlertLogGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertLogGet> apiAlertLogIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiAlertLogIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AlertLogGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a AlertLog resource. (asynchronously)
     * Retrieves a AlertLog resource.
     * @param id AlertLog identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AlertLog resource </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAlertLogIdGetAsync(String id, final ApiCallback<AlertLogGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAlertLogIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AlertLogGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
