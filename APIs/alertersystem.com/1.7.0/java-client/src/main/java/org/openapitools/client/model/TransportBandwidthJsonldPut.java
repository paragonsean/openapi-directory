/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransportBandwidthJsonldPut {
  public static final String SERIALIZED_NAME_BANDWIDTH_ACCOUNT_ID = "bandwidthAccountId";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_ACCOUNT_ID)
  private String bandwidthAccountId;

  public static final String SERIALIZED_NAME_BANDWIDTH_APPLICATION_ID = "bandwidthApplicationId";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_APPLICATION_ID)
  private String bandwidthApplicationId;

  public static final String SERIALIZED_NAME_BANDWIDTH_FROM = "bandwidthFrom";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_FROM)
  private String bandwidthFrom;

  public static final String SERIALIZED_NAME_BANDWIDTH_PASSWORD = "bandwidthPassword";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_PASSWORD)
  private String bandwidthPassword;

  public static final String SERIALIZED_NAME_BANDWIDTH_USERNAME = "bandwidthUsername";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_USERNAME)
  private String bandwidthUsername;

  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_TRANSPORT_NAME = "transportName";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_NAME)
  private String transportName;

  public TransportBandwidthJsonldPut() {
  }

  public TransportBandwidthJsonldPut bandwidthAccountId(String bandwidthAccountId) {
    this.bandwidthAccountId = bandwidthAccountId;
    return this;
  }

  /**
   * The account ID value for the Bandwidth service.
   * @return bandwidthAccountId
   */
  @javax.annotation.Nullable
  public String getBandwidthAccountId() {
    return bandwidthAccountId;
  }

  public void setBandwidthAccountId(String bandwidthAccountId) {
    this.bandwidthAccountId = bandwidthAccountId;
  }


  public TransportBandwidthJsonldPut bandwidthApplicationId(String bandwidthApplicationId) {
    this.bandwidthApplicationId = bandwidthApplicationId;
    return this;
  }

  /**
   * The application ID value for the Bandwidth service.
   * @return bandwidthApplicationId
   */
  @javax.annotation.Nullable
  public String getBandwidthApplicationId() {
    return bandwidthApplicationId;
  }

  public void setBandwidthApplicationId(String bandwidthApplicationId) {
    this.bandwidthApplicationId = bandwidthApplicationId;
  }


  public TransportBandwidthJsonldPut bandwidthFrom(String bandwidthFrom) {
    this.bandwidthFrom = bandwidthFrom;
    return this;
  }

  /**
   * The from value for the Bandwidth service.
   * @return bandwidthFrom
   */
  @javax.annotation.Nullable
  public String getBandwidthFrom() {
    return bandwidthFrom;
  }

  public void setBandwidthFrom(String bandwidthFrom) {
    this.bandwidthFrom = bandwidthFrom;
  }


  public TransportBandwidthJsonldPut bandwidthPassword(String bandwidthPassword) {
    this.bandwidthPassword = bandwidthPassword;
    return this;
  }

  /**
   * The password for the Bandwidth service. Stored in encrypted format.
   * @return bandwidthPassword
   */
  @javax.annotation.Nullable
  public String getBandwidthPassword() {
    return bandwidthPassword;
  }

  public void setBandwidthPassword(String bandwidthPassword) {
    this.bandwidthPassword = bandwidthPassword;
  }


  public TransportBandwidthJsonldPut bandwidthUsername(String bandwidthUsername) {
    this.bandwidthUsername = bandwidthUsername;
    return this;
  }

  /**
   * The username for the Bandwidth service.
   * @return bandwidthUsername
   */
  @javax.annotation.Nullable
  public String getBandwidthUsername() {
    return bandwidthUsername;
  }

  public void setBandwidthUsername(String bandwidthUsername) {
    this.bandwidthUsername = bandwidthUsername;
  }


  public TransportBandwidthJsonldPut dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  public TransportBandwidthJsonldPut transportName(String transportName) {
    this.transportName = transportName;
    return this;
  }

  /**
   * The name of the transport.
   * @return transportName
   */
  @javax.annotation.Nullable
  public String getTransportName() {
    return transportName;
  }

  public void setTransportName(String transportName) {
    this.transportName = transportName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportBandwidthJsonldPut transportBandwidthJsonldPut = (TransportBandwidthJsonldPut) o;
    return Objects.equals(this.bandwidthAccountId, transportBandwidthJsonldPut.bandwidthAccountId) &&
        Objects.equals(this.bandwidthApplicationId, transportBandwidthJsonldPut.bandwidthApplicationId) &&
        Objects.equals(this.bandwidthFrom, transportBandwidthJsonldPut.bandwidthFrom) &&
        Objects.equals(this.bandwidthPassword, transportBandwidthJsonldPut.bandwidthPassword) &&
        Objects.equals(this.bandwidthUsername, transportBandwidthJsonldPut.bandwidthUsername) &&
        Objects.equals(this.dataSegmentCode, transportBandwidthJsonldPut.dataSegmentCode) &&
        Objects.equals(this.transportName, transportBandwidthJsonldPut.transportName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthAccountId, bandwidthApplicationId, bandwidthFrom, bandwidthPassword, bandwidthUsername, dataSegmentCode, transportName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportBandwidthJsonldPut {\n");
    sb.append("    bandwidthAccountId: ").append(toIndentedString(bandwidthAccountId)).append("\n");
    sb.append("    bandwidthApplicationId: ").append(toIndentedString(bandwidthApplicationId)).append("\n");
    sb.append("    bandwidthFrom: ").append(toIndentedString(bandwidthFrom)).append("\n");
    sb.append("    bandwidthPassword: ").append(toIndentedString(bandwidthPassword)).append("\n");
    sb.append("    bandwidthUsername: ").append(toIndentedString(bandwidthUsername)).append("\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    transportName: ").append(toIndentedString(transportName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthAccountId");
    openapiFields.add("bandwidthApplicationId");
    openapiFields.add("bandwidthFrom");
    openapiFields.add("bandwidthPassword");
    openapiFields.add("bandwidthUsername");
    openapiFields.add("dataSegmentCode");
    openapiFields.add("transportName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bandwidthAccountId");
    openapiRequiredFields.add("bandwidthApplicationId");
    openapiRequiredFields.add("bandwidthFrom");
    openapiRequiredFields.add("bandwidthPassword");
    openapiRequiredFields.add("bandwidthUsername");
    openapiRequiredFields.add("transportName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransportBandwidthJsonldPut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransportBandwidthJsonldPut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransportBandwidthJsonldPut is not found in the empty JSON string", TransportBandwidthJsonldPut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransportBandwidthJsonldPut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransportBandwidthJsonldPut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransportBandwidthJsonldPut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bandwidthAccountId") != null && !jsonObj.get("bandwidthAccountId").isJsonNull()) && !jsonObj.get("bandwidthAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthAccountId").toString()));
      }
      if ((jsonObj.get("bandwidthApplicationId") != null && !jsonObj.get("bandwidthApplicationId").isJsonNull()) && !jsonObj.get("bandwidthApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthApplicationId").toString()));
      }
      if ((jsonObj.get("bandwidthFrom") != null && !jsonObj.get("bandwidthFrom").isJsonNull()) && !jsonObj.get("bandwidthFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthFrom").toString()));
      }
      if ((jsonObj.get("bandwidthPassword") != null && !jsonObj.get("bandwidthPassword").isJsonNull()) && !jsonObj.get("bandwidthPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthPassword").toString()));
      }
      if ((jsonObj.get("bandwidthUsername") != null && !jsonObj.get("bandwidthUsername").isJsonNull()) && !jsonObj.get("bandwidthUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthUsername").toString()));
      }
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("transportName") != null && !jsonObj.get("transportName").isJsonNull()) && !jsonObj.get("transportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransportBandwidthJsonldPut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransportBandwidthJsonldPut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransportBandwidthJsonldPut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransportBandwidthJsonldPut.class));

       return (TypeAdapter<T>) new TypeAdapter<TransportBandwidthJsonldPut>() {
           @Override
           public void write(JsonWriter out, TransportBandwidthJsonldPut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransportBandwidthJsonldPut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransportBandwidthJsonldPut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransportBandwidthJsonldPut
   * @throws IOException if the JSON string is invalid with respect to TransportBandwidthJsonldPut
   */
  public static TransportBandwidthJsonldPut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransportBandwidthJsonldPut.class);
  }

  /**
   * Convert an instance of TransportBandwidthJsonldPut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

