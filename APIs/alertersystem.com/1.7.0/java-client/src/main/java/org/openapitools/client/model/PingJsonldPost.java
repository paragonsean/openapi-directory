/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Ping resource is a collection of pings that have been sent to monitors in the user account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PingJsonldPost {
  public static final String SERIALIZED_NAME_EXPECT_NEXT_PING_AT = "expectNextPingAt";
  @SerializedName(SERIALIZED_NAME_EXPECT_NEXT_PING_AT)
  private OffsetDateTime expectNextPingAt;

  public static final String SERIALIZED_NAME_EXPECT_NEXT_PING_AT_EPOCH = "expectNextPingAtEpoch";
  @SerializedName(SERIALIZED_NAME_EXPECT_NEXT_PING_AT_EPOCH)
  private Integer expectNextPingAtEpoch;

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private String monitor;

  public static final String SERIALIZED_NAME_PING_CUSTOM_CODE = "pingCustomCode";
  @SerializedName(SERIALIZED_NAME_PING_CUSTOM_CODE)
  private String pingCustomCode;

  public static final String SERIALIZED_NAME_PING_CUSTOM_PAYLOAD = "pingCustomPayload";
  @SerializedName(SERIALIZED_NAME_PING_CUSTOM_PAYLOAD)
  private String pingCustomPayload;

  public PingJsonldPost() {
  }

  public PingJsonldPost expectNextPingAt(OffsetDateTime expectNextPingAt) {
    this.expectNextPingAt = expectNextPingAt;
    return this;
  }

  /**
   * When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \&quot;expectNextPingAt\&quot;, or \&quot;expectNextPingAtEpoch\&quot;, or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
   * @return expectNextPingAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectNextPingAt() {
    return expectNextPingAt;
  }

  public void setExpectNextPingAt(OffsetDateTime expectNextPingAt) {
    this.expectNextPingAt = expectNextPingAt;
  }


  public PingJsonldPost expectNextPingAtEpoch(Integer expectNextPingAtEpoch) {
    this.expectNextPingAtEpoch = expectNextPingAtEpoch;
    return this;
  }

  /**
   * When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \&quot;expectNextPingAt\&quot;, or \&quot;expectNextPingAtEpoch\&quot;, or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
   * @return expectNextPingAtEpoch
   */
  @javax.annotation.Nullable
  public Integer getExpectNextPingAtEpoch() {
    return expectNextPingAtEpoch;
  }

  public void setExpectNextPingAtEpoch(Integer expectNextPingAtEpoch) {
    this.expectNextPingAtEpoch = expectNextPingAtEpoch;
  }


  public PingJsonldPost monitor(String monitor) {
    this.monitor = monitor;
    return this;
  }

  /**
   * The monitor that is related to this resource instance.
   * @return monitor
   */
  @javax.annotation.Nonnull
  public String getMonitor() {
    return monitor;
  }

  public void setMonitor(String monitor) {
    this.monitor = monitor;
  }


  public PingJsonldPost pingCustomCode(String pingCustomCode) {
    this.pingCustomCode = pingCustomCode;
    return this;
  }

  /**
   * The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.
   * @return pingCustomCode
   */
  @javax.annotation.Nullable
  public String getPingCustomCode() {
    return pingCustomCode;
  }

  public void setPingCustomCode(String pingCustomCode) {
    this.pingCustomCode = pingCustomCode;
  }


  public PingJsonldPost pingCustomPayload(String pingCustomPayload) {
    this.pingCustomPayload = pingCustomPayload;
    return this;
  }

  /**
   * The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor&#39;s alert payload, if the ping results in an alert.
   * @return pingCustomPayload
   */
  @javax.annotation.Nullable
  public String getPingCustomPayload() {
    return pingCustomPayload;
  }

  public void setPingCustomPayload(String pingCustomPayload) {
    this.pingCustomPayload = pingCustomPayload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PingJsonldPost pingJsonldPost = (PingJsonldPost) o;
    return Objects.equals(this.expectNextPingAt, pingJsonldPost.expectNextPingAt) &&
        Objects.equals(this.expectNextPingAtEpoch, pingJsonldPost.expectNextPingAtEpoch) &&
        Objects.equals(this.monitor, pingJsonldPost.monitor) &&
        Objects.equals(this.pingCustomCode, pingJsonldPost.pingCustomCode) &&
        Objects.equals(this.pingCustomPayload, pingJsonldPost.pingCustomPayload);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectNextPingAt, expectNextPingAtEpoch, monitor, pingCustomCode, pingCustomPayload);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PingJsonldPost {\n");
    sb.append("    expectNextPingAt: ").append(toIndentedString(expectNextPingAt)).append("\n");
    sb.append("    expectNextPingAtEpoch: ").append(toIndentedString(expectNextPingAtEpoch)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    pingCustomCode: ").append(toIndentedString(pingCustomCode)).append("\n");
    sb.append("    pingCustomPayload: ").append(toIndentedString(pingCustomPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectNextPingAt");
    openapiFields.add("expectNextPingAtEpoch");
    openapiFields.add("monitor");
    openapiFields.add("pingCustomCode");
    openapiFields.add("pingCustomPayload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("monitor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PingJsonldPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PingJsonldPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PingJsonldPost is not found in the empty JSON string", PingJsonldPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PingJsonldPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PingJsonldPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PingJsonldPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("monitor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor").toString()));
      }
      if ((jsonObj.get("pingCustomCode") != null && !jsonObj.get("pingCustomCode").isJsonNull()) && !jsonObj.get("pingCustomCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingCustomCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingCustomCode").toString()));
      }
      if ((jsonObj.get("pingCustomPayload") != null && !jsonObj.get("pingCustomPayload").isJsonNull()) && !jsonObj.get("pingCustomPayload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingCustomPayload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingCustomPayload").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PingJsonldPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PingJsonldPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PingJsonldPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PingJsonldPost.class));

       return (TypeAdapter<T>) new TypeAdapter<PingJsonldPost>() {
           @Override
           public void write(JsonWriter out, PingJsonldPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PingJsonldPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PingJsonldPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PingJsonldPost
   * @throws IOException if the JSON string is invalid with respect to PingJsonldPost
   */
  public static PingJsonldPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PingJsonldPost.class);
  }

  /**
   * Convert an instance of PingJsonldPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

