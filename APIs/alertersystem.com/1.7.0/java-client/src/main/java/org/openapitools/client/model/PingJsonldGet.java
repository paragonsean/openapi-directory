/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AlertLogJsonldGetContext;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Ping resource is a collection of pings that have been sent to monitors in the user account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PingJsonldGet {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private AlertLogJsonldGetContext atContext;

  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private String atId;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private String atType;

  public static final String SERIALIZED_NAME_ALERT_LOGS = "alertLogs";
  @SerializedName(SERIALIZED_NAME_ALERT_LOGS)
  private List<String> alertLogs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_EXPECT_NEXT_PING_AT = "expectNextPingAt";
  @SerializedName(SERIALIZED_NAME_EXPECT_NEXT_PING_AT)
  private OffsetDateTime expectNextPingAt;

  public static final String SERIALIZED_NAME_EXPECT_NEXT_PING_AT_EPOCH = "expectNextPingAtEpoch";
  @SerializedName(SERIALIZED_NAME_EXPECT_NEXT_PING_AT_EPOCH)
  private Integer expectNextPingAtEpoch;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private String monitor;

  public static final String SERIALIZED_NAME_MONITOR_STATUS_LOG = "monitorStatusLog";
  @SerializedName(SERIALIZED_NAME_MONITOR_STATUS_LOG)
  private String monitorStatusLog;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_PING_CUSTOM_CODE = "pingCustomCode";
  @SerializedName(SERIALIZED_NAME_PING_CUSTOM_CODE)
  private String pingCustomCode;

  public static final String SERIALIZED_NAME_PING_CUSTOM_PAYLOAD = "pingCustomPayload";
  @SerializedName(SERIALIZED_NAME_PING_CUSTOM_PAYLOAD)
  private String pingCustomPayload;

  public static final String SERIALIZED_NAME_PING_METHOD_CODE = "pingMethodCode";
  @SerializedName(SERIALIZED_NAME_PING_METHOD_CODE)
  private String pingMethodCode;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "resourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  private String resourceOwner;

  public PingJsonldGet() {
  }

  public PingJsonldGet(
     String atId, 
     String atType, 
     OffsetDateTime createdAt, 
     UUID id
  ) {
    this();
    this.atId = atId;
    this.atType = atType;
    this.createdAt = createdAt;
    this.id = id;
  }

  public PingJsonldGet atContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nullable
  public AlertLogJsonldGetContext getAtContext() {
    return atContext;
  }

  public void setAtContext(AlertLogJsonldGetContext atContext) {
    this.atContext = atContext;
  }


  /**
   * Get atId
   * @return atId
   */
  @javax.annotation.Nullable
  public String getAtId() {
    return atId;
  }



  /**
   * Get atType
   * @return atType
   */
  @javax.annotation.Nullable
  public String getAtType() {
    return atType;
  }



  public PingJsonldGet alertLogs(List<String> alertLogs) {
    this.alertLogs = alertLogs;
    return this;
  }

  public PingJsonldGet addAlertLogsItem(String alertLogsItem) {
    if (this.alertLogs == null) {
      this.alertLogs = new ArrayList<>();
    }
    this.alertLogs.add(alertLogsItem);
    return this;
  }

  /**
   * The alert logs that are related to this resource instance.
   * @return alertLogs
   */
  @javax.annotation.Nullable
  public List<String> getAlertLogs() {
    return alertLogs;
  }

  public void setAlertLogs(List<String> alertLogs) {
    this.alertLogs = alertLogs;
  }


  /**
   * When the resource instance was created. This date-time is in the UTC timezone.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public PingJsonldGet dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  public PingJsonldGet expectNextPingAt(OffsetDateTime expectNextPingAt) {
    this.expectNextPingAt = expectNextPingAt;
    return this;
  }

  /**
   * When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \&quot;expectNextPingAt\&quot;, or \&quot;expectNextPingAtEpoch\&quot;, or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
   * @return expectNextPingAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectNextPingAt() {
    return expectNextPingAt;
  }

  public void setExpectNextPingAt(OffsetDateTime expectNextPingAt) {
    this.expectNextPingAt = expectNextPingAt;
  }


  public PingJsonldGet expectNextPingAtEpoch(Integer expectNextPingAtEpoch) {
    this.expectNextPingAtEpoch = expectNextPingAtEpoch;
    return this;
  }

  /**
   * When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \&quot;expectNextPingAt\&quot;, or \&quot;expectNextPingAtEpoch\&quot;, or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.
   * @return expectNextPingAtEpoch
   */
  @javax.annotation.Nullable
  public Integer getExpectNextPingAtEpoch() {
    return expectNextPingAtEpoch;
  }

  public void setExpectNextPingAtEpoch(Integer expectNextPingAtEpoch) {
    this.expectNextPingAtEpoch = expectNextPingAtEpoch;
  }


  /**
   * The unique identifier of the resource instance.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public PingJsonldGet ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The IP address where this resource originated.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public PingJsonldGet monitor(String monitor) {
    this.monitor = monitor;
    return this;
  }

  /**
   * The monitor that is related to this resource instance.
   * @return monitor
   */
  @javax.annotation.Nonnull
  public String getMonitor() {
    return monitor;
  }

  public void setMonitor(String monitor) {
    this.monitor = monitor;
  }


  public PingJsonldGet monitorStatusLog(String monitorStatusLog) {
    this.monitorStatusLog = monitorStatusLog;
    return this;
  }

  /**
   * The monitor status that resulted from the ping.
   * @return monitorStatusLog
   */
  @javax.annotation.Nullable
  public String getMonitorStatusLog() {
    return monitorStatusLog;
  }

  public void setMonitorStatusLog(String monitorStatusLog) {
    this.monitorStatusLog = monitorStatusLog;
  }


  public PingJsonldGet partition(String partition) {
    this.partition = partition;
    return this;
  }

  /**
   * The partition that contains this resource instance. The resource cannot be moved to another partition.
   * @return partition
   */
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }


  public PingJsonldGet pingCustomCode(String pingCustomCode) {
    this.pingCustomCode = pingCustomCode;
    return this;
  }

  /**
   * The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.
   * @return pingCustomCode
   */
  @javax.annotation.Nullable
  public String getPingCustomCode() {
    return pingCustomCode;
  }

  public void setPingCustomCode(String pingCustomCode) {
    this.pingCustomCode = pingCustomCode;
  }


  public PingJsonldGet pingCustomPayload(String pingCustomPayload) {
    this.pingCustomPayload = pingCustomPayload;
    return this;
  }

  /**
   * The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor&#39;s alert payload, if the ping results in an alert.
   * @return pingCustomPayload
   */
  @javax.annotation.Nullable
  public String getPingCustomPayload() {
    return pingCustomPayload;
  }

  public void setPingCustomPayload(String pingCustomPayload) {
    this.pingCustomPayload = pingCustomPayload;
  }


  public PingJsonldGet pingMethodCode(String pingMethodCode) {
    this.pingMethodCode = pingMethodCode;
    return this;
  }

  /**
   * The method of the ping.
   * @return pingMethodCode
   */
  @javax.annotation.Nullable
  public String getPingMethodCode() {
    return pingMethodCode;
  }

  public void setPingMethodCode(String pingMethodCode) {
    this.pingMethodCode = pingMethodCode;
  }


  public PingJsonldGet resourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * The name of the person who owns this resource.
   * @return resourceOwner
   */
  @javax.annotation.Nullable
  public String getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PingJsonldGet pingJsonldGet = (PingJsonldGet) o;
    return Objects.equals(this.atContext, pingJsonldGet.atContext) &&
        Objects.equals(this.atId, pingJsonldGet.atId) &&
        Objects.equals(this.atType, pingJsonldGet.atType) &&
        Objects.equals(this.alertLogs, pingJsonldGet.alertLogs) &&
        Objects.equals(this.createdAt, pingJsonldGet.createdAt) &&
        Objects.equals(this.dataSegmentCode, pingJsonldGet.dataSegmentCode) &&
        Objects.equals(this.expectNextPingAt, pingJsonldGet.expectNextPingAt) &&
        Objects.equals(this.expectNextPingAtEpoch, pingJsonldGet.expectNextPingAtEpoch) &&
        Objects.equals(this.id, pingJsonldGet.id) &&
        Objects.equals(this.ipAddress, pingJsonldGet.ipAddress) &&
        Objects.equals(this.monitor, pingJsonldGet.monitor) &&
        Objects.equals(this.monitorStatusLog, pingJsonldGet.monitorStatusLog) &&
        Objects.equals(this.partition, pingJsonldGet.partition) &&
        Objects.equals(this.pingCustomCode, pingJsonldGet.pingCustomCode) &&
        Objects.equals(this.pingCustomPayload, pingJsonldGet.pingCustomPayload) &&
        Objects.equals(this.pingMethodCode, pingJsonldGet.pingMethodCode) &&
        Objects.equals(this.resourceOwner, pingJsonldGet.resourceOwner);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, atId, atType, alertLogs, createdAt, dataSegmentCode, expectNextPingAt, expectNextPingAtEpoch, id, ipAddress, monitor, monitorStatusLog, partition, pingCustomCode, pingCustomPayload, pingMethodCode, resourceOwner);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PingJsonldGet {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    alertLogs: ").append(toIndentedString(alertLogs)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    expectNextPingAt: ").append(toIndentedString(expectNextPingAt)).append("\n");
    sb.append("    expectNextPingAtEpoch: ").append(toIndentedString(expectNextPingAtEpoch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    monitorStatusLog: ").append(toIndentedString(monitorStatusLog)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    pingCustomCode: ").append(toIndentedString(pingCustomCode)).append("\n");
    sb.append("    pingCustomPayload: ").append(toIndentedString(pingCustomPayload)).append("\n");
    sb.append("    pingMethodCode: ").append(toIndentedString(pingMethodCode)).append("\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("alertLogs");
    openapiFields.add("createdAt");
    openapiFields.add("dataSegmentCode");
    openapiFields.add("expectNextPingAt");
    openapiFields.add("expectNextPingAtEpoch");
    openapiFields.add("id");
    openapiFields.add("ipAddress");
    openapiFields.add("monitor");
    openapiFields.add("monitorStatusLog");
    openapiFields.add("partition");
    openapiFields.add("pingCustomCode");
    openapiFields.add("pingCustomPayload");
    openapiFields.add("pingMethodCode");
    openapiFields.add("resourceOwner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("monitor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PingJsonldGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PingJsonldGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PingJsonldGet is not found in the empty JSON string", PingJsonldGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PingJsonldGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PingJsonldGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PingJsonldGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `@context`
      if (jsonObj.get("@context") != null && !jsonObj.get("@context").isJsonNull()) {
        AlertLogJsonldGetContext.validateJsonElement(jsonObj.get("@context"));
      }
      if ((jsonObj.get("@id") != null && !jsonObj.get("@id").isJsonNull()) && !jsonObj.get("@id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@id").toString()));
      }
      if ((jsonObj.get("@type") != null && !jsonObj.get("@type").isJsonNull()) && !jsonObj.get("@type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertLogs") != null && !jsonObj.get("alertLogs").isJsonNull() && !jsonObj.get("alertLogs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertLogs` to be an array in the JSON string but got `%s`", jsonObj.get("alertLogs").toString()));
      }
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if (!jsonObj.get("monitor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor").toString()));
      }
      if ((jsonObj.get("monitorStatusLog") != null && !jsonObj.get("monitorStatusLog").isJsonNull()) && !jsonObj.get("monitorStatusLog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitorStatusLog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitorStatusLog").toString()));
      }
      if ((jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) && !jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      if ((jsonObj.get("pingCustomCode") != null && !jsonObj.get("pingCustomCode").isJsonNull()) && !jsonObj.get("pingCustomCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingCustomCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingCustomCode").toString()));
      }
      if ((jsonObj.get("pingCustomPayload") != null && !jsonObj.get("pingCustomPayload").isJsonNull()) && !jsonObj.get("pingCustomPayload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingCustomPayload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingCustomPayload").toString()));
      }
      if ((jsonObj.get("pingMethodCode") != null && !jsonObj.get("pingMethodCode").isJsonNull()) && !jsonObj.get("pingMethodCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingMethodCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingMethodCode").toString()));
      }
      if ((jsonObj.get("resourceOwner") != null && !jsonObj.get("resourceOwner").isJsonNull()) && !jsonObj.get("resourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PingJsonldGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PingJsonldGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PingJsonldGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PingJsonldGet.class));

       return (TypeAdapter<T>) new TypeAdapter<PingJsonldGet>() {
           @Override
           public void write(JsonWriter out, PingJsonldGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PingJsonldGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PingJsonldGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PingJsonldGet
   * @throws IOException if the JSON string is invalid with respect to PingJsonldGet
   */
  public static PingJsonldGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PingJsonldGet.class);
  }

  /**
   * Convert an instance of PingJsonldGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

