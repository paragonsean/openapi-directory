/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The UserAccount resource contains basic information regarding the authenticated user account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserAccountGet {
  public static final String SERIALIZED_NAME_ACCOUNT_LEVEL_CODE = "accountLevelCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_LEVEL_CODE)
  private String accountLevelCode;

  public static final String SERIALIZED_NAME_CREDITS_OVERAGE_PERCENT_TRIP_SWITCH = "creditsOveragePercentTripSwitch";
  @SerializedName(SERIALIZED_NAME_CREDITS_OVERAGE_PERCENT_TRIP_SWITCH)
  private Integer creditsOveragePercentTripSwitch;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_DELINQUENT = "isDelinquent";
  @SerializedName(SERIALIZED_NAME_IS_DELINQUENT)
  private Boolean isDelinquent;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_TIMEZONE_CODE = "timezoneCode";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_CODE)
  private String timezoneCode;

  public UserAccountGet() {
  }

  public UserAccountGet accountLevelCode(String accountLevelCode) {
    this.accountLevelCode = accountLevelCode;
    return this;
  }

  /**
   * The account level of the user.
   * @return accountLevelCode
   */
  @javax.annotation.Nullable
  public String getAccountLevelCode() {
    return accountLevelCode;
  }

  public void setAccountLevelCode(String accountLevelCode) {
    this.accountLevelCode = accountLevelCode;
  }


  public UserAccountGet creditsOveragePercentTripSwitch(Integer creditsOveragePercentTripSwitch) {
    this.creditsOveragePercentTripSwitch = creditsOveragePercentTripSwitch;
    return this;
  }

  /**
   * If the credits consumed in the billing period are this percentage above the account plan&#39;s included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
   * minimum: 1
   * maximum: 1000
   * @return creditsOveragePercentTripSwitch
   */
  @javax.annotation.Nullable
  public Integer getCreditsOveragePercentTripSwitch() {
    return creditsOveragePercentTripSwitch;
  }

  public void setCreditsOveragePercentTripSwitch(Integer creditsOveragePercentTripSwitch) {
    this.creditsOveragePercentTripSwitch = creditsOveragePercentTripSwitch;
  }


  public UserAccountGet email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserAccountGet firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the user.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserAccountGet id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the resource instance.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public UserAccountGet isDelinquent(Boolean isDelinquent) {
    this.isDelinquent = isDelinquent;
    return this;
  }

  /**
   * Whether the user account has overdue payments.
   * @return isDelinquent
   */
  @javax.annotation.Nullable
  public Boolean getIsDelinquent() {
    return isDelinquent;
  }

  public void setIsDelinquent(Boolean isDelinquent) {
    this.isDelinquent = isDelinquent;
  }


  public UserAccountGet lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the user.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserAccountGet timezoneCode(String timezoneCode) {
    this.timezoneCode = timezoneCode;
    return this;
  }

  /**
   * The timezone of the user.
   * @return timezoneCode
   */
  @javax.annotation.Nullable
  public String getTimezoneCode() {
    return timezoneCode;
  }

  public void setTimezoneCode(String timezoneCode) {
    this.timezoneCode = timezoneCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccountGet userAccountGet = (UserAccountGet) o;
    return Objects.equals(this.accountLevelCode, userAccountGet.accountLevelCode) &&
        Objects.equals(this.creditsOveragePercentTripSwitch, userAccountGet.creditsOveragePercentTripSwitch) &&
        Objects.equals(this.email, userAccountGet.email) &&
        Objects.equals(this.firstName, userAccountGet.firstName) &&
        Objects.equals(this.id, userAccountGet.id) &&
        Objects.equals(this.isDelinquent, userAccountGet.isDelinquent) &&
        Objects.equals(this.lastName, userAccountGet.lastName) &&
        Objects.equals(this.timezoneCode, userAccountGet.timezoneCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountLevelCode, creditsOveragePercentTripSwitch, email, firstName, id, isDelinquent, lastName, timezoneCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAccountGet {\n");
    sb.append("    accountLevelCode: ").append(toIndentedString(accountLevelCode)).append("\n");
    sb.append("    creditsOveragePercentTripSwitch: ").append(toIndentedString(creditsOveragePercentTripSwitch)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDelinquent: ").append(toIndentedString(isDelinquent)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    timezoneCode: ").append(toIndentedString(timezoneCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountLevelCode");
    openapiFields.add("creditsOveragePercentTripSwitch");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("id");
    openapiFields.add("isDelinquent");
    openapiFields.add("lastName");
    openapiFields.add("timezoneCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserAccountGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserAccountGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAccountGet is not found in the empty JSON string", UserAccountGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserAccountGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserAccountGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountLevelCode") != null && !jsonObj.get("accountLevelCode").isJsonNull()) && !jsonObj.get("accountLevelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountLevelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountLevelCode").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("timezoneCode") != null && !jsonObj.get("timezoneCode").isJsonNull()) && !jsonObj.get("timezoneCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAccountGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAccountGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAccountGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAccountGet.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAccountGet>() {
           @Override
           public void write(JsonWriter out, UserAccountGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAccountGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserAccountGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserAccountGet
   * @throws IOException if the JSON string is invalid with respect to UserAccountGet
   */
  public static UserAccountGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAccountGet.class);
  }

  /**
   * Convert an instance of UserAccountGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

