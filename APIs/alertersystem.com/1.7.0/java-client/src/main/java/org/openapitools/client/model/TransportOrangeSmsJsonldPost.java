/*
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:03.392245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransportOrangeSmsJsonldPost {
  public static final String SERIALIZED_NAME_DATA_SEGMENT_CODE = "dataSegmentCode";
  @SerializedName(SERIALIZED_NAME_DATA_SEGMENT_CODE)
  private String dataSegmentCode;

  public static final String SERIALIZED_NAME_ORANGE_SMS_CLIENT_ID = "orangeSmsClientId";
  @SerializedName(SERIALIZED_NAME_ORANGE_SMS_CLIENT_ID)
  private String orangeSmsClientId;

  public static final String SERIALIZED_NAME_ORANGE_SMS_CLIENT_SECRET = "orangeSmsClientSecret";
  @SerializedName(SERIALIZED_NAME_ORANGE_SMS_CLIENT_SECRET)
  private String orangeSmsClientSecret;

  public static final String SERIALIZED_NAME_ORANGE_SMS_FROM = "orangeSmsFrom";
  @SerializedName(SERIALIZED_NAME_ORANGE_SMS_FROM)
  private String orangeSmsFrom;

  public static final String SERIALIZED_NAME_ORANGE_SMS_SENDER_NAME = "orangeSmsSenderName";
  @SerializedName(SERIALIZED_NAME_ORANGE_SMS_SENDER_NAME)
  private String orangeSmsSenderName;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_TRANSPORT_NAME = "transportName";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_NAME)
  private String transportName;

  public TransportOrangeSmsJsonldPost() {
  }

  public TransportOrangeSmsJsonldPost dataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
    return this;
  }

  /**
   * User-provided string on which to segment and filter data. Max 50 characters.
   * @return dataSegmentCode
   */
  @javax.annotation.Nullable
  public String getDataSegmentCode() {
    return dataSegmentCode;
  }

  public void setDataSegmentCode(String dataSegmentCode) {
    this.dataSegmentCode = dataSegmentCode;
  }


  public TransportOrangeSmsJsonldPost orangeSmsClientId(String orangeSmsClientId) {
    this.orangeSmsClientId = orangeSmsClientId;
    return this;
  }

  /**
   * The app client ID for the Orange SMS service.
   * @return orangeSmsClientId
   */
  @javax.annotation.Nullable
  public String getOrangeSmsClientId() {
    return orangeSmsClientId;
  }

  public void setOrangeSmsClientId(String orangeSmsClientId) {
    this.orangeSmsClientId = orangeSmsClientId;
  }


  public TransportOrangeSmsJsonldPost orangeSmsClientSecret(String orangeSmsClientSecret) {
    this.orangeSmsClientSecret = orangeSmsClientSecret;
    return this;
  }

  /**
   * The app client secret for the Orange SMS service. Stored in encrypted format.
   * @return orangeSmsClientSecret
   */
  @javax.annotation.Nullable
  public String getOrangeSmsClientSecret() {
    return orangeSmsClientSecret;
  }

  public void setOrangeSmsClientSecret(String orangeSmsClientSecret) {
    this.orangeSmsClientSecret = orangeSmsClientSecret;
  }


  public TransportOrangeSmsJsonldPost orangeSmsFrom(String orangeSmsFrom) {
    this.orangeSmsFrom = orangeSmsFrom;
    return this;
  }

  /**
   * The sender phone number for the Orange SMS service.
   * @return orangeSmsFrom
   */
  @javax.annotation.Nullable
  public String getOrangeSmsFrom() {
    return orangeSmsFrom;
  }

  public void setOrangeSmsFrom(String orangeSmsFrom) {
    this.orangeSmsFrom = orangeSmsFrom;
  }


  public TransportOrangeSmsJsonldPost orangeSmsSenderName(String orangeSmsSenderName) {
    this.orangeSmsSenderName = orangeSmsSenderName;
    return this;
  }

  /**
   * The sender name for the Orange SMS service.
   * @return orangeSmsSenderName
   */
  @javax.annotation.Nullable
  public String getOrangeSmsSenderName() {
    return orangeSmsSenderName;
  }

  public void setOrangeSmsSenderName(String orangeSmsSenderName) {
    this.orangeSmsSenderName = orangeSmsSenderName;
  }


  public TransportOrangeSmsJsonldPost partition(String partition) {
    this.partition = partition;
    return this;
  }

  /**
   * The partition that contains this resource instance. The resource cannot be moved to another partition.
   * @return partition
   */
  @javax.annotation.Nonnull
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }


  public TransportOrangeSmsJsonldPost transportName(String transportName) {
    this.transportName = transportName;
    return this;
  }

  /**
   * The name of the transport.
   * @return transportName
   */
  @javax.annotation.Nullable
  public String getTransportName() {
    return transportName;
  }

  public void setTransportName(String transportName) {
    this.transportName = transportName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportOrangeSmsJsonldPost transportOrangeSmsJsonldPost = (TransportOrangeSmsJsonldPost) o;
    return Objects.equals(this.dataSegmentCode, transportOrangeSmsJsonldPost.dataSegmentCode) &&
        Objects.equals(this.orangeSmsClientId, transportOrangeSmsJsonldPost.orangeSmsClientId) &&
        Objects.equals(this.orangeSmsClientSecret, transportOrangeSmsJsonldPost.orangeSmsClientSecret) &&
        Objects.equals(this.orangeSmsFrom, transportOrangeSmsJsonldPost.orangeSmsFrom) &&
        Objects.equals(this.orangeSmsSenderName, transportOrangeSmsJsonldPost.orangeSmsSenderName) &&
        Objects.equals(this.partition, transportOrangeSmsJsonldPost.partition) &&
        Objects.equals(this.transportName, transportOrangeSmsJsonldPost.transportName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSegmentCode, orangeSmsClientId, orangeSmsClientSecret, orangeSmsFrom, orangeSmsSenderName, partition, transportName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportOrangeSmsJsonldPost {\n");
    sb.append("    dataSegmentCode: ").append(toIndentedString(dataSegmentCode)).append("\n");
    sb.append("    orangeSmsClientId: ").append(toIndentedString(orangeSmsClientId)).append("\n");
    sb.append("    orangeSmsClientSecret: ").append(toIndentedString(orangeSmsClientSecret)).append("\n");
    sb.append("    orangeSmsFrom: ").append(toIndentedString(orangeSmsFrom)).append("\n");
    sb.append("    orangeSmsSenderName: ").append(toIndentedString(orangeSmsSenderName)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    transportName: ").append(toIndentedString(transportName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSegmentCode");
    openapiFields.add("orangeSmsClientId");
    openapiFields.add("orangeSmsClientSecret");
    openapiFields.add("orangeSmsFrom");
    openapiFields.add("orangeSmsSenderName");
    openapiFields.add("partition");
    openapiFields.add("transportName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orangeSmsClientId");
    openapiRequiredFields.add("orangeSmsClientSecret");
    openapiRequiredFields.add("orangeSmsFrom");
    openapiRequiredFields.add("orangeSmsSenderName");
    openapiRequiredFields.add("partition");
    openapiRequiredFields.add("transportName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransportOrangeSmsJsonldPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransportOrangeSmsJsonldPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransportOrangeSmsJsonldPost is not found in the empty JSON string", TransportOrangeSmsJsonldPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransportOrangeSmsJsonldPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransportOrangeSmsJsonldPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransportOrangeSmsJsonldPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSegmentCode") != null && !jsonObj.get("dataSegmentCode").isJsonNull()) && !jsonObj.get("dataSegmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSegmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSegmentCode").toString()));
      }
      if ((jsonObj.get("orangeSmsClientId") != null && !jsonObj.get("orangeSmsClientId").isJsonNull()) && !jsonObj.get("orangeSmsClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orangeSmsClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orangeSmsClientId").toString()));
      }
      if ((jsonObj.get("orangeSmsClientSecret") != null && !jsonObj.get("orangeSmsClientSecret").isJsonNull()) && !jsonObj.get("orangeSmsClientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orangeSmsClientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orangeSmsClientSecret").toString()));
      }
      if ((jsonObj.get("orangeSmsFrom") != null && !jsonObj.get("orangeSmsFrom").isJsonNull()) && !jsonObj.get("orangeSmsFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orangeSmsFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orangeSmsFrom").toString()));
      }
      if ((jsonObj.get("orangeSmsSenderName") != null && !jsonObj.get("orangeSmsSenderName").isJsonNull()) && !jsonObj.get("orangeSmsSenderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orangeSmsSenderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orangeSmsSenderName").toString()));
      }
      if (!jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      if ((jsonObj.get("transportName") != null && !jsonObj.get("transportName").isJsonNull()) && !jsonObj.get("transportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransportOrangeSmsJsonldPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransportOrangeSmsJsonldPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransportOrangeSmsJsonldPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransportOrangeSmsJsonldPost.class));

       return (TypeAdapter<T>) new TypeAdapter<TransportOrangeSmsJsonldPost>() {
           @Override
           public void write(JsonWriter out, TransportOrangeSmsJsonldPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransportOrangeSmsJsonldPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransportOrangeSmsJsonldPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransportOrangeSmsJsonldPost
   * @throws IOException if the JSON string is invalid with respect to TransportOrangeSmsJsonldPost
   */
  public static TransportOrangeSmsJsonldPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransportOrangeSmsJsonldPost.class);
  }

  /**
   * Convert an instance of TransportOrangeSmsJsonldPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

