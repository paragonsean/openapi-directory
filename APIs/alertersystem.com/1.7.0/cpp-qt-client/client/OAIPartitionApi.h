/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPartitionApi_H
#define OAI_OAIPartitionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_partition_get_collection_200_response.h"
#include "OAIPartition_get.h"
#include "OAIPartition_jsonld_get.h"
#include "OAIPartition_jsonld_post.h"
#include "OAIPartition_jsonld_put.h"
#include "OAIPartition_patch.h"
#include "OAIPartition_post.h"
#include "OAIPartition_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPartitionApi : public QObject {
    Q_OBJECT

public:
    OAIPartitionApi(const int timeOut = 0);
    ~OAIPartitionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiPartitionGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiPartitionIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiPartitionIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_partition_patch OAIPartition_patch [required]
    */
    virtual void apiPartitionIdPatch(const QString &id, const OAIPartition_patch &oai_partition_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_partition_put OAIPartition_put [required]
    */
    virtual void apiPartitionIdPut(const QString &id, const OAIPartition_put &oai_partition_put);

    /**
    * @param[in]  oai_partition_post OAIPartition_post [required]
    */
    virtual void apiPartitionPost(const OAIPartition_post &oai_partition_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPartitionGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiPartitionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPartitionIdGetCallback(OAIHttpRequestWorker *worker);
    void apiPartitionIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiPartitionIdPutCallback(OAIHttpRequestWorker *worker);
    void apiPartitionPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPartitionGetCollectionSignal(QList<OAIPartition_get> summary);
    void apiPartitionIdDeleteSignal();
    void apiPartitionIdGetSignal(OAIPartition_get summary);
    void apiPartitionIdPatchSignal(OAIPartition_get summary);
    void apiPartitionIdPutSignal(OAIPartition_get summary);
    void apiPartitionPostSignal(OAIPartition_get summary);


    void apiPartitionGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIPartition_get> summary);
    void apiPartitionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiPartitionIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPartition_get summary);
    void apiPartitionIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIPartition_get summary);
    void apiPartitionIdPutSignalFull(OAIHttpRequestWorker *worker, OAIPartition_get summary);
    void apiPartitionPostSignalFull(OAIHttpRequestWorker *worker, OAIPartition_get summary);

    Q_DECL_DEPRECATED_X("Use apiPartitionGetCollectionSignalError() instead")
    void apiPartitionGetCollectionSignalE(QList<OAIPartition_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionGetCollectionSignalError(QList<OAIPartition_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdDeleteSignalError() instead")
    void apiPartitionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdGetSignalError() instead")
    void apiPartitionIdGetSignalE(OAIPartition_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdGetSignalError(OAIPartition_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdPatchSignalError() instead")
    void apiPartitionIdPatchSignalE(OAIPartition_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdPatchSignalError(OAIPartition_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdPutSignalError() instead")
    void apiPartitionIdPutSignalE(OAIPartition_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdPutSignalError(OAIPartition_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionPostSignalError() instead")
    void apiPartitionPostSignalE(OAIPartition_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionPostSignalError(OAIPartition_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPartitionGetCollectionSignalErrorFull() instead")
    void apiPartitionGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdDeleteSignalErrorFull() instead")
    void apiPartitionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdGetSignalErrorFull() instead")
    void apiPartitionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdPatchSignalErrorFull() instead")
    void apiPartitionIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionIdPutSignalErrorFull() instead")
    void apiPartitionIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPartitionPostSignalErrorFull() instead")
    void apiPartitionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPartitionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
