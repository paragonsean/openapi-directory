/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportEmail_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportEmail_patch::OAITransportEmail_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportEmail_patch::OAITransportEmail_patch() {
    this->initializeModel();
}

OAITransportEmail_patch::~OAITransportEmail_patch() {}

void OAITransportEmail_patch::initializeModel() {

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_email_from_address_isSet = false;
    m_email_from_address_isValid = false;

    m_email_from_name_isSet = false;
    m_email_from_name_isValid = false;

    m_email_password_isSet = false;
    m_email_password_isValid = false;

    m_email_port_isSet = false;
    m_email_port_isValid = false;

    m_email_server_isSet = false;
    m_email_server_isValid = false;

    m_email_username_isSet = false;
    m_email_username_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;
}

void OAITransportEmail_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportEmail_patch::fromJsonObject(QJsonObject json) {

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_email_from_address_isValid = ::OpenAPI::fromJsonValue(m_email_from_address, json[QString("emailFromAddress")]);
    m_email_from_address_isSet = !json[QString("emailFromAddress")].isNull() && m_email_from_address_isValid;

    m_email_from_name_isValid = ::OpenAPI::fromJsonValue(m_email_from_name, json[QString("emailFromName")]);
    m_email_from_name_isSet = !json[QString("emailFromName")].isNull() && m_email_from_name_isValid;

    m_email_password_isValid = ::OpenAPI::fromJsonValue(m_email_password, json[QString("emailPassword")]);
    m_email_password_isSet = !json[QString("emailPassword")].isNull() && m_email_password_isValid;

    m_email_port_isValid = ::OpenAPI::fromJsonValue(m_email_port, json[QString("emailPort")]);
    m_email_port_isSet = !json[QString("emailPort")].isNull() && m_email_port_isValid;

    m_email_server_isValid = ::OpenAPI::fromJsonValue(m_email_server, json[QString("emailServer")]);
    m_email_server_isSet = !json[QString("emailServer")].isNull() && m_email_server_isValid;

    m_email_username_isValid = ::OpenAPI::fromJsonValue(m_email_username, json[QString("emailUsername")]);
    m_email_username_isSet = !json[QString("emailUsername")].isNull() && m_email_username_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;
}

QString OAITransportEmail_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportEmail_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_email_from_address_isSet) {
        obj.insert(QString("emailFromAddress"), ::OpenAPI::toJsonValue(m_email_from_address));
    }
    if (m_email_from_name_isSet) {
        obj.insert(QString("emailFromName"), ::OpenAPI::toJsonValue(m_email_from_name));
    }
    if (m_email_password_isSet) {
        obj.insert(QString("emailPassword"), ::OpenAPI::toJsonValue(m_email_password));
    }
    if (m_email_port_isSet) {
        obj.insert(QString("emailPort"), ::OpenAPI::toJsonValue(m_email_port));
    }
    if (m_email_server_isSet) {
        obj.insert(QString("emailServer"), ::OpenAPI::toJsonValue(m_email_server));
    }
    if (m_email_username_isSet) {
        obj.insert(QString("emailUsername"), ::OpenAPI::toJsonValue(m_email_username));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    return obj;
}

QString OAITransportEmail_patch::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportEmail_patch::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportEmail_patch::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportEmail_patch::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportEmail_patch::getEmailFromAddress() const {
    return m_email_from_address;
}
void OAITransportEmail_patch::setEmailFromAddress(const QString &email_from_address) {
    m_email_from_address = email_from_address;
    m_email_from_address_isSet = true;
}

bool OAITransportEmail_patch::is_email_from_address_Set() const{
    return m_email_from_address_isSet;
}

bool OAITransportEmail_patch::is_email_from_address_Valid() const{
    return m_email_from_address_isValid;
}

QString OAITransportEmail_patch::getEmailFromName() const {
    return m_email_from_name;
}
void OAITransportEmail_patch::setEmailFromName(const QString &email_from_name) {
    m_email_from_name = email_from_name;
    m_email_from_name_isSet = true;
}

bool OAITransportEmail_patch::is_email_from_name_Set() const{
    return m_email_from_name_isSet;
}

bool OAITransportEmail_patch::is_email_from_name_Valid() const{
    return m_email_from_name_isValid;
}

QString OAITransportEmail_patch::getEmailPassword() const {
    return m_email_password;
}
void OAITransportEmail_patch::setEmailPassword(const QString &email_password) {
    m_email_password = email_password;
    m_email_password_isSet = true;
}

bool OAITransportEmail_patch::is_email_password_Set() const{
    return m_email_password_isSet;
}

bool OAITransportEmail_patch::is_email_password_Valid() const{
    return m_email_password_isValid;
}

qint32 OAITransportEmail_patch::getEmailPort() const {
    return m_email_port;
}
void OAITransportEmail_patch::setEmailPort(const qint32 &email_port) {
    m_email_port = email_port;
    m_email_port_isSet = true;
}

bool OAITransportEmail_patch::is_email_port_Set() const{
    return m_email_port_isSet;
}

bool OAITransportEmail_patch::is_email_port_Valid() const{
    return m_email_port_isValid;
}

QString OAITransportEmail_patch::getEmailServer() const {
    return m_email_server;
}
void OAITransportEmail_patch::setEmailServer(const QString &email_server) {
    m_email_server = email_server;
    m_email_server_isSet = true;
}

bool OAITransportEmail_patch::is_email_server_Set() const{
    return m_email_server_isSet;
}

bool OAITransportEmail_patch::is_email_server_Valid() const{
    return m_email_server_isValid;
}

QString OAITransportEmail_patch::getEmailUsername() const {
    return m_email_username;
}
void OAITransportEmail_patch::setEmailUsername(const QString &email_username) {
    m_email_username = email_username;
    m_email_username_isSet = true;
}

bool OAITransportEmail_patch::is_email_username_Set() const{
    return m_email_username_isSet;
}

bool OAITransportEmail_patch::is_email_username_Valid() const{
    return m_email_username_isValid;
}

QString OAITransportEmail_patch::getTransportName() const {
    return m_transport_name;
}
void OAITransportEmail_patch::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportEmail_patch::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportEmail_patch::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

bool OAITransportEmail_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_from_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportEmail_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_from_address_isValid && m_email_from_name_isValid && m_email_password_isValid && m_email_port_isValid && m_email_server_isValid && m_email_username_isValid && m_transport_name_isValid && true;
}

} // namespace OpenAPI
