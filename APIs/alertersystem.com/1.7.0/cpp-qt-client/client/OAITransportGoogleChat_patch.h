/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransportGoogleChat_patch.h
 *
 * The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service.
 */

#ifndef OAITransportGoogleChat_patch_H
#define OAITransportGoogleChat_patch_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITransportGoogleChat_patch : public OAIObject {
public:
    OAITransportGoogleChat_patch();
    OAITransportGoogleChat_patch(QString json);
    ~OAITransportGoogleChat_patch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataSegmentCode() const;
    void setDataSegmentCode(const QString &data_segment_code);
    bool is_data_segment_code_Set() const;
    bool is_data_segment_code_Valid() const;

    QString getGoogleChatAccessKey() const;
    void setGoogleChatAccessKey(const QString &google_chat_access_key);
    bool is_google_chat_access_key_Set() const;
    bool is_google_chat_access_key_Valid() const;

    QString getGoogleChatAccessToken() const;
    void setGoogleChatAccessToken(const QString &google_chat_access_token);
    bool is_google_chat_access_token_Set() const;
    bool is_google_chat_access_token_Valid() const;

    QString getGoogleChatSpace() const;
    void setGoogleChatSpace(const QString &google_chat_space);
    bool is_google_chat_space_Set() const;
    bool is_google_chat_space_Valid() const;

    QString getGoogleChatThreadKey() const;
    void setGoogleChatThreadKey(const QString &google_chat_thread_key);
    bool is_google_chat_thread_key_Set() const;
    bool is_google_chat_thread_key_Valid() const;

    QString getTransportName() const;
    void setTransportName(const QString &transport_name);
    bool is_transport_name_Set() const;
    bool is_transport_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_segment_code;
    bool m_data_segment_code_isSet;
    bool m_data_segment_code_isValid;

    QString m_google_chat_access_key;
    bool m_google_chat_access_key_isSet;
    bool m_google_chat_access_key_isValid;

    QString m_google_chat_access_token;
    bool m_google_chat_access_token_isSet;
    bool m_google_chat_access_token_isValid;

    QString m_google_chat_space;
    bool m_google_chat_space_isSet;
    bool m_google_chat_space_isValid;

    QString m_google_chat_thread_key;
    bool m_google_chat_thread_key_isSet;
    bool m_google_chat_thread_key_isValid;

    QString m_transport_name;
    bool m_transport_name_isSet;
    bool m_transport_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransportGoogleChat_patch)

#endif // OAITransportGoogleChat_patch_H
