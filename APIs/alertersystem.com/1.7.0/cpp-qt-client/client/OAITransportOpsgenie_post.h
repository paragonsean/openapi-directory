/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransportOpsgenie_post.h
 *
 * The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service.
 */

#ifndef OAITransportOpsgenie_post_H
#define OAITransportOpsgenie_post_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITransportOpsgenie_post : public OAIObject {
public:
    OAITransportOpsgenie_post();
    OAITransportOpsgenie_post(QString json);
    ~OAITransportOpsgenie_post() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataSegmentCode() const;
    void setDataSegmentCode(const QString &data_segment_code);
    bool is_data_segment_code_Set() const;
    bool is_data_segment_code_Valid() const;

    QString getOpsgenieAlias() const;
    void setOpsgenieAlias(const QString &opsgenie_alias);
    bool is_opsgenie_alias_Set() const;
    bool is_opsgenie_alias_Valid() const;

    QString getOpsgenieApiKey() const;
    void setOpsgenieApiKey(const QString &opsgenie_api_key);
    bool is_opsgenie_api_key_Set() const;
    bool is_opsgenie_api_key_Valid() const;

    QString getOpsgenieEntity() const;
    void setOpsgenieEntity(const QString &opsgenie_entity);
    bool is_opsgenie_entity_Set() const;
    bool is_opsgenie_entity_Valid() const;

    QString getOpsgenieNote() const;
    void setOpsgenieNote(const QString &opsgenie_note);
    bool is_opsgenie_note_Set() const;
    bool is_opsgenie_note_Valid() const;

    QString getOpsgeniePriority() const;
    void setOpsgeniePriority(const QString &opsgenie_priority);
    bool is_opsgenie_priority_Set() const;
    bool is_opsgenie_priority_Valid() const;

    QString getOpsgenieUser() const;
    void setOpsgenieUser(const QString &opsgenie_user);
    bool is_opsgenie_user_Set() const;
    bool is_opsgenie_user_Valid() const;

    QString getPartition() const;
    void setPartition(const QString &partition);
    bool is_partition_Set() const;
    bool is_partition_Valid() const;

    QString getTransportName() const;
    void setTransportName(const QString &transport_name);
    bool is_transport_name_Set() const;
    bool is_transport_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_segment_code;
    bool m_data_segment_code_isSet;
    bool m_data_segment_code_isValid;

    QString m_opsgenie_alias;
    bool m_opsgenie_alias_isSet;
    bool m_opsgenie_alias_isValid;

    QString m_opsgenie_api_key;
    bool m_opsgenie_api_key_isSet;
    bool m_opsgenie_api_key_isValid;

    QString m_opsgenie_entity;
    bool m_opsgenie_entity_isSet;
    bool m_opsgenie_entity_isValid;

    QString m_opsgenie_note;
    bool m_opsgenie_note_isSet;
    bool m_opsgenie_note_isValid;

    QString m_opsgenie_priority;
    bool m_opsgenie_priority_isSet;
    bool m_opsgenie_priority_isValid;

    QString m_opsgenie_user;
    bool m_opsgenie_user_isSet;
    bool m_opsgenie_user_isValid;

    QString m_partition;
    bool m_partition_isSet;
    bool m_partition_isValid;

    QString m_transport_name;
    bool m_transport_name_isSet;
    bool m_transport_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransportOpsgenie_post)

#endif // OAITransportOpsgenie_post_H
