/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartition_jsonld_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartition_jsonld_get::OAIPartition_jsonld_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartition_jsonld_get::OAIPartition_jsonld_get() {
    this->initializeModel();
}

OAIPartition_jsonld_get::~OAIPartition_jsonld_get() {}

void OAIPartition_jsonld_get::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_alert_services_isSet = false;
    m_alert_services_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_monitors_isSet = false;
    m_monitors_isValid = false;

    m_partition_name_isSet = false;
    m_partition_name_isValid = false;

    m_partition_notes_isSet = false;
    m_partition_notes_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_team_invitations_isSet = false;
    m_team_invitations_isValid = false;

    m_team_members_isSet = false;
    m_team_members_isValid = false;
}

void OAIPartition_jsonld_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartition_jsonld_get::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_alert_services_isValid = ::OpenAPI::fromJsonValue(m_alert_services, json[QString("alertServices")]);
    m_alert_services_isSet = !json[QString("alertServices")].isNull() && m_alert_services_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_monitors_isValid = ::OpenAPI::fromJsonValue(m_monitors, json[QString("monitors")]);
    m_monitors_isSet = !json[QString("monitors")].isNull() && m_monitors_isValid;

    m_partition_name_isValid = ::OpenAPI::fromJsonValue(m_partition_name, json[QString("partitionName")]);
    m_partition_name_isSet = !json[QString("partitionName")].isNull() && m_partition_name_isValid;

    m_partition_notes_isValid = ::OpenAPI::fromJsonValue(m_partition_notes, json[QString("partitionNotes")]);
    m_partition_notes_isSet = !json[QString("partitionNotes")].isNull() && m_partition_notes_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_team_invitations_isValid = ::OpenAPI::fromJsonValue(m_team_invitations, json[QString("teamInvitations")]);
    m_team_invitations_isSet = !json[QString("teamInvitations")].isNull() && m_team_invitations_isValid;

    m_team_members_isValid = ::OpenAPI::fromJsonValue(m_team_members, json[QString("teamMembers")]);
    m_team_members_isSet = !json[QString("teamMembers")].isNull() && m_team_members_isValid;
}

QString OAIPartition_jsonld_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartition_jsonld_get::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_alert_services.size() > 0) {
        obj.insert(QString("alertServices"), ::OpenAPI::toJsonValue(m_alert_services));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_monitors.size() > 0) {
        obj.insert(QString("monitors"), ::OpenAPI::toJsonValue(m_monitors));
    }
    if (m_partition_name_isSet) {
        obj.insert(QString("partitionName"), ::OpenAPI::toJsonValue(m_partition_name));
    }
    if (m_partition_notes_isSet) {
        obj.insert(QString("partitionNotes"), ::OpenAPI::toJsonValue(m_partition_notes));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_team_invitations.size() > 0) {
        obj.insert(QString("teamInvitations"), ::OpenAPI::toJsonValue(m_team_invitations));
    }
    if (m_team_members.size() > 0) {
        obj.insert(QString("teamMembers"), ::OpenAPI::toJsonValue(m_team_members));
    }
    return obj;
}

OAIAlertLog_jsonld_get__context OAIPartition_jsonld_get::getContext() const {
    return m_context;
}
void OAIPartition_jsonld_get::setContext(const OAIAlertLog_jsonld_get__context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIPartition_jsonld_get::is_context_Set() const{
    return m_context_isSet;
}

bool OAIPartition_jsonld_get::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIPartition_jsonld_get::getId() const {
    return m_id;
}
void OAIPartition_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPartition_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPartition_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPartition_jsonld_get::getType() const {
    return m_type;
}
void OAIPartition_jsonld_get::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPartition_jsonld_get::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPartition_jsonld_get::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIPartition_jsonld_get::getAlertServices() const {
    return m_alert_services;
}
void OAIPartition_jsonld_get::setAlertServices(const QList<QString> &alert_services) {
    m_alert_services = alert_services;
    m_alert_services_isSet = true;
}

bool OAIPartition_jsonld_get::is_alert_services_Set() const{
    return m_alert_services_isSet;
}

bool OAIPartition_jsonld_get::is_alert_services_Valid() const{
    return m_alert_services_isValid;
}

QDateTime OAIPartition_jsonld_get::getCreatedAt() const {
    return m_created_at;
}
void OAIPartition_jsonld_get::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPartition_jsonld_get::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPartition_jsonld_get::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPartition_jsonld_get::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAIPartition_jsonld_get::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAIPartition_jsonld_get::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAIPartition_jsonld_get::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAIPartition_jsonld_get::getId() const {
    return m_id;
}
void OAIPartition_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPartition_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPartition_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIPartition_jsonld_get::getMonitors() const {
    return m_monitors;
}
void OAIPartition_jsonld_get::setMonitors(const QList<QString> &monitors) {
    m_monitors = monitors;
    m_monitors_isSet = true;
}

bool OAIPartition_jsonld_get::is_monitors_Set() const{
    return m_monitors_isSet;
}

bool OAIPartition_jsonld_get::is_monitors_Valid() const{
    return m_monitors_isValid;
}

QString OAIPartition_jsonld_get::getPartitionName() const {
    return m_partition_name;
}
void OAIPartition_jsonld_get::setPartitionName(const QString &partition_name) {
    m_partition_name = partition_name;
    m_partition_name_isSet = true;
}

bool OAIPartition_jsonld_get::is_partition_name_Set() const{
    return m_partition_name_isSet;
}

bool OAIPartition_jsonld_get::is_partition_name_Valid() const{
    return m_partition_name_isValid;
}

QString OAIPartition_jsonld_get::getPartitionNotes() const {
    return m_partition_notes;
}
void OAIPartition_jsonld_get::setPartitionNotes(const QString &partition_notes) {
    m_partition_notes = partition_notes;
    m_partition_notes_isSet = true;
}

bool OAIPartition_jsonld_get::is_partition_notes_Set() const{
    return m_partition_notes_isSet;
}

bool OAIPartition_jsonld_get::is_partition_notes_Valid() const{
    return m_partition_notes_isValid;
}

QString OAIPartition_jsonld_get::getResourceOwner() const {
    return m_resource_owner;
}
void OAIPartition_jsonld_get::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIPartition_jsonld_get::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIPartition_jsonld_get::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QList<QString> OAIPartition_jsonld_get::getTeamInvitations() const {
    return m_team_invitations;
}
void OAIPartition_jsonld_get::setTeamInvitations(const QList<QString> &team_invitations) {
    m_team_invitations = team_invitations;
    m_team_invitations_isSet = true;
}

bool OAIPartition_jsonld_get::is_team_invitations_Set() const{
    return m_team_invitations_isSet;
}

bool OAIPartition_jsonld_get::is_team_invitations_Valid() const{
    return m_team_invitations_isValid;
}

QList<QString> OAIPartition_jsonld_get::getTeamMembers() const {
    return m_team_members;
}
void OAIPartition_jsonld_get::setTeamMembers(const QList<QString> &team_members) {
    m_team_members = team_members;
    m_team_members_isSet = true;
}

bool OAIPartition_jsonld_get::is_team_members_Set() const{
    return m_team_members_isSet;
}

bool OAIPartition_jsonld_get::is_team_members_Valid() const{
    return m_team_members_isValid;
}

bool OAIPartition_jsonld_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_invitations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartition_jsonld_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partition_name_isValid && true;
}

} // namespace OpenAPI
