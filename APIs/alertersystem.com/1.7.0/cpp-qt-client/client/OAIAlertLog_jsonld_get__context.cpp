/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertLog_jsonld_get__context.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertLog_jsonld_get__context::OAIAlertLog_jsonld_get__context(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertLog_jsonld_get__context::OAIAlertLog_jsonld_get__context() {
    this->initializeModel();
}

OAIAlertLog_jsonld_get__context::~OAIAlertLog_jsonld_get__context() {}

void OAIAlertLog_jsonld_get__context::initializeModel() {

    m_vocab_isSet = false;
    m_vocab_isValid = false;

    m_hydra_isSet = false;
    m_hydra_isValid = false;
}

void OAIAlertLog_jsonld_get__context::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertLog_jsonld_get__context::fromJsonObject(QJsonObject json) {

    m_vocab_isValid = ::OpenAPI::fromJsonValue(m_vocab, json[QString("@vocab")]);
    m_vocab_isSet = !json[QString("@vocab")].isNull() && m_vocab_isValid;

    m_hydra_isValid = ::OpenAPI::fromJsonValue(m_hydra, json[QString("hydra")]);
    m_hydra_isSet = !json[QString("hydra")].isNull() && m_hydra_isValid;
}

QString OAIAlertLog_jsonld_get__context::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertLog_jsonld_get__context::asJsonObject() const {
    QJsonObject obj;
    if (m_vocab_isSet) {
        obj.insert(QString("@vocab"), ::OpenAPI::toJsonValue(m_vocab));
    }
    if (m_hydra_isSet) {
        obj.insert(QString("hydra"), ::OpenAPI::toJsonValue(m_hydra));
    }
    return obj;
}

QString OAIAlertLog_jsonld_get__context::getVocab() const {
    return m_vocab;
}
void OAIAlertLog_jsonld_get__context::setVocab(const QString &vocab) {
    m_vocab = vocab;
    m_vocab_isSet = true;
}

bool OAIAlertLog_jsonld_get__context::is_vocab_Set() const{
    return m_vocab_isSet;
}

bool OAIAlertLog_jsonld_get__context::is_vocab_Valid() const{
    return m_vocab_isValid;
}

QString OAIAlertLog_jsonld_get__context::getHydra() const {
    return m_hydra;
}
void OAIAlertLog_jsonld_get__context::setHydra(const QString &hydra) {
    m_hydra = hydra;
    m_hydra_isSet = true;
}

bool OAIAlertLog_jsonld_get__context::is_hydra_Set() const{
    return m_hydra_isSet;
}

bool OAIAlertLog_jsonld_get__context::is_hydra_Valid() const{
    return m_hydra_isValid;
}

bool OAIAlertLog_jsonld_get__context::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vocab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hydra_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertLog_jsonld_get__context::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vocab_isValid && m_hydra_isValid && true;
}

} // namespace OpenAPI
