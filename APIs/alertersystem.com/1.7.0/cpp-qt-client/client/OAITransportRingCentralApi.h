/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportRingCentralApi_H
#define OAI_OAITransportRingCentralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_ring_central_get_collection_200_response.h"
#include "OAITransportRingCentral_get.h"
#include "OAITransportRingCentral_jsonld_get.h"
#include "OAITransportRingCentral_jsonld_post.h"
#include "OAITransportRingCentral_jsonld_put.h"
#include "OAITransportRingCentral_patch.h"
#include "OAITransportRingCentral_post.h"
#include "OAITransportRingCentral_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportRingCentralApi : public QObject {
    Q_OBJECT

public:
    OAITransportRingCentralApi(const int timeOut = 0);
    ~OAITransportRingCentralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportRingCentralGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportRingCentralIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportRingCentralIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_ring_central_patch OAITransportRingCentral_patch [required]
    */
    virtual void apiTransportRingCentralIdPatch(const QString &id, const OAITransportRingCentral_patch &oai_transport_ring_central_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_ring_central_put OAITransportRingCentral_put [required]
    */
    virtual void apiTransportRingCentralIdPut(const QString &id, const OAITransportRingCentral_put &oai_transport_ring_central_put);

    /**
    * @param[in]  oai_transport_ring_central_post OAITransportRingCentral_post [required]
    */
    virtual void apiTransportRingCentralPost(const OAITransportRingCentral_post &oai_transport_ring_central_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportRingCentralGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportRingCentralIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportRingCentralIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportRingCentralIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportRingCentralIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportRingCentralPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportRingCentralGetCollectionSignal(QList<OAITransportRingCentral_get> summary);
    void apiTransportRingCentralIdDeleteSignal();
    void apiTransportRingCentralIdGetSignal(OAITransportRingCentral_get summary);
    void apiTransportRingCentralIdPatchSignal(OAITransportRingCentral_get summary);
    void apiTransportRingCentralIdPutSignal(OAITransportRingCentral_get summary);
    void apiTransportRingCentralPostSignal(OAITransportRingCentral_get summary);


    void apiTransportRingCentralGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportRingCentral_get> summary);
    void apiTransportRingCentralIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportRingCentralIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportRingCentral_get summary);
    void apiTransportRingCentralIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportRingCentral_get summary);
    void apiTransportRingCentralIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportRingCentral_get summary);
    void apiTransportRingCentralPostSignalFull(OAIHttpRequestWorker *worker, OAITransportRingCentral_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralGetCollectionSignalError() instead")
    void apiTransportRingCentralGetCollectionSignalE(QList<OAITransportRingCentral_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralGetCollectionSignalError(QList<OAITransportRingCentral_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdDeleteSignalError() instead")
    void apiTransportRingCentralIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdGetSignalError() instead")
    void apiTransportRingCentralIdGetSignalE(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdGetSignalError(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdPatchSignalError() instead")
    void apiTransportRingCentralIdPatchSignalE(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdPatchSignalError(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdPutSignalError() instead")
    void apiTransportRingCentralIdPutSignalE(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdPutSignalError(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralPostSignalError() instead")
    void apiTransportRingCentralPostSignalE(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralPostSignalError(OAITransportRingCentral_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralGetCollectionSignalErrorFull() instead")
    void apiTransportRingCentralGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdDeleteSignalErrorFull() instead")
    void apiTransportRingCentralIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdGetSignalErrorFull() instead")
    void apiTransportRingCentralIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdPatchSignalErrorFull() instead")
    void apiTransportRingCentralIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralIdPutSignalErrorFull() instead")
    void apiTransportRingCentralIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportRingCentralPostSignalErrorFull() instead")
    void apiTransportRingCentralPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportRingCentralPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
