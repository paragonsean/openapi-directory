/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMonitor_get.h
 *
 * The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts.
 */

#ifndef OAIMonitor_get_H
#define OAIMonitor_get_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMonitor_get : public OAIObject {
public:
    OAIMonitor_get();
    OAIMonitor_get(QString json);
    ~OAIMonitor_get() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlertPayloadExtended() const;
    void setAlertPayloadExtended(const QString &alert_payload_extended);
    bool is_alert_payload_extended_Set() const;
    bool is_alert_payload_extended_Valid() const;

    QString getAlertPayloadShort() const;
    void setAlertPayloadShort(const QString &alert_payload_short);
    bool is_alert_payload_short_Set() const;
    bool is_alert_payload_short_Valid() const;

    QList<QString> getAlertServices() const;
    void setAlertServices(const QList<QString> &alert_services);
    bool is_alert_services_Set() const;
    bool is_alert_services_Valid() const;

    bool isAllowUnauthenticatedPings() const;
    void setAllowUnauthenticatedPings(const bool &allow_unauthenticated_pings);
    bool is_allow_unauthenticated_pings_Set() const;
    bool is_allow_unauthenticated_pings_Valid() const;

    bool isContentCheckMustNotExist() const;
    void setContentCheckMustNotExist(const bool &content_check_must_not_exist);
    bool is_content_check_must_not_exist_Set() const;
    bool is_content_check_must_not_exist_Valid() const;

    QString getContentCheckText() const;
    void setContentCheckText(const QString &content_check_text);
    bool is_content_check_text_Set() const;
    bool is_content_check_text_Valid() const;

    QString getContentCheckUrl() const;
    void setContentCheckUrl(const QString &content_check_url);
    bool is_content_check_url_Set() const;
    bool is_content_check_url_Valid() const;

    QString getContentCheckXpathFilter() const;
    void setContentCheckXpathFilter(const QString &content_check_xpath_filter);
    bool is_content_check_xpath_filter_Set() const;
    bool is_content_check_xpath_filter_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDataSegmentCode() const;
    void setDataSegmentCode(const QString &data_segment_code);
    bool is_data_segment_code_Set() const;
    bool is_data_segment_code_Valid() const;

    qint32 getGraceSeconds() const;
    void setGraceSeconds(const qint32 &grace_seconds);
    bool is_grace_seconds_Set() const;
    bool is_grace_seconds_Valid() const;

    QString getHumanizedInterval() const;
    void setHumanizedInterval(const QString &humanized_interval);
    bool is_humanized_interval_Set() const;
    bool is_humanized_interval_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInternalMonitorName() const;
    void setInternalMonitorName(const QString &internal_monitor_name);
    bool is_internal_monitor_name_Set() const;
    bool is_internal_monitor_name_Valid() const;

    qint32 getIntervalDays() const;
    void setIntervalDays(const qint32 &interval_days);
    bool is_interval_days_Set() const;
    bool is_interval_days_Valid() const;

    qint32 getIntervalHours() const;
    void setIntervalHours(const qint32 &interval_hours);
    bool is_interval_hours_Set() const;
    bool is_interval_hours_Valid() const;

    qint32 getIntervalMinutes() const;
    void setIntervalMinutes(const qint32 &interval_minutes);
    bool is_interval_minutes_Set() const;
    bool is_interval_minutes_Valid() const;

    qint32 getIntervalMonths() const;
    void setIntervalMonths(const qint32 &interval_months);
    bool is_interval_months_Set() const;
    bool is_interval_months_Valid() const;

    qint32 getIntervalSeconds() const;
    void setIntervalSeconds(const qint32 &interval_seconds);
    bool is_interval_seconds_Set() const;
    bool is_interval_seconds_Valid() const;

    qint32 getIntervalYears() const;
    void setIntervalYears(const qint32 &interval_years);
    bool is_interval_years_Set() const;
    bool is_interval_years_Valid() const;

    bool isIsMonitorPaused() const;
    void setIsMonitorPaused(const bool &is_monitor_paused);
    bool is_is_monitor_paused_Set() const;
    bool is_is_monitor_paused_Valid() const;

    QDateTime getLastPingAt() const;
    void setLastPingAt(const QDateTime &last_ping_at);
    bool is_last_ping_at_Set() const;
    bool is_last_ping_at_Valid() const;

    QString getMonitorName() const;
    void setMonitorName(const QString &monitor_name);
    bool is_monitor_name_Set() const;
    bool is_monitor_name_Valid() const;

    QString getMonitorNotes() const;
    void setMonitorNotes(const QString &monitor_notes);
    bool is_monitor_notes_Set() const;
    bool is_monitor_notes_Valid() const;

    QString getMonitorStatusCode() const;
    void setMonitorStatusCode(const QString &monitor_status_code);
    bool is_monitor_status_code_Set() const;
    bool is_monitor_status_code_Valid() const;

    QString getMonitorTypeCode() const;
    void setMonitorTypeCode(const QString &monitor_type_code);
    bool is_monitor_type_code_Set() const;
    bool is_monitor_type_code_Valid() const;

    QDateTime getNextPingAt() const;
    void setNextPingAt(const QDateTime &next_ping_at);
    bool is_next_ping_at_Set() const;
    bool is_next_ping_at_Valid() const;

    QString getPartition() const;
    void setPartition(const QString &partition);
    bool is_partition_Set() const;
    bool is_partition_Valid() const;

    QString getPingSecret() const;
    void setPingSecret(const QString &ping_secret);
    bool is_ping_secret_Set() const;
    bool is_ping_secret_Valid() const;

    QString getPublicDescription() const;
    void setPublicDescription(const QString &public_description);
    bool is_public_description_Set() const;
    bool is_public_description_Valid() const;

    QString getResourceOwner() const;
    void setResourceOwner(const QString &resource_owner);
    bool is_resource_owner_Set() const;
    bool is_resource_owner_Valid() const;

    QDateTime getStartMonitorAt() const;
    void setStartMonitorAt(const QDateTime &start_monitor_at);
    bool is_start_monitor_at_Set() const;
    bool is_start_monitor_at_Valid() const;

    QDateTime getStartMonitorAtUtc() const;
    void setStartMonitorAtUtc(const QDateTime &start_monitor_at_utc);
    bool is_start_monitor_at_utc_Set() const;
    bool is_start_monitor_at_utc_Valid() const;

    QList<QString> getSystemMessages() const;
    void setSystemMessages(const QList<QString> &system_messages);
    bool is_system_messages_Set() const;
    bool is_system_messages_Valid() const;

    QString getTimezoneCode() const;
    void setTimezoneCode(const QString &timezone_code);
    bool is_timezone_code_Set() const;
    bool is_timezone_code_Valid() const;

    qint32 getWebResponseSecondsLimit() const;
    void setWebResponseSecondsLimit(const qint32 &web_response_seconds_limit);
    bool is_web_response_seconds_limit_Set() const;
    bool is_web_response_seconds_limit_Valid() const;

    QString getWebResponseUrl() const;
    void setWebResponseUrl(const QString &web_response_url);
    bool is_web_response_url_Set() const;
    bool is_web_response_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alert_payload_extended;
    bool m_alert_payload_extended_isSet;
    bool m_alert_payload_extended_isValid;

    QString m_alert_payload_short;
    bool m_alert_payload_short_isSet;
    bool m_alert_payload_short_isValid;

    QList<QString> m_alert_services;
    bool m_alert_services_isSet;
    bool m_alert_services_isValid;

    bool m_allow_unauthenticated_pings;
    bool m_allow_unauthenticated_pings_isSet;
    bool m_allow_unauthenticated_pings_isValid;

    bool m_content_check_must_not_exist;
    bool m_content_check_must_not_exist_isSet;
    bool m_content_check_must_not_exist_isValid;

    QString m_content_check_text;
    bool m_content_check_text_isSet;
    bool m_content_check_text_isValid;

    QString m_content_check_url;
    bool m_content_check_url_isSet;
    bool m_content_check_url_isValid;

    QString m_content_check_xpath_filter;
    bool m_content_check_xpath_filter_isSet;
    bool m_content_check_xpath_filter_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_data_segment_code;
    bool m_data_segment_code_isSet;
    bool m_data_segment_code_isValid;

    qint32 m_grace_seconds;
    bool m_grace_seconds_isSet;
    bool m_grace_seconds_isValid;

    QString m_humanized_interval;
    bool m_humanized_interval_isSet;
    bool m_humanized_interval_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_internal_monitor_name;
    bool m_internal_monitor_name_isSet;
    bool m_internal_monitor_name_isValid;

    qint32 m_interval_days;
    bool m_interval_days_isSet;
    bool m_interval_days_isValid;

    qint32 m_interval_hours;
    bool m_interval_hours_isSet;
    bool m_interval_hours_isValid;

    qint32 m_interval_minutes;
    bool m_interval_minutes_isSet;
    bool m_interval_minutes_isValid;

    qint32 m_interval_months;
    bool m_interval_months_isSet;
    bool m_interval_months_isValid;

    qint32 m_interval_seconds;
    bool m_interval_seconds_isSet;
    bool m_interval_seconds_isValid;

    qint32 m_interval_years;
    bool m_interval_years_isSet;
    bool m_interval_years_isValid;

    bool m_is_monitor_paused;
    bool m_is_monitor_paused_isSet;
    bool m_is_monitor_paused_isValid;

    QDateTime m_last_ping_at;
    bool m_last_ping_at_isSet;
    bool m_last_ping_at_isValid;

    QString m_monitor_name;
    bool m_monitor_name_isSet;
    bool m_monitor_name_isValid;

    QString m_monitor_notes;
    bool m_monitor_notes_isSet;
    bool m_monitor_notes_isValid;

    QString m_monitor_status_code;
    bool m_monitor_status_code_isSet;
    bool m_monitor_status_code_isValid;

    QString m_monitor_type_code;
    bool m_monitor_type_code_isSet;
    bool m_monitor_type_code_isValid;

    QDateTime m_next_ping_at;
    bool m_next_ping_at_isSet;
    bool m_next_ping_at_isValid;

    QString m_partition;
    bool m_partition_isSet;
    bool m_partition_isValid;

    QString m_ping_secret;
    bool m_ping_secret_isSet;
    bool m_ping_secret_isValid;

    QString m_public_description;
    bool m_public_description_isSet;
    bool m_public_description_isValid;

    QString m_resource_owner;
    bool m_resource_owner_isSet;
    bool m_resource_owner_isValid;

    QDateTime m_start_monitor_at;
    bool m_start_monitor_at_isSet;
    bool m_start_monitor_at_isValid;

    QDateTime m_start_monitor_at_utc;
    bool m_start_monitor_at_utc_isSet;
    bool m_start_monitor_at_utc_isValid;

    QList<QString> m_system_messages;
    bool m_system_messages_isSet;
    bool m_system_messages_isValid;

    QString m_timezone_code;
    bool m_timezone_code_isSet;
    bool m_timezone_code_isValid;

    qint32 m_web_response_seconds_limit;
    bool m_web_response_seconds_limit_isSet;
    bool m_web_response_seconds_limit_isValid;

    QString m_web_response_url;
    bool m_web_response_url_isSet;
    bool m_web_response_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMonitor_get)

#endif // OAIMonitor_get_H
