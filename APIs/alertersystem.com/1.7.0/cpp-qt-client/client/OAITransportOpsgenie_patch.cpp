/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportOpsgenie_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportOpsgenie_patch::OAITransportOpsgenie_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportOpsgenie_patch::OAITransportOpsgenie_patch() {
    this->initializeModel();
}

OAITransportOpsgenie_patch::~OAITransportOpsgenie_patch() {}

void OAITransportOpsgenie_patch::initializeModel() {

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_opsgenie_alias_isSet = false;
    m_opsgenie_alias_isValid = false;

    m_opsgenie_api_key_isSet = false;
    m_opsgenie_api_key_isValid = false;

    m_opsgenie_entity_isSet = false;
    m_opsgenie_entity_isValid = false;

    m_opsgenie_note_isSet = false;
    m_opsgenie_note_isValid = false;

    m_opsgenie_priority_isSet = false;
    m_opsgenie_priority_isValid = false;

    m_opsgenie_user_isSet = false;
    m_opsgenie_user_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;
}

void OAITransportOpsgenie_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportOpsgenie_patch::fromJsonObject(QJsonObject json) {

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_opsgenie_alias_isValid = ::OpenAPI::fromJsonValue(m_opsgenie_alias, json[QString("opsgenieAlias")]);
    m_opsgenie_alias_isSet = !json[QString("opsgenieAlias")].isNull() && m_opsgenie_alias_isValid;

    m_opsgenie_api_key_isValid = ::OpenAPI::fromJsonValue(m_opsgenie_api_key, json[QString("opsgenieApiKey")]);
    m_opsgenie_api_key_isSet = !json[QString("opsgenieApiKey")].isNull() && m_opsgenie_api_key_isValid;

    m_opsgenie_entity_isValid = ::OpenAPI::fromJsonValue(m_opsgenie_entity, json[QString("opsgenieEntity")]);
    m_opsgenie_entity_isSet = !json[QString("opsgenieEntity")].isNull() && m_opsgenie_entity_isValid;

    m_opsgenie_note_isValid = ::OpenAPI::fromJsonValue(m_opsgenie_note, json[QString("opsgenieNote")]);
    m_opsgenie_note_isSet = !json[QString("opsgenieNote")].isNull() && m_opsgenie_note_isValid;

    m_opsgenie_priority_isValid = ::OpenAPI::fromJsonValue(m_opsgenie_priority, json[QString("opsgeniePriority")]);
    m_opsgenie_priority_isSet = !json[QString("opsgeniePriority")].isNull() && m_opsgenie_priority_isValid;

    m_opsgenie_user_isValid = ::OpenAPI::fromJsonValue(m_opsgenie_user, json[QString("opsgenieUser")]);
    m_opsgenie_user_isSet = !json[QString("opsgenieUser")].isNull() && m_opsgenie_user_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;
}

QString OAITransportOpsgenie_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportOpsgenie_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_opsgenie_alias_isSet) {
        obj.insert(QString("opsgenieAlias"), ::OpenAPI::toJsonValue(m_opsgenie_alias));
    }
    if (m_opsgenie_api_key_isSet) {
        obj.insert(QString("opsgenieApiKey"), ::OpenAPI::toJsonValue(m_opsgenie_api_key));
    }
    if (m_opsgenie_entity_isSet) {
        obj.insert(QString("opsgenieEntity"), ::OpenAPI::toJsonValue(m_opsgenie_entity));
    }
    if (m_opsgenie_note_isSet) {
        obj.insert(QString("opsgenieNote"), ::OpenAPI::toJsonValue(m_opsgenie_note));
    }
    if (m_opsgenie_priority_isSet) {
        obj.insert(QString("opsgeniePriority"), ::OpenAPI::toJsonValue(m_opsgenie_priority));
    }
    if (m_opsgenie_user_isSet) {
        obj.insert(QString("opsgenieUser"), ::OpenAPI::toJsonValue(m_opsgenie_user));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    return obj;
}

QString OAITransportOpsgenie_patch::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportOpsgenie_patch::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportOpsgenie_patch::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportOpsgenie_patch::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportOpsgenie_patch::getOpsgenieAlias() const {
    return m_opsgenie_alias;
}
void OAITransportOpsgenie_patch::setOpsgenieAlias(const QString &opsgenie_alias) {
    m_opsgenie_alias = opsgenie_alias;
    m_opsgenie_alias_isSet = true;
}

bool OAITransportOpsgenie_patch::is_opsgenie_alias_Set() const{
    return m_opsgenie_alias_isSet;
}

bool OAITransportOpsgenie_patch::is_opsgenie_alias_Valid() const{
    return m_opsgenie_alias_isValid;
}

QString OAITransportOpsgenie_patch::getOpsgenieApiKey() const {
    return m_opsgenie_api_key;
}
void OAITransportOpsgenie_patch::setOpsgenieApiKey(const QString &opsgenie_api_key) {
    m_opsgenie_api_key = opsgenie_api_key;
    m_opsgenie_api_key_isSet = true;
}

bool OAITransportOpsgenie_patch::is_opsgenie_api_key_Set() const{
    return m_opsgenie_api_key_isSet;
}

bool OAITransportOpsgenie_patch::is_opsgenie_api_key_Valid() const{
    return m_opsgenie_api_key_isValid;
}

QString OAITransportOpsgenie_patch::getOpsgenieEntity() const {
    return m_opsgenie_entity;
}
void OAITransportOpsgenie_patch::setOpsgenieEntity(const QString &opsgenie_entity) {
    m_opsgenie_entity = opsgenie_entity;
    m_opsgenie_entity_isSet = true;
}

bool OAITransportOpsgenie_patch::is_opsgenie_entity_Set() const{
    return m_opsgenie_entity_isSet;
}

bool OAITransportOpsgenie_patch::is_opsgenie_entity_Valid() const{
    return m_opsgenie_entity_isValid;
}

QString OAITransportOpsgenie_patch::getOpsgenieNote() const {
    return m_opsgenie_note;
}
void OAITransportOpsgenie_patch::setOpsgenieNote(const QString &opsgenie_note) {
    m_opsgenie_note = opsgenie_note;
    m_opsgenie_note_isSet = true;
}

bool OAITransportOpsgenie_patch::is_opsgenie_note_Set() const{
    return m_opsgenie_note_isSet;
}

bool OAITransportOpsgenie_patch::is_opsgenie_note_Valid() const{
    return m_opsgenie_note_isValid;
}

QString OAITransportOpsgenie_patch::getOpsgeniePriority() const {
    return m_opsgenie_priority;
}
void OAITransportOpsgenie_patch::setOpsgeniePriority(const QString &opsgenie_priority) {
    m_opsgenie_priority = opsgenie_priority;
    m_opsgenie_priority_isSet = true;
}

bool OAITransportOpsgenie_patch::is_opsgenie_priority_Set() const{
    return m_opsgenie_priority_isSet;
}

bool OAITransportOpsgenie_patch::is_opsgenie_priority_Valid() const{
    return m_opsgenie_priority_isValid;
}

QString OAITransportOpsgenie_patch::getOpsgenieUser() const {
    return m_opsgenie_user;
}
void OAITransportOpsgenie_patch::setOpsgenieUser(const QString &opsgenie_user) {
    m_opsgenie_user = opsgenie_user;
    m_opsgenie_user_isSet = true;
}

bool OAITransportOpsgenie_patch::is_opsgenie_user_Set() const{
    return m_opsgenie_user_isSet;
}

bool OAITransportOpsgenie_patch::is_opsgenie_user_Valid() const{
    return m_opsgenie_user_isValid;
}

QString OAITransportOpsgenie_patch::getTransportName() const {
    return m_transport_name;
}
void OAITransportOpsgenie_patch::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportOpsgenie_patch::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportOpsgenie_patch::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

bool OAITransportOpsgenie_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opsgenie_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opsgenie_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opsgenie_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opsgenie_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opsgenie_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opsgenie_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportOpsgenie_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_opsgenie_api_key_isValid && m_transport_name_isValid && true;
}

} // namespace OpenAPI
