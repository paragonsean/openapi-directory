/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportSmsapiApi_H
#define OAI_OAITransportSmsapiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_smsapi_get_collection_200_response.h"
#include "OAITransportSmsapi_get.h"
#include "OAITransportSmsapi_jsonld_get.h"
#include "OAITransportSmsapi_jsonld_post.h"
#include "OAITransportSmsapi_jsonld_put.h"
#include "OAITransportSmsapi_patch.h"
#include "OAITransportSmsapi_post.h"
#include "OAITransportSmsapi_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportSmsapiApi : public QObject {
    Q_OBJECT

public:
    OAITransportSmsapiApi(const int timeOut = 0);
    ~OAITransportSmsapiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportSmsapiGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportSmsapiIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportSmsapiIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_smsapi_patch OAITransportSmsapi_patch [required]
    */
    virtual void apiTransportSmsapiIdPatch(const QString &id, const OAITransportSmsapi_patch &oai_transport_smsapi_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_smsapi_put OAITransportSmsapi_put [required]
    */
    virtual void apiTransportSmsapiIdPut(const QString &id, const OAITransportSmsapi_put &oai_transport_smsapi_put);

    /**
    * @param[in]  oai_transport_smsapi_post OAITransportSmsapi_post [required]
    */
    virtual void apiTransportSmsapiPost(const OAITransportSmsapi_post &oai_transport_smsapi_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportSmsapiGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsapiIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsapiIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsapiIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsapiIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsapiPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportSmsapiGetCollectionSignal(QList<OAITransportSmsapi_get> summary);
    void apiTransportSmsapiIdDeleteSignal();
    void apiTransportSmsapiIdGetSignal(OAITransportSmsapi_get summary);
    void apiTransportSmsapiIdPatchSignal(OAITransportSmsapi_get summary);
    void apiTransportSmsapiIdPutSignal(OAITransportSmsapi_get summary);
    void apiTransportSmsapiPostSignal(OAITransportSmsapi_get summary);


    void apiTransportSmsapiGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportSmsapi_get> summary);
    void apiTransportSmsapiIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportSmsapiIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsapi_get summary);
    void apiTransportSmsapiIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsapi_get summary);
    void apiTransportSmsapiIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsapi_get summary);
    void apiTransportSmsapiPostSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsapi_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiGetCollectionSignalError() instead")
    void apiTransportSmsapiGetCollectionSignalE(QList<OAITransportSmsapi_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiGetCollectionSignalError(QList<OAITransportSmsapi_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdDeleteSignalError() instead")
    void apiTransportSmsapiIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdGetSignalError() instead")
    void apiTransportSmsapiIdGetSignalE(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdGetSignalError(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdPatchSignalError() instead")
    void apiTransportSmsapiIdPatchSignalE(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdPatchSignalError(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdPutSignalError() instead")
    void apiTransportSmsapiIdPutSignalE(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdPutSignalError(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiPostSignalError() instead")
    void apiTransportSmsapiPostSignalE(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiPostSignalError(OAITransportSmsapi_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiGetCollectionSignalErrorFull() instead")
    void apiTransportSmsapiGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdDeleteSignalErrorFull() instead")
    void apiTransportSmsapiIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdGetSignalErrorFull() instead")
    void apiTransportSmsapiIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdPatchSignalErrorFull() instead")
    void apiTransportSmsapiIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiIdPutSignalErrorFull() instead")
    void apiTransportSmsapiIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsapiPostSignalErrorFull() instead")
    void apiTransportSmsapiPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsapiPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
