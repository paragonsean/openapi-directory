/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportBandwidth_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportBandwidth_patch::OAITransportBandwidth_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportBandwidth_patch::OAITransportBandwidth_patch() {
    this->initializeModel();
}

OAITransportBandwidth_patch::~OAITransportBandwidth_patch() {}

void OAITransportBandwidth_patch::initializeModel() {

    m_bandwidth_account_id_isSet = false;
    m_bandwidth_account_id_isValid = false;

    m_bandwidth_application_id_isSet = false;
    m_bandwidth_application_id_isValid = false;

    m_bandwidth_from_isSet = false;
    m_bandwidth_from_isValid = false;

    m_bandwidth_password_isSet = false;
    m_bandwidth_password_isValid = false;

    m_bandwidth_username_isSet = false;
    m_bandwidth_username_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;
}

void OAITransportBandwidth_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportBandwidth_patch::fromJsonObject(QJsonObject json) {

    m_bandwidth_account_id_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_account_id, json[QString("bandwidthAccountId")]);
    m_bandwidth_account_id_isSet = !json[QString("bandwidthAccountId")].isNull() && m_bandwidth_account_id_isValid;

    m_bandwidth_application_id_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_application_id, json[QString("bandwidthApplicationId")]);
    m_bandwidth_application_id_isSet = !json[QString("bandwidthApplicationId")].isNull() && m_bandwidth_application_id_isValid;

    m_bandwidth_from_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_from, json[QString("bandwidthFrom")]);
    m_bandwidth_from_isSet = !json[QString("bandwidthFrom")].isNull() && m_bandwidth_from_isValid;

    m_bandwidth_password_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_password, json[QString("bandwidthPassword")]);
    m_bandwidth_password_isSet = !json[QString("bandwidthPassword")].isNull() && m_bandwidth_password_isValid;

    m_bandwidth_username_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_username, json[QString("bandwidthUsername")]);
    m_bandwidth_username_isSet = !json[QString("bandwidthUsername")].isNull() && m_bandwidth_username_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;
}

QString OAITransportBandwidth_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportBandwidth_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_account_id_isSet) {
        obj.insert(QString("bandwidthAccountId"), ::OpenAPI::toJsonValue(m_bandwidth_account_id));
    }
    if (m_bandwidth_application_id_isSet) {
        obj.insert(QString("bandwidthApplicationId"), ::OpenAPI::toJsonValue(m_bandwidth_application_id));
    }
    if (m_bandwidth_from_isSet) {
        obj.insert(QString("bandwidthFrom"), ::OpenAPI::toJsonValue(m_bandwidth_from));
    }
    if (m_bandwidth_password_isSet) {
        obj.insert(QString("bandwidthPassword"), ::OpenAPI::toJsonValue(m_bandwidth_password));
    }
    if (m_bandwidth_username_isSet) {
        obj.insert(QString("bandwidthUsername"), ::OpenAPI::toJsonValue(m_bandwidth_username));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    return obj;
}

QString OAITransportBandwidth_patch::getBandwidthAccountId() const {
    return m_bandwidth_account_id;
}
void OAITransportBandwidth_patch::setBandwidthAccountId(const QString &bandwidth_account_id) {
    m_bandwidth_account_id = bandwidth_account_id;
    m_bandwidth_account_id_isSet = true;
}

bool OAITransportBandwidth_patch::is_bandwidth_account_id_Set() const{
    return m_bandwidth_account_id_isSet;
}

bool OAITransportBandwidth_patch::is_bandwidth_account_id_Valid() const{
    return m_bandwidth_account_id_isValid;
}

QString OAITransportBandwidth_patch::getBandwidthApplicationId() const {
    return m_bandwidth_application_id;
}
void OAITransportBandwidth_patch::setBandwidthApplicationId(const QString &bandwidth_application_id) {
    m_bandwidth_application_id = bandwidth_application_id;
    m_bandwidth_application_id_isSet = true;
}

bool OAITransportBandwidth_patch::is_bandwidth_application_id_Set() const{
    return m_bandwidth_application_id_isSet;
}

bool OAITransportBandwidth_patch::is_bandwidth_application_id_Valid() const{
    return m_bandwidth_application_id_isValid;
}

QString OAITransportBandwidth_patch::getBandwidthFrom() const {
    return m_bandwidth_from;
}
void OAITransportBandwidth_patch::setBandwidthFrom(const QString &bandwidth_from) {
    m_bandwidth_from = bandwidth_from;
    m_bandwidth_from_isSet = true;
}

bool OAITransportBandwidth_patch::is_bandwidth_from_Set() const{
    return m_bandwidth_from_isSet;
}

bool OAITransportBandwidth_patch::is_bandwidth_from_Valid() const{
    return m_bandwidth_from_isValid;
}

QString OAITransportBandwidth_patch::getBandwidthPassword() const {
    return m_bandwidth_password;
}
void OAITransportBandwidth_patch::setBandwidthPassword(const QString &bandwidth_password) {
    m_bandwidth_password = bandwidth_password;
    m_bandwidth_password_isSet = true;
}

bool OAITransportBandwidth_patch::is_bandwidth_password_Set() const{
    return m_bandwidth_password_isSet;
}

bool OAITransportBandwidth_patch::is_bandwidth_password_Valid() const{
    return m_bandwidth_password_isValid;
}

QString OAITransportBandwidth_patch::getBandwidthUsername() const {
    return m_bandwidth_username;
}
void OAITransportBandwidth_patch::setBandwidthUsername(const QString &bandwidth_username) {
    m_bandwidth_username = bandwidth_username;
    m_bandwidth_username_isSet = true;
}

bool OAITransportBandwidth_patch::is_bandwidth_username_Set() const{
    return m_bandwidth_username_isSet;
}

bool OAITransportBandwidth_patch::is_bandwidth_username_Valid() const{
    return m_bandwidth_username_isValid;
}

QString OAITransportBandwidth_patch::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportBandwidth_patch::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportBandwidth_patch::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportBandwidth_patch::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportBandwidth_patch::getTransportName() const {
    return m_transport_name;
}
void OAITransportBandwidth_patch::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportBandwidth_patch::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportBandwidth_patch::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

bool OAITransportBandwidth_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportBandwidth_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bandwidth_account_id_isValid && m_bandwidth_application_id_isValid && m_bandwidth_from_isValid && m_bandwidth_password_isValid && m_bandwidth_username_isValid && m_transport_name_isValid && true;
}

} // namespace OpenAPI
