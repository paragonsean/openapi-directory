/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportEmail_jsonld_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportEmail_jsonld_get::OAITransportEmail_jsonld_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportEmail_jsonld_get::OAITransportEmail_jsonld_get() {
    this->initializeModel();
}

OAITransportEmail_jsonld_get::~OAITransportEmail_jsonld_get() {}

void OAITransportEmail_jsonld_get::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_email_from_address_isSet = false;
    m_email_from_address_isValid = false;

    m_email_from_name_isSet = false;
    m_email_from_name_isValid = false;

    m_email_password_isSet = false;
    m_email_password_isValid = false;

    m_email_port_isSet = false;
    m_email_port_isValid = false;

    m_email_server_isSet = false;
    m_email_server_isValid = false;

    m_email_username_isSet = false;
    m_email_username_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;
}

void OAITransportEmail_jsonld_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportEmail_jsonld_get::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_email_from_address_isValid = ::OpenAPI::fromJsonValue(m_email_from_address, json[QString("emailFromAddress")]);
    m_email_from_address_isSet = !json[QString("emailFromAddress")].isNull() && m_email_from_address_isValid;

    m_email_from_name_isValid = ::OpenAPI::fromJsonValue(m_email_from_name, json[QString("emailFromName")]);
    m_email_from_name_isSet = !json[QString("emailFromName")].isNull() && m_email_from_name_isValid;

    m_email_password_isValid = ::OpenAPI::fromJsonValue(m_email_password, json[QString("emailPassword")]);
    m_email_password_isSet = !json[QString("emailPassword")].isNull() && m_email_password_isValid;

    m_email_port_isValid = ::OpenAPI::fromJsonValue(m_email_port, json[QString("emailPort")]);
    m_email_port_isSet = !json[QString("emailPort")].isNull() && m_email_port_isValid;

    m_email_server_isValid = ::OpenAPI::fromJsonValue(m_email_server, json[QString("emailServer")]);
    m_email_server_isSet = !json[QString("emailServer")].isNull() && m_email_server_isValid;

    m_email_username_isValid = ::OpenAPI::fromJsonValue(m_email_username, json[QString("emailUsername")]);
    m_email_username_isSet = !json[QString("emailUsername")].isNull() && m_email_username_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;
}

QString OAITransportEmail_jsonld_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportEmail_jsonld_get::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_email_from_address_isSet) {
        obj.insert(QString("emailFromAddress"), ::OpenAPI::toJsonValue(m_email_from_address));
    }
    if (m_email_from_name_isSet) {
        obj.insert(QString("emailFromName"), ::OpenAPI::toJsonValue(m_email_from_name));
    }
    if (m_email_password_isSet) {
        obj.insert(QString("emailPassword"), ::OpenAPI::toJsonValue(m_email_password));
    }
    if (m_email_port_isSet) {
        obj.insert(QString("emailPort"), ::OpenAPI::toJsonValue(m_email_port));
    }
    if (m_email_server_isSet) {
        obj.insert(QString("emailServer"), ::OpenAPI::toJsonValue(m_email_server));
    }
    if (m_email_username_isSet) {
        obj.insert(QString("emailUsername"), ::OpenAPI::toJsonValue(m_email_username));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    return obj;
}

OAIAlertLog_jsonld_get__context OAITransportEmail_jsonld_get::getContext() const {
    return m_context;
}
void OAITransportEmail_jsonld_get::setContext(const OAIAlertLog_jsonld_get__context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_context_Set() const{
    return m_context_isSet;
}

bool OAITransportEmail_jsonld_get::is_context_Valid() const{
    return m_context_isValid;
}

QString OAITransportEmail_jsonld_get::getId() const {
    return m_id;
}
void OAITransportEmail_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransportEmail_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransportEmail_jsonld_get::getType() const {
    return m_type;
}
void OAITransportEmail_jsonld_get::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransportEmail_jsonld_get::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAITransportEmail_jsonld_get::getCreatedAt() const {
    return m_created_at;
}
void OAITransportEmail_jsonld_get::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransportEmail_jsonld_get::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITransportEmail_jsonld_get::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportEmail_jsonld_get::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportEmail_jsonld_get::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportEmail_jsonld_get::getEmailFromAddress() const {
    return m_email_from_address;
}
void OAITransportEmail_jsonld_get::setEmailFromAddress(const QString &email_from_address) {
    m_email_from_address = email_from_address;
    m_email_from_address_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_email_from_address_Set() const{
    return m_email_from_address_isSet;
}

bool OAITransportEmail_jsonld_get::is_email_from_address_Valid() const{
    return m_email_from_address_isValid;
}

QString OAITransportEmail_jsonld_get::getEmailFromName() const {
    return m_email_from_name;
}
void OAITransportEmail_jsonld_get::setEmailFromName(const QString &email_from_name) {
    m_email_from_name = email_from_name;
    m_email_from_name_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_email_from_name_Set() const{
    return m_email_from_name_isSet;
}

bool OAITransportEmail_jsonld_get::is_email_from_name_Valid() const{
    return m_email_from_name_isValid;
}

QString OAITransportEmail_jsonld_get::getEmailPassword() const {
    return m_email_password;
}
void OAITransportEmail_jsonld_get::setEmailPassword(const QString &email_password) {
    m_email_password = email_password;
    m_email_password_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_email_password_Set() const{
    return m_email_password_isSet;
}

bool OAITransportEmail_jsonld_get::is_email_password_Valid() const{
    return m_email_password_isValid;
}

qint32 OAITransportEmail_jsonld_get::getEmailPort() const {
    return m_email_port;
}
void OAITransportEmail_jsonld_get::setEmailPort(const qint32 &email_port) {
    m_email_port = email_port;
    m_email_port_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_email_port_Set() const{
    return m_email_port_isSet;
}

bool OAITransportEmail_jsonld_get::is_email_port_Valid() const{
    return m_email_port_isValid;
}

QString OAITransportEmail_jsonld_get::getEmailServer() const {
    return m_email_server;
}
void OAITransportEmail_jsonld_get::setEmailServer(const QString &email_server) {
    m_email_server = email_server;
    m_email_server_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_email_server_Set() const{
    return m_email_server_isSet;
}

bool OAITransportEmail_jsonld_get::is_email_server_Valid() const{
    return m_email_server_isValid;
}

QString OAITransportEmail_jsonld_get::getEmailUsername() const {
    return m_email_username;
}
void OAITransportEmail_jsonld_get::setEmailUsername(const QString &email_username) {
    m_email_username = email_username;
    m_email_username_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_email_username_Set() const{
    return m_email_username_isSet;
}

bool OAITransportEmail_jsonld_get::is_email_username_Valid() const{
    return m_email_username_isValid;
}

QString OAITransportEmail_jsonld_get::getId() const {
    return m_id;
}
void OAITransportEmail_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransportEmail_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransportEmail_jsonld_get::getPartition() const {
    return m_partition;
}
void OAITransportEmail_jsonld_get::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAITransportEmail_jsonld_get::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAITransportEmail_jsonld_get::getResourceOwner() const {
    return m_resource_owner;
}
void OAITransportEmail_jsonld_get::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAITransportEmail_jsonld_get::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAITransportEmail_jsonld_get::getTransportName() const {
    return m_transport_name;
}
void OAITransportEmail_jsonld_get::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportEmail_jsonld_get::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportEmail_jsonld_get::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

bool OAITransportEmail_jsonld_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_from_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportEmail_jsonld_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_from_address_isValid && m_email_from_name_isValid && m_email_password_isValid && m_email_port_isValid && m_email_server_isValid && m_email_username_isValid && m_partition_isValid && m_transport_name_isValid && true;
}

} // namespace OpenAPI
