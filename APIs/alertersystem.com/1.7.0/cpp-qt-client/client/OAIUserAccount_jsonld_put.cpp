/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccount_jsonld_put.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccount_jsonld_put::OAIUserAccount_jsonld_put(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccount_jsonld_put::OAIUserAccount_jsonld_put() {
    this->initializeModel();
}

OAIUserAccount_jsonld_put::~OAIUserAccount_jsonld_put() {}

void OAIUserAccount_jsonld_put::initializeModel() {

    m_credits_overage_percent_trip_switch_isSet = false;
    m_credits_overage_percent_trip_switch_isValid = false;
}

void OAIUserAccount_jsonld_put::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccount_jsonld_put::fromJsonObject(QJsonObject json) {

    m_credits_overage_percent_trip_switch_isValid = ::OpenAPI::fromJsonValue(m_credits_overage_percent_trip_switch, json[QString("creditsOveragePercentTripSwitch")]);
    m_credits_overage_percent_trip_switch_isSet = !json[QString("creditsOveragePercentTripSwitch")].isNull() && m_credits_overage_percent_trip_switch_isValid;
}

QString OAIUserAccount_jsonld_put::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccount_jsonld_put::asJsonObject() const {
    QJsonObject obj;
    if (m_credits_overage_percent_trip_switch_isSet) {
        obj.insert(QString("creditsOveragePercentTripSwitch"), ::OpenAPI::toJsonValue(m_credits_overage_percent_trip_switch));
    }
    return obj;
}

qint32 OAIUserAccount_jsonld_put::getCreditsOveragePercentTripSwitch() const {
    return m_credits_overage_percent_trip_switch;
}
void OAIUserAccount_jsonld_put::setCreditsOveragePercentTripSwitch(const qint32 &credits_overage_percent_trip_switch) {
    m_credits_overage_percent_trip_switch = credits_overage_percent_trip_switch;
    m_credits_overage_percent_trip_switch_isSet = true;
}

bool OAIUserAccount_jsonld_put::is_credits_overage_percent_trip_switch_Set() const{
    return m_credits_overage_percent_trip_switch_isSet;
}

bool OAIUserAccount_jsonld_put::is_credits_overage_percent_trip_switch_Valid() const{
    return m_credits_overage_percent_trip_switch_isValid;
}

bool OAIUserAccount_jsonld_put::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credits_overage_percent_trip_switch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccount_jsonld_put::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
