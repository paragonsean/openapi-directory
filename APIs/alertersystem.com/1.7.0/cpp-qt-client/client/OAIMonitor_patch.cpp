/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitor_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitor_patch::OAIMonitor_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitor_patch::OAIMonitor_patch() {
    this->initializeModel();
}

OAIMonitor_patch::~OAIMonitor_patch() {}

void OAIMonitor_patch::initializeModel() {

    m_alert_payload_extended_isSet = false;
    m_alert_payload_extended_isValid = false;

    m_alert_payload_short_isSet = false;
    m_alert_payload_short_isValid = false;

    m_alert_services_isSet = false;
    m_alert_services_isValid = false;

    m_allow_unauthenticated_pings_isSet = false;
    m_allow_unauthenticated_pings_isValid = false;

    m_content_check_must_not_exist_isSet = false;
    m_content_check_must_not_exist_isValid = false;

    m_content_check_text_isSet = false;
    m_content_check_text_isValid = false;

    m_content_check_url_isSet = false;
    m_content_check_url_isValid = false;

    m_content_check_xpath_filter_isSet = false;
    m_content_check_xpath_filter_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_grace_seconds_isSet = false;
    m_grace_seconds_isValid = false;

    m_interval_days_isSet = false;
    m_interval_days_isValid = false;

    m_interval_hours_isSet = false;
    m_interval_hours_isValid = false;

    m_interval_minutes_isSet = false;
    m_interval_minutes_isValid = false;

    m_interval_months_isSet = false;
    m_interval_months_isValid = false;

    m_interval_seconds_isSet = false;
    m_interval_seconds_isValid = false;

    m_interval_years_isSet = false;
    m_interval_years_isValid = false;

    m_is_monitor_paused_isSet = false;
    m_is_monitor_paused_isValid = false;

    m_monitor_name_isSet = false;
    m_monitor_name_isValid = false;

    m_monitor_notes_isSet = false;
    m_monitor_notes_isValid = false;

    m_public_description_isSet = false;
    m_public_description_isValid = false;

    m_start_monitor_at_isSet = false;
    m_start_monitor_at_isValid = false;

    m_timezone_code_isSet = false;
    m_timezone_code_isValid = false;

    m_web_response_seconds_limit_isSet = false;
    m_web_response_seconds_limit_isValid = false;

    m_web_response_url_isSet = false;
    m_web_response_url_isValid = false;
}

void OAIMonitor_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitor_patch::fromJsonObject(QJsonObject json) {

    m_alert_payload_extended_isValid = ::OpenAPI::fromJsonValue(m_alert_payload_extended, json[QString("alertPayloadExtended")]);
    m_alert_payload_extended_isSet = !json[QString("alertPayloadExtended")].isNull() && m_alert_payload_extended_isValid;

    m_alert_payload_short_isValid = ::OpenAPI::fromJsonValue(m_alert_payload_short, json[QString("alertPayloadShort")]);
    m_alert_payload_short_isSet = !json[QString("alertPayloadShort")].isNull() && m_alert_payload_short_isValid;

    m_alert_services_isValid = ::OpenAPI::fromJsonValue(m_alert_services, json[QString("alertServices")]);
    m_alert_services_isSet = !json[QString("alertServices")].isNull() && m_alert_services_isValid;

    m_allow_unauthenticated_pings_isValid = ::OpenAPI::fromJsonValue(m_allow_unauthenticated_pings, json[QString("allowUnauthenticatedPings")]);
    m_allow_unauthenticated_pings_isSet = !json[QString("allowUnauthenticatedPings")].isNull() && m_allow_unauthenticated_pings_isValid;

    m_content_check_must_not_exist_isValid = ::OpenAPI::fromJsonValue(m_content_check_must_not_exist, json[QString("contentCheckMustNotExist")]);
    m_content_check_must_not_exist_isSet = !json[QString("contentCheckMustNotExist")].isNull() && m_content_check_must_not_exist_isValid;

    m_content_check_text_isValid = ::OpenAPI::fromJsonValue(m_content_check_text, json[QString("contentCheckText")]);
    m_content_check_text_isSet = !json[QString("contentCheckText")].isNull() && m_content_check_text_isValid;

    m_content_check_url_isValid = ::OpenAPI::fromJsonValue(m_content_check_url, json[QString("contentCheckUrl")]);
    m_content_check_url_isSet = !json[QString("contentCheckUrl")].isNull() && m_content_check_url_isValid;

    m_content_check_xpath_filter_isValid = ::OpenAPI::fromJsonValue(m_content_check_xpath_filter, json[QString("contentCheckXpathFilter")]);
    m_content_check_xpath_filter_isSet = !json[QString("contentCheckXpathFilter")].isNull() && m_content_check_xpath_filter_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_grace_seconds_isValid = ::OpenAPI::fromJsonValue(m_grace_seconds, json[QString("graceSeconds")]);
    m_grace_seconds_isSet = !json[QString("graceSeconds")].isNull() && m_grace_seconds_isValid;

    m_interval_days_isValid = ::OpenAPI::fromJsonValue(m_interval_days, json[QString("intervalDays")]);
    m_interval_days_isSet = !json[QString("intervalDays")].isNull() && m_interval_days_isValid;

    m_interval_hours_isValid = ::OpenAPI::fromJsonValue(m_interval_hours, json[QString("intervalHours")]);
    m_interval_hours_isSet = !json[QString("intervalHours")].isNull() && m_interval_hours_isValid;

    m_interval_minutes_isValid = ::OpenAPI::fromJsonValue(m_interval_minutes, json[QString("intervalMinutes")]);
    m_interval_minutes_isSet = !json[QString("intervalMinutes")].isNull() && m_interval_minutes_isValid;

    m_interval_months_isValid = ::OpenAPI::fromJsonValue(m_interval_months, json[QString("intervalMonths")]);
    m_interval_months_isSet = !json[QString("intervalMonths")].isNull() && m_interval_months_isValid;

    m_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_interval_seconds, json[QString("intervalSeconds")]);
    m_interval_seconds_isSet = !json[QString("intervalSeconds")].isNull() && m_interval_seconds_isValid;

    m_interval_years_isValid = ::OpenAPI::fromJsonValue(m_interval_years, json[QString("intervalYears")]);
    m_interval_years_isSet = !json[QString("intervalYears")].isNull() && m_interval_years_isValid;

    m_is_monitor_paused_isValid = ::OpenAPI::fromJsonValue(m_is_monitor_paused, json[QString("isMonitorPaused")]);
    m_is_monitor_paused_isSet = !json[QString("isMonitorPaused")].isNull() && m_is_monitor_paused_isValid;

    m_monitor_name_isValid = ::OpenAPI::fromJsonValue(m_monitor_name, json[QString("monitorName")]);
    m_monitor_name_isSet = !json[QString("monitorName")].isNull() && m_monitor_name_isValid;

    m_monitor_notes_isValid = ::OpenAPI::fromJsonValue(m_monitor_notes, json[QString("monitorNotes")]);
    m_monitor_notes_isSet = !json[QString("monitorNotes")].isNull() && m_monitor_notes_isValid;

    m_public_description_isValid = ::OpenAPI::fromJsonValue(m_public_description, json[QString("publicDescription")]);
    m_public_description_isSet = !json[QString("publicDescription")].isNull() && m_public_description_isValid;

    m_start_monitor_at_isValid = ::OpenAPI::fromJsonValue(m_start_monitor_at, json[QString("startMonitorAt")]);
    m_start_monitor_at_isSet = !json[QString("startMonitorAt")].isNull() && m_start_monitor_at_isValid;

    m_timezone_code_isValid = ::OpenAPI::fromJsonValue(m_timezone_code, json[QString("timezoneCode")]);
    m_timezone_code_isSet = !json[QString("timezoneCode")].isNull() && m_timezone_code_isValid;

    m_web_response_seconds_limit_isValid = ::OpenAPI::fromJsonValue(m_web_response_seconds_limit, json[QString("webResponseSecondsLimit")]);
    m_web_response_seconds_limit_isSet = !json[QString("webResponseSecondsLimit")].isNull() && m_web_response_seconds_limit_isValid;

    m_web_response_url_isValid = ::OpenAPI::fromJsonValue(m_web_response_url, json[QString("webResponseUrl")]);
    m_web_response_url_isSet = !json[QString("webResponseUrl")].isNull() && m_web_response_url_isValid;
}

QString OAIMonitor_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitor_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_payload_extended_isSet) {
        obj.insert(QString("alertPayloadExtended"), ::OpenAPI::toJsonValue(m_alert_payload_extended));
    }
    if (m_alert_payload_short_isSet) {
        obj.insert(QString("alertPayloadShort"), ::OpenAPI::toJsonValue(m_alert_payload_short));
    }
    if (m_alert_services.size() > 0) {
        obj.insert(QString("alertServices"), ::OpenAPI::toJsonValue(m_alert_services));
    }
    if (m_allow_unauthenticated_pings_isSet) {
        obj.insert(QString("allowUnauthenticatedPings"), ::OpenAPI::toJsonValue(m_allow_unauthenticated_pings));
    }
    if (m_content_check_must_not_exist_isSet) {
        obj.insert(QString("contentCheckMustNotExist"), ::OpenAPI::toJsonValue(m_content_check_must_not_exist));
    }
    if (m_content_check_text_isSet) {
        obj.insert(QString("contentCheckText"), ::OpenAPI::toJsonValue(m_content_check_text));
    }
    if (m_content_check_url_isSet) {
        obj.insert(QString("contentCheckUrl"), ::OpenAPI::toJsonValue(m_content_check_url));
    }
    if (m_content_check_xpath_filter_isSet) {
        obj.insert(QString("contentCheckXpathFilter"), ::OpenAPI::toJsonValue(m_content_check_xpath_filter));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_grace_seconds_isSet) {
        obj.insert(QString("graceSeconds"), ::OpenAPI::toJsonValue(m_grace_seconds));
    }
    if (m_interval_days_isSet) {
        obj.insert(QString("intervalDays"), ::OpenAPI::toJsonValue(m_interval_days));
    }
    if (m_interval_hours_isSet) {
        obj.insert(QString("intervalHours"), ::OpenAPI::toJsonValue(m_interval_hours));
    }
    if (m_interval_minutes_isSet) {
        obj.insert(QString("intervalMinutes"), ::OpenAPI::toJsonValue(m_interval_minutes));
    }
    if (m_interval_months_isSet) {
        obj.insert(QString("intervalMonths"), ::OpenAPI::toJsonValue(m_interval_months));
    }
    if (m_interval_seconds_isSet) {
        obj.insert(QString("intervalSeconds"), ::OpenAPI::toJsonValue(m_interval_seconds));
    }
    if (m_interval_years_isSet) {
        obj.insert(QString("intervalYears"), ::OpenAPI::toJsonValue(m_interval_years));
    }
    if (m_is_monitor_paused_isSet) {
        obj.insert(QString("isMonitorPaused"), ::OpenAPI::toJsonValue(m_is_monitor_paused));
    }
    if (m_monitor_name_isSet) {
        obj.insert(QString("monitorName"), ::OpenAPI::toJsonValue(m_monitor_name));
    }
    if (m_monitor_notes_isSet) {
        obj.insert(QString("monitorNotes"), ::OpenAPI::toJsonValue(m_monitor_notes));
    }
    if (m_public_description_isSet) {
        obj.insert(QString("publicDescription"), ::OpenAPI::toJsonValue(m_public_description));
    }
    if (m_start_monitor_at_isSet) {
        obj.insert(QString("startMonitorAt"), ::OpenAPI::toJsonValue(m_start_monitor_at));
    }
    if (m_timezone_code_isSet) {
        obj.insert(QString("timezoneCode"), ::OpenAPI::toJsonValue(m_timezone_code));
    }
    if (m_web_response_seconds_limit_isSet) {
        obj.insert(QString("webResponseSecondsLimit"), ::OpenAPI::toJsonValue(m_web_response_seconds_limit));
    }
    if (m_web_response_url_isSet) {
        obj.insert(QString("webResponseUrl"), ::OpenAPI::toJsonValue(m_web_response_url));
    }
    return obj;
}

QString OAIMonitor_patch::getAlertPayloadExtended() const {
    return m_alert_payload_extended;
}
void OAIMonitor_patch::setAlertPayloadExtended(const QString &alert_payload_extended) {
    m_alert_payload_extended = alert_payload_extended;
    m_alert_payload_extended_isSet = true;
}

bool OAIMonitor_patch::is_alert_payload_extended_Set() const{
    return m_alert_payload_extended_isSet;
}

bool OAIMonitor_patch::is_alert_payload_extended_Valid() const{
    return m_alert_payload_extended_isValid;
}

QString OAIMonitor_patch::getAlertPayloadShort() const {
    return m_alert_payload_short;
}
void OAIMonitor_patch::setAlertPayloadShort(const QString &alert_payload_short) {
    m_alert_payload_short = alert_payload_short;
    m_alert_payload_short_isSet = true;
}

bool OAIMonitor_patch::is_alert_payload_short_Set() const{
    return m_alert_payload_short_isSet;
}

bool OAIMonitor_patch::is_alert_payload_short_Valid() const{
    return m_alert_payload_short_isValid;
}

QList<QString> OAIMonitor_patch::getAlertServices() const {
    return m_alert_services;
}
void OAIMonitor_patch::setAlertServices(const QList<QString> &alert_services) {
    m_alert_services = alert_services;
    m_alert_services_isSet = true;
}

bool OAIMonitor_patch::is_alert_services_Set() const{
    return m_alert_services_isSet;
}

bool OAIMonitor_patch::is_alert_services_Valid() const{
    return m_alert_services_isValid;
}

bool OAIMonitor_patch::isAllowUnauthenticatedPings() const {
    return m_allow_unauthenticated_pings;
}
void OAIMonitor_patch::setAllowUnauthenticatedPings(const bool &allow_unauthenticated_pings) {
    m_allow_unauthenticated_pings = allow_unauthenticated_pings;
    m_allow_unauthenticated_pings_isSet = true;
}

bool OAIMonitor_patch::is_allow_unauthenticated_pings_Set() const{
    return m_allow_unauthenticated_pings_isSet;
}

bool OAIMonitor_patch::is_allow_unauthenticated_pings_Valid() const{
    return m_allow_unauthenticated_pings_isValid;
}

bool OAIMonitor_patch::isContentCheckMustNotExist() const {
    return m_content_check_must_not_exist;
}
void OAIMonitor_patch::setContentCheckMustNotExist(const bool &content_check_must_not_exist) {
    m_content_check_must_not_exist = content_check_must_not_exist;
    m_content_check_must_not_exist_isSet = true;
}

bool OAIMonitor_patch::is_content_check_must_not_exist_Set() const{
    return m_content_check_must_not_exist_isSet;
}

bool OAIMonitor_patch::is_content_check_must_not_exist_Valid() const{
    return m_content_check_must_not_exist_isValid;
}

QString OAIMonitor_patch::getContentCheckText() const {
    return m_content_check_text;
}
void OAIMonitor_patch::setContentCheckText(const QString &content_check_text) {
    m_content_check_text = content_check_text;
    m_content_check_text_isSet = true;
}

bool OAIMonitor_patch::is_content_check_text_Set() const{
    return m_content_check_text_isSet;
}

bool OAIMonitor_patch::is_content_check_text_Valid() const{
    return m_content_check_text_isValid;
}

QString OAIMonitor_patch::getContentCheckUrl() const {
    return m_content_check_url;
}
void OAIMonitor_patch::setContentCheckUrl(const QString &content_check_url) {
    m_content_check_url = content_check_url;
    m_content_check_url_isSet = true;
}

bool OAIMonitor_patch::is_content_check_url_Set() const{
    return m_content_check_url_isSet;
}

bool OAIMonitor_patch::is_content_check_url_Valid() const{
    return m_content_check_url_isValid;
}

QString OAIMonitor_patch::getContentCheckXpathFilter() const {
    return m_content_check_xpath_filter;
}
void OAIMonitor_patch::setContentCheckXpathFilter(const QString &content_check_xpath_filter) {
    m_content_check_xpath_filter = content_check_xpath_filter;
    m_content_check_xpath_filter_isSet = true;
}

bool OAIMonitor_patch::is_content_check_xpath_filter_Set() const{
    return m_content_check_xpath_filter_isSet;
}

bool OAIMonitor_patch::is_content_check_xpath_filter_Valid() const{
    return m_content_check_xpath_filter_isValid;
}

QString OAIMonitor_patch::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAIMonitor_patch::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAIMonitor_patch::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAIMonitor_patch::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

qint32 OAIMonitor_patch::getGraceSeconds() const {
    return m_grace_seconds;
}
void OAIMonitor_patch::setGraceSeconds(const qint32 &grace_seconds) {
    m_grace_seconds = grace_seconds;
    m_grace_seconds_isSet = true;
}

bool OAIMonitor_patch::is_grace_seconds_Set() const{
    return m_grace_seconds_isSet;
}

bool OAIMonitor_patch::is_grace_seconds_Valid() const{
    return m_grace_seconds_isValid;
}

qint32 OAIMonitor_patch::getIntervalDays() const {
    return m_interval_days;
}
void OAIMonitor_patch::setIntervalDays(const qint32 &interval_days) {
    m_interval_days = interval_days;
    m_interval_days_isSet = true;
}

bool OAIMonitor_patch::is_interval_days_Set() const{
    return m_interval_days_isSet;
}

bool OAIMonitor_patch::is_interval_days_Valid() const{
    return m_interval_days_isValid;
}

qint32 OAIMonitor_patch::getIntervalHours() const {
    return m_interval_hours;
}
void OAIMonitor_patch::setIntervalHours(const qint32 &interval_hours) {
    m_interval_hours = interval_hours;
    m_interval_hours_isSet = true;
}

bool OAIMonitor_patch::is_interval_hours_Set() const{
    return m_interval_hours_isSet;
}

bool OAIMonitor_patch::is_interval_hours_Valid() const{
    return m_interval_hours_isValid;
}

qint32 OAIMonitor_patch::getIntervalMinutes() const {
    return m_interval_minutes;
}
void OAIMonitor_patch::setIntervalMinutes(const qint32 &interval_minutes) {
    m_interval_minutes = interval_minutes;
    m_interval_minutes_isSet = true;
}

bool OAIMonitor_patch::is_interval_minutes_Set() const{
    return m_interval_minutes_isSet;
}

bool OAIMonitor_patch::is_interval_minutes_Valid() const{
    return m_interval_minutes_isValid;
}

qint32 OAIMonitor_patch::getIntervalMonths() const {
    return m_interval_months;
}
void OAIMonitor_patch::setIntervalMonths(const qint32 &interval_months) {
    m_interval_months = interval_months;
    m_interval_months_isSet = true;
}

bool OAIMonitor_patch::is_interval_months_Set() const{
    return m_interval_months_isSet;
}

bool OAIMonitor_patch::is_interval_months_Valid() const{
    return m_interval_months_isValid;
}

qint32 OAIMonitor_patch::getIntervalSeconds() const {
    return m_interval_seconds;
}
void OAIMonitor_patch::setIntervalSeconds(const qint32 &interval_seconds) {
    m_interval_seconds = interval_seconds;
    m_interval_seconds_isSet = true;
}

bool OAIMonitor_patch::is_interval_seconds_Set() const{
    return m_interval_seconds_isSet;
}

bool OAIMonitor_patch::is_interval_seconds_Valid() const{
    return m_interval_seconds_isValid;
}

qint32 OAIMonitor_patch::getIntervalYears() const {
    return m_interval_years;
}
void OAIMonitor_patch::setIntervalYears(const qint32 &interval_years) {
    m_interval_years = interval_years;
    m_interval_years_isSet = true;
}

bool OAIMonitor_patch::is_interval_years_Set() const{
    return m_interval_years_isSet;
}

bool OAIMonitor_patch::is_interval_years_Valid() const{
    return m_interval_years_isValid;
}

bool OAIMonitor_patch::isIsMonitorPaused() const {
    return m_is_monitor_paused;
}
void OAIMonitor_patch::setIsMonitorPaused(const bool &is_monitor_paused) {
    m_is_monitor_paused = is_monitor_paused;
    m_is_monitor_paused_isSet = true;
}

bool OAIMonitor_patch::is_is_monitor_paused_Set() const{
    return m_is_monitor_paused_isSet;
}

bool OAIMonitor_patch::is_is_monitor_paused_Valid() const{
    return m_is_monitor_paused_isValid;
}

QString OAIMonitor_patch::getMonitorName() const {
    return m_monitor_name;
}
void OAIMonitor_patch::setMonitorName(const QString &monitor_name) {
    m_monitor_name = monitor_name;
    m_monitor_name_isSet = true;
}

bool OAIMonitor_patch::is_monitor_name_Set() const{
    return m_monitor_name_isSet;
}

bool OAIMonitor_patch::is_monitor_name_Valid() const{
    return m_monitor_name_isValid;
}

QString OAIMonitor_patch::getMonitorNotes() const {
    return m_monitor_notes;
}
void OAIMonitor_patch::setMonitorNotes(const QString &monitor_notes) {
    m_monitor_notes = monitor_notes;
    m_monitor_notes_isSet = true;
}

bool OAIMonitor_patch::is_monitor_notes_Set() const{
    return m_monitor_notes_isSet;
}

bool OAIMonitor_patch::is_monitor_notes_Valid() const{
    return m_monitor_notes_isValid;
}

QString OAIMonitor_patch::getPublicDescription() const {
    return m_public_description;
}
void OAIMonitor_patch::setPublicDescription(const QString &public_description) {
    m_public_description = public_description;
    m_public_description_isSet = true;
}

bool OAIMonitor_patch::is_public_description_Set() const{
    return m_public_description_isSet;
}

bool OAIMonitor_patch::is_public_description_Valid() const{
    return m_public_description_isValid;
}

QDateTime OAIMonitor_patch::getStartMonitorAt() const {
    return m_start_monitor_at;
}
void OAIMonitor_patch::setStartMonitorAt(const QDateTime &start_monitor_at) {
    m_start_monitor_at = start_monitor_at;
    m_start_monitor_at_isSet = true;
}

bool OAIMonitor_patch::is_start_monitor_at_Set() const{
    return m_start_monitor_at_isSet;
}

bool OAIMonitor_patch::is_start_monitor_at_Valid() const{
    return m_start_monitor_at_isValid;
}

QString OAIMonitor_patch::getTimezoneCode() const {
    return m_timezone_code;
}
void OAIMonitor_patch::setTimezoneCode(const QString &timezone_code) {
    m_timezone_code = timezone_code;
    m_timezone_code_isSet = true;
}

bool OAIMonitor_patch::is_timezone_code_Set() const{
    return m_timezone_code_isSet;
}

bool OAIMonitor_patch::is_timezone_code_Valid() const{
    return m_timezone_code_isValid;
}

qint32 OAIMonitor_patch::getWebResponseSecondsLimit() const {
    return m_web_response_seconds_limit;
}
void OAIMonitor_patch::setWebResponseSecondsLimit(const qint32 &web_response_seconds_limit) {
    m_web_response_seconds_limit = web_response_seconds_limit;
    m_web_response_seconds_limit_isSet = true;
}

bool OAIMonitor_patch::is_web_response_seconds_limit_Set() const{
    return m_web_response_seconds_limit_isSet;
}

bool OAIMonitor_patch::is_web_response_seconds_limit_Valid() const{
    return m_web_response_seconds_limit_isValid;
}

QString OAIMonitor_patch::getWebResponseUrl() const {
    return m_web_response_url;
}
void OAIMonitor_patch::setWebResponseUrl(const QString &web_response_url) {
    m_web_response_url = web_response_url;
    m_web_response_url_isSet = true;
}

bool OAIMonitor_patch::is_web_response_url_Set() const{
    return m_web_response_url_isSet;
}

bool OAIMonitor_patch::is_web_response_url_Valid() const{
    return m_web_response_url_isValid;
}

bool OAIMonitor_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_payload_extended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_payload_short_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_unauthenticated_pings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_check_must_not_exist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_check_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_check_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_check_xpath_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_years_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_monitor_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_monitor_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_response_seconds_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_response_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitor_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_monitor_name_isValid && m_timezone_code_isValid && true;
}

} // namespace OpenAPI
