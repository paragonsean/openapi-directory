/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportMastodonApi_H
#define OAI_OAITransportMastodonApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_mastodon_get_collection_200_response.h"
#include "OAITransportMastodon_get.h"
#include "OAITransportMastodon_jsonld_get.h"
#include "OAITransportMastodon_jsonld_post.h"
#include "OAITransportMastodon_jsonld_put.h"
#include "OAITransportMastodon_patch.h"
#include "OAITransportMastodon_post.h"
#include "OAITransportMastodon_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportMastodonApi : public QObject {
    Q_OBJECT

public:
    OAITransportMastodonApi(const int timeOut = 0);
    ~OAITransportMastodonApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportMastodonGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportMastodonIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportMastodonIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_mastodon_patch OAITransportMastodon_patch [required]
    */
    virtual void apiTransportMastodonIdPatch(const QString &id, const OAITransportMastodon_patch &oai_transport_mastodon_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_mastodon_put OAITransportMastodon_put [required]
    */
    virtual void apiTransportMastodonIdPut(const QString &id, const OAITransportMastodon_put &oai_transport_mastodon_put);

    /**
    * @param[in]  oai_transport_mastodon_post OAITransportMastodon_post [required]
    */
    virtual void apiTransportMastodonPost(const OAITransportMastodon_post &oai_transport_mastodon_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportMastodonGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportMastodonIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportMastodonIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportMastodonIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportMastodonIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportMastodonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportMastodonGetCollectionSignal(QList<OAITransportMastodon_get> summary);
    void apiTransportMastodonIdDeleteSignal();
    void apiTransportMastodonIdGetSignal(OAITransportMastodon_get summary);
    void apiTransportMastodonIdPatchSignal(OAITransportMastodon_get summary);
    void apiTransportMastodonIdPutSignal(OAITransportMastodon_get summary);
    void apiTransportMastodonPostSignal(OAITransportMastodon_get summary);


    void apiTransportMastodonGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportMastodon_get> summary);
    void apiTransportMastodonIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportMastodonIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportMastodon_get summary);
    void apiTransportMastodonIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportMastodon_get summary);
    void apiTransportMastodonIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportMastodon_get summary);
    void apiTransportMastodonPostSignalFull(OAIHttpRequestWorker *worker, OAITransportMastodon_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportMastodonGetCollectionSignalError() instead")
    void apiTransportMastodonGetCollectionSignalE(QList<OAITransportMastodon_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonGetCollectionSignalError(QList<OAITransportMastodon_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdDeleteSignalError() instead")
    void apiTransportMastodonIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdGetSignalError() instead")
    void apiTransportMastodonIdGetSignalE(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdGetSignalError(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdPatchSignalError() instead")
    void apiTransportMastodonIdPatchSignalE(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdPatchSignalError(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdPutSignalError() instead")
    void apiTransportMastodonIdPutSignalE(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdPutSignalError(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonPostSignalError() instead")
    void apiTransportMastodonPostSignalE(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonPostSignalError(OAITransportMastodon_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportMastodonGetCollectionSignalErrorFull() instead")
    void apiTransportMastodonGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdDeleteSignalErrorFull() instead")
    void apiTransportMastodonIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdGetSignalErrorFull() instead")
    void apiTransportMastodonIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdPatchSignalErrorFull() instead")
    void apiTransportMastodonIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonIdPutSignalErrorFull() instead")
    void apiTransportMastodonIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMastodonPostSignalErrorFull() instead")
    void apiTransportMastodonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMastodonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
