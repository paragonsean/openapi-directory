/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartition_get.h
 *
 * The Partition resource is a collection of siloed monitor and alert environments in the user account.
 */

#ifndef OAIPartition_get_H
#define OAIPartition_get_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPartition_get : public OAIObject {
public:
    OAIPartition_get();
    OAIPartition_get(QString json);
    ~OAIPartition_get() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAlertServices() const;
    void setAlertServices(const QList<QString> &alert_services);
    bool is_alert_services_Set() const;
    bool is_alert_services_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDataSegmentCode() const;
    void setDataSegmentCode(const QString &data_segment_code);
    bool is_data_segment_code_Set() const;
    bool is_data_segment_code_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getMonitors() const;
    void setMonitors(const QList<QString> &monitors);
    bool is_monitors_Set() const;
    bool is_monitors_Valid() const;

    QString getPartitionName() const;
    void setPartitionName(const QString &partition_name);
    bool is_partition_name_Set() const;
    bool is_partition_name_Valid() const;

    QString getPartitionNotes() const;
    void setPartitionNotes(const QString &partition_notes);
    bool is_partition_notes_Set() const;
    bool is_partition_notes_Valid() const;

    QString getResourceOwner() const;
    void setResourceOwner(const QString &resource_owner);
    bool is_resource_owner_Set() const;
    bool is_resource_owner_Valid() const;

    QList<QString> getTeamInvitations() const;
    void setTeamInvitations(const QList<QString> &team_invitations);
    bool is_team_invitations_Set() const;
    bool is_team_invitations_Valid() const;

    QList<QString> getTeamMembers() const;
    void setTeamMembers(const QList<QString> &team_members);
    bool is_team_members_Set() const;
    bool is_team_members_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_alert_services;
    bool m_alert_services_isSet;
    bool m_alert_services_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_data_segment_code;
    bool m_data_segment_code_isSet;
    bool m_data_segment_code_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_monitors;
    bool m_monitors_isSet;
    bool m_monitors_isValid;

    QString m_partition_name;
    bool m_partition_name_isSet;
    bool m_partition_name_isValid;

    QString m_partition_notes;
    bool m_partition_notes_isSet;
    bool m_partition_notes_isValid;

    QString m_resource_owner;
    bool m_resource_owner_isSet;
    bool m_resource_owner_isValid;

    QList<QString> m_team_invitations;
    bool m_team_invitations_isSet;
    bool m_team_invitations_isValid;

    QList<QString> m_team_members;
    bool m_team_members_isSet;
    bool m_team_members_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartition_get)

#endif // OAIPartition_get_H
