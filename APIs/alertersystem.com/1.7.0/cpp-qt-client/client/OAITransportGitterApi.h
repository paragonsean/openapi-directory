/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportGitterApi_H
#define OAI_OAITransportGitterApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_gitter_get_collection_200_response.h"
#include "OAITransportGitter_get.h"
#include "OAITransportGitter_jsonld_get.h"
#include "OAITransportGitter_jsonld_post.h"
#include "OAITransportGitter_jsonld_put.h"
#include "OAITransportGitter_patch.h"
#include "OAITransportGitter_post.h"
#include "OAITransportGitter_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportGitterApi : public QObject {
    Q_OBJECT

public:
    OAITransportGitterApi(const int timeOut = 0);
    ~OAITransportGitterApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportGitterGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportGitterIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportGitterIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_gitter_patch OAITransportGitter_patch [required]
    */
    virtual void apiTransportGitterIdPatch(const QString &id, const OAITransportGitter_patch &oai_transport_gitter_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_gitter_put OAITransportGitter_put [required]
    */
    virtual void apiTransportGitterIdPut(const QString &id, const OAITransportGitter_put &oai_transport_gitter_put);

    /**
    * @param[in]  oai_transport_gitter_post OAITransportGitter_post [required]
    */
    virtual void apiTransportGitterPost(const OAITransportGitter_post &oai_transport_gitter_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportGitterGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportGitterIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportGitterIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportGitterIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportGitterIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportGitterPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportGitterGetCollectionSignal(QList<OAITransportGitter_get> summary);
    void apiTransportGitterIdDeleteSignal();
    void apiTransportGitterIdGetSignal(OAITransportGitter_get summary);
    void apiTransportGitterIdPatchSignal(OAITransportGitter_get summary);
    void apiTransportGitterIdPutSignal(OAITransportGitter_get summary);
    void apiTransportGitterPostSignal(OAITransportGitter_get summary);


    void apiTransportGitterGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportGitter_get> summary);
    void apiTransportGitterIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportGitterIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportGitter_get summary);
    void apiTransportGitterIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportGitter_get summary);
    void apiTransportGitterIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportGitter_get summary);
    void apiTransportGitterPostSignalFull(OAIHttpRequestWorker *worker, OAITransportGitter_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportGitterGetCollectionSignalError() instead")
    void apiTransportGitterGetCollectionSignalE(QList<OAITransportGitter_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterGetCollectionSignalError(QList<OAITransportGitter_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdDeleteSignalError() instead")
    void apiTransportGitterIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdGetSignalError() instead")
    void apiTransportGitterIdGetSignalE(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdGetSignalError(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdPatchSignalError() instead")
    void apiTransportGitterIdPatchSignalE(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdPatchSignalError(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdPutSignalError() instead")
    void apiTransportGitterIdPutSignalE(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdPutSignalError(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterPostSignalError() instead")
    void apiTransportGitterPostSignalE(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterPostSignalError(OAITransportGitter_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportGitterGetCollectionSignalErrorFull() instead")
    void apiTransportGitterGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdDeleteSignalErrorFull() instead")
    void apiTransportGitterIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdGetSignalErrorFull() instead")
    void apiTransportGitterIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdPatchSignalErrorFull() instead")
    void apiTransportGitterIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterIdPutSignalErrorFull() instead")
    void apiTransportGitterIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportGitterPostSignalErrorFull() instead")
    void apiTransportGitterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportGitterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
