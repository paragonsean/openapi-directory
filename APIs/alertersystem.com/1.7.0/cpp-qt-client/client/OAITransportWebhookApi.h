/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportWebhookApi_H
#define OAI_OAITransportWebhookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_webhook_get_collection_200_response.h"
#include "OAITransportWebhook_get.h"
#include "OAITransportWebhook_jsonld_get.h"
#include "OAITransportWebhook_jsonld_post.h"
#include "OAITransportWebhook_jsonld_put.h"
#include "OAITransportWebhook_patch.h"
#include "OAITransportWebhook_post.h"
#include "OAITransportWebhook_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportWebhookApi : public QObject {
    Q_OBJECT

public:
    OAITransportWebhookApi(const int timeOut = 0);
    ~OAITransportWebhookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportWebhookGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportWebhookIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportWebhookIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_webhook_patch OAITransportWebhook_patch [required]
    */
    virtual void apiTransportWebhookIdPatch(const QString &id, const OAITransportWebhook_patch &oai_transport_webhook_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_webhook_put OAITransportWebhook_put [required]
    */
    virtual void apiTransportWebhookIdPut(const QString &id, const OAITransportWebhook_put &oai_transport_webhook_put);

    /**
    * @param[in]  oai_transport_webhook_post OAITransportWebhook_post [required]
    */
    virtual void apiTransportWebhookPost(const OAITransportWebhook_post &oai_transport_webhook_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportWebhookGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportWebhookIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportWebhookIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportWebhookIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportWebhookIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportWebhookPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportWebhookGetCollectionSignal(QList<OAITransportWebhook_get> summary);
    void apiTransportWebhookIdDeleteSignal();
    void apiTransportWebhookIdGetSignal(OAITransportWebhook_get summary);
    void apiTransportWebhookIdPatchSignal(OAITransportWebhook_get summary);
    void apiTransportWebhookIdPutSignal(OAITransportWebhook_get summary);
    void apiTransportWebhookPostSignal(OAITransportWebhook_get summary);


    void apiTransportWebhookGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportWebhook_get> summary);
    void apiTransportWebhookIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportWebhookIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportWebhook_get summary);
    void apiTransportWebhookIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportWebhook_get summary);
    void apiTransportWebhookIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportWebhook_get summary);
    void apiTransportWebhookPostSignalFull(OAIHttpRequestWorker *worker, OAITransportWebhook_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportWebhookGetCollectionSignalError() instead")
    void apiTransportWebhookGetCollectionSignalE(QList<OAITransportWebhook_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookGetCollectionSignalError(QList<OAITransportWebhook_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdDeleteSignalError() instead")
    void apiTransportWebhookIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdGetSignalError() instead")
    void apiTransportWebhookIdGetSignalE(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdGetSignalError(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdPatchSignalError() instead")
    void apiTransportWebhookIdPatchSignalE(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdPatchSignalError(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdPutSignalError() instead")
    void apiTransportWebhookIdPutSignalE(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdPutSignalError(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookPostSignalError() instead")
    void apiTransportWebhookPostSignalE(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookPostSignalError(OAITransportWebhook_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportWebhookGetCollectionSignalErrorFull() instead")
    void apiTransportWebhookGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdDeleteSignalErrorFull() instead")
    void apiTransportWebhookIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdGetSignalErrorFull() instead")
    void apiTransportWebhookIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdPatchSignalErrorFull() instead")
    void apiTransportWebhookIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookIdPutSignalErrorFull() instead")
    void apiTransportWebhookIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportWebhookPostSignalErrorFull() instead")
    void apiTransportWebhookPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportWebhookPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
