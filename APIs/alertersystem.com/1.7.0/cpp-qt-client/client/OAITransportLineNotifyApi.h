/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportLineNotifyApi_H
#define OAI_OAITransportLineNotifyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_line_notify_get_collection_200_response.h"
#include "OAITransportLineNotify_get.h"
#include "OAITransportLineNotify_jsonld_get.h"
#include "OAITransportLineNotify_jsonld_post.h"
#include "OAITransportLineNotify_jsonld_put.h"
#include "OAITransportLineNotify_patch.h"
#include "OAITransportLineNotify_post.h"
#include "OAITransportLineNotify_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportLineNotifyApi : public QObject {
    Q_OBJECT

public:
    OAITransportLineNotifyApi(const int timeOut = 0);
    ~OAITransportLineNotifyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportLineNotifyGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportLineNotifyIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportLineNotifyIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_line_notify_patch OAITransportLineNotify_patch [required]
    */
    virtual void apiTransportLineNotifyIdPatch(const QString &id, const OAITransportLineNotify_patch &oai_transport_line_notify_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_line_notify_put OAITransportLineNotify_put [required]
    */
    virtual void apiTransportLineNotifyIdPut(const QString &id, const OAITransportLineNotify_put &oai_transport_line_notify_put);

    /**
    * @param[in]  oai_transport_line_notify_post OAITransportLineNotify_post [required]
    */
    virtual void apiTransportLineNotifyPost(const OAITransportLineNotify_post &oai_transport_line_notify_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportLineNotifyGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportLineNotifyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportLineNotifyIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportLineNotifyIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportLineNotifyIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportLineNotifyPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportLineNotifyGetCollectionSignal(QList<OAITransportLineNotify_get> summary);
    void apiTransportLineNotifyIdDeleteSignal();
    void apiTransportLineNotifyIdGetSignal(OAITransportLineNotify_get summary);
    void apiTransportLineNotifyIdPatchSignal(OAITransportLineNotify_get summary);
    void apiTransportLineNotifyIdPutSignal(OAITransportLineNotify_get summary);
    void apiTransportLineNotifyPostSignal(OAITransportLineNotify_get summary);


    void apiTransportLineNotifyGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportLineNotify_get> summary);
    void apiTransportLineNotifyIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportLineNotifyIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportLineNotify_get summary);
    void apiTransportLineNotifyIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportLineNotify_get summary);
    void apiTransportLineNotifyIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportLineNotify_get summary);
    void apiTransportLineNotifyPostSignalFull(OAIHttpRequestWorker *worker, OAITransportLineNotify_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyGetCollectionSignalError() instead")
    void apiTransportLineNotifyGetCollectionSignalE(QList<OAITransportLineNotify_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyGetCollectionSignalError(QList<OAITransportLineNotify_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdDeleteSignalError() instead")
    void apiTransportLineNotifyIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdGetSignalError() instead")
    void apiTransportLineNotifyIdGetSignalE(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdGetSignalError(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdPatchSignalError() instead")
    void apiTransportLineNotifyIdPatchSignalE(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdPatchSignalError(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdPutSignalError() instead")
    void apiTransportLineNotifyIdPutSignalE(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdPutSignalError(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyPostSignalError() instead")
    void apiTransportLineNotifyPostSignalE(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyPostSignalError(OAITransportLineNotify_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyGetCollectionSignalErrorFull() instead")
    void apiTransportLineNotifyGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdDeleteSignalErrorFull() instead")
    void apiTransportLineNotifyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdGetSignalErrorFull() instead")
    void apiTransportLineNotifyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdPatchSignalErrorFull() instead")
    void apiTransportLineNotifyIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyIdPutSignalErrorFull() instead")
    void apiTransportLineNotifyIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportLineNotifyPostSignalErrorFull() instead")
    void apiTransportLineNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportLineNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
