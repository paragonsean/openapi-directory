/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccount_jsonld_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccount_jsonld_get::OAIUserAccount_jsonld_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccount_jsonld_get::OAIUserAccount_jsonld_get() {
    this->initializeModel();
}

OAIUserAccount_jsonld_get::~OAIUserAccount_jsonld_get() {}

void OAIUserAccount_jsonld_get::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_account_level_code_isSet = false;
    m_account_level_code_isValid = false;

    m_credits_overage_percent_trip_switch_isSet = false;
    m_credits_overage_percent_trip_switch_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_delinquent_isSet = false;
    m_is_delinquent_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_timezone_code_isSet = false;
    m_timezone_code_isValid = false;
}

void OAIUserAccount_jsonld_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccount_jsonld_get::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_account_level_code_isValid = ::OpenAPI::fromJsonValue(m_account_level_code, json[QString("accountLevelCode")]);
    m_account_level_code_isSet = !json[QString("accountLevelCode")].isNull() && m_account_level_code_isValid;

    m_credits_overage_percent_trip_switch_isValid = ::OpenAPI::fromJsonValue(m_credits_overage_percent_trip_switch, json[QString("creditsOveragePercentTripSwitch")]);
    m_credits_overage_percent_trip_switch_isSet = !json[QString("creditsOveragePercentTripSwitch")].isNull() && m_credits_overage_percent_trip_switch_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_delinquent_isValid = ::OpenAPI::fromJsonValue(m_is_delinquent, json[QString("isDelinquent")]);
    m_is_delinquent_isSet = !json[QString("isDelinquent")].isNull() && m_is_delinquent_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_timezone_code_isValid = ::OpenAPI::fromJsonValue(m_timezone_code, json[QString("timezoneCode")]);
    m_timezone_code_isSet = !json[QString("timezoneCode")].isNull() && m_timezone_code_isValid;
}

QString OAIUserAccount_jsonld_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccount_jsonld_get::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_account_level_code_isSet) {
        obj.insert(QString("accountLevelCode"), ::OpenAPI::toJsonValue(m_account_level_code));
    }
    if (m_credits_overage_percent_trip_switch_isSet) {
        obj.insert(QString("creditsOveragePercentTripSwitch"), ::OpenAPI::toJsonValue(m_credits_overage_percent_trip_switch));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_delinquent_isSet) {
        obj.insert(QString("isDelinquent"), ::OpenAPI::toJsonValue(m_is_delinquent));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_timezone_code_isSet) {
        obj.insert(QString("timezoneCode"), ::OpenAPI::toJsonValue(m_timezone_code));
    }
    return obj;
}

OAIAlertLog_jsonld_get__context OAIUserAccount_jsonld_get::getContext() const {
    return m_context;
}
void OAIUserAccount_jsonld_get::setContext(const OAIAlertLog_jsonld_get__context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_context_Set() const{
    return m_context_isSet;
}

bool OAIUserAccount_jsonld_get::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIUserAccount_jsonld_get::getId() const {
    return m_id;
}
void OAIUserAccount_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserAccount_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserAccount_jsonld_get::getType() const {
    return m_type;
}
void OAIUserAccount_jsonld_get::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUserAccount_jsonld_get::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUserAccount_jsonld_get::getAccountLevelCode() const {
    return m_account_level_code;
}
void OAIUserAccount_jsonld_get::setAccountLevelCode(const QString &account_level_code) {
    m_account_level_code = account_level_code;
    m_account_level_code_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_account_level_code_Set() const{
    return m_account_level_code_isSet;
}

bool OAIUserAccount_jsonld_get::is_account_level_code_Valid() const{
    return m_account_level_code_isValid;
}

qint32 OAIUserAccount_jsonld_get::getCreditsOveragePercentTripSwitch() const {
    return m_credits_overage_percent_trip_switch;
}
void OAIUserAccount_jsonld_get::setCreditsOveragePercentTripSwitch(const qint32 &credits_overage_percent_trip_switch) {
    m_credits_overage_percent_trip_switch = credits_overage_percent_trip_switch;
    m_credits_overage_percent_trip_switch_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_credits_overage_percent_trip_switch_Set() const{
    return m_credits_overage_percent_trip_switch_isSet;
}

bool OAIUserAccount_jsonld_get::is_credits_overage_percent_trip_switch_Valid() const{
    return m_credits_overage_percent_trip_switch_isValid;
}

QString OAIUserAccount_jsonld_get::getEmail() const {
    return m_email;
}
void OAIUserAccount_jsonld_get::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserAccount_jsonld_get::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserAccount_jsonld_get::getFirstName() const {
    return m_first_name;
}
void OAIUserAccount_jsonld_get::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserAccount_jsonld_get::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserAccount_jsonld_get::getId() const {
    return m_id;
}
void OAIUserAccount_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserAccount_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserAccount_jsonld_get::isIsDelinquent() const {
    return m_is_delinquent;
}
void OAIUserAccount_jsonld_get::setIsDelinquent(const bool &is_delinquent) {
    m_is_delinquent = is_delinquent;
    m_is_delinquent_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_is_delinquent_Set() const{
    return m_is_delinquent_isSet;
}

bool OAIUserAccount_jsonld_get::is_is_delinquent_Valid() const{
    return m_is_delinquent_isValid;
}

QString OAIUserAccount_jsonld_get::getLastName() const {
    return m_last_name;
}
void OAIUserAccount_jsonld_get::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserAccount_jsonld_get::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUserAccount_jsonld_get::getTimezoneCode() const {
    return m_timezone_code;
}
void OAIUserAccount_jsonld_get::setTimezoneCode(const QString &timezone_code) {
    m_timezone_code = timezone_code;
    m_timezone_code_isSet = true;
}

bool OAIUserAccount_jsonld_get::is_timezone_code_Set() const{
    return m_timezone_code_isSet;
}

bool OAIUserAccount_jsonld_get::is_timezone_code_Valid() const{
    return m_timezone_code_isValid;
}

bool OAIUserAccount_jsonld_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_level_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_overage_percent_trip_switch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_delinquent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccount_jsonld_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
