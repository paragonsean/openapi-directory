/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportBandwidthApi_H
#define OAI_OAITransportBandwidthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_bandwidth_get_collection_200_response.h"
#include "OAITransportBandwidth_get.h"
#include "OAITransportBandwidth_jsonld_get.h"
#include "OAITransportBandwidth_jsonld_post.h"
#include "OAITransportBandwidth_jsonld_put.h"
#include "OAITransportBandwidth_patch.h"
#include "OAITransportBandwidth_post.h"
#include "OAITransportBandwidth_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportBandwidthApi : public QObject {
    Q_OBJECT

public:
    OAITransportBandwidthApi(const int timeOut = 0);
    ~OAITransportBandwidthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportBandwidthGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportBandwidthIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportBandwidthIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_bandwidth_patch OAITransportBandwidth_patch [required]
    */
    virtual void apiTransportBandwidthIdPatch(const QString &id, const OAITransportBandwidth_patch &oai_transport_bandwidth_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_bandwidth_put OAITransportBandwidth_put [required]
    */
    virtual void apiTransportBandwidthIdPut(const QString &id, const OAITransportBandwidth_put &oai_transport_bandwidth_put);

    /**
    * @param[in]  oai_transport_bandwidth_post OAITransportBandwidth_post [required]
    */
    virtual void apiTransportBandwidthPost(const OAITransportBandwidth_post &oai_transport_bandwidth_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportBandwidthGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportBandwidthIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportBandwidthIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportBandwidthIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportBandwidthIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportBandwidthPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportBandwidthGetCollectionSignal(QList<OAITransportBandwidth_get> summary);
    void apiTransportBandwidthIdDeleteSignal();
    void apiTransportBandwidthIdGetSignal(OAITransportBandwidth_get summary);
    void apiTransportBandwidthIdPatchSignal(OAITransportBandwidth_get summary);
    void apiTransportBandwidthIdPutSignal(OAITransportBandwidth_get summary);
    void apiTransportBandwidthPostSignal(OAITransportBandwidth_get summary);


    void apiTransportBandwidthGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportBandwidth_get> summary);
    void apiTransportBandwidthIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportBandwidthIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportBandwidth_get summary);
    void apiTransportBandwidthIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportBandwidth_get summary);
    void apiTransportBandwidthIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportBandwidth_get summary);
    void apiTransportBandwidthPostSignalFull(OAIHttpRequestWorker *worker, OAITransportBandwidth_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthGetCollectionSignalError() instead")
    void apiTransportBandwidthGetCollectionSignalE(QList<OAITransportBandwidth_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthGetCollectionSignalError(QList<OAITransportBandwidth_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdDeleteSignalError() instead")
    void apiTransportBandwidthIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdGetSignalError() instead")
    void apiTransportBandwidthIdGetSignalE(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdGetSignalError(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdPatchSignalError() instead")
    void apiTransportBandwidthIdPatchSignalE(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdPatchSignalError(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdPutSignalError() instead")
    void apiTransportBandwidthIdPutSignalE(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdPutSignalError(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthPostSignalError() instead")
    void apiTransportBandwidthPostSignalE(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthPostSignalError(OAITransportBandwidth_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthGetCollectionSignalErrorFull() instead")
    void apiTransportBandwidthGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdDeleteSignalErrorFull() instead")
    void apiTransportBandwidthIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdGetSignalErrorFull() instead")
    void apiTransportBandwidthIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdPatchSignalErrorFull() instead")
    void apiTransportBandwidthIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthIdPutSignalErrorFull() instead")
    void apiTransportBandwidthIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportBandwidthPostSignalErrorFull() instead")
    void apiTransportBandwidthPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportBandwidthPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
