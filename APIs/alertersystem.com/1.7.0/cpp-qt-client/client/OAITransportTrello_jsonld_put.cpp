/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportTrello_jsonld_put.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportTrello_jsonld_put::OAITransportTrello_jsonld_put(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportTrello_jsonld_put::OAITransportTrello_jsonld_put() {
    this->initializeModel();
}

OAITransportTrello_jsonld_put::~OAITransportTrello_jsonld_put() {}

void OAITransportTrello_jsonld_put::initializeModel() {

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;

    m_trello_api_key_isSet = false;
    m_trello_api_key_isValid = false;

    m_trello_api_token_isSet = false;
    m_trello_api_token_isValid = false;

    m_trello_list_id_isSet = false;
    m_trello_list_id_isValid = false;
}

void OAITransportTrello_jsonld_put::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportTrello_jsonld_put::fromJsonObject(QJsonObject json) {

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;

    m_trello_api_key_isValid = ::OpenAPI::fromJsonValue(m_trello_api_key, json[QString("trelloApiKey")]);
    m_trello_api_key_isSet = !json[QString("trelloApiKey")].isNull() && m_trello_api_key_isValid;

    m_trello_api_token_isValid = ::OpenAPI::fromJsonValue(m_trello_api_token, json[QString("trelloApiToken")]);
    m_trello_api_token_isSet = !json[QString("trelloApiToken")].isNull() && m_trello_api_token_isValid;

    m_trello_list_id_isValid = ::OpenAPI::fromJsonValue(m_trello_list_id, json[QString("trelloListId")]);
    m_trello_list_id_isSet = !json[QString("trelloListId")].isNull() && m_trello_list_id_isValid;
}

QString OAITransportTrello_jsonld_put::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportTrello_jsonld_put::asJsonObject() const {
    QJsonObject obj;
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    if (m_trello_api_key_isSet) {
        obj.insert(QString("trelloApiKey"), ::OpenAPI::toJsonValue(m_trello_api_key));
    }
    if (m_trello_api_token_isSet) {
        obj.insert(QString("trelloApiToken"), ::OpenAPI::toJsonValue(m_trello_api_token));
    }
    if (m_trello_list_id_isSet) {
        obj.insert(QString("trelloListId"), ::OpenAPI::toJsonValue(m_trello_list_id));
    }
    return obj;
}

QString OAITransportTrello_jsonld_put::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportTrello_jsonld_put::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportTrello_jsonld_put::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportTrello_jsonld_put::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportTrello_jsonld_put::getTransportName() const {
    return m_transport_name;
}
void OAITransportTrello_jsonld_put::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportTrello_jsonld_put::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportTrello_jsonld_put::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

QString OAITransportTrello_jsonld_put::getTrelloApiKey() const {
    return m_trello_api_key;
}
void OAITransportTrello_jsonld_put::setTrelloApiKey(const QString &trello_api_key) {
    m_trello_api_key = trello_api_key;
    m_trello_api_key_isSet = true;
}

bool OAITransportTrello_jsonld_put::is_trello_api_key_Set() const{
    return m_trello_api_key_isSet;
}

bool OAITransportTrello_jsonld_put::is_trello_api_key_Valid() const{
    return m_trello_api_key_isValid;
}

QString OAITransportTrello_jsonld_put::getTrelloApiToken() const {
    return m_trello_api_token;
}
void OAITransportTrello_jsonld_put::setTrelloApiToken(const QString &trello_api_token) {
    m_trello_api_token = trello_api_token;
    m_trello_api_token_isSet = true;
}

bool OAITransportTrello_jsonld_put::is_trello_api_token_Set() const{
    return m_trello_api_token_isSet;
}

bool OAITransportTrello_jsonld_put::is_trello_api_token_Valid() const{
    return m_trello_api_token_isValid;
}

QString OAITransportTrello_jsonld_put::getTrelloListId() const {
    return m_trello_list_id;
}
void OAITransportTrello_jsonld_put::setTrelloListId(const QString &trello_list_id) {
    m_trello_list_id = trello_list_id;
    m_trello_list_id_isSet = true;
}

bool OAITransportTrello_jsonld_put::is_trello_list_id_Set() const{
    return m_trello_list_id_isSet;
}

bool OAITransportTrello_jsonld_put::is_trello_list_id_Valid() const{
    return m_trello_list_id_isValid;
}

bool OAITransportTrello_jsonld_put::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trello_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trello_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trello_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportTrello_jsonld_put::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transport_name_isValid && m_trello_api_key_isValid && m_trello_api_token_isValid && m_trello_list_id_isValid && true;
}

} // namespace OpenAPI
