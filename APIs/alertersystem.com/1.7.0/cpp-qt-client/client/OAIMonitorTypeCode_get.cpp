/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitorTypeCode_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitorTypeCode_get::OAIMonitorTypeCode_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitorTypeCode_get::OAIMonitorTypeCode_get() {
    this->initializeModel();
}

OAIMonitorTypeCode_get::~OAIMonitorTypeCode_get() {}

void OAIMonitorTypeCode_get::initializeModel() {

    m_code_description_isSet = false;
    m_code_description_isValid = false;

    m_code_description_expanded_isSet = false;
    m_code_description_expanded_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIMonitorTypeCode_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitorTypeCode_get::fromJsonObject(QJsonObject json) {

    m_code_description_isValid = ::OpenAPI::fromJsonValue(m_code_description, json[QString("codeDescription")]);
    m_code_description_isSet = !json[QString("codeDescription")].isNull() && m_code_description_isValid;

    m_code_description_expanded_isValid = ::OpenAPI::fromJsonValue(m_code_description_expanded, json[QString("codeDescriptionExpanded")]);
    m_code_description_expanded_isSet = !json[QString("codeDescriptionExpanded")].isNull() && m_code_description_expanded_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIMonitorTypeCode_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitorTypeCode_get::asJsonObject() const {
    QJsonObject obj;
    if (m_code_description_isSet) {
        obj.insert(QString("codeDescription"), ::OpenAPI::toJsonValue(m_code_description));
    }
    if (m_code_description_expanded_isSet) {
        obj.insert(QString("codeDescriptionExpanded"), ::OpenAPI::toJsonValue(m_code_description_expanded));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIMonitorTypeCode_get::getCodeDescription() const {
    return m_code_description;
}
void OAIMonitorTypeCode_get::setCodeDescription(const QString &code_description) {
    m_code_description = code_description;
    m_code_description_isSet = true;
}

bool OAIMonitorTypeCode_get::is_code_description_Set() const{
    return m_code_description_isSet;
}

bool OAIMonitorTypeCode_get::is_code_description_Valid() const{
    return m_code_description_isValid;
}

QString OAIMonitorTypeCode_get::getCodeDescriptionExpanded() const {
    return m_code_description_expanded;
}
void OAIMonitorTypeCode_get::setCodeDescriptionExpanded(const QString &code_description_expanded) {
    m_code_description_expanded = code_description_expanded;
    m_code_description_expanded_isSet = true;
}

bool OAIMonitorTypeCode_get::is_code_description_expanded_Set() const{
    return m_code_description_expanded_isSet;
}

bool OAIMonitorTypeCode_get::is_code_description_expanded_Valid() const{
    return m_code_description_expanded_isValid;
}

QString OAIMonitorTypeCode_get::getId() const {
    return m_id;
}
void OAIMonitorTypeCode_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMonitorTypeCode_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMonitorTypeCode_get::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMonitorTypeCode_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_description_expanded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitorTypeCode_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
