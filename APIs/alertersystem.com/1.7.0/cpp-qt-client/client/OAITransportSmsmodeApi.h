/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportSmsmodeApi_H
#define OAI_OAITransportSmsmodeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_smsmode_get_collection_200_response.h"
#include "OAITransportSmsmode_get.h"
#include "OAITransportSmsmode_jsonld_get.h"
#include "OAITransportSmsmode_jsonld_post.h"
#include "OAITransportSmsmode_jsonld_put.h"
#include "OAITransportSmsmode_patch.h"
#include "OAITransportSmsmode_post.h"
#include "OAITransportSmsmode_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportSmsmodeApi : public QObject {
    Q_OBJECT

public:
    OAITransportSmsmodeApi(const int timeOut = 0);
    ~OAITransportSmsmodeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportSmsmodeGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportSmsmodeIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportSmsmodeIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_smsmode_patch OAITransportSmsmode_patch [required]
    */
    virtual void apiTransportSmsmodeIdPatch(const QString &id, const OAITransportSmsmode_patch &oai_transport_smsmode_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_smsmode_put OAITransportSmsmode_put [required]
    */
    virtual void apiTransportSmsmodeIdPut(const QString &id, const OAITransportSmsmode_put &oai_transport_smsmode_put);

    /**
    * @param[in]  oai_transport_smsmode_post OAITransportSmsmode_post [required]
    */
    virtual void apiTransportSmsmodePost(const OAITransportSmsmode_post &oai_transport_smsmode_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportSmsmodeGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsmodeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsmodeIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsmodeIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsmodeIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmsmodePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportSmsmodeGetCollectionSignal(QList<OAITransportSmsmode_get> summary);
    void apiTransportSmsmodeIdDeleteSignal();
    void apiTransportSmsmodeIdGetSignal(OAITransportSmsmode_get summary);
    void apiTransportSmsmodeIdPatchSignal(OAITransportSmsmode_get summary);
    void apiTransportSmsmodeIdPutSignal(OAITransportSmsmode_get summary);
    void apiTransportSmsmodePostSignal(OAITransportSmsmode_get summary);


    void apiTransportSmsmodeGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportSmsmode_get> summary);
    void apiTransportSmsmodeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportSmsmodeIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsmode_get summary);
    void apiTransportSmsmodeIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsmode_get summary);
    void apiTransportSmsmodeIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsmode_get summary);
    void apiTransportSmsmodePostSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsmode_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeGetCollectionSignalError() instead")
    void apiTransportSmsmodeGetCollectionSignalE(QList<OAITransportSmsmode_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeGetCollectionSignalError(QList<OAITransportSmsmode_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdDeleteSignalError() instead")
    void apiTransportSmsmodeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdGetSignalError() instead")
    void apiTransportSmsmodeIdGetSignalE(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdGetSignalError(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdPatchSignalError() instead")
    void apiTransportSmsmodeIdPatchSignalE(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdPatchSignalError(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdPutSignalError() instead")
    void apiTransportSmsmodeIdPutSignalE(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdPutSignalError(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodePostSignalError() instead")
    void apiTransportSmsmodePostSignalE(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodePostSignalError(OAITransportSmsmode_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeGetCollectionSignalErrorFull() instead")
    void apiTransportSmsmodeGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdDeleteSignalErrorFull() instead")
    void apiTransportSmsmodeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdGetSignalErrorFull() instead")
    void apiTransportSmsmodeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdPatchSignalErrorFull() instead")
    void apiTransportSmsmodeIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodeIdPutSignalErrorFull() instead")
    void apiTransportSmsmodeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmsmodePostSignalErrorFull() instead")
    void apiTransportSmsmodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmsmodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
