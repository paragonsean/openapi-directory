/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportSendinblue_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportSendinblue_post::OAITransportSendinblue_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportSendinblue_post::OAITransportSendinblue_post() {
    this->initializeModel();
}

OAITransportSendinblue_post::~OAITransportSendinblue_post() {}

void OAITransportSendinblue_post::initializeModel() {

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_sendinblue_api_key_isSet = false;
    m_sendinblue_api_key_isValid = false;

    m_sendinblue_sender_phone_isSet = false;
    m_sendinblue_sender_phone_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;
}

void OAITransportSendinblue_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportSendinblue_post::fromJsonObject(QJsonObject json) {

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_sendinblue_api_key_isValid = ::OpenAPI::fromJsonValue(m_sendinblue_api_key, json[QString("sendinblueApiKey")]);
    m_sendinblue_api_key_isSet = !json[QString("sendinblueApiKey")].isNull() && m_sendinblue_api_key_isValid;

    m_sendinblue_sender_phone_isValid = ::OpenAPI::fromJsonValue(m_sendinblue_sender_phone, json[QString("sendinblueSenderPhone")]);
    m_sendinblue_sender_phone_isSet = !json[QString("sendinblueSenderPhone")].isNull() && m_sendinblue_sender_phone_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;
}

QString OAITransportSendinblue_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportSendinblue_post::asJsonObject() const {
    QJsonObject obj;
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_sendinblue_api_key_isSet) {
        obj.insert(QString("sendinblueApiKey"), ::OpenAPI::toJsonValue(m_sendinblue_api_key));
    }
    if (m_sendinblue_sender_phone_isSet) {
        obj.insert(QString("sendinblueSenderPhone"), ::OpenAPI::toJsonValue(m_sendinblue_sender_phone));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    return obj;
}

QString OAITransportSendinblue_post::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportSendinblue_post::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportSendinblue_post::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportSendinblue_post::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportSendinblue_post::getPartition() const {
    return m_partition;
}
void OAITransportSendinblue_post::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAITransportSendinblue_post::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAITransportSendinblue_post::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAITransportSendinblue_post::getSendinblueApiKey() const {
    return m_sendinblue_api_key;
}
void OAITransportSendinblue_post::setSendinblueApiKey(const QString &sendinblue_api_key) {
    m_sendinblue_api_key = sendinblue_api_key;
    m_sendinblue_api_key_isSet = true;
}

bool OAITransportSendinblue_post::is_sendinblue_api_key_Set() const{
    return m_sendinblue_api_key_isSet;
}

bool OAITransportSendinblue_post::is_sendinblue_api_key_Valid() const{
    return m_sendinblue_api_key_isValid;
}

QString OAITransportSendinblue_post::getSendinblueSenderPhone() const {
    return m_sendinblue_sender_phone;
}
void OAITransportSendinblue_post::setSendinblueSenderPhone(const QString &sendinblue_sender_phone) {
    m_sendinblue_sender_phone = sendinblue_sender_phone;
    m_sendinblue_sender_phone_isSet = true;
}

bool OAITransportSendinblue_post::is_sendinblue_sender_phone_Set() const{
    return m_sendinblue_sender_phone_isSet;
}

bool OAITransportSendinblue_post::is_sendinblue_sender_phone_Valid() const{
    return m_sendinblue_sender_phone_isValid;
}

QString OAITransportSendinblue_post::getTransportName() const {
    return m_transport_name;
}
void OAITransportSendinblue_post::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportSendinblue_post::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportSendinblue_post::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

bool OAITransportSendinblue_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sendinblue_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sendinblue_sender_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportSendinblue_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partition_isValid && m_sendinblue_api_key_isValid && m_sendinblue_sender_phone_isValid && m_transport_name_isValid && true;
}

} // namespace OpenAPI
