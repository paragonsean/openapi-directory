/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertLog_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertLog_get::OAIAlertLog_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertLog_get::OAIAlertLog_get() {
    this->initializeModel();
}

OAIAlertLog_get::~OAIAlertLog_get() {}

void OAIAlertLog_get::initializeModel() {

    m_alert_log_error_message_isSet = false;
    m_alert_log_error_message_isValid = false;

    m_alert_log_message_id_isSet = false;
    m_alert_log_message_id_isValid = false;

    m_alert_log_status_code_isSet = false;
    m_alert_log_status_code_isValid = false;

    m_alert_service_isSet = false;
    m_alert_service_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_monitor_isSet = false;
    m_monitor_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_ping_isSet = false;
    m_ping_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_webhook_response_body_isSet = false;
    m_webhook_response_body_isValid = false;

    m_webhook_response_headers_isSet = false;
    m_webhook_response_headers_isValid = false;
}

void OAIAlertLog_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertLog_get::fromJsonObject(QJsonObject json) {

    m_alert_log_error_message_isValid = ::OpenAPI::fromJsonValue(m_alert_log_error_message, json[QString("alertLogErrorMessage")]);
    m_alert_log_error_message_isSet = !json[QString("alertLogErrorMessage")].isNull() && m_alert_log_error_message_isValid;

    m_alert_log_message_id_isValid = ::OpenAPI::fromJsonValue(m_alert_log_message_id, json[QString("alertLogMessageId")]);
    m_alert_log_message_id_isSet = !json[QString("alertLogMessageId")].isNull() && m_alert_log_message_id_isValid;

    m_alert_log_status_code_isValid = ::OpenAPI::fromJsonValue(m_alert_log_status_code, json[QString("alertLogStatusCode")]);
    m_alert_log_status_code_isSet = !json[QString("alertLogStatusCode")].isNull() && m_alert_log_status_code_isValid;

    m_alert_service_isValid = ::OpenAPI::fromJsonValue(m_alert_service, json[QString("alertService")]);
    m_alert_service_isSet = !json[QString("alertService")].isNull() && m_alert_service_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_monitor_isValid = ::OpenAPI::fromJsonValue(m_monitor, json[QString("monitor")]);
    m_monitor_isSet = !json[QString("monitor")].isNull() && m_monitor_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_ping_isValid = ::OpenAPI::fromJsonValue(m_ping, json[QString("ping")]);
    m_ping_isSet = !json[QString("ping")].isNull() && m_ping_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_webhook_response_body_isValid = ::OpenAPI::fromJsonValue(m_webhook_response_body, json[QString("webhookResponseBody")]);
    m_webhook_response_body_isSet = !json[QString("webhookResponseBody")].isNull() && m_webhook_response_body_isValid;

    m_webhook_response_headers_isValid = ::OpenAPI::fromJsonValue(m_webhook_response_headers, json[QString("webhookResponseHeaders")]);
    m_webhook_response_headers_isSet = !json[QString("webhookResponseHeaders")].isNull() && m_webhook_response_headers_isValid;
}

QString OAIAlertLog_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertLog_get::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_log_error_message_isSet) {
        obj.insert(QString("alertLogErrorMessage"), ::OpenAPI::toJsonValue(m_alert_log_error_message));
    }
    if (m_alert_log_message_id_isSet) {
        obj.insert(QString("alertLogMessageId"), ::OpenAPI::toJsonValue(m_alert_log_message_id));
    }
    if (m_alert_log_status_code_isSet) {
        obj.insert(QString("alertLogStatusCode"), ::OpenAPI::toJsonValue(m_alert_log_status_code));
    }
    if (m_alert_service_isSet) {
        obj.insert(QString("alertService"), ::OpenAPI::toJsonValue(m_alert_service));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_monitor_isSet) {
        obj.insert(QString("monitor"), ::OpenAPI::toJsonValue(m_monitor));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_ping_isSet) {
        obj.insert(QString("ping"), ::OpenAPI::toJsonValue(m_ping));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_webhook_response_body_isSet) {
        obj.insert(QString("webhookResponseBody"), ::OpenAPI::toJsonValue(m_webhook_response_body));
    }
    if (m_webhook_response_headers.size() > 0) {
        obj.insert(QString("webhookResponseHeaders"), ::OpenAPI::toJsonValue(m_webhook_response_headers));
    }
    return obj;
}

QString OAIAlertLog_get::getAlertLogErrorMessage() const {
    return m_alert_log_error_message;
}
void OAIAlertLog_get::setAlertLogErrorMessage(const QString &alert_log_error_message) {
    m_alert_log_error_message = alert_log_error_message;
    m_alert_log_error_message_isSet = true;
}

bool OAIAlertLog_get::is_alert_log_error_message_Set() const{
    return m_alert_log_error_message_isSet;
}

bool OAIAlertLog_get::is_alert_log_error_message_Valid() const{
    return m_alert_log_error_message_isValid;
}

QString OAIAlertLog_get::getAlertLogMessageId() const {
    return m_alert_log_message_id;
}
void OAIAlertLog_get::setAlertLogMessageId(const QString &alert_log_message_id) {
    m_alert_log_message_id = alert_log_message_id;
    m_alert_log_message_id_isSet = true;
}

bool OAIAlertLog_get::is_alert_log_message_id_Set() const{
    return m_alert_log_message_id_isSet;
}

bool OAIAlertLog_get::is_alert_log_message_id_Valid() const{
    return m_alert_log_message_id_isValid;
}

QString OAIAlertLog_get::getAlertLogStatusCode() const {
    return m_alert_log_status_code;
}
void OAIAlertLog_get::setAlertLogStatusCode(const QString &alert_log_status_code) {
    m_alert_log_status_code = alert_log_status_code;
    m_alert_log_status_code_isSet = true;
}

bool OAIAlertLog_get::is_alert_log_status_code_Set() const{
    return m_alert_log_status_code_isSet;
}

bool OAIAlertLog_get::is_alert_log_status_code_Valid() const{
    return m_alert_log_status_code_isValid;
}

QString OAIAlertLog_get::getAlertService() const {
    return m_alert_service;
}
void OAIAlertLog_get::setAlertService(const QString &alert_service) {
    m_alert_service = alert_service;
    m_alert_service_isSet = true;
}

bool OAIAlertLog_get::is_alert_service_Set() const{
    return m_alert_service_isSet;
}

bool OAIAlertLog_get::is_alert_service_Valid() const{
    return m_alert_service_isValid;
}

QDateTime OAIAlertLog_get::getCreatedAt() const {
    return m_created_at;
}
void OAIAlertLog_get::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAlertLog_get::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAlertLog_get::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAlertLog_get::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAIAlertLog_get::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAIAlertLog_get::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAIAlertLog_get::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAIAlertLog_get::getId() const {
    return m_id;
}
void OAIAlertLog_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlertLog_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlertLog_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAlertLog_get::getMonitor() const {
    return m_monitor;
}
void OAIAlertLog_get::setMonitor(const QString &monitor) {
    m_monitor = monitor;
    m_monitor_isSet = true;
}

bool OAIAlertLog_get::is_monitor_Set() const{
    return m_monitor_isSet;
}

bool OAIAlertLog_get::is_monitor_Valid() const{
    return m_monitor_isValid;
}

QString OAIAlertLog_get::getPartition() const {
    return m_partition;
}
void OAIAlertLog_get::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIAlertLog_get::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIAlertLog_get::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAIAlertLog_get::getPing() const {
    return m_ping;
}
void OAIAlertLog_get::setPing(const QString &ping) {
    m_ping = ping;
    m_ping_isSet = true;
}

bool OAIAlertLog_get::is_ping_Set() const{
    return m_ping_isSet;
}

bool OAIAlertLog_get::is_ping_Valid() const{
    return m_ping_isValid;
}

QString OAIAlertLog_get::getResourceOwner() const {
    return m_resource_owner;
}
void OAIAlertLog_get::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIAlertLog_get::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIAlertLog_get::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAIAlertLog_get::getWebhookResponseBody() const {
    return m_webhook_response_body;
}
void OAIAlertLog_get::setWebhookResponseBody(const QString &webhook_response_body) {
    m_webhook_response_body = webhook_response_body;
    m_webhook_response_body_isSet = true;
}

bool OAIAlertLog_get::is_webhook_response_body_Set() const{
    return m_webhook_response_body_isSet;
}

bool OAIAlertLog_get::is_webhook_response_body_Valid() const{
    return m_webhook_response_body_isValid;
}

QList<QString> OAIAlertLog_get::getWebhookResponseHeaders() const {
    return m_webhook_response_headers;
}
void OAIAlertLog_get::setWebhookResponseHeaders(const QList<QString> &webhook_response_headers) {
    m_webhook_response_headers = webhook_response_headers;
    m_webhook_response_headers_isSet = true;
}

bool OAIAlertLog_get::is_webhook_response_headers_Set() const{
    return m_webhook_response_headers_isSet;
}

bool OAIAlertLog_get::is_webhook_response_headers_Valid() const{
    return m_webhook_response_headers_isValid;
}

bool OAIAlertLog_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_log_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_log_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_log_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_response_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_response_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertLog_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
