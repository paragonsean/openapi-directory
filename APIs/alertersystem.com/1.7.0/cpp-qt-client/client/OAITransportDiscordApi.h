/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportDiscordApi_H
#define OAI_OAITransportDiscordApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_discord_get_collection_200_response.h"
#include "OAITransportDiscord_get.h"
#include "OAITransportDiscord_jsonld_get.h"
#include "OAITransportDiscord_jsonld_post.h"
#include "OAITransportDiscord_jsonld_put.h"
#include "OAITransportDiscord_patch.h"
#include "OAITransportDiscord_post.h"
#include "OAITransportDiscord_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportDiscordApi : public QObject {
    Q_OBJECT

public:
    OAITransportDiscordApi(const int timeOut = 0);
    ~OAITransportDiscordApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportDiscordGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportDiscordIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportDiscordIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_discord_patch OAITransportDiscord_patch [required]
    */
    virtual void apiTransportDiscordIdPatch(const QString &id, const OAITransportDiscord_patch &oai_transport_discord_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_discord_put OAITransportDiscord_put [required]
    */
    virtual void apiTransportDiscordIdPut(const QString &id, const OAITransportDiscord_put &oai_transport_discord_put);

    /**
    * @param[in]  oai_transport_discord_post OAITransportDiscord_post [required]
    */
    virtual void apiTransportDiscordPost(const OAITransportDiscord_post &oai_transport_discord_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportDiscordGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportDiscordIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportDiscordIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportDiscordIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportDiscordIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportDiscordPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportDiscordGetCollectionSignal(QList<OAITransportDiscord_get> summary);
    void apiTransportDiscordIdDeleteSignal();
    void apiTransportDiscordIdGetSignal(OAITransportDiscord_get summary);
    void apiTransportDiscordIdPatchSignal(OAITransportDiscord_get summary);
    void apiTransportDiscordIdPutSignal(OAITransportDiscord_get summary);
    void apiTransportDiscordPostSignal(OAITransportDiscord_get summary);


    void apiTransportDiscordGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportDiscord_get> summary);
    void apiTransportDiscordIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportDiscordIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportDiscord_get summary);
    void apiTransportDiscordIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportDiscord_get summary);
    void apiTransportDiscordIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportDiscord_get summary);
    void apiTransportDiscordPostSignalFull(OAIHttpRequestWorker *worker, OAITransportDiscord_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportDiscordGetCollectionSignalError() instead")
    void apiTransportDiscordGetCollectionSignalE(QList<OAITransportDiscord_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordGetCollectionSignalError(QList<OAITransportDiscord_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdDeleteSignalError() instead")
    void apiTransportDiscordIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdGetSignalError() instead")
    void apiTransportDiscordIdGetSignalE(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdGetSignalError(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdPatchSignalError() instead")
    void apiTransportDiscordIdPatchSignalE(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdPatchSignalError(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdPutSignalError() instead")
    void apiTransportDiscordIdPutSignalE(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdPutSignalError(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordPostSignalError() instead")
    void apiTransportDiscordPostSignalE(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordPostSignalError(OAITransportDiscord_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportDiscordGetCollectionSignalErrorFull() instead")
    void apiTransportDiscordGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdDeleteSignalErrorFull() instead")
    void apiTransportDiscordIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdGetSignalErrorFull() instead")
    void apiTransportDiscordIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdPatchSignalErrorFull() instead")
    void apiTransportDiscordIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordIdPutSignalErrorFull() instead")
    void apiTransportDiscordIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportDiscordPostSignalErrorFull() instead")
    void apiTransportDiscordPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportDiscordPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
