/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportPlivoApi_H
#define OAI_OAITransportPlivoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_plivo_get_collection_200_response.h"
#include "OAITransportPlivo_get.h"
#include "OAITransportPlivo_jsonld_get.h"
#include "OAITransportPlivo_jsonld_post.h"
#include "OAITransportPlivo_jsonld_put.h"
#include "OAITransportPlivo_patch.h"
#include "OAITransportPlivo_post.h"
#include "OAITransportPlivo_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportPlivoApi : public QObject {
    Q_OBJECT

public:
    OAITransportPlivoApi(const int timeOut = 0);
    ~OAITransportPlivoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportPlivoGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportPlivoIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportPlivoIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_plivo_patch OAITransportPlivo_patch [required]
    */
    virtual void apiTransportPlivoIdPatch(const QString &id, const OAITransportPlivo_patch &oai_transport_plivo_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_plivo_put OAITransportPlivo_put [required]
    */
    virtual void apiTransportPlivoIdPut(const QString &id, const OAITransportPlivo_put &oai_transport_plivo_put);

    /**
    * @param[in]  oai_transport_plivo_post OAITransportPlivo_post [required]
    */
    virtual void apiTransportPlivoPost(const OAITransportPlivo_post &oai_transport_plivo_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportPlivoGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportPlivoIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportPlivoIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportPlivoIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportPlivoIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportPlivoPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportPlivoGetCollectionSignal(QList<OAITransportPlivo_get> summary);
    void apiTransportPlivoIdDeleteSignal();
    void apiTransportPlivoIdGetSignal(OAITransportPlivo_get summary);
    void apiTransportPlivoIdPatchSignal(OAITransportPlivo_get summary);
    void apiTransportPlivoIdPutSignal(OAITransportPlivo_get summary);
    void apiTransportPlivoPostSignal(OAITransportPlivo_get summary);


    void apiTransportPlivoGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportPlivo_get> summary);
    void apiTransportPlivoIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportPlivoIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportPlivo_get summary);
    void apiTransportPlivoIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportPlivo_get summary);
    void apiTransportPlivoIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportPlivo_get summary);
    void apiTransportPlivoPostSignalFull(OAIHttpRequestWorker *worker, OAITransportPlivo_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportPlivoGetCollectionSignalError() instead")
    void apiTransportPlivoGetCollectionSignalE(QList<OAITransportPlivo_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoGetCollectionSignalError(QList<OAITransportPlivo_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdDeleteSignalError() instead")
    void apiTransportPlivoIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdGetSignalError() instead")
    void apiTransportPlivoIdGetSignalE(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdGetSignalError(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdPatchSignalError() instead")
    void apiTransportPlivoIdPatchSignalE(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdPatchSignalError(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdPutSignalError() instead")
    void apiTransportPlivoIdPutSignalE(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdPutSignalError(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoPostSignalError() instead")
    void apiTransportPlivoPostSignalE(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoPostSignalError(OAITransportPlivo_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportPlivoGetCollectionSignalErrorFull() instead")
    void apiTransportPlivoGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdDeleteSignalErrorFull() instead")
    void apiTransportPlivoIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdGetSignalErrorFull() instead")
    void apiTransportPlivoIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdPatchSignalErrorFull() instead")
    void apiTransportPlivoIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoIdPutSignalErrorFull() instead")
    void apiTransportPlivoIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportPlivoPostSignalErrorFull() instead")
    void apiTransportPlivoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportPlivoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
