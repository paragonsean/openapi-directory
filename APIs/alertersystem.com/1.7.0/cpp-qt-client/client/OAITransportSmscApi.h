/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportSmscApi_H
#define OAI_OAITransportSmscApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_smsc_get_collection_200_response.h"
#include "OAITransportSmsc_get.h"
#include "OAITransportSmsc_jsonld_get.h"
#include "OAITransportSmsc_jsonld_post.h"
#include "OAITransportSmsc_jsonld_put.h"
#include "OAITransportSmsc_patch.h"
#include "OAITransportSmsc_post.h"
#include "OAITransportSmsc_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportSmscApi : public QObject {
    Q_OBJECT

public:
    OAITransportSmscApi(const int timeOut = 0);
    ~OAITransportSmscApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportSmscGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportSmscIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportSmscIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_smsc_patch OAITransportSmsc_patch [required]
    */
    virtual void apiTransportSmscIdPatch(const QString &id, const OAITransportSmsc_patch &oai_transport_smsc_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_smsc_put OAITransportSmsc_put [required]
    */
    virtual void apiTransportSmscIdPut(const QString &id, const OAITransportSmsc_put &oai_transport_smsc_put);

    /**
    * @param[in]  oai_transport_smsc_post OAITransportSmsc_post [required]
    */
    virtual void apiTransportSmscPost(const OAITransportSmsc_post &oai_transport_smsc_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportSmscGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmscIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmscIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmscIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmscIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportSmscPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportSmscGetCollectionSignal(QList<OAITransportSmsc_get> summary);
    void apiTransportSmscIdDeleteSignal();
    void apiTransportSmscIdGetSignal(OAITransportSmsc_get summary);
    void apiTransportSmscIdPatchSignal(OAITransportSmsc_get summary);
    void apiTransportSmscIdPutSignal(OAITransportSmsc_get summary);
    void apiTransportSmscPostSignal(OAITransportSmsc_get summary);


    void apiTransportSmscGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportSmsc_get> summary);
    void apiTransportSmscIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportSmscIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsc_get summary);
    void apiTransportSmscIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsc_get summary);
    void apiTransportSmscIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsc_get summary);
    void apiTransportSmscPostSignalFull(OAIHttpRequestWorker *worker, OAITransportSmsc_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportSmscGetCollectionSignalError() instead")
    void apiTransportSmscGetCollectionSignalE(QList<OAITransportSmsc_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscGetCollectionSignalError(QList<OAITransportSmsc_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdDeleteSignalError() instead")
    void apiTransportSmscIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdGetSignalError() instead")
    void apiTransportSmscIdGetSignalE(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdGetSignalError(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdPatchSignalError() instead")
    void apiTransportSmscIdPatchSignalE(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdPatchSignalError(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdPutSignalError() instead")
    void apiTransportSmscIdPutSignalE(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdPutSignalError(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscPostSignalError() instead")
    void apiTransportSmscPostSignalE(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscPostSignalError(OAITransportSmsc_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportSmscGetCollectionSignalErrorFull() instead")
    void apiTransportSmscGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdDeleteSignalErrorFull() instead")
    void apiTransportSmscIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdGetSignalErrorFull() instead")
    void apiTransportSmscIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdPatchSignalErrorFull() instead")
    void apiTransportSmscIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscIdPutSignalErrorFull() instead")
    void apiTransportSmscIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportSmscPostSignalErrorFull() instead")
    void apiTransportSmscPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportSmscPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
