/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportGatewayApi_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportGatewayApi_get::OAITransportGatewayApi_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportGatewayApi_get::OAITransportGatewayApi_get() {
    this->initializeModel();
}

OAITransportGatewayApi_get::~OAITransportGatewayApi_get() {}

void OAITransportGatewayApi_get::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_gateway_api_from_isSet = false;
    m_gateway_api_from_isValid = false;

    m_gateway_api_token_isSet = false;
    m_gateway_api_token_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_transport_name_isSet = false;
    m_transport_name_isValid = false;
}

void OAITransportGatewayApi_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportGatewayApi_get::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_gateway_api_from_isValid = ::OpenAPI::fromJsonValue(m_gateway_api_from, json[QString("gatewayApiFrom")]);
    m_gateway_api_from_isSet = !json[QString("gatewayApiFrom")].isNull() && m_gateway_api_from_isValid;

    m_gateway_api_token_isValid = ::OpenAPI::fromJsonValue(m_gateway_api_token, json[QString("gatewayApiToken")]);
    m_gateway_api_token_isSet = !json[QString("gatewayApiToken")].isNull() && m_gateway_api_token_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_transport_name_isValid = ::OpenAPI::fromJsonValue(m_transport_name, json[QString("transportName")]);
    m_transport_name_isSet = !json[QString("transportName")].isNull() && m_transport_name_isValid;
}

QString OAITransportGatewayApi_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportGatewayApi_get::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_gateway_api_from_isSet) {
        obj.insert(QString("gatewayApiFrom"), ::OpenAPI::toJsonValue(m_gateway_api_from));
    }
    if (m_gateway_api_token_isSet) {
        obj.insert(QString("gatewayApiToken"), ::OpenAPI::toJsonValue(m_gateway_api_token));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_transport_name_isSet) {
        obj.insert(QString("transportName"), ::OpenAPI::toJsonValue(m_transport_name));
    }
    return obj;
}

QDateTime OAITransportGatewayApi_get::getCreatedAt() const {
    return m_created_at;
}
void OAITransportGatewayApi_get::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransportGatewayApi_get::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransportGatewayApi_get::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITransportGatewayApi_get::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITransportGatewayApi_get::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITransportGatewayApi_get::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITransportGatewayApi_get::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITransportGatewayApi_get::getGatewayApiFrom() const {
    return m_gateway_api_from;
}
void OAITransportGatewayApi_get::setGatewayApiFrom(const QString &gateway_api_from) {
    m_gateway_api_from = gateway_api_from;
    m_gateway_api_from_isSet = true;
}

bool OAITransportGatewayApi_get::is_gateway_api_from_Set() const{
    return m_gateway_api_from_isSet;
}

bool OAITransportGatewayApi_get::is_gateway_api_from_Valid() const{
    return m_gateway_api_from_isValid;
}

QString OAITransportGatewayApi_get::getGatewayApiToken() const {
    return m_gateway_api_token;
}
void OAITransportGatewayApi_get::setGatewayApiToken(const QString &gateway_api_token) {
    m_gateway_api_token = gateway_api_token;
    m_gateway_api_token_isSet = true;
}

bool OAITransportGatewayApi_get::is_gateway_api_token_Set() const{
    return m_gateway_api_token_isSet;
}

bool OAITransportGatewayApi_get::is_gateway_api_token_Valid() const{
    return m_gateway_api_token_isValid;
}

QString OAITransportGatewayApi_get::getId() const {
    return m_id;
}
void OAITransportGatewayApi_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransportGatewayApi_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransportGatewayApi_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransportGatewayApi_get::getPartition() const {
    return m_partition;
}
void OAITransportGatewayApi_get::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAITransportGatewayApi_get::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAITransportGatewayApi_get::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAITransportGatewayApi_get::getResourceOwner() const {
    return m_resource_owner;
}
void OAITransportGatewayApi_get::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAITransportGatewayApi_get::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAITransportGatewayApi_get::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAITransportGatewayApi_get::getTransportName() const {
    return m_transport_name;
}
void OAITransportGatewayApi_get::setTransportName(const QString &transport_name) {
    m_transport_name = transport_name;
    m_transport_name_isSet = true;
}

bool OAITransportGatewayApi_get::is_transport_name_Set() const{
    return m_transport_name_isSet;
}

bool OAITransportGatewayApi_get::is_transport_name_Valid() const{
    return m_transport_name_isValid;
}

bool OAITransportGatewayApi_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_api_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportGatewayApi_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_api_from_isValid && m_gateway_api_token_isValid && m_partition_isValid && m_transport_name_isValid && true;
}

} // namespace OpenAPI
