/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPing_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPing_post::OAIPing_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPing_post::OAIPing_post() {
    this->initializeModel();
}

OAIPing_post::~OAIPing_post() {}

void OAIPing_post::initializeModel() {

    m_expect_next_ping_at_isSet = false;
    m_expect_next_ping_at_isValid = false;

    m_expect_next_ping_at_epoch_isSet = false;
    m_expect_next_ping_at_epoch_isValid = false;

    m_monitor_isSet = false;
    m_monitor_isValid = false;

    m_ping_custom_code_isSet = false;
    m_ping_custom_code_isValid = false;

    m_ping_custom_payload_isSet = false;
    m_ping_custom_payload_isValid = false;
}

void OAIPing_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPing_post::fromJsonObject(QJsonObject json) {

    m_expect_next_ping_at_isValid = ::OpenAPI::fromJsonValue(m_expect_next_ping_at, json[QString("expectNextPingAt")]);
    m_expect_next_ping_at_isSet = !json[QString("expectNextPingAt")].isNull() && m_expect_next_ping_at_isValid;

    m_expect_next_ping_at_epoch_isValid = ::OpenAPI::fromJsonValue(m_expect_next_ping_at_epoch, json[QString("expectNextPingAtEpoch")]);
    m_expect_next_ping_at_epoch_isSet = !json[QString("expectNextPingAtEpoch")].isNull() && m_expect_next_ping_at_epoch_isValid;

    m_monitor_isValid = ::OpenAPI::fromJsonValue(m_monitor, json[QString("monitor")]);
    m_monitor_isSet = !json[QString("monitor")].isNull() && m_monitor_isValid;

    m_ping_custom_code_isValid = ::OpenAPI::fromJsonValue(m_ping_custom_code, json[QString("pingCustomCode")]);
    m_ping_custom_code_isSet = !json[QString("pingCustomCode")].isNull() && m_ping_custom_code_isValid;

    m_ping_custom_payload_isValid = ::OpenAPI::fromJsonValue(m_ping_custom_payload, json[QString("pingCustomPayload")]);
    m_ping_custom_payload_isSet = !json[QString("pingCustomPayload")].isNull() && m_ping_custom_payload_isValid;
}

QString OAIPing_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPing_post::asJsonObject() const {
    QJsonObject obj;
    if (m_expect_next_ping_at_isSet) {
        obj.insert(QString("expectNextPingAt"), ::OpenAPI::toJsonValue(m_expect_next_ping_at));
    }
    if (m_expect_next_ping_at_epoch_isSet) {
        obj.insert(QString("expectNextPingAtEpoch"), ::OpenAPI::toJsonValue(m_expect_next_ping_at_epoch));
    }
    if (m_monitor_isSet) {
        obj.insert(QString("monitor"), ::OpenAPI::toJsonValue(m_monitor));
    }
    if (m_ping_custom_code_isSet) {
        obj.insert(QString("pingCustomCode"), ::OpenAPI::toJsonValue(m_ping_custom_code));
    }
    if (m_ping_custom_payload_isSet) {
        obj.insert(QString("pingCustomPayload"), ::OpenAPI::toJsonValue(m_ping_custom_payload));
    }
    return obj;
}

QDateTime OAIPing_post::getExpectNextPingAt() const {
    return m_expect_next_ping_at;
}
void OAIPing_post::setExpectNextPingAt(const QDateTime &expect_next_ping_at) {
    m_expect_next_ping_at = expect_next_ping_at;
    m_expect_next_ping_at_isSet = true;
}

bool OAIPing_post::is_expect_next_ping_at_Set() const{
    return m_expect_next_ping_at_isSet;
}

bool OAIPing_post::is_expect_next_ping_at_Valid() const{
    return m_expect_next_ping_at_isValid;
}

qint32 OAIPing_post::getExpectNextPingAtEpoch() const {
    return m_expect_next_ping_at_epoch;
}
void OAIPing_post::setExpectNextPingAtEpoch(const qint32 &expect_next_ping_at_epoch) {
    m_expect_next_ping_at_epoch = expect_next_ping_at_epoch;
    m_expect_next_ping_at_epoch_isSet = true;
}

bool OAIPing_post::is_expect_next_ping_at_epoch_Set() const{
    return m_expect_next_ping_at_epoch_isSet;
}

bool OAIPing_post::is_expect_next_ping_at_epoch_Valid() const{
    return m_expect_next_ping_at_epoch_isValid;
}

QString OAIPing_post::getMonitor() const {
    return m_monitor;
}
void OAIPing_post::setMonitor(const QString &monitor) {
    m_monitor = monitor;
    m_monitor_isSet = true;
}

bool OAIPing_post::is_monitor_Set() const{
    return m_monitor_isSet;
}

bool OAIPing_post::is_monitor_Valid() const{
    return m_monitor_isValid;
}

QString OAIPing_post::getPingCustomCode() const {
    return m_ping_custom_code;
}
void OAIPing_post::setPingCustomCode(const QString &ping_custom_code) {
    m_ping_custom_code = ping_custom_code;
    m_ping_custom_code_isSet = true;
}

bool OAIPing_post::is_ping_custom_code_Set() const{
    return m_ping_custom_code_isSet;
}

bool OAIPing_post::is_ping_custom_code_Valid() const{
    return m_ping_custom_code_isValid;
}

QString OAIPing_post::getPingCustomPayload() const {
    return m_ping_custom_payload;
}
void OAIPing_post::setPingCustomPayload(const QString &ping_custom_payload) {
    m_ping_custom_payload = ping_custom_payload;
    m_ping_custom_payload_isSet = true;
}

bool OAIPing_post::is_ping_custom_payload_Set() const{
    return m_ping_custom_payload_isSet;
}

bool OAIPing_post::is_ping_custom_payload_Valid() const{
    return m_ping_custom_payload_isValid;
}

bool OAIPing_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expect_next_ping_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expect_next_ping_at_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_custom_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_custom_payload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPing_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_monitor_isValid && true;
}

} // namespace OpenAPI
