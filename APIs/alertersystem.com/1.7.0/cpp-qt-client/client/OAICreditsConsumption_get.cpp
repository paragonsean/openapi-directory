/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditsConsumption_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditsConsumption_get::OAICreditsConsumption_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditsConsumption_get::OAICreditsConsumption_get() {
    this->initializeModel();
}

OAICreditsConsumption_get::~OAICreditsConsumption_get() {}

void OAICreditsConsumption_get::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_credits_consumption_event_code_isSet = false;
    m_credits_consumption_event_code_isValid = false;

    m_credits_consumption_notes_isSet = false;
    m_credits_consumption_notes_isValid = false;

    m_credits_event_id_isSet = false;
    m_credits_event_id_isValid = false;

    m_credits_event_iri_isSet = false;
    m_credits_event_iri_isValid = false;

    m_credits_used_isSet = false;
    m_credits_used_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICreditsConsumption_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditsConsumption_get::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_credits_consumption_event_code_isValid = ::OpenAPI::fromJsonValue(m_credits_consumption_event_code, json[QString("creditsConsumptionEventCode")]);
    m_credits_consumption_event_code_isSet = !json[QString("creditsConsumptionEventCode")].isNull() && m_credits_consumption_event_code_isValid;

    m_credits_consumption_notes_isValid = ::OpenAPI::fromJsonValue(m_credits_consumption_notes, json[QString("creditsConsumptionNotes")]);
    m_credits_consumption_notes_isSet = !json[QString("creditsConsumptionNotes")].isNull() && m_credits_consumption_notes_isValid;

    m_credits_event_id_isValid = ::OpenAPI::fromJsonValue(m_credits_event_id, json[QString("creditsEventId")]);
    m_credits_event_id_isSet = !json[QString("creditsEventId")].isNull() && m_credits_event_id_isValid;

    m_credits_event_iri_isValid = ::OpenAPI::fromJsonValue(m_credits_event_iri, json[QString("creditsEventIri")]);
    m_credits_event_iri_isSet = !json[QString("creditsEventIri")].isNull() && m_credits_event_iri_isValid;

    m_credits_used_isValid = ::OpenAPI::fromJsonValue(m_credits_used, json[QString("creditsUsed")]);
    m_credits_used_isSet = !json[QString("creditsUsed")].isNull() && m_credits_used_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICreditsConsumption_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditsConsumption_get::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_credits_consumption_event_code_isSet) {
        obj.insert(QString("creditsConsumptionEventCode"), ::OpenAPI::toJsonValue(m_credits_consumption_event_code));
    }
    if (m_credits_consumption_notes_isSet) {
        obj.insert(QString("creditsConsumptionNotes"), ::OpenAPI::toJsonValue(m_credits_consumption_notes));
    }
    if (m_credits_event_id_isSet) {
        obj.insert(QString("creditsEventId"), ::OpenAPI::toJsonValue(m_credits_event_id));
    }
    if (m_credits_event_iri_isSet) {
        obj.insert(QString("creditsEventIri"), ::OpenAPI::toJsonValue(m_credits_event_iri));
    }
    if (m_credits_used_isSet) {
        obj.insert(QString("creditsUsed"), ::OpenAPI::toJsonValue(m_credits_used));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QDateTime OAICreditsConsumption_get::getCreatedAt() const {
    return m_created_at;
}
void OAICreditsConsumption_get::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreditsConsumption_get::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreditsConsumption_get::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreditsConsumption_get::getCreditsConsumptionEventCode() const {
    return m_credits_consumption_event_code;
}
void OAICreditsConsumption_get::setCreditsConsumptionEventCode(const QString &credits_consumption_event_code) {
    m_credits_consumption_event_code = credits_consumption_event_code;
    m_credits_consumption_event_code_isSet = true;
}

bool OAICreditsConsumption_get::is_credits_consumption_event_code_Set() const{
    return m_credits_consumption_event_code_isSet;
}

bool OAICreditsConsumption_get::is_credits_consumption_event_code_Valid() const{
    return m_credits_consumption_event_code_isValid;
}

QString OAICreditsConsumption_get::getCreditsConsumptionNotes() const {
    return m_credits_consumption_notes;
}
void OAICreditsConsumption_get::setCreditsConsumptionNotes(const QString &credits_consumption_notes) {
    m_credits_consumption_notes = credits_consumption_notes;
    m_credits_consumption_notes_isSet = true;
}

bool OAICreditsConsumption_get::is_credits_consumption_notes_Set() const{
    return m_credits_consumption_notes_isSet;
}

bool OAICreditsConsumption_get::is_credits_consumption_notes_Valid() const{
    return m_credits_consumption_notes_isValid;
}

QString OAICreditsConsumption_get::getCreditsEventId() const {
    return m_credits_event_id;
}
void OAICreditsConsumption_get::setCreditsEventId(const QString &credits_event_id) {
    m_credits_event_id = credits_event_id;
    m_credits_event_id_isSet = true;
}

bool OAICreditsConsumption_get::is_credits_event_id_Set() const{
    return m_credits_event_id_isSet;
}

bool OAICreditsConsumption_get::is_credits_event_id_Valid() const{
    return m_credits_event_id_isValid;
}

QString OAICreditsConsumption_get::getCreditsEventIri() const {
    return m_credits_event_iri;
}
void OAICreditsConsumption_get::setCreditsEventIri(const QString &credits_event_iri) {
    m_credits_event_iri = credits_event_iri;
    m_credits_event_iri_isSet = true;
}

bool OAICreditsConsumption_get::is_credits_event_iri_Set() const{
    return m_credits_event_iri_isSet;
}

bool OAICreditsConsumption_get::is_credits_event_iri_Valid() const{
    return m_credits_event_iri_isValid;
}

QString OAICreditsConsumption_get::getCreditsUsed() const {
    return m_credits_used;
}
void OAICreditsConsumption_get::setCreditsUsed(const QString &credits_used) {
    m_credits_used = credits_used;
    m_credits_used_isSet = true;
}

bool OAICreditsConsumption_get::is_credits_used_Set() const{
    return m_credits_used_isSet;
}

bool OAICreditsConsumption_get::is_credits_used_Valid() const{
    return m_credits_used_isValid;
}

QString OAICreditsConsumption_get::getId() const {
    return m_id;
}
void OAICreditsConsumption_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreditsConsumption_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreditsConsumption_get::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICreditsConsumption_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_consumption_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_consumption_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_event_iri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditsConsumption_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
