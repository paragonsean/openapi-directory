/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportEmailApi_H
#define OAI_OAITransportEmailApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_email_get_collection_200_response.h"
#include "OAITransportEmail_get.h"
#include "OAITransportEmail_jsonld_get.h"
#include "OAITransportEmail_jsonld_post.h"
#include "OAITransportEmail_jsonld_put.h"
#include "OAITransportEmail_patch.h"
#include "OAITransportEmail_post.h"
#include "OAITransportEmail_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportEmailApi : public QObject {
    Q_OBJECT

public:
    OAITransportEmailApi(const int timeOut = 0);
    ~OAITransportEmailApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportEmailGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportEmailIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportEmailIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_email_patch OAITransportEmail_patch [required]
    */
    virtual void apiTransportEmailIdPatch(const QString &id, const OAITransportEmail_patch &oai_transport_email_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_email_put OAITransportEmail_put [required]
    */
    virtual void apiTransportEmailIdPut(const QString &id, const OAITransportEmail_put &oai_transport_email_put);

    /**
    * @param[in]  oai_transport_email_post OAITransportEmail_post [required]
    */
    virtual void apiTransportEmailPost(const OAITransportEmail_post &oai_transport_email_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportEmailGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportEmailIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportEmailIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportEmailIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportEmailIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportEmailPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportEmailGetCollectionSignal(QList<OAITransportEmail_get> summary);
    void apiTransportEmailIdDeleteSignal();
    void apiTransportEmailIdGetSignal(OAITransportEmail_get summary);
    void apiTransportEmailIdPatchSignal(OAITransportEmail_get summary);
    void apiTransportEmailIdPutSignal(OAITransportEmail_get summary);
    void apiTransportEmailPostSignal(OAITransportEmail_get summary);


    void apiTransportEmailGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportEmail_get> summary);
    void apiTransportEmailIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportEmailIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportEmail_get summary);
    void apiTransportEmailIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportEmail_get summary);
    void apiTransportEmailIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportEmail_get summary);
    void apiTransportEmailPostSignalFull(OAIHttpRequestWorker *worker, OAITransportEmail_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportEmailGetCollectionSignalError() instead")
    void apiTransportEmailGetCollectionSignalE(QList<OAITransportEmail_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailGetCollectionSignalError(QList<OAITransportEmail_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdDeleteSignalError() instead")
    void apiTransportEmailIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdGetSignalError() instead")
    void apiTransportEmailIdGetSignalE(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdGetSignalError(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdPatchSignalError() instead")
    void apiTransportEmailIdPatchSignalE(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdPatchSignalError(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdPutSignalError() instead")
    void apiTransportEmailIdPutSignalE(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdPutSignalError(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailPostSignalError() instead")
    void apiTransportEmailPostSignalE(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailPostSignalError(OAITransportEmail_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportEmailGetCollectionSignalErrorFull() instead")
    void apiTransportEmailGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdDeleteSignalErrorFull() instead")
    void apiTransportEmailIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdGetSignalErrorFull() instead")
    void apiTransportEmailIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdPatchSignalErrorFull() instead")
    void apiTransportEmailIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailIdPutSignalErrorFull() instead")
    void apiTransportEmailIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportEmailPostSignalErrorFull() instead")
    void apiTransportEmailPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportEmailPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
