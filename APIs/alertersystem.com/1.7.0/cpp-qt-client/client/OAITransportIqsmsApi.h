/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportIqsmsApi_H
#define OAI_OAITransportIqsmsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_iqsms_get_collection_200_response.h"
#include "OAITransportIqsms_get.h"
#include "OAITransportIqsms_jsonld_get.h"
#include "OAITransportIqsms_jsonld_post.h"
#include "OAITransportIqsms_jsonld_put.h"
#include "OAITransportIqsms_patch.h"
#include "OAITransportIqsms_post.h"
#include "OAITransportIqsms_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportIqsmsApi : public QObject {
    Q_OBJECT

public:
    OAITransportIqsmsApi(const int timeOut = 0);
    ~OAITransportIqsmsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportIqsmsGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportIqsmsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportIqsmsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_iqsms_patch OAITransportIqsms_patch [required]
    */
    virtual void apiTransportIqsmsIdPatch(const QString &id, const OAITransportIqsms_patch &oai_transport_iqsms_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_iqsms_put OAITransportIqsms_put [required]
    */
    virtual void apiTransportIqsmsIdPut(const QString &id, const OAITransportIqsms_put &oai_transport_iqsms_put);

    /**
    * @param[in]  oai_transport_iqsms_post OAITransportIqsms_post [required]
    */
    virtual void apiTransportIqsmsPost(const OAITransportIqsms_post &oai_transport_iqsms_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportIqsmsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportIqsmsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportIqsmsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportIqsmsIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportIqsmsIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportIqsmsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportIqsmsGetCollectionSignal(QList<OAITransportIqsms_get> summary);
    void apiTransportIqsmsIdDeleteSignal();
    void apiTransportIqsmsIdGetSignal(OAITransportIqsms_get summary);
    void apiTransportIqsmsIdPatchSignal(OAITransportIqsms_get summary);
    void apiTransportIqsmsIdPutSignal(OAITransportIqsms_get summary);
    void apiTransportIqsmsPostSignal(OAITransportIqsms_get summary);


    void apiTransportIqsmsGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportIqsms_get> summary);
    void apiTransportIqsmsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportIqsmsIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportIqsms_get summary);
    void apiTransportIqsmsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportIqsms_get summary);
    void apiTransportIqsmsIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportIqsms_get summary);
    void apiTransportIqsmsPostSignalFull(OAIHttpRequestWorker *worker, OAITransportIqsms_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsGetCollectionSignalError() instead")
    void apiTransportIqsmsGetCollectionSignalE(QList<OAITransportIqsms_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsGetCollectionSignalError(QList<OAITransportIqsms_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdDeleteSignalError() instead")
    void apiTransportIqsmsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdGetSignalError() instead")
    void apiTransportIqsmsIdGetSignalE(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdGetSignalError(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdPatchSignalError() instead")
    void apiTransportIqsmsIdPatchSignalE(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdPatchSignalError(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdPutSignalError() instead")
    void apiTransportIqsmsIdPutSignalE(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdPutSignalError(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsPostSignalError() instead")
    void apiTransportIqsmsPostSignalE(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsPostSignalError(OAITransportIqsms_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsGetCollectionSignalErrorFull() instead")
    void apiTransportIqsmsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdDeleteSignalErrorFull() instead")
    void apiTransportIqsmsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdGetSignalErrorFull() instead")
    void apiTransportIqsmsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdPatchSignalErrorFull() instead")
    void apiTransportIqsmsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsIdPutSignalErrorFull() instead")
    void apiTransportIqsmsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportIqsmsPostSignalErrorFull() instead")
    void apiTransportIqsmsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportIqsmsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
