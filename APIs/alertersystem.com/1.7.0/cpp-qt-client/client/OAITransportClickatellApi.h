/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportClickatellApi_H
#define OAI_OAITransportClickatellApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_clickatell_get_collection_200_response.h"
#include "OAITransportClickatell_get.h"
#include "OAITransportClickatell_jsonld_get.h"
#include "OAITransportClickatell_jsonld_post.h"
#include "OAITransportClickatell_jsonld_put.h"
#include "OAITransportClickatell_patch.h"
#include "OAITransportClickatell_post.h"
#include "OAITransportClickatell_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportClickatellApi : public QObject {
    Q_OBJECT

public:
    OAITransportClickatellApi(const int timeOut = 0);
    ~OAITransportClickatellApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportClickatellGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportClickatellIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportClickatellIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_clickatell_patch OAITransportClickatell_patch [required]
    */
    virtual void apiTransportClickatellIdPatch(const QString &id, const OAITransportClickatell_patch &oai_transport_clickatell_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_clickatell_put OAITransportClickatell_put [required]
    */
    virtual void apiTransportClickatellIdPut(const QString &id, const OAITransportClickatell_put &oai_transport_clickatell_put);

    /**
    * @param[in]  oai_transport_clickatell_post OAITransportClickatell_post [required]
    */
    virtual void apiTransportClickatellPost(const OAITransportClickatell_post &oai_transport_clickatell_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportClickatellGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportClickatellIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportClickatellIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportClickatellIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportClickatellIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportClickatellPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportClickatellGetCollectionSignal(QList<OAITransportClickatell_get> summary);
    void apiTransportClickatellIdDeleteSignal();
    void apiTransportClickatellIdGetSignal(OAITransportClickatell_get summary);
    void apiTransportClickatellIdPatchSignal(OAITransportClickatell_get summary);
    void apiTransportClickatellIdPutSignal(OAITransportClickatell_get summary);
    void apiTransportClickatellPostSignal(OAITransportClickatell_get summary);


    void apiTransportClickatellGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportClickatell_get> summary);
    void apiTransportClickatellIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportClickatellIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportClickatell_get summary);
    void apiTransportClickatellIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportClickatell_get summary);
    void apiTransportClickatellIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportClickatell_get summary);
    void apiTransportClickatellPostSignalFull(OAIHttpRequestWorker *worker, OAITransportClickatell_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportClickatellGetCollectionSignalError() instead")
    void apiTransportClickatellGetCollectionSignalE(QList<OAITransportClickatell_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellGetCollectionSignalError(QList<OAITransportClickatell_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdDeleteSignalError() instead")
    void apiTransportClickatellIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdGetSignalError() instead")
    void apiTransportClickatellIdGetSignalE(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdGetSignalError(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdPatchSignalError() instead")
    void apiTransportClickatellIdPatchSignalE(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdPatchSignalError(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdPutSignalError() instead")
    void apiTransportClickatellIdPutSignalE(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdPutSignalError(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellPostSignalError() instead")
    void apiTransportClickatellPostSignalE(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellPostSignalError(OAITransportClickatell_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportClickatellGetCollectionSignalErrorFull() instead")
    void apiTransportClickatellGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdDeleteSignalErrorFull() instead")
    void apiTransportClickatellIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdGetSignalErrorFull() instead")
    void apiTransportClickatellIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdPatchSignalErrorFull() instead")
    void apiTransportClickatellIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellIdPutSignalErrorFull() instead")
    void apiTransportClickatellIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportClickatellPostSignalErrorFull() instead")
    void apiTransportClickatellPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportClickatellPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
