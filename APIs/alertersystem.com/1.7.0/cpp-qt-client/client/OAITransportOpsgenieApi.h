/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportOpsgenieApi_H
#define OAI_OAITransportOpsgenieApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_opsgenie_get_collection_200_response.h"
#include "OAITransportOpsgenie_get.h"
#include "OAITransportOpsgenie_jsonld_get.h"
#include "OAITransportOpsgenie_jsonld_post.h"
#include "OAITransportOpsgenie_jsonld_put.h"
#include "OAITransportOpsgenie_patch.h"
#include "OAITransportOpsgenie_post.h"
#include "OAITransportOpsgenie_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportOpsgenieApi : public QObject {
    Q_OBJECT

public:
    OAITransportOpsgenieApi(const int timeOut = 0);
    ~OAITransportOpsgenieApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportOpsgenieGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportOpsgenieIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportOpsgenieIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_opsgenie_patch OAITransportOpsgenie_patch [required]
    */
    virtual void apiTransportOpsgenieIdPatch(const QString &id, const OAITransportOpsgenie_patch &oai_transport_opsgenie_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_opsgenie_put OAITransportOpsgenie_put [required]
    */
    virtual void apiTransportOpsgenieIdPut(const QString &id, const OAITransportOpsgenie_put &oai_transport_opsgenie_put);

    /**
    * @param[in]  oai_transport_opsgenie_post OAITransportOpsgenie_post [required]
    */
    virtual void apiTransportOpsgeniePost(const OAITransportOpsgenie_post &oai_transport_opsgenie_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportOpsgenieGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportOpsgenieIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportOpsgenieIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportOpsgenieIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportOpsgenieIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportOpsgeniePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportOpsgenieGetCollectionSignal(QList<OAITransportOpsgenie_get> summary);
    void apiTransportOpsgenieIdDeleteSignal();
    void apiTransportOpsgenieIdGetSignal(OAITransportOpsgenie_get summary);
    void apiTransportOpsgenieIdPatchSignal(OAITransportOpsgenie_get summary);
    void apiTransportOpsgenieIdPutSignal(OAITransportOpsgenie_get summary);
    void apiTransportOpsgeniePostSignal(OAITransportOpsgenie_get summary);


    void apiTransportOpsgenieGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportOpsgenie_get> summary);
    void apiTransportOpsgenieIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportOpsgenieIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportOpsgenie_get summary);
    void apiTransportOpsgenieIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportOpsgenie_get summary);
    void apiTransportOpsgenieIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportOpsgenie_get summary);
    void apiTransportOpsgeniePostSignalFull(OAIHttpRequestWorker *worker, OAITransportOpsgenie_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieGetCollectionSignalError() instead")
    void apiTransportOpsgenieGetCollectionSignalE(QList<OAITransportOpsgenie_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieGetCollectionSignalError(QList<OAITransportOpsgenie_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdDeleteSignalError() instead")
    void apiTransportOpsgenieIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdGetSignalError() instead")
    void apiTransportOpsgenieIdGetSignalE(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdGetSignalError(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdPatchSignalError() instead")
    void apiTransportOpsgenieIdPatchSignalE(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdPatchSignalError(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdPutSignalError() instead")
    void apiTransportOpsgenieIdPutSignalE(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdPutSignalError(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgeniePostSignalError() instead")
    void apiTransportOpsgeniePostSignalE(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgeniePostSignalError(OAITransportOpsgenie_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieGetCollectionSignalErrorFull() instead")
    void apiTransportOpsgenieGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdDeleteSignalErrorFull() instead")
    void apiTransportOpsgenieIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdGetSignalErrorFull() instead")
    void apiTransportOpsgenieIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdPatchSignalErrorFull() instead")
    void apiTransportOpsgenieIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgenieIdPutSignalErrorFull() instead")
    void apiTransportOpsgenieIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgenieIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportOpsgeniePostSignalErrorFull() instead")
    void apiTransportOpsgeniePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportOpsgeniePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
