/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertService_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertService_patch::OAIAlertService_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertService_patch::OAIAlertService_patch() {
    this->initializeModel();
}

OAIAlertService_patch::~OAIAlertService_patch() {}

void OAIAlertService_patch::initializeModel() {

    m_alert_service_name_isSet = false;
    m_alert_service_name_isValid = false;

    m_alert_service_notes_isSet = false;
    m_alert_service_notes_isValid = false;

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_media_objects_isSet = false;
    m_media_objects_isValid = false;

    m_recipient_email_address_isSet = false;
    m_recipient_email_address_isValid = false;

    m_recipient_phone_number_isSet = false;
    m_recipient_phone_number_isValid = false;

    m_transport_alerta_isSet = false;
    m_transport_alerta_isValid = false;

    m_transport_all_my_sms_isSet = false;
    m_transport_all_my_sms_isValid = false;

    m_transport_amazon_sns_isSet = false;
    m_transport_amazon_sns_isValid = false;

    m_transport_bandwidth_isSet = false;
    m_transport_bandwidth_isValid = false;

    m_transport_chatwork_isSet = false;
    m_transport_chatwork_isValid = false;

    m_transport_click_send_isSet = false;
    m_transport_click_send_isValid = false;

    m_transport_clickatell_isSet = false;
    m_transport_clickatell_isValid = false;

    m_transport_contact_everyone_isSet = false;
    m_transport_contact_everyone_isValid = false;

    m_transport_discord_isSet = false;
    m_transport_discord_isValid = false;

    m_transport_email_isSet = false;
    m_transport_email_isValid = false;

    m_transport_engagespot_isSet = false;
    m_transport_engagespot_isValid = false;

    m_transport_esendex_isSet = false;
    m_transport_esendex_isValid = false;

    m_transport_expo_isSet = false;
    m_transport_expo_isValid = false;

    m_transport_firebase_isSet = false;
    m_transport_firebase_isValid = false;

    m_transport_forty_six_elks_isSet = false;
    m_transport_forty_six_elks_isValid = false;

    m_transport_free_mobile_isSet = false;
    m_transport_free_mobile_isValid = false;

    m_transport_freshdesk_isSet = false;
    m_transport_freshdesk_isValid = false;

    m_transport_gateway_api_isSet = false;
    m_transport_gateway_api_isValid = false;

    m_transport_gitter_isSet = false;
    m_transport_gitter_isValid = false;

    m_transport_google_chat_isSet = false;
    m_transport_google_chat_isValid = false;

    m_transport_gotify_isSet = false;
    m_transport_gotify_isValid = false;

    m_transport_help_scout_isSet = false;
    m_transport_help_scout_isValid = false;

    m_transport_infobip_isSet = false;
    m_transport_infobip_isValid = false;

    m_transport_iqsms_isSet = false;
    m_transport_iqsms_isValid = false;

    m_transport_kaz_info_teh_isSet = false;
    m_transport_kaz_info_teh_isValid = false;

    m_transport_light_sms_isSet = false;
    m_transport_light_sms_isValid = false;

    m_transport_line_notify_isSet = false;
    m_transport_line_notify_isValid = false;

    m_transport_linked_in_isSet = false;
    m_transport_linked_in_isValid = false;

    m_transport_mailjet_isSet = false;
    m_transport_mailjet_isValid = false;

    m_transport_mastodon_isSet = false;
    m_transport_mastodon_isValid = false;

    m_transport_mattermost_isSet = false;
    m_transport_mattermost_isValid = false;

    m_transport_mercure_isSet = false;
    m_transport_mercure_isValid = false;

    m_transport_message_bird_isSet = false;
    m_transport_message_bird_isValid = false;

    m_transport_message_media_isSet = false;
    m_transport_message_media_isValid = false;

    m_transport_microsoft_teams_isSet = false;
    m_transport_microsoft_teams_isValid = false;

    m_transport_mobyt_isSet = false;
    m_transport_mobyt_isValid = false;

    m_transport_octopush_isSet = false;
    m_transport_octopush_isValid = false;

    m_transport_one_signal_isSet = false;
    m_transport_one_signal_isValid = false;

    m_transport_opsgenie_isSet = false;
    m_transport_opsgenie_isValid = false;

    m_transport_orange_sms_isSet = false;
    m_transport_orange_sms_isValid = false;

    m_transport_ovh_cloud_isSet = false;
    m_transport_ovh_cloud_isValid = false;

    m_transport_pager_duty_isSet = false;
    m_transport_pager_duty_isValid = false;

    m_transport_pager_tree_isSet = false;
    m_transport_pager_tree_isValid = false;

    m_transport_plivo_isSet = false;
    m_transport_plivo_isValid = false;

    m_transport_pushbullet_isSet = false;
    m_transport_pushbullet_isValid = false;

    m_transport_pushover_isSet = false;
    m_transport_pushover_isValid = false;

    m_transport_pushy_isSet = false;
    m_transport_pushy_isValid = false;

    m_transport_ring_central_isSet = false;
    m_transport_ring_central_isValid = false;

    m_transport_rocket_chat_isSet = false;
    m_transport_rocket_chat_isValid = false;

    m_transport_sendberry_isSet = false;
    m_transport_sendberry_isValid = false;

    m_transport_sendinblue_isSet = false;
    m_transport_sendinblue_isValid = false;

    m_transport_simple_textin_isSet = false;
    m_transport_simple_textin_isValid = false;

    m_transport_sinch_isSet = false;
    m_transport_sinch_isValid = false;

    m_transport_slack_isSet = false;
    m_transport_slack_isValid = false;

    m_transport_sms77_isSet = false;
    m_transport_sms77_isValid = false;

    m_transport_sms_biuras_isSet = false;
    m_transport_sms_biuras_isValid = false;

    m_transport_sms_factor_isSet = false;
    m_transport_sms_factor_isValid = false;

    m_transport_smsapi_isSet = false;
    m_transport_smsapi_isValid = false;

    m_transport_smsc_isSet = false;
    m_transport_smsc_isValid = false;

    m_transport_smsmode_isSet = false;
    m_transport_smsmode_isValid = false;

    m_transport_spot_hit_isSet = false;
    m_transport_spot_hit_isValid = false;

    m_transport_telegram_isSet = false;
    m_transport_telegram_isValid = false;

    m_transport_telnyx_isSet = false;
    m_transport_telnyx_isValid = false;

    m_transport_termii_isSet = false;
    m_transport_termii_isValid = false;

    m_transport_trello_isSet = false;
    m_transport_trello_isValid = false;

    m_transport_turbo_sms_isSet = false;
    m_transport_turbo_sms_isValid = false;

    m_transport_twilio_isSet = false;
    m_transport_twilio_isValid = false;

    m_transport_twitter_isSet = false;
    m_transport_twitter_isValid = false;

    m_transport_vonage_isSet = false;
    m_transport_vonage_isValid = false;

    m_transport_webhook_isSet = false;
    m_transport_webhook_isValid = false;

    m_transport_yunpian_isSet = false;
    m_transport_yunpian_isValid = false;

    m_transport_zendesk_isSet = false;
    m_transport_zendesk_isValid = false;

    m_transport_zulip_isSet = false;
    m_transport_zulip_isValid = false;
}

void OAIAlertService_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertService_patch::fromJsonObject(QJsonObject json) {

    m_alert_service_name_isValid = ::OpenAPI::fromJsonValue(m_alert_service_name, json[QString("alertServiceName")]);
    m_alert_service_name_isSet = !json[QString("alertServiceName")].isNull() && m_alert_service_name_isValid;

    m_alert_service_notes_isValid = ::OpenAPI::fromJsonValue(m_alert_service_notes, json[QString("alertServiceNotes")]);
    m_alert_service_notes_isSet = !json[QString("alertServiceNotes")].isNull() && m_alert_service_notes_isValid;

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_media_objects_isValid = ::OpenAPI::fromJsonValue(m_media_objects, json[QString("mediaObjects")]);
    m_media_objects_isSet = !json[QString("mediaObjects")].isNull() && m_media_objects_isValid;

    m_recipient_email_address_isValid = ::OpenAPI::fromJsonValue(m_recipient_email_address, json[QString("recipientEmailAddress")]);
    m_recipient_email_address_isSet = !json[QString("recipientEmailAddress")].isNull() && m_recipient_email_address_isValid;

    m_recipient_phone_number_isValid = ::OpenAPI::fromJsonValue(m_recipient_phone_number, json[QString("recipientPhoneNumber")]);
    m_recipient_phone_number_isSet = !json[QString("recipientPhoneNumber")].isNull() && m_recipient_phone_number_isValid;

    m_transport_alerta_isValid = ::OpenAPI::fromJsonValue(m_transport_alerta, json[QString("transportAlerta")]);
    m_transport_alerta_isSet = !json[QString("transportAlerta")].isNull() && m_transport_alerta_isValid;

    m_transport_all_my_sms_isValid = ::OpenAPI::fromJsonValue(m_transport_all_my_sms, json[QString("transportAllMySms")]);
    m_transport_all_my_sms_isSet = !json[QString("transportAllMySms")].isNull() && m_transport_all_my_sms_isValid;

    m_transport_amazon_sns_isValid = ::OpenAPI::fromJsonValue(m_transport_amazon_sns, json[QString("transportAmazonSns")]);
    m_transport_amazon_sns_isSet = !json[QString("transportAmazonSns")].isNull() && m_transport_amazon_sns_isValid;

    m_transport_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_transport_bandwidth, json[QString("transportBandwidth")]);
    m_transport_bandwidth_isSet = !json[QString("transportBandwidth")].isNull() && m_transport_bandwidth_isValid;

    m_transport_chatwork_isValid = ::OpenAPI::fromJsonValue(m_transport_chatwork, json[QString("transportChatwork")]);
    m_transport_chatwork_isSet = !json[QString("transportChatwork")].isNull() && m_transport_chatwork_isValid;

    m_transport_click_send_isValid = ::OpenAPI::fromJsonValue(m_transport_click_send, json[QString("transportClickSend")]);
    m_transport_click_send_isSet = !json[QString("transportClickSend")].isNull() && m_transport_click_send_isValid;

    m_transport_clickatell_isValid = ::OpenAPI::fromJsonValue(m_transport_clickatell, json[QString("transportClickatell")]);
    m_transport_clickatell_isSet = !json[QString("transportClickatell")].isNull() && m_transport_clickatell_isValid;

    m_transport_contact_everyone_isValid = ::OpenAPI::fromJsonValue(m_transport_contact_everyone, json[QString("transportContactEveryone")]);
    m_transport_contact_everyone_isSet = !json[QString("transportContactEveryone")].isNull() && m_transport_contact_everyone_isValid;

    m_transport_discord_isValid = ::OpenAPI::fromJsonValue(m_transport_discord, json[QString("transportDiscord")]);
    m_transport_discord_isSet = !json[QString("transportDiscord")].isNull() && m_transport_discord_isValid;

    m_transport_email_isValid = ::OpenAPI::fromJsonValue(m_transport_email, json[QString("transportEmail")]);
    m_transport_email_isSet = !json[QString("transportEmail")].isNull() && m_transport_email_isValid;

    m_transport_engagespot_isValid = ::OpenAPI::fromJsonValue(m_transport_engagespot, json[QString("transportEngagespot")]);
    m_transport_engagespot_isSet = !json[QString("transportEngagespot")].isNull() && m_transport_engagespot_isValid;

    m_transport_esendex_isValid = ::OpenAPI::fromJsonValue(m_transport_esendex, json[QString("transportEsendex")]);
    m_transport_esendex_isSet = !json[QString("transportEsendex")].isNull() && m_transport_esendex_isValid;

    m_transport_expo_isValid = ::OpenAPI::fromJsonValue(m_transport_expo, json[QString("transportExpo")]);
    m_transport_expo_isSet = !json[QString("transportExpo")].isNull() && m_transport_expo_isValid;

    m_transport_firebase_isValid = ::OpenAPI::fromJsonValue(m_transport_firebase, json[QString("transportFirebase")]);
    m_transport_firebase_isSet = !json[QString("transportFirebase")].isNull() && m_transport_firebase_isValid;

    m_transport_forty_six_elks_isValid = ::OpenAPI::fromJsonValue(m_transport_forty_six_elks, json[QString("transportFortySixElks")]);
    m_transport_forty_six_elks_isSet = !json[QString("transportFortySixElks")].isNull() && m_transport_forty_six_elks_isValid;

    m_transport_free_mobile_isValid = ::OpenAPI::fromJsonValue(m_transport_free_mobile, json[QString("transportFreeMobile")]);
    m_transport_free_mobile_isSet = !json[QString("transportFreeMobile")].isNull() && m_transport_free_mobile_isValid;

    m_transport_freshdesk_isValid = ::OpenAPI::fromJsonValue(m_transport_freshdesk, json[QString("transportFreshdesk")]);
    m_transport_freshdesk_isSet = !json[QString("transportFreshdesk")].isNull() && m_transport_freshdesk_isValid;

    m_transport_gateway_api_isValid = ::OpenAPI::fromJsonValue(m_transport_gateway_api, json[QString("transportGatewayApi")]);
    m_transport_gateway_api_isSet = !json[QString("transportGatewayApi")].isNull() && m_transport_gateway_api_isValid;

    m_transport_gitter_isValid = ::OpenAPI::fromJsonValue(m_transport_gitter, json[QString("transportGitter")]);
    m_transport_gitter_isSet = !json[QString("transportGitter")].isNull() && m_transport_gitter_isValid;

    m_transport_google_chat_isValid = ::OpenAPI::fromJsonValue(m_transport_google_chat, json[QString("transportGoogleChat")]);
    m_transport_google_chat_isSet = !json[QString("transportGoogleChat")].isNull() && m_transport_google_chat_isValid;

    m_transport_gotify_isValid = ::OpenAPI::fromJsonValue(m_transport_gotify, json[QString("transportGotify")]);
    m_transport_gotify_isSet = !json[QString("transportGotify")].isNull() && m_transport_gotify_isValid;

    m_transport_help_scout_isValid = ::OpenAPI::fromJsonValue(m_transport_help_scout, json[QString("transportHelpScout")]);
    m_transport_help_scout_isSet = !json[QString("transportHelpScout")].isNull() && m_transport_help_scout_isValid;

    m_transport_infobip_isValid = ::OpenAPI::fromJsonValue(m_transport_infobip, json[QString("transportInfobip")]);
    m_transport_infobip_isSet = !json[QString("transportInfobip")].isNull() && m_transport_infobip_isValid;

    m_transport_iqsms_isValid = ::OpenAPI::fromJsonValue(m_transport_iqsms, json[QString("transportIqsms")]);
    m_transport_iqsms_isSet = !json[QString("transportIqsms")].isNull() && m_transport_iqsms_isValid;

    m_transport_kaz_info_teh_isValid = ::OpenAPI::fromJsonValue(m_transport_kaz_info_teh, json[QString("transportKazInfoTeh")]);
    m_transport_kaz_info_teh_isSet = !json[QString("transportKazInfoTeh")].isNull() && m_transport_kaz_info_teh_isValid;

    m_transport_light_sms_isValid = ::OpenAPI::fromJsonValue(m_transport_light_sms, json[QString("transportLightSms")]);
    m_transport_light_sms_isSet = !json[QString("transportLightSms")].isNull() && m_transport_light_sms_isValid;

    m_transport_line_notify_isValid = ::OpenAPI::fromJsonValue(m_transport_line_notify, json[QString("transportLineNotify")]);
    m_transport_line_notify_isSet = !json[QString("transportLineNotify")].isNull() && m_transport_line_notify_isValid;

    m_transport_linked_in_isValid = ::OpenAPI::fromJsonValue(m_transport_linked_in, json[QString("transportLinkedIn")]);
    m_transport_linked_in_isSet = !json[QString("transportLinkedIn")].isNull() && m_transport_linked_in_isValid;

    m_transport_mailjet_isValid = ::OpenAPI::fromJsonValue(m_transport_mailjet, json[QString("transportMailjet")]);
    m_transport_mailjet_isSet = !json[QString("transportMailjet")].isNull() && m_transport_mailjet_isValid;

    m_transport_mastodon_isValid = ::OpenAPI::fromJsonValue(m_transport_mastodon, json[QString("transportMastodon")]);
    m_transport_mastodon_isSet = !json[QString("transportMastodon")].isNull() && m_transport_mastodon_isValid;

    m_transport_mattermost_isValid = ::OpenAPI::fromJsonValue(m_transport_mattermost, json[QString("transportMattermost")]);
    m_transport_mattermost_isSet = !json[QString("transportMattermost")].isNull() && m_transport_mattermost_isValid;

    m_transport_mercure_isValid = ::OpenAPI::fromJsonValue(m_transport_mercure, json[QString("transportMercure")]);
    m_transport_mercure_isSet = !json[QString("transportMercure")].isNull() && m_transport_mercure_isValid;

    m_transport_message_bird_isValid = ::OpenAPI::fromJsonValue(m_transport_message_bird, json[QString("transportMessageBird")]);
    m_transport_message_bird_isSet = !json[QString("transportMessageBird")].isNull() && m_transport_message_bird_isValid;

    m_transport_message_media_isValid = ::OpenAPI::fromJsonValue(m_transport_message_media, json[QString("transportMessageMedia")]);
    m_transport_message_media_isSet = !json[QString("transportMessageMedia")].isNull() && m_transport_message_media_isValid;

    m_transport_microsoft_teams_isValid = ::OpenAPI::fromJsonValue(m_transport_microsoft_teams, json[QString("transportMicrosoftTeams")]);
    m_transport_microsoft_teams_isSet = !json[QString("transportMicrosoftTeams")].isNull() && m_transport_microsoft_teams_isValid;

    m_transport_mobyt_isValid = ::OpenAPI::fromJsonValue(m_transport_mobyt, json[QString("transportMobyt")]);
    m_transport_mobyt_isSet = !json[QString("transportMobyt")].isNull() && m_transport_mobyt_isValid;

    m_transport_octopush_isValid = ::OpenAPI::fromJsonValue(m_transport_octopush, json[QString("transportOctopush")]);
    m_transport_octopush_isSet = !json[QString("transportOctopush")].isNull() && m_transport_octopush_isValid;

    m_transport_one_signal_isValid = ::OpenAPI::fromJsonValue(m_transport_one_signal, json[QString("transportOneSignal")]);
    m_transport_one_signal_isSet = !json[QString("transportOneSignal")].isNull() && m_transport_one_signal_isValid;

    m_transport_opsgenie_isValid = ::OpenAPI::fromJsonValue(m_transport_opsgenie, json[QString("transportOpsgenie")]);
    m_transport_opsgenie_isSet = !json[QString("transportOpsgenie")].isNull() && m_transport_opsgenie_isValid;

    m_transport_orange_sms_isValid = ::OpenAPI::fromJsonValue(m_transport_orange_sms, json[QString("transportOrangeSms")]);
    m_transport_orange_sms_isSet = !json[QString("transportOrangeSms")].isNull() && m_transport_orange_sms_isValid;

    m_transport_ovh_cloud_isValid = ::OpenAPI::fromJsonValue(m_transport_ovh_cloud, json[QString("transportOvhCloud")]);
    m_transport_ovh_cloud_isSet = !json[QString("transportOvhCloud")].isNull() && m_transport_ovh_cloud_isValid;

    m_transport_pager_duty_isValid = ::OpenAPI::fromJsonValue(m_transport_pager_duty, json[QString("transportPagerDuty")]);
    m_transport_pager_duty_isSet = !json[QString("transportPagerDuty")].isNull() && m_transport_pager_duty_isValid;

    m_transport_pager_tree_isValid = ::OpenAPI::fromJsonValue(m_transport_pager_tree, json[QString("transportPagerTree")]);
    m_transport_pager_tree_isSet = !json[QString("transportPagerTree")].isNull() && m_transport_pager_tree_isValid;

    m_transport_plivo_isValid = ::OpenAPI::fromJsonValue(m_transport_plivo, json[QString("transportPlivo")]);
    m_transport_plivo_isSet = !json[QString("transportPlivo")].isNull() && m_transport_plivo_isValid;

    m_transport_pushbullet_isValid = ::OpenAPI::fromJsonValue(m_transport_pushbullet, json[QString("transportPushbullet")]);
    m_transport_pushbullet_isSet = !json[QString("transportPushbullet")].isNull() && m_transport_pushbullet_isValid;

    m_transport_pushover_isValid = ::OpenAPI::fromJsonValue(m_transport_pushover, json[QString("transportPushover")]);
    m_transport_pushover_isSet = !json[QString("transportPushover")].isNull() && m_transport_pushover_isValid;

    m_transport_pushy_isValid = ::OpenAPI::fromJsonValue(m_transport_pushy, json[QString("transportPushy")]);
    m_transport_pushy_isSet = !json[QString("transportPushy")].isNull() && m_transport_pushy_isValid;

    m_transport_ring_central_isValid = ::OpenAPI::fromJsonValue(m_transport_ring_central, json[QString("transportRingCentral")]);
    m_transport_ring_central_isSet = !json[QString("transportRingCentral")].isNull() && m_transport_ring_central_isValid;

    m_transport_rocket_chat_isValid = ::OpenAPI::fromJsonValue(m_transport_rocket_chat, json[QString("transportRocketChat")]);
    m_transport_rocket_chat_isSet = !json[QString("transportRocketChat")].isNull() && m_transport_rocket_chat_isValid;

    m_transport_sendberry_isValid = ::OpenAPI::fromJsonValue(m_transport_sendberry, json[QString("transportSendberry")]);
    m_transport_sendberry_isSet = !json[QString("transportSendberry")].isNull() && m_transport_sendberry_isValid;

    m_transport_sendinblue_isValid = ::OpenAPI::fromJsonValue(m_transport_sendinblue, json[QString("transportSendinblue")]);
    m_transport_sendinblue_isSet = !json[QString("transportSendinblue")].isNull() && m_transport_sendinblue_isValid;

    m_transport_simple_textin_isValid = ::OpenAPI::fromJsonValue(m_transport_simple_textin, json[QString("transportSimpleTextin")]);
    m_transport_simple_textin_isSet = !json[QString("transportSimpleTextin")].isNull() && m_transport_simple_textin_isValid;

    m_transport_sinch_isValid = ::OpenAPI::fromJsonValue(m_transport_sinch, json[QString("transportSinch")]);
    m_transport_sinch_isSet = !json[QString("transportSinch")].isNull() && m_transport_sinch_isValid;

    m_transport_slack_isValid = ::OpenAPI::fromJsonValue(m_transport_slack, json[QString("transportSlack")]);
    m_transport_slack_isSet = !json[QString("transportSlack")].isNull() && m_transport_slack_isValid;

    m_transport_sms77_isValid = ::OpenAPI::fromJsonValue(m_transport_sms77, json[QString("transportSms77")]);
    m_transport_sms77_isSet = !json[QString("transportSms77")].isNull() && m_transport_sms77_isValid;

    m_transport_sms_biuras_isValid = ::OpenAPI::fromJsonValue(m_transport_sms_biuras, json[QString("transportSmsBiuras")]);
    m_transport_sms_biuras_isSet = !json[QString("transportSmsBiuras")].isNull() && m_transport_sms_biuras_isValid;

    m_transport_sms_factor_isValid = ::OpenAPI::fromJsonValue(m_transport_sms_factor, json[QString("transportSmsFactor")]);
    m_transport_sms_factor_isSet = !json[QString("transportSmsFactor")].isNull() && m_transport_sms_factor_isValid;

    m_transport_smsapi_isValid = ::OpenAPI::fromJsonValue(m_transport_smsapi, json[QString("transportSmsapi")]);
    m_transport_smsapi_isSet = !json[QString("transportSmsapi")].isNull() && m_transport_smsapi_isValid;

    m_transport_smsc_isValid = ::OpenAPI::fromJsonValue(m_transport_smsc, json[QString("transportSmsc")]);
    m_transport_smsc_isSet = !json[QString("transportSmsc")].isNull() && m_transport_smsc_isValid;

    m_transport_smsmode_isValid = ::OpenAPI::fromJsonValue(m_transport_smsmode, json[QString("transportSmsmode")]);
    m_transport_smsmode_isSet = !json[QString("transportSmsmode")].isNull() && m_transport_smsmode_isValid;

    m_transport_spot_hit_isValid = ::OpenAPI::fromJsonValue(m_transport_spot_hit, json[QString("transportSpotHit")]);
    m_transport_spot_hit_isSet = !json[QString("transportSpotHit")].isNull() && m_transport_spot_hit_isValid;

    m_transport_telegram_isValid = ::OpenAPI::fromJsonValue(m_transport_telegram, json[QString("transportTelegram")]);
    m_transport_telegram_isSet = !json[QString("transportTelegram")].isNull() && m_transport_telegram_isValid;

    m_transport_telnyx_isValid = ::OpenAPI::fromJsonValue(m_transport_telnyx, json[QString("transportTelnyx")]);
    m_transport_telnyx_isSet = !json[QString("transportTelnyx")].isNull() && m_transport_telnyx_isValid;

    m_transport_termii_isValid = ::OpenAPI::fromJsonValue(m_transport_termii, json[QString("transportTermii")]);
    m_transport_termii_isSet = !json[QString("transportTermii")].isNull() && m_transport_termii_isValid;

    m_transport_trello_isValid = ::OpenAPI::fromJsonValue(m_transport_trello, json[QString("transportTrello")]);
    m_transport_trello_isSet = !json[QString("transportTrello")].isNull() && m_transport_trello_isValid;

    m_transport_turbo_sms_isValid = ::OpenAPI::fromJsonValue(m_transport_turbo_sms, json[QString("transportTurboSms")]);
    m_transport_turbo_sms_isSet = !json[QString("transportTurboSms")].isNull() && m_transport_turbo_sms_isValid;

    m_transport_twilio_isValid = ::OpenAPI::fromJsonValue(m_transport_twilio, json[QString("transportTwilio")]);
    m_transport_twilio_isSet = !json[QString("transportTwilio")].isNull() && m_transport_twilio_isValid;

    m_transport_twitter_isValid = ::OpenAPI::fromJsonValue(m_transport_twitter, json[QString("transportTwitter")]);
    m_transport_twitter_isSet = !json[QString("transportTwitter")].isNull() && m_transport_twitter_isValid;

    m_transport_vonage_isValid = ::OpenAPI::fromJsonValue(m_transport_vonage, json[QString("transportVonage")]);
    m_transport_vonage_isSet = !json[QString("transportVonage")].isNull() && m_transport_vonage_isValid;

    m_transport_webhook_isValid = ::OpenAPI::fromJsonValue(m_transport_webhook, json[QString("transportWebhook")]);
    m_transport_webhook_isSet = !json[QString("transportWebhook")].isNull() && m_transport_webhook_isValid;

    m_transport_yunpian_isValid = ::OpenAPI::fromJsonValue(m_transport_yunpian, json[QString("transportYunpian")]);
    m_transport_yunpian_isSet = !json[QString("transportYunpian")].isNull() && m_transport_yunpian_isValid;

    m_transport_zendesk_isValid = ::OpenAPI::fromJsonValue(m_transport_zendesk, json[QString("transportZendesk")]);
    m_transport_zendesk_isSet = !json[QString("transportZendesk")].isNull() && m_transport_zendesk_isValid;

    m_transport_zulip_isValid = ::OpenAPI::fromJsonValue(m_transport_zulip, json[QString("transportZulip")]);
    m_transport_zulip_isSet = !json[QString("transportZulip")].isNull() && m_transport_zulip_isValid;
}

QString OAIAlertService_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertService_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_service_name_isSet) {
        obj.insert(QString("alertServiceName"), ::OpenAPI::toJsonValue(m_alert_service_name));
    }
    if (m_alert_service_notes_isSet) {
        obj.insert(QString("alertServiceNotes"), ::OpenAPI::toJsonValue(m_alert_service_notes));
    }
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_media_objects.size() > 0) {
        obj.insert(QString("mediaObjects"), ::OpenAPI::toJsonValue(m_media_objects));
    }
    if (m_recipient_email_address_isSet) {
        obj.insert(QString("recipientEmailAddress"), ::OpenAPI::toJsonValue(m_recipient_email_address));
    }
    if (m_recipient_phone_number_isSet) {
        obj.insert(QString("recipientPhoneNumber"), ::OpenAPI::toJsonValue(m_recipient_phone_number));
    }
    if (m_transport_alerta_isSet) {
        obj.insert(QString("transportAlerta"), ::OpenAPI::toJsonValue(m_transport_alerta));
    }
    if (m_transport_all_my_sms_isSet) {
        obj.insert(QString("transportAllMySms"), ::OpenAPI::toJsonValue(m_transport_all_my_sms));
    }
    if (m_transport_amazon_sns_isSet) {
        obj.insert(QString("transportAmazonSns"), ::OpenAPI::toJsonValue(m_transport_amazon_sns));
    }
    if (m_transport_bandwidth_isSet) {
        obj.insert(QString("transportBandwidth"), ::OpenAPI::toJsonValue(m_transport_bandwidth));
    }
    if (m_transport_chatwork_isSet) {
        obj.insert(QString("transportChatwork"), ::OpenAPI::toJsonValue(m_transport_chatwork));
    }
    if (m_transport_click_send_isSet) {
        obj.insert(QString("transportClickSend"), ::OpenAPI::toJsonValue(m_transport_click_send));
    }
    if (m_transport_clickatell_isSet) {
        obj.insert(QString("transportClickatell"), ::OpenAPI::toJsonValue(m_transport_clickatell));
    }
    if (m_transport_contact_everyone_isSet) {
        obj.insert(QString("transportContactEveryone"), ::OpenAPI::toJsonValue(m_transport_contact_everyone));
    }
    if (m_transport_discord_isSet) {
        obj.insert(QString("transportDiscord"), ::OpenAPI::toJsonValue(m_transport_discord));
    }
    if (m_transport_email_isSet) {
        obj.insert(QString("transportEmail"), ::OpenAPI::toJsonValue(m_transport_email));
    }
    if (m_transport_engagespot_isSet) {
        obj.insert(QString("transportEngagespot"), ::OpenAPI::toJsonValue(m_transport_engagespot));
    }
    if (m_transport_esendex_isSet) {
        obj.insert(QString("transportEsendex"), ::OpenAPI::toJsonValue(m_transport_esendex));
    }
    if (m_transport_expo_isSet) {
        obj.insert(QString("transportExpo"), ::OpenAPI::toJsonValue(m_transport_expo));
    }
    if (m_transport_firebase_isSet) {
        obj.insert(QString("transportFirebase"), ::OpenAPI::toJsonValue(m_transport_firebase));
    }
    if (m_transport_forty_six_elks_isSet) {
        obj.insert(QString("transportFortySixElks"), ::OpenAPI::toJsonValue(m_transport_forty_six_elks));
    }
    if (m_transport_free_mobile_isSet) {
        obj.insert(QString("transportFreeMobile"), ::OpenAPI::toJsonValue(m_transport_free_mobile));
    }
    if (m_transport_freshdesk_isSet) {
        obj.insert(QString("transportFreshdesk"), ::OpenAPI::toJsonValue(m_transport_freshdesk));
    }
    if (m_transport_gateway_api_isSet) {
        obj.insert(QString("transportGatewayApi"), ::OpenAPI::toJsonValue(m_transport_gateway_api));
    }
    if (m_transport_gitter_isSet) {
        obj.insert(QString("transportGitter"), ::OpenAPI::toJsonValue(m_transport_gitter));
    }
    if (m_transport_google_chat_isSet) {
        obj.insert(QString("transportGoogleChat"), ::OpenAPI::toJsonValue(m_transport_google_chat));
    }
    if (m_transport_gotify_isSet) {
        obj.insert(QString("transportGotify"), ::OpenAPI::toJsonValue(m_transport_gotify));
    }
    if (m_transport_help_scout_isSet) {
        obj.insert(QString("transportHelpScout"), ::OpenAPI::toJsonValue(m_transport_help_scout));
    }
    if (m_transport_infobip_isSet) {
        obj.insert(QString("transportInfobip"), ::OpenAPI::toJsonValue(m_transport_infobip));
    }
    if (m_transport_iqsms_isSet) {
        obj.insert(QString("transportIqsms"), ::OpenAPI::toJsonValue(m_transport_iqsms));
    }
    if (m_transport_kaz_info_teh_isSet) {
        obj.insert(QString("transportKazInfoTeh"), ::OpenAPI::toJsonValue(m_transport_kaz_info_teh));
    }
    if (m_transport_light_sms_isSet) {
        obj.insert(QString("transportLightSms"), ::OpenAPI::toJsonValue(m_transport_light_sms));
    }
    if (m_transport_line_notify_isSet) {
        obj.insert(QString("transportLineNotify"), ::OpenAPI::toJsonValue(m_transport_line_notify));
    }
    if (m_transport_linked_in_isSet) {
        obj.insert(QString("transportLinkedIn"), ::OpenAPI::toJsonValue(m_transport_linked_in));
    }
    if (m_transport_mailjet_isSet) {
        obj.insert(QString("transportMailjet"), ::OpenAPI::toJsonValue(m_transport_mailjet));
    }
    if (m_transport_mastodon_isSet) {
        obj.insert(QString("transportMastodon"), ::OpenAPI::toJsonValue(m_transport_mastodon));
    }
    if (m_transport_mattermost_isSet) {
        obj.insert(QString("transportMattermost"), ::OpenAPI::toJsonValue(m_transport_mattermost));
    }
    if (m_transport_mercure_isSet) {
        obj.insert(QString("transportMercure"), ::OpenAPI::toJsonValue(m_transport_mercure));
    }
    if (m_transport_message_bird_isSet) {
        obj.insert(QString("transportMessageBird"), ::OpenAPI::toJsonValue(m_transport_message_bird));
    }
    if (m_transport_message_media_isSet) {
        obj.insert(QString("transportMessageMedia"), ::OpenAPI::toJsonValue(m_transport_message_media));
    }
    if (m_transport_microsoft_teams_isSet) {
        obj.insert(QString("transportMicrosoftTeams"), ::OpenAPI::toJsonValue(m_transport_microsoft_teams));
    }
    if (m_transport_mobyt_isSet) {
        obj.insert(QString("transportMobyt"), ::OpenAPI::toJsonValue(m_transport_mobyt));
    }
    if (m_transport_octopush_isSet) {
        obj.insert(QString("transportOctopush"), ::OpenAPI::toJsonValue(m_transport_octopush));
    }
    if (m_transport_one_signal_isSet) {
        obj.insert(QString("transportOneSignal"), ::OpenAPI::toJsonValue(m_transport_one_signal));
    }
    if (m_transport_opsgenie_isSet) {
        obj.insert(QString("transportOpsgenie"), ::OpenAPI::toJsonValue(m_transport_opsgenie));
    }
    if (m_transport_orange_sms_isSet) {
        obj.insert(QString("transportOrangeSms"), ::OpenAPI::toJsonValue(m_transport_orange_sms));
    }
    if (m_transport_ovh_cloud_isSet) {
        obj.insert(QString("transportOvhCloud"), ::OpenAPI::toJsonValue(m_transport_ovh_cloud));
    }
    if (m_transport_pager_duty_isSet) {
        obj.insert(QString("transportPagerDuty"), ::OpenAPI::toJsonValue(m_transport_pager_duty));
    }
    if (m_transport_pager_tree_isSet) {
        obj.insert(QString("transportPagerTree"), ::OpenAPI::toJsonValue(m_transport_pager_tree));
    }
    if (m_transport_plivo_isSet) {
        obj.insert(QString("transportPlivo"), ::OpenAPI::toJsonValue(m_transport_plivo));
    }
    if (m_transport_pushbullet_isSet) {
        obj.insert(QString("transportPushbullet"), ::OpenAPI::toJsonValue(m_transport_pushbullet));
    }
    if (m_transport_pushover_isSet) {
        obj.insert(QString("transportPushover"), ::OpenAPI::toJsonValue(m_transport_pushover));
    }
    if (m_transport_pushy_isSet) {
        obj.insert(QString("transportPushy"), ::OpenAPI::toJsonValue(m_transport_pushy));
    }
    if (m_transport_ring_central_isSet) {
        obj.insert(QString("transportRingCentral"), ::OpenAPI::toJsonValue(m_transport_ring_central));
    }
    if (m_transport_rocket_chat_isSet) {
        obj.insert(QString("transportRocketChat"), ::OpenAPI::toJsonValue(m_transport_rocket_chat));
    }
    if (m_transport_sendberry_isSet) {
        obj.insert(QString("transportSendberry"), ::OpenAPI::toJsonValue(m_transport_sendberry));
    }
    if (m_transport_sendinblue_isSet) {
        obj.insert(QString("transportSendinblue"), ::OpenAPI::toJsonValue(m_transport_sendinblue));
    }
    if (m_transport_simple_textin_isSet) {
        obj.insert(QString("transportSimpleTextin"), ::OpenAPI::toJsonValue(m_transport_simple_textin));
    }
    if (m_transport_sinch_isSet) {
        obj.insert(QString("transportSinch"), ::OpenAPI::toJsonValue(m_transport_sinch));
    }
    if (m_transport_slack_isSet) {
        obj.insert(QString("transportSlack"), ::OpenAPI::toJsonValue(m_transport_slack));
    }
    if (m_transport_sms77_isSet) {
        obj.insert(QString("transportSms77"), ::OpenAPI::toJsonValue(m_transport_sms77));
    }
    if (m_transport_sms_biuras_isSet) {
        obj.insert(QString("transportSmsBiuras"), ::OpenAPI::toJsonValue(m_transport_sms_biuras));
    }
    if (m_transport_sms_factor_isSet) {
        obj.insert(QString("transportSmsFactor"), ::OpenAPI::toJsonValue(m_transport_sms_factor));
    }
    if (m_transport_smsapi_isSet) {
        obj.insert(QString("transportSmsapi"), ::OpenAPI::toJsonValue(m_transport_smsapi));
    }
    if (m_transport_smsc_isSet) {
        obj.insert(QString("transportSmsc"), ::OpenAPI::toJsonValue(m_transport_smsc));
    }
    if (m_transport_smsmode_isSet) {
        obj.insert(QString("transportSmsmode"), ::OpenAPI::toJsonValue(m_transport_smsmode));
    }
    if (m_transport_spot_hit_isSet) {
        obj.insert(QString("transportSpotHit"), ::OpenAPI::toJsonValue(m_transport_spot_hit));
    }
    if (m_transport_telegram_isSet) {
        obj.insert(QString("transportTelegram"), ::OpenAPI::toJsonValue(m_transport_telegram));
    }
    if (m_transport_telnyx_isSet) {
        obj.insert(QString("transportTelnyx"), ::OpenAPI::toJsonValue(m_transport_telnyx));
    }
    if (m_transport_termii_isSet) {
        obj.insert(QString("transportTermii"), ::OpenAPI::toJsonValue(m_transport_termii));
    }
    if (m_transport_trello_isSet) {
        obj.insert(QString("transportTrello"), ::OpenAPI::toJsonValue(m_transport_trello));
    }
    if (m_transport_turbo_sms_isSet) {
        obj.insert(QString("transportTurboSms"), ::OpenAPI::toJsonValue(m_transport_turbo_sms));
    }
    if (m_transport_twilio_isSet) {
        obj.insert(QString("transportTwilio"), ::OpenAPI::toJsonValue(m_transport_twilio));
    }
    if (m_transport_twitter_isSet) {
        obj.insert(QString("transportTwitter"), ::OpenAPI::toJsonValue(m_transport_twitter));
    }
    if (m_transport_vonage_isSet) {
        obj.insert(QString("transportVonage"), ::OpenAPI::toJsonValue(m_transport_vonage));
    }
    if (m_transport_webhook_isSet) {
        obj.insert(QString("transportWebhook"), ::OpenAPI::toJsonValue(m_transport_webhook));
    }
    if (m_transport_yunpian_isSet) {
        obj.insert(QString("transportYunpian"), ::OpenAPI::toJsonValue(m_transport_yunpian));
    }
    if (m_transport_zendesk_isSet) {
        obj.insert(QString("transportZendesk"), ::OpenAPI::toJsonValue(m_transport_zendesk));
    }
    if (m_transport_zulip_isSet) {
        obj.insert(QString("transportZulip"), ::OpenAPI::toJsonValue(m_transport_zulip));
    }
    return obj;
}

QString OAIAlertService_patch::getAlertServiceName() const {
    return m_alert_service_name;
}
void OAIAlertService_patch::setAlertServiceName(const QString &alert_service_name) {
    m_alert_service_name = alert_service_name;
    m_alert_service_name_isSet = true;
}

bool OAIAlertService_patch::is_alert_service_name_Set() const{
    return m_alert_service_name_isSet;
}

bool OAIAlertService_patch::is_alert_service_name_Valid() const{
    return m_alert_service_name_isValid;
}

QString OAIAlertService_patch::getAlertServiceNotes() const {
    return m_alert_service_notes;
}
void OAIAlertService_patch::setAlertServiceNotes(const QString &alert_service_notes) {
    m_alert_service_notes = alert_service_notes;
    m_alert_service_notes_isSet = true;
}

bool OAIAlertService_patch::is_alert_service_notes_Set() const{
    return m_alert_service_notes_isSet;
}

bool OAIAlertService_patch::is_alert_service_notes_Valid() const{
    return m_alert_service_notes_isValid;
}

QString OAIAlertService_patch::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAIAlertService_patch::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAIAlertService_patch::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAIAlertService_patch::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QList<QString> OAIAlertService_patch::getMediaObjects() const {
    return m_media_objects;
}
void OAIAlertService_patch::setMediaObjects(const QList<QString> &media_objects) {
    m_media_objects = media_objects;
    m_media_objects_isSet = true;
}

bool OAIAlertService_patch::is_media_objects_Set() const{
    return m_media_objects_isSet;
}

bool OAIAlertService_patch::is_media_objects_Valid() const{
    return m_media_objects_isValid;
}

QString OAIAlertService_patch::getRecipientEmailAddress() const {
    return m_recipient_email_address;
}
void OAIAlertService_patch::setRecipientEmailAddress(const QString &recipient_email_address) {
    m_recipient_email_address = recipient_email_address;
    m_recipient_email_address_isSet = true;
}

bool OAIAlertService_patch::is_recipient_email_address_Set() const{
    return m_recipient_email_address_isSet;
}

bool OAIAlertService_patch::is_recipient_email_address_Valid() const{
    return m_recipient_email_address_isValid;
}

QString OAIAlertService_patch::getRecipientPhoneNumber() const {
    return m_recipient_phone_number;
}
void OAIAlertService_patch::setRecipientPhoneNumber(const QString &recipient_phone_number) {
    m_recipient_phone_number = recipient_phone_number;
    m_recipient_phone_number_isSet = true;
}

bool OAIAlertService_patch::is_recipient_phone_number_Set() const{
    return m_recipient_phone_number_isSet;
}

bool OAIAlertService_patch::is_recipient_phone_number_Valid() const{
    return m_recipient_phone_number_isValid;
}

QString OAIAlertService_patch::getTransportAlerta() const {
    return m_transport_alerta;
}
void OAIAlertService_patch::setTransportAlerta(const QString &transport_alerta) {
    m_transport_alerta = transport_alerta;
    m_transport_alerta_isSet = true;
}

bool OAIAlertService_patch::is_transport_alerta_Set() const{
    return m_transport_alerta_isSet;
}

bool OAIAlertService_patch::is_transport_alerta_Valid() const{
    return m_transport_alerta_isValid;
}

QString OAIAlertService_patch::getTransportAllMySms() const {
    return m_transport_all_my_sms;
}
void OAIAlertService_patch::setTransportAllMySms(const QString &transport_all_my_sms) {
    m_transport_all_my_sms = transport_all_my_sms;
    m_transport_all_my_sms_isSet = true;
}

bool OAIAlertService_patch::is_transport_all_my_sms_Set() const{
    return m_transport_all_my_sms_isSet;
}

bool OAIAlertService_patch::is_transport_all_my_sms_Valid() const{
    return m_transport_all_my_sms_isValid;
}

QString OAIAlertService_patch::getTransportAmazonSns() const {
    return m_transport_amazon_sns;
}
void OAIAlertService_patch::setTransportAmazonSns(const QString &transport_amazon_sns) {
    m_transport_amazon_sns = transport_amazon_sns;
    m_transport_amazon_sns_isSet = true;
}

bool OAIAlertService_patch::is_transport_amazon_sns_Set() const{
    return m_transport_amazon_sns_isSet;
}

bool OAIAlertService_patch::is_transport_amazon_sns_Valid() const{
    return m_transport_amazon_sns_isValid;
}

QString OAIAlertService_patch::getTransportBandwidth() const {
    return m_transport_bandwidth;
}
void OAIAlertService_patch::setTransportBandwidth(const QString &transport_bandwidth) {
    m_transport_bandwidth = transport_bandwidth;
    m_transport_bandwidth_isSet = true;
}

bool OAIAlertService_patch::is_transport_bandwidth_Set() const{
    return m_transport_bandwidth_isSet;
}

bool OAIAlertService_patch::is_transport_bandwidth_Valid() const{
    return m_transport_bandwidth_isValid;
}

QString OAIAlertService_patch::getTransportChatwork() const {
    return m_transport_chatwork;
}
void OAIAlertService_patch::setTransportChatwork(const QString &transport_chatwork) {
    m_transport_chatwork = transport_chatwork;
    m_transport_chatwork_isSet = true;
}

bool OAIAlertService_patch::is_transport_chatwork_Set() const{
    return m_transport_chatwork_isSet;
}

bool OAIAlertService_patch::is_transport_chatwork_Valid() const{
    return m_transport_chatwork_isValid;
}

QString OAIAlertService_patch::getTransportClickSend() const {
    return m_transport_click_send;
}
void OAIAlertService_patch::setTransportClickSend(const QString &transport_click_send) {
    m_transport_click_send = transport_click_send;
    m_transport_click_send_isSet = true;
}

bool OAIAlertService_patch::is_transport_click_send_Set() const{
    return m_transport_click_send_isSet;
}

bool OAIAlertService_patch::is_transport_click_send_Valid() const{
    return m_transport_click_send_isValid;
}

QString OAIAlertService_patch::getTransportClickatell() const {
    return m_transport_clickatell;
}
void OAIAlertService_patch::setTransportClickatell(const QString &transport_clickatell) {
    m_transport_clickatell = transport_clickatell;
    m_transport_clickatell_isSet = true;
}

bool OAIAlertService_patch::is_transport_clickatell_Set() const{
    return m_transport_clickatell_isSet;
}

bool OAIAlertService_patch::is_transport_clickatell_Valid() const{
    return m_transport_clickatell_isValid;
}

QString OAIAlertService_patch::getTransportContactEveryone() const {
    return m_transport_contact_everyone;
}
void OAIAlertService_patch::setTransportContactEveryone(const QString &transport_contact_everyone) {
    m_transport_contact_everyone = transport_contact_everyone;
    m_transport_contact_everyone_isSet = true;
}

bool OAIAlertService_patch::is_transport_contact_everyone_Set() const{
    return m_transport_contact_everyone_isSet;
}

bool OAIAlertService_patch::is_transport_contact_everyone_Valid() const{
    return m_transport_contact_everyone_isValid;
}

QString OAIAlertService_patch::getTransportDiscord() const {
    return m_transport_discord;
}
void OAIAlertService_patch::setTransportDiscord(const QString &transport_discord) {
    m_transport_discord = transport_discord;
    m_transport_discord_isSet = true;
}

bool OAIAlertService_patch::is_transport_discord_Set() const{
    return m_transport_discord_isSet;
}

bool OAIAlertService_patch::is_transport_discord_Valid() const{
    return m_transport_discord_isValid;
}

QString OAIAlertService_patch::getTransportEmail() const {
    return m_transport_email;
}
void OAIAlertService_patch::setTransportEmail(const QString &transport_email) {
    m_transport_email = transport_email;
    m_transport_email_isSet = true;
}

bool OAIAlertService_patch::is_transport_email_Set() const{
    return m_transport_email_isSet;
}

bool OAIAlertService_patch::is_transport_email_Valid() const{
    return m_transport_email_isValid;
}

QString OAIAlertService_patch::getTransportEngagespot() const {
    return m_transport_engagespot;
}
void OAIAlertService_patch::setTransportEngagespot(const QString &transport_engagespot) {
    m_transport_engagespot = transport_engagespot;
    m_transport_engagespot_isSet = true;
}

bool OAIAlertService_patch::is_transport_engagespot_Set() const{
    return m_transport_engagespot_isSet;
}

bool OAIAlertService_patch::is_transport_engagespot_Valid() const{
    return m_transport_engagespot_isValid;
}

QString OAIAlertService_patch::getTransportEsendex() const {
    return m_transport_esendex;
}
void OAIAlertService_patch::setTransportEsendex(const QString &transport_esendex) {
    m_transport_esendex = transport_esendex;
    m_transport_esendex_isSet = true;
}

bool OAIAlertService_patch::is_transport_esendex_Set() const{
    return m_transport_esendex_isSet;
}

bool OAIAlertService_patch::is_transport_esendex_Valid() const{
    return m_transport_esendex_isValid;
}

QString OAIAlertService_patch::getTransportExpo() const {
    return m_transport_expo;
}
void OAIAlertService_patch::setTransportExpo(const QString &transport_expo) {
    m_transport_expo = transport_expo;
    m_transport_expo_isSet = true;
}

bool OAIAlertService_patch::is_transport_expo_Set() const{
    return m_transport_expo_isSet;
}

bool OAIAlertService_patch::is_transport_expo_Valid() const{
    return m_transport_expo_isValid;
}

QString OAIAlertService_patch::getTransportFirebase() const {
    return m_transport_firebase;
}
void OAIAlertService_patch::setTransportFirebase(const QString &transport_firebase) {
    m_transport_firebase = transport_firebase;
    m_transport_firebase_isSet = true;
}

bool OAIAlertService_patch::is_transport_firebase_Set() const{
    return m_transport_firebase_isSet;
}

bool OAIAlertService_patch::is_transport_firebase_Valid() const{
    return m_transport_firebase_isValid;
}

QString OAIAlertService_patch::getTransportFortySixElks() const {
    return m_transport_forty_six_elks;
}
void OAIAlertService_patch::setTransportFortySixElks(const QString &transport_forty_six_elks) {
    m_transport_forty_six_elks = transport_forty_six_elks;
    m_transport_forty_six_elks_isSet = true;
}

bool OAIAlertService_patch::is_transport_forty_six_elks_Set() const{
    return m_transport_forty_six_elks_isSet;
}

bool OAIAlertService_patch::is_transport_forty_six_elks_Valid() const{
    return m_transport_forty_six_elks_isValid;
}

QString OAIAlertService_patch::getTransportFreeMobile() const {
    return m_transport_free_mobile;
}
void OAIAlertService_patch::setTransportFreeMobile(const QString &transport_free_mobile) {
    m_transport_free_mobile = transport_free_mobile;
    m_transport_free_mobile_isSet = true;
}

bool OAIAlertService_patch::is_transport_free_mobile_Set() const{
    return m_transport_free_mobile_isSet;
}

bool OAIAlertService_patch::is_transport_free_mobile_Valid() const{
    return m_transport_free_mobile_isValid;
}

QString OAIAlertService_patch::getTransportFreshdesk() const {
    return m_transport_freshdesk;
}
void OAIAlertService_patch::setTransportFreshdesk(const QString &transport_freshdesk) {
    m_transport_freshdesk = transport_freshdesk;
    m_transport_freshdesk_isSet = true;
}

bool OAIAlertService_patch::is_transport_freshdesk_Set() const{
    return m_transport_freshdesk_isSet;
}

bool OAIAlertService_patch::is_transport_freshdesk_Valid() const{
    return m_transport_freshdesk_isValid;
}

QString OAIAlertService_patch::getTransportGatewayApi() const {
    return m_transport_gateway_api;
}
void OAIAlertService_patch::setTransportGatewayApi(const QString &transport_gateway_api) {
    m_transport_gateway_api = transport_gateway_api;
    m_transport_gateway_api_isSet = true;
}

bool OAIAlertService_patch::is_transport_gateway_api_Set() const{
    return m_transport_gateway_api_isSet;
}

bool OAIAlertService_patch::is_transport_gateway_api_Valid() const{
    return m_transport_gateway_api_isValid;
}

QString OAIAlertService_patch::getTransportGitter() const {
    return m_transport_gitter;
}
void OAIAlertService_patch::setTransportGitter(const QString &transport_gitter) {
    m_transport_gitter = transport_gitter;
    m_transport_gitter_isSet = true;
}

bool OAIAlertService_patch::is_transport_gitter_Set() const{
    return m_transport_gitter_isSet;
}

bool OAIAlertService_patch::is_transport_gitter_Valid() const{
    return m_transport_gitter_isValid;
}

QString OAIAlertService_patch::getTransportGoogleChat() const {
    return m_transport_google_chat;
}
void OAIAlertService_patch::setTransportGoogleChat(const QString &transport_google_chat) {
    m_transport_google_chat = transport_google_chat;
    m_transport_google_chat_isSet = true;
}

bool OAIAlertService_patch::is_transport_google_chat_Set() const{
    return m_transport_google_chat_isSet;
}

bool OAIAlertService_patch::is_transport_google_chat_Valid() const{
    return m_transport_google_chat_isValid;
}

QString OAIAlertService_patch::getTransportGotify() const {
    return m_transport_gotify;
}
void OAIAlertService_patch::setTransportGotify(const QString &transport_gotify) {
    m_transport_gotify = transport_gotify;
    m_transport_gotify_isSet = true;
}

bool OAIAlertService_patch::is_transport_gotify_Set() const{
    return m_transport_gotify_isSet;
}

bool OAIAlertService_patch::is_transport_gotify_Valid() const{
    return m_transport_gotify_isValid;
}

QString OAIAlertService_patch::getTransportHelpScout() const {
    return m_transport_help_scout;
}
void OAIAlertService_patch::setTransportHelpScout(const QString &transport_help_scout) {
    m_transport_help_scout = transport_help_scout;
    m_transport_help_scout_isSet = true;
}

bool OAIAlertService_patch::is_transport_help_scout_Set() const{
    return m_transport_help_scout_isSet;
}

bool OAIAlertService_patch::is_transport_help_scout_Valid() const{
    return m_transport_help_scout_isValid;
}

QString OAIAlertService_patch::getTransportInfobip() const {
    return m_transport_infobip;
}
void OAIAlertService_patch::setTransportInfobip(const QString &transport_infobip) {
    m_transport_infobip = transport_infobip;
    m_transport_infobip_isSet = true;
}

bool OAIAlertService_patch::is_transport_infobip_Set() const{
    return m_transport_infobip_isSet;
}

bool OAIAlertService_patch::is_transport_infobip_Valid() const{
    return m_transport_infobip_isValid;
}

QString OAIAlertService_patch::getTransportIqsms() const {
    return m_transport_iqsms;
}
void OAIAlertService_patch::setTransportIqsms(const QString &transport_iqsms) {
    m_transport_iqsms = transport_iqsms;
    m_transport_iqsms_isSet = true;
}

bool OAIAlertService_patch::is_transport_iqsms_Set() const{
    return m_transport_iqsms_isSet;
}

bool OAIAlertService_patch::is_transport_iqsms_Valid() const{
    return m_transport_iqsms_isValid;
}

QString OAIAlertService_patch::getTransportKazInfoTeh() const {
    return m_transport_kaz_info_teh;
}
void OAIAlertService_patch::setTransportKazInfoTeh(const QString &transport_kaz_info_teh) {
    m_transport_kaz_info_teh = transport_kaz_info_teh;
    m_transport_kaz_info_teh_isSet = true;
}

bool OAIAlertService_patch::is_transport_kaz_info_teh_Set() const{
    return m_transport_kaz_info_teh_isSet;
}

bool OAIAlertService_patch::is_transport_kaz_info_teh_Valid() const{
    return m_transport_kaz_info_teh_isValid;
}

QString OAIAlertService_patch::getTransportLightSms() const {
    return m_transport_light_sms;
}
void OAIAlertService_patch::setTransportLightSms(const QString &transport_light_sms) {
    m_transport_light_sms = transport_light_sms;
    m_transport_light_sms_isSet = true;
}

bool OAIAlertService_patch::is_transport_light_sms_Set() const{
    return m_transport_light_sms_isSet;
}

bool OAIAlertService_patch::is_transport_light_sms_Valid() const{
    return m_transport_light_sms_isValid;
}

QString OAIAlertService_patch::getTransportLineNotify() const {
    return m_transport_line_notify;
}
void OAIAlertService_patch::setTransportLineNotify(const QString &transport_line_notify) {
    m_transport_line_notify = transport_line_notify;
    m_transport_line_notify_isSet = true;
}

bool OAIAlertService_patch::is_transport_line_notify_Set() const{
    return m_transport_line_notify_isSet;
}

bool OAIAlertService_patch::is_transport_line_notify_Valid() const{
    return m_transport_line_notify_isValid;
}

QString OAIAlertService_patch::getTransportLinkedIn() const {
    return m_transport_linked_in;
}
void OAIAlertService_patch::setTransportLinkedIn(const QString &transport_linked_in) {
    m_transport_linked_in = transport_linked_in;
    m_transport_linked_in_isSet = true;
}

bool OAIAlertService_patch::is_transport_linked_in_Set() const{
    return m_transport_linked_in_isSet;
}

bool OAIAlertService_patch::is_transport_linked_in_Valid() const{
    return m_transport_linked_in_isValid;
}

QString OAIAlertService_patch::getTransportMailjet() const {
    return m_transport_mailjet;
}
void OAIAlertService_patch::setTransportMailjet(const QString &transport_mailjet) {
    m_transport_mailjet = transport_mailjet;
    m_transport_mailjet_isSet = true;
}

bool OAIAlertService_patch::is_transport_mailjet_Set() const{
    return m_transport_mailjet_isSet;
}

bool OAIAlertService_patch::is_transport_mailjet_Valid() const{
    return m_transport_mailjet_isValid;
}

QString OAIAlertService_patch::getTransportMastodon() const {
    return m_transport_mastodon;
}
void OAIAlertService_patch::setTransportMastodon(const QString &transport_mastodon) {
    m_transport_mastodon = transport_mastodon;
    m_transport_mastodon_isSet = true;
}

bool OAIAlertService_patch::is_transport_mastodon_Set() const{
    return m_transport_mastodon_isSet;
}

bool OAIAlertService_patch::is_transport_mastodon_Valid() const{
    return m_transport_mastodon_isValid;
}

QString OAIAlertService_patch::getTransportMattermost() const {
    return m_transport_mattermost;
}
void OAIAlertService_patch::setTransportMattermost(const QString &transport_mattermost) {
    m_transport_mattermost = transport_mattermost;
    m_transport_mattermost_isSet = true;
}

bool OAIAlertService_patch::is_transport_mattermost_Set() const{
    return m_transport_mattermost_isSet;
}

bool OAIAlertService_patch::is_transport_mattermost_Valid() const{
    return m_transport_mattermost_isValid;
}

QString OAIAlertService_patch::getTransportMercure() const {
    return m_transport_mercure;
}
void OAIAlertService_patch::setTransportMercure(const QString &transport_mercure) {
    m_transport_mercure = transport_mercure;
    m_transport_mercure_isSet = true;
}

bool OAIAlertService_patch::is_transport_mercure_Set() const{
    return m_transport_mercure_isSet;
}

bool OAIAlertService_patch::is_transport_mercure_Valid() const{
    return m_transport_mercure_isValid;
}

QString OAIAlertService_patch::getTransportMessageBird() const {
    return m_transport_message_bird;
}
void OAIAlertService_patch::setTransportMessageBird(const QString &transport_message_bird) {
    m_transport_message_bird = transport_message_bird;
    m_transport_message_bird_isSet = true;
}

bool OAIAlertService_patch::is_transport_message_bird_Set() const{
    return m_transport_message_bird_isSet;
}

bool OAIAlertService_patch::is_transport_message_bird_Valid() const{
    return m_transport_message_bird_isValid;
}

QString OAIAlertService_patch::getTransportMessageMedia() const {
    return m_transport_message_media;
}
void OAIAlertService_patch::setTransportMessageMedia(const QString &transport_message_media) {
    m_transport_message_media = transport_message_media;
    m_transport_message_media_isSet = true;
}

bool OAIAlertService_patch::is_transport_message_media_Set() const{
    return m_transport_message_media_isSet;
}

bool OAIAlertService_patch::is_transport_message_media_Valid() const{
    return m_transport_message_media_isValid;
}

QString OAIAlertService_patch::getTransportMicrosoftTeams() const {
    return m_transport_microsoft_teams;
}
void OAIAlertService_patch::setTransportMicrosoftTeams(const QString &transport_microsoft_teams) {
    m_transport_microsoft_teams = transport_microsoft_teams;
    m_transport_microsoft_teams_isSet = true;
}

bool OAIAlertService_patch::is_transport_microsoft_teams_Set() const{
    return m_transport_microsoft_teams_isSet;
}

bool OAIAlertService_patch::is_transport_microsoft_teams_Valid() const{
    return m_transport_microsoft_teams_isValid;
}

QString OAIAlertService_patch::getTransportMobyt() const {
    return m_transport_mobyt;
}
void OAIAlertService_patch::setTransportMobyt(const QString &transport_mobyt) {
    m_transport_mobyt = transport_mobyt;
    m_transport_mobyt_isSet = true;
}

bool OAIAlertService_patch::is_transport_mobyt_Set() const{
    return m_transport_mobyt_isSet;
}

bool OAIAlertService_patch::is_transport_mobyt_Valid() const{
    return m_transport_mobyt_isValid;
}

QString OAIAlertService_patch::getTransportOctopush() const {
    return m_transport_octopush;
}
void OAIAlertService_patch::setTransportOctopush(const QString &transport_octopush) {
    m_transport_octopush = transport_octopush;
    m_transport_octopush_isSet = true;
}

bool OAIAlertService_patch::is_transport_octopush_Set() const{
    return m_transport_octopush_isSet;
}

bool OAIAlertService_patch::is_transport_octopush_Valid() const{
    return m_transport_octopush_isValid;
}

QString OAIAlertService_patch::getTransportOneSignal() const {
    return m_transport_one_signal;
}
void OAIAlertService_patch::setTransportOneSignal(const QString &transport_one_signal) {
    m_transport_one_signal = transport_one_signal;
    m_transport_one_signal_isSet = true;
}

bool OAIAlertService_patch::is_transport_one_signal_Set() const{
    return m_transport_one_signal_isSet;
}

bool OAIAlertService_patch::is_transport_one_signal_Valid() const{
    return m_transport_one_signal_isValid;
}

QString OAIAlertService_patch::getTransportOpsgenie() const {
    return m_transport_opsgenie;
}
void OAIAlertService_patch::setTransportOpsgenie(const QString &transport_opsgenie) {
    m_transport_opsgenie = transport_opsgenie;
    m_transport_opsgenie_isSet = true;
}

bool OAIAlertService_patch::is_transport_opsgenie_Set() const{
    return m_transport_opsgenie_isSet;
}

bool OAIAlertService_patch::is_transport_opsgenie_Valid() const{
    return m_transport_opsgenie_isValid;
}

QString OAIAlertService_patch::getTransportOrangeSms() const {
    return m_transport_orange_sms;
}
void OAIAlertService_patch::setTransportOrangeSms(const QString &transport_orange_sms) {
    m_transport_orange_sms = transport_orange_sms;
    m_transport_orange_sms_isSet = true;
}

bool OAIAlertService_patch::is_transport_orange_sms_Set() const{
    return m_transport_orange_sms_isSet;
}

bool OAIAlertService_patch::is_transport_orange_sms_Valid() const{
    return m_transport_orange_sms_isValid;
}

QString OAIAlertService_patch::getTransportOvhCloud() const {
    return m_transport_ovh_cloud;
}
void OAIAlertService_patch::setTransportOvhCloud(const QString &transport_ovh_cloud) {
    m_transport_ovh_cloud = transport_ovh_cloud;
    m_transport_ovh_cloud_isSet = true;
}

bool OAIAlertService_patch::is_transport_ovh_cloud_Set() const{
    return m_transport_ovh_cloud_isSet;
}

bool OAIAlertService_patch::is_transport_ovh_cloud_Valid() const{
    return m_transport_ovh_cloud_isValid;
}

QString OAIAlertService_patch::getTransportPagerDuty() const {
    return m_transport_pager_duty;
}
void OAIAlertService_patch::setTransportPagerDuty(const QString &transport_pager_duty) {
    m_transport_pager_duty = transport_pager_duty;
    m_transport_pager_duty_isSet = true;
}

bool OAIAlertService_patch::is_transport_pager_duty_Set() const{
    return m_transport_pager_duty_isSet;
}

bool OAIAlertService_patch::is_transport_pager_duty_Valid() const{
    return m_transport_pager_duty_isValid;
}

QString OAIAlertService_patch::getTransportPagerTree() const {
    return m_transport_pager_tree;
}
void OAIAlertService_patch::setTransportPagerTree(const QString &transport_pager_tree) {
    m_transport_pager_tree = transport_pager_tree;
    m_transport_pager_tree_isSet = true;
}

bool OAIAlertService_patch::is_transport_pager_tree_Set() const{
    return m_transport_pager_tree_isSet;
}

bool OAIAlertService_patch::is_transport_pager_tree_Valid() const{
    return m_transport_pager_tree_isValid;
}

QString OAIAlertService_patch::getTransportPlivo() const {
    return m_transport_plivo;
}
void OAIAlertService_patch::setTransportPlivo(const QString &transport_plivo) {
    m_transport_plivo = transport_plivo;
    m_transport_plivo_isSet = true;
}

bool OAIAlertService_patch::is_transport_plivo_Set() const{
    return m_transport_plivo_isSet;
}

bool OAIAlertService_patch::is_transport_plivo_Valid() const{
    return m_transport_plivo_isValid;
}

QString OAIAlertService_patch::getTransportPushbullet() const {
    return m_transport_pushbullet;
}
void OAIAlertService_patch::setTransportPushbullet(const QString &transport_pushbullet) {
    m_transport_pushbullet = transport_pushbullet;
    m_transport_pushbullet_isSet = true;
}

bool OAIAlertService_patch::is_transport_pushbullet_Set() const{
    return m_transport_pushbullet_isSet;
}

bool OAIAlertService_patch::is_transport_pushbullet_Valid() const{
    return m_transport_pushbullet_isValid;
}

QString OAIAlertService_patch::getTransportPushover() const {
    return m_transport_pushover;
}
void OAIAlertService_patch::setTransportPushover(const QString &transport_pushover) {
    m_transport_pushover = transport_pushover;
    m_transport_pushover_isSet = true;
}

bool OAIAlertService_patch::is_transport_pushover_Set() const{
    return m_transport_pushover_isSet;
}

bool OAIAlertService_patch::is_transport_pushover_Valid() const{
    return m_transport_pushover_isValid;
}

QString OAIAlertService_patch::getTransportPushy() const {
    return m_transport_pushy;
}
void OAIAlertService_patch::setTransportPushy(const QString &transport_pushy) {
    m_transport_pushy = transport_pushy;
    m_transport_pushy_isSet = true;
}

bool OAIAlertService_patch::is_transport_pushy_Set() const{
    return m_transport_pushy_isSet;
}

bool OAIAlertService_patch::is_transport_pushy_Valid() const{
    return m_transport_pushy_isValid;
}

QString OAIAlertService_patch::getTransportRingCentral() const {
    return m_transport_ring_central;
}
void OAIAlertService_patch::setTransportRingCentral(const QString &transport_ring_central) {
    m_transport_ring_central = transport_ring_central;
    m_transport_ring_central_isSet = true;
}

bool OAIAlertService_patch::is_transport_ring_central_Set() const{
    return m_transport_ring_central_isSet;
}

bool OAIAlertService_patch::is_transport_ring_central_Valid() const{
    return m_transport_ring_central_isValid;
}

QString OAIAlertService_patch::getTransportRocketChat() const {
    return m_transport_rocket_chat;
}
void OAIAlertService_patch::setTransportRocketChat(const QString &transport_rocket_chat) {
    m_transport_rocket_chat = transport_rocket_chat;
    m_transport_rocket_chat_isSet = true;
}

bool OAIAlertService_patch::is_transport_rocket_chat_Set() const{
    return m_transport_rocket_chat_isSet;
}

bool OAIAlertService_patch::is_transport_rocket_chat_Valid() const{
    return m_transport_rocket_chat_isValid;
}

QString OAIAlertService_patch::getTransportSendberry() const {
    return m_transport_sendberry;
}
void OAIAlertService_patch::setTransportSendberry(const QString &transport_sendberry) {
    m_transport_sendberry = transport_sendberry;
    m_transport_sendberry_isSet = true;
}

bool OAIAlertService_patch::is_transport_sendberry_Set() const{
    return m_transport_sendberry_isSet;
}

bool OAIAlertService_patch::is_transport_sendberry_Valid() const{
    return m_transport_sendberry_isValid;
}

QString OAIAlertService_patch::getTransportSendinblue() const {
    return m_transport_sendinblue;
}
void OAIAlertService_patch::setTransportSendinblue(const QString &transport_sendinblue) {
    m_transport_sendinblue = transport_sendinblue;
    m_transport_sendinblue_isSet = true;
}

bool OAIAlertService_patch::is_transport_sendinblue_Set() const{
    return m_transport_sendinblue_isSet;
}

bool OAIAlertService_patch::is_transport_sendinblue_Valid() const{
    return m_transport_sendinblue_isValid;
}

QString OAIAlertService_patch::getTransportSimpleTextin() const {
    return m_transport_simple_textin;
}
void OAIAlertService_patch::setTransportSimpleTextin(const QString &transport_simple_textin) {
    m_transport_simple_textin = transport_simple_textin;
    m_transport_simple_textin_isSet = true;
}

bool OAIAlertService_patch::is_transport_simple_textin_Set() const{
    return m_transport_simple_textin_isSet;
}

bool OAIAlertService_patch::is_transport_simple_textin_Valid() const{
    return m_transport_simple_textin_isValid;
}

QString OAIAlertService_patch::getTransportSinch() const {
    return m_transport_sinch;
}
void OAIAlertService_patch::setTransportSinch(const QString &transport_sinch) {
    m_transport_sinch = transport_sinch;
    m_transport_sinch_isSet = true;
}

bool OAIAlertService_patch::is_transport_sinch_Set() const{
    return m_transport_sinch_isSet;
}

bool OAIAlertService_patch::is_transport_sinch_Valid() const{
    return m_transport_sinch_isValid;
}

QString OAIAlertService_patch::getTransportSlack() const {
    return m_transport_slack;
}
void OAIAlertService_patch::setTransportSlack(const QString &transport_slack) {
    m_transport_slack = transport_slack;
    m_transport_slack_isSet = true;
}

bool OAIAlertService_patch::is_transport_slack_Set() const{
    return m_transport_slack_isSet;
}

bool OAIAlertService_patch::is_transport_slack_Valid() const{
    return m_transport_slack_isValid;
}

QString OAIAlertService_patch::getTransportSms77() const {
    return m_transport_sms77;
}
void OAIAlertService_patch::setTransportSms77(const QString &transport_sms77) {
    m_transport_sms77 = transport_sms77;
    m_transport_sms77_isSet = true;
}

bool OAIAlertService_patch::is_transport_sms77_Set() const{
    return m_transport_sms77_isSet;
}

bool OAIAlertService_patch::is_transport_sms77_Valid() const{
    return m_transport_sms77_isValid;
}

QString OAIAlertService_patch::getTransportSmsBiuras() const {
    return m_transport_sms_biuras;
}
void OAIAlertService_patch::setTransportSmsBiuras(const QString &transport_sms_biuras) {
    m_transport_sms_biuras = transport_sms_biuras;
    m_transport_sms_biuras_isSet = true;
}

bool OAIAlertService_patch::is_transport_sms_biuras_Set() const{
    return m_transport_sms_biuras_isSet;
}

bool OAIAlertService_patch::is_transport_sms_biuras_Valid() const{
    return m_transport_sms_biuras_isValid;
}

QString OAIAlertService_patch::getTransportSmsFactor() const {
    return m_transport_sms_factor;
}
void OAIAlertService_patch::setTransportSmsFactor(const QString &transport_sms_factor) {
    m_transport_sms_factor = transport_sms_factor;
    m_transport_sms_factor_isSet = true;
}

bool OAIAlertService_patch::is_transport_sms_factor_Set() const{
    return m_transport_sms_factor_isSet;
}

bool OAIAlertService_patch::is_transport_sms_factor_Valid() const{
    return m_transport_sms_factor_isValid;
}

QString OAIAlertService_patch::getTransportSmsapi() const {
    return m_transport_smsapi;
}
void OAIAlertService_patch::setTransportSmsapi(const QString &transport_smsapi) {
    m_transport_smsapi = transport_smsapi;
    m_transport_smsapi_isSet = true;
}

bool OAIAlertService_patch::is_transport_smsapi_Set() const{
    return m_transport_smsapi_isSet;
}

bool OAIAlertService_patch::is_transport_smsapi_Valid() const{
    return m_transport_smsapi_isValid;
}

QString OAIAlertService_patch::getTransportSmsc() const {
    return m_transport_smsc;
}
void OAIAlertService_patch::setTransportSmsc(const QString &transport_smsc) {
    m_transport_smsc = transport_smsc;
    m_transport_smsc_isSet = true;
}

bool OAIAlertService_patch::is_transport_smsc_Set() const{
    return m_transport_smsc_isSet;
}

bool OAIAlertService_patch::is_transport_smsc_Valid() const{
    return m_transport_smsc_isValid;
}

QString OAIAlertService_patch::getTransportSmsmode() const {
    return m_transport_smsmode;
}
void OAIAlertService_patch::setTransportSmsmode(const QString &transport_smsmode) {
    m_transport_smsmode = transport_smsmode;
    m_transport_smsmode_isSet = true;
}

bool OAIAlertService_patch::is_transport_smsmode_Set() const{
    return m_transport_smsmode_isSet;
}

bool OAIAlertService_patch::is_transport_smsmode_Valid() const{
    return m_transport_smsmode_isValid;
}

QString OAIAlertService_patch::getTransportSpotHit() const {
    return m_transport_spot_hit;
}
void OAIAlertService_patch::setTransportSpotHit(const QString &transport_spot_hit) {
    m_transport_spot_hit = transport_spot_hit;
    m_transport_spot_hit_isSet = true;
}

bool OAIAlertService_patch::is_transport_spot_hit_Set() const{
    return m_transport_spot_hit_isSet;
}

bool OAIAlertService_patch::is_transport_spot_hit_Valid() const{
    return m_transport_spot_hit_isValid;
}

QString OAIAlertService_patch::getTransportTelegram() const {
    return m_transport_telegram;
}
void OAIAlertService_patch::setTransportTelegram(const QString &transport_telegram) {
    m_transport_telegram = transport_telegram;
    m_transport_telegram_isSet = true;
}

bool OAIAlertService_patch::is_transport_telegram_Set() const{
    return m_transport_telegram_isSet;
}

bool OAIAlertService_patch::is_transport_telegram_Valid() const{
    return m_transport_telegram_isValid;
}

QString OAIAlertService_patch::getTransportTelnyx() const {
    return m_transport_telnyx;
}
void OAIAlertService_patch::setTransportTelnyx(const QString &transport_telnyx) {
    m_transport_telnyx = transport_telnyx;
    m_transport_telnyx_isSet = true;
}

bool OAIAlertService_patch::is_transport_telnyx_Set() const{
    return m_transport_telnyx_isSet;
}

bool OAIAlertService_patch::is_transport_telnyx_Valid() const{
    return m_transport_telnyx_isValid;
}

QString OAIAlertService_patch::getTransportTermii() const {
    return m_transport_termii;
}
void OAIAlertService_patch::setTransportTermii(const QString &transport_termii) {
    m_transport_termii = transport_termii;
    m_transport_termii_isSet = true;
}

bool OAIAlertService_patch::is_transport_termii_Set() const{
    return m_transport_termii_isSet;
}

bool OAIAlertService_patch::is_transport_termii_Valid() const{
    return m_transport_termii_isValid;
}

QString OAIAlertService_patch::getTransportTrello() const {
    return m_transport_trello;
}
void OAIAlertService_patch::setTransportTrello(const QString &transport_trello) {
    m_transport_trello = transport_trello;
    m_transport_trello_isSet = true;
}

bool OAIAlertService_patch::is_transport_trello_Set() const{
    return m_transport_trello_isSet;
}

bool OAIAlertService_patch::is_transport_trello_Valid() const{
    return m_transport_trello_isValid;
}

QString OAIAlertService_patch::getTransportTurboSms() const {
    return m_transport_turbo_sms;
}
void OAIAlertService_patch::setTransportTurboSms(const QString &transport_turbo_sms) {
    m_transport_turbo_sms = transport_turbo_sms;
    m_transport_turbo_sms_isSet = true;
}

bool OAIAlertService_patch::is_transport_turbo_sms_Set() const{
    return m_transport_turbo_sms_isSet;
}

bool OAIAlertService_patch::is_transport_turbo_sms_Valid() const{
    return m_transport_turbo_sms_isValid;
}

QString OAIAlertService_patch::getTransportTwilio() const {
    return m_transport_twilio;
}
void OAIAlertService_patch::setTransportTwilio(const QString &transport_twilio) {
    m_transport_twilio = transport_twilio;
    m_transport_twilio_isSet = true;
}

bool OAIAlertService_patch::is_transport_twilio_Set() const{
    return m_transport_twilio_isSet;
}

bool OAIAlertService_patch::is_transport_twilio_Valid() const{
    return m_transport_twilio_isValid;
}

QString OAIAlertService_patch::getTransportTwitter() const {
    return m_transport_twitter;
}
void OAIAlertService_patch::setTransportTwitter(const QString &transport_twitter) {
    m_transport_twitter = transport_twitter;
    m_transport_twitter_isSet = true;
}

bool OAIAlertService_patch::is_transport_twitter_Set() const{
    return m_transport_twitter_isSet;
}

bool OAIAlertService_patch::is_transport_twitter_Valid() const{
    return m_transport_twitter_isValid;
}

QString OAIAlertService_patch::getTransportVonage() const {
    return m_transport_vonage;
}
void OAIAlertService_patch::setTransportVonage(const QString &transport_vonage) {
    m_transport_vonage = transport_vonage;
    m_transport_vonage_isSet = true;
}

bool OAIAlertService_patch::is_transport_vonage_Set() const{
    return m_transport_vonage_isSet;
}

bool OAIAlertService_patch::is_transport_vonage_Valid() const{
    return m_transport_vonage_isValid;
}

QString OAIAlertService_patch::getTransportWebhook() const {
    return m_transport_webhook;
}
void OAIAlertService_patch::setTransportWebhook(const QString &transport_webhook) {
    m_transport_webhook = transport_webhook;
    m_transport_webhook_isSet = true;
}

bool OAIAlertService_patch::is_transport_webhook_Set() const{
    return m_transport_webhook_isSet;
}

bool OAIAlertService_patch::is_transport_webhook_Valid() const{
    return m_transport_webhook_isValid;
}

QString OAIAlertService_patch::getTransportYunpian() const {
    return m_transport_yunpian;
}
void OAIAlertService_patch::setTransportYunpian(const QString &transport_yunpian) {
    m_transport_yunpian = transport_yunpian;
    m_transport_yunpian_isSet = true;
}

bool OAIAlertService_patch::is_transport_yunpian_Set() const{
    return m_transport_yunpian_isSet;
}

bool OAIAlertService_patch::is_transport_yunpian_Valid() const{
    return m_transport_yunpian_isValid;
}

QString OAIAlertService_patch::getTransportZendesk() const {
    return m_transport_zendesk;
}
void OAIAlertService_patch::setTransportZendesk(const QString &transport_zendesk) {
    m_transport_zendesk = transport_zendesk;
    m_transport_zendesk_isSet = true;
}

bool OAIAlertService_patch::is_transport_zendesk_Set() const{
    return m_transport_zendesk_isSet;
}

bool OAIAlertService_patch::is_transport_zendesk_Valid() const{
    return m_transport_zendesk_isValid;
}

QString OAIAlertService_patch::getTransportZulip() const {
    return m_transport_zulip;
}
void OAIAlertService_patch::setTransportZulip(const QString &transport_zulip) {
    m_transport_zulip = transport_zulip;
    m_transport_zulip_isSet = true;
}

bool OAIAlertService_patch::is_transport_zulip_Set() const{
    return m_transport_zulip_isSet;
}

bool OAIAlertService_patch::is_transport_zulip_Valid() const{
    return m_transport_zulip_isValid;
}

bool OAIAlertService_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_service_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_alerta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_all_my_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_amazon_sns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_chatwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_click_send_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_clickatell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_contact_everyone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_discord_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_engagespot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_esendex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_expo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_firebase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_forty_six_elks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_free_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_freshdesk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_gateway_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_gitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_google_chat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_gotify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_help_scout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_infobip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_iqsms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_kaz_info_teh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_light_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_line_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_linked_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_mailjet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_mastodon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_mattermost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_mercure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_message_bird_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_message_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_microsoft_teams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_mobyt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_octopush_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_one_signal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_opsgenie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_orange_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_ovh_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_pager_duty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_pager_tree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_plivo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_pushbullet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_pushover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_pushy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_ring_central_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_rocket_chat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_sendberry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_sendinblue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_simple_textin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_sinch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_slack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_sms77_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_sms_biuras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_sms_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_smsapi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_smsc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_smsmode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_spot_hit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_telegram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_telnyx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_termii_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_trello_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_turbo_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_twilio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_vonage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_yunpian_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_zendesk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_zulip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertService_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_service_name_isValid && m_recipient_email_address_isValid && m_recipient_phone_number_isValid && true;
}

} // namespace OpenAPI
