/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimezoneCode_jsonld_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimezoneCode_jsonld_get::OAITimezoneCode_jsonld_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimezoneCode_jsonld_get::OAITimezoneCode_jsonld_get() {
    this->initializeModel();
}

OAITimezoneCode_jsonld_get::~OAITimezoneCode_jsonld_get() {}

void OAITimezoneCode_jsonld_get::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_code_name_isSet = false;
    m_code_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_offset_from_utc_isSet = false;
    m_offset_from_utc_isValid = false;

    m_timezone_date_string_isSet = false;
    m_timezone_date_string_isValid = false;
}

void OAITimezoneCode_jsonld_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimezoneCode_jsonld_get::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_code_name_isValid = ::OpenAPI::fromJsonValue(m_code_name, json[QString("codeName")]);
    m_code_name_isSet = !json[QString("codeName")].isNull() && m_code_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_offset_from_utc_isValid = ::OpenAPI::fromJsonValue(m_offset_from_utc, json[QString("offsetFromUtc")]);
    m_offset_from_utc_isSet = !json[QString("offsetFromUtc")].isNull() && m_offset_from_utc_isValid;

    m_timezone_date_string_isValid = ::OpenAPI::fromJsonValue(m_timezone_date_string, json[QString("timezoneDateString")]);
    m_timezone_date_string_isSet = !json[QString("timezoneDateString")].isNull() && m_timezone_date_string_isValid;
}

QString OAITimezoneCode_jsonld_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimezoneCode_jsonld_get::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_code_name_isSet) {
        obj.insert(QString("codeName"), ::OpenAPI::toJsonValue(m_code_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_offset_from_utc_isSet) {
        obj.insert(QString("offsetFromUtc"), ::OpenAPI::toJsonValue(m_offset_from_utc));
    }
    if (m_timezone_date_string_isSet) {
        obj.insert(QString("timezoneDateString"), ::OpenAPI::toJsonValue(m_timezone_date_string));
    }
    return obj;
}

OAIAlertLog_jsonld_get__context OAITimezoneCode_jsonld_get::getContext() const {
    return m_context;
}
void OAITimezoneCode_jsonld_get::setContext(const OAIAlertLog_jsonld_get__context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_context_Set() const{
    return m_context_isSet;
}

bool OAITimezoneCode_jsonld_get::is_context_Valid() const{
    return m_context_isValid;
}

QString OAITimezoneCode_jsonld_get::getId() const {
    return m_id;
}
void OAITimezoneCode_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimezoneCode_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITimezoneCode_jsonld_get::getType() const {
    return m_type;
}
void OAITimezoneCode_jsonld_get::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_type_Set() const{
    return m_type_isSet;
}

bool OAITimezoneCode_jsonld_get::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITimezoneCode_jsonld_get::getCodeName() const {
    return m_code_name;
}
void OAITimezoneCode_jsonld_get::setCodeName(const QString &code_name) {
    m_code_name = code_name;
    m_code_name_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_code_name_Set() const{
    return m_code_name_isSet;
}

bool OAITimezoneCode_jsonld_get::is_code_name_Valid() const{
    return m_code_name_isValid;
}

QString OAITimezoneCode_jsonld_get::getId() const {
    return m_id;
}
void OAITimezoneCode_jsonld_get::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimezoneCode_jsonld_get::is_id_Valid() const{
    return m_id_isValid;
}

double OAITimezoneCode_jsonld_get::getOffsetFromUtc() const {
    return m_offset_from_utc;
}
void OAITimezoneCode_jsonld_get::setOffsetFromUtc(const double &offset_from_utc) {
    m_offset_from_utc = offset_from_utc;
    m_offset_from_utc_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_offset_from_utc_Set() const{
    return m_offset_from_utc_isSet;
}

bool OAITimezoneCode_jsonld_get::is_offset_from_utc_Valid() const{
    return m_offset_from_utc_isValid;
}

QString OAITimezoneCode_jsonld_get::getTimezoneDateString() const {
    return m_timezone_date_string;
}
void OAITimezoneCode_jsonld_get::setTimezoneDateString(const QString &timezone_date_string) {
    m_timezone_date_string = timezone_date_string;
    m_timezone_date_string_isSet = true;
}

bool OAITimezoneCode_jsonld_get::is_timezone_date_string_Set() const{
    return m_timezone_date_string_isSet;
}

bool OAITimezoneCode_jsonld_get::is_timezone_date_string_Valid() const{
    return m_timezone_date_string_isValid;
}

bool OAITimezoneCode_jsonld_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_from_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_date_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimezoneCode_jsonld_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
