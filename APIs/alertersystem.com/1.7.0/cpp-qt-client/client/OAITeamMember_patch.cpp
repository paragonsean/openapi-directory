/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamMember_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamMember_patch::OAITeamMember_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamMember_patch::OAITeamMember_patch() {
    this->initializeModel();
}

OAITeamMember_patch::~OAITeamMember_patch() {}

void OAITeamMember_patch::initializeModel() {

    m_data_segment_code_isSet = false;
    m_data_segment_code_isValid = false;

    m_team_member_role_code_isSet = false;
    m_team_member_role_code_isValid = false;
}

void OAITeamMember_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamMember_patch::fromJsonObject(QJsonObject json) {

    m_data_segment_code_isValid = ::OpenAPI::fromJsonValue(m_data_segment_code, json[QString("dataSegmentCode")]);
    m_data_segment_code_isSet = !json[QString("dataSegmentCode")].isNull() && m_data_segment_code_isValid;

    m_team_member_role_code_isValid = ::OpenAPI::fromJsonValue(m_team_member_role_code, json[QString("teamMemberRoleCode")]);
    m_team_member_role_code_isSet = !json[QString("teamMemberRoleCode")].isNull() && m_team_member_role_code_isValid;
}

QString OAITeamMember_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamMember_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_data_segment_code_isSet) {
        obj.insert(QString("dataSegmentCode"), ::OpenAPI::toJsonValue(m_data_segment_code));
    }
    if (m_team_member_role_code_isSet) {
        obj.insert(QString("teamMemberRoleCode"), ::OpenAPI::toJsonValue(m_team_member_role_code));
    }
    return obj;
}

QString OAITeamMember_patch::getDataSegmentCode() const {
    return m_data_segment_code;
}
void OAITeamMember_patch::setDataSegmentCode(const QString &data_segment_code) {
    m_data_segment_code = data_segment_code;
    m_data_segment_code_isSet = true;
}

bool OAITeamMember_patch::is_data_segment_code_Set() const{
    return m_data_segment_code_isSet;
}

bool OAITeamMember_patch::is_data_segment_code_Valid() const{
    return m_data_segment_code_isValid;
}

QString OAITeamMember_patch::getTeamMemberRoleCode() const {
    return m_team_member_role_code;
}
void OAITeamMember_patch::setTeamMemberRoleCode(const QString &team_member_role_code) {
    m_team_member_role_code = team_member_role_code;
    m_team_member_role_code_isSet = true;
}

bool OAITeamMember_patch::is_team_member_role_code_Set() const{
    return m_team_member_role_code_isSet;
}

bool OAITeamMember_patch::is_team_member_role_code_Valid() const{
    return m_team_member_role_code_isValid;
}

bool OAITeamMember_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_segment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_member_role_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamMember_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_team_member_role_code_isValid && true;
}

} // namespace OpenAPI
