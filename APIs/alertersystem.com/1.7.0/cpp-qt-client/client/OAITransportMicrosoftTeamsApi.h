/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransportMicrosoftTeamsApi_H
#define OAI_OAITransportMicrosoftTeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_transport_microsoft_teams_get_collection_200_response.h"
#include "OAITransportMicrosoftTeams_get.h"
#include "OAITransportMicrosoftTeams_jsonld_get.h"
#include "OAITransportMicrosoftTeams_jsonld_post.h"
#include "OAITransportMicrosoftTeams_jsonld_put.h"
#include "OAITransportMicrosoftTeams_patch.h"
#include "OAITransportMicrosoftTeams_post.h"
#include "OAITransportMicrosoftTeams_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransportMicrosoftTeamsApi : public QObject {
    Q_OBJECT

public:
    OAITransportMicrosoftTeamsApi(const int timeOut = 0);
    ~OAITransportMicrosoftTeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTransportMicrosoftTeamsGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportMicrosoftTeamsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTransportMicrosoftTeamsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_microsoft_teams_patch OAITransportMicrosoftTeams_patch [required]
    */
    virtual void apiTransportMicrosoftTeamsIdPatch(const QString &id, const OAITransportMicrosoftTeams_patch &oai_transport_microsoft_teams_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_transport_microsoft_teams_put OAITransportMicrosoftTeams_put [required]
    */
    virtual void apiTransportMicrosoftTeamsIdPut(const QString &id, const OAITransportMicrosoftTeams_put &oai_transport_microsoft_teams_put);

    /**
    * @param[in]  oai_transport_microsoft_teams_post OAITransportMicrosoftTeams_post [required]
    */
    virtual void apiTransportMicrosoftTeamsPost(const OAITransportMicrosoftTeams_post &oai_transport_microsoft_teams_post);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTransportMicrosoftTeamsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTransportMicrosoftTeamsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTransportMicrosoftTeamsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTransportMicrosoftTeamsIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTransportMicrosoftTeamsIdPutCallback(OAIHttpRequestWorker *worker);
    void apiTransportMicrosoftTeamsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTransportMicrosoftTeamsGetCollectionSignal(QList<OAITransportMicrosoftTeams_get> summary);
    void apiTransportMicrosoftTeamsIdDeleteSignal();
    void apiTransportMicrosoftTeamsIdGetSignal(OAITransportMicrosoftTeams_get summary);
    void apiTransportMicrosoftTeamsIdPatchSignal(OAITransportMicrosoftTeams_get summary);
    void apiTransportMicrosoftTeamsIdPutSignal(OAITransportMicrosoftTeams_get summary);
    void apiTransportMicrosoftTeamsPostSignal(OAITransportMicrosoftTeams_get summary);


    void apiTransportMicrosoftTeamsGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITransportMicrosoftTeams_get> summary);
    void apiTransportMicrosoftTeamsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTransportMicrosoftTeamsIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransportMicrosoftTeams_get summary);
    void apiTransportMicrosoftTeamsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransportMicrosoftTeams_get summary);
    void apiTransportMicrosoftTeamsIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransportMicrosoftTeams_get summary);
    void apiTransportMicrosoftTeamsPostSignalFull(OAIHttpRequestWorker *worker, OAITransportMicrosoftTeams_get summary);

    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsGetCollectionSignalError() instead")
    void apiTransportMicrosoftTeamsGetCollectionSignalE(QList<OAITransportMicrosoftTeams_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsGetCollectionSignalError(QList<OAITransportMicrosoftTeams_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdDeleteSignalError() instead")
    void apiTransportMicrosoftTeamsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdGetSignalError() instead")
    void apiTransportMicrosoftTeamsIdGetSignalE(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdGetSignalError(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdPatchSignalError() instead")
    void apiTransportMicrosoftTeamsIdPatchSignalE(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdPatchSignalError(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdPutSignalError() instead")
    void apiTransportMicrosoftTeamsIdPutSignalE(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdPutSignalError(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsPostSignalError() instead")
    void apiTransportMicrosoftTeamsPostSignalE(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsPostSignalError(OAITransportMicrosoftTeams_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsGetCollectionSignalErrorFull() instead")
    void apiTransportMicrosoftTeamsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdDeleteSignalErrorFull() instead")
    void apiTransportMicrosoftTeamsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdGetSignalErrorFull() instead")
    void apiTransportMicrosoftTeamsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdPatchSignalErrorFull() instead")
    void apiTransportMicrosoftTeamsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsIdPutSignalErrorFull() instead")
    void apiTransportMicrosoftTeamsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTransportMicrosoftTeamsPostSignalErrorFull() instead")
    void apiTransportMicrosoftTeamsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTransportMicrosoftTeamsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
