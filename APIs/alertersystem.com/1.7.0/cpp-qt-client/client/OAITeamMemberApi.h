/**
 * Alerter System API
 * <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamMemberApi_H
#define OAI_OAITeamMemberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_team_member_get_collection_200_response.h"
#include "OAITeamMember_get.h"
#include "OAITeamMember_jsonld_get.h"
#include "OAITeamMember_jsonld_put.h"
#include "OAITeamMember_patch.h"
#include "OAITeamMember_put.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamMemberApi : public QObject {
    Q_OBJECT

public:
    OAITeamMemberApi(const int timeOut = 0);
    ~OAITeamMemberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  data_segment_code QString [optional]
    * @param[in]  data_segment_code2 QList<QString> [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  partition2 QList<QString> [optional]
    * @param[in]  user_account QString [optional]
    * @param[in]  user_account2 QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void apiTeamMemberGetCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_segment_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &data_segment_code2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &partition2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_account2 = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTeamMemberIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiTeamMemberIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_team_member_patch OAITeamMember_patch [required]
    */
    virtual void apiTeamMemberIdPatch(const QString &id, const OAITeamMember_patch &oai_team_member_patch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_team_member_put OAITeamMember_put [required]
    */
    virtual void apiTeamMemberIdPut(const QString &id, const OAITeamMember_put &oai_team_member_put);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTeamMemberGetCollectionCallback(OAIHttpRequestWorker *worker);
    void apiTeamMemberIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTeamMemberIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTeamMemberIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiTeamMemberIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTeamMemberGetCollectionSignal(QList<OAITeamMember_get> summary);
    void apiTeamMemberIdDeleteSignal();
    void apiTeamMemberIdGetSignal(OAITeamMember_get summary);
    void apiTeamMemberIdPatchSignal(OAITeamMember_get summary);
    void apiTeamMemberIdPutSignal(OAITeamMember_get summary);


    void apiTeamMemberGetCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamMember_get> summary);
    void apiTeamMemberIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTeamMemberIdGetSignalFull(OAIHttpRequestWorker *worker, OAITeamMember_get summary);
    void apiTeamMemberIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITeamMember_get summary);
    void apiTeamMemberIdPutSignalFull(OAIHttpRequestWorker *worker, OAITeamMember_get summary);

    Q_DECL_DEPRECATED_X("Use apiTeamMemberGetCollectionSignalError() instead")
    void apiTeamMemberGetCollectionSignalE(QList<OAITeamMember_get> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberGetCollectionSignalError(QList<OAITeamMember_get> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdDeleteSignalError() instead")
    void apiTeamMemberIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdGetSignalError() instead")
    void apiTeamMemberIdGetSignalE(OAITeamMember_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdGetSignalError(OAITeamMember_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdPatchSignalError() instead")
    void apiTeamMemberIdPatchSignalE(OAITeamMember_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdPatchSignalError(OAITeamMember_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdPutSignalError() instead")
    void apiTeamMemberIdPutSignalE(OAITeamMember_get summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdPutSignalError(OAITeamMember_get summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTeamMemberGetCollectionSignalErrorFull() instead")
    void apiTeamMemberGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdDeleteSignalErrorFull() instead")
    void apiTeamMemberIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdGetSignalErrorFull() instead")
    void apiTeamMemberIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdPatchSignalErrorFull() instead")
    void apiTeamMemberIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTeamMemberIdPutSignalErrorFull() instead")
    void apiTeamMemberIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTeamMemberIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
