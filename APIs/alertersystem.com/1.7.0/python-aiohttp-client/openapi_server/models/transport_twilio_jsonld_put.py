# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportTwilioJsonldPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, transport_name: str=None, twilio_from: str=None, twilio_sid: str=None, twilio_token: str=None):
        """TransportTwilioJsonldPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportTwilioJsonldPut.
        :param transport_name: The transport_name of this TransportTwilioJsonldPut.
        :param twilio_from: The twilio_from of this TransportTwilioJsonldPut.
        :param twilio_sid: The twilio_sid of this TransportTwilioJsonldPut.
        :param twilio_token: The twilio_token of this TransportTwilioJsonldPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'transport_name': str,
            'twilio_from': str,
            'twilio_sid': str,
            'twilio_token': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'transport_name': 'transportName',
            'twilio_from': 'twilioFrom',
            'twilio_sid': 'twilioSid',
            'twilio_token': 'twilioToken'
        }

        self._data_segment_code = data_segment_code
        self._transport_name = transport_name
        self._twilio_from = twilio_from
        self._twilio_sid = twilio_sid
        self._twilio_token = twilio_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportTwilioJsonldPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportTwilio.jsonld-put of this TransportTwilioJsonldPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportTwilioJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportTwilioJsonldPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportTwilioJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportTwilioJsonldPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportTwilioJsonldPut.

        The name of the transport.

        :return: The transport_name of this TransportTwilioJsonldPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportTwilioJsonldPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportTwilioJsonldPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name

    @property
    def twilio_from(self):
        """Gets the twilio_from of this TransportTwilioJsonldPut.

        The sender for the Twilio service.

        :return: The twilio_from of this TransportTwilioJsonldPut.
        :rtype: str
        """
        return self._twilio_from

    @twilio_from.setter
    def twilio_from(self, twilio_from):
        """Sets the twilio_from of this TransportTwilioJsonldPut.

        The sender for the Twilio service.

        :param twilio_from: The twilio_from of this TransportTwilioJsonldPut.
        :type twilio_from: str
        """
        if twilio_from is None:
            raise ValueError("Invalid value for `twilio_from`, must not be `None`")
        if twilio_from is not None and len(twilio_from) > 255:
            raise ValueError("Invalid value for `twilio_from`, length must be less than or equal to `255`")

        self._twilio_from = twilio_from

    @property
    def twilio_sid(self):
        """Gets the twilio_sid of this TransportTwilioJsonldPut.

        The SID for the Twilio service.

        :return: The twilio_sid of this TransportTwilioJsonldPut.
        :rtype: str
        """
        return self._twilio_sid

    @twilio_sid.setter
    def twilio_sid(self, twilio_sid):
        """Sets the twilio_sid of this TransportTwilioJsonldPut.

        The SID for the Twilio service.

        :param twilio_sid: The twilio_sid of this TransportTwilioJsonldPut.
        :type twilio_sid: str
        """
        if twilio_sid is None:
            raise ValueError("Invalid value for `twilio_sid`, must not be `None`")
        if twilio_sid is not None and len(twilio_sid) > 255:
            raise ValueError("Invalid value for `twilio_sid`, length must be less than or equal to `255`")

        self._twilio_sid = twilio_sid

    @property
    def twilio_token(self):
        """Gets the twilio_token of this TransportTwilioJsonldPut.

        The token for the Twilio service. Stored in encrypted format.

        :return: The twilio_token of this TransportTwilioJsonldPut.
        :rtype: str
        """
        return self._twilio_token

    @twilio_token.setter
    def twilio_token(self, twilio_token):
        """Sets the twilio_token of this TransportTwilioJsonldPut.

        The token for the Twilio service. Stored in encrypted format.

        :param twilio_token: The twilio_token of this TransportTwilioJsonldPut.
        :type twilio_token: str
        """
        if twilio_token is None:
            raise ValueError("Invalid value for `twilio_token`, must not be `None`")
        if twilio_token is not None and len(twilio_token) > 1000:
            raise ValueError("Invalid value for `twilio_token`, length must be less than or equal to `1000`")

        self._twilio_token = twilio_token
