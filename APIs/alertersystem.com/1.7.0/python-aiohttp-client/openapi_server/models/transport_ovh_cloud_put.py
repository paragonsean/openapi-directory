# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportOvhCloudPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, ovh_cloud_application_key: str=None, ovh_cloud_application_secret: str=None, ovh_cloud_consumer_key: str=None, ovh_cloud_sender: str=None, ovh_cloud_service_name: str=None, transport_name: str=None):
        """TransportOvhCloudPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportOvhCloudPut.
        :param ovh_cloud_application_key: The ovh_cloud_application_key of this TransportOvhCloudPut.
        :param ovh_cloud_application_secret: The ovh_cloud_application_secret of this TransportOvhCloudPut.
        :param ovh_cloud_consumer_key: The ovh_cloud_consumer_key of this TransportOvhCloudPut.
        :param ovh_cloud_sender: The ovh_cloud_sender of this TransportOvhCloudPut.
        :param ovh_cloud_service_name: The ovh_cloud_service_name of this TransportOvhCloudPut.
        :param transport_name: The transport_name of this TransportOvhCloudPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'ovh_cloud_application_key': str,
            'ovh_cloud_application_secret': str,
            'ovh_cloud_consumer_key': str,
            'ovh_cloud_sender': str,
            'ovh_cloud_service_name': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'ovh_cloud_application_key': 'ovhCloudApplicationKey',
            'ovh_cloud_application_secret': 'ovhCloudApplicationSecret',
            'ovh_cloud_consumer_key': 'ovhCloudConsumerKey',
            'ovh_cloud_sender': 'ovhCloudSender',
            'ovh_cloud_service_name': 'ovhCloudServiceName',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._ovh_cloud_application_key = ovh_cloud_application_key
        self._ovh_cloud_application_secret = ovh_cloud_application_secret
        self._ovh_cloud_consumer_key = ovh_cloud_consumer_key
        self._ovh_cloud_sender = ovh_cloud_sender
        self._ovh_cloud_service_name = ovh_cloud_service_name
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportOvhCloudPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportOvhCloud-put of this TransportOvhCloudPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportOvhCloudPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportOvhCloudPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportOvhCloudPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def ovh_cloud_application_key(self):
        """Gets the ovh_cloud_application_key of this TransportOvhCloudPut.

        The application key for the OVHcloud service.

        :return: The ovh_cloud_application_key of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._ovh_cloud_application_key

    @ovh_cloud_application_key.setter
    def ovh_cloud_application_key(self, ovh_cloud_application_key):
        """Sets the ovh_cloud_application_key of this TransportOvhCloudPut.

        The application key for the OVHcloud service.

        :param ovh_cloud_application_key: The ovh_cloud_application_key of this TransportOvhCloudPut.
        :type ovh_cloud_application_key: str
        """
        if ovh_cloud_application_key is None:
            raise ValueError("Invalid value for `ovh_cloud_application_key`, must not be `None`")
        if ovh_cloud_application_key is not None and len(ovh_cloud_application_key) > 255:
            raise ValueError("Invalid value for `ovh_cloud_application_key`, length must be less than or equal to `255`")

        self._ovh_cloud_application_key = ovh_cloud_application_key

    @property
    def ovh_cloud_application_secret(self):
        """Gets the ovh_cloud_application_secret of this TransportOvhCloudPut.

        The application secret for the OVHcloud service. Stored in encrypted format.

        :return: The ovh_cloud_application_secret of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._ovh_cloud_application_secret

    @ovh_cloud_application_secret.setter
    def ovh_cloud_application_secret(self, ovh_cloud_application_secret):
        """Sets the ovh_cloud_application_secret of this TransportOvhCloudPut.

        The application secret for the OVHcloud service. Stored in encrypted format.

        :param ovh_cloud_application_secret: The ovh_cloud_application_secret of this TransportOvhCloudPut.
        :type ovh_cloud_application_secret: str
        """
        if ovh_cloud_application_secret is None:
            raise ValueError("Invalid value for `ovh_cloud_application_secret`, must not be `None`")
        if ovh_cloud_application_secret is not None and len(ovh_cloud_application_secret) > 1000:
            raise ValueError("Invalid value for `ovh_cloud_application_secret`, length must be less than or equal to `1000`")

        self._ovh_cloud_application_secret = ovh_cloud_application_secret

    @property
    def ovh_cloud_consumer_key(self):
        """Gets the ovh_cloud_consumer_key of this TransportOvhCloudPut.

        The consumer key for the OVHcloud service.

        :return: The ovh_cloud_consumer_key of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._ovh_cloud_consumer_key

    @ovh_cloud_consumer_key.setter
    def ovh_cloud_consumer_key(self, ovh_cloud_consumer_key):
        """Sets the ovh_cloud_consumer_key of this TransportOvhCloudPut.

        The consumer key for the OVHcloud service.

        :param ovh_cloud_consumer_key: The ovh_cloud_consumer_key of this TransportOvhCloudPut.
        :type ovh_cloud_consumer_key: str
        """
        if ovh_cloud_consumer_key is None:
            raise ValueError("Invalid value for `ovh_cloud_consumer_key`, must not be `None`")
        if ovh_cloud_consumer_key is not None and len(ovh_cloud_consumer_key) > 255:
            raise ValueError("Invalid value for `ovh_cloud_consumer_key`, length must be less than or equal to `255`")

        self._ovh_cloud_consumer_key = ovh_cloud_consumer_key

    @property
    def ovh_cloud_sender(self):
        """Gets the ovh_cloud_sender of this TransportOvhCloudPut.

        The optional sender for the OVHcloud service.

        :return: The ovh_cloud_sender of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._ovh_cloud_sender

    @ovh_cloud_sender.setter
    def ovh_cloud_sender(self, ovh_cloud_sender):
        """Sets the ovh_cloud_sender of this TransportOvhCloudPut.

        The optional sender for the OVHcloud service.

        :param ovh_cloud_sender: The ovh_cloud_sender of this TransportOvhCloudPut.
        :type ovh_cloud_sender: str
        """
        if ovh_cloud_sender is not None and len(ovh_cloud_sender) > 255:
            raise ValueError("Invalid value for `ovh_cloud_sender`, length must be less than or equal to `255`")

        self._ovh_cloud_sender = ovh_cloud_sender

    @property
    def ovh_cloud_service_name(self):
        """Gets the ovh_cloud_service_name of this TransportOvhCloudPut.

        The service name for the OVHcloud service.

        :return: The ovh_cloud_service_name of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._ovh_cloud_service_name

    @ovh_cloud_service_name.setter
    def ovh_cloud_service_name(self, ovh_cloud_service_name):
        """Sets the ovh_cloud_service_name of this TransportOvhCloudPut.

        The service name for the OVHcloud service.

        :param ovh_cloud_service_name: The ovh_cloud_service_name of this TransportOvhCloudPut.
        :type ovh_cloud_service_name: str
        """
        if ovh_cloud_service_name is None:
            raise ValueError("Invalid value for `ovh_cloud_service_name`, must not be `None`")
        if ovh_cloud_service_name is not None and len(ovh_cloud_service_name) > 255:
            raise ValueError("Invalid value for `ovh_cloud_service_name`, length must be less than or equal to `255`")

        self._ovh_cloud_service_name = ovh_cloud_service_name

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportOvhCloudPut.

        The name of the transport.

        :return: The transport_name of this TransportOvhCloudPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportOvhCloudPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportOvhCloudPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
