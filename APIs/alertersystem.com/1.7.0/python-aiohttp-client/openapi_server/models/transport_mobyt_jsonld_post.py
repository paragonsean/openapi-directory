# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportMobytJsonldPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, mobyt_access_token: str=None, mobyt_from: str=None, mobyt_type_quality: str=None, mobyt_user_key: str=None, partition: str=None, transport_name: str=None):
        """TransportMobytJsonldPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportMobytJsonldPost.
        :param mobyt_access_token: The mobyt_access_token of this TransportMobytJsonldPost.
        :param mobyt_from: The mobyt_from of this TransportMobytJsonldPost.
        :param mobyt_type_quality: The mobyt_type_quality of this TransportMobytJsonldPost.
        :param mobyt_user_key: The mobyt_user_key of this TransportMobytJsonldPost.
        :param partition: The partition of this TransportMobytJsonldPost.
        :param transport_name: The transport_name of this TransportMobytJsonldPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'mobyt_access_token': str,
            'mobyt_from': str,
            'mobyt_type_quality': str,
            'mobyt_user_key': str,
            'partition': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'mobyt_access_token': 'mobytAccessToken',
            'mobyt_from': 'mobytFrom',
            'mobyt_type_quality': 'mobytTypeQuality',
            'mobyt_user_key': 'mobytUserKey',
            'partition': 'partition',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._mobyt_access_token = mobyt_access_token
        self._mobyt_from = mobyt_from
        self._mobyt_type_quality = mobyt_type_quality
        self._mobyt_user_key = mobyt_user_key
        self._partition = partition
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportMobytJsonldPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportMobyt.jsonld-post of this TransportMobytJsonldPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportMobytJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportMobytJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportMobytJsonldPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def mobyt_access_token(self):
        """Gets the mobyt_access_token of this TransportMobytJsonldPost.

        The access token for the Mobyt service. Stored in encrypted format.

        :return: The mobyt_access_token of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._mobyt_access_token

    @mobyt_access_token.setter
    def mobyt_access_token(self, mobyt_access_token):
        """Sets the mobyt_access_token of this TransportMobytJsonldPost.

        The access token for the Mobyt service. Stored in encrypted format.

        :param mobyt_access_token: The mobyt_access_token of this TransportMobytJsonldPost.
        :type mobyt_access_token: str
        """
        if mobyt_access_token is None:
            raise ValueError("Invalid value for `mobyt_access_token`, must not be `None`")
        if mobyt_access_token is not None and len(mobyt_access_token) > 1000:
            raise ValueError("Invalid value for `mobyt_access_token`, length must be less than or equal to `1000`")

        self._mobyt_access_token = mobyt_access_token

    @property
    def mobyt_from(self):
        """Gets the mobyt_from of this TransportMobytJsonldPost.

        The sender for the Mobyt service.

        :return: The mobyt_from of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._mobyt_from

    @mobyt_from.setter
    def mobyt_from(self, mobyt_from):
        """Sets the mobyt_from of this TransportMobytJsonldPost.

        The sender for the Mobyt service.

        :param mobyt_from: The mobyt_from of this TransportMobytJsonldPost.
        :type mobyt_from: str
        """
        if mobyt_from is None:
            raise ValueError("Invalid value for `mobyt_from`, must not be `None`")
        if mobyt_from is not None and len(mobyt_from) > 255:
            raise ValueError("Invalid value for `mobyt_from`, length must be less than or equal to `255`")

        self._mobyt_from = mobyt_from

    @property
    def mobyt_type_quality(self):
        """Gets the mobyt_type_quality of this TransportMobytJsonldPost.

        The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.

        :return: The mobyt_type_quality of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._mobyt_type_quality

    @mobyt_type_quality.setter
    def mobyt_type_quality(self, mobyt_type_quality):
        """Sets the mobyt_type_quality of this TransportMobytJsonldPost.

        The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.

        :param mobyt_type_quality: The mobyt_type_quality of this TransportMobytJsonldPost.
        :type mobyt_type_quality: str
        """
        if mobyt_type_quality is None:
            raise ValueError("Invalid value for `mobyt_type_quality`, must not be `None`")
        if mobyt_type_quality is not None and len(mobyt_type_quality) > 255:
            raise ValueError("Invalid value for `mobyt_type_quality`, length must be less than or equal to `255`")

        self._mobyt_type_quality = mobyt_type_quality

    @property
    def mobyt_user_key(self):
        """Gets the mobyt_user_key of this TransportMobytJsonldPost.

        The user key for the Mobyt service.

        :return: The mobyt_user_key of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._mobyt_user_key

    @mobyt_user_key.setter
    def mobyt_user_key(self, mobyt_user_key):
        """Sets the mobyt_user_key of this TransportMobytJsonldPost.

        The user key for the Mobyt service.

        :param mobyt_user_key: The mobyt_user_key of this TransportMobytJsonldPost.
        :type mobyt_user_key: str
        """
        if mobyt_user_key is None:
            raise ValueError("Invalid value for `mobyt_user_key`, must not be `None`")
        if mobyt_user_key is not None and len(mobyt_user_key) > 255:
            raise ValueError("Invalid value for `mobyt_user_key`, length must be less than or equal to `255`")

        self._mobyt_user_key = mobyt_user_key

    @property
    def partition(self):
        """Gets the partition of this TransportMobytJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportMobytJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportMobytJsonldPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportMobytJsonldPost.

        The name of the transport.

        :return: The transport_name of this TransportMobytJsonldPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportMobytJsonldPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportMobytJsonldPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
