# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportOpsgeniePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, opsgenie_alias: str=None, opsgenie_api_key: str=None, opsgenie_entity: str=None, opsgenie_note: str=None, opsgenie_priority: str=None, opsgenie_user: str=None, transport_name: str=None):
        """TransportOpsgeniePatch - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportOpsgeniePatch.
        :param opsgenie_alias: The opsgenie_alias of this TransportOpsgeniePatch.
        :param opsgenie_api_key: The opsgenie_api_key of this TransportOpsgeniePatch.
        :param opsgenie_entity: The opsgenie_entity of this TransportOpsgeniePatch.
        :param opsgenie_note: The opsgenie_note of this TransportOpsgeniePatch.
        :param opsgenie_priority: The opsgenie_priority of this TransportOpsgeniePatch.
        :param opsgenie_user: The opsgenie_user of this TransportOpsgeniePatch.
        :param transport_name: The transport_name of this TransportOpsgeniePatch.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'opsgenie_alias': str,
            'opsgenie_api_key': str,
            'opsgenie_entity': str,
            'opsgenie_note': str,
            'opsgenie_priority': str,
            'opsgenie_user': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'opsgenie_alias': 'opsgenieAlias',
            'opsgenie_api_key': 'opsgenieApiKey',
            'opsgenie_entity': 'opsgenieEntity',
            'opsgenie_note': 'opsgenieNote',
            'opsgenie_priority': 'opsgeniePriority',
            'opsgenie_user': 'opsgenieUser',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._opsgenie_alias = opsgenie_alias
        self._opsgenie_api_key = opsgenie_api_key
        self._opsgenie_entity = opsgenie_entity
        self._opsgenie_note = opsgenie_note
        self._opsgenie_priority = opsgenie_priority
        self._opsgenie_user = opsgenie_user
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportOpsgeniePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportOpsgenie-patch of this TransportOpsgeniePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportOpsgeniePatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportOpsgeniePatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportOpsgeniePatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def opsgenie_alias(self):
        """Gets the opsgenie_alias of this TransportOpsgeniePatch.

        The alias for the Opsgenie service.

        :return: The opsgenie_alias of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._opsgenie_alias

    @opsgenie_alias.setter
    def opsgenie_alias(self, opsgenie_alias):
        """Sets the opsgenie_alias of this TransportOpsgeniePatch.

        The alias for the Opsgenie service.

        :param opsgenie_alias: The opsgenie_alias of this TransportOpsgeniePatch.
        :type opsgenie_alias: str
        """
        if opsgenie_alias is not None and len(opsgenie_alias) > 255:
            raise ValueError("Invalid value for `opsgenie_alias`, length must be less than or equal to `255`")

        self._opsgenie_alias = opsgenie_alias

    @property
    def opsgenie_api_key(self):
        """Gets the opsgenie_api_key of this TransportOpsgeniePatch.

        The API key for the Opsgenie service. Stored in encrypted format.

        :return: The opsgenie_api_key of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._opsgenie_api_key

    @opsgenie_api_key.setter
    def opsgenie_api_key(self, opsgenie_api_key):
        """Sets the opsgenie_api_key of this TransportOpsgeniePatch.

        The API key for the Opsgenie service. Stored in encrypted format.

        :param opsgenie_api_key: The opsgenie_api_key of this TransportOpsgeniePatch.
        :type opsgenie_api_key: str
        """
        if opsgenie_api_key is None:
            raise ValueError("Invalid value for `opsgenie_api_key`, must not be `None`")
        if opsgenie_api_key is not None and len(opsgenie_api_key) > 1000:
            raise ValueError("Invalid value for `opsgenie_api_key`, length must be less than or equal to `1000`")

        self._opsgenie_api_key = opsgenie_api_key

    @property
    def opsgenie_entity(self):
        """Gets the opsgenie_entity of this TransportOpsgeniePatch.

        The entity for the Opsgenie service.

        :return: The opsgenie_entity of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._opsgenie_entity

    @opsgenie_entity.setter
    def opsgenie_entity(self, opsgenie_entity):
        """Sets the opsgenie_entity of this TransportOpsgeniePatch.

        The entity for the Opsgenie service.

        :param opsgenie_entity: The opsgenie_entity of this TransportOpsgeniePatch.
        :type opsgenie_entity: str
        """
        if opsgenie_entity is not None and len(opsgenie_entity) > 255:
            raise ValueError("Invalid value for `opsgenie_entity`, length must be less than or equal to `255`")

        self._opsgenie_entity = opsgenie_entity

    @property
    def opsgenie_note(self):
        """Gets the opsgenie_note of this TransportOpsgeniePatch.

        The note for the Opsgenie service.

        :return: The opsgenie_note of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._opsgenie_note

    @opsgenie_note.setter
    def opsgenie_note(self, opsgenie_note):
        """Sets the opsgenie_note of this TransportOpsgeniePatch.

        The note for the Opsgenie service.

        :param opsgenie_note: The opsgenie_note of this TransportOpsgeniePatch.
        :type opsgenie_note: str
        """
        if opsgenie_note is not None and len(opsgenie_note) > 255:
            raise ValueError("Invalid value for `opsgenie_note`, length must be less than or equal to `255`")

        self._opsgenie_note = opsgenie_note

    @property
    def opsgenie_priority(self):
        """Gets the opsgenie_priority of this TransportOpsgeniePatch.

        The priority for the Opsgenie service.

        :return: The opsgenie_priority of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._opsgenie_priority

    @opsgenie_priority.setter
    def opsgenie_priority(self, opsgenie_priority):
        """Sets the opsgenie_priority of this TransportOpsgeniePatch.

        The priority for the Opsgenie service.

        :param opsgenie_priority: The opsgenie_priority of this TransportOpsgeniePatch.
        :type opsgenie_priority: str
        """
        if opsgenie_priority is not None and len(opsgenie_priority) > 255:
            raise ValueError("Invalid value for `opsgenie_priority`, length must be less than or equal to `255`")

        self._opsgenie_priority = opsgenie_priority

    @property
    def opsgenie_user(self):
        """Gets the opsgenie_user of this TransportOpsgeniePatch.

        The user for the Opsgenie service.

        :return: The opsgenie_user of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._opsgenie_user

    @opsgenie_user.setter
    def opsgenie_user(self, opsgenie_user):
        """Sets the opsgenie_user of this TransportOpsgeniePatch.

        The user for the Opsgenie service.

        :param opsgenie_user: The opsgenie_user of this TransportOpsgeniePatch.
        :type opsgenie_user: str
        """
        if opsgenie_user is not None and len(opsgenie_user) > 255:
            raise ValueError("Invalid value for `opsgenie_user`, length must be less than or equal to `255`")

        self._opsgenie_user = opsgenie_user

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportOpsgeniePatch.

        The name of the transport.

        :return: The transport_name of this TransportOpsgeniePatch.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportOpsgeniePatch.

        The name of the transport.

        :param transport_name: The transport_name of this TransportOpsgeniePatch.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
