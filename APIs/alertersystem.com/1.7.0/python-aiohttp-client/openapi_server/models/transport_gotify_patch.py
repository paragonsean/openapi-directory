# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportGotifyPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, gotify_api_url: str=None, gotify_app_token: str=None, gotify_priority: str=None, transport_name: str=None):
        """TransportGotifyPatch - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportGotifyPatch.
        :param gotify_api_url: The gotify_api_url of this TransportGotifyPatch.
        :param gotify_app_token: The gotify_app_token of this TransportGotifyPatch.
        :param gotify_priority: The gotify_priority of this TransportGotifyPatch.
        :param transport_name: The transport_name of this TransportGotifyPatch.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'gotify_api_url': str,
            'gotify_app_token': str,
            'gotify_priority': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'gotify_api_url': 'gotifyApiUrl',
            'gotify_app_token': 'gotifyAppToken',
            'gotify_priority': 'gotifyPriority',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._gotify_api_url = gotify_api_url
        self._gotify_app_token = gotify_app_token
        self._gotify_priority = gotify_priority
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportGotifyPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportGotify-patch of this TransportGotifyPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportGotifyPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportGotifyPatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportGotifyPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportGotifyPatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def gotify_api_url(self):
        """Gets the gotify_api_url of this TransportGotifyPatch.

        The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).

        :return: The gotify_api_url of this TransportGotifyPatch.
        :rtype: str
        """
        return self._gotify_api_url

    @gotify_api_url.setter
    def gotify_api_url(self, gotify_api_url):
        """Sets the gotify_api_url of this TransportGotifyPatch.

        The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).

        :param gotify_api_url: The gotify_api_url of this TransportGotifyPatch.
        :type gotify_api_url: str
        """
        if gotify_api_url is None:
            raise ValueError("Invalid value for `gotify_api_url`, must not be `None`")
        if gotify_api_url is not None and len(gotify_api_url) > 255:
            raise ValueError("Invalid value for `gotify_api_url`, length must be less than or equal to `255`")

        self._gotify_api_url = gotify_api_url

    @property
    def gotify_app_token(self):
        """Gets the gotify_app_token of this TransportGotifyPatch.

        The app token for the Gotify service. Stored in encrypted format.

        :return: The gotify_app_token of this TransportGotifyPatch.
        :rtype: str
        """
        return self._gotify_app_token

    @gotify_app_token.setter
    def gotify_app_token(self, gotify_app_token):
        """Sets the gotify_app_token of this TransportGotifyPatch.

        The app token for the Gotify service. Stored in encrypted format.

        :param gotify_app_token: The gotify_app_token of this TransportGotifyPatch.
        :type gotify_app_token: str
        """
        if gotify_app_token is None:
            raise ValueError("Invalid value for `gotify_app_token`, must not be `None`")
        if gotify_app_token is not None and len(gotify_app_token) > 1000:
            raise ValueError("Invalid value for `gotify_app_token`, length must be less than or equal to `1000`")

        self._gotify_app_token = gotify_app_token

    @property
    def gotify_priority(self):
        """Gets the gotify_priority of this TransportGotifyPatch.

        The priority for the Gotify service.

        :return: The gotify_priority of this TransportGotifyPatch.
        :rtype: str
        """
        return self._gotify_priority

    @gotify_priority.setter
    def gotify_priority(self, gotify_priority):
        """Sets the gotify_priority of this TransportGotifyPatch.

        The priority for the Gotify service.

        :param gotify_priority: The gotify_priority of this TransportGotifyPatch.
        :type gotify_priority: str
        """

        self._gotify_priority = gotify_priority

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportGotifyPatch.

        The name of the transport.

        :return: The transport_name of this TransportGotifyPatch.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportGotifyPatch.

        The name of the transport.

        :param transport_name: The transport_name of this TransportGotifyPatch.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
