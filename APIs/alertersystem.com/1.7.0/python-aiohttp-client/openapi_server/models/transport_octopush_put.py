# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportOctopushPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, octopush_api_key: str=None, octopush_from: str=None, octopush_type: str=None, octopush_user_login: str=None, transport_name: str=None):
        """TransportOctopushPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportOctopushPut.
        :param octopush_api_key: The octopush_api_key of this TransportOctopushPut.
        :param octopush_from: The octopush_from of this TransportOctopushPut.
        :param octopush_type: The octopush_type of this TransportOctopushPut.
        :param octopush_user_login: The octopush_user_login of this TransportOctopushPut.
        :param transport_name: The transport_name of this TransportOctopushPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'octopush_api_key': str,
            'octopush_from': str,
            'octopush_type': str,
            'octopush_user_login': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'octopush_api_key': 'octopushApiKey',
            'octopush_from': 'octopushFrom',
            'octopush_type': 'octopushType',
            'octopush_user_login': 'octopushUserLogin',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._octopush_api_key = octopush_api_key
        self._octopush_from = octopush_from
        self._octopush_type = octopush_type
        self._octopush_user_login = octopush_user_login
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportOctopushPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportOctopush-put of this TransportOctopushPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportOctopushPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportOctopushPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportOctopushPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportOctopushPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def octopush_api_key(self):
        """Gets the octopush_api_key of this TransportOctopushPut.

        The API key for the Octopush service. Stored in encrypted format.

        :return: The octopush_api_key of this TransportOctopushPut.
        :rtype: str
        """
        return self._octopush_api_key

    @octopush_api_key.setter
    def octopush_api_key(self, octopush_api_key):
        """Sets the octopush_api_key of this TransportOctopushPut.

        The API key for the Octopush service. Stored in encrypted format.

        :param octopush_api_key: The octopush_api_key of this TransportOctopushPut.
        :type octopush_api_key: str
        """
        if octopush_api_key is None:
            raise ValueError("Invalid value for `octopush_api_key`, must not be `None`")
        if octopush_api_key is not None and len(octopush_api_key) > 1000:
            raise ValueError("Invalid value for `octopush_api_key`, length must be less than or equal to `1000`")

        self._octopush_api_key = octopush_api_key

    @property
    def octopush_from(self):
        """Gets the octopush_from of this TransportOctopushPut.

        The sender value for the Octopush service.

        :return: The octopush_from of this TransportOctopushPut.
        :rtype: str
        """
        return self._octopush_from

    @octopush_from.setter
    def octopush_from(self, octopush_from):
        """Sets the octopush_from of this TransportOctopushPut.

        The sender value for the Octopush service.

        :param octopush_from: The octopush_from of this TransportOctopushPut.
        :type octopush_from: str
        """
        if octopush_from is None:
            raise ValueError("Invalid value for `octopush_from`, must not be `None`")
        if octopush_from is not None and len(octopush_from) > 255:
            raise ValueError("Invalid value for `octopush_from`, length must be less than or equal to `255`")

        self._octopush_from = octopush_from

    @property
    def octopush_type(self):
        """Gets the octopush_type of this TransportOctopushPut.

        The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.

        :return: The octopush_type of this TransportOctopushPut.
        :rtype: str
        """
        return self._octopush_type

    @octopush_type.setter
    def octopush_type(self, octopush_type):
        """Sets the octopush_type of this TransportOctopushPut.

        The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.

        :param octopush_type: The octopush_type of this TransportOctopushPut.
        :type octopush_type: str
        """
        if octopush_type is None:
            raise ValueError("Invalid value for `octopush_type`, must not be `None`")
        if octopush_type is not None and len(octopush_type) > 255:
            raise ValueError("Invalid value for `octopush_type`, length must be less than or equal to `255`")

        self._octopush_type = octopush_type

    @property
    def octopush_user_login(self):
        """Gets the octopush_user_login of this TransportOctopushPut.

        The user login (email) for the Octopush service.

        :return: The octopush_user_login of this TransportOctopushPut.
        :rtype: str
        """
        return self._octopush_user_login

    @octopush_user_login.setter
    def octopush_user_login(self, octopush_user_login):
        """Sets the octopush_user_login of this TransportOctopushPut.

        The user login (email) for the Octopush service.

        :param octopush_user_login: The octopush_user_login of this TransportOctopushPut.
        :type octopush_user_login: str
        """
        if octopush_user_login is None:
            raise ValueError("Invalid value for `octopush_user_login`, must not be `None`")
        if octopush_user_login is not None and len(octopush_user_login) > 255:
            raise ValueError("Invalid value for `octopush_user_login`, length must be less than or equal to `255`")

        self._octopush_user_login = octopush_user_login

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportOctopushPut.

        The name of the transport.

        :return: The transport_name of this TransportOctopushPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportOctopushPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportOctopushPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
