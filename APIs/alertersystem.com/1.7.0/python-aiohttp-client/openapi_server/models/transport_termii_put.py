# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportTermiiPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, termii_api_key: str=None, termii_channel: str=None, termii_from: str=None, transport_name: str=None):
        """TransportTermiiPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportTermiiPut.
        :param termii_api_key: The termii_api_key of this TransportTermiiPut.
        :param termii_channel: The termii_channel of this TransportTermiiPut.
        :param termii_from: The termii_from of this TransportTermiiPut.
        :param transport_name: The transport_name of this TransportTermiiPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'termii_api_key': str,
            'termii_channel': str,
            'termii_from': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'termii_api_key': 'termiiApiKey',
            'termii_channel': 'termiiChannel',
            'termii_from': 'termiiFrom',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._termii_api_key = termii_api_key
        self._termii_channel = termii_channel
        self._termii_from = termii_from
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportTermiiPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportTermii-put of this TransportTermiiPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportTermiiPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportTermiiPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportTermiiPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportTermiiPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def termii_api_key(self):
        """Gets the termii_api_key of this TransportTermiiPut.

        The API key for the Termii service. Stored in encrypted format.

        :return: The termii_api_key of this TransportTermiiPut.
        :rtype: str
        """
        return self._termii_api_key

    @termii_api_key.setter
    def termii_api_key(self, termii_api_key):
        """Sets the termii_api_key of this TransportTermiiPut.

        The API key for the Termii service. Stored in encrypted format.

        :param termii_api_key: The termii_api_key of this TransportTermiiPut.
        :type termii_api_key: str
        """
        if termii_api_key is None:
            raise ValueError("Invalid value for `termii_api_key`, must not be `None`")
        if termii_api_key is not None and len(termii_api_key) > 1000:
            raise ValueError("Invalid value for `termii_api_key`, length must be less than or equal to `1000`")

        self._termii_api_key = termii_api_key

    @property
    def termii_channel(self):
        """Gets the termii_channel of this TransportTermiiPut.

        The channel for the Termii service.

        :return: The termii_channel of this TransportTermiiPut.
        :rtype: str
        """
        return self._termii_channel

    @termii_channel.setter
    def termii_channel(self, termii_channel):
        """Sets the termii_channel of this TransportTermiiPut.

        The channel for the Termii service.

        :param termii_channel: The termii_channel of this TransportTermiiPut.
        :type termii_channel: str
        """
        if termii_channel is None:
            raise ValueError("Invalid value for `termii_channel`, must not be `None`")
        if termii_channel is not None and len(termii_channel) > 255:
            raise ValueError("Invalid value for `termii_channel`, length must be less than or equal to `255`")

        self._termii_channel = termii_channel

    @property
    def termii_from(self):
        """Gets the termii_from of this TransportTermiiPut.

        The sender value for the Termii service.

        :return: The termii_from of this TransportTermiiPut.
        :rtype: str
        """
        return self._termii_from

    @termii_from.setter
    def termii_from(self, termii_from):
        """Sets the termii_from of this TransportTermiiPut.

        The sender value for the Termii service.

        :param termii_from: The termii_from of this TransportTermiiPut.
        :type termii_from: str
        """
        if termii_from is None:
            raise ValueError("Invalid value for `termii_from`, must not be `None`")
        if termii_from is not None and len(termii_from) > 255:
            raise ValueError("Invalid value for `termii_from`, length must be less than or equal to `255`")

        self._termii_from = termii_from

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportTermiiPut.

        The name of the transport.

        :return: The transport_name of this TransportTermiiPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportTermiiPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportTermiiPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
