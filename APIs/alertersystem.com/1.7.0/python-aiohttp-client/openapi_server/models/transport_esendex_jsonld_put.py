# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportEsendexJsonldPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, esendex_account_reference: str=None, esendex_from: str=None, esendex_password: str=None, esendex_username: str=None, transport_name: str=None):
        """TransportEsendexJsonldPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportEsendexJsonldPut.
        :param esendex_account_reference: The esendex_account_reference of this TransportEsendexJsonldPut.
        :param esendex_from: The esendex_from of this TransportEsendexJsonldPut.
        :param esendex_password: The esendex_password of this TransportEsendexJsonldPut.
        :param esendex_username: The esendex_username of this TransportEsendexJsonldPut.
        :param transport_name: The transport_name of this TransportEsendexJsonldPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'esendex_account_reference': str,
            'esendex_from': str,
            'esendex_password': str,
            'esendex_username': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'esendex_account_reference': 'esendexAccountReference',
            'esendex_from': 'esendexFrom',
            'esendex_password': 'esendexPassword',
            'esendex_username': 'esendexUsername',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._esendex_account_reference = esendex_account_reference
        self._esendex_from = esendex_from
        self._esendex_password = esendex_password
        self._esendex_username = esendex_username
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportEsendexJsonldPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportEsendex.jsonld-put of this TransportEsendexJsonldPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportEsendexJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportEsendexJsonldPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportEsendexJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportEsendexJsonldPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def esendex_account_reference(self):
        """Gets the esendex_account_reference of this TransportEsendexJsonldPut.

        The account reference that the message should be sent from for the Esendex service.

        :return: The esendex_account_reference of this TransportEsendexJsonldPut.
        :rtype: str
        """
        return self._esendex_account_reference

    @esendex_account_reference.setter
    def esendex_account_reference(self, esendex_account_reference):
        """Sets the esendex_account_reference of this TransportEsendexJsonldPut.

        The account reference that the message should be sent from for the Esendex service.

        :param esendex_account_reference: The esendex_account_reference of this TransportEsendexJsonldPut.
        :type esendex_account_reference: str
        """
        if esendex_account_reference is None:
            raise ValueError("Invalid value for `esendex_account_reference`, must not be `None`")
        if esendex_account_reference is not None and len(esendex_account_reference) > 255:
            raise ValueError("Invalid value for `esendex_account_reference`, length must be less than or equal to `255`")

        self._esendex_account_reference = esendex_account_reference

    @property
    def esendex_from(self):
        """Gets the esendex_from of this TransportEsendexJsonldPut.

        The alphanumeric originator for the message to appear to originate from for the Esendex service.

        :return: The esendex_from of this TransportEsendexJsonldPut.
        :rtype: str
        """
        return self._esendex_from

    @esendex_from.setter
    def esendex_from(self, esendex_from):
        """Sets the esendex_from of this TransportEsendexJsonldPut.

        The alphanumeric originator for the message to appear to originate from for the Esendex service.

        :param esendex_from: The esendex_from of this TransportEsendexJsonldPut.
        :type esendex_from: str
        """
        if esendex_from is None:
            raise ValueError("Invalid value for `esendex_from`, must not be `None`")
        if esendex_from is not None and len(esendex_from) > 255:
            raise ValueError("Invalid value for `esendex_from`, length must be less than or equal to `255`")

        self._esendex_from = esendex_from

    @property
    def esendex_password(self):
        """Gets the esendex_password of this TransportEsendexJsonldPut.

        The API password for the Esendex service. Stored in encrypted format.

        :return: The esendex_password of this TransportEsendexJsonldPut.
        :rtype: str
        """
        return self._esendex_password

    @esendex_password.setter
    def esendex_password(self, esendex_password):
        """Sets the esendex_password of this TransportEsendexJsonldPut.

        The API password for the Esendex service. Stored in encrypted format.

        :param esendex_password: The esendex_password of this TransportEsendexJsonldPut.
        :type esendex_password: str
        """
        if esendex_password is None:
            raise ValueError("Invalid value for `esendex_password`, must not be `None`")
        if esendex_password is not None and len(esendex_password) > 1000:
            raise ValueError("Invalid value for `esendex_password`, length must be less than or equal to `1000`")

        self._esendex_password = esendex_password

    @property
    def esendex_username(self):
        """Gets the esendex_username of this TransportEsendexJsonldPut.

        The account email for the Esendex service.

        :return: The esendex_username of this TransportEsendexJsonldPut.
        :rtype: str
        """
        return self._esendex_username

    @esendex_username.setter
    def esendex_username(self, esendex_username):
        """Sets the esendex_username of this TransportEsendexJsonldPut.

        The account email for the Esendex service.

        :param esendex_username: The esendex_username of this TransportEsendexJsonldPut.
        :type esendex_username: str
        """
        if esendex_username is None:
            raise ValueError("Invalid value for `esendex_username`, must not be `None`")
        if esendex_username is not None and len(esendex_username) > 255:
            raise ValueError("Invalid value for `esendex_username`, length must be less than or equal to `255`")

        self._esendex_username = esendex_username

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportEsendexJsonldPut.

        The name of the transport.

        :return: The transport_name of this TransportEsendexJsonldPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportEsendexJsonldPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportEsendexJsonldPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
