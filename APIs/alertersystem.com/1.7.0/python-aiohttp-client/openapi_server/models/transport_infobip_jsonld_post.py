# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportInfobipJsonldPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, infobip_auth_token: str=None, infobip_from: str=None, infobip_host: str=None, partition: str=None, transport_name: str=None):
        """TransportInfobipJsonldPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportInfobipJsonldPost.
        :param infobip_auth_token: The infobip_auth_token of this TransportInfobipJsonldPost.
        :param infobip_from: The infobip_from of this TransportInfobipJsonldPost.
        :param infobip_host: The infobip_host of this TransportInfobipJsonldPost.
        :param partition: The partition of this TransportInfobipJsonldPost.
        :param transport_name: The transport_name of this TransportInfobipJsonldPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'infobip_auth_token': str,
            'infobip_from': str,
            'infobip_host': str,
            'partition': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'infobip_auth_token': 'infobipAuthToken',
            'infobip_from': 'infobipFrom',
            'infobip_host': 'infobipHost',
            'partition': 'partition',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._infobip_auth_token = infobip_auth_token
        self._infobip_from = infobip_from
        self._infobip_host = infobip_host
        self._partition = partition
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportInfobipJsonldPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportInfobip.jsonld-post of this TransportInfobipJsonldPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportInfobipJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportInfobipJsonldPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportInfobipJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportInfobipJsonldPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def infobip_auth_token(self):
        """Gets the infobip_auth_token of this TransportInfobipJsonldPost.

        The auth token for the Infobip service. Stored in encrypted format.

        :return: The infobip_auth_token of this TransportInfobipJsonldPost.
        :rtype: str
        """
        return self._infobip_auth_token

    @infobip_auth_token.setter
    def infobip_auth_token(self, infobip_auth_token):
        """Sets the infobip_auth_token of this TransportInfobipJsonldPost.

        The auth token for the Infobip service. Stored in encrypted format.

        :param infobip_auth_token: The infobip_auth_token of this TransportInfobipJsonldPost.
        :type infobip_auth_token: str
        """
        if infobip_auth_token is None:
            raise ValueError("Invalid value for `infobip_auth_token`, must not be `None`")
        if infobip_auth_token is not None and len(infobip_auth_token) > 1000:
            raise ValueError("Invalid value for `infobip_auth_token`, length must be less than or equal to `1000`")

        self._infobip_auth_token = infobip_auth_token

    @property
    def infobip_from(self):
        """Gets the infobip_from of this TransportInfobipJsonldPost.

        The sender value for the Infobip service.

        :return: The infobip_from of this TransportInfobipJsonldPost.
        :rtype: str
        """
        return self._infobip_from

    @infobip_from.setter
    def infobip_from(self, infobip_from):
        """Sets the infobip_from of this TransportInfobipJsonldPost.

        The sender value for the Infobip service.

        :param infobip_from: The infobip_from of this TransportInfobipJsonldPost.
        :type infobip_from: str
        """
        if infobip_from is None:
            raise ValueError("Invalid value for `infobip_from`, must not be `None`")
        if infobip_from is not None and len(infobip_from) > 255:
            raise ValueError("Invalid value for `infobip_from`, length must be less than or equal to `255`")

        self._infobip_from = infobip_from

    @property
    def infobip_host(self):
        """Gets the infobip_host of this TransportInfobipJsonldPost.

        The host for the Infobip service.

        :return: The infobip_host of this TransportInfobipJsonldPost.
        :rtype: str
        """
        return self._infobip_host

    @infobip_host.setter
    def infobip_host(self, infobip_host):
        """Sets the infobip_host of this TransportInfobipJsonldPost.

        The host for the Infobip service.

        :param infobip_host: The infobip_host of this TransportInfobipJsonldPost.
        :type infobip_host: str
        """
        if infobip_host is None:
            raise ValueError("Invalid value for `infobip_host`, must not be `None`")
        if infobip_host is not None and len(infobip_host) > 255:
            raise ValueError("Invalid value for `infobip_host`, length must be less than or equal to `255`")

        self._infobip_host = infobip_host

    @property
    def partition(self):
        """Gets the partition of this TransportInfobipJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportInfobipJsonldPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportInfobipJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportInfobipJsonldPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportInfobipJsonldPost.

        The name of the transport.

        :return: The transport_name of this TransportInfobipJsonldPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportInfobipJsonldPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportInfobipJsonldPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
