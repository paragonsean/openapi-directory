# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportSmsapiJsonldPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, partition: str=None, smsapi_from: str=None, smsapi_token: str=None, transport_name: str=None):
        """TransportSmsapiJsonldPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportSmsapiJsonldPost.
        :param partition: The partition of this TransportSmsapiJsonldPost.
        :param smsapi_from: The smsapi_from of this TransportSmsapiJsonldPost.
        :param smsapi_token: The smsapi_token of this TransportSmsapiJsonldPost.
        :param transport_name: The transport_name of this TransportSmsapiJsonldPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'partition': str,
            'smsapi_from': str,
            'smsapi_token': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'partition': 'partition',
            'smsapi_from': 'smsapiFrom',
            'smsapi_token': 'smsapiToken',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._partition = partition
        self._smsapi_from = smsapi_from
        self._smsapi_token = smsapi_token
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportSmsapiJsonldPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportSmsapi.jsonld-post of this TransportSmsapiJsonldPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportSmsapiJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportSmsapiJsonldPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportSmsapiJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportSmsapiJsonldPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def partition(self):
        """Gets the partition of this TransportSmsapiJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportSmsapiJsonldPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportSmsapiJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportSmsapiJsonldPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def smsapi_from(self):
        """Gets the smsapi_from of this TransportSmsapiJsonldPost.

        The sender name for the SMS API service.

        :return: The smsapi_from of this TransportSmsapiJsonldPost.
        :rtype: str
        """
        return self._smsapi_from

    @smsapi_from.setter
    def smsapi_from(self, smsapi_from):
        """Sets the smsapi_from of this TransportSmsapiJsonldPost.

        The sender name for the SMS API service.

        :param smsapi_from: The smsapi_from of this TransportSmsapiJsonldPost.
        :type smsapi_from: str
        """
        if smsapi_from is None:
            raise ValueError("Invalid value for `smsapi_from`, must not be `None`")
        if smsapi_from is not None and len(smsapi_from) > 255:
            raise ValueError("Invalid value for `smsapi_from`, length must be less than or equal to `255`")

        self._smsapi_from = smsapi_from

    @property
    def smsapi_token(self):
        """Gets the smsapi_token of this TransportSmsapiJsonldPost.

        The API token for the SMS API service. Stored in encrypted format.

        :return: The smsapi_token of this TransportSmsapiJsonldPost.
        :rtype: str
        """
        return self._smsapi_token

    @smsapi_token.setter
    def smsapi_token(self, smsapi_token):
        """Sets the smsapi_token of this TransportSmsapiJsonldPost.

        The API token for the SMS API service. Stored in encrypted format.

        :param smsapi_token: The smsapi_token of this TransportSmsapiJsonldPost.
        :type smsapi_token: str
        """
        if smsapi_token is None:
            raise ValueError("Invalid value for `smsapi_token`, must not be `None`")
        if smsapi_token is not None and len(smsapi_token) > 1000:
            raise ValueError("Invalid value for `smsapi_token`, length must be less than or equal to `1000`")

        self._smsapi_token = smsapi_token

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportSmsapiJsonldPost.

        The name of the transport.

        :return: The transport_name of this TransportSmsapiJsonldPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportSmsapiJsonldPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportSmsapiJsonldPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
