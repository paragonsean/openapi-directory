# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportZulipJsonldPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, transport_name: str=None, zulip_channel: str=None, zulip_email: str=None, zulip_host: str=None, zulip_token: str=None):
        """TransportZulipJsonldPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportZulipJsonldPut.
        :param transport_name: The transport_name of this TransportZulipJsonldPut.
        :param zulip_channel: The zulip_channel of this TransportZulipJsonldPut.
        :param zulip_email: The zulip_email of this TransportZulipJsonldPut.
        :param zulip_host: The zulip_host of this TransportZulipJsonldPut.
        :param zulip_token: The zulip_token of this TransportZulipJsonldPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'transport_name': str,
            'zulip_channel': str,
            'zulip_email': str,
            'zulip_host': str,
            'zulip_token': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'transport_name': 'transportName',
            'zulip_channel': 'zulipChannel',
            'zulip_email': 'zulipEmail',
            'zulip_host': 'zulipHost',
            'zulip_token': 'zulipToken'
        }

        self._data_segment_code = data_segment_code
        self._transport_name = transport_name
        self._zulip_channel = zulip_channel
        self._zulip_email = zulip_email
        self._zulip_host = zulip_host
        self._zulip_token = zulip_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportZulipJsonldPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportZulip.jsonld-put of this TransportZulipJsonldPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportZulipJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportZulipJsonldPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportZulipJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportZulipJsonldPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportZulipJsonldPut.

        The name of the transport.

        :return: The transport_name of this TransportZulipJsonldPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportZulipJsonldPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportZulipJsonldPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name

    @property
    def zulip_channel(self):
        """Gets the zulip_channel of this TransportZulipJsonldPut.

        The channel for the Zulip service.

        :return: The zulip_channel of this TransportZulipJsonldPut.
        :rtype: str
        """
        return self._zulip_channel

    @zulip_channel.setter
    def zulip_channel(self, zulip_channel):
        """Sets the zulip_channel of this TransportZulipJsonldPut.

        The channel for the Zulip service.

        :param zulip_channel: The zulip_channel of this TransportZulipJsonldPut.
        :type zulip_channel: str
        """
        if zulip_channel is None:
            raise ValueError("Invalid value for `zulip_channel`, must not be `None`")
        if zulip_channel is not None and len(zulip_channel) > 255:
            raise ValueError("Invalid value for `zulip_channel`, length must be less than or equal to `255`")

        self._zulip_channel = zulip_channel

    @property
    def zulip_email(self):
        """Gets the zulip_email of this TransportZulipJsonldPut.

        The email for the Zulip service.

        :return: The zulip_email of this TransportZulipJsonldPut.
        :rtype: str
        """
        return self._zulip_email

    @zulip_email.setter
    def zulip_email(self, zulip_email):
        """Sets the zulip_email of this TransportZulipJsonldPut.

        The email for the Zulip service.

        :param zulip_email: The zulip_email of this TransportZulipJsonldPut.
        :type zulip_email: str
        """
        if zulip_email is None:
            raise ValueError("Invalid value for `zulip_email`, must not be `None`")
        if zulip_email is not None and len(zulip_email) > 255:
            raise ValueError("Invalid value for `zulip_email`, length must be less than or equal to `255`")

        self._zulip_email = zulip_email

    @property
    def zulip_host(self):
        """Gets the zulip_host of this TransportZulipJsonldPut.

        The host for the Zulip service.

        :return: The zulip_host of this TransportZulipJsonldPut.
        :rtype: str
        """
        return self._zulip_host

    @zulip_host.setter
    def zulip_host(self, zulip_host):
        """Sets the zulip_host of this TransportZulipJsonldPut.

        The host for the Zulip service.

        :param zulip_host: The zulip_host of this TransportZulipJsonldPut.
        :type zulip_host: str
        """
        if zulip_host is None:
            raise ValueError("Invalid value for `zulip_host`, must not be `None`")
        if zulip_host is not None and len(zulip_host) > 255:
            raise ValueError("Invalid value for `zulip_host`, length must be less than or equal to `255`")

        self._zulip_host = zulip_host

    @property
    def zulip_token(self):
        """Gets the zulip_token of this TransportZulipJsonldPut.

        The token for the Zulip service. Stored in encrypted format.

        :return: The zulip_token of this TransportZulipJsonldPut.
        :rtype: str
        """
        return self._zulip_token

    @zulip_token.setter
    def zulip_token(self, zulip_token):
        """Sets the zulip_token of this TransportZulipJsonldPut.

        The token for the Zulip service. Stored in encrypted format.

        :param zulip_token: The zulip_token of this TransportZulipJsonldPut.
        :type zulip_token: str
        """
        if zulip_token is None:
            raise ValueError("Invalid value for `zulip_token`, must not be `None`")
        if zulip_token is not None and len(zulip_token) > 1000:
            raise ValueError("Invalid value for `zulip_token`, length must be less than or equal to `1000`")

        self._zulip_token = zulip_token
