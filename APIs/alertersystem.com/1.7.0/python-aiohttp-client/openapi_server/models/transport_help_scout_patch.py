# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportHelpScoutPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, help_scout_customer_email: str=None, help_scout_mailbox_id: int=None, help_scout_oauth_token: str=None, transport_name: str=None):
        """TransportHelpScoutPatch - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportHelpScoutPatch.
        :param help_scout_customer_email: The help_scout_customer_email of this TransportHelpScoutPatch.
        :param help_scout_mailbox_id: The help_scout_mailbox_id of this TransportHelpScoutPatch.
        :param help_scout_oauth_token: The help_scout_oauth_token of this TransportHelpScoutPatch.
        :param transport_name: The transport_name of this TransportHelpScoutPatch.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'help_scout_customer_email': str,
            'help_scout_mailbox_id': int,
            'help_scout_oauth_token': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'help_scout_customer_email': 'helpScoutCustomerEmail',
            'help_scout_mailbox_id': 'helpScoutMailboxId',
            'help_scout_oauth_token': 'helpScoutOauthToken',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._help_scout_customer_email = help_scout_customer_email
        self._help_scout_mailbox_id = help_scout_mailbox_id
        self._help_scout_oauth_token = help_scout_oauth_token
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportHelpScoutPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportHelpScout-patch of this TransportHelpScoutPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportHelpScoutPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportHelpScoutPatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportHelpScoutPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportHelpScoutPatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def help_scout_customer_email(self):
        """Gets the help_scout_customer_email of this TransportHelpScoutPatch.

        The requester customer email address for the HelpScout service.

        :return: The help_scout_customer_email of this TransportHelpScoutPatch.
        :rtype: str
        """
        return self._help_scout_customer_email

    @help_scout_customer_email.setter
    def help_scout_customer_email(self, help_scout_customer_email):
        """Sets the help_scout_customer_email of this TransportHelpScoutPatch.

        The requester customer email address for the HelpScout service.

        :param help_scout_customer_email: The help_scout_customer_email of this TransportHelpScoutPatch.
        :type help_scout_customer_email: str
        """
        if help_scout_customer_email is None:
            raise ValueError("Invalid value for `help_scout_customer_email`, must not be `None`")
        if help_scout_customer_email is not None and len(help_scout_customer_email) > 255:
            raise ValueError("Invalid value for `help_scout_customer_email`, length must be less than or equal to `255`")

        self._help_scout_customer_email = help_scout_customer_email

    @property
    def help_scout_mailbox_id(self):
        """Gets the help_scout_mailbox_id of this TransportHelpScoutPatch.

        The mailbox ID for the HelpScout service.

        :return: The help_scout_mailbox_id of this TransportHelpScoutPatch.
        :rtype: int
        """
        return self._help_scout_mailbox_id

    @help_scout_mailbox_id.setter
    def help_scout_mailbox_id(self, help_scout_mailbox_id):
        """Sets the help_scout_mailbox_id of this TransportHelpScoutPatch.

        The mailbox ID for the HelpScout service.

        :param help_scout_mailbox_id: The help_scout_mailbox_id of this TransportHelpScoutPatch.
        :type help_scout_mailbox_id: int
        """
        if help_scout_mailbox_id is not None and help_scout_mailbox_id <= 0:
            raise ValueError("Invalid value for `help_scout_mailbox_id`, must be a value greater than `0`")

        self._help_scout_mailbox_id = help_scout_mailbox_id

    @property
    def help_scout_oauth_token(self):
        """Gets the help_scout_oauth_token of this TransportHelpScoutPatch.

        The OAuth token for the HelpScout service. Stored in encrypted format.

        :return: The help_scout_oauth_token of this TransportHelpScoutPatch.
        :rtype: str
        """
        return self._help_scout_oauth_token

    @help_scout_oauth_token.setter
    def help_scout_oauth_token(self, help_scout_oauth_token):
        """Sets the help_scout_oauth_token of this TransportHelpScoutPatch.

        The OAuth token for the HelpScout service. Stored in encrypted format.

        :param help_scout_oauth_token: The help_scout_oauth_token of this TransportHelpScoutPatch.
        :type help_scout_oauth_token: str
        """
        if help_scout_oauth_token is None:
            raise ValueError("Invalid value for `help_scout_oauth_token`, must not be `None`")
        if help_scout_oauth_token is not None and len(help_scout_oauth_token) > 1000:
            raise ValueError("Invalid value for `help_scout_oauth_token`, length must be less than or equal to `1000`")

        self._help_scout_oauth_token = help_scout_oauth_token

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportHelpScoutPatch.

        The name of the transport.

        :return: The transport_name of this TransportHelpScoutPatch.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportHelpScoutPatch.

        The name of the transport.

        :param transport_name: The transport_name of this TransportHelpScoutPatch.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
