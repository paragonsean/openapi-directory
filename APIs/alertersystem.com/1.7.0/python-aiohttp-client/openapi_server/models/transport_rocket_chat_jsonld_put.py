# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportRocketChatJsonldPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, rocket_chat_channel: str=None, rocket_chat_token: str=None, transport_name: str=None):
        """TransportRocketChatJsonldPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportRocketChatJsonldPut.
        :param rocket_chat_channel: The rocket_chat_channel of this TransportRocketChatJsonldPut.
        :param rocket_chat_token: The rocket_chat_token of this TransportRocketChatJsonldPut.
        :param transport_name: The transport_name of this TransportRocketChatJsonldPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'rocket_chat_channel': str,
            'rocket_chat_token': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'rocket_chat_channel': 'rocketChatChannel',
            'rocket_chat_token': 'rocketChatToken',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._rocket_chat_channel = rocket_chat_channel
        self._rocket_chat_token = rocket_chat_token
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportRocketChatJsonldPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportRocketChat.jsonld-put of this TransportRocketChatJsonldPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportRocketChatJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportRocketChatJsonldPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportRocketChatJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportRocketChatJsonldPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def rocket_chat_channel(self):
        """Gets the rocket_chat_channel of this TransportRocketChatJsonldPut.

        The channel for the Rocket Chat service.

        :return: The rocket_chat_channel of this TransportRocketChatJsonldPut.
        :rtype: str
        """
        return self._rocket_chat_channel

    @rocket_chat_channel.setter
    def rocket_chat_channel(self, rocket_chat_channel):
        """Sets the rocket_chat_channel of this TransportRocketChatJsonldPut.

        The channel for the Rocket Chat service.

        :param rocket_chat_channel: The rocket_chat_channel of this TransportRocketChatJsonldPut.
        :type rocket_chat_channel: str
        """
        if rocket_chat_channel is None:
            raise ValueError("Invalid value for `rocket_chat_channel`, must not be `None`")
        if rocket_chat_channel is not None and len(rocket_chat_channel) > 255:
            raise ValueError("Invalid value for `rocket_chat_channel`, length must be less than or equal to `255`")

        self._rocket_chat_channel = rocket_chat_channel

    @property
    def rocket_chat_token(self):
        """Gets the rocket_chat_token of this TransportRocketChatJsonldPut.

        The access token for the Rocket Chat service. Stored in encrypted format.

        :return: The rocket_chat_token of this TransportRocketChatJsonldPut.
        :rtype: str
        """
        return self._rocket_chat_token

    @rocket_chat_token.setter
    def rocket_chat_token(self, rocket_chat_token):
        """Sets the rocket_chat_token of this TransportRocketChatJsonldPut.

        The access token for the Rocket Chat service. Stored in encrypted format.

        :param rocket_chat_token: The rocket_chat_token of this TransportRocketChatJsonldPut.
        :type rocket_chat_token: str
        """
        if rocket_chat_token is None:
            raise ValueError("Invalid value for `rocket_chat_token`, must not be `None`")
        if rocket_chat_token is not None and len(rocket_chat_token) > 1000:
            raise ValueError("Invalid value for `rocket_chat_token`, length must be less than or equal to `1000`")

        self._rocket_chat_token = rocket_chat_token

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportRocketChatJsonldPut.

        The name of the transport.

        :return: The transport_name of this TransportRocketChatJsonldPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportRocketChatJsonldPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportRocketChatJsonldPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
