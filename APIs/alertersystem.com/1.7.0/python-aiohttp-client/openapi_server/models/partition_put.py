# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartitionPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, partition_name: str=None, partition_notes: str=None):
        """PartitionPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this PartitionPut.
        :param partition_name: The partition_name of this PartitionPut.
        :param partition_notes: The partition_notes of this PartitionPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'partition_name': str,
            'partition_notes': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'partition_name': 'partitionName',
            'partition_notes': 'partitionNotes'
        }

        self._data_segment_code = data_segment_code
        self._partition_name = partition_name
        self._partition_notes = partition_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partition-put of this PartitionPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this PartitionPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this PartitionPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this PartitionPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this PartitionPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def partition_name(self):
        """Gets the partition_name of this PartitionPut.

        The name of the partition. Max 255 characters.

        :return: The partition_name of this PartitionPut.
        :rtype: str
        """
        return self._partition_name

    @partition_name.setter
    def partition_name(self, partition_name):
        """Sets the partition_name of this PartitionPut.

        The name of the partition. Max 255 characters.

        :param partition_name: The partition_name of this PartitionPut.
        :type partition_name: str
        """
        if partition_name is None:
            raise ValueError("Invalid value for `partition_name`, must not be `None`")
        if partition_name is not None and len(partition_name) > 255:
            raise ValueError("Invalid value for `partition_name`, length must be less than or equal to `255`")

        self._partition_name = partition_name

    @property
    def partition_notes(self):
        """Gets the partition_notes of this PartitionPut.

        Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :return: The partition_notes of this PartitionPut.
        :rtype: str
        """
        return self._partition_notes

    @partition_notes.setter
    def partition_notes(self, partition_notes):
        """Sets the partition_notes of this PartitionPut.

        Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :param partition_notes: The partition_notes of this PartitionPut.
        :type partition_notes: str
        """
        if partition_notes is not None and len(partition_notes) > 10000:
            raise ValueError("Invalid value for `partition_notes`, length must be less than or equal to `10000`")

        self._partition_notes = partition_notes
