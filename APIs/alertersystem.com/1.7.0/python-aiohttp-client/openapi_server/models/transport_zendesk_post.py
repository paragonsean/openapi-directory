# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportZendeskPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, partition: str=None, transport_name: str=None, zendesk_email: str=None, zendesk_host: str=None, zendesk_token: str=None):
        """TransportZendeskPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportZendeskPost.
        :param partition: The partition of this TransportZendeskPost.
        :param transport_name: The transport_name of this TransportZendeskPost.
        :param zendesk_email: The zendesk_email of this TransportZendeskPost.
        :param zendesk_host: The zendesk_host of this TransportZendeskPost.
        :param zendesk_token: The zendesk_token of this TransportZendeskPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'partition': str,
            'transport_name': str,
            'zendesk_email': str,
            'zendesk_host': str,
            'zendesk_token': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'partition': 'partition',
            'transport_name': 'transportName',
            'zendesk_email': 'zendeskEmail',
            'zendesk_host': 'zendeskHost',
            'zendesk_token': 'zendeskToken'
        }

        self._data_segment_code = data_segment_code
        self._partition = partition
        self._transport_name = transport_name
        self._zendesk_email = zendesk_email
        self._zendesk_host = zendesk_host
        self._zendesk_token = zendesk_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportZendeskPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportZendesk-post of this TransportZendeskPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportZendeskPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportZendeskPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportZendeskPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportZendeskPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def partition(self):
        """Gets the partition of this TransportZendeskPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportZendeskPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportZendeskPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportZendeskPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportZendeskPost.

        The name of the transport.

        :return: The transport_name of this TransportZendeskPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportZendeskPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportZendeskPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name

    @property
    def zendesk_email(self):
        """Gets the zendesk_email of this TransportZendeskPost.

        The login email address for the Zendesk service.

        :return: The zendesk_email of this TransportZendeskPost.
        :rtype: str
        """
        return self._zendesk_email

    @zendesk_email.setter
    def zendesk_email(self, zendesk_email):
        """Sets the zendesk_email of this TransportZendeskPost.

        The login email address for the Zendesk service.

        :param zendesk_email: The zendesk_email of this TransportZendeskPost.
        :type zendesk_email: str
        """
        if zendesk_email is None:
            raise ValueError("Invalid value for `zendesk_email`, must not be `None`")
        if zendesk_email is not None and len(zendesk_email) > 255:
            raise ValueError("Invalid value for `zendesk_email`, length must be less than or equal to `255`")

        self._zendesk_email = zendesk_email

    @property
    def zendesk_host(self):
        """Gets the zendesk_host of this TransportZendeskPost.

        The host name for the Zendesk service (domain.zendesk.com).

        :return: The zendesk_host of this TransportZendeskPost.
        :rtype: str
        """
        return self._zendesk_host

    @zendesk_host.setter
    def zendesk_host(self, zendesk_host):
        """Sets the zendesk_host of this TransportZendeskPost.

        The host name for the Zendesk service (domain.zendesk.com).

        :param zendesk_host: The zendesk_host of this TransportZendeskPost.
        :type zendesk_host: str
        """
        if zendesk_host is None:
            raise ValueError("Invalid value for `zendesk_host`, must not be `None`")
        if zendesk_host is not None and len(zendesk_host) > 255:
            raise ValueError("Invalid value for `zendesk_host`, length must be less than or equal to `255`")

        self._zendesk_host = zendesk_host

    @property
    def zendesk_token(self):
        """Gets the zendesk_token of this TransportZendeskPost.

        The token for the Zendesk service. Stored in encrypted format.

        :return: The zendesk_token of this TransportZendeskPost.
        :rtype: str
        """
        return self._zendesk_token

    @zendesk_token.setter
    def zendesk_token(self, zendesk_token):
        """Sets the zendesk_token of this TransportZendeskPost.

        The token for the Zendesk service. Stored in encrypted format.

        :param zendesk_token: The zendesk_token of this TransportZendeskPost.
        :type zendesk_token: str
        """
        if zendesk_token is None:
            raise ValueError("Invalid value for `zendesk_token`, must not be `None`")
        if zendesk_token is not None and len(zendesk_token) > 1000:
            raise ValueError("Invalid value for `zendesk_token`, length must be less than or equal to `1000`")

        self._zendesk_token = zendesk_token
