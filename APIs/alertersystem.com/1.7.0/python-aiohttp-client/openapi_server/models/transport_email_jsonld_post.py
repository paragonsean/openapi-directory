# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportEmailJsonldPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, email_from_address: str=None, email_from_name: str=None, email_password: str=None, email_port: int=None, email_server: str=None, email_username: str=None, partition: str=None, transport_name: str=None):
        """TransportEmailJsonldPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportEmailJsonldPost.
        :param email_from_address: The email_from_address of this TransportEmailJsonldPost.
        :param email_from_name: The email_from_name of this TransportEmailJsonldPost.
        :param email_password: The email_password of this TransportEmailJsonldPost.
        :param email_port: The email_port of this TransportEmailJsonldPost.
        :param email_server: The email_server of this TransportEmailJsonldPost.
        :param email_username: The email_username of this TransportEmailJsonldPost.
        :param partition: The partition of this TransportEmailJsonldPost.
        :param transport_name: The transport_name of this TransportEmailJsonldPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'email_from_address': str,
            'email_from_name': str,
            'email_password': str,
            'email_port': int,
            'email_server': str,
            'email_username': str,
            'partition': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'email_from_address': 'emailFromAddress',
            'email_from_name': 'emailFromName',
            'email_password': 'emailPassword',
            'email_port': 'emailPort',
            'email_server': 'emailServer',
            'email_username': 'emailUsername',
            'partition': 'partition',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._email_from_address = email_from_address
        self._email_from_name = email_from_name
        self._email_password = email_password
        self._email_port = email_port
        self._email_server = email_server
        self._email_username = email_username
        self._partition = partition
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportEmailJsonldPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportEmail.jsonld-post of this TransportEmailJsonldPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportEmailJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportEmailJsonldPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportEmailJsonldPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def email_from_address(self):
        """Gets the email_from_address of this TransportEmailJsonldPost.

        The sender email address for the SMTP Email service.

        :return: The email_from_address of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._email_from_address

    @email_from_address.setter
    def email_from_address(self, email_from_address):
        """Sets the email_from_address of this TransportEmailJsonldPost.

        The sender email address for the SMTP Email service.

        :param email_from_address: The email_from_address of this TransportEmailJsonldPost.
        :type email_from_address: str
        """
        if email_from_address is None:
            raise ValueError("Invalid value for `email_from_address`, must not be `None`")
        if email_from_address is not None and len(email_from_address) > 255:
            raise ValueError("Invalid value for `email_from_address`, length must be less than or equal to `255`")

        self._email_from_address = email_from_address

    @property
    def email_from_name(self):
        """Gets the email_from_name of this TransportEmailJsonldPost.

        The sender name for the SMTP Email service.

        :return: The email_from_name of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._email_from_name

    @email_from_name.setter
    def email_from_name(self, email_from_name):
        """Sets the email_from_name of this TransportEmailJsonldPost.

        The sender name for the SMTP Email service.

        :param email_from_name: The email_from_name of this TransportEmailJsonldPost.
        :type email_from_name: str
        """
        if email_from_name is None:
            raise ValueError("Invalid value for `email_from_name`, must not be `None`")
        if email_from_name is not None and len(email_from_name) > 255:
            raise ValueError("Invalid value for `email_from_name`, length must be less than or equal to `255`")

        self._email_from_name = email_from_name

    @property
    def email_password(self):
        """Gets the email_password of this TransportEmailJsonldPost.

        The password for the SMTP Email service. Stored in encrypted format.

        :return: The email_password of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._email_password

    @email_password.setter
    def email_password(self, email_password):
        """Sets the email_password of this TransportEmailJsonldPost.

        The password for the SMTP Email service. Stored in encrypted format.

        :param email_password: The email_password of this TransportEmailJsonldPost.
        :type email_password: str
        """
        if email_password is None:
            raise ValueError("Invalid value for `email_password`, must not be `None`")
        if email_password is not None and len(email_password) > 1000:
            raise ValueError("Invalid value for `email_password`, length must be less than or equal to `1000`")

        self._email_password = email_password

    @property
    def email_port(self):
        """Gets the email_port of this TransportEmailJsonldPost.

        The port for the SMTP Email service.

        :return: The email_port of this TransportEmailJsonldPost.
        :rtype: int
        """
        return self._email_port

    @email_port.setter
    def email_port(self, email_port):
        """Sets the email_port of this TransportEmailJsonldPost.

        The port for the SMTP Email service.

        :param email_port: The email_port of this TransportEmailJsonldPost.
        :type email_port: int
        """
        if email_port is None:
            raise ValueError("Invalid value for `email_port`, must not be `None`")
        if email_port is not None and email_port <= 0:
            raise ValueError("Invalid value for `email_port`, must be a value greater than `0`")

        self._email_port = email_port

    @property
    def email_server(self):
        """Gets the email_server of this TransportEmailJsonldPost.

        The server for the SMTP Email service.

        :return: The email_server of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._email_server

    @email_server.setter
    def email_server(self, email_server):
        """Sets the email_server of this TransportEmailJsonldPost.

        The server for the SMTP Email service.

        :param email_server: The email_server of this TransportEmailJsonldPost.
        :type email_server: str
        """
        if email_server is None:
            raise ValueError("Invalid value for `email_server`, must not be `None`")
        if email_server is not None and len(email_server) > 255:
            raise ValueError("Invalid value for `email_server`, length must be less than or equal to `255`")

        self._email_server = email_server

    @property
    def email_username(self):
        """Gets the email_username of this TransportEmailJsonldPost.

        The username for the SMTP Email service.

        :return: The email_username of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._email_username

    @email_username.setter
    def email_username(self, email_username):
        """Sets the email_username of this TransportEmailJsonldPost.

        The username for the SMTP Email service.

        :param email_username: The email_username of this TransportEmailJsonldPost.
        :type email_username: str
        """
        if email_username is None:
            raise ValueError("Invalid value for `email_username`, must not be `None`")
        if email_username is not None and len(email_username) > 255:
            raise ValueError("Invalid value for `email_username`, length must be less than or equal to `255`")

        self._email_username = email_username

    @property
    def partition(self):
        """Gets the partition of this TransportEmailJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportEmailJsonldPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportEmailJsonldPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportEmailJsonldPost.

        The name of the transport.

        :return: The transport_name of this TransportEmailJsonldPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportEmailJsonldPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportEmailJsonldPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
