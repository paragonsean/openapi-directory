# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportIqsmsPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, iqsms_from: str=None, iqsms_login: str=None, iqsms_password: str=None, transport_name: str=None):
        """TransportIqsmsPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportIqsmsPut.
        :param iqsms_from: The iqsms_from of this TransportIqsmsPut.
        :param iqsms_login: The iqsms_login of this TransportIqsmsPut.
        :param iqsms_password: The iqsms_password of this TransportIqsmsPut.
        :param transport_name: The transport_name of this TransportIqsmsPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'iqsms_from': str,
            'iqsms_login': str,
            'iqsms_password': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'iqsms_from': 'iqsmsFrom',
            'iqsms_login': 'iqsmsLogin',
            'iqsms_password': 'iqsmsPassword',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._iqsms_from = iqsms_from
        self._iqsms_login = iqsms_login
        self._iqsms_password = iqsms_password
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportIqsmsPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportIqsms-put of this TransportIqsmsPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportIqsmsPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportIqsmsPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportIqsmsPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportIqsmsPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def iqsms_from(self):
        """Gets the iqsms_from of this TransportIqsmsPut.

        The sender value for the Iqsms service.

        :return: The iqsms_from of this TransportIqsmsPut.
        :rtype: str
        """
        return self._iqsms_from

    @iqsms_from.setter
    def iqsms_from(self, iqsms_from):
        """Sets the iqsms_from of this TransportIqsmsPut.

        The sender value for the Iqsms service.

        :param iqsms_from: The iqsms_from of this TransportIqsmsPut.
        :type iqsms_from: str
        """
        if iqsms_from is None:
            raise ValueError("Invalid value for `iqsms_from`, must not be `None`")
        if iqsms_from is not None and len(iqsms_from) > 255:
            raise ValueError("Invalid value for `iqsms_from`, length must be less than or equal to `255`")

        self._iqsms_from = iqsms_from

    @property
    def iqsms_login(self):
        """Gets the iqsms_login of this TransportIqsmsPut.

        The login for the Iqsms service.

        :return: The iqsms_login of this TransportIqsmsPut.
        :rtype: str
        """
        return self._iqsms_login

    @iqsms_login.setter
    def iqsms_login(self, iqsms_login):
        """Sets the iqsms_login of this TransportIqsmsPut.

        The login for the Iqsms service.

        :param iqsms_login: The iqsms_login of this TransportIqsmsPut.
        :type iqsms_login: str
        """
        if iqsms_login is None:
            raise ValueError("Invalid value for `iqsms_login`, must not be `None`")
        if iqsms_login is not None and len(iqsms_login) > 255:
            raise ValueError("Invalid value for `iqsms_login`, length must be less than or equal to `255`")

        self._iqsms_login = iqsms_login

    @property
    def iqsms_password(self):
        """Gets the iqsms_password of this TransportIqsmsPut.

        The password for the Iqsms service. Stored in encrypted format.

        :return: The iqsms_password of this TransportIqsmsPut.
        :rtype: str
        """
        return self._iqsms_password

    @iqsms_password.setter
    def iqsms_password(self, iqsms_password):
        """Sets the iqsms_password of this TransportIqsmsPut.

        The password for the Iqsms service. Stored in encrypted format.

        :param iqsms_password: The iqsms_password of this TransportIqsmsPut.
        :type iqsms_password: str
        """
        if iqsms_password is None:
            raise ValueError("Invalid value for `iqsms_password`, must not be `None`")
        if iqsms_password is not None and len(iqsms_password) > 1000:
            raise ValueError("Invalid value for `iqsms_password`, length must be less than or equal to `1000`")

        self._iqsms_password = iqsms_password

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportIqsmsPut.

        The name of the transport.

        :return: The transport_name of this TransportIqsmsPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportIqsmsPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportIqsmsPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
