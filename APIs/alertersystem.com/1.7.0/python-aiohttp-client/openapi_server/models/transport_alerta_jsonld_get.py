# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_log_jsonld_get_context import AlertLogJsonldGetContext
from openapi_server import util


class TransportAlertaJsonldGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: AlertLogJsonldGetContext=None, id: str=None, type: str=None, alerta_api_key: str=None, alerta_correlate: str=None, alerta_environment: str=None, alerta_event: str=None, alerta_group: str=None, alerta_host: str=None, alerta_origin: str=None, alerta_resource: str=None, alerta_service: str=None, alerta_severity: str=None, alerta_status: str=None, alerta_tags: str=None, alerta_type: str=None, created_at: datetime=None, data_segment_code: str=None, id: str=None, partition: str=None, resource_owner: str=None, transport_name: str=None):
        """TransportAlertaJsonldGet - a model defined in OpenAPI

        :param context: The context of this TransportAlertaJsonldGet.
        :param id: The id of this TransportAlertaJsonldGet.
        :param type: The type of this TransportAlertaJsonldGet.
        :param alerta_api_key: The alerta_api_key of this TransportAlertaJsonldGet.
        :param alerta_correlate: The alerta_correlate of this TransportAlertaJsonldGet.
        :param alerta_environment: The alerta_environment of this TransportAlertaJsonldGet.
        :param alerta_event: The alerta_event of this TransportAlertaJsonldGet.
        :param alerta_group: The alerta_group of this TransportAlertaJsonldGet.
        :param alerta_host: The alerta_host of this TransportAlertaJsonldGet.
        :param alerta_origin: The alerta_origin of this TransportAlertaJsonldGet.
        :param alerta_resource: The alerta_resource of this TransportAlertaJsonldGet.
        :param alerta_service: The alerta_service of this TransportAlertaJsonldGet.
        :param alerta_severity: The alerta_severity of this TransportAlertaJsonldGet.
        :param alerta_status: The alerta_status of this TransportAlertaJsonldGet.
        :param alerta_tags: The alerta_tags of this TransportAlertaJsonldGet.
        :param alerta_type: The alerta_type of this TransportAlertaJsonldGet.
        :param created_at: The created_at of this TransportAlertaJsonldGet.
        :param data_segment_code: The data_segment_code of this TransportAlertaJsonldGet.
        :param id: The id of this TransportAlertaJsonldGet.
        :param partition: The partition of this TransportAlertaJsonldGet.
        :param resource_owner: The resource_owner of this TransportAlertaJsonldGet.
        :param transport_name: The transport_name of this TransportAlertaJsonldGet.
        """
        self.openapi_types = {
            'context': AlertLogJsonldGetContext,
            'id': str,
            'type': str,
            'alerta_api_key': str,
            'alerta_correlate': str,
            'alerta_environment': str,
            'alerta_event': str,
            'alerta_group': str,
            'alerta_host': str,
            'alerta_origin': str,
            'alerta_resource': str,
            'alerta_service': str,
            'alerta_severity': str,
            'alerta_status': str,
            'alerta_tags': str,
            'alerta_type': str,
            'created_at': datetime,
            'data_segment_code': str,
            'id': str,
            'partition': str,
            'resource_owner': str,
            'transport_name': str
        }

        self.attribute_map = {
            'context': '@context',
            'id': '@id',
            'type': '@type',
            'alerta_api_key': 'alertaApiKey',
            'alerta_correlate': 'alertaCorrelate',
            'alerta_environment': 'alertaEnvironment',
            'alerta_event': 'alertaEvent',
            'alerta_group': 'alertaGroup',
            'alerta_host': 'alertaHost',
            'alerta_origin': 'alertaOrigin',
            'alerta_resource': 'alertaResource',
            'alerta_service': 'alertaService',
            'alerta_severity': 'alertaSeverity',
            'alerta_status': 'alertaStatus',
            'alerta_tags': 'alertaTags',
            'alerta_type': 'alertaType',
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'id': 'id',
            'partition': 'partition',
            'resource_owner': 'resourceOwner',
            'transport_name': 'transportName'
        }

        self._context = context
        self._id = id
        self._type = type
        self._alerta_api_key = alerta_api_key
        self._alerta_correlate = alerta_correlate
        self._alerta_environment = alerta_environment
        self._alerta_event = alerta_event
        self._alerta_group = alerta_group
        self._alerta_host = alerta_host
        self._alerta_origin = alerta_origin
        self._alerta_resource = alerta_resource
        self._alerta_service = alerta_service
        self._alerta_severity = alerta_severity
        self._alerta_status = alerta_status
        self._alerta_tags = alerta_tags
        self._alerta_type = alerta_type
        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._id = id
        self._partition = partition
        self._resource_owner = resource_owner
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportAlertaJsonldGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportAlerta.jsonld-get of this TransportAlertaJsonldGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this TransportAlertaJsonldGet.


        :return: The context of this TransportAlertaJsonldGet.
        :rtype: AlertLogJsonldGetContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TransportAlertaJsonldGet.


        :param context: The context of this TransportAlertaJsonldGet.
        :type context: AlertLogJsonldGetContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this TransportAlertaJsonldGet.


        :return: The id of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransportAlertaJsonldGet.


        :param id: The id of this TransportAlertaJsonldGet.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TransportAlertaJsonldGet.


        :return: The type of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransportAlertaJsonldGet.


        :param type: The type of this TransportAlertaJsonldGet.
        :type type: str
        """

        self._type = type

    @property
    def alerta_api_key(self):
        """Gets the alerta_api_key of this TransportAlertaJsonldGet.

        The API key for the Alerta service.

        :return: The alerta_api_key of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_api_key

    @alerta_api_key.setter
    def alerta_api_key(self, alerta_api_key):
        """Sets the alerta_api_key of this TransportAlertaJsonldGet.

        The API key for the Alerta service.

        :param alerta_api_key: The alerta_api_key of this TransportAlertaJsonldGet.
        :type alerta_api_key: str
        """
        if alerta_api_key is None:
            raise ValueError("Invalid value for `alerta_api_key`, must not be `None`")
        if alerta_api_key is not None and len(alerta_api_key) > 1000:
            raise ValueError("Invalid value for `alerta_api_key`, length must be less than or equal to `1000`")

        self._alerta_api_key = alerta_api_key

    @property
    def alerta_correlate(self):
        """Gets the alerta_correlate of this TransportAlertaJsonldGet.

        The comma-separated list of related event names for the Alerta service.

        :return: The alerta_correlate of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_correlate

    @alerta_correlate.setter
    def alerta_correlate(self, alerta_correlate):
        """Sets the alerta_correlate of this TransportAlertaJsonldGet.

        The comma-separated list of related event names for the Alerta service.

        :param alerta_correlate: The alerta_correlate of this TransportAlertaJsonldGet.
        :type alerta_correlate: str
        """
        if alerta_correlate is not None and len(alerta_correlate) > 255:
            raise ValueError("Invalid value for `alerta_correlate`, length must be less than or equal to `255`")

        self._alerta_correlate = alerta_correlate

    @property
    def alerta_environment(self):
        """Gets the alerta_environment of this TransportAlertaJsonldGet.

        The environment value for the Alerta service.

        :return: The alerta_environment of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_environment

    @alerta_environment.setter
    def alerta_environment(self, alerta_environment):
        """Sets the alerta_environment of this TransportAlertaJsonldGet.

        The environment value for the Alerta service.

        :param alerta_environment: The alerta_environment of this TransportAlertaJsonldGet.
        :type alerta_environment: str
        """
        if alerta_environment is not None and len(alerta_environment) > 255:
            raise ValueError("Invalid value for `alerta_environment`, length must be less than or equal to `255`")

        self._alerta_environment = alerta_environment

    @property
    def alerta_event(self):
        """Gets the alerta_event of this TransportAlertaJsonldGet.

        The event value for the Alerta service.

        :return: The alerta_event of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_event

    @alerta_event.setter
    def alerta_event(self, alerta_event):
        """Sets the alerta_event of this TransportAlertaJsonldGet.

        The event value for the Alerta service.

        :param alerta_event: The alerta_event of this TransportAlertaJsonldGet.
        :type alerta_event: str
        """
        if alerta_event is None:
            raise ValueError("Invalid value for `alerta_event`, must not be `None`")
        if alerta_event is not None and len(alerta_event) > 255:
            raise ValueError("Invalid value for `alerta_event`, length must be less than or equal to `255`")

        self._alerta_event = alerta_event

    @property
    def alerta_group(self):
        """Gets the alerta_group of this TransportAlertaJsonldGet.

        The group value for the Alerta service.

        :return: The alerta_group of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_group

    @alerta_group.setter
    def alerta_group(self, alerta_group):
        """Sets the alerta_group of this TransportAlertaJsonldGet.

        The group value for the Alerta service.

        :param alerta_group: The alerta_group of this TransportAlertaJsonldGet.
        :type alerta_group: str
        """
        if alerta_group is not None and len(alerta_group) > 255:
            raise ValueError("Invalid value for `alerta_group`, length must be less than or equal to `255`")

        self._alerta_group = alerta_group

    @property
    def alerta_host(self):
        """Gets the alerta_host of this TransportAlertaJsonldGet.

        The host name for the Alerta service (omit the \"https://\" part).

        :return: The alerta_host of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_host

    @alerta_host.setter
    def alerta_host(self, alerta_host):
        """Sets the alerta_host of this TransportAlertaJsonldGet.

        The host name for the Alerta service (omit the \"https://\" part).

        :param alerta_host: The alerta_host of this TransportAlertaJsonldGet.
        :type alerta_host: str
        """
        if alerta_host is None:
            raise ValueError("Invalid value for `alerta_host`, must not be `None`")

        self._alerta_host = alerta_host

    @property
    def alerta_origin(self):
        """Gets the alerta_origin of this TransportAlertaJsonldGet.

        The origin value for the Alerta service.

        :return: The alerta_origin of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_origin

    @alerta_origin.setter
    def alerta_origin(self, alerta_origin):
        """Sets the alerta_origin of this TransportAlertaJsonldGet.

        The origin value for the Alerta service.

        :param alerta_origin: The alerta_origin of this TransportAlertaJsonldGet.
        :type alerta_origin: str
        """
        if alerta_origin is not None and len(alerta_origin) > 255:
            raise ValueError("Invalid value for `alerta_origin`, length must be less than or equal to `255`")

        self._alerta_origin = alerta_origin

    @property
    def alerta_resource(self):
        """Gets the alerta_resource of this TransportAlertaJsonldGet.

        The resource value for the Alerta service.

        :return: The alerta_resource of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_resource

    @alerta_resource.setter
    def alerta_resource(self, alerta_resource):
        """Sets the alerta_resource of this TransportAlertaJsonldGet.

        The resource value for the Alerta service.

        :param alerta_resource: The alerta_resource of this TransportAlertaJsonldGet.
        :type alerta_resource: str
        """
        if alerta_resource is None:
            raise ValueError("Invalid value for `alerta_resource`, must not be `None`")
        if alerta_resource is not None and len(alerta_resource) > 255:
            raise ValueError("Invalid value for `alerta_resource`, length must be less than or equal to `255`")

        self._alerta_resource = alerta_resource

    @property
    def alerta_service(self):
        """Gets the alerta_service of this TransportAlertaJsonldGet.

        The comma-separated list of affected services for the Alerta service.

        :return: The alerta_service of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_service

    @alerta_service.setter
    def alerta_service(self, alerta_service):
        """Sets the alerta_service of this TransportAlertaJsonldGet.

        The comma-separated list of affected services for the Alerta service.

        :param alerta_service: The alerta_service of this TransportAlertaJsonldGet.
        :type alerta_service: str
        """
        if alerta_service is not None and len(alerta_service) > 255:
            raise ValueError("Invalid value for `alerta_service`, length must be less than or equal to `255`")

        self._alerta_service = alerta_service

    @property
    def alerta_severity(self):
        """Gets the alerta_severity of this TransportAlertaJsonldGet.

        The severity value for the Alerta service.

        :return: The alerta_severity of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_severity

    @alerta_severity.setter
    def alerta_severity(self, alerta_severity):
        """Sets the alerta_severity of this TransportAlertaJsonldGet.

        The severity value for the Alerta service.

        :param alerta_severity: The alerta_severity of this TransportAlertaJsonldGet.
        :type alerta_severity: str
        """
        if alerta_severity is not None and len(alerta_severity) > 255:
            raise ValueError("Invalid value for `alerta_severity`, length must be less than or equal to `255`")

        self._alerta_severity = alerta_severity

    @property
    def alerta_status(self):
        """Gets the alerta_status of this TransportAlertaJsonldGet.

        The status value for the Alerta service.

        :return: The alerta_status of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_status

    @alerta_status.setter
    def alerta_status(self, alerta_status):
        """Sets the alerta_status of this TransportAlertaJsonldGet.

        The status value for the Alerta service.

        :param alerta_status: The alerta_status of this TransportAlertaJsonldGet.
        :type alerta_status: str
        """
        if alerta_status is not None and len(alerta_status) > 255:
            raise ValueError("Invalid value for `alerta_status`, length must be less than or equal to `255`")

        self._alerta_status = alerta_status

    @property
    def alerta_tags(self):
        """Gets the alerta_tags of this TransportAlertaJsonldGet.

        The comma-separated list of tags for the Alerta service.

        :return: The alerta_tags of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_tags

    @alerta_tags.setter
    def alerta_tags(self, alerta_tags):
        """Sets the alerta_tags of this TransportAlertaJsonldGet.

        The comma-separated list of tags for the Alerta service.

        :param alerta_tags: The alerta_tags of this TransportAlertaJsonldGet.
        :type alerta_tags: str
        """
        if alerta_tags is not None and len(alerta_tags) > 255:
            raise ValueError("Invalid value for `alerta_tags`, length must be less than or equal to `255`")

        self._alerta_tags = alerta_tags

    @property
    def alerta_type(self):
        """Gets the alerta_type of this TransportAlertaJsonldGet.

        The type value for the Alerta service.

        :return: The alerta_type of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._alerta_type

    @alerta_type.setter
    def alerta_type(self, alerta_type):
        """Sets the alerta_type of this TransportAlertaJsonldGet.

        The type value for the Alerta service.

        :param alerta_type: The alerta_type of this TransportAlertaJsonldGet.
        :type alerta_type: str
        """
        if alerta_type is not None and len(alerta_type) > 255:
            raise ValueError("Invalid value for `alerta_type`, length must be less than or equal to `255`")

        self._alerta_type = alerta_type

    @property
    def created_at(self):
        """Gets the created_at of this TransportAlertaJsonldGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this TransportAlertaJsonldGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TransportAlertaJsonldGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this TransportAlertaJsonldGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportAlertaJsonldGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportAlertaJsonldGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportAlertaJsonldGet.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def id(self):
        """Gets the id of this TransportAlertaJsonldGet.

        The unique identifier of the resource instance.

        :return: The id of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransportAlertaJsonldGet.

        The unique identifier of the resource instance.

        :param id: The id of this TransportAlertaJsonldGet.
        :type id: str
        """

        self._id = id

    @property
    def partition(self):
        """Gets the partition of this TransportAlertaJsonldGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportAlertaJsonldGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportAlertaJsonldGet.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def resource_owner(self):
        """Gets the resource_owner of this TransportAlertaJsonldGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this TransportAlertaJsonldGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this TransportAlertaJsonldGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportAlertaJsonldGet.

        The name of the transport.

        :return: The transport_name of this TransportAlertaJsonldGet.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportAlertaJsonldGet.

        The name of the transport.

        :param transport_name: The transport_name of this TransportAlertaJsonldGet.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
