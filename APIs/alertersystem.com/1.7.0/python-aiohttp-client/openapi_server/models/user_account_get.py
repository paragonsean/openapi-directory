# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserAccountGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_level_code: str=None, credits_overage_percent_trip_switch: int=None, email: str=None, first_name: str=None, id: str=None, is_delinquent: bool=None, last_name: str=None, timezone_code: str=None):
        """UserAccountGet - a model defined in OpenAPI

        :param account_level_code: The account_level_code of this UserAccountGet.
        :param credits_overage_percent_trip_switch: The credits_overage_percent_trip_switch of this UserAccountGet.
        :param email: The email of this UserAccountGet.
        :param first_name: The first_name of this UserAccountGet.
        :param id: The id of this UserAccountGet.
        :param is_delinquent: The is_delinquent of this UserAccountGet.
        :param last_name: The last_name of this UserAccountGet.
        :param timezone_code: The timezone_code of this UserAccountGet.
        """
        self.openapi_types = {
            'account_level_code': str,
            'credits_overage_percent_trip_switch': int,
            'email': str,
            'first_name': str,
            'id': str,
            'is_delinquent': bool,
            'last_name': str,
            'timezone_code': str
        }

        self.attribute_map = {
            'account_level_code': 'accountLevelCode',
            'credits_overage_percent_trip_switch': 'creditsOveragePercentTripSwitch',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'is_delinquent': 'isDelinquent',
            'last_name': 'lastName',
            'timezone_code': 'timezoneCode'
        }

        self._account_level_code = account_level_code
        self._credits_overage_percent_trip_switch = credits_overage_percent_trip_switch
        self._email = email
        self._first_name = first_name
        self._id = id
        self._is_delinquent = is_delinquent
        self._last_name = last_name
        self._timezone_code = timezone_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccountGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccount-get of this UserAccountGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_level_code(self):
        """Gets the account_level_code of this UserAccountGet.

        The account level of the user.

        :return: The account_level_code of this UserAccountGet.
        :rtype: str
        """
        return self._account_level_code

    @account_level_code.setter
    def account_level_code(self, account_level_code):
        """Sets the account_level_code of this UserAccountGet.

        The account level of the user.

        :param account_level_code: The account_level_code of this UserAccountGet.
        :type account_level_code: str
        """

        self._account_level_code = account_level_code

    @property
    def credits_overage_percent_trip_switch(self):
        """Gets the credits_overage_percent_trip_switch of this UserAccountGet.

        If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.

        :return: The credits_overage_percent_trip_switch of this UserAccountGet.
        :rtype: int
        """
        return self._credits_overage_percent_trip_switch

    @credits_overage_percent_trip_switch.setter
    def credits_overage_percent_trip_switch(self, credits_overage_percent_trip_switch):
        """Sets the credits_overage_percent_trip_switch of this UserAccountGet.

        If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.

        :param credits_overage_percent_trip_switch: The credits_overage_percent_trip_switch of this UserAccountGet.
        :type credits_overage_percent_trip_switch: int
        """
        if credits_overage_percent_trip_switch is not None and credits_overage_percent_trip_switch > 1000:
            raise ValueError("Invalid value for `credits_overage_percent_trip_switch`, must be a value less than or equal to `1000`")
        if credits_overage_percent_trip_switch is not None and credits_overage_percent_trip_switch < 1:
            raise ValueError("Invalid value for `credits_overage_percent_trip_switch`, must be a value greater than or equal to `1`")

        self._credits_overage_percent_trip_switch = credits_overage_percent_trip_switch

    @property
    def email(self):
        """Gets the email of this UserAccountGet.

        The email address of the user.

        :return: The email of this UserAccountGet.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserAccountGet.

        The email address of the user.

        :param email: The email of this UserAccountGet.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserAccountGet.

        The first name of the user.

        :return: The first_name of this UserAccountGet.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserAccountGet.

        The first name of the user.

        :param first_name: The first_name of this UserAccountGet.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserAccountGet.

        The unique identifier of the resource instance.

        :return: The id of this UserAccountGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAccountGet.

        The unique identifier of the resource instance.

        :param id: The id of this UserAccountGet.
        :type id: str
        """

        self._id = id

    @property
    def is_delinquent(self):
        """Gets the is_delinquent of this UserAccountGet.

        Whether the user account has overdue payments.

        :return: The is_delinquent of this UserAccountGet.
        :rtype: bool
        """
        return self._is_delinquent

    @is_delinquent.setter
    def is_delinquent(self, is_delinquent):
        """Sets the is_delinquent of this UserAccountGet.

        Whether the user account has overdue payments.

        :param is_delinquent: The is_delinquent of this UserAccountGet.
        :type is_delinquent: bool
        """

        self._is_delinquent = is_delinquent

    @property
    def last_name(self):
        """Gets the last_name of this UserAccountGet.

        The last name of the user.

        :return: The last_name of this UserAccountGet.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserAccountGet.

        The last name of the user.

        :param last_name: The last_name of this UserAccountGet.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def timezone_code(self):
        """Gets the timezone_code of this UserAccountGet.

        The timezone of the user.

        :return: The timezone_code of this UserAccountGet.
        :rtype: str
        """
        return self._timezone_code

    @timezone_code.setter
    def timezone_code(self, timezone_code):
        """Sets the timezone_code of this UserAccountGet.

        The timezone of the user.

        :param timezone_code: The timezone_code of this UserAccountGet.
        :type timezone_code: str
        """

        self._timezone_code = timezone_code
