# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportBandwidthPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_account_id: str=None, bandwidth_application_id: str=None, bandwidth_from: str=None, bandwidth_password: str=None, bandwidth_username: str=None, data_segment_code: str=None, transport_name: str=None):
        """TransportBandwidthPatch - a model defined in OpenAPI

        :param bandwidth_account_id: The bandwidth_account_id of this TransportBandwidthPatch.
        :param bandwidth_application_id: The bandwidth_application_id of this TransportBandwidthPatch.
        :param bandwidth_from: The bandwidth_from of this TransportBandwidthPatch.
        :param bandwidth_password: The bandwidth_password of this TransportBandwidthPatch.
        :param bandwidth_username: The bandwidth_username of this TransportBandwidthPatch.
        :param data_segment_code: The data_segment_code of this TransportBandwidthPatch.
        :param transport_name: The transport_name of this TransportBandwidthPatch.
        """
        self.openapi_types = {
            'bandwidth_account_id': str,
            'bandwidth_application_id': str,
            'bandwidth_from': str,
            'bandwidth_password': str,
            'bandwidth_username': str,
            'data_segment_code': str,
            'transport_name': str
        }

        self.attribute_map = {
            'bandwidth_account_id': 'bandwidthAccountId',
            'bandwidth_application_id': 'bandwidthApplicationId',
            'bandwidth_from': 'bandwidthFrom',
            'bandwidth_password': 'bandwidthPassword',
            'bandwidth_username': 'bandwidthUsername',
            'data_segment_code': 'dataSegmentCode',
            'transport_name': 'transportName'
        }

        self._bandwidth_account_id = bandwidth_account_id
        self._bandwidth_application_id = bandwidth_application_id
        self._bandwidth_from = bandwidth_from
        self._bandwidth_password = bandwidth_password
        self._bandwidth_username = bandwidth_username
        self._data_segment_code = data_segment_code
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportBandwidthPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportBandwidth-patch of this TransportBandwidthPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_account_id(self):
        """Gets the bandwidth_account_id of this TransportBandwidthPatch.

        The account ID value for the Bandwidth service.

        :return: The bandwidth_account_id of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._bandwidth_account_id

    @bandwidth_account_id.setter
    def bandwidth_account_id(self, bandwidth_account_id):
        """Sets the bandwidth_account_id of this TransportBandwidthPatch.

        The account ID value for the Bandwidth service.

        :param bandwidth_account_id: The bandwidth_account_id of this TransportBandwidthPatch.
        :type bandwidth_account_id: str
        """
        if bandwidth_account_id is None:
            raise ValueError("Invalid value for `bandwidth_account_id`, must not be `None`")
        if bandwidth_account_id is not None and len(bandwidth_account_id) > 255:
            raise ValueError("Invalid value for `bandwidth_account_id`, length must be less than or equal to `255`")

        self._bandwidth_account_id = bandwidth_account_id

    @property
    def bandwidth_application_id(self):
        """Gets the bandwidth_application_id of this TransportBandwidthPatch.

        The application ID value for the Bandwidth service.

        :return: The bandwidth_application_id of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._bandwidth_application_id

    @bandwidth_application_id.setter
    def bandwidth_application_id(self, bandwidth_application_id):
        """Sets the bandwidth_application_id of this TransportBandwidthPatch.

        The application ID value for the Bandwidth service.

        :param bandwidth_application_id: The bandwidth_application_id of this TransportBandwidthPatch.
        :type bandwidth_application_id: str
        """
        if bandwidth_application_id is None:
            raise ValueError("Invalid value for `bandwidth_application_id`, must not be `None`")
        if bandwidth_application_id is not None and len(bandwidth_application_id) > 255:
            raise ValueError("Invalid value for `bandwidth_application_id`, length must be less than or equal to `255`")

        self._bandwidth_application_id = bandwidth_application_id

    @property
    def bandwidth_from(self):
        """Gets the bandwidth_from of this TransportBandwidthPatch.

        The from value for the Bandwidth service.

        :return: The bandwidth_from of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._bandwidth_from

    @bandwidth_from.setter
    def bandwidth_from(self, bandwidth_from):
        """Sets the bandwidth_from of this TransportBandwidthPatch.

        The from value for the Bandwidth service.

        :param bandwidth_from: The bandwidth_from of this TransportBandwidthPatch.
        :type bandwidth_from: str
        """
        if bandwidth_from is None:
            raise ValueError("Invalid value for `bandwidth_from`, must not be `None`")
        if bandwidth_from is not None and len(bandwidth_from) > 255:
            raise ValueError("Invalid value for `bandwidth_from`, length must be less than or equal to `255`")

        self._bandwidth_from = bandwidth_from

    @property
    def bandwidth_password(self):
        """Gets the bandwidth_password of this TransportBandwidthPatch.

        The password for the Bandwidth service. Stored in encrypted format.

        :return: The bandwidth_password of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._bandwidth_password

    @bandwidth_password.setter
    def bandwidth_password(self, bandwidth_password):
        """Sets the bandwidth_password of this TransportBandwidthPatch.

        The password for the Bandwidth service. Stored in encrypted format.

        :param bandwidth_password: The bandwidth_password of this TransportBandwidthPatch.
        :type bandwidth_password: str
        """
        if bandwidth_password is None:
            raise ValueError("Invalid value for `bandwidth_password`, must not be `None`")
        if bandwidth_password is not None and len(bandwidth_password) > 1000:
            raise ValueError("Invalid value for `bandwidth_password`, length must be less than or equal to `1000`")

        self._bandwidth_password = bandwidth_password

    @property
    def bandwidth_username(self):
        """Gets the bandwidth_username of this TransportBandwidthPatch.

        The username for the Bandwidth service.

        :return: The bandwidth_username of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._bandwidth_username

    @bandwidth_username.setter
    def bandwidth_username(self, bandwidth_username):
        """Sets the bandwidth_username of this TransportBandwidthPatch.

        The username for the Bandwidth service.

        :param bandwidth_username: The bandwidth_username of this TransportBandwidthPatch.
        :type bandwidth_username: str
        """
        if bandwidth_username is None:
            raise ValueError("Invalid value for `bandwidth_username`, must not be `None`")
        if bandwidth_username is not None and len(bandwidth_username) > 255:
            raise ValueError("Invalid value for `bandwidth_username`, length must be less than or equal to `255`")

        self._bandwidth_username = bandwidth_username

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportBandwidthPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportBandwidthPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportBandwidthPatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportBandwidthPatch.

        The name of the transport.

        :return: The transport_name of this TransportBandwidthPatch.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportBandwidthPatch.

        The name of the transport.

        :param transport_name: The transport_name of this TransportBandwidthPatch.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
