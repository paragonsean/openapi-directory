# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportPushoverPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, pushover_app_token: str=None, pushover_user_key: str=None, transport_name: str=None):
        """TransportPushoverPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportPushoverPut.
        :param pushover_app_token: The pushover_app_token of this TransportPushoverPut.
        :param pushover_user_key: The pushover_user_key of this TransportPushoverPut.
        :param transport_name: The transport_name of this TransportPushoverPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'pushover_app_token': str,
            'pushover_user_key': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'pushover_app_token': 'pushoverAppToken',
            'pushover_user_key': 'pushoverUserKey',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._pushover_app_token = pushover_app_token
        self._pushover_user_key = pushover_user_key
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportPushoverPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportPushover-put of this TransportPushoverPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportPushoverPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportPushoverPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportPushoverPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportPushoverPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def pushover_app_token(self):
        """Gets the pushover_app_token of this TransportPushoverPut.

        The app token for the Pushover service. Stored in encrypted format.

        :return: The pushover_app_token of this TransportPushoverPut.
        :rtype: str
        """
        return self._pushover_app_token

    @pushover_app_token.setter
    def pushover_app_token(self, pushover_app_token):
        """Sets the pushover_app_token of this TransportPushoverPut.

        The app token for the Pushover service. Stored in encrypted format.

        :param pushover_app_token: The pushover_app_token of this TransportPushoverPut.
        :type pushover_app_token: str
        """
        if pushover_app_token is None:
            raise ValueError("Invalid value for `pushover_app_token`, must not be `None`")
        if pushover_app_token is not None and len(pushover_app_token) > 1000:
            raise ValueError("Invalid value for `pushover_app_token`, length must be less than or equal to `1000`")

        self._pushover_app_token = pushover_app_token

    @property
    def pushover_user_key(self):
        """Gets the pushover_user_key of this TransportPushoverPut.

        The user key for the Pushover service.

        :return: The pushover_user_key of this TransportPushoverPut.
        :rtype: str
        """
        return self._pushover_user_key

    @pushover_user_key.setter
    def pushover_user_key(self, pushover_user_key):
        """Sets the pushover_user_key of this TransportPushoverPut.

        The user key for the Pushover service.

        :param pushover_user_key: The pushover_user_key of this TransportPushoverPut.
        :type pushover_user_key: str
        """
        if pushover_user_key is None:
            raise ValueError("Invalid value for `pushover_user_key`, must not be `None`")
        if pushover_user_key is not None and len(pushover_user_key) > 255:
            raise ValueError("Invalid value for `pushover_user_key`, length must be less than or equal to `255`")

        self._pushover_user_key = pushover_user_key

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportPushoverPut.

        The name of the transport.

        :return: The transport_name of this TransportPushoverPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportPushoverPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportPushoverPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
