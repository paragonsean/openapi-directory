# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_log_jsonld_get_context_one_of import AlertLogJsonldGetContextOneOf
from openapi_server import util


class AlertLogJsonldGetContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vocab: str=None, hydra: str=None):
        """AlertLogJsonldGetContext - a model defined in OpenAPI

        :param vocab: The vocab of this AlertLogJsonldGetContext.
        :param hydra: The hydra of this AlertLogJsonldGetContext.
        """
        self.openapi_types = {
            'vocab': str,
            'hydra': str
        }

        self.attribute_map = {
            'vocab': '@vocab',
            'hydra': 'hydra'
        }

        self._vocab = vocab
        self._hydra = hydra

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertLogJsonldGetContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertLog_jsonld_get__context of this AlertLogJsonldGetContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vocab(self):
        """Gets the vocab of this AlertLogJsonldGetContext.


        :return: The vocab of this AlertLogJsonldGetContext.
        :rtype: str
        """
        return self._vocab

    @vocab.setter
    def vocab(self, vocab):
        """Sets the vocab of this AlertLogJsonldGetContext.


        :param vocab: The vocab of this AlertLogJsonldGetContext.
        :type vocab: str
        """
        if vocab is None:
            raise ValueError("Invalid value for `vocab`, must not be `None`")

        self._vocab = vocab

    @property
    def hydra(self):
        """Gets the hydra of this AlertLogJsonldGetContext.


        :return: The hydra of this AlertLogJsonldGetContext.
        :rtype: str
        """
        return self._hydra

    @hydra.setter
    def hydra(self, hydra):
        """Sets the hydra of this AlertLogJsonldGetContext.


        :param hydra: The hydra of this AlertLogJsonldGetContext.
        :type hydra: str
        """
        allowed_values = ["http://www.w3.org/ns/hydra/core#"]  # noqa: E501
        if hydra not in allowed_values:
            raise ValueError(
                "Invalid value for `hydra` ({0}), must be one of {1}"
                .format(hydra, allowed_values)
            )

        self._hydra = hydra
