# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorStatusLogGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, data_segment_code: str=None, id: str=None, monitor: str=None, monitor_status_code: str=None, partition: str=None, ping: str=None, resource_owner: str=None):
        """MonitorStatusLogGet - a model defined in OpenAPI

        :param created_at: The created_at of this MonitorStatusLogGet.
        :param data_segment_code: The data_segment_code of this MonitorStatusLogGet.
        :param id: The id of this MonitorStatusLogGet.
        :param monitor: The monitor of this MonitorStatusLogGet.
        :param monitor_status_code: The monitor_status_code of this MonitorStatusLogGet.
        :param partition: The partition of this MonitorStatusLogGet.
        :param ping: The ping of this MonitorStatusLogGet.
        :param resource_owner: The resource_owner of this MonitorStatusLogGet.
        """
        self.openapi_types = {
            'created_at': datetime,
            'data_segment_code': str,
            'id': str,
            'monitor': str,
            'monitor_status_code': str,
            'partition': str,
            'ping': str,
            'resource_owner': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'id': 'id',
            'monitor': 'monitor',
            'monitor_status_code': 'monitorStatusCode',
            'partition': 'partition',
            'ping': 'ping',
            'resource_owner': 'resourceOwner'
        }

        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._id = id
        self._monitor = monitor
        self._monitor_status_code = monitor_status_code
        self._partition = partition
        self._ping = ping
        self._resource_owner = resource_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorStatusLogGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorStatusLog-get of this MonitorStatusLogGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this MonitorStatusLogGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this MonitorStatusLogGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MonitorStatusLogGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this MonitorStatusLogGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this MonitorStatusLogGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this MonitorStatusLogGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this MonitorStatusLogGet.
        :type data_segment_code: str
        """

        self._data_segment_code = data_segment_code

    @property
    def id(self):
        """Gets the id of this MonitorStatusLogGet.

        The unique identifier of the resource instance.

        :return: The id of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonitorStatusLogGet.

        The unique identifier of the resource instance.

        :param id: The id of this MonitorStatusLogGet.
        :type id: str
        """

        self._id = id

    @property
    def monitor(self):
        """Gets the monitor of this MonitorStatusLogGet.

        The monitor that is related to this resource instance.

        :return: The monitor of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this MonitorStatusLogGet.

        The monitor that is related to this resource instance.

        :param monitor: The monitor of this MonitorStatusLogGet.
        :type monitor: str
        """

        self._monitor = monitor

    @property
    def monitor_status_code(self):
        """Gets the monitor_status_code of this MonitorStatusLogGet.

        The status of the monitor.

        :return: The monitor_status_code of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._monitor_status_code

    @monitor_status_code.setter
    def monitor_status_code(self, monitor_status_code):
        """Sets the monitor_status_code of this MonitorStatusLogGet.

        The status of the monitor.

        :param monitor_status_code: The monitor_status_code of this MonitorStatusLogGet.
        :type monitor_status_code: str
        """

        self._monitor_status_code = monitor_status_code

    @property
    def partition(self):
        """Gets the partition of this MonitorStatusLogGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this MonitorStatusLogGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this MonitorStatusLogGet.
        :type partition: str
        """

        self._partition = partition

    @property
    def ping(self):
        """Gets the ping of this MonitorStatusLogGet.

        The ping that triggered this resource instance.

        :return: The ping of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._ping

    @ping.setter
    def ping(self, ping):
        """Sets the ping of this MonitorStatusLogGet.

        The ping that triggered this resource instance.

        :param ping: The ping of this MonitorStatusLogGet.
        :type ping: str
        """

        self._ping = ping

    @property
    def resource_owner(self):
        """Gets the resource_owner of this MonitorStatusLogGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this MonitorStatusLogGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this MonitorStatusLogGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this MonitorStatusLogGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner
