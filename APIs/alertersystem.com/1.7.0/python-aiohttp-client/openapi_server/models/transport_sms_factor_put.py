# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportSmsFactorPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, sms_factor_push_type: str=None, sms_factor_sender: str=None, sms_factor_token: str=None, transport_name: str=None):
        """TransportSmsFactorPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportSmsFactorPut.
        :param sms_factor_push_type: The sms_factor_push_type of this TransportSmsFactorPut.
        :param sms_factor_sender: The sms_factor_sender of this TransportSmsFactorPut.
        :param sms_factor_token: The sms_factor_token of this TransportSmsFactorPut.
        :param transport_name: The transport_name of this TransportSmsFactorPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'sms_factor_push_type': str,
            'sms_factor_sender': str,
            'sms_factor_token': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'sms_factor_push_type': 'smsFactorPushType',
            'sms_factor_sender': 'smsFactorSender',
            'sms_factor_token': 'smsFactorToken',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._sms_factor_push_type = sms_factor_push_type
        self._sms_factor_sender = sms_factor_sender
        self._sms_factor_token = sms_factor_token
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportSmsFactorPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportSmsFactor-put of this TransportSmsFactorPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportSmsFactorPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportSmsFactorPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportSmsFactorPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportSmsFactorPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def sms_factor_push_type(self):
        """Gets the sms_factor_push_type of this TransportSmsFactorPut.

        The push type for the SMSFactor service.

        :return: The sms_factor_push_type of this TransportSmsFactorPut.
        :rtype: str
        """
        return self._sms_factor_push_type

    @sms_factor_push_type.setter
    def sms_factor_push_type(self, sms_factor_push_type):
        """Sets the sms_factor_push_type of this TransportSmsFactorPut.

        The push type for the SMSFactor service.

        :param sms_factor_push_type: The sms_factor_push_type of this TransportSmsFactorPut.
        :type sms_factor_push_type: str
        """
        if sms_factor_push_type is None:
            raise ValueError("Invalid value for `sms_factor_push_type`, must not be `None`")
        if sms_factor_push_type is not None and len(sms_factor_push_type) > 255:
            raise ValueError("Invalid value for `sms_factor_push_type`, length must be less than or equal to `255`")

        self._sms_factor_push_type = sms_factor_push_type

    @property
    def sms_factor_sender(self):
        """Gets the sms_factor_sender of this TransportSmsFactorPut.

        The sender value for the SMSFactor service.

        :return: The sms_factor_sender of this TransportSmsFactorPut.
        :rtype: str
        """
        return self._sms_factor_sender

    @sms_factor_sender.setter
    def sms_factor_sender(self, sms_factor_sender):
        """Sets the sms_factor_sender of this TransportSmsFactorPut.

        The sender value for the SMSFactor service.

        :param sms_factor_sender: The sms_factor_sender of this TransportSmsFactorPut.
        :type sms_factor_sender: str
        """
        if sms_factor_sender is None:
            raise ValueError("Invalid value for `sms_factor_sender`, must not be `None`")
        if sms_factor_sender is not None and len(sms_factor_sender) > 255:
            raise ValueError("Invalid value for `sms_factor_sender`, length must be less than or equal to `255`")

        self._sms_factor_sender = sms_factor_sender

    @property
    def sms_factor_token(self):
        """Gets the sms_factor_token of this TransportSmsFactorPut.

        The token for the SMSFactor service. Stored in encrypted format.

        :return: The sms_factor_token of this TransportSmsFactorPut.
        :rtype: str
        """
        return self._sms_factor_token

    @sms_factor_token.setter
    def sms_factor_token(self, sms_factor_token):
        """Sets the sms_factor_token of this TransportSmsFactorPut.

        The token for the SMSFactor service. Stored in encrypted format.

        :param sms_factor_token: The sms_factor_token of this TransportSmsFactorPut.
        :type sms_factor_token: str
        """
        if sms_factor_token is None:
            raise ValueError("Invalid value for `sms_factor_token`, must not be `None`")
        if sms_factor_token is not None and len(sms_factor_token) > 1000:
            raise ValueError("Invalid value for `sms_factor_token`, length must be less than or equal to `1000`")

        self._sms_factor_token = sms_factor_token

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportSmsFactorPut.

        The name of the transport.

        :return: The transport_name of this TransportSmsFactorPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportSmsFactorPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportSmsFactorPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
