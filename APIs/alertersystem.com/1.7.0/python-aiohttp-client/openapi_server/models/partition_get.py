# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartitionGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_services: List[str]=None, created_at: datetime=None, data_segment_code: str=None, id: str=None, monitors: List[str]=None, partition_name: str=None, partition_notes: str=None, resource_owner: str=None, team_invitations: List[str]=None, team_members: List[str]=None):
        """PartitionGet - a model defined in OpenAPI

        :param alert_services: The alert_services of this PartitionGet.
        :param created_at: The created_at of this PartitionGet.
        :param data_segment_code: The data_segment_code of this PartitionGet.
        :param id: The id of this PartitionGet.
        :param monitors: The monitors of this PartitionGet.
        :param partition_name: The partition_name of this PartitionGet.
        :param partition_notes: The partition_notes of this PartitionGet.
        :param resource_owner: The resource_owner of this PartitionGet.
        :param team_invitations: The team_invitations of this PartitionGet.
        :param team_members: The team_members of this PartitionGet.
        """
        self.openapi_types = {
            'alert_services': List[str],
            'created_at': datetime,
            'data_segment_code': str,
            'id': str,
            'monitors': List[str],
            'partition_name': str,
            'partition_notes': str,
            'resource_owner': str,
            'team_invitations': List[str],
            'team_members': List[str]
        }

        self.attribute_map = {
            'alert_services': 'alertServices',
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'id': 'id',
            'monitors': 'monitors',
            'partition_name': 'partitionName',
            'partition_notes': 'partitionNotes',
            'resource_owner': 'resourceOwner',
            'team_invitations': 'teamInvitations',
            'team_members': 'teamMembers'
        }

        self._alert_services = alert_services
        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._id = id
        self._monitors = monitors
        self._partition_name = partition_name
        self._partition_notes = partition_notes
        self._resource_owner = resource_owner
        self._team_invitations = team_invitations
        self._team_members = team_members

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partition-get of this PartitionGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_services(self):
        """Gets the alert_services of this PartitionGet.

        The alert services that are related to this resource.

        :return: The alert_services of this PartitionGet.
        :rtype: List[str]
        """
        return self._alert_services

    @alert_services.setter
    def alert_services(self, alert_services):
        """Sets the alert_services of this PartitionGet.

        The alert services that are related to this resource.

        :param alert_services: The alert_services of this PartitionGet.
        :type alert_services: List[str]
        """

        self._alert_services = alert_services

    @property
    def created_at(self):
        """Gets the created_at of this PartitionGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this PartitionGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PartitionGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this PartitionGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this PartitionGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this PartitionGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this PartitionGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this PartitionGet.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def id(self):
        """Gets the id of this PartitionGet.

        The unique identifier of the resource instance.

        :return: The id of this PartitionGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartitionGet.

        The unique identifier of the resource instance.

        :param id: The id of this PartitionGet.
        :type id: str
        """

        self._id = id

    @property
    def monitors(self):
        """Gets the monitors of this PartitionGet.

        The monitors that are associated with this partition.

        :return: The monitors of this PartitionGet.
        :rtype: List[str]
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors):
        """Sets the monitors of this PartitionGet.

        The monitors that are associated with this partition.

        :param monitors: The monitors of this PartitionGet.
        :type monitors: List[str]
        """

        self._monitors = monitors

    @property
    def partition_name(self):
        """Gets the partition_name of this PartitionGet.

        The name of the partition. Max 255 characters.

        :return: The partition_name of this PartitionGet.
        :rtype: str
        """
        return self._partition_name

    @partition_name.setter
    def partition_name(self, partition_name):
        """Sets the partition_name of this PartitionGet.

        The name of the partition. Max 255 characters.

        :param partition_name: The partition_name of this PartitionGet.
        :type partition_name: str
        """
        if partition_name is None:
            raise ValueError("Invalid value for `partition_name`, must not be `None`")
        if partition_name is not None and len(partition_name) > 255:
            raise ValueError("Invalid value for `partition_name`, length must be less than or equal to `255`")

        self._partition_name = partition_name

    @property
    def partition_notes(self):
        """Gets the partition_notes of this PartitionGet.

        Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :return: The partition_notes of this PartitionGet.
        :rtype: str
        """
        return self._partition_notes

    @partition_notes.setter
    def partition_notes(self, partition_notes):
        """Sets the partition_notes of this PartitionGet.

        Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :param partition_notes: The partition_notes of this PartitionGet.
        :type partition_notes: str
        """
        if partition_notes is not None and len(partition_notes) > 10000:
            raise ValueError("Invalid value for `partition_notes`, length must be less than or equal to `10000`")

        self._partition_notes = partition_notes

    @property
    def resource_owner(self):
        """Gets the resource_owner of this PartitionGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this PartitionGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this PartitionGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this PartitionGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner

    @property
    def team_invitations(self):
        """Gets the team_invitations of this PartitionGet.

        The team invitations that are related to this resource.

        :return: The team_invitations of this PartitionGet.
        :rtype: List[str]
        """
        return self._team_invitations

    @team_invitations.setter
    def team_invitations(self, team_invitations):
        """Sets the team_invitations of this PartitionGet.

        The team invitations that are related to this resource.

        :param team_invitations: The team_invitations of this PartitionGet.
        :type team_invitations: List[str]
        """

        self._team_invitations = team_invitations

    @property
    def team_members(self):
        """Gets the team_members of this PartitionGet.

        The team members of this resource.

        :return: The team_members of this PartitionGet.
        :rtype: List[str]
        """
        return self._team_members

    @team_members.setter
    def team_members(self, team_members):
        """Sets the team_members of this PartitionGet.

        The team members of this resource.

        :param team_members: The team_members of this PartitionGet.
        :type team_members: List[str]
        """

        self._team_members = team_members
