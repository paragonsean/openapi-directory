# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportWebhookPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, http_method_code: str=None, must_be_encrypted_value: str=None, partition: str=None, transport_name: str=None, webhook_headers: List[str]=None, webhook_url: str=None):
        """TransportWebhookPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportWebhookPost.
        :param http_method_code: The http_method_code of this TransportWebhookPost.
        :param must_be_encrypted_value: The must_be_encrypted_value of this TransportWebhookPost.
        :param partition: The partition of this TransportWebhookPost.
        :param transport_name: The transport_name of this TransportWebhookPost.
        :param webhook_headers: The webhook_headers of this TransportWebhookPost.
        :param webhook_url: The webhook_url of this TransportWebhookPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'http_method_code': str,
            'must_be_encrypted_value': str,
            'partition': str,
            'transport_name': str,
            'webhook_headers': List[str],
            'webhook_url': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'http_method_code': 'httpMethodCode',
            'must_be_encrypted_value': 'mustBeEncryptedValue',
            'partition': 'partition',
            'transport_name': 'transportName',
            'webhook_headers': 'webhookHeaders',
            'webhook_url': 'webhookUrl'
        }

        self._data_segment_code = data_segment_code
        self._http_method_code = http_method_code
        self._must_be_encrypted_value = must_be_encrypted_value
        self._partition = partition
        self._transport_name = transport_name
        self._webhook_headers = webhook_headers
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportWebhookPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportWebhook-post of this TransportWebhookPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportWebhookPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportWebhookPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportWebhookPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportWebhookPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def http_method_code(self):
        """Gets the http_method_code of this TransportWebhookPost.

        The HTTP request method that must be used.

        :return: The http_method_code of this TransportWebhookPost.
        :rtype: str
        """
        return self._http_method_code

    @http_method_code.setter
    def http_method_code(self, http_method_code):
        """Sets the http_method_code of this TransportWebhookPost.

        The HTTP request method that must be used.

        :param http_method_code: The http_method_code of this TransportWebhookPost.
        :type http_method_code: str
        """
        if http_method_code is None:
            raise ValueError("Invalid value for `http_method_code`, must not be `None`")

        self._http_method_code = http_method_code

    @property
    def must_be_encrypted_value(self):
        """Gets the must_be_encrypted_value of this TransportWebhookPost.

        An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.

        :return: The must_be_encrypted_value of this TransportWebhookPost.
        :rtype: str
        """
        return self._must_be_encrypted_value

    @must_be_encrypted_value.setter
    def must_be_encrypted_value(self, must_be_encrypted_value):
        """Sets the must_be_encrypted_value of this TransportWebhookPost.

        An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.

        :param must_be_encrypted_value: The must_be_encrypted_value of this TransportWebhookPost.
        :type must_be_encrypted_value: str
        """
        if must_be_encrypted_value is not None and len(must_be_encrypted_value) > 1000:
            raise ValueError("Invalid value for `must_be_encrypted_value`, length must be less than or equal to `1000`")

        self._must_be_encrypted_value = must_be_encrypted_value

    @property
    def partition(self):
        """Gets the partition of this TransportWebhookPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportWebhookPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportWebhookPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportWebhookPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportWebhookPost.

        The name of the transport.

        :return: The transport_name of this TransportWebhookPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportWebhookPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportWebhookPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name

    @property
    def webhook_headers(self):
        """Gets the webhook_headers of this TransportWebhookPost.

        The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.

        :return: The webhook_headers of this TransportWebhookPost.
        :rtype: List[str]
        """
        return self._webhook_headers

    @webhook_headers.setter
    def webhook_headers(self, webhook_headers):
        """Sets the webhook_headers of this TransportWebhookPost.

        The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.

        :param webhook_headers: The webhook_headers of this TransportWebhookPost.
        :type webhook_headers: List[str]
        """

        self._webhook_headers = webhook_headers

    @property
    def webhook_url(self):
        """Gets the webhook_url of this TransportWebhookPost.

        The URL for the Webhook service.

        :return: The webhook_url of this TransportWebhookPost.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this TransportWebhookPost.

        The URL for the Webhook service.

        :param webhook_url: The webhook_url of this TransportWebhookPost.
        :type webhook_url: str
        """
        if webhook_url is None:
            raise ValueError("Invalid value for `webhook_url`, must not be `None`")
        if webhook_url is not None and len(webhook_url) > 1000:
            raise ValueError("Invalid value for `webhook_url`, length must be less than or equal to `1000`")

        self._webhook_url = webhook_url
