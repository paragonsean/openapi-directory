# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportSmscPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, partition: str=None, smsc_from: str=None, smsc_login: str=None, smsc_password: str=None, transport_name: str=None):
        """TransportSmscPost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportSmscPost.
        :param partition: The partition of this TransportSmscPost.
        :param smsc_from: The smsc_from of this TransportSmscPost.
        :param smsc_login: The smsc_login of this TransportSmscPost.
        :param smsc_password: The smsc_password of this TransportSmscPost.
        :param transport_name: The transport_name of this TransportSmscPost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'partition': str,
            'smsc_from': str,
            'smsc_login': str,
            'smsc_password': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'partition': 'partition',
            'smsc_from': 'smscFrom',
            'smsc_login': 'smscLogin',
            'smsc_password': 'smscPassword',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._partition = partition
        self._smsc_from = smsc_from
        self._smsc_login = smsc_login
        self._smsc_password = smsc_password
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportSmscPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportSmsc-post of this TransportSmscPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportSmscPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportSmscPost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportSmscPost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportSmscPost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def partition(self):
        """Gets the partition of this TransportSmscPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportSmscPost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportSmscPost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportSmscPost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def smsc_from(self):
        """Gets the smsc_from of this TransportSmscPost.

        The sender (NB: text identity, not a phone number) for the Smsc service.

        :return: The smsc_from of this TransportSmscPost.
        :rtype: str
        """
        return self._smsc_from

    @smsc_from.setter
    def smsc_from(self, smsc_from):
        """Sets the smsc_from of this TransportSmscPost.

        The sender (NB: text identity, not a phone number) for the Smsc service.

        :param smsc_from: The smsc_from of this TransportSmscPost.
        :type smsc_from: str
        """
        if smsc_from is None:
            raise ValueError("Invalid value for `smsc_from`, must not be `None`")
        if smsc_from is not None and len(smsc_from) > 255:
            raise ValueError("Invalid value for `smsc_from`, length must be less than or equal to `255`")

        self._smsc_from = smsc_from

    @property
    def smsc_login(self):
        """Gets the smsc_login of this TransportSmscPost.

        The login for the Smsc service.

        :return: The smsc_login of this TransportSmscPost.
        :rtype: str
        """
        return self._smsc_login

    @smsc_login.setter
    def smsc_login(self, smsc_login):
        """Sets the smsc_login of this TransportSmscPost.

        The login for the Smsc service.

        :param smsc_login: The smsc_login of this TransportSmscPost.
        :type smsc_login: str
        """
        if smsc_login is None:
            raise ValueError("Invalid value for `smsc_login`, must not be `None`")
        if smsc_login is not None and len(smsc_login) > 255:
            raise ValueError("Invalid value for `smsc_login`, length must be less than or equal to `255`")

        self._smsc_login = smsc_login

    @property
    def smsc_password(self):
        """Gets the smsc_password of this TransportSmscPost.

        The API password for the Smsc service. Stored in encrypted format.

        :return: The smsc_password of this TransportSmscPost.
        :rtype: str
        """
        return self._smsc_password

    @smsc_password.setter
    def smsc_password(self, smsc_password):
        """Sets the smsc_password of this TransportSmscPost.

        The API password for the Smsc service. Stored in encrypted format.

        :param smsc_password: The smsc_password of this TransportSmscPost.
        :type smsc_password: str
        """
        if smsc_password is None:
            raise ValueError("Invalid value for `smsc_password`, must not be `None`")
        if smsc_password is not None and len(smsc_password) > 1000:
            raise ValueError("Invalid value for `smsc_password`, length must be less than or equal to `1000`")

        self._smsc_password = smsc_password

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportSmscPost.

        The name of the transport.

        :return: The transport_name of this TransportSmscPost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportSmscPost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportSmscPost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
