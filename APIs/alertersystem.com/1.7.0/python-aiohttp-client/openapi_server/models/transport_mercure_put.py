# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportMercurePut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, mercure_hub_jwt_token: str=None, mercure_hub_url: str=None, mercure_topic: str=None, transport_name: str=None):
        """TransportMercurePut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportMercurePut.
        :param mercure_hub_jwt_token: The mercure_hub_jwt_token of this TransportMercurePut.
        :param mercure_hub_url: The mercure_hub_url of this TransportMercurePut.
        :param mercure_topic: The mercure_topic of this TransportMercurePut.
        :param transport_name: The transport_name of this TransportMercurePut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'mercure_hub_jwt_token': str,
            'mercure_hub_url': str,
            'mercure_topic': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'mercure_hub_jwt_token': 'mercureHubJwtToken',
            'mercure_hub_url': 'mercureHubUrl',
            'mercure_topic': 'mercureTopic',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._mercure_hub_jwt_token = mercure_hub_jwt_token
        self._mercure_hub_url = mercure_hub_url
        self._mercure_topic = mercure_topic
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportMercurePut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportMercure-put of this TransportMercurePut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportMercurePut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportMercurePut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportMercurePut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportMercurePut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def mercure_hub_jwt_token(self):
        """Gets the mercure_hub_jwt_token of this TransportMercurePut.

        The JWT token for the hub for the Mercure service. Stored in encrypted format.

        :return: The mercure_hub_jwt_token of this TransportMercurePut.
        :rtype: str
        """
        return self._mercure_hub_jwt_token

    @mercure_hub_jwt_token.setter
    def mercure_hub_jwt_token(self, mercure_hub_jwt_token):
        """Sets the mercure_hub_jwt_token of this TransportMercurePut.

        The JWT token for the hub for the Mercure service. Stored in encrypted format.

        :param mercure_hub_jwt_token: The mercure_hub_jwt_token of this TransportMercurePut.
        :type mercure_hub_jwt_token: str
        """
        if mercure_hub_jwt_token is None:
            raise ValueError("Invalid value for `mercure_hub_jwt_token`, must not be `None`")
        if mercure_hub_jwt_token is not None and len(mercure_hub_jwt_token) > 1000:
            raise ValueError("Invalid value for `mercure_hub_jwt_token`, length must be less than or equal to `1000`")

        self._mercure_hub_jwt_token = mercure_hub_jwt_token

    @property
    def mercure_hub_url(self):
        """Gets the mercure_hub_url of this TransportMercurePut.

        The URL for the hub for the Mercure service.

        :return: The mercure_hub_url of this TransportMercurePut.
        :rtype: str
        """
        return self._mercure_hub_url

    @mercure_hub_url.setter
    def mercure_hub_url(self, mercure_hub_url):
        """Sets the mercure_hub_url of this TransportMercurePut.

        The URL for the hub for the Mercure service.

        :param mercure_hub_url: The mercure_hub_url of this TransportMercurePut.
        :type mercure_hub_url: str
        """
        if mercure_hub_url is not None and len(mercure_hub_url) > 255:
            raise ValueError("Invalid value for `mercure_hub_url`, length must be less than or equal to `255`")

        self._mercure_hub_url = mercure_hub_url

    @property
    def mercure_topic(self):
        """Gets the mercure_topic of this TransportMercurePut.

        The optional topic for the Mercure service.

        :return: The mercure_topic of this TransportMercurePut.
        :rtype: str
        """
        return self._mercure_topic

    @mercure_topic.setter
    def mercure_topic(self, mercure_topic):
        """Sets the mercure_topic of this TransportMercurePut.

        The optional topic for the Mercure service.

        :param mercure_topic: The mercure_topic of this TransportMercurePut.
        :type mercure_topic: str
        """
        if mercure_topic is not None and len(mercure_topic) > 255:
            raise ValueError("Invalid value for `mercure_topic`, length must be less than or equal to `255`")

        self._mercure_topic = mercure_topic

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportMercurePut.

        The name of the transport.

        :return: The transport_name of this TransportMercurePut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportMercurePut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportMercurePut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
