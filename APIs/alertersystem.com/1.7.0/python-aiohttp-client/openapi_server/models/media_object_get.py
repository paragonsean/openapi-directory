# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediaObjectGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_url: str=None, created_at: datetime=None, data_segment_code: str=None, file_size: int=None, id: str=None, keywords: str=None, mime_type: str=None, original_name: str=None, partition: str=None, resource_owner: str=None):
        """MediaObjectGet - a model defined in OpenAPI

        :param content_url: The content_url of this MediaObjectGet.
        :param created_at: The created_at of this MediaObjectGet.
        :param data_segment_code: The data_segment_code of this MediaObjectGet.
        :param file_size: The file_size of this MediaObjectGet.
        :param id: The id of this MediaObjectGet.
        :param keywords: The keywords of this MediaObjectGet.
        :param mime_type: The mime_type of this MediaObjectGet.
        :param original_name: The original_name of this MediaObjectGet.
        :param partition: The partition of this MediaObjectGet.
        :param resource_owner: The resource_owner of this MediaObjectGet.
        """
        self.openapi_types = {
            'content_url': str,
            'created_at': datetime,
            'data_segment_code': str,
            'file_size': int,
            'id': str,
            'keywords': str,
            'mime_type': str,
            'original_name': str,
            'partition': str,
            'resource_owner': str
        }

        self.attribute_map = {
            'content_url': 'contentUrl',
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'file_size': 'fileSize',
            'id': 'id',
            'keywords': 'keywords',
            'mime_type': 'mimeType',
            'original_name': 'originalName',
            'partition': 'partition',
            'resource_owner': 'resourceOwner'
        }

        self._content_url = content_url
        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._file_size = file_size
        self._id = id
        self._keywords = keywords
        self._mime_type = mime_type
        self._original_name = original_name
        self._partition = partition
        self._resource_owner = resource_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaObjectGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaObject-get of this MediaObjectGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_url(self):
        """Gets the content_url of this MediaObjectGet.

        Where the media file can be accessed.

        :return: The content_url of this MediaObjectGet.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this MediaObjectGet.

        Where the media file can be accessed.

        :param content_url: The content_url of this MediaObjectGet.
        :type content_url: str
        """

        self._content_url = content_url

    @property
    def created_at(self):
        """Gets the created_at of this MediaObjectGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this MediaObjectGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MediaObjectGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this MediaObjectGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this MediaObjectGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this MediaObjectGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this MediaObjectGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this MediaObjectGet.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def file_size(self):
        """Gets the file_size of this MediaObjectGet.

        The size of the media file.

        :return: The file_size of this MediaObjectGet.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this MediaObjectGet.

        The size of the media file.

        :param file_size: The file_size of this MediaObjectGet.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def id(self):
        """Gets the id of this MediaObjectGet.

        The unique identifier of the resource instance.

        :return: The id of this MediaObjectGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediaObjectGet.

        The unique identifier of the resource instance.

        :param id: The id of this MediaObjectGet.
        :type id: str
        """

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this MediaObjectGet.

        A string of keywords that can be used to search for a resource. Max 100 characters.

        :return: The keywords of this MediaObjectGet.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this MediaObjectGet.

        A string of keywords that can be used to search for a resource. Max 100 characters.

        :param keywords: The keywords of this MediaObjectGet.
        :type keywords: str
        """
        if keywords is not None and len(keywords) > 100:
            raise ValueError("Invalid value for `keywords`, length must be less than or equal to `100`")

        self._keywords = keywords

    @property
    def mime_type(self):
        """Gets the mime_type of this MediaObjectGet.

        The mime type of the media file.

        :return: The mime_type of this MediaObjectGet.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MediaObjectGet.

        The mime type of the media file.

        :param mime_type: The mime_type of this MediaObjectGet.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def original_name(self):
        """Gets the original_name of this MediaObjectGet.

        The original name of the media file.

        :return: The original_name of this MediaObjectGet.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this MediaObjectGet.

        The original name of the media file.

        :param original_name: The original_name of this MediaObjectGet.
        :type original_name: str
        """

        self._original_name = original_name

    @property
    def partition(self):
        """Gets the partition of this MediaObjectGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this MediaObjectGet.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this MediaObjectGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this MediaObjectGet.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def resource_owner(self):
        """Gets the resource_owner of this MediaObjectGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this MediaObjectGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this MediaObjectGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this MediaObjectGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner
