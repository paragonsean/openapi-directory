# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportSendinbluePost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, partition: str=None, sendinblue_api_key: str=None, sendinblue_sender_phone: str=None, transport_name: str=None):
        """TransportSendinbluePost - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportSendinbluePost.
        :param partition: The partition of this TransportSendinbluePost.
        :param sendinblue_api_key: The sendinblue_api_key of this TransportSendinbluePost.
        :param sendinblue_sender_phone: The sendinblue_sender_phone of this TransportSendinbluePost.
        :param transport_name: The transport_name of this TransportSendinbluePost.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'partition': str,
            'sendinblue_api_key': str,
            'sendinblue_sender_phone': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'partition': 'partition',
            'sendinblue_api_key': 'sendinblueApiKey',
            'sendinblue_sender_phone': 'sendinblueSenderPhone',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._partition = partition
        self._sendinblue_api_key = sendinblue_api_key
        self._sendinblue_sender_phone = sendinblue_sender_phone
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportSendinbluePost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportSendinblue-post of this TransportSendinbluePost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportSendinbluePost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportSendinbluePost.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportSendinbluePost.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportSendinbluePost.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def partition(self):
        """Gets the partition of this TransportSendinbluePost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportSendinbluePost.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportSendinbluePost.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportSendinbluePost.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def sendinblue_api_key(self):
        """Gets the sendinblue_api_key of this TransportSendinbluePost.

        The API key for the Sendinblue service. Stored in encrypted format.

        :return: The sendinblue_api_key of this TransportSendinbluePost.
        :rtype: str
        """
        return self._sendinblue_api_key

    @sendinblue_api_key.setter
    def sendinblue_api_key(self, sendinblue_api_key):
        """Sets the sendinblue_api_key of this TransportSendinbluePost.

        The API key for the Sendinblue service. Stored in encrypted format.

        :param sendinblue_api_key: The sendinblue_api_key of this TransportSendinbluePost.
        :type sendinblue_api_key: str
        """
        if sendinblue_api_key is None:
            raise ValueError("Invalid value for `sendinblue_api_key`, must not be `None`")
        if sendinblue_api_key is not None and len(sendinblue_api_key) > 1000:
            raise ValueError("Invalid value for `sendinblue_api_key`, length must be less than or equal to `1000`")

        self._sendinblue_api_key = sendinblue_api_key

    @property
    def sendinblue_sender_phone(self):
        """Gets the sendinblue_sender_phone of this TransportSendinbluePost.

        The sender phone number for the Sendinblue service.

        :return: The sendinblue_sender_phone of this TransportSendinbluePost.
        :rtype: str
        """
        return self._sendinblue_sender_phone

    @sendinblue_sender_phone.setter
    def sendinblue_sender_phone(self, sendinblue_sender_phone):
        """Sets the sendinblue_sender_phone of this TransportSendinbluePost.

        The sender phone number for the Sendinblue service.

        :param sendinblue_sender_phone: The sendinblue_sender_phone of this TransportSendinbluePost.
        :type sendinblue_sender_phone: str
        """
        if sendinblue_sender_phone is None:
            raise ValueError("Invalid value for `sendinblue_sender_phone`, must not be `None`")
        if sendinblue_sender_phone is not None and len(sendinblue_sender_phone) > 255:
            raise ValueError("Invalid value for `sendinblue_sender_phone`, length must be less than or equal to `255`")

        self._sendinblue_sender_phone = sendinblue_sender_phone

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportSendinbluePost.

        The name of the transport.

        :return: The transport_name of this TransportSendinbluePost.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportSendinbluePost.

        The name of the transport.

        :param transport_name: The transport_name of this TransportSendinbluePost.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
