# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_payload_extended: str=None, alert_payload_short: str=None, alert_services: List[str]=None, allow_unauthenticated_pings: bool=None, content_check_must_not_exist: bool=None, content_check_text: str=None, content_check_url: str=None, content_check_xpath_filter: str=None, data_segment_code: str=None, grace_seconds: int=None, interval_days: int=None, interval_hours: int=None, interval_minutes: int=None, interval_months: int=None, interval_seconds: int=None, interval_years: int=None, is_monitor_paused: bool=None, monitor_name: str=None, monitor_notes: str=None, public_description: str=None, start_monitor_at: datetime=None, timezone_code: str=None, web_response_seconds_limit: int=None, web_response_url: str=None):
        """MonitorPatch - a model defined in OpenAPI

        :param alert_payload_extended: The alert_payload_extended of this MonitorPatch.
        :param alert_payload_short: The alert_payload_short of this MonitorPatch.
        :param alert_services: The alert_services of this MonitorPatch.
        :param allow_unauthenticated_pings: The allow_unauthenticated_pings of this MonitorPatch.
        :param content_check_must_not_exist: The content_check_must_not_exist of this MonitorPatch.
        :param content_check_text: The content_check_text of this MonitorPatch.
        :param content_check_url: The content_check_url of this MonitorPatch.
        :param content_check_xpath_filter: The content_check_xpath_filter of this MonitorPatch.
        :param data_segment_code: The data_segment_code of this MonitorPatch.
        :param grace_seconds: The grace_seconds of this MonitorPatch.
        :param interval_days: The interval_days of this MonitorPatch.
        :param interval_hours: The interval_hours of this MonitorPatch.
        :param interval_minutes: The interval_minutes of this MonitorPatch.
        :param interval_months: The interval_months of this MonitorPatch.
        :param interval_seconds: The interval_seconds of this MonitorPatch.
        :param interval_years: The interval_years of this MonitorPatch.
        :param is_monitor_paused: The is_monitor_paused of this MonitorPatch.
        :param monitor_name: The monitor_name of this MonitorPatch.
        :param monitor_notes: The monitor_notes of this MonitorPatch.
        :param public_description: The public_description of this MonitorPatch.
        :param start_monitor_at: The start_monitor_at of this MonitorPatch.
        :param timezone_code: The timezone_code of this MonitorPatch.
        :param web_response_seconds_limit: The web_response_seconds_limit of this MonitorPatch.
        :param web_response_url: The web_response_url of this MonitorPatch.
        """
        self.openapi_types = {
            'alert_payload_extended': str,
            'alert_payload_short': str,
            'alert_services': List[str],
            'allow_unauthenticated_pings': bool,
            'content_check_must_not_exist': bool,
            'content_check_text': str,
            'content_check_url': str,
            'content_check_xpath_filter': str,
            'data_segment_code': str,
            'grace_seconds': int,
            'interval_days': int,
            'interval_hours': int,
            'interval_minutes': int,
            'interval_months': int,
            'interval_seconds': int,
            'interval_years': int,
            'is_monitor_paused': bool,
            'monitor_name': str,
            'monitor_notes': str,
            'public_description': str,
            'start_monitor_at': datetime,
            'timezone_code': str,
            'web_response_seconds_limit': int,
            'web_response_url': str
        }

        self.attribute_map = {
            'alert_payload_extended': 'alertPayloadExtended',
            'alert_payload_short': 'alertPayloadShort',
            'alert_services': 'alertServices',
            'allow_unauthenticated_pings': 'allowUnauthenticatedPings',
            'content_check_must_not_exist': 'contentCheckMustNotExist',
            'content_check_text': 'contentCheckText',
            'content_check_url': 'contentCheckUrl',
            'content_check_xpath_filter': 'contentCheckXpathFilter',
            'data_segment_code': 'dataSegmentCode',
            'grace_seconds': 'graceSeconds',
            'interval_days': 'intervalDays',
            'interval_hours': 'intervalHours',
            'interval_minutes': 'intervalMinutes',
            'interval_months': 'intervalMonths',
            'interval_seconds': 'intervalSeconds',
            'interval_years': 'intervalYears',
            'is_monitor_paused': 'isMonitorPaused',
            'monitor_name': 'monitorName',
            'monitor_notes': 'monitorNotes',
            'public_description': 'publicDescription',
            'start_monitor_at': 'startMonitorAt',
            'timezone_code': 'timezoneCode',
            'web_response_seconds_limit': 'webResponseSecondsLimit',
            'web_response_url': 'webResponseUrl'
        }

        self._alert_payload_extended = alert_payload_extended
        self._alert_payload_short = alert_payload_short
        self._alert_services = alert_services
        self._allow_unauthenticated_pings = allow_unauthenticated_pings
        self._content_check_must_not_exist = content_check_must_not_exist
        self._content_check_text = content_check_text
        self._content_check_url = content_check_url
        self._content_check_xpath_filter = content_check_xpath_filter
        self._data_segment_code = data_segment_code
        self._grace_seconds = grace_seconds
        self._interval_days = interval_days
        self._interval_hours = interval_hours
        self._interval_minutes = interval_minutes
        self._interval_months = interval_months
        self._interval_seconds = interval_seconds
        self._interval_years = interval_years
        self._is_monitor_paused = is_monitor_paused
        self._monitor_name = monitor_name
        self._monitor_notes = monitor_notes
        self._public_description = public_description
        self._start_monitor_at = start_monitor_at
        self._timezone_code = timezone_code
        self._web_response_seconds_limit = web_response_seconds_limit
        self._web_response_url = web_response_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Monitor-patch of this MonitorPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_payload_extended(self):
        """Gets the alert_payload_extended of this MonitorPatch.

        Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.

        :return: The alert_payload_extended of this MonitorPatch.
        :rtype: str
        """
        return self._alert_payload_extended

    @alert_payload_extended.setter
    def alert_payload_extended(self, alert_payload_extended):
        """Sets the alert_payload_extended of this MonitorPatch.

        Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.

        :param alert_payload_extended: The alert_payload_extended of this MonitorPatch.
        :type alert_payload_extended: str
        """
        if alert_payload_extended is not None and len(alert_payload_extended) > 2100000:
            raise ValueError("Invalid value for `alert_payload_extended`, length must be less than or equal to `2100000`")

        self._alert_payload_extended = alert_payload_extended

    @property
    def alert_payload_short(self):
        """Gets the alert_payload_short of this MonitorPatch.

        Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.

        :return: The alert_payload_short of this MonitorPatch.
        :rtype: str
        """
        return self._alert_payload_short

    @alert_payload_short.setter
    def alert_payload_short(self, alert_payload_short):
        """Sets the alert_payload_short of this MonitorPatch.

        Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.

        :param alert_payload_short: The alert_payload_short of this MonitorPatch.
        :type alert_payload_short: str
        """
        if alert_payload_short is not None and len(alert_payload_short) > 100:
            raise ValueError("Invalid value for `alert_payload_short`, length must be less than or equal to `100`")

        self._alert_payload_short = alert_payload_short

    @property
    def alert_services(self):
        """Gets the alert_services of this MonitorPatch.

        The alert services that are related to this resource.

        :return: The alert_services of this MonitorPatch.
        :rtype: List[str]
        """
        return self._alert_services

    @alert_services.setter
    def alert_services(self, alert_services):
        """Sets the alert_services of this MonitorPatch.

        The alert services that are related to this resource.

        :param alert_services: The alert_services of this MonitorPatch.
        :type alert_services: List[str]
        """

        self._alert_services = alert_services

    @property
    def allow_unauthenticated_pings(self):
        """Gets the allow_unauthenticated_pings of this MonitorPatch.

        Indicates that the monitor will accept pings that are not OAuth authenticated.

        :return: The allow_unauthenticated_pings of this MonitorPatch.
        :rtype: bool
        """
        return self._allow_unauthenticated_pings

    @allow_unauthenticated_pings.setter
    def allow_unauthenticated_pings(self, allow_unauthenticated_pings):
        """Sets the allow_unauthenticated_pings of this MonitorPatch.

        Indicates that the monitor will accept pings that are not OAuth authenticated.

        :param allow_unauthenticated_pings: The allow_unauthenticated_pings of this MonitorPatch.
        :type allow_unauthenticated_pings: bool
        """

        self._allow_unauthenticated_pings = allow_unauthenticated_pings

    @property
    def content_check_must_not_exist(self):
        """Gets the content_check_must_not_exist of this MonitorPatch.

        Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.

        :return: The content_check_must_not_exist of this MonitorPatch.
        :rtype: bool
        """
        return self._content_check_must_not_exist

    @content_check_must_not_exist.setter
    def content_check_must_not_exist(self, content_check_must_not_exist):
        """Sets the content_check_must_not_exist of this MonitorPatch.

        Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.

        :param content_check_must_not_exist: The content_check_must_not_exist of this MonitorPatch.
        :type content_check_must_not_exist: bool
        """

        self._content_check_must_not_exist = content_check_must_not_exist

    @property
    def content_check_text(self):
        """Gets the content_check_text of this MonitorPatch.

        The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.

        :return: The content_check_text of this MonitorPatch.
        :rtype: str
        """
        return self._content_check_text

    @content_check_text.setter
    def content_check_text(self, content_check_text):
        """Sets the content_check_text of this MonitorPatch.

        The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.

        :param content_check_text: The content_check_text of this MonitorPatch.
        :type content_check_text: str
        """

        self._content_check_text = content_check_text

    @property
    def content_check_url(self):
        """Gets the content_check_url of this MonitorPatch.

        The URL that the Web Content monitor type must evaluate for the specified conditions.

        :return: The content_check_url of this MonitorPatch.
        :rtype: str
        """
        return self._content_check_url

    @content_check_url.setter
    def content_check_url(self, content_check_url):
        """Sets the content_check_url of this MonitorPatch.

        The URL that the Web Content monitor type must evaluate for the specified conditions.

        :param content_check_url: The content_check_url of this MonitorPatch.
        :type content_check_url: str
        """

        self._content_check_url = content_check_url

    @property
    def content_check_xpath_filter(self):
        """Gets the content_check_xpath_filter of this MonitorPatch.

        The Xpath filter (<a href=\"https://en.wikipedia.org/wiki/XPath\">Xpath</a>, <a href=\"https://devhints.io/xpath\">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.

        :return: The content_check_xpath_filter of this MonitorPatch.
        :rtype: str
        """
        return self._content_check_xpath_filter

    @content_check_xpath_filter.setter
    def content_check_xpath_filter(self, content_check_xpath_filter):
        """Sets the content_check_xpath_filter of this MonitorPatch.

        The Xpath filter (<a href=\"https://en.wikipedia.org/wiki/XPath\">Xpath</a>, <a href=\"https://devhints.io/xpath\">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.

        :param content_check_xpath_filter: The content_check_xpath_filter of this MonitorPatch.
        :type content_check_xpath_filter: str
        """

        self._content_check_xpath_filter = content_check_xpath_filter

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this MonitorPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this MonitorPatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this MonitorPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this MonitorPatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def grace_seconds(self):
        """Gets the grace_seconds of this MonitorPatch.

        The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.

        :return: The grace_seconds of this MonitorPatch.
        :rtype: int
        """
        return self._grace_seconds

    @grace_seconds.setter
    def grace_seconds(self, grace_seconds):
        """Sets the grace_seconds of this MonitorPatch.

        The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.

        :param grace_seconds: The grace_seconds of this MonitorPatch.
        :type grace_seconds: int
        """

        self._grace_seconds = grace_seconds

    @property
    def interval_days(self):
        """Gets the interval_days of this MonitorPatch.

        The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_days of this MonitorPatch.
        :rtype: int
        """
        return self._interval_days

    @interval_days.setter
    def interval_days(self, interval_days):
        """Sets the interval_days of this MonitorPatch.

        The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_days: The interval_days of this MonitorPatch.
        :type interval_days: int
        """
        if interval_days is not None and interval_days < 0:
            raise ValueError("Invalid value for `interval_days`, must be a value greater than or equal to `0`")

        self._interval_days = interval_days

    @property
    def interval_hours(self):
        """Gets the interval_hours of this MonitorPatch.

        The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_hours of this MonitorPatch.
        :rtype: int
        """
        return self._interval_hours

    @interval_hours.setter
    def interval_hours(self, interval_hours):
        """Sets the interval_hours of this MonitorPatch.

        The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_hours: The interval_hours of this MonitorPatch.
        :type interval_hours: int
        """
        if interval_hours is not None and interval_hours < 0:
            raise ValueError("Invalid value for `interval_hours`, must be a value greater than or equal to `0`")

        self._interval_hours = interval_hours

    @property
    def interval_minutes(self):
        """Gets the interval_minutes of this MonitorPatch.

        The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_minutes of this MonitorPatch.
        :rtype: int
        """
        return self._interval_minutes

    @interval_minutes.setter
    def interval_minutes(self, interval_minutes):
        """Sets the interval_minutes of this MonitorPatch.

        The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_minutes: The interval_minutes of this MonitorPatch.
        :type interval_minutes: int
        """
        if interval_minutes is not None and interval_minutes < 0:
            raise ValueError("Invalid value for `interval_minutes`, must be a value greater than or equal to `0`")

        self._interval_minutes = interval_minutes

    @property
    def interval_months(self):
        """Gets the interval_months of this MonitorPatch.

        The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_months of this MonitorPatch.
        :rtype: int
        """
        return self._interval_months

    @interval_months.setter
    def interval_months(self, interval_months):
        """Sets the interval_months of this MonitorPatch.

        The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_months: The interval_months of this MonitorPatch.
        :type interval_months: int
        """
        if interval_months is not None and interval_months < 0:
            raise ValueError("Invalid value for `interval_months`, must be a value greater than or equal to `0`")

        self._interval_months = interval_months

    @property
    def interval_seconds(self):
        """Gets the interval_seconds of this MonitorPatch.

        The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_seconds of this MonitorPatch.
        :rtype: int
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds):
        """Sets the interval_seconds of this MonitorPatch.

        The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_seconds: The interval_seconds of this MonitorPatch.
        :type interval_seconds: int
        """
        if interval_seconds is not None and interval_seconds < 0:
            raise ValueError("Invalid value for `interval_seconds`, must be a value greater than or equal to `0`")

        self._interval_seconds = interval_seconds

    @property
    def interval_years(self):
        """Gets the interval_years of this MonitorPatch.

        The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_years of this MonitorPatch.
        :rtype: int
        """
        return self._interval_years

    @interval_years.setter
    def interval_years(self, interval_years):
        """Sets the interval_years of this MonitorPatch.

        The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_years: The interval_years of this MonitorPatch.
        :type interval_years: int
        """
        if interval_years is not None and interval_years < 0:
            raise ValueError("Invalid value for `interval_years`, must be a value greater than or equal to `0`")

        self._interval_years = interval_years

    @property
    def is_monitor_paused(self):
        """Gets the is_monitor_paused of this MonitorPatch.

        Indicates that the monitor is paused and will not send alerts.

        :return: The is_monitor_paused of this MonitorPatch.
        :rtype: bool
        """
        return self._is_monitor_paused

    @is_monitor_paused.setter
    def is_monitor_paused(self, is_monitor_paused):
        """Sets the is_monitor_paused of this MonitorPatch.

        Indicates that the monitor is paused and will not send alerts.

        :param is_monitor_paused: The is_monitor_paused of this MonitorPatch.
        :type is_monitor_paused: bool
        """

        self._is_monitor_paused = is_monitor_paused

    @property
    def monitor_name(self):
        """Gets the monitor_name of this MonitorPatch.

        The name of the monitor. Max 255 characters.

        :return: The monitor_name of this MonitorPatch.
        :rtype: str
        """
        return self._monitor_name

    @monitor_name.setter
    def monitor_name(self, monitor_name):
        """Sets the monitor_name of this MonitorPatch.

        The name of the monitor. Max 255 characters.

        :param monitor_name: The monitor_name of this MonitorPatch.
        :type monitor_name: str
        """
        if monitor_name is None:
            raise ValueError("Invalid value for `monitor_name`, must not be `None`")
        if monitor_name is not None and len(monitor_name) > 255:
            raise ValueError("Invalid value for `monitor_name`, length must be less than or equal to `255`")

        self._monitor_name = monitor_name

    @property
    def monitor_notes(self):
        """Gets the monitor_notes of this MonitorPatch.

        Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :return: The monitor_notes of this MonitorPatch.
        :rtype: str
        """
        return self._monitor_notes

    @monitor_notes.setter
    def monitor_notes(self, monitor_notes):
        """Sets the monitor_notes of this MonitorPatch.

        Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :param monitor_notes: The monitor_notes of this MonitorPatch.
        :type monitor_notes: str
        """
        if monitor_notes is not None and len(monitor_notes) > 10000:
            raise ValueError("Invalid value for `monitor_notes`, length must be less than or equal to `10000`")

        self._monitor_notes = monitor_notes

    @property
    def public_description(self):
        """Gets the public_description of this MonitorPatch.

        A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.

        :return: The public_description of this MonitorPatch.
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this MonitorPatch.

        A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.

        :param public_description: The public_description of this MonitorPatch.
        :type public_description: str
        """
        if public_description is not None and len(public_description) > 10000:
            raise ValueError("Invalid value for `public_description`, length must be less than or equal to `10000`")

        self._public_description = public_description

    @property
    def start_monitor_at(self):
        """Gets the start_monitor_at of this MonitorPatch.

        When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.

        :return: The start_monitor_at of this MonitorPatch.
        :rtype: datetime
        """
        return self._start_monitor_at

    @start_monitor_at.setter
    def start_monitor_at(self, start_monitor_at):
        """Sets the start_monitor_at of this MonitorPatch.

        When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.

        :param start_monitor_at: The start_monitor_at of this MonitorPatch.
        :type start_monitor_at: datetime
        """

        self._start_monitor_at = start_monitor_at

    @property
    def timezone_code(self):
        """Gets the timezone_code of this MonitorPatch.

        The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.

        :return: The timezone_code of this MonitorPatch.
        :rtype: str
        """
        return self._timezone_code

    @timezone_code.setter
    def timezone_code(self, timezone_code):
        """Sets the timezone_code of this MonitorPatch.

        The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.

        :param timezone_code: The timezone_code of this MonitorPatch.
        :type timezone_code: str
        """
        if timezone_code is None:
            raise ValueError("Invalid value for `timezone_code`, must not be `None`")

        self._timezone_code = timezone_code

    @property
    def web_response_seconds_limit(self):
        """Gets the web_response_seconds_limit of this MonitorPatch.

        The time in seconds that the Web Response monitor type must allow for the web page to respond.

        :return: The web_response_seconds_limit of this MonitorPatch.
        :rtype: int
        """
        return self._web_response_seconds_limit

    @web_response_seconds_limit.setter
    def web_response_seconds_limit(self, web_response_seconds_limit):
        """Sets the web_response_seconds_limit of this MonitorPatch.

        The time in seconds that the Web Response monitor type must allow for the web page to respond.

        :param web_response_seconds_limit: The web_response_seconds_limit of this MonitorPatch.
        :type web_response_seconds_limit: int
        """
        if web_response_seconds_limit is not None and web_response_seconds_limit < 0:
            raise ValueError("Invalid value for `web_response_seconds_limit`, must be a value greater than or equal to `0`")

        self._web_response_seconds_limit = web_response_seconds_limit

    @property
    def web_response_url(self):
        """Gets the web_response_url of this MonitorPatch.

        The URL that the Web Response monitor type must evaluate for the specified conditions.

        :return: The web_response_url of this MonitorPatch.
        :rtype: str
        """
        return self._web_response_url

    @web_response_url.setter
    def web_response_url(self, web_response_url):
        """Sets the web_response_url of this MonitorPatch.

        The URL that the Web Response monitor type must evaluate for the specified conditions.

        :param web_response_url: The web_response_url of this MonitorPatch.
        :type web_response_url: str
        """

        self._web_response_url = web_response_url
