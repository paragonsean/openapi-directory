# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportFreshdeskJsonldPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, freshdesk_api_key: str=None, freshdesk_email: str=None, freshdesk_host: str=None, freshdesk_priority: str=None, freshdesk_type: str=None, transport_name: str=None):
        """TransportFreshdeskJsonldPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportFreshdeskJsonldPut.
        :param freshdesk_api_key: The freshdesk_api_key of this TransportFreshdeskJsonldPut.
        :param freshdesk_email: The freshdesk_email of this TransportFreshdeskJsonldPut.
        :param freshdesk_host: The freshdesk_host of this TransportFreshdeskJsonldPut.
        :param freshdesk_priority: The freshdesk_priority of this TransportFreshdeskJsonldPut.
        :param freshdesk_type: The freshdesk_type of this TransportFreshdeskJsonldPut.
        :param transport_name: The transport_name of this TransportFreshdeskJsonldPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'freshdesk_api_key': str,
            'freshdesk_email': str,
            'freshdesk_host': str,
            'freshdesk_priority': str,
            'freshdesk_type': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'freshdesk_api_key': 'freshdeskApiKey',
            'freshdesk_email': 'freshdeskEmail',
            'freshdesk_host': 'freshdeskHost',
            'freshdesk_priority': 'freshdeskPriority',
            'freshdesk_type': 'freshdeskType',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._freshdesk_api_key = freshdesk_api_key
        self._freshdesk_email = freshdesk_email
        self._freshdesk_host = freshdesk_host
        self._freshdesk_priority = freshdesk_priority
        self._freshdesk_type = freshdesk_type
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportFreshdeskJsonldPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportFreshdesk.jsonld-put of this TransportFreshdeskJsonldPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportFreshdeskJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportFreshdeskJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportFreshdeskJsonldPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def freshdesk_api_key(self):
        """Gets the freshdesk_api_key of this TransportFreshdeskJsonldPut.

        The API key for the Freshdesk service. Stored in encrypted format.

        :return: The freshdesk_api_key of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._freshdesk_api_key

    @freshdesk_api_key.setter
    def freshdesk_api_key(self, freshdesk_api_key):
        """Sets the freshdesk_api_key of this TransportFreshdeskJsonldPut.

        The API key for the Freshdesk service. Stored in encrypted format.

        :param freshdesk_api_key: The freshdesk_api_key of this TransportFreshdeskJsonldPut.
        :type freshdesk_api_key: str
        """
        if freshdesk_api_key is None:
            raise ValueError("Invalid value for `freshdesk_api_key`, must not be `None`")
        if freshdesk_api_key is not None and len(freshdesk_api_key) > 1000:
            raise ValueError("Invalid value for `freshdesk_api_key`, length must be less than or equal to `1000`")

        self._freshdesk_api_key = freshdesk_api_key

    @property
    def freshdesk_email(self):
        """Gets the freshdesk_email of this TransportFreshdeskJsonldPut.

        The requester email address for the Freshdesk service.

        :return: The freshdesk_email of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._freshdesk_email

    @freshdesk_email.setter
    def freshdesk_email(self, freshdesk_email):
        """Sets the freshdesk_email of this TransportFreshdeskJsonldPut.

        The requester email address for the Freshdesk service.

        :param freshdesk_email: The freshdesk_email of this TransportFreshdeskJsonldPut.
        :type freshdesk_email: str
        """
        if freshdesk_email is None:
            raise ValueError("Invalid value for `freshdesk_email`, must not be `None`")
        if freshdesk_email is not None and len(freshdesk_email) > 255:
            raise ValueError("Invalid value for `freshdesk_email`, length must be less than or equal to `255`")

        self._freshdesk_email = freshdesk_email

    @property
    def freshdesk_host(self):
        """Gets the freshdesk_host of this TransportFreshdeskJsonldPut.

        The host name for the Freshdesk service (domain.freshdesk.com).

        :return: The freshdesk_host of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._freshdesk_host

    @freshdesk_host.setter
    def freshdesk_host(self, freshdesk_host):
        """Sets the freshdesk_host of this TransportFreshdeskJsonldPut.

        The host name for the Freshdesk service (domain.freshdesk.com).

        :param freshdesk_host: The freshdesk_host of this TransportFreshdeskJsonldPut.
        :type freshdesk_host: str
        """
        if freshdesk_host is None:
            raise ValueError("Invalid value for `freshdesk_host`, must not be `None`")
        if freshdesk_host is not None and len(freshdesk_host) > 255:
            raise ValueError("Invalid value for `freshdesk_host`, length must be less than or equal to `255`")

        self._freshdesk_host = freshdesk_host

    @property
    def freshdesk_priority(self):
        """Gets the freshdesk_priority of this TransportFreshdeskJsonldPut.

        The ticket priority for the Freshdesk service.

        :return: The freshdesk_priority of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._freshdesk_priority

    @freshdesk_priority.setter
    def freshdesk_priority(self, freshdesk_priority):
        """Sets the freshdesk_priority of this TransportFreshdeskJsonldPut.

        The ticket priority for the Freshdesk service.

        :param freshdesk_priority: The freshdesk_priority of this TransportFreshdeskJsonldPut.
        :type freshdesk_priority: str
        """

        self._freshdesk_priority = freshdesk_priority

    @property
    def freshdesk_type(self):
        """Gets the freshdesk_type of this TransportFreshdeskJsonldPut.

        The ticket type for the Freshdesk service.

        :return: The freshdesk_type of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._freshdesk_type

    @freshdesk_type.setter
    def freshdesk_type(self, freshdesk_type):
        """Sets the freshdesk_type of this TransportFreshdeskJsonldPut.

        The ticket type for the Freshdesk service.

        :param freshdesk_type: The freshdesk_type of this TransportFreshdeskJsonldPut.
        :type freshdesk_type: str
        """
        if freshdesk_type is not None and len(freshdesk_type) > 255:
            raise ValueError("Invalid value for `freshdesk_type`, length must be less than or equal to `255`")

        self._freshdesk_type = freshdesk_type

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportFreshdeskJsonldPut.

        The name of the transport.

        :return: The transport_name of this TransportFreshdeskJsonldPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportFreshdeskJsonldPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportFreshdeskJsonldPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
