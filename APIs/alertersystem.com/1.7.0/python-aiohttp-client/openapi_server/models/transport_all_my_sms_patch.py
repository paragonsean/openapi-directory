# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportAllMySmsPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_my_sms_api_key: str=None, all_my_sms_from: str=None, all_my_sms_login: str=None, data_segment_code: str=None, transport_name: str=None):
        """TransportAllMySmsPatch - a model defined in OpenAPI

        :param all_my_sms_api_key: The all_my_sms_api_key of this TransportAllMySmsPatch.
        :param all_my_sms_from: The all_my_sms_from of this TransportAllMySmsPatch.
        :param all_my_sms_login: The all_my_sms_login of this TransportAllMySmsPatch.
        :param data_segment_code: The data_segment_code of this TransportAllMySmsPatch.
        :param transport_name: The transport_name of this TransportAllMySmsPatch.
        """
        self.openapi_types = {
            'all_my_sms_api_key': str,
            'all_my_sms_from': str,
            'all_my_sms_login': str,
            'data_segment_code': str,
            'transport_name': str
        }

        self.attribute_map = {
            'all_my_sms_api_key': 'allMySmsApiKey',
            'all_my_sms_from': 'allMySmsFrom',
            'all_my_sms_login': 'allMySmsLogin',
            'data_segment_code': 'dataSegmentCode',
            'transport_name': 'transportName'
        }

        self._all_my_sms_api_key = all_my_sms_api_key
        self._all_my_sms_from = all_my_sms_from
        self._all_my_sms_login = all_my_sms_login
        self._data_segment_code = data_segment_code
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportAllMySmsPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportAllMySms-patch of this TransportAllMySmsPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_my_sms_api_key(self):
        """Gets the all_my_sms_api_key of this TransportAllMySmsPatch.

        The API key for the Allmysms service. Stored in encrypted format.

        :return: The all_my_sms_api_key of this TransportAllMySmsPatch.
        :rtype: str
        """
        return self._all_my_sms_api_key

    @all_my_sms_api_key.setter
    def all_my_sms_api_key(self, all_my_sms_api_key):
        """Sets the all_my_sms_api_key of this TransportAllMySmsPatch.

        The API key for the Allmysms service. Stored in encrypted format.

        :param all_my_sms_api_key: The all_my_sms_api_key of this TransportAllMySmsPatch.
        :type all_my_sms_api_key: str
        """
        if all_my_sms_api_key is None:
            raise ValueError("Invalid value for `all_my_sms_api_key`, must not be `None`")
        if all_my_sms_api_key is not None and len(all_my_sms_api_key) > 1000:
            raise ValueError("Invalid value for `all_my_sms_api_key`, length must be less than or equal to `1000`")

        self._all_my_sms_api_key = all_my_sms_api_key

    @property
    def all_my_sms_from(self):
        """Gets the all_my_sms_from of this TransportAllMySmsPatch.

        The sender value (default 36180) for the Allmysms service.

        :return: The all_my_sms_from of this TransportAllMySmsPatch.
        :rtype: str
        """
        return self._all_my_sms_from

    @all_my_sms_from.setter
    def all_my_sms_from(self, all_my_sms_from):
        """Sets the all_my_sms_from of this TransportAllMySmsPatch.

        The sender value (default 36180) for the Allmysms service.

        :param all_my_sms_from: The all_my_sms_from of this TransportAllMySmsPatch.
        :type all_my_sms_from: str
        """
        if all_my_sms_from is not None and len(all_my_sms_from) > 255:
            raise ValueError("Invalid value for `all_my_sms_from`, length must be less than or equal to `255`")

        self._all_my_sms_from = all_my_sms_from

    @property
    def all_my_sms_login(self):
        """Gets the all_my_sms_login of this TransportAllMySmsPatch.

        The login credential for the Allmysms service.

        :return: The all_my_sms_login of this TransportAllMySmsPatch.
        :rtype: str
        """
        return self._all_my_sms_login

    @all_my_sms_login.setter
    def all_my_sms_login(self, all_my_sms_login):
        """Sets the all_my_sms_login of this TransportAllMySmsPatch.

        The login credential for the Allmysms service.

        :param all_my_sms_login: The all_my_sms_login of this TransportAllMySmsPatch.
        :type all_my_sms_login: str
        """
        if all_my_sms_login is None:
            raise ValueError("Invalid value for `all_my_sms_login`, must not be `None`")
        if all_my_sms_login is not None and len(all_my_sms_login) > 255:
            raise ValueError("Invalid value for `all_my_sms_login`, length must be less than or equal to `255`")

        self._all_my_sms_login = all_my_sms_login

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportAllMySmsPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportAllMySmsPatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportAllMySmsPatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportAllMySmsPatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportAllMySmsPatch.

        The name of the transport.

        :return: The transport_name of this TransportAllMySmsPatch.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportAllMySmsPatch.

        The name of the transport.

        :param transport_name: The transport_name of this TransportAllMySmsPatch.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
