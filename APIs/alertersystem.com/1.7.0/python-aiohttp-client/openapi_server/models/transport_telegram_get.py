# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportTelegramGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, data_segment_code: str=None, id: str=None, partition: str=None, resource_owner: str=None, telegram_chat_id: str=None, telegram_token: str=None, transport_name: str=None):
        """TransportTelegramGet - a model defined in OpenAPI

        :param created_at: The created_at of this TransportTelegramGet.
        :param data_segment_code: The data_segment_code of this TransportTelegramGet.
        :param id: The id of this TransportTelegramGet.
        :param partition: The partition of this TransportTelegramGet.
        :param resource_owner: The resource_owner of this TransportTelegramGet.
        :param telegram_chat_id: The telegram_chat_id of this TransportTelegramGet.
        :param telegram_token: The telegram_token of this TransportTelegramGet.
        :param transport_name: The transport_name of this TransportTelegramGet.
        """
        self.openapi_types = {
            'created_at': datetime,
            'data_segment_code': str,
            'id': str,
            'partition': str,
            'resource_owner': str,
            'telegram_chat_id': str,
            'telegram_token': str,
            'transport_name': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'id': 'id',
            'partition': 'partition',
            'resource_owner': 'resourceOwner',
            'telegram_chat_id': 'telegramChatId',
            'telegram_token': 'telegramToken',
            'transport_name': 'transportName'
        }

        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._id = id
        self._partition = partition
        self._resource_owner = resource_owner
        self._telegram_chat_id = telegram_chat_id
        self._telegram_token = telegram_token
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportTelegramGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportTelegram-get of this TransportTelegramGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this TransportTelegramGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this TransportTelegramGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TransportTelegramGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this TransportTelegramGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportTelegramGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportTelegramGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportTelegramGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportTelegramGet.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def id(self):
        """Gets the id of this TransportTelegramGet.

        The unique identifier of the resource instance.

        :return: The id of this TransportTelegramGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransportTelegramGet.

        The unique identifier of the resource instance.

        :param id: The id of this TransportTelegramGet.
        :type id: str
        """

        self._id = id

    @property
    def partition(self):
        """Gets the partition of this TransportTelegramGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this TransportTelegramGet.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TransportTelegramGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this TransportTelegramGet.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def resource_owner(self):
        """Gets the resource_owner of this TransportTelegramGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this TransportTelegramGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this TransportTelegramGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this TransportTelegramGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner

    @property
    def telegram_chat_id(self):
        """Gets the telegram_chat_id of this TransportTelegramGet.

        The chat ID for the Telegram service.

        :return: The telegram_chat_id of this TransportTelegramGet.
        :rtype: str
        """
        return self._telegram_chat_id

    @telegram_chat_id.setter
    def telegram_chat_id(self, telegram_chat_id):
        """Sets the telegram_chat_id of this TransportTelegramGet.

        The chat ID for the Telegram service.

        :param telegram_chat_id: The telegram_chat_id of this TransportTelegramGet.
        :type telegram_chat_id: str
        """
        if telegram_chat_id is None:
            raise ValueError("Invalid value for `telegram_chat_id`, must not be `None`")
        if telegram_chat_id is not None and len(telegram_chat_id) > 255:
            raise ValueError("Invalid value for `telegram_chat_id`, length must be less than or equal to `255`")

        self._telegram_chat_id = telegram_chat_id

    @property
    def telegram_token(self):
        """Gets the telegram_token of this TransportTelegramGet.

        The token for the Telegram service. Stored in encrypted format.

        :return: The telegram_token of this TransportTelegramGet.
        :rtype: str
        """
        return self._telegram_token

    @telegram_token.setter
    def telegram_token(self, telegram_token):
        """Sets the telegram_token of this TransportTelegramGet.

        The token for the Telegram service. Stored in encrypted format.

        :param telegram_token: The telegram_token of this TransportTelegramGet.
        :type telegram_token: str
        """
        if telegram_token is None:
            raise ValueError("Invalid value for `telegram_token`, must not be `None`")
        if telegram_token is not None and len(telegram_token) > 1000:
            raise ValueError("Invalid value for `telegram_token`, length must be less than or equal to `1000`")

        self._telegram_token = telegram_token

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportTelegramGet.

        The name of the transport.

        :return: The transport_name of this TransportTelegramGet.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportTelegramGet.

        The name of the transport.

        :param transport_name: The transport_name of this TransportTelegramGet.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
