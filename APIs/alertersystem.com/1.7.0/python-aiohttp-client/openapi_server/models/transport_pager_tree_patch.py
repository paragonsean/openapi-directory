# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportPagerTreePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, pager_tree_access_token: str=None, pager_tree_account_user_id: str=None, pager_tree_router_id: str=None, pager_tree_team_id: str=None, pager_tree_urgency: str=None, transport_name: str=None):
        """TransportPagerTreePatch - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TransportPagerTreePatch.
        :param pager_tree_access_token: The pager_tree_access_token of this TransportPagerTreePatch.
        :param pager_tree_account_user_id: The pager_tree_account_user_id of this TransportPagerTreePatch.
        :param pager_tree_router_id: The pager_tree_router_id of this TransportPagerTreePatch.
        :param pager_tree_team_id: The pager_tree_team_id of this TransportPagerTreePatch.
        :param pager_tree_urgency: The pager_tree_urgency of this TransportPagerTreePatch.
        :param transport_name: The transport_name of this TransportPagerTreePatch.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'pager_tree_access_token': str,
            'pager_tree_account_user_id': str,
            'pager_tree_router_id': str,
            'pager_tree_team_id': str,
            'pager_tree_urgency': str,
            'transport_name': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'pager_tree_access_token': 'pagerTreeAccessToken',
            'pager_tree_account_user_id': 'pagerTreeAccountUserId',
            'pager_tree_router_id': 'pagerTreeRouterId',
            'pager_tree_team_id': 'pagerTreeTeamId',
            'pager_tree_urgency': 'pagerTreeUrgency',
            'transport_name': 'transportName'
        }

        self._data_segment_code = data_segment_code
        self._pager_tree_access_token = pager_tree_access_token
        self._pager_tree_account_user_id = pager_tree_account_user_id
        self._pager_tree_router_id = pager_tree_router_id
        self._pager_tree_team_id = pager_tree_team_id
        self._pager_tree_urgency = pager_tree_urgency
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportPagerTreePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportPagerTree-patch of this TransportPagerTreePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportPagerTreePatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportPagerTreePatch.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportPagerTreePatch.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def pager_tree_access_token(self):
        """Gets the pager_tree_access_token of this TransportPagerTreePatch.

        The access token for the Pager Tree service. Stored in encrypted format.

        :return: The pager_tree_access_token of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._pager_tree_access_token

    @pager_tree_access_token.setter
    def pager_tree_access_token(self, pager_tree_access_token):
        """Sets the pager_tree_access_token of this TransportPagerTreePatch.

        The access token for the Pager Tree service. Stored in encrypted format.

        :param pager_tree_access_token: The pager_tree_access_token of this TransportPagerTreePatch.
        :type pager_tree_access_token: str
        """
        if pager_tree_access_token is None:
            raise ValueError("Invalid value for `pager_tree_access_token`, must not be `None`")
        if pager_tree_access_token is not None and len(pager_tree_access_token) > 1000:
            raise ValueError("Invalid value for `pager_tree_access_token`, length must be less than or equal to `1000`")

        self._pager_tree_access_token = pager_tree_access_token

    @property
    def pager_tree_account_user_id(self):
        """Gets the pager_tree_account_user_id of this TransportPagerTreePatch.

        The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)

        :return: The pager_tree_account_user_id of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._pager_tree_account_user_id

    @pager_tree_account_user_id.setter
    def pager_tree_account_user_id(self, pager_tree_account_user_id):
        """Sets the pager_tree_account_user_id of this TransportPagerTreePatch.

        The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)

        :param pager_tree_account_user_id: The pager_tree_account_user_id of this TransportPagerTreePatch.
        :type pager_tree_account_user_id: str
        """
        if pager_tree_account_user_id is not None and len(pager_tree_account_user_id) > 255:
            raise ValueError("Invalid value for `pager_tree_account_user_id`, length must be less than or equal to `255`")

        self._pager_tree_account_user_id = pager_tree_account_user_id

    @property
    def pager_tree_router_id(self):
        """Gets the pager_tree_router_id of this TransportPagerTreePatch.

        The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)

        :return: The pager_tree_router_id of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._pager_tree_router_id

    @pager_tree_router_id.setter
    def pager_tree_router_id(self, pager_tree_router_id):
        """Sets the pager_tree_router_id of this TransportPagerTreePatch.

        The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)

        :param pager_tree_router_id: The pager_tree_router_id of this TransportPagerTreePatch.
        :type pager_tree_router_id: str
        """
        if pager_tree_router_id is not None and len(pager_tree_router_id) > 255:
            raise ValueError("Invalid value for `pager_tree_router_id`, length must be less than or equal to `255`")

        self._pager_tree_router_id = pager_tree_router_id

    @property
    def pager_tree_team_id(self):
        """Gets the pager_tree_team_id of this TransportPagerTreePatch.

        The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)

        :return: The pager_tree_team_id of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._pager_tree_team_id

    @pager_tree_team_id.setter
    def pager_tree_team_id(self, pager_tree_team_id):
        """Sets the pager_tree_team_id of this TransportPagerTreePatch.

        The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)

        :param pager_tree_team_id: The pager_tree_team_id of this TransportPagerTreePatch.
        :type pager_tree_team_id: str
        """
        if pager_tree_team_id is not None and len(pager_tree_team_id) > 255:
            raise ValueError("Invalid value for `pager_tree_team_id`, length must be less than or equal to `255`")

        self._pager_tree_team_id = pager_tree_team_id

    @property
    def pager_tree_urgency(self):
        """Gets the pager_tree_urgency of this TransportPagerTreePatch.

        The urgency for the Pager Tree service.

        :return: The pager_tree_urgency of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._pager_tree_urgency

    @pager_tree_urgency.setter
    def pager_tree_urgency(self, pager_tree_urgency):
        """Sets the pager_tree_urgency of this TransportPagerTreePatch.

        The urgency for the Pager Tree service.

        :param pager_tree_urgency: The pager_tree_urgency of this TransportPagerTreePatch.
        :type pager_tree_urgency: str
        """
        if pager_tree_urgency is None:
            raise ValueError("Invalid value for `pager_tree_urgency`, must not be `None`")
        if pager_tree_urgency is not None and len(pager_tree_urgency) > 255:
            raise ValueError("Invalid value for `pager_tree_urgency`, length must be less than or equal to `255`")

        self._pager_tree_urgency = pager_tree_urgency

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportPagerTreePatch.

        The name of the transport.

        :return: The transport_name of this TransportPagerTreePatch.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportPagerTreePatch.

        The name of the transport.

        :param transport_name: The transport_name of this TransportPagerTreePatch.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
