# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PingGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_logs: List[str]=None, created_at: datetime=None, data_segment_code: str=None, expect_next_ping_at: datetime=None, expect_next_ping_at_epoch: int=None, id: str=None, ip_address: str=None, monitor: str=None, monitor_status_log: str=None, partition: str=None, ping_custom_code: str=None, ping_custom_payload: str=None, ping_method_code: str=None, resource_owner: str=None):
        """PingGet - a model defined in OpenAPI

        :param alert_logs: The alert_logs of this PingGet.
        :param created_at: The created_at of this PingGet.
        :param data_segment_code: The data_segment_code of this PingGet.
        :param expect_next_ping_at: The expect_next_ping_at of this PingGet.
        :param expect_next_ping_at_epoch: The expect_next_ping_at_epoch of this PingGet.
        :param id: The id of this PingGet.
        :param ip_address: The ip_address of this PingGet.
        :param monitor: The monitor of this PingGet.
        :param monitor_status_log: The monitor_status_log of this PingGet.
        :param partition: The partition of this PingGet.
        :param ping_custom_code: The ping_custom_code of this PingGet.
        :param ping_custom_payload: The ping_custom_payload of this PingGet.
        :param ping_method_code: The ping_method_code of this PingGet.
        :param resource_owner: The resource_owner of this PingGet.
        """
        self.openapi_types = {
            'alert_logs': List[str],
            'created_at': datetime,
            'data_segment_code': str,
            'expect_next_ping_at': datetime,
            'expect_next_ping_at_epoch': int,
            'id': str,
            'ip_address': str,
            'monitor': str,
            'monitor_status_log': str,
            'partition': str,
            'ping_custom_code': str,
            'ping_custom_payload': str,
            'ping_method_code': str,
            'resource_owner': str
        }

        self.attribute_map = {
            'alert_logs': 'alertLogs',
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'expect_next_ping_at': 'expectNextPingAt',
            'expect_next_ping_at_epoch': 'expectNextPingAtEpoch',
            'id': 'id',
            'ip_address': 'ipAddress',
            'monitor': 'monitor',
            'monitor_status_log': 'monitorStatusLog',
            'partition': 'partition',
            'ping_custom_code': 'pingCustomCode',
            'ping_custom_payload': 'pingCustomPayload',
            'ping_method_code': 'pingMethodCode',
            'resource_owner': 'resourceOwner'
        }

        self._alert_logs = alert_logs
        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._expect_next_ping_at = expect_next_ping_at
        self._expect_next_ping_at_epoch = expect_next_ping_at_epoch
        self._id = id
        self._ip_address = ip_address
        self._monitor = monitor
        self._monitor_status_log = monitor_status_log
        self._partition = partition
        self._ping_custom_code = ping_custom_code
        self._ping_custom_payload = ping_custom_payload
        self._ping_method_code = ping_method_code
        self._resource_owner = resource_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PingGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ping-get of this PingGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_logs(self):
        """Gets the alert_logs of this PingGet.

        The alert logs that are related to this resource instance.

        :return: The alert_logs of this PingGet.
        :rtype: List[str]
        """
        return self._alert_logs

    @alert_logs.setter
    def alert_logs(self, alert_logs):
        """Sets the alert_logs of this PingGet.

        The alert logs that are related to this resource instance.

        :param alert_logs: The alert_logs of this PingGet.
        :type alert_logs: List[str]
        """

        self._alert_logs = alert_logs

    @property
    def created_at(self):
        """Gets the created_at of this PingGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this PingGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PingGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this PingGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this PingGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this PingGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this PingGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this PingGet.
        :type data_segment_code: str
        """

        self._data_segment_code = data_segment_code

    @property
    def expect_next_ping_at(self):
        """Gets the expect_next_ping_at of this PingGet.

        When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :return: The expect_next_ping_at of this PingGet.
        :rtype: datetime
        """
        return self._expect_next_ping_at

    @expect_next_ping_at.setter
    def expect_next_ping_at(self, expect_next_ping_at):
        """Sets the expect_next_ping_at of this PingGet.

        When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :param expect_next_ping_at: The expect_next_ping_at of this PingGet.
        :type expect_next_ping_at: datetime
        """

        self._expect_next_ping_at = expect_next_ping_at

    @property
    def expect_next_ping_at_epoch(self):
        """Gets the expect_next_ping_at_epoch of this PingGet.

        When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :return: The expect_next_ping_at_epoch of this PingGet.
        :rtype: int
        """
        return self._expect_next_ping_at_epoch

    @expect_next_ping_at_epoch.setter
    def expect_next_ping_at_epoch(self, expect_next_ping_at_epoch):
        """Sets the expect_next_ping_at_epoch of this PingGet.

        When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :param expect_next_ping_at_epoch: The expect_next_ping_at_epoch of this PingGet.
        :type expect_next_ping_at_epoch: int
        """

        self._expect_next_ping_at_epoch = expect_next_ping_at_epoch

    @property
    def id(self):
        """Gets the id of this PingGet.

        The unique identifier of the resource instance.

        :return: The id of this PingGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PingGet.

        The unique identifier of the resource instance.

        :param id: The id of this PingGet.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this PingGet.

        The IP address where this resource originated.

        :return: The ip_address of this PingGet.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PingGet.

        The IP address where this resource originated.

        :param ip_address: The ip_address of this PingGet.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def monitor(self):
        """Gets the monitor of this PingGet.

        The monitor that is related to this resource instance.

        :return: The monitor of this PingGet.
        :rtype: str
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this PingGet.

        The monitor that is related to this resource instance.

        :param monitor: The monitor of this PingGet.
        :type monitor: str
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")

        self._monitor = monitor

    @property
    def monitor_status_log(self):
        """Gets the monitor_status_log of this PingGet.

        The monitor status that resulted from the ping.

        :return: The monitor_status_log of this PingGet.
        :rtype: str
        """
        return self._monitor_status_log

    @monitor_status_log.setter
    def monitor_status_log(self, monitor_status_log):
        """Sets the monitor_status_log of this PingGet.

        The monitor status that resulted from the ping.

        :param monitor_status_log: The monitor_status_log of this PingGet.
        :type monitor_status_log: str
        """

        self._monitor_status_log = monitor_status_log

    @property
    def partition(self):
        """Gets the partition of this PingGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this PingGet.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this PingGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this PingGet.
        :type partition: str
        """

        self._partition = partition

    @property
    def ping_custom_code(self):
        """Gets the ping_custom_code of this PingGet.

        The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.

        :return: The ping_custom_code of this PingGet.
        :rtype: str
        """
        return self._ping_custom_code

    @ping_custom_code.setter
    def ping_custom_code(self, ping_custom_code):
        """Sets the ping_custom_code of this PingGet.

        The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.

        :param ping_custom_code: The ping_custom_code of this PingGet.
        :type ping_custom_code: str
        """

        self._ping_custom_code = ping_custom_code

    @property
    def ping_custom_payload(self):
        """Gets the ping_custom_payload of this PingGet.

        The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.

        :return: The ping_custom_payload of this PingGet.
        :rtype: str
        """
        return self._ping_custom_payload

    @ping_custom_payload.setter
    def ping_custom_payload(self, ping_custom_payload):
        """Sets the ping_custom_payload of this PingGet.

        The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.

        :param ping_custom_payload: The ping_custom_payload of this PingGet.
        :type ping_custom_payload: str
        """

        self._ping_custom_payload = ping_custom_payload

    @property
    def ping_method_code(self):
        """Gets the ping_method_code of this PingGet.

        The method of the ping.

        :return: The ping_method_code of this PingGet.
        :rtype: str
        """
        return self._ping_method_code

    @ping_method_code.setter
    def ping_method_code(self, ping_method_code):
        """Sets the ping_method_code of this PingGet.

        The method of the ping.

        :param ping_method_code: The ping_method_code of this PingGet.
        :type ping_method_code: str
        """

        self._ping_method_code = ping_method_code

    @property
    def resource_owner(self):
        """Gets the resource_owner of this PingGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this PingGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this PingGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this PingGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner
