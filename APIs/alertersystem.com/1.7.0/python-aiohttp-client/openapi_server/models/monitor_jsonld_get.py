# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_log_jsonld_get_context import AlertLogJsonldGetContext
from openapi_server import util


class MonitorJsonldGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: AlertLogJsonldGetContext=None, id: str=None, type: str=None, alert_payload_extended: str=None, alert_payload_short: str=None, alert_services: List[str]=None, allow_unauthenticated_pings: bool=None, content_check_must_not_exist: bool=None, content_check_text: str=None, content_check_url: str=None, content_check_xpath_filter: str=None, created_at: datetime=None, data_segment_code: str=None, grace_seconds: int=None, humanized_interval: str=None, id: str=None, internal_monitor_name: str=None, interval_days: int=None, interval_hours: int=None, interval_minutes: int=None, interval_months: int=None, interval_seconds: int=None, interval_years: int=None, is_monitor_paused: bool=None, last_ping_at: datetime=None, monitor_name: str=None, monitor_notes: str=None, monitor_status_code: str=None, monitor_type_code: str=None, next_ping_at: datetime=None, partition: str=None, ping_secret: str=None, public_description: str=None, resource_owner: str=None, start_monitor_at: datetime=None, start_monitor_at_utc: datetime=None, system_messages: List[str]=None, timezone_code: str=None, web_response_seconds_limit: int=None, web_response_url: str=None):
        """MonitorJsonldGet - a model defined in OpenAPI

        :param context: The context of this MonitorJsonldGet.
        :param id: The id of this MonitorJsonldGet.
        :param type: The type of this MonitorJsonldGet.
        :param alert_payload_extended: The alert_payload_extended of this MonitorJsonldGet.
        :param alert_payload_short: The alert_payload_short of this MonitorJsonldGet.
        :param alert_services: The alert_services of this MonitorJsonldGet.
        :param allow_unauthenticated_pings: The allow_unauthenticated_pings of this MonitorJsonldGet.
        :param content_check_must_not_exist: The content_check_must_not_exist of this MonitorJsonldGet.
        :param content_check_text: The content_check_text of this MonitorJsonldGet.
        :param content_check_url: The content_check_url of this MonitorJsonldGet.
        :param content_check_xpath_filter: The content_check_xpath_filter of this MonitorJsonldGet.
        :param created_at: The created_at of this MonitorJsonldGet.
        :param data_segment_code: The data_segment_code of this MonitorJsonldGet.
        :param grace_seconds: The grace_seconds of this MonitorJsonldGet.
        :param humanized_interval: The humanized_interval of this MonitorJsonldGet.
        :param id: The id of this MonitorJsonldGet.
        :param internal_monitor_name: The internal_monitor_name of this MonitorJsonldGet.
        :param interval_days: The interval_days of this MonitorJsonldGet.
        :param interval_hours: The interval_hours of this MonitorJsonldGet.
        :param interval_minutes: The interval_minutes of this MonitorJsonldGet.
        :param interval_months: The interval_months of this MonitorJsonldGet.
        :param interval_seconds: The interval_seconds of this MonitorJsonldGet.
        :param interval_years: The interval_years of this MonitorJsonldGet.
        :param is_monitor_paused: The is_monitor_paused of this MonitorJsonldGet.
        :param last_ping_at: The last_ping_at of this MonitorJsonldGet.
        :param monitor_name: The monitor_name of this MonitorJsonldGet.
        :param monitor_notes: The monitor_notes of this MonitorJsonldGet.
        :param monitor_status_code: The monitor_status_code of this MonitorJsonldGet.
        :param monitor_type_code: The monitor_type_code of this MonitorJsonldGet.
        :param next_ping_at: The next_ping_at of this MonitorJsonldGet.
        :param partition: The partition of this MonitorJsonldGet.
        :param ping_secret: The ping_secret of this MonitorJsonldGet.
        :param public_description: The public_description of this MonitorJsonldGet.
        :param resource_owner: The resource_owner of this MonitorJsonldGet.
        :param start_monitor_at: The start_monitor_at of this MonitorJsonldGet.
        :param start_monitor_at_utc: The start_monitor_at_utc of this MonitorJsonldGet.
        :param system_messages: The system_messages of this MonitorJsonldGet.
        :param timezone_code: The timezone_code of this MonitorJsonldGet.
        :param web_response_seconds_limit: The web_response_seconds_limit of this MonitorJsonldGet.
        :param web_response_url: The web_response_url of this MonitorJsonldGet.
        """
        self.openapi_types = {
            'context': AlertLogJsonldGetContext,
            'id': str,
            'type': str,
            'alert_payload_extended': str,
            'alert_payload_short': str,
            'alert_services': List[str],
            'allow_unauthenticated_pings': bool,
            'content_check_must_not_exist': bool,
            'content_check_text': str,
            'content_check_url': str,
            'content_check_xpath_filter': str,
            'created_at': datetime,
            'data_segment_code': str,
            'grace_seconds': int,
            'humanized_interval': str,
            'id': str,
            'internal_monitor_name': str,
            'interval_days': int,
            'interval_hours': int,
            'interval_minutes': int,
            'interval_months': int,
            'interval_seconds': int,
            'interval_years': int,
            'is_monitor_paused': bool,
            'last_ping_at': datetime,
            'monitor_name': str,
            'monitor_notes': str,
            'monitor_status_code': str,
            'monitor_type_code': str,
            'next_ping_at': datetime,
            'partition': str,
            'ping_secret': str,
            'public_description': str,
            'resource_owner': str,
            'start_monitor_at': datetime,
            'start_monitor_at_utc': datetime,
            'system_messages': List[str],
            'timezone_code': str,
            'web_response_seconds_limit': int,
            'web_response_url': str
        }

        self.attribute_map = {
            'context': '@context',
            'id': '@id',
            'type': '@type',
            'alert_payload_extended': 'alertPayloadExtended',
            'alert_payload_short': 'alertPayloadShort',
            'alert_services': 'alertServices',
            'allow_unauthenticated_pings': 'allowUnauthenticatedPings',
            'content_check_must_not_exist': 'contentCheckMustNotExist',
            'content_check_text': 'contentCheckText',
            'content_check_url': 'contentCheckUrl',
            'content_check_xpath_filter': 'contentCheckXpathFilter',
            'created_at': 'createdAt',
            'data_segment_code': 'dataSegmentCode',
            'grace_seconds': 'graceSeconds',
            'humanized_interval': 'humanizedInterval',
            'id': 'id',
            'internal_monitor_name': 'internalMonitorName',
            'interval_days': 'intervalDays',
            'interval_hours': 'intervalHours',
            'interval_minutes': 'intervalMinutes',
            'interval_months': 'intervalMonths',
            'interval_seconds': 'intervalSeconds',
            'interval_years': 'intervalYears',
            'is_monitor_paused': 'isMonitorPaused',
            'last_ping_at': 'lastPingAt',
            'monitor_name': 'monitorName',
            'monitor_notes': 'monitorNotes',
            'monitor_status_code': 'monitorStatusCode',
            'monitor_type_code': 'monitorTypeCode',
            'next_ping_at': 'nextPingAt',
            'partition': 'partition',
            'ping_secret': 'pingSecret',
            'public_description': 'publicDescription',
            'resource_owner': 'resourceOwner',
            'start_monitor_at': 'startMonitorAt',
            'start_monitor_at_utc': 'startMonitorAtUtc',
            'system_messages': 'systemMessages',
            'timezone_code': 'timezoneCode',
            'web_response_seconds_limit': 'webResponseSecondsLimit',
            'web_response_url': 'webResponseUrl'
        }

        self._context = context
        self._id = id
        self._type = type
        self._alert_payload_extended = alert_payload_extended
        self._alert_payload_short = alert_payload_short
        self._alert_services = alert_services
        self._allow_unauthenticated_pings = allow_unauthenticated_pings
        self._content_check_must_not_exist = content_check_must_not_exist
        self._content_check_text = content_check_text
        self._content_check_url = content_check_url
        self._content_check_xpath_filter = content_check_xpath_filter
        self._created_at = created_at
        self._data_segment_code = data_segment_code
        self._grace_seconds = grace_seconds
        self._humanized_interval = humanized_interval
        self._id = id
        self._internal_monitor_name = internal_monitor_name
        self._interval_days = interval_days
        self._interval_hours = interval_hours
        self._interval_minutes = interval_minutes
        self._interval_months = interval_months
        self._interval_seconds = interval_seconds
        self._interval_years = interval_years
        self._is_monitor_paused = is_monitor_paused
        self._last_ping_at = last_ping_at
        self._monitor_name = monitor_name
        self._monitor_notes = monitor_notes
        self._monitor_status_code = monitor_status_code
        self._monitor_type_code = monitor_type_code
        self._next_ping_at = next_ping_at
        self._partition = partition
        self._ping_secret = ping_secret
        self._public_description = public_description
        self._resource_owner = resource_owner
        self._start_monitor_at = start_monitor_at
        self._start_monitor_at_utc = start_monitor_at_utc
        self._system_messages = system_messages
        self._timezone_code = timezone_code
        self._web_response_seconds_limit = web_response_seconds_limit
        self._web_response_url = web_response_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorJsonldGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Monitor.jsonld-get of this MonitorJsonldGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this MonitorJsonldGet.


        :return: The context of this MonitorJsonldGet.
        :rtype: AlertLogJsonldGetContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MonitorJsonldGet.


        :param context: The context of this MonitorJsonldGet.
        :type context: AlertLogJsonldGetContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this MonitorJsonldGet.


        :return: The id of this MonitorJsonldGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonitorJsonldGet.


        :param id: The id of this MonitorJsonldGet.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this MonitorJsonldGet.


        :return: The type of this MonitorJsonldGet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MonitorJsonldGet.


        :param type: The type of this MonitorJsonldGet.
        :type type: str
        """

        self._type = type

    @property
    def alert_payload_extended(self):
        """Gets the alert_payload_extended of this MonitorJsonldGet.

        Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.

        :return: The alert_payload_extended of this MonitorJsonldGet.
        :rtype: str
        """
        return self._alert_payload_extended

    @alert_payload_extended.setter
    def alert_payload_extended(self, alert_payload_extended):
        """Sets the alert_payload_extended of this MonitorJsonldGet.

        Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.

        :param alert_payload_extended: The alert_payload_extended of this MonitorJsonldGet.
        :type alert_payload_extended: str
        """
        if alert_payload_extended is not None and len(alert_payload_extended) > 2100000:
            raise ValueError("Invalid value for `alert_payload_extended`, length must be less than or equal to `2100000`")

        self._alert_payload_extended = alert_payload_extended

    @property
    def alert_payload_short(self):
        """Gets the alert_payload_short of this MonitorJsonldGet.

        Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.

        :return: The alert_payload_short of this MonitorJsonldGet.
        :rtype: str
        """
        return self._alert_payload_short

    @alert_payload_short.setter
    def alert_payload_short(self, alert_payload_short):
        """Sets the alert_payload_short of this MonitorJsonldGet.

        Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.

        :param alert_payload_short: The alert_payload_short of this MonitorJsonldGet.
        :type alert_payload_short: str
        """
        if alert_payload_short is not None and len(alert_payload_short) > 100:
            raise ValueError("Invalid value for `alert_payload_short`, length must be less than or equal to `100`")

        self._alert_payload_short = alert_payload_short

    @property
    def alert_services(self):
        """Gets the alert_services of this MonitorJsonldGet.

        The alert services that are related to this resource.

        :return: The alert_services of this MonitorJsonldGet.
        :rtype: List[str]
        """
        return self._alert_services

    @alert_services.setter
    def alert_services(self, alert_services):
        """Sets the alert_services of this MonitorJsonldGet.

        The alert services that are related to this resource.

        :param alert_services: The alert_services of this MonitorJsonldGet.
        :type alert_services: List[str]
        """

        self._alert_services = alert_services

    @property
    def allow_unauthenticated_pings(self):
        """Gets the allow_unauthenticated_pings of this MonitorJsonldGet.

        Indicates that the monitor will accept pings that are not OAuth authenticated.

        :return: The allow_unauthenticated_pings of this MonitorJsonldGet.
        :rtype: bool
        """
        return self._allow_unauthenticated_pings

    @allow_unauthenticated_pings.setter
    def allow_unauthenticated_pings(self, allow_unauthenticated_pings):
        """Sets the allow_unauthenticated_pings of this MonitorJsonldGet.

        Indicates that the monitor will accept pings that are not OAuth authenticated.

        :param allow_unauthenticated_pings: The allow_unauthenticated_pings of this MonitorJsonldGet.
        :type allow_unauthenticated_pings: bool
        """

        self._allow_unauthenticated_pings = allow_unauthenticated_pings

    @property
    def content_check_must_not_exist(self):
        """Gets the content_check_must_not_exist of this MonitorJsonldGet.

        Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.

        :return: The content_check_must_not_exist of this MonitorJsonldGet.
        :rtype: bool
        """
        return self._content_check_must_not_exist

    @content_check_must_not_exist.setter
    def content_check_must_not_exist(self, content_check_must_not_exist):
        """Sets the content_check_must_not_exist of this MonitorJsonldGet.

        Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.

        :param content_check_must_not_exist: The content_check_must_not_exist of this MonitorJsonldGet.
        :type content_check_must_not_exist: bool
        """

        self._content_check_must_not_exist = content_check_must_not_exist

    @property
    def content_check_text(self):
        """Gets the content_check_text of this MonitorJsonldGet.

        The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.

        :return: The content_check_text of this MonitorJsonldGet.
        :rtype: str
        """
        return self._content_check_text

    @content_check_text.setter
    def content_check_text(self, content_check_text):
        """Sets the content_check_text of this MonitorJsonldGet.

        The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.

        :param content_check_text: The content_check_text of this MonitorJsonldGet.
        :type content_check_text: str
        """

        self._content_check_text = content_check_text

    @property
    def content_check_url(self):
        """Gets the content_check_url of this MonitorJsonldGet.

        The URL that the Web Content monitor type must evaluate for the specified conditions.

        :return: The content_check_url of this MonitorJsonldGet.
        :rtype: str
        """
        return self._content_check_url

    @content_check_url.setter
    def content_check_url(self, content_check_url):
        """Sets the content_check_url of this MonitorJsonldGet.

        The URL that the Web Content monitor type must evaluate for the specified conditions.

        :param content_check_url: The content_check_url of this MonitorJsonldGet.
        :type content_check_url: str
        """

        self._content_check_url = content_check_url

    @property
    def content_check_xpath_filter(self):
        """Gets the content_check_xpath_filter of this MonitorJsonldGet.

        The Xpath filter (<a href=\"https://en.wikipedia.org/wiki/XPath\">Xpath</a>, <a href=\"https://devhints.io/xpath\">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.

        :return: The content_check_xpath_filter of this MonitorJsonldGet.
        :rtype: str
        """
        return self._content_check_xpath_filter

    @content_check_xpath_filter.setter
    def content_check_xpath_filter(self, content_check_xpath_filter):
        """Sets the content_check_xpath_filter of this MonitorJsonldGet.

        The Xpath filter (<a href=\"https://en.wikipedia.org/wiki/XPath\">Xpath</a>, <a href=\"https://devhints.io/xpath\">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.

        :param content_check_xpath_filter: The content_check_xpath_filter of this MonitorJsonldGet.
        :type content_check_xpath_filter: str
        """

        self._content_check_xpath_filter = content_check_xpath_filter

    @property
    def created_at(self):
        """Gets the created_at of this MonitorJsonldGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :return: The created_at of this MonitorJsonldGet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MonitorJsonldGet.

        When the resource instance was created. This date-time is in the UTC timezone.

        :param created_at: The created_at of this MonitorJsonldGet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this MonitorJsonldGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this MonitorJsonldGet.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this MonitorJsonldGet.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this MonitorJsonldGet.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def grace_seconds(self):
        """Gets the grace_seconds of this MonitorJsonldGet.

        The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.

        :return: The grace_seconds of this MonitorJsonldGet.
        :rtype: int
        """
        return self._grace_seconds

    @grace_seconds.setter
    def grace_seconds(self, grace_seconds):
        """Sets the grace_seconds of this MonitorJsonldGet.

        The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.

        :param grace_seconds: The grace_seconds of this MonitorJsonldGet.
        :type grace_seconds: int
        """

        self._grace_seconds = grace_seconds

    @property
    def humanized_interval(self):
        """Gets the humanized_interval of this MonitorJsonldGet.

        The expected ping / run interval of this monitor in human readable form.

        :return: The humanized_interval of this MonitorJsonldGet.
        :rtype: str
        """
        return self._humanized_interval

    @humanized_interval.setter
    def humanized_interval(self, humanized_interval):
        """Sets the humanized_interval of this MonitorJsonldGet.

        The expected ping / run interval of this monitor in human readable form.

        :param humanized_interval: The humanized_interval of this MonitorJsonldGet.
        :type humanized_interval: str
        """

        self._humanized_interval = humanized_interval

    @property
    def id(self):
        """Gets the id of this MonitorJsonldGet.

        The unique identifier of the resource instance.

        :return: The id of this MonitorJsonldGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonitorJsonldGet.

        The unique identifier of the resource instance.

        :param id: The id of this MonitorJsonldGet.
        :type id: str
        """

        self._id = id

    @property
    def internal_monitor_name(self):
        """Gets the internal_monitor_name of this MonitorJsonldGet.

        The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services.

        :return: The internal_monitor_name of this MonitorJsonldGet.
        :rtype: str
        """
        return self._internal_monitor_name

    @internal_monitor_name.setter
    def internal_monitor_name(self, internal_monitor_name):
        """Sets the internal_monitor_name of this MonitorJsonldGet.

        The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services.

        :param internal_monitor_name: The internal_monitor_name of this MonitorJsonldGet.
        :type internal_monitor_name: str
        """

        self._internal_monitor_name = internal_monitor_name

    @property
    def interval_days(self):
        """Gets the interval_days of this MonitorJsonldGet.

        The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_days of this MonitorJsonldGet.
        :rtype: int
        """
        return self._interval_days

    @interval_days.setter
    def interval_days(self, interval_days):
        """Sets the interval_days of this MonitorJsonldGet.

        The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_days: The interval_days of this MonitorJsonldGet.
        :type interval_days: int
        """
        if interval_days is not None and interval_days < 0:
            raise ValueError("Invalid value for `interval_days`, must be a value greater than or equal to `0`")

        self._interval_days = interval_days

    @property
    def interval_hours(self):
        """Gets the interval_hours of this MonitorJsonldGet.

        The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_hours of this MonitorJsonldGet.
        :rtype: int
        """
        return self._interval_hours

    @interval_hours.setter
    def interval_hours(self, interval_hours):
        """Sets the interval_hours of this MonitorJsonldGet.

        The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_hours: The interval_hours of this MonitorJsonldGet.
        :type interval_hours: int
        """
        if interval_hours is not None and interval_hours < 0:
            raise ValueError("Invalid value for `interval_hours`, must be a value greater than or equal to `0`")

        self._interval_hours = interval_hours

    @property
    def interval_minutes(self):
        """Gets the interval_minutes of this MonitorJsonldGet.

        The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_minutes of this MonitorJsonldGet.
        :rtype: int
        """
        return self._interval_minutes

    @interval_minutes.setter
    def interval_minutes(self, interval_minutes):
        """Sets the interval_minutes of this MonitorJsonldGet.

        The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_minutes: The interval_minutes of this MonitorJsonldGet.
        :type interval_minutes: int
        """
        if interval_minutes is not None and interval_minutes < 0:
            raise ValueError("Invalid value for `interval_minutes`, must be a value greater than or equal to `0`")

        self._interval_minutes = interval_minutes

    @property
    def interval_months(self):
        """Gets the interval_months of this MonitorJsonldGet.

        The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_months of this MonitorJsonldGet.
        :rtype: int
        """
        return self._interval_months

    @interval_months.setter
    def interval_months(self, interval_months):
        """Sets the interval_months of this MonitorJsonldGet.

        The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_months: The interval_months of this MonitorJsonldGet.
        :type interval_months: int
        """
        if interval_months is not None and interval_months < 0:
            raise ValueError("Invalid value for `interval_months`, must be a value greater than or equal to `0`")

        self._interval_months = interval_months

    @property
    def interval_seconds(self):
        """Gets the interval_seconds of this MonitorJsonldGet.

        The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_seconds of this MonitorJsonldGet.
        :rtype: int
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds):
        """Sets the interval_seconds of this MonitorJsonldGet.

        The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_seconds: The interval_seconds of this MonitorJsonldGet.
        :type interval_seconds: int
        """
        if interval_seconds is not None and interval_seconds < 0:
            raise ValueError("Invalid value for `interval_seconds`, must be a value greater than or equal to `0`")

        self._interval_seconds = interval_seconds

    @property
    def interval_years(self):
        """Gets the interval_years of this MonitorJsonldGet.

        The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :return: The interval_years of this MonitorJsonldGet.
        :rtype: int
        """
        return self._interval_years

    @interval_years.setter
    def interval_years(self, interval_years):
        """Sets the interval_years of this MonitorJsonldGet.

        The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.

        :param interval_years: The interval_years of this MonitorJsonldGet.
        :type interval_years: int
        """
        if interval_years is not None and interval_years < 0:
            raise ValueError("Invalid value for `interval_years`, must be a value greater than or equal to `0`")

        self._interval_years = interval_years

    @property
    def is_monitor_paused(self):
        """Gets the is_monitor_paused of this MonitorJsonldGet.

        Indicates that the monitor is paused and will not send alerts.

        :return: The is_monitor_paused of this MonitorJsonldGet.
        :rtype: bool
        """
        return self._is_monitor_paused

    @is_monitor_paused.setter
    def is_monitor_paused(self, is_monitor_paused):
        """Sets the is_monitor_paused of this MonitorJsonldGet.

        Indicates that the monitor is paused and will not send alerts.

        :param is_monitor_paused: The is_monitor_paused of this MonitorJsonldGet.
        :type is_monitor_paused: bool
        """

        self._is_monitor_paused = is_monitor_paused

    @property
    def last_ping_at(self):
        """Gets the last_ping_at of this MonitorJsonldGet.

        When the last ping was received. This date-time is in the UTC timezone.

        :return: The last_ping_at of this MonitorJsonldGet.
        :rtype: datetime
        """
        return self._last_ping_at

    @last_ping_at.setter
    def last_ping_at(self, last_ping_at):
        """Sets the last_ping_at of this MonitorJsonldGet.

        When the last ping was received. This date-time is in the UTC timezone.

        :param last_ping_at: The last_ping_at of this MonitorJsonldGet.
        :type last_ping_at: datetime
        """

        self._last_ping_at = last_ping_at

    @property
    def monitor_name(self):
        """Gets the monitor_name of this MonitorJsonldGet.

        The name of the monitor. Max 255 characters.

        :return: The monitor_name of this MonitorJsonldGet.
        :rtype: str
        """
        return self._monitor_name

    @monitor_name.setter
    def monitor_name(self, monitor_name):
        """Sets the monitor_name of this MonitorJsonldGet.

        The name of the monitor. Max 255 characters.

        :param monitor_name: The monitor_name of this MonitorJsonldGet.
        :type monitor_name: str
        """
        if monitor_name is None:
            raise ValueError("Invalid value for `monitor_name`, must not be `None`")
        if monitor_name is not None and len(monitor_name) > 255:
            raise ValueError("Invalid value for `monitor_name`, length must be less than or equal to `255`")

        self._monitor_name = monitor_name

    @property
    def monitor_notes(self):
        """Gets the monitor_notes of this MonitorJsonldGet.

        Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :return: The monitor_notes of this MonitorJsonldGet.
        :rtype: str
        """
        return self._monitor_notes

    @monitor_notes.setter
    def monitor_notes(self, monitor_notes):
        """Sets the monitor_notes of this MonitorJsonldGet.

        Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.

        :param monitor_notes: The monitor_notes of this MonitorJsonldGet.
        :type monitor_notes: str
        """
        if monitor_notes is not None and len(monitor_notes) > 10000:
            raise ValueError("Invalid value for `monitor_notes`, length must be less than or equal to `10000`")

        self._monitor_notes = monitor_notes

    @property
    def monitor_status_code(self):
        """Gets the monitor_status_code of this MonitorJsonldGet.

        The status of the monitor.

        :return: The monitor_status_code of this MonitorJsonldGet.
        :rtype: str
        """
        return self._monitor_status_code

    @monitor_status_code.setter
    def monitor_status_code(self, monitor_status_code):
        """Sets the monitor_status_code of this MonitorJsonldGet.

        The status of the monitor.

        :param monitor_status_code: The monitor_status_code of this MonitorJsonldGet.
        :type monitor_status_code: str
        """

        self._monitor_status_code = monitor_status_code

    @property
    def monitor_type_code(self):
        """Gets the monitor_type_code of this MonitorJsonldGet.

        The type of the monitor.

        :return: The monitor_type_code of this MonitorJsonldGet.
        :rtype: str
        """
        return self._monitor_type_code

    @monitor_type_code.setter
    def monitor_type_code(self, monitor_type_code):
        """Sets the monitor_type_code of this MonitorJsonldGet.

        The type of the monitor.

        :param monitor_type_code: The monitor_type_code of this MonitorJsonldGet.
        :type monitor_type_code: str
        """
        if monitor_type_code is None:
            raise ValueError("Invalid value for `monitor_type_code`, must not be `None`")

        self._monitor_type_code = monitor_type_code

    @property
    def next_ping_at(self):
        """Gets the next_ping_at of this MonitorJsonldGet.

        When the next ping is expected. This date-time is in the UTC timezone.

        :return: The next_ping_at of this MonitorJsonldGet.
        :rtype: datetime
        """
        return self._next_ping_at

    @next_ping_at.setter
    def next_ping_at(self, next_ping_at):
        """Sets the next_ping_at of this MonitorJsonldGet.

        When the next ping is expected. This date-time is in the UTC timezone.

        :param next_ping_at: The next_ping_at of this MonitorJsonldGet.
        :type next_ping_at: datetime
        """

        self._next_ping_at = next_ping_at

    @property
    def partition(self):
        """Gets the partition of this MonitorJsonldGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :return: The partition of this MonitorJsonldGet.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this MonitorJsonldGet.

        The partition that contains this resource instance. The resource cannot be moved to another partition.

        :param partition: The partition of this MonitorJsonldGet.
        :type partition: str
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")

        self._partition = partition

    @property
    def ping_secret(self):
        """Gets the ping_secret of this MonitorJsonldGet.

        A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the \"Authorization: Bearer\" header.

        :return: The ping_secret of this MonitorJsonldGet.
        :rtype: str
        """
        return self._ping_secret

    @ping_secret.setter
    def ping_secret(self, ping_secret):
        """Sets the ping_secret of this MonitorJsonldGet.

        A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the \"Authorization: Bearer\" header.

        :param ping_secret: The ping_secret of this MonitorJsonldGet.
        :type ping_secret: str
        """

        self._ping_secret = ping_secret

    @property
    def public_description(self):
        """Gets the public_description of this MonitorJsonldGet.

        A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.

        :return: The public_description of this MonitorJsonldGet.
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this MonitorJsonldGet.

        A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.

        :param public_description: The public_description of this MonitorJsonldGet.
        :type public_description: str
        """
        if public_description is not None and len(public_description) > 10000:
            raise ValueError("Invalid value for `public_description`, length must be less than or equal to `10000`")

        self._public_description = public_description

    @property
    def resource_owner(self):
        """Gets the resource_owner of this MonitorJsonldGet.

        The name of the person who owns this resource.

        :return: The resource_owner of this MonitorJsonldGet.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this MonitorJsonldGet.

        The name of the person who owns this resource.

        :param resource_owner: The resource_owner of this MonitorJsonldGet.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner

    @property
    def start_monitor_at(self):
        """Gets the start_monitor_at of this MonitorJsonldGet.

        When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.

        :return: The start_monitor_at of this MonitorJsonldGet.
        :rtype: datetime
        """
        return self._start_monitor_at

    @start_monitor_at.setter
    def start_monitor_at(self, start_monitor_at):
        """Sets the start_monitor_at of this MonitorJsonldGet.

        When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.

        :param start_monitor_at: The start_monitor_at of this MonitorJsonldGet.
        :type start_monitor_at: datetime
        """

        self._start_monitor_at = start_monitor_at

    @property
    def start_monitor_at_utc(self):
        """Gets the start_monitor_at_utc of this MonitorJsonldGet.

        The startMonitorAt date-time in the UTC timezone.

        :return: The start_monitor_at_utc of this MonitorJsonldGet.
        :rtype: datetime
        """
        return self._start_monitor_at_utc

    @start_monitor_at_utc.setter
    def start_monitor_at_utc(self, start_monitor_at_utc):
        """Sets the start_monitor_at_utc of this MonitorJsonldGet.

        The startMonitorAt date-time in the UTC timezone.

        :param start_monitor_at_utc: The start_monitor_at_utc of this MonitorJsonldGet.
        :type start_monitor_at_utc: datetime
        """

        self._start_monitor_at_utc = start_monitor_at_utc

    @property
    def system_messages(self):
        """Gets the system_messages of this MonitorJsonldGet.

        Service notes regarding the resource.

        :return: The system_messages of this MonitorJsonldGet.
        :rtype: List[str]
        """
        return self._system_messages

    @system_messages.setter
    def system_messages(self, system_messages):
        """Sets the system_messages of this MonitorJsonldGet.

        Service notes regarding the resource.

        :param system_messages: The system_messages of this MonitorJsonldGet.
        :type system_messages: List[str]
        """

        self._system_messages = system_messages

    @property
    def timezone_code(self):
        """Gets the timezone_code of this MonitorJsonldGet.

        The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.

        :return: The timezone_code of this MonitorJsonldGet.
        :rtype: str
        """
        return self._timezone_code

    @timezone_code.setter
    def timezone_code(self, timezone_code):
        """Sets the timezone_code of this MonitorJsonldGet.

        The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.

        :param timezone_code: The timezone_code of this MonitorJsonldGet.
        :type timezone_code: str
        """
        if timezone_code is None:
            raise ValueError("Invalid value for `timezone_code`, must not be `None`")

        self._timezone_code = timezone_code

    @property
    def web_response_seconds_limit(self):
        """Gets the web_response_seconds_limit of this MonitorJsonldGet.

        The time in seconds that the Web Response monitor type must allow for the web page to respond.

        :return: The web_response_seconds_limit of this MonitorJsonldGet.
        :rtype: int
        """
        return self._web_response_seconds_limit

    @web_response_seconds_limit.setter
    def web_response_seconds_limit(self, web_response_seconds_limit):
        """Sets the web_response_seconds_limit of this MonitorJsonldGet.

        The time in seconds that the Web Response monitor type must allow for the web page to respond.

        :param web_response_seconds_limit: The web_response_seconds_limit of this MonitorJsonldGet.
        :type web_response_seconds_limit: int
        """
        if web_response_seconds_limit is not None and web_response_seconds_limit < 0:
            raise ValueError("Invalid value for `web_response_seconds_limit`, must be a value greater than or equal to `0`")

        self._web_response_seconds_limit = web_response_seconds_limit

    @property
    def web_response_url(self):
        """Gets the web_response_url of this MonitorJsonldGet.

        The URL that the Web Response monitor type must evaluate for the specified conditions.

        :return: The web_response_url of this MonitorJsonldGet.
        :rtype: str
        """
        return self._web_response_url

    @web_response_url.setter
    def web_response_url(self, web_response_url):
        """Sets the web_response_url of this MonitorJsonldGet.

        The URL that the Web Response monitor type must evaluate for the specified conditions.

        :param web_response_url: The web_response_url of this MonitorJsonldGet.
        :type web_response_url: str
        """

        self._web_response_url = web_response_url
