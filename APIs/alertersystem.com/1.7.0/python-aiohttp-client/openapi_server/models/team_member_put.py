# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamMemberPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_segment_code: str=None, team_member_role_code: str=None):
        """TeamMemberPut - a model defined in OpenAPI

        :param data_segment_code: The data_segment_code of this TeamMemberPut.
        :param team_member_role_code: The team_member_role_code of this TeamMemberPut.
        """
        self.openapi_types = {
            'data_segment_code': str,
            'team_member_role_code': str
        }

        self.attribute_map = {
            'data_segment_code': 'dataSegmentCode',
            'team_member_role_code': 'teamMemberRoleCode'
        }

        self._data_segment_code = data_segment_code
        self._team_member_role_code = team_member_role_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamMemberPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamMember-put of this TeamMemberPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TeamMemberPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TeamMemberPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TeamMemberPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TeamMemberPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def team_member_role_code(self):
        """Gets the team_member_role_code of this TeamMemberPut.

        The role of the team member on the team.

        :return: The team_member_role_code of this TeamMemberPut.
        :rtype: str
        """
        return self._team_member_role_code

    @team_member_role_code.setter
    def team_member_role_code(self, team_member_role_code):
        """Sets the team_member_role_code of this TeamMemberPut.

        The role of the team member on the team.

        :param team_member_role_code: The team_member_role_code of this TeamMemberPut.
        :type team_member_role_code: str
        """
        if team_member_role_code is None:
            raise ValueError("Invalid value for `team_member_role_code`, must not be `None`")

        self._team_member_role_code = team_member_role_code
