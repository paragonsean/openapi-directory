# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportContactEveryoneJsonldPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_everyone_category: str=None, contact_everyone_diffusion_name: str=None, contact_everyone_token: str=None, data_segment_code: str=None, transport_name: str=None):
        """TransportContactEveryoneJsonldPut - a model defined in OpenAPI

        :param contact_everyone_category: The contact_everyone_category of this TransportContactEveryoneJsonldPut.
        :param contact_everyone_diffusion_name: The contact_everyone_diffusion_name of this TransportContactEveryoneJsonldPut.
        :param contact_everyone_token: The contact_everyone_token of this TransportContactEveryoneJsonldPut.
        :param data_segment_code: The data_segment_code of this TransportContactEveryoneJsonldPut.
        :param transport_name: The transport_name of this TransportContactEveryoneJsonldPut.
        """
        self.openapi_types = {
            'contact_everyone_category': str,
            'contact_everyone_diffusion_name': str,
            'contact_everyone_token': str,
            'data_segment_code': str,
            'transport_name': str
        }

        self.attribute_map = {
            'contact_everyone_category': 'contactEveryoneCategory',
            'contact_everyone_diffusion_name': 'contactEveryoneDiffusionName',
            'contact_everyone_token': 'contactEveryoneToken',
            'data_segment_code': 'dataSegmentCode',
            'transport_name': 'transportName'
        }

        self._contact_everyone_category = contact_everyone_category
        self._contact_everyone_diffusion_name = contact_everyone_diffusion_name
        self._contact_everyone_token = contact_everyone_token
        self._data_segment_code = data_segment_code
        self._transport_name = transport_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportContactEveryoneJsonldPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportContactEveryone.jsonld-put of this TransportContactEveryoneJsonldPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_everyone_category(self):
        """Gets the contact_everyone_category of this TransportContactEveryoneJsonldPut.

        The label of the category that will be displayed in the external service event logs of the ContactEveryone service.

        :return: The contact_everyone_category of this TransportContactEveryoneJsonldPut.
        :rtype: str
        """
        return self._contact_everyone_category

    @contact_everyone_category.setter
    def contact_everyone_category(self, contact_everyone_category):
        """Sets the contact_everyone_category of this TransportContactEveryoneJsonldPut.

        The label of the category that will be displayed in the external service event logs of the ContactEveryone service.

        :param contact_everyone_category: The contact_everyone_category of this TransportContactEveryoneJsonldPut.
        :type contact_everyone_category: str
        """
        if contact_everyone_category is not None and len(contact_everyone_category) > 255:
            raise ValueError("Invalid value for `contact_everyone_category`, length must be less than or equal to `255`")

        self._contact_everyone_category = contact_everyone_category

    @property
    def contact_everyone_diffusion_name(self):
        """Gets the contact_everyone_diffusion_name of this TransportContactEveryoneJsonldPut.

        The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.

        :return: The contact_everyone_diffusion_name of this TransportContactEveryoneJsonldPut.
        :rtype: str
        """
        return self._contact_everyone_diffusion_name

    @contact_everyone_diffusion_name.setter
    def contact_everyone_diffusion_name(self, contact_everyone_diffusion_name):
        """Sets the contact_everyone_diffusion_name of this TransportContactEveryoneJsonldPut.

        The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.

        :param contact_everyone_diffusion_name: The contact_everyone_diffusion_name of this TransportContactEveryoneJsonldPut.
        :type contact_everyone_diffusion_name: str
        """
        if contact_everyone_diffusion_name is not None and len(contact_everyone_diffusion_name) > 255:
            raise ValueError("Invalid value for `contact_everyone_diffusion_name`, length must be less than or equal to `255`")

        self._contact_everyone_diffusion_name = contact_everyone_diffusion_name

    @property
    def contact_everyone_token(self):
        """Gets the contact_everyone_token of this TransportContactEveryoneJsonldPut.

        The token for the Contact Everyone service. Stored in encrypted format.

        :return: The contact_everyone_token of this TransportContactEveryoneJsonldPut.
        :rtype: str
        """
        return self._contact_everyone_token

    @contact_everyone_token.setter
    def contact_everyone_token(self, contact_everyone_token):
        """Sets the contact_everyone_token of this TransportContactEveryoneJsonldPut.

        The token for the Contact Everyone service. Stored in encrypted format.

        :param contact_everyone_token: The contact_everyone_token of this TransportContactEveryoneJsonldPut.
        :type contact_everyone_token: str
        """
        if contact_everyone_token is None:
            raise ValueError("Invalid value for `contact_everyone_token`, must not be `None`")
        if contact_everyone_token is not None and len(contact_everyone_token) > 1000:
            raise ValueError("Invalid value for `contact_everyone_token`, length must be less than or equal to `1000`")

        self._contact_everyone_token = contact_everyone_token

    @property
    def data_segment_code(self):
        """Gets the data_segment_code of this TransportContactEveryoneJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :return: The data_segment_code of this TransportContactEveryoneJsonldPut.
        :rtype: str
        """
        return self._data_segment_code

    @data_segment_code.setter
    def data_segment_code(self, data_segment_code):
        """Sets the data_segment_code of this TransportContactEveryoneJsonldPut.

        User-provided string on which to segment and filter data. Max 50 characters.

        :param data_segment_code: The data_segment_code of this TransportContactEveryoneJsonldPut.
        :type data_segment_code: str
        """
        if data_segment_code is not None and len(data_segment_code) > 50:
            raise ValueError("Invalid value for `data_segment_code`, length must be less than or equal to `50`")

        self._data_segment_code = data_segment_code

    @property
    def transport_name(self):
        """Gets the transport_name of this TransportContactEveryoneJsonldPut.

        The name of the transport.

        :return: The transport_name of this TransportContactEveryoneJsonldPut.
        :rtype: str
        """
        return self._transport_name

    @transport_name.setter
    def transport_name(self, transport_name):
        """Sets the transport_name of this TransportContactEveryoneJsonldPut.

        The name of the transport.

        :param transport_name: The transport_name of this TransportContactEveryoneJsonldPut.
        :type transport_name: str
        """
        if transport_name is None:
            raise ValueError("Invalid value for `transport_name`, must not be `None`")
        if transport_name is not None and len(transport_name) > 255:
            raise ValueError("Invalid value for `transport_name`, length must be less than or equal to `255`")

        self._transport_name = transport_name
