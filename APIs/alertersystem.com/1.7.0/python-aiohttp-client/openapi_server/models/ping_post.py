# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PingPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expect_next_ping_at: datetime=None, expect_next_ping_at_epoch: int=None, monitor: str=None, ping_custom_code: str=None, ping_custom_payload: str=None):
        """PingPost - a model defined in OpenAPI

        :param expect_next_ping_at: The expect_next_ping_at of this PingPost.
        :param expect_next_ping_at_epoch: The expect_next_ping_at_epoch of this PingPost.
        :param monitor: The monitor of this PingPost.
        :param ping_custom_code: The ping_custom_code of this PingPost.
        :param ping_custom_payload: The ping_custom_payload of this PingPost.
        """
        self.openapi_types = {
            'expect_next_ping_at': datetime,
            'expect_next_ping_at_epoch': int,
            'monitor': str,
            'ping_custom_code': str,
            'ping_custom_payload': str
        }

        self.attribute_map = {
            'expect_next_ping_at': 'expectNextPingAt',
            'expect_next_ping_at_epoch': 'expectNextPingAtEpoch',
            'monitor': 'monitor',
            'ping_custom_code': 'pingCustomCode',
            'ping_custom_payload': 'pingCustomPayload'
        }

        self._expect_next_ping_at = expect_next_ping_at
        self._expect_next_ping_at_epoch = expect_next_ping_at_epoch
        self._monitor = monitor
        self._ping_custom_code = ping_custom_code
        self._ping_custom_payload = ping_custom_payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PingPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ping-post of this PingPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expect_next_ping_at(self):
        """Gets the expect_next_ping_at of this PingPost.

        When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :return: The expect_next_ping_at of this PingPost.
        :rtype: datetime
        """
        return self._expect_next_ping_at

    @expect_next_ping_at.setter
    def expect_next_ping_at(self, expect_next_ping_at):
        """Sets the expect_next_ping_at of this PingPost.

        When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :param expect_next_ping_at: The expect_next_ping_at of this PingPost.
        :type expect_next_ping_at: datetime
        """

        self._expect_next_ping_at = expect_next_ping_at

    @property
    def expect_next_ping_at_epoch(self):
        """Gets the expect_next_ping_at_epoch of this PingPost.

        When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :return: The expect_next_ping_at_epoch of this PingPost.
        :rtype: int
        """
        return self._expect_next_ping_at_epoch

    @expect_next_ping_at_epoch.setter
    def expect_next_ping_at_epoch(self, expect_next_ping_at_epoch):
        """Sets the expect_next_ping_at_epoch of this PingPost.

        When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.

        :param expect_next_ping_at_epoch: The expect_next_ping_at_epoch of this PingPost.
        :type expect_next_ping_at_epoch: int
        """

        self._expect_next_ping_at_epoch = expect_next_ping_at_epoch

    @property
    def monitor(self):
        """Gets the monitor of this PingPost.

        The monitor that is related to this resource instance.

        :return: The monitor of this PingPost.
        :rtype: str
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this PingPost.

        The monitor that is related to this resource instance.

        :param monitor: The monitor of this PingPost.
        :type monitor: str
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")

        self._monitor = monitor

    @property
    def ping_custom_code(self):
        """Gets the ping_custom_code of this PingPost.

        The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.

        :return: The ping_custom_code of this PingPost.
        :rtype: str
        """
        return self._ping_custom_code

    @ping_custom_code.setter
    def ping_custom_code(self, ping_custom_code):
        """Sets the ping_custom_code of this PingPost.

        The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.

        :param ping_custom_code: The ping_custom_code of this PingPost.
        :type ping_custom_code: str
        """

        self._ping_custom_code = ping_custom_code

    @property
    def ping_custom_payload(self):
        """Gets the ping_custom_payload of this PingPost.

        The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.

        :return: The ping_custom_payload of this PingPost.
        :rtype: str
        """
        return self._ping_custom_payload

    @ping_custom_payload.setter
    def ping_custom_payload(self, ping_custom_payload):
        """Sets the ping_custom_payload of this PingPost.

        The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.

        :param ping_custom_payload: The ping_custom_payload of this PingPost.
        :type ping_custom_payload: str
        """

        self._ping_custom_payload = ping_custom_payload
