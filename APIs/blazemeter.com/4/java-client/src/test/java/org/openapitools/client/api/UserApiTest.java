/*
 * Blazemeter API Explorer
 * Live API Documentation
 *
 * The version of the OpenAPI document: 4
 * Contact: support@blazemeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * &amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activeSessionsTest() throws ApiException {
        Object response = api.activeSessions();
        // TODO: test validations
    }

    /**
     * &amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void panicTerminateTest() throws ApiException {
        Object blazemeterRoutingV4UserModel5 = null;
        Object response = api.panicTerminate(blazemeterRoutingV4UserModel5);
        // TODO: test validations
    }

    /**
     * Registration&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerTest() throws ApiException {
        Object blazemeterRoutingV4UserModel4 = null;
        Object response = api.register(blazemeterRoutingV4UserModel4);
        // TODO: test validations
    }

    /**
     * Registration&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerRetrieveTest() throws ApiException {
        String email = null;
        String password = null;
        String firstName = null;
        String lastName = null;
        Object response = api.registerRetrieve(email, password, firstName, lastName);
        // TODO: test validations
    }

    /**
     * List organization multi-tests&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCollectionsTest() throws ApiException {
        String skip = null;
        String limit = null;
        Object response = api.retrieveCollections(skip, limit);
        // TODO: test validations
    }

    /**
     * &amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveInvitesTest() throws ApiException {
        List<String> response = api.retrieveInvites();
        // TODO: test validations
    }

    /**
     * Get user available locations&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveLocationsTest() throws ApiException {
        Object response = api.retrieveLocations();
        // TODO: test validations
    }

    /**
     * List user private masters&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveMastersTest() throws ApiException {
        Long skip = null;
        Long limit = null;
        Object response = api.retrieveMasters(skip, limit);
        // TODO: test validations
    }

    /**
     * Get user projects&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveProjectsTest() throws ApiException {
        Object response = api.retrieveProjects();
        // TODO: test validations
    }

    /**
     * List user private tests&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTestsTest() throws ApiException {
        String skip = null;
        String limit = null;
        Object response = api.retrieveTests(skip, limit);
        // TODO: test validations
    }

    /**
     * &amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topTest() throws ApiException {
        List<String> response = api.top();
        // TODO: test validations
    }

    /**
     * Update user name&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userPasswordPatchTest() throws ApiException {
        Object blazemeterRoutingV4UserModel1 = null;
        Object response = api.userPasswordPatch(blazemeterRoutingV4UserModel1);
        // TODO: test validations
    }

    /**
     * Update user name&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userPasswordPostTest() throws ApiException {
        Object blazemeterRoutingV4UserModel3 = null;
        Object response = api.userPasswordPost(blazemeterRoutingV4UserModel3);
        // TODO: test validations
    }

    /**
     * Update user name&amp;nbsp; &lt;i class&#x3D;\&quot;fa fa-lg fa-unlock-alt\&quot;&gt;&lt;/i&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userPasswordPutTest() throws ApiException {
        Object blazemeterRoutingV4UserModel2 = null;
        Object response = api.userPasswordPut(blazemeterRoutingV4UserModel2);
        // TODO: test validations
    }

}
