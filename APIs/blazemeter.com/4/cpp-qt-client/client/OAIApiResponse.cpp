/**
 * Blazemeter API Explorer
 * Live API Documentation
 *
 * The version of the OpenAPI document: 4
 * Contact: support@blazemeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResponse::OAIApiResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResponse::OAIApiResponse() {
    this->initializeModel();
}

OAIApiResponse::~OAIApiResponse() {}

void OAIApiResponse::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIApiResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResponse::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIApiResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAIApiResponse::getApiVersion() const {
    return m_api_version;
}
void OAIApiResponse::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApiResponse::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApiResponse::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApiResponse::getError() const {
    return m_error;
}
void OAIApiResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIApiResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIApiResponse::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIApiResponse::getResult() const {
    return m_result;
}
void OAIApiResponse::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIApiResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIApiResponse::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIApiResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_version_isValid && m_error_isValid && m_result_isValid && true;
}

} // namespace OpenAPI
