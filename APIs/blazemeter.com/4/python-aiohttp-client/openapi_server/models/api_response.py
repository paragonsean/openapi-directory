# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, error: str=None, result: str=None):
        """ApiResponse - a model defined in OpenAPI

        :param api_version: The api_version of this ApiResponse.
        :param error: The error of this ApiResponse.
        :param result: The result of this ApiResponse.
        """
        self.openapi_types = {
            'api_version': str,
            'error': str,
            'result': str
        }

        self.attribute_map = {
            'api_version': 'api_version',
            'error': 'error',
            'result': 'result'
        }

        self._api_version = api_version
        self._error = error
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiResponse of this ApiResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this ApiResponse.


        :return: The api_version of this ApiResponse.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ApiResponse.


        :param api_version: The api_version of this ApiResponse.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")

        self._api_version = api_version

    @property
    def error(self):
        """Gets the error of this ApiResponse.


        :return: The error of this ApiResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApiResponse.


        :param error: The error of this ApiResponse.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def result(self):
        """Gets the result of this ApiResponse.


        :return: The result of this ApiResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ApiResponse.


        :param result: The result of this ApiResponse.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result
