/**
 * Blazemeter API Explorer
 * Live API Documentation
 *
 * The version of the OpenAPI document: 4
 * Contact: support@blazemeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlazemeterApiExplorer);
  }
}(this, function(expect, BlazemeterApiExplorer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlazemeterApiExplorer.UserApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserApi', function() {
    describe('activeSessions', function() {
      it('should call activeSessions successfully', function(done) {
        //uncomment below and update the code to test activeSessions
        //instance.activeSessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('panicTerminate', function() {
      it('should call panicTerminate successfully', function(done) {
        //uncomment below and update the code to test panicTerminate
        //instance.panicTerminate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('register', function() {
      it('should call register successfully', function(done) {
        //uncomment below and update the code to test register
        //instance.register(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerRetrieve', function() {
      it('should call registerRetrieve successfully', function(done) {
        //uncomment below and update the code to test registerRetrieve
        //instance.registerRetrieve(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveCollections', function() {
      it('should call retrieveCollections successfully', function(done) {
        //uncomment below and update the code to test retrieveCollections
        //instance.retrieveCollections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveInvites', function() {
      it('should call retrieveInvites successfully', function(done) {
        //uncomment below and update the code to test retrieveInvites
        //instance.retrieveInvites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveLocations', function() {
      it('should call retrieveLocations successfully', function(done) {
        //uncomment below and update the code to test retrieveLocations
        //instance.retrieveLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveMasters', function() {
      it('should call retrieveMasters successfully', function(done) {
        //uncomment below and update the code to test retrieveMasters
        //instance.retrieveMasters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveProjects', function() {
      it('should call retrieveProjects successfully', function(done) {
        //uncomment below and update the code to test retrieveProjects
        //instance.retrieveProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveTests', function() {
      it('should call retrieveTests successfully', function(done) {
        //uncomment below and update the code to test retrieveTests
        //instance.retrieveTests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('top', function() {
      it('should call top successfully', function(done) {
        //uncomment below and update the code to test top
        //instance.top(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userPasswordPatch', function() {
      it('should call userPasswordPatch successfully', function(done) {
        //uncomment below and update the code to test userPasswordPatch
        //instance.userPasswordPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userPasswordPost', function() {
      it('should call userPasswordPost successfully', function(done) {
        //uncomment below and update the code to test userPasswordPost
        //instance.userPasswordPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userPasswordPut', function() {
      it('should call userPasswordPut successfully', function(done) {
        //uncomment below and update the code to test userPasswordPut
        //instance.userPasswordPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
