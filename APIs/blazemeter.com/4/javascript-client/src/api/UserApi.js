/**
 * Blazemeter API Explorer
 * Live API Documentation
 *
 * The version of the OpenAPI document: 4
 * Contact: support@blazemeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* User service.
* @module api/UserApi
* @version 4
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activeSessions operation.
     * @callback module:api/UserApi~activeSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {module:api/UserApi~activeSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    activeSessions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/active/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the panicTerminate operation.
     * @callback module:api/UserApi~panicTerminateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [blazemeterRoutingV4UserModel5] <section class=\"body-param\"><strong>session_ids</strong> (required)<br/></section>
     * @param {module:api/UserApi~panicTerminateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    panicTerminate(opts, callback) {
      opts = opts || {};
      let postBody = opts['blazemeterRoutingV4UserModel5'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json', 'multipart/form-data', 'text/csv', 'text/plain'];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/active/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/UserApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object.<String, Object>} blazemeterRoutingV4UserModel4 <section class=\"body-param\"><strong>firstName</strong> (required)<br/><strong>lastName</strong> (required)<br/><strong>email</strong> (required)<br/><strong>password</strong> (required)<br/></section>
     * @param {module:api/UserApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    register(blazemeterRoutingV4UserModel4, callback) {
      let postBody = blazemeterRoutingV4UserModel4;
      // verify the required parameter 'blazemeterRoutingV4UserModel4' is set
      if (blazemeterRoutingV4UserModel4 === undefined || blazemeterRoutingV4UserModel4 === null) {
        throw new Error("Missing the required parameter 'blazemeterRoutingV4UserModel4' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json', 'multipart/form-data', 'text/csv', 'text/plain'];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerRetrieve operation.
     * @callback module:api/UserApi~registerRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {String} email Email address
     * @param {String} password Password
     * @param {Object} opts Optional parameters
     * @param {String} [firstName] First name
     * @param {String} [lastName] Last name
     * @param {module:api/UserApi~registerRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerRetrieve(email, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling registerRetrieve");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling registerRetrieve");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'password': password,
        'firstName': opts['firstName'],
        'lastName': opts['lastName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/register', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCollections operation.
     * @callback module:api/UserApi~retrieveCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization multi-tests&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object} opts Optional parameters
     * @param {String} [skip] 
     * @param {String} [limit] 
     * @param {module:api/UserApi~retrieveCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    retrieveCollections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveInvites operation.
     * @callback module:api/UserApi~retrieveInvitesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {module:api/UserApi~retrieveInvitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    retrieveInvites(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/user/invites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLocations operation.
     * @callback module:api/UserApi~retrieveLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user available locations&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {module:api/UserApi~retrieveLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    retrieveLocations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveMasters operation.
     * @callback module:api/UserApi~retrieveMastersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user private masters&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object} opts Optional parameters
     * @param {Number} [skip] 
     * @param {Number} [limit = 1000)] 
     * @param {module:api/UserApi~retrieveMastersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    retrieveMasters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/masters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveProjects operation.
     * @callback module:api/UserApi~retrieveProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user projects&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {module:api/UserApi~retrieveProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    retrieveProjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveTests operation.
     * @callback module:api/UserApi~retrieveTestsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user private tests&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object} opts Optional parameters
     * @param {String} [skip] 
     * @param {String} [limit] 
     * @param {module:api/UserApi~retrieveTestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    retrieveTests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/tests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the top operation.
     * @callback module:api/UserApi~topCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {module:api/UserApi~topCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    top(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/user/top', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPasswordPatch operation.
     * @callback module:api/UserApi~userPasswordPatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user name&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object.<String, Object>} blazemeterRoutingV4UserModel1 <section class=\"body-param\"><strong>currentPassword</strong> (required)<br/><strong>newPassword</strong> (required)<br/></section>
     * @param {module:api/UserApi~userPasswordPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    userPasswordPatch(blazemeterRoutingV4UserModel1, callback) {
      let postBody = blazemeterRoutingV4UserModel1;
      // verify the required parameter 'blazemeterRoutingV4UserModel1' is set
      if (blazemeterRoutingV4UserModel1 === undefined || blazemeterRoutingV4UserModel1 === null) {
        throw new Error("Missing the required parameter 'blazemeterRoutingV4UserModel1' when calling userPasswordPatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json', 'multipart/form-data', 'text/csv', 'text/plain'];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPasswordPost operation.
     * @callback module:api/UserApi~userPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user name&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object.<String, Object>} blazemeterRoutingV4UserModel3 <section class=\"body-param\"><strong>currentPassword</strong> (required)<br/><strong>newPassword</strong> (required)<br/></section>
     * @param {module:api/UserApi~userPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    userPasswordPost(blazemeterRoutingV4UserModel3, callback) {
      let postBody = blazemeterRoutingV4UserModel3;
      // verify the required parameter 'blazemeterRoutingV4UserModel3' is set
      if (blazemeterRoutingV4UserModel3 === undefined || blazemeterRoutingV4UserModel3 === null) {
        throw new Error("Missing the required parameter 'blazemeterRoutingV4UserModel3' when calling userPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json', 'multipart/form-data', 'text/csv', 'text/plain'];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPasswordPut operation.
     * @callback module:api/UserApi~userPasswordPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user name&nbsp; <i class=\"fa fa-lg fa-unlock-alt\"></i>
     * @param {Object.<String, Object>} blazemeterRoutingV4UserModel2 <section class=\"body-param\"><strong>currentPassword</strong> (required)<br/><strong>newPassword</strong> (required)<br/></section>
     * @param {module:api/UserApi~userPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    userPasswordPut(blazemeterRoutingV4UserModel2, callback) {
      let postBody = blazemeterRoutingV4UserModel2;
      // verify the required parameter 'blazemeterRoutingV4UserModel2' is set
      if (blazemeterRoutingV4UserModel2 === undefined || blazemeterRoutingV4UserModel2 === null) {
        throw new Error("Missing the required parameter 'blazemeterRoutingV4UserModel2' when calling userPasswordPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json', 'multipart/form-data', 'text/csv', 'text/plain'];
      let accepts = ['application/json', 'text/html', 'text/javascript', 'text/csv', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
