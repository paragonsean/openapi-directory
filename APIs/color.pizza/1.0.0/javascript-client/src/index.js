/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Color from './model/Color';
import ColorBase from './model/ColorBase';
import ColorBaseSwatchImg from './model/ColorBaseSwatchImg';
import ColorHsl from './model/ColorHsl';
import ColorLab from './model/ColorLab';
import ColorRgb from './model/ColorRgb';
import Error from './model/Error';
import Get200Response from './model/Get200Response';
import ListDescription from './model/ListDescription';
import ListsGet200Response from './model/ListsGet200Response';
import ListsGet200ResponseListDescriptions from './model/ListsGet200ResponseListDescriptions';
import PossibleLists from './model/PossibleLists';
import DefaultApi from './api/DefaultApi';


/**
* An API that provides names for colors based on their hex value.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ColorNameApi = require('index'); // See note below*.
* var xxxSvc = new ColorNameApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ColorNameApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ColorNameApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ColorNameApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Color model constructor.
     * @property {module:model/Color}
     */
    Color,

    /**
     * The ColorBase model constructor.
     * @property {module:model/ColorBase}
     */
    ColorBase,

    /**
     * The ColorBaseSwatchImg model constructor.
     * @property {module:model/ColorBaseSwatchImg}
     */
    ColorBaseSwatchImg,

    /**
     * The ColorHsl model constructor.
     * @property {module:model/ColorHsl}
     */
    ColorHsl,

    /**
     * The ColorLab model constructor.
     * @property {module:model/ColorLab}
     */
    ColorLab,

    /**
     * The ColorRgb model constructor.
     * @property {module:model/ColorRgb}
     */
    ColorRgb,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Get200Response model constructor.
     * @property {module:model/Get200Response}
     */
    Get200Response,

    /**
     * The ListDescription model constructor.
     * @property {module:model/ListDescription}
     */
    ListDescription,

    /**
     * The ListsGet200Response model constructor.
     * @property {module:model/ListsGet200Response}
     */
    ListsGet200Response,

    /**
     * The ListsGet200ResponseListDescriptions model constructor.
     * @property {module:model/ListsGet200ResponseListDescriptions}
     */
    ListsGet200ResponseListDescriptions,

    /**
     * The PossibleLists model constructor.
     * @property {module:model/PossibleLists}
     */
    PossibleLists,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
