/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColorHsl from './ColorHsl';
import ColorLab from './ColorLab';
import ColorRgb from './ColorRgb';

/**
 * The Color model module.
 * @module model/Color
 * @version 1.0.0
 */
class Color {
    /**
     * Constructs a new <code>Color</code>.
     * @alias module:model/Color
     */
    constructor() { 
        
        Color.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Color</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Color} obj Optional instance to populate.
     * @return {module:model/Color} The populated <code>Color</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Color();

            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('hex')) {
                obj['hex'] = ApiClient.convertToType(data['hex'], 'String');
            }
            if (data.hasOwnProperty('hsl')) {
                obj['hsl'] = ColorHsl.constructFromObject(data['hsl']);
            }
            if (data.hasOwnProperty('lab')) {
                obj['lab'] = ColorLab.constructFromObject(data['lab']);
            }
            if (data.hasOwnProperty('luminance')) {
                obj['luminance'] = ApiClient.convertToType(data['luminance'], 'Number');
            }
            if (data.hasOwnProperty('luminanceWCAG')) {
                obj['luminanceWCAG'] = ApiClient.convertToType(data['luminanceWCAG'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requestedHex')) {
                obj['requestedHex'] = ApiClient.convertToType(data['requestedHex'], 'String');
            }
            if (data.hasOwnProperty('rgb')) {
                obj['rgb'] = ColorRgb.constructFromObject(data['rgb']);
            }
            if (data.hasOwnProperty('svg')) {
                obj['svg'] = ApiClient.convertToType(data['svg'], 'String');
            }
            if (data.hasOwnProperty('svgNamed')) {
                obj['svgNamed'] = ApiClient.convertToType(data['svgNamed'], 'String');
            }
            if (data.hasOwnProperty('swatchImg')) {
                obj['swatchImg'] = ApiClient.convertToType(data['swatchImg'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Color</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Color</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hex'] && !(typeof data['hex'] === 'string' || data['hex'] instanceof String)) {
            throw new Error("Expected the field `hex` to be a primitive type in the JSON string but got " + data['hex']);
        }
        // validate the optional field `hsl`
        if (data['hsl']) { // data not null
          ColorHsl.validateJSON(data['hsl']);
        }
        // validate the optional field `lab`
        if (data['lab']) { // data not null
          ColorLab.validateJSON(data['lab']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['requestedHex'] && !(typeof data['requestedHex'] === 'string' || data['requestedHex'] instanceof String)) {
            throw new Error("Expected the field `requestedHex` to be a primitive type in the JSON string but got " + data['requestedHex']);
        }
        // validate the optional field `rgb`
        if (data['rgb']) { // data not null
          ColorRgb.validateJSON(data['rgb']);
        }
        // ensure the json data is a string
        if (data['svg'] && !(typeof data['svg'] === 'string' || data['svg'] instanceof String)) {
            throw new Error("Expected the field `svg` to be a primitive type in the JSON string but got " + data['svg']);
        }
        // ensure the json data is a string
        if (data['svgNamed'] && !(typeof data['svgNamed'] === 'string' || data['svgNamed'] instanceof String)) {
            throw new Error("Expected the field `svgNamed` to be a primitive type in the JSON string but got " + data['svgNamed']);
        }

        return true;
    }


}



/**
 * @member {Number} distance
 */
Color.prototype['distance'] = undefined;

/**
 * @member {String} hex
 */
Color.prototype['hex'] = undefined;

/**
 * @member {module:model/ColorHsl} hsl
 */
Color.prototype['hsl'] = undefined;

/**
 * @member {module:model/ColorLab} lab
 */
Color.prototype['lab'] = undefined;

/**
 * @member {Number} luminance
 */
Color.prototype['luminance'] = undefined;

/**
 * @member {Number} luminanceWCAG
 */
Color.prototype['luminanceWCAG'] = undefined;

/**
 * @member {String} name
 */
Color.prototype['name'] = undefined;

/**
 * @member {String} requestedHex
 */
Color.prototype['requestedHex'] = undefined;

/**
 * @member {module:model/ColorRgb} rgb
 */
Color.prototype['rgb'] = undefined;

/**
 * @member {String} svg
 */
Color.prototype['svg'] = undefined;

/**
 * @member {String} svgNamed
 */
Color.prototype['svgNamed'] = undefined;

/**
 * @member {Object} swatchImg
 */
Color.prototype['swatchImg'] = undefined;






export default Color;

