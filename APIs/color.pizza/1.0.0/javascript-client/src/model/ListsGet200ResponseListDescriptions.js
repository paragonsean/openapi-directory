/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListDescription from './ListDescription';

/**
 * The ListsGet200ResponseListDescriptions model module.
 * @module model/ListsGet200ResponseListDescriptions
 * @version 1.0.0
 */
class ListsGet200ResponseListDescriptions {
    /**
     * Constructs a new <code>ListsGet200ResponseListDescriptions</code>.
     * @alias module:model/ListsGet200ResponseListDescriptions
     */
    constructor() { 
        
        ListsGet200ResponseListDescriptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListsGet200ResponseListDescriptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListsGet200ResponseListDescriptions} obj Optional instance to populate.
     * @return {module:model/ListsGet200ResponseListDescriptions} The populated <code>ListsGet200ResponseListDescriptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListsGet200ResponseListDescriptions();

            if (data.hasOwnProperty('basic')) {
                obj['basic'] = ListDescription.constructFromObject(data['basic']);
            }
            if (data.hasOwnProperty('bestOf')) {
                obj['bestOf'] = ListDescription.constructFromObject(data['bestOf']);
            }
            if (data.hasOwnProperty('chineseTraditional')) {
                obj['chineseTraditional'] = ListDescription.constructFromObject(data['chineseTraditional']);
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ListDescription.constructFromObject(data['default']);
            }
            if (data.hasOwnProperty('french')) {
                obj['french'] = ListDescription.constructFromObject(data['french']);
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ListDescription.constructFromObject(data['html']);
            }
            if (data.hasOwnProperty('japaneseTraditional')) {
                obj['japaneseTraditional'] = ListDescription.constructFromObject(data['japaneseTraditional']);
            }
            if (data.hasOwnProperty('leCorbusier')) {
                obj['leCorbusier'] = ListDescription.constructFromObject(data['leCorbusier']);
            }
            if (data.hasOwnProperty('nbsIscc')) {
                obj['nbsIscc'] = ListDescription.constructFromObject(data['nbsIscc']);
            }
            if (data.hasOwnProperty('ntc')) {
                obj['ntc'] = ListDescription.constructFromObject(data['ntc']);
            }
            if (data.hasOwnProperty('osxcrayons')) {
                obj['osxcrayons'] = ListDescription.constructFromObject(data['osxcrayons']);
            }
            if (data.hasOwnProperty('ral')) {
                obj['ral'] = ListDescription.constructFromObject(data['ral']);
            }
            if (data.hasOwnProperty('ridgway')) {
                obj['ridgway'] = ListDescription.constructFromObject(data['ridgway']);
            }
            if (data.hasOwnProperty('risograph')) {
                obj['risograph'] = ListDescription.constructFromObject(data['risograph']);
            }
            if (data.hasOwnProperty('sanzoWadaI')) {
                obj['sanzoWadaI'] = ListDescription.constructFromObject(data['sanzoWadaI']);
            }
            if (data.hasOwnProperty('thesaurus')) {
                obj['thesaurus'] = ListDescription.constructFromObject(data['thesaurus']);
            }
            if (data.hasOwnProperty('werner')) {
                obj['werner'] = ListDescription.constructFromObject(data['werner']);
            }
            if (data.hasOwnProperty('wikipedia')) {
                obj['wikipedia'] = ListDescription.constructFromObject(data['wikipedia']);
            }
            if (data.hasOwnProperty('windows')) {
                obj['windows'] = ListDescription.constructFromObject(data['windows']);
            }
            if (data.hasOwnProperty('x11')) {
                obj['x11'] = ListDescription.constructFromObject(data['x11']);
            }
            if (data.hasOwnProperty('xkcd')) {
                obj['xkcd'] = ListDescription.constructFromObject(data['xkcd']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListsGet200ResponseListDescriptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListsGet200ResponseListDescriptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `basic`
        if (data['basic']) { // data not null
          ListDescription.validateJSON(data['basic']);
        }
        // validate the optional field `bestOf`
        if (data['bestOf']) { // data not null
          ListDescription.validateJSON(data['bestOf']);
        }
        // validate the optional field `chineseTraditional`
        if (data['chineseTraditional']) { // data not null
          ListDescription.validateJSON(data['chineseTraditional']);
        }
        // validate the optional field `default`
        if (data['default']) { // data not null
          ListDescription.validateJSON(data['default']);
        }
        // validate the optional field `french`
        if (data['french']) { // data not null
          ListDescription.validateJSON(data['french']);
        }
        // validate the optional field `html`
        if (data['html']) { // data not null
          ListDescription.validateJSON(data['html']);
        }
        // validate the optional field `japaneseTraditional`
        if (data['japaneseTraditional']) { // data not null
          ListDescription.validateJSON(data['japaneseTraditional']);
        }
        // validate the optional field `leCorbusier`
        if (data['leCorbusier']) { // data not null
          ListDescription.validateJSON(data['leCorbusier']);
        }
        // validate the optional field `nbsIscc`
        if (data['nbsIscc']) { // data not null
          ListDescription.validateJSON(data['nbsIscc']);
        }
        // validate the optional field `ntc`
        if (data['ntc']) { // data not null
          ListDescription.validateJSON(data['ntc']);
        }
        // validate the optional field `osxcrayons`
        if (data['osxcrayons']) { // data not null
          ListDescription.validateJSON(data['osxcrayons']);
        }
        // validate the optional field `ral`
        if (data['ral']) { // data not null
          ListDescription.validateJSON(data['ral']);
        }
        // validate the optional field `ridgway`
        if (data['ridgway']) { // data not null
          ListDescription.validateJSON(data['ridgway']);
        }
        // validate the optional field `risograph`
        if (data['risograph']) { // data not null
          ListDescription.validateJSON(data['risograph']);
        }
        // validate the optional field `sanzoWadaI`
        if (data['sanzoWadaI']) { // data not null
          ListDescription.validateJSON(data['sanzoWadaI']);
        }
        // validate the optional field `thesaurus`
        if (data['thesaurus']) { // data not null
          ListDescription.validateJSON(data['thesaurus']);
        }
        // validate the optional field `werner`
        if (data['werner']) { // data not null
          ListDescription.validateJSON(data['werner']);
        }
        // validate the optional field `wikipedia`
        if (data['wikipedia']) { // data not null
          ListDescription.validateJSON(data['wikipedia']);
        }
        // validate the optional field `windows`
        if (data['windows']) { // data not null
          ListDescription.validateJSON(data['windows']);
        }
        // validate the optional field `x11`
        if (data['x11']) { // data not null
          ListDescription.validateJSON(data['x11']);
        }
        // validate the optional field `xkcd`
        if (data['xkcd']) { // data not null
          ListDescription.validateJSON(data['xkcd']);
        }

        return true;
    }


}



/**
 * @member {module:model/ListDescription} basic
 */
ListsGet200ResponseListDescriptions.prototype['basic'] = undefined;

/**
 * @member {module:model/ListDescription} bestOf
 */
ListsGet200ResponseListDescriptions.prototype['bestOf'] = undefined;

/**
 * @member {module:model/ListDescription} chineseTraditional
 */
ListsGet200ResponseListDescriptions.prototype['chineseTraditional'] = undefined;

/**
 * @member {module:model/ListDescription} default
 */
ListsGet200ResponseListDescriptions.prototype['default'] = undefined;

/**
 * @member {module:model/ListDescription} french
 */
ListsGet200ResponseListDescriptions.prototype['french'] = undefined;

/**
 * @member {module:model/ListDescription} html
 */
ListsGet200ResponseListDescriptions.prototype['html'] = undefined;

/**
 * @member {module:model/ListDescription} japaneseTraditional
 */
ListsGet200ResponseListDescriptions.prototype['japaneseTraditional'] = undefined;

/**
 * @member {module:model/ListDescription} leCorbusier
 */
ListsGet200ResponseListDescriptions.prototype['leCorbusier'] = undefined;

/**
 * @member {module:model/ListDescription} nbsIscc
 */
ListsGet200ResponseListDescriptions.prototype['nbsIscc'] = undefined;

/**
 * @member {module:model/ListDescription} ntc
 */
ListsGet200ResponseListDescriptions.prototype['ntc'] = undefined;

/**
 * @member {module:model/ListDescription} osxcrayons
 */
ListsGet200ResponseListDescriptions.prototype['osxcrayons'] = undefined;

/**
 * @member {module:model/ListDescription} ral
 */
ListsGet200ResponseListDescriptions.prototype['ral'] = undefined;

/**
 * @member {module:model/ListDescription} ridgway
 */
ListsGet200ResponseListDescriptions.prototype['ridgway'] = undefined;

/**
 * @member {module:model/ListDescription} risograph
 */
ListsGet200ResponseListDescriptions.prototype['risograph'] = undefined;

/**
 * @member {module:model/ListDescription} sanzoWadaI
 */
ListsGet200ResponseListDescriptions.prototype['sanzoWadaI'] = undefined;

/**
 * @member {module:model/ListDescription} thesaurus
 */
ListsGet200ResponseListDescriptions.prototype['thesaurus'] = undefined;

/**
 * @member {module:model/ListDescription} werner
 */
ListsGet200ResponseListDescriptions.prototype['werner'] = undefined;

/**
 * @member {module:model/ListDescription} wikipedia
 */
ListsGet200ResponseListDescriptions.prototype['wikipedia'] = undefined;

/**
 * @member {module:model/ListDescription} windows
 */
ListsGet200ResponseListDescriptions.prototype['windows'] = undefined;

/**
 * @member {module:model/ListDescription} x11
 */
ListsGet200ResponseListDescriptions.prototype['x11'] = undefined;

/**
 * @member {module:model/ListDescription} xkcd
 */
ListsGet200ResponseListDescriptions.prototype['xkcd'] = undefined;






export default ListsGet200ResponseListDescriptions;

