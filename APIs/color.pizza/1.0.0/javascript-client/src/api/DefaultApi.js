/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Get200Response from '../model/Get200Response';
import ListsGet200Response from '../model/ListsGet200Response';
import PossibleLists from '../model/PossibleLists';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listsGet operation.
     * @callback module:api/DefaultApi~listsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all colors of the default color name list
     * @param {module:api/DefaultApi~listsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListsGet200Response}
     */
    listsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListsGet200Response;
      return this.apiClient.callApi(
        '/lists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesGet operation.
     * @callback module:api/DefaultApi~namesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all colors of the default color name list
     * @param {String} name The name of the color to retrieve (min 3 characters)
     * @param {Object} opts Optional parameters
     * @param {module:model/PossibleLists} [list] The name of the color name list to use
     * @param {module:api/DefaultApi~namesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get200Response}
     */
    namesGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling namesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'list': opts['list']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Get200Response;
      return this.apiClient.callApi(
        '/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rootGet operation.
     * @callback module:api/DefaultApi~rootGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all colors of the default color name list
     * @param {Object} opts Optional parameters
     * @param {module:model/PossibleLists} [list] The name of the color name list to use
     * @param {String} [values] The hex values of the colors to retrieve without '#'
     * @param {Boolean} [noduplicates] Allow duplicate names or not
     * @param {module:api/DefaultApi~rootGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get200Response}
     */
    rootGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'list': opts['list'],
        'values': opts['values'],
        'noduplicates': opts['noduplicates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Get200Response;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swatchGet operation.
     * @callback module:api/DefaultApi~swatchGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a color swatch for any color
     * @param {String} color The hex value of the color to retrieve without '#'
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the color
     * @param {module:api/DefaultApi~swatchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    swatchGet(color, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'color' is set
      if (color === undefined || color === null) {
        throw new Error("Missing the required parameter 'color' when calling swatchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'color': color,
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/swatch/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
