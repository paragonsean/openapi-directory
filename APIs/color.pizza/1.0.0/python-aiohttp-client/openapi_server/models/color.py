# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color_hsl import ColorHsl
from openapi_server.models.color_lab import ColorLab
from openapi_server.models.color_rgb import ColorRgb
from openapi_server import util


class Color(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: float=None, hex: str=None, hsl: ColorHsl=None, lab: ColorLab=None, luminance: float=None, luminance_wcag: float=None, name: str=None, requested_hex: str=None, rgb: ColorRgb=None, svg: str=None, svg_named: str=None, swatch_img: object=None):
        """Color - a model defined in OpenAPI

        :param distance: The distance of this Color.
        :param hex: The hex of this Color.
        :param hsl: The hsl of this Color.
        :param lab: The lab of this Color.
        :param luminance: The luminance of this Color.
        :param luminance_wcag: The luminance_wcag of this Color.
        :param name: The name of this Color.
        :param requested_hex: The requested_hex of this Color.
        :param rgb: The rgb of this Color.
        :param svg: The svg of this Color.
        :param svg_named: The svg_named of this Color.
        :param swatch_img: The swatch_img of this Color.
        """
        self.openapi_types = {
            'distance': float,
            'hex': str,
            'hsl': ColorHsl,
            'lab': ColorLab,
            'luminance': float,
            'luminance_wcag': float,
            'name': str,
            'requested_hex': str,
            'rgb': ColorRgb,
            'svg': str,
            'svg_named': str,
            'swatch_img': object
        }

        self.attribute_map = {
            'distance': 'distance',
            'hex': 'hex',
            'hsl': 'hsl',
            'lab': 'lab',
            'luminance': 'luminance',
            'luminance_wcag': 'luminanceWCAG',
            'name': 'name',
            'requested_hex': 'requestedHex',
            'rgb': 'rgb',
            'svg': 'svg',
            'svg_named': 'svgNamed',
            'swatch_img': 'swatchImg'
        }

        self._distance = distance
        self._hex = hex
        self._hsl = hsl
        self._lab = lab
        self._luminance = luminance
        self._luminance_wcag = luminance_wcag
        self._name = name
        self._requested_hex = requested_hex
        self._rgb = rgb
        self._svg = svg
        self._svg_named = svg_named
        self._swatch_img = swatch_img

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Color':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The color of this Color.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this Color.


        :return: The distance of this Color.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Color.


        :param distance: The distance of this Color.
        :type distance: float
        """

        self._distance = distance

    @property
    def hex(self):
        """Gets the hex of this Color.


        :return: The hex of this Color.
        :rtype: str
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this Color.


        :param hex: The hex of this Color.
        :type hex: str
        """

        self._hex = hex

    @property
    def hsl(self):
        """Gets the hsl of this Color.


        :return: The hsl of this Color.
        :rtype: ColorHsl
        """
        return self._hsl

    @hsl.setter
    def hsl(self, hsl):
        """Sets the hsl of this Color.


        :param hsl: The hsl of this Color.
        :type hsl: ColorHsl
        """

        self._hsl = hsl

    @property
    def lab(self):
        """Gets the lab of this Color.


        :return: The lab of this Color.
        :rtype: ColorLab
        """
        return self._lab

    @lab.setter
    def lab(self, lab):
        """Sets the lab of this Color.


        :param lab: The lab of this Color.
        :type lab: ColorLab
        """

        self._lab = lab

    @property
    def luminance(self):
        """Gets the luminance of this Color.


        :return: The luminance of this Color.
        :rtype: float
        """
        return self._luminance

    @luminance.setter
    def luminance(self, luminance):
        """Sets the luminance of this Color.


        :param luminance: The luminance of this Color.
        :type luminance: float
        """

        self._luminance = luminance

    @property
    def luminance_wcag(self):
        """Gets the luminance_wcag of this Color.


        :return: The luminance_wcag of this Color.
        :rtype: float
        """
        return self._luminance_wcag

    @luminance_wcag.setter
    def luminance_wcag(self, luminance_wcag):
        """Sets the luminance_wcag of this Color.


        :param luminance_wcag: The luminance_wcag of this Color.
        :type luminance_wcag: float
        """

        self._luminance_wcag = luminance_wcag

    @property
    def name(self):
        """Gets the name of this Color.


        :return: The name of this Color.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Color.


        :param name: The name of this Color.
        :type name: str
        """

        self._name = name

    @property
    def requested_hex(self):
        """Gets the requested_hex of this Color.


        :return: The requested_hex of this Color.
        :rtype: str
        """
        return self._requested_hex

    @requested_hex.setter
    def requested_hex(self, requested_hex):
        """Sets the requested_hex of this Color.


        :param requested_hex: The requested_hex of this Color.
        :type requested_hex: str
        """

        self._requested_hex = requested_hex

    @property
    def rgb(self):
        """Gets the rgb of this Color.


        :return: The rgb of this Color.
        :rtype: ColorRgb
        """
        return self._rgb

    @rgb.setter
    def rgb(self, rgb):
        """Sets the rgb of this Color.


        :param rgb: The rgb of this Color.
        :type rgb: ColorRgb
        """

        self._rgb = rgb

    @property
    def svg(self):
        """Gets the svg of this Color.


        :return: The svg of this Color.
        :rtype: str
        """
        return self._svg

    @svg.setter
    def svg(self, svg):
        """Sets the svg of this Color.


        :param svg: The svg of this Color.
        :type svg: str
        """

        self._svg = svg

    @property
    def svg_named(self):
        """Gets the svg_named of this Color.


        :return: The svg_named of this Color.
        :rtype: str
        """
        return self._svg_named

    @svg_named.setter
    def svg_named(self, svg_named):
        """Sets the svg_named of this Color.


        :param svg_named: The svg_named of this Color.
        :type svg_named: str
        """

        self._svg_named = svg_named

    @property
    def swatch_img(self):
        """Gets the swatch_img of this Color.


        :return: The swatch_img of this Color.
        :rtype: object
        """
        return self._swatch_img

    @swatch_img.setter
    def swatch_img(self, swatch_img):
        """Sets the swatch_img of this Color.


        :param swatch_img: The swatch_img of this Color.
        :type swatch_img: object
        """

        self._swatch_img = swatch_img
