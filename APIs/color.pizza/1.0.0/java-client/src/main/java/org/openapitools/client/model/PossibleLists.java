/*
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets possibleLists
 */
@JsonAdapter(PossibleLists.Adapter.class)
public enum PossibleLists {
  
  DEFAULT("default"),
  
  BEST_OF("bestOf"),
  
  WIKIPEDIA("wikipedia"),
  
  FRENCH("french"),
  
  RIDGWAY("ridgway"),
  
  RISOGRAPH("risograph"),
  
  BASIC("basic"),
  
  CHINESE_TRADITIONAL("chineseTraditional"),
  
  HTML("html"),
  
  JAPANESE_TRADITIONAL("japaneseTraditional"),
  
  LE_CORBUSIER("leCorbusier"),
  
  NBS_ISCC("nbsIscc"),
  
  NTC("ntc"),
  
  OSXCRAYONS("osxcrayons"),
  
  RAL("ral"),
  
  SANZO_WADA_I("sanzoWadaI"),
  
  THESAURUS("thesaurus"),
  
  WERNER("werner"),
  
  WINDOWS("windows"),
  
  X11("x11"),
  
  XKCD("xkcd");

  private String value;

  PossibleLists(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PossibleLists fromValue(String value) {
    for (PossibleLists b : PossibleLists.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PossibleLists> {
    @Override
    public void write(final JsonWriter jsonWriter, final PossibleLists enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PossibleLists read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PossibleLists.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    PossibleLists.fromValue(value);
  }
}

