/*
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ColorHsl;
import org.openapitools.client.model.ColorLab;
import org.openapitools.client.model.ColorRgb;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Color
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:38.891030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Color {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private BigDecimal distance;

  public static final String SERIALIZED_NAME_HEX = "hex";
  @SerializedName(SERIALIZED_NAME_HEX)
  private String hex;

  public static final String SERIALIZED_NAME_HSL = "hsl";
  @SerializedName(SERIALIZED_NAME_HSL)
  private ColorHsl hsl;

  public static final String SERIALIZED_NAME_LAB = "lab";
  @SerializedName(SERIALIZED_NAME_LAB)
  private ColorLab lab;

  public static final String SERIALIZED_NAME_LUMINANCE = "luminance";
  @SerializedName(SERIALIZED_NAME_LUMINANCE)
  private BigDecimal luminance;

  public static final String SERIALIZED_NAME_LUMINANCE_W_C_A_G = "luminanceWCAG";
  @SerializedName(SERIALIZED_NAME_LUMINANCE_W_C_A_G)
  private BigDecimal luminanceWCAG;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUESTED_HEX = "requestedHex";
  @SerializedName(SERIALIZED_NAME_REQUESTED_HEX)
  private String requestedHex;

  public static final String SERIALIZED_NAME_RGB = "rgb";
  @SerializedName(SERIALIZED_NAME_RGB)
  private ColorRgb rgb;

  public static final String SERIALIZED_NAME_SVG = "svg";
  @SerializedName(SERIALIZED_NAME_SVG)
  private String svg;

  public static final String SERIALIZED_NAME_SVG_NAMED = "svgNamed";
  @SerializedName(SERIALIZED_NAME_SVG_NAMED)
  private String svgNamed;

  public static final String SERIALIZED_NAME_SWATCH_IMG = "swatchImg";
  @SerializedName(SERIALIZED_NAME_SWATCH_IMG)
  private Object swatchImg;

  public Color() {
  }

  public Color distance(BigDecimal distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public BigDecimal getDistance() {
    return distance;
  }

  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  public Color hex(String hex) {
    this.hex = hex;
    return this;
  }

  /**
   * Get hex
   * @return hex
   */
  @javax.annotation.Nullable
  public String getHex() {
    return hex;
  }

  public void setHex(String hex) {
    this.hex = hex;
  }


  public Color hsl(ColorHsl hsl) {
    this.hsl = hsl;
    return this;
  }

  /**
   * Get hsl
   * @return hsl
   */
  @javax.annotation.Nullable
  public ColorHsl getHsl() {
    return hsl;
  }

  public void setHsl(ColorHsl hsl) {
    this.hsl = hsl;
  }


  public Color lab(ColorLab lab) {
    this.lab = lab;
    return this;
  }

  /**
   * Get lab
   * @return lab
   */
  @javax.annotation.Nullable
  public ColorLab getLab() {
    return lab;
  }

  public void setLab(ColorLab lab) {
    this.lab = lab;
  }


  public Color luminance(BigDecimal luminance) {
    this.luminance = luminance;
    return this;
  }

  /**
   * Get luminance
   * @return luminance
   */
  @javax.annotation.Nullable
  public BigDecimal getLuminance() {
    return luminance;
  }

  public void setLuminance(BigDecimal luminance) {
    this.luminance = luminance;
  }


  public Color luminanceWCAG(BigDecimal luminanceWCAG) {
    this.luminanceWCAG = luminanceWCAG;
    return this;
  }

  /**
   * Get luminanceWCAG
   * @return luminanceWCAG
   */
  @javax.annotation.Nullable
  public BigDecimal getLuminanceWCAG() {
    return luminanceWCAG;
  }

  public void setLuminanceWCAG(BigDecimal luminanceWCAG) {
    this.luminanceWCAG = luminanceWCAG;
  }


  public Color name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Color requestedHex(String requestedHex) {
    this.requestedHex = requestedHex;
    return this;
  }

  /**
   * Get requestedHex
   * @return requestedHex
   */
  @javax.annotation.Nullable
  public String getRequestedHex() {
    return requestedHex;
  }

  public void setRequestedHex(String requestedHex) {
    this.requestedHex = requestedHex;
  }


  public Color rgb(ColorRgb rgb) {
    this.rgb = rgb;
    return this;
  }

  /**
   * Get rgb
   * @return rgb
   */
  @javax.annotation.Nullable
  public ColorRgb getRgb() {
    return rgb;
  }

  public void setRgb(ColorRgb rgb) {
    this.rgb = rgb;
  }


  public Color svg(String svg) {
    this.svg = svg;
    return this;
  }

  /**
   * Get svg
   * @return svg
   */
  @javax.annotation.Nullable
  public String getSvg() {
    return svg;
  }

  public void setSvg(String svg) {
    this.svg = svg;
  }


  public Color svgNamed(String svgNamed) {
    this.svgNamed = svgNamed;
    return this;
  }

  /**
   * Get svgNamed
   * @return svgNamed
   */
  @javax.annotation.Nullable
  public String getSvgNamed() {
    return svgNamed;
  }

  public void setSvgNamed(String svgNamed) {
    this.svgNamed = svgNamed;
  }


  public Color swatchImg(Object swatchImg) {
    this.swatchImg = swatchImg;
    return this;
  }

  /**
   * Get swatchImg
   * @return swatchImg
   */
  @javax.annotation.Nullable
  public Object getSwatchImg() {
    return swatchImg;
  }

  public void setSwatchImg(Object swatchImg) {
    this.swatchImg = swatchImg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Color color = (Color) o;
    return Objects.equals(this.distance, color.distance) &&
        Objects.equals(this.hex, color.hex) &&
        Objects.equals(this.hsl, color.hsl) &&
        Objects.equals(this.lab, color.lab) &&
        Objects.equals(this.luminance, color.luminance) &&
        Objects.equals(this.luminanceWCAG, color.luminanceWCAG) &&
        Objects.equals(this.name, color.name) &&
        Objects.equals(this.requestedHex, color.requestedHex) &&
        Objects.equals(this.rgb, color.rgb) &&
        Objects.equals(this.svg, color.svg) &&
        Objects.equals(this.svgNamed, color.svgNamed) &&
        Objects.equals(this.swatchImg, color.swatchImg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, hex, hsl, lab, luminance, luminanceWCAG, name, requestedHex, rgb, svg, svgNamed, swatchImg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Color {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    hex: ").append(toIndentedString(hex)).append("\n");
    sb.append("    hsl: ").append(toIndentedString(hsl)).append("\n");
    sb.append("    lab: ").append(toIndentedString(lab)).append("\n");
    sb.append("    luminance: ").append(toIndentedString(luminance)).append("\n");
    sb.append("    luminanceWCAG: ").append(toIndentedString(luminanceWCAG)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestedHex: ").append(toIndentedString(requestedHex)).append("\n");
    sb.append("    rgb: ").append(toIndentedString(rgb)).append("\n");
    sb.append("    svg: ").append(toIndentedString(svg)).append("\n");
    sb.append("    svgNamed: ").append(toIndentedString(svgNamed)).append("\n");
    sb.append("    swatchImg: ").append(toIndentedString(swatchImg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distance");
    openapiFields.add("hex");
    openapiFields.add("hsl");
    openapiFields.add("lab");
    openapiFields.add("luminance");
    openapiFields.add("luminanceWCAG");
    openapiFields.add("name");
    openapiFields.add("requestedHex");
    openapiFields.add("rgb");
    openapiFields.add("svg");
    openapiFields.add("svgNamed");
    openapiFields.add("swatchImg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Color
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Color.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Color is not found in the empty JSON string", Color.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Color.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Color` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hex") != null && !jsonObj.get("hex").isJsonNull()) && !jsonObj.get("hex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hex").toString()));
      }
      // validate the optional field `hsl`
      if (jsonObj.get("hsl") != null && !jsonObj.get("hsl").isJsonNull()) {
        ColorHsl.validateJsonElement(jsonObj.get("hsl"));
      }
      // validate the optional field `lab`
      if (jsonObj.get("lab") != null && !jsonObj.get("lab").isJsonNull()) {
        ColorLab.validateJsonElement(jsonObj.get("lab"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("requestedHex") != null && !jsonObj.get("requestedHex").isJsonNull()) && !jsonObj.get("requestedHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedHex").toString()));
      }
      // validate the optional field `rgb`
      if (jsonObj.get("rgb") != null && !jsonObj.get("rgb").isJsonNull()) {
        ColorRgb.validateJsonElement(jsonObj.get("rgb"));
      }
      if ((jsonObj.get("svg") != null && !jsonObj.get("svg").isJsonNull()) && !jsonObj.get("svg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svg").toString()));
      }
      if ((jsonObj.get("svgNamed") != null && !jsonObj.get("svgNamed").isJsonNull()) && !jsonObj.get("svgNamed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svgNamed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svgNamed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Color.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Color' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Color> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Color.class));

       return (TypeAdapter<T>) new TypeAdapter<Color>() {
           @Override
           public void write(JsonWriter out, Color value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Color read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Color given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Color
   * @throws IOException if the JSON string is invalid with respect to Color
   */
  public static Color fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Color.class);
  }

  /**
   * Convert an instance of Color to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

