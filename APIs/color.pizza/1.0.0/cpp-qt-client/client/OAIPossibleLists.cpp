/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPossibleLists.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPossibleLists::OAIPossibleLists(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPossibleLists::OAIPossibleLists() {
    this->initializeModel();
}

OAIPossibleLists::~OAIPossibleLists() {}

void OAIPossibleLists::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPossibleLists::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPossibleLists::fromJson(QString jsonString) {
    
    if ( jsonString.compare("default", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bestOf", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::BESTOF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("wikipedia", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::WIKIPEDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("french", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::FRENCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ridgway", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::RIDGWAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("risograph", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::RISOGRAPH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("basic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::BASIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("chineseTraditional", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::CHINESETRADITIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("html", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::HTML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("japaneseTraditional", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::JAPANESETRADITIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("leCorbusier", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::LECORBUSIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nbsIscc", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::NBSISCC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ntc", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::NTC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("osxcrayons", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::OSXCRAYONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ral", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::RAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sanzoWadaI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::SANZOWADAI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("thesaurus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::THESAURUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("werner", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::WERNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("windows", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::WINDOWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("x11", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::X11;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("xkcd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPossibleLists::XKCD;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPossibleLists::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPossibleLists::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPossibleLists::DEFAULT:
            val = "default";
            break;
        case eOAIPossibleLists::BESTOF:
            val = "bestOf";
            break;
        case eOAIPossibleLists::WIKIPEDIA:
            val = "wikipedia";
            break;
        case eOAIPossibleLists::FRENCH:
            val = "french";
            break;
        case eOAIPossibleLists::RIDGWAY:
            val = "ridgway";
            break;
        case eOAIPossibleLists::RISOGRAPH:
            val = "risograph";
            break;
        case eOAIPossibleLists::BASIC:
            val = "basic";
            break;
        case eOAIPossibleLists::CHINESETRADITIONAL:
            val = "chineseTraditional";
            break;
        case eOAIPossibleLists::HTML:
            val = "html";
            break;
        case eOAIPossibleLists::JAPANESETRADITIONAL:
            val = "japaneseTraditional";
            break;
        case eOAIPossibleLists::LECORBUSIER:
            val = "leCorbusier";
            break;
        case eOAIPossibleLists::NBSISCC:
            val = "nbsIscc";
            break;
        case eOAIPossibleLists::NTC:
            val = "ntc";
            break;
        case eOAIPossibleLists::OSXCRAYONS:
            val = "osxcrayons";
            break;
        case eOAIPossibleLists::RAL:
            val = "ral";
            break;
        case eOAIPossibleLists::SANZOWADAI:
            val = "sanzoWadaI";
            break;
        case eOAIPossibleLists::THESAURUS:
            val = "thesaurus";
            break;
        case eOAIPossibleLists::WERNER:
            val = "werner";
            break;
        case eOAIPossibleLists::WINDOWS:
            val = "windows";
            break;
        case eOAIPossibleLists::X11:
            val = "x11";
            break;
        case eOAIPossibleLists::XKCD:
            val = "xkcd";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPossibleLists::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPossibleLists::eOAIPossibleLists OAIPossibleLists::getValue() const {
    return m_value;
}

void OAIPossibleLists::setValue(const OAIPossibleLists::eOAIPossibleLists& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPossibleLists::isSet() const {
    
    return m_value_isSet;
}

bool OAIPossibleLists::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
