/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColor_lab.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColor_lab::OAIColor_lab(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColor_lab::OAIColor_lab() {
    this->initializeModel();
}

OAIColor_lab::~OAIColor_lab() {}

void OAIColor_lab::initializeModel() {

    m_a_isSet = false;
    m_a_isValid = false;

    m_b_isSet = false;
    m_b_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;
}

void OAIColor_lab::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColor_lab::fromJsonObject(QJsonObject json) {

    m_a_isValid = ::OpenAPI::fromJsonValue(m_a, json[QString("a")]);
    m_a_isSet = !json[QString("a")].isNull() && m_a_isValid;

    m_b_isValid = ::OpenAPI::fromJsonValue(m_b, json[QString("b")]);
    m_b_isSet = !json[QString("b")].isNull() && m_b_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("l")]);
    m_l_isSet = !json[QString("l")].isNull() && m_l_isValid;
}

QString OAIColor_lab::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColor_lab::asJsonObject() const {
    QJsonObject obj;
    if (m_a_isSet) {
        obj.insert(QString("a"), ::OpenAPI::toJsonValue(m_a));
    }
    if (m_b_isSet) {
        obj.insert(QString("b"), ::OpenAPI::toJsonValue(m_b));
    }
    if (m_l_isSet) {
        obj.insert(QString("l"), ::OpenAPI::toJsonValue(m_l));
    }
    return obj;
}

double OAIColor_lab::getA() const {
    return m_a;
}
void OAIColor_lab::setA(const double &a) {
    m_a = a;
    m_a_isSet = true;
}

bool OAIColor_lab::is_a_Set() const{
    return m_a_isSet;
}

bool OAIColor_lab::is_a_Valid() const{
    return m_a_isValid;
}

double OAIColor_lab::getB() const {
    return m_b;
}
void OAIColor_lab::setB(const double &b) {
    m_b = b;
    m_b_isSet = true;
}

bool OAIColor_lab::is_b_Set() const{
    return m_b_isSet;
}

bool OAIColor_lab::is_b_Valid() const{
    return m_b_isValid;
}

double OAIColor_lab::getL() const {
    return m_l;
}
void OAIColor_lab::setL(const double &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIColor_lab::is_l_Set() const{
    return m_l_isSet;
}

bool OAIColor_lab::is_l_Valid() const{
    return m_l_isValid;
}

bool OAIColor_lab::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColor_lab::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
