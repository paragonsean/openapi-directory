/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIColor.h
 *
 * 
 */

#ifndef OAIColor_H
#define OAIColor_H

#include <QJsonObject>

#include "OAIColor_hsl.h"
#include "OAIColor_lab.h"
#include "OAIColor_rgb.h"
#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColor_hsl;
class OAIColor_lab;
class OAIColor_rgb;

class OAIColor : public OAIObject {
public:
    OAIColor();
    OAIColor(QString json);
    ~OAIColor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QString getHex() const;
    void setHex(const QString &hex);
    bool is_hex_Set() const;
    bool is_hex_Valid() const;

    OAIColor_hsl getHsl() const;
    void setHsl(const OAIColor_hsl &hsl);
    bool is_hsl_Set() const;
    bool is_hsl_Valid() const;

    OAIColor_lab getLab() const;
    void setLab(const OAIColor_lab &lab);
    bool is_lab_Set() const;
    bool is_lab_Valid() const;

    double getLuminance() const;
    void setLuminance(const double &luminance);
    bool is_luminance_Set() const;
    bool is_luminance_Valid() const;

    double getLuminanceWcag() const;
    void setLuminanceWcag(const double &luminance_wcag);
    bool is_luminance_wcag_Set() const;
    bool is_luminance_wcag_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRequestedHex() const;
    void setRequestedHex(const QString &requested_hex);
    bool is_requested_hex_Set() const;
    bool is_requested_hex_Valid() const;

    OAIColor_rgb getRgb() const;
    void setRgb(const OAIColor_rgb &rgb);
    bool is_rgb_Set() const;
    bool is_rgb_Valid() const;

    QString getSvg() const;
    void setSvg(const QString &svg);
    bool is_svg_Set() const;
    bool is_svg_Valid() const;

    QString getSvgNamed() const;
    void setSvgNamed(const QString &svg_named);
    bool is_svg_named_Set() const;
    bool is_svg_named_Valid() const;

    OAIObject getSwatchImg() const;
    void setSwatchImg(const OAIObject &swatch_img);
    bool is_swatch_img_Set() const;
    bool is_swatch_img_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QString m_hex;
    bool m_hex_isSet;
    bool m_hex_isValid;

    OAIColor_hsl m_hsl;
    bool m_hsl_isSet;
    bool m_hsl_isValid;

    OAIColor_lab m_lab;
    bool m_lab_isSet;
    bool m_lab_isValid;

    double m_luminance;
    bool m_luminance_isSet;
    bool m_luminance_isValid;

    double m_luminance_wcag;
    bool m_luminance_wcag_isSet;
    bool m_luminance_wcag_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_requested_hex;
    bool m_requested_hex_isSet;
    bool m_requested_hex_isValid;

    OAIColor_rgb m_rgb;
    bool m_rgb_isSet;
    bool m_rgb_isValid;

    QString m_svg;
    bool m_svg_isSet;
    bool m_svg_isValid;

    QString m_svg_named;
    bool m_svg_named_isSet;
    bool m_svg_named_isValid;

    OAIObject m_swatch_img;
    bool m_swatch_img_isSet;
    bool m_swatch_img_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIColor)

#endif // OAIColor_H
