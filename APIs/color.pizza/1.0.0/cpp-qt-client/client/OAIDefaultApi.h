/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPossibleLists.h"
#include "OAI__get_200_response.h"
#include "OAI_lists__get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void listsGet();

    /**
    * @param[in]  name QString [required]
    * @param[in]  list OAIPossibleLists [optional]
    */
    virtual void namesGet(const QString &name, const ::OpenAPI::OptionalParam<OAIPossibleLists> &list = ::OpenAPI::OptionalParam<OAIPossibleLists>());

    /**
    * @param[in]  list OAIPossibleLists [optional]
    * @param[in]  values QString [optional]
    * @param[in]  noduplicates bool [optional]
    */
    virtual void rootGet(const ::OpenAPI::OptionalParam<OAIPossibleLists> &list = ::OpenAPI::OptionalParam<OAIPossibleLists>(), const ::OpenAPI::OptionalParam<QString> &values = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &noduplicates = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  color QString [required]
    * @param[in]  name QString [optional]
    */
    virtual void swatchGet(const QString &color, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listsGetCallback(OAIHttpRequestWorker *worker);
    void namesGetCallback(OAIHttpRequestWorker *worker);
    void rootGetCallback(OAIHttpRequestWorker *worker);
    void swatchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listsGetSignal(OAI_lists__get_200_response summary);
    void namesGetSignal(OAI__get_200_response summary);
    void rootGetSignal(OAI__get_200_response summary);
    void swatchGetSignal(QString summary);


    void listsGetSignalFull(OAIHttpRequestWorker *worker, OAI_lists__get_200_response summary);
    void namesGetSignalFull(OAIHttpRequestWorker *worker, OAI__get_200_response summary);
    void rootGetSignalFull(OAIHttpRequestWorker *worker, OAI__get_200_response summary);
    void swatchGetSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use listsGetSignalError() instead")
    void listsGetSignalE(OAI_lists__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listsGetSignalError(OAI_lists__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesGetSignalError() instead")
    void namesGetSignalE(OAI__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namesGetSignalError(OAI__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rootGetSignalError() instead")
    void rootGetSignalE(OAI__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rootGetSignalError(OAI__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swatchGetSignalError() instead")
    void swatchGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void swatchGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listsGetSignalErrorFull() instead")
    void listsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesGetSignalErrorFull() instead")
    void namesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rootGetSignalErrorFull() instead")
    void rootGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rootGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swatchGetSignalErrorFull() instead")
    void swatchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void swatchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
