/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_lists__get_200_response_listDescriptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_lists__get_200_response_listDescriptions::OAI_lists__get_200_response_listDescriptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_lists__get_200_response_listDescriptions::OAI_lists__get_200_response_listDescriptions() {
    this->initializeModel();
}

OAI_lists__get_200_response_listDescriptions::~OAI_lists__get_200_response_listDescriptions() {}

void OAI_lists__get_200_response_listDescriptions::initializeModel() {

    m_basic_isSet = false;
    m_basic_isValid = false;

    m_best_of_isSet = false;
    m_best_of_isValid = false;

    m_chinese_traditional_isSet = false;
    m_chinese_traditional_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_french_isSet = false;
    m_french_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_japanese_traditional_isSet = false;
    m_japanese_traditional_isValid = false;

    m_le_corbusier_isSet = false;
    m_le_corbusier_isValid = false;

    m_nbs_iscc_isSet = false;
    m_nbs_iscc_isValid = false;

    m_ntc_isSet = false;
    m_ntc_isValid = false;

    m_osxcrayons_isSet = false;
    m_osxcrayons_isValid = false;

    m_ral_isSet = false;
    m_ral_isValid = false;

    m_ridgway_isSet = false;
    m_ridgway_isValid = false;

    m_risograph_isSet = false;
    m_risograph_isValid = false;

    m_sanzo_wada_i_isSet = false;
    m_sanzo_wada_i_isValid = false;

    m_thesaurus_isSet = false;
    m_thesaurus_isValid = false;

    m_werner_isSet = false;
    m_werner_isValid = false;

    m_wikipedia_isSet = false;
    m_wikipedia_isValid = false;

    m_windows_isSet = false;
    m_windows_isValid = false;

    m_x11_isSet = false;
    m_x11_isValid = false;

    m_xkcd_isSet = false;
    m_xkcd_isValid = false;
}

void OAI_lists__get_200_response_listDescriptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_lists__get_200_response_listDescriptions::fromJsonObject(QJsonObject json) {

    m_basic_isValid = ::OpenAPI::fromJsonValue(m_basic, json[QString("basic")]);
    m_basic_isSet = !json[QString("basic")].isNull() && m_basic_isValid;

    m_best_of_isValid = ::OpenAPI::fromJsonValue(m_best_of, json[QString("bestOf")]);
    m_best_of_isSet = !json[QString("bestOf")].isNull() && m_best_of_isValid;

    m_chinese_traditional_isValid = ::OpenAPI::fromJsonValue(m_chinese_traditional, json[QString("chineseTraditional")]);
    m_chinese_traditional_isSet = !json[QString("chineseTraditional")].isNull() && m_chinese_traditional_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_french_isValid = ::OpenAPI::fromJsonValue(m_french, json[QString("french")]);
    m_french_isSet = !json[QString("french")].isNull() && m_french_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_japanese_traditional_isValid = ::OpenAPI::fromJsonValue(m_japanese_traditional, json[QString("japaneseTraditional")]);
    m_japanese_traditional_isSet = !json[QString("japaneseTraditional")].isNull() && m_japanese_traditional_isValid;

    m_le_corbusier_isValid = ::OpenAPI::fromJsonValue(m_le_corbusier, json[QString("leCorbusier")]);
    m_le_corbusier_isSet = !json[QString("leCorbusier")].isNull() && m_le_corbusier_isValid;

    m_nbs_iscc_isValid = ::OpenAPI::fromJsonValue(m_nbs_iscc, json[QString("nbsIscc")]);
    m_nbs_iscc_isSet = !json[QString("nbsIscc")].isNull() && m_nbs_iscc_isValid;

    m_ntc_isValid = ::OpenAPI::fromJsonValue(m_ntc, json[QString("ntc")]);
    m_ntc_isSet = !json[QString("ntc")].isNull() && m_ntc_isValid;

    m_osxcrayons_isValid = ::OpenAPI::fromJsonValue(m_osxcrayons, json[QString("osxcrayons")]);
    m_osxcrayons_isSet = !json[QString("osxcrayons")].isNull() && m_osxcrayons_isValid;

    m_ral_isValid = ::OpenAPI::fromJsonValue(m_ral, json[QString("ral")]);
    m_ral_isSet = !json[QString("ral")].isNull() && m_ral_isValid;

    m_ridgway_isValid = ::OpenAPI::fromJsonValue(m_ridgway, json[QString("ridgway")]);
    m_ridgway_isSet = !json[QString("ridgway")].isNull() && m_ridgway_isValid;

    m_risograph_isValid = ::OpenAPI::fromJsonValue(m_risograph, json[QString("risograph")]);
    m_risograph_isSet = !json[QString("risograph")].isNull() && m_risograph_isValid;

    m_sanzo_wada_i_isValid = ::OpenAPI::fromJsonValue(m_sanzo_wada_i, json[QString("sanzoWadaI")]);
    m_sanzo_wada_i_isSet = !json[QString("sanzoWadaI")].isNull() && m_sanzo_wada_i_isValid;

    m_thesaurus_isValid = ::OpenAPI::fromJsonValue(m_thesaurus, json[QString("thesaurus")]);
    m_thesaurus_isSet = !json[QString("thesaurus")].isNull() && m_thesaurus_isValid;

    m_werner_isValid = ::OpenAPI::fromJsonValue(m_werner, json[QString("werner")]);
    m_werner_isSet = !json[QString("werner")].isNull() && m_werner_isValid;

    m_wikipedia_isValid = ::OpenAPI::fromJsonValue(m_wikipedia, json[QString("wikipedia")]);
    m_wikipedia_isSet = !json[QString("wikipedia")].isNull() && m_wikipedia_isValid;

    m_windows_isValid = ::OpenAPI::fromJsonValue(m_windows, json[QString("windows")]);
    m_windows_isSet = !json[QString("windows")].isNull() && m_windows_isValid;

    m_x11_isValid = ::OpenAPI::fromJsonValue(m_x11, json[QString("x11")]);
    m_x11_isSet = !json[QString("x11")].isNull() && m_x11_isValid;

    m_xkcd_isValid = ::OpenAPI::fromJsonValue(m_xkcd, json[QString("xkcd")]);
    m_xkcd_isSet = !json[QString("xkcd")].isNull() && m_xkcd_isValid;
}

QString OAI_lists__get_200_response_listDescriptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_lists__get_200_response_listDescriptions::asJsonObject() const {
    QJsonObject obj;
    if (m_basic.isSet()) {
        obj.insert(QString("basic"), ::OpenAPI::toJsonValue(m_basic));
    }
    if (m_best_of.isSet()) {
        obj.insert(QString("bestOf"), ::OpenAPI::toJsonValue(m_best_of));
    }
    if (m_chinese_traditional.isSet()) {
        obj.insert(QString("chineseTraditional"), ::OpenAPI::toJsonValue(m_chinese_traditional));
    }
    if (m_r_default.isSet()) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_french.isSet()) {
        obj.insert(QString("french"), ::OpenAPI::toJsonValue(m_french));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_japanese_traditional.isSet()) {
        obj.insert(QString("japaneseTraditional"), ::OpenAPI::toJsonValue(m_japanese_traditional));
    }
    if (m_le_corbusier.isSet()) {
        obj.insert(QString("leCorbusier"), ::OpenAPI::toJsonValue(m_le_corbusier));
    }
    if (m_nbs_iscc.isSet()) {
        obj.insert(QString("nbsIscc"), ::OpenAPI::toJsonValue(m_nbs_iscc));
    }
    if (m_ntc.isSet()) {
        obj.insert(QString("ntc"), ::OpenAPI::toJsonValue(m_ntc));
    }
    if (m_osxcrayons.isSet()) {
        obj.insert(QString("osxcrayons"), ::OpenAPI::toJsonValue(m_osxcrayons));
    }
    if (m_ral.isSet()) {
        obj.insert(QString("ral"), ::OpenAPI::toJsonValue(m_ral));
    }
    if (m_ridgway.isSet()) {
        obj.insert(QString("ridgway"), ::OpenAPI::toJsonValue(m_ridgway));
    }
    if (m_risograph.isSet()) {
        obj.insert(QString("risograph"), ::OpenAPI::toJsonValue(m_risograph));
    }
    if (m_sanzo_wada_i.isSet()) {
        obj.insert(QString("sanzoWadaI"), ::OpenAPI::toJsonValue(m_sanzo_wada_i));
    }
    if (m_thesaurus.isSet()) {
        obj.insert(QString("thesaurus"), ::OpenAPI::toJsonValue(m_thesaurus));
    }
    if (m_werner.isSet()) {
        obj.insert(QString("werner"), ::OpenAPI::toJsonValue(m_werner));
    }
    if (m_wikipedia.isSet()) {
        obj.insert(QString("wikipedia"), ::OpenAPI::toJsonValue(m_wikipedia));
    }
    if (m_windows.isSet()) {
        obj.insert(QString("windows"), ::OpenAPI::toJsonValue(m_windows));
    }
    if (m_x11.isSet()) {
        obj.insert(QString("x11"), ::OpenAPI::toJsonValue(m_x11));
    }
    if (m_xkcd.isSet()) {
        obj.insert(QString("xkcd"), ::OpenAPI::toJsonValue(m_xkcd));
    }
    return obj;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getBasic() const {
    return m_basic;
}
void OAI_lists__get_200_response_listDescriptions::setBasic(const OAIListDescription &basic) {
    m_basic = basic;
    m_basic_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_basic_Set() const{
    return m_basic_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_basic_Valid() const{
    return m_basic_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getBestOf() const {
    return m_best_of;
}
void OAI_lists__get_200_response_listDescriptions::setBestOf(const OAIListDescription &best_of) {
    m_best_of = best_of;
    m_best_of_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_best_of_Set() const{
    return m_best_of_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_best_of_Valid() const{
    return m_best_of_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getChineseTraditional() const {
    return m_chinese_traditional;
}
void OAI_lists__get_200_response_listDescriptions::setChineseTraditional(const OAIListDescription &chinese_traditional) {
    m_chinese_traditional = chinese_traditional;
    m_chinese_traditional_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_chinese_traditional_Set() const{
    return m_chinese_traditional_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_chinese_traditional_Valid() const{
    return m_chinese_traditional_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getRDefault() const {
    return m_r_default;
}
void OAI_lists__get_200_response_listDescriptions::setRDefault(const OAIListDescription &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_r_default_Valid() const{
    return m_r_default_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getFrench() const {
    return m_french;
}
void OAI_lists__get_200_response_listDescriptions::setFrench(const OAIListDescription &french) {
    m_french = french;
    m_french_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_french_Set() const{
    return m_french_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_french_Valid() const{
    return m_french_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getHtml() const {
    return m_html;
}
void OAI_lists__get_200_response_listDescriptions::setHtml(const OAIListDescription &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_html_Set() const{
    return m_html_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_html_Valid() const{
    return m_html_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getJapaneseTraditional() const {
    return m_japanese_traditional;
}
void OAI_lists__get_200_response_listDescriptions::setJapaneseTraditional(const OAIListDescription &japanese_traditional) {
    m_japanese_traditional = japanese_traditional;
    m_japanese_traditional_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_japanese_traditional_Set() const{
    return m_japanese_traditional_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_japanese_traditional_Valid() const{
    return m_japanese_traditional_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getLeCorbusier() const {
    return m_le_corbusier;
}
void OAI_lists__get_200_response_listDescriptions::setLeCorbusier(const OAIListDescription &le_corbusier) {
    m_le_corbusier = le_corbusier;
    m_le_corbusier_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_le_corbusier_Set() const{
    return m_le_corbusier_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_le_corbusier_Valid() const{
    return m_le_corbusier_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getNbsIscc() const {
    return m_nbs_iscc;
}
void OAI_lists__get_200_response_listDescriptions::setNbsIscc(const OAIListDescription &nbs_iscc) {
    m_nbs_iscc = nbs_iscc;
    m_nbs_iscc_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_nbs_iscc_Set() const{
    return m_nbs_iscc_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_nbs_iscc_Valid() const{
    return m_nbs_iscc_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getNtc() const {
    return m_ntc;
}
void OAI_lists__get_200_response_listDescriptions::setNtc(const OAIListDescription &ntc) {
    m_ntc = ntc;
    m_ntc_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_ntc_Set() const{
    return m_ntc_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_ntc_Valid() const{
    return m_ntc_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getOsxcrayons() const {
    return m_osxcrayons;
}
void OAI_lists__get_200_response_listDescriptions::setOsxcrayons(const OAIListDescription &osxcrayons) {
    m_osxcrayons = osxcrayons;
    m_osxcrayons_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_osxcrayons_Set() const{
    return m_osxcrayons_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_osxcrayons_Valid() const{
    return m_osxcrayons_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getRal() const {
    return m_ral;
}
void OAI_lists__get_200_response_listDescriptions::setRal(const OAIListDescription &ral) {
    m_ral = ral;
    m_ral_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_ral_Set() const{
    return m_ral_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_ral_Valid() const{
    return m_ral_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getRidgway() const {
    return m_ridgway;
}
void OAI_lists__get_200_response_listDescriptions::setRidgway(const OAIListDescription &ridgway) {
    m_ridgway = ridgway;
    m_ridgway_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_ridgway_Set() const{
    return m_ridgway_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_ridgway_Valid() const{
    return m_ridgway_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getRisograph() const {
    return m_risograph;
}
void OAI_lists__get_200_response_listDescriptions::setRisograph(const OAIListDescription &risograph) {
    m_risograph = risograph;
    m_risograph_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_risograph_Set() const{
    return m_risograph_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_risograph_Valid() const{
    return m_risograph_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getSanzoWadaI() const {
    return m_sanzo_wada_i;
}
void OAI_lists__get_200_response_listDescriptions::setSanzoWadaI(const OAIListDescription &sanzo_wada_i) {
    m_sanzo_wada_i = sanzo_wada_i;
    m_sanzo_wada_i_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_sanzo_wada_i_Set() const{
    return m_sanzo_wada_i_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_sanzo_wada_i_Valid() const{
    return m_sanzo_wada_i_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getThesaurus() const {
    return m_thesaurus;
}
void OAI_lists__get_200_response_listDescriptions::setThesaurus(const OAIListDescription &thesaurus) {
    m_thesaurus = thesaurus;
    m_thesaurus_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_thesaurus_Set() const{
    return m_thesaurus_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_thesaurus_Valid() const{
    return m_thesaurus_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getWerner() const {
    return m_werner;
}
void OAI_lists__get_200_response_listDescriptions::setWerner(const OAIListDescription &werner) {
    m_werner = werner;
    m_werner_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_werner_Set() const{
    return m_werner_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_werner_Valid() const{
    return m_werner_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getWikipedia() const {
    return m_wikipedia;
}
void OAI_lists__get_200_response_listDescriptions::setWikipedia(const OAIListDescription &wikipedia) {
    m_wikipedia = wikipedia;
    m_wikipedia_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_wikipedia_Set() const{
    return m_wikipedia_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_wikipedia_Valid() const{
    return m_wikipedia_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getWindows() const {
    return m_windows;
}
void OAI_lists__get_200_response_listDescriptions::setWindows(const OAIListDescription &windows) {
    m_windows = windows;
    m_windows_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_windows_Set() const{
    return m_windows_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_windows_Valid() const{
    return m_windows_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getX11() const {
    return m_x11;
}
void OAI_lists__get_200_response_listDescriptions::setX11(const OAIListDescription &x11) {
    m_x11 = x11;
    m_x11_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_x11_Set() const{
    return m_x11_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_x11_Valid() const{
    return m_x11_isValid;
}

OAIListDescription OAI_lists__get_200_response_listDescriptions::getXkcd() const {
    return m_xkcd;
}
void OAI_lists__get_200_response_listDescriptions::setXkcd(const OAIListDescription &xkcd) {
    m_xkcd = xkcd;
    m_xkcd_isSet = true;
}

bool OAI_lists__get_200_response_listDescriptions::is_xkcd_Set() const{
    return m_xkcd_isSet;
}

bool OAI_lists__get_200_response_listDescriptions::is_xkcd_Valid() const{
    return m_xkcd_isValid;
}

bool OAI_lists__get_200_response_listDescriptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chinese_traditional.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_french.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_japanese_traditional.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_le_corbusier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nbs_iscc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_osxcrayons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ral.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ridgway.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_risograph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanzo_wada_i.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thesaurus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_werner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x11.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xkcd.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_lists__get_200_response_listDescriptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
