/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDescription::OAIListDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDescription::OAIListDescription() {
    this->initializeModel();
}

OAIListDescription::~OAIListDescription() {}

void OAIListDescription::initializeModel() {

    m_color_count_isSet = false;
    m_color_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIListDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDescription::fromJsonObject(QJsonObject json) {

    m_color_count_isValid = ::OpenAPI::fromJsonValue(m_color_count, json[QString("colorCount")]);
    m_color_count_isSet = !json[QString("colorCount")].isNull() && m_color_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIListDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_color_count_isSet) {
        obj.insert(QString("colorCount"), ::OpenAPI::toJsonValue(m_color_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIListDescription::getColorCount() const {
    return m_color_count;
}
void OAIListDescription::setColorCount(const qint32 &color_count) {
    m_color_count = color_count;
    m_color_count_isSet = true;
}

bool OAIListDescription::is_color_count_Set() const{
    return m_color_count_isSet;
}

bool OAIListDescription::is_color_count_Valid() const{
    return m_color_count_isValid;
}

QString OAIListDescription::getDescription() const {
    return m_description;
}
void OAIListDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListDescription::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIListDescription::getKey() const {
    return m_key;
}
void OAIListDescription::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIListDescription::is_key_Set() const{
    return m_key_isSet;
}

bool OAIListDescription::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIListDescription::getLicense() const {
    return m_license;
}
void OAIListDescription::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIListDescription::is_license_Set() const{
    return m_license_isSet;
}

bool OAIListDescription::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIListDescription::getSource() const {
    return m_source;
}
void OAIListDescription::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIListDescription::is_source_Set() const{
    return m_source_isSet;
}

bool OAIListDescription::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIListDescription::getTitle() const {
    return m_title;
}
void OAIListDescription::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIListDescription::is_title_Set() const{
    return m_title_isSet;
}

bool OAIListDescription::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIListDescription::getUrl() const {
    return m_url;
}
void OAIListDescription::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIListDescription::is_url_Set() const{
    return m_url_isSet;
}

bool OAIListDescription::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIListDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
