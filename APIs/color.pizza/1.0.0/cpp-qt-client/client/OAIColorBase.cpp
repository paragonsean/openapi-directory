/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorBase::OAIColorBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorBase::OAIColorBase() {
    this->initializeModel();
}

OAIColorBase::~OAIColorBase() {}

void OAIColorBase::initializeModel() {

    m_hex_isSet = false;
    m_hex_isValid = false;

    m_hsl_isSet = false;
    m_hsl_isValid = false;

    m_lab_isSet = false;
    m_lab_isValid = false;

    m_luminance_isSet = false;
    m_luminance_isValid = false;

    m_luminance_wcag_isSet = false;
    m_luminance_wcag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rgb_isSet = false;
    m_rgb_isValid = false;

    m_swatch_img_isSet = false;
    m_swatch_img_isValid = false;
}

void OAIColorBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorBase::fromJsonObject(QJsonObject json) {

    m_hex_isValid = ::OpenAPI::fromJsonValue(m_hex, json[QString("hex")]);
    m_hex_isSet = !json[QString("hex")].isNull() && m_hex_isValid;

    m_hsl_isValid = ::OpenAPI::fromJsonValue(m_hsl, json[QString("hsl")]);
    m_hsl_isSet = !json[QString("hsl")].isNull() && m_hsl_isValid;

    m_lab_isValid = ::OpenAPI::fromJsonValue(m_lab, json[QString("lab")]);
    m_lab_isSet = !json[QString("lab")].isNull() && m_lab_isValid;

    m_luminance_isValid = ::OpenAPI::fromJsonValue(m_luminance, json[QString("luminance")]);
    m_luminance_isSet = !json[QString("luminance")].isNull() && m_luminance_isValid;

    m_luminance_wcag_isValid = ::OpenAPI::fromJsonValue(m_luminance_wcag, json[QString("luminanceWCAG")]);
    m_luminance_wcag_isSet = !json[QString("luminanceWCAG")].isNull() && m_luminance_wcag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rgb_isValid = ::OpenAPI::fromJsonValue(m_rgb, json[QString("rgb")]);
    m_rgb_isSet = !json[QString("rgb")].isNull() && m_rgb_isValid;

    m_swatch_img_isValid = ::OpenAPI::fromJsonValue(m_swatch_img, json[QString("swatchImg")]);
    m_swatch_img_isSet = !json[QString("swatchImg")].isNull() && m_swatch_img_isValid;
}

QString OAIColorBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorBase::asJsonObject() const {
    QJsonObject obj;
    if (m_hex_isSet) {
        obj.insert(QString("hex"), ::OpenAPI::toJsonValue(m_hex));
    }
    if (m_hsl.isSet()) {
        obj.insert(QString("hsl"), ::OpenAPI::toJsonValue(m_hsl));
    }
    if (m_lab.isSet()) {
        obj.insert(QString("lab"), ::OpenAPI::toJsonValue(m_lab));
    }
    if (m_luminance_isSet) {
        obj.insert(QString("luminance"), ::OpenAPI::toJsonValue(m_luminance));
    }
    if (m_luminance_wcag_isSet) {
        obj.insert(QString("luminanceWCAG"), ::OpenAPI::toJsonValue(m_luminance_wcag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rgb.isSet()) {
        obj.insert(QString("rgb"), ::OpenAPI::toJsonValue(m_rgb));
    }
    if (m_swatch_img.isSet()) {
        obj.insert(QString("swatchImg"), ::OpenAPI::toJsonValue(m_swatch_img));
    }
    return obj;
}

QString OAIColorBase::getHex() const {
    return m_hex;
}
void OAIColorBase::setHex(const QString &hex) {
    m_hex = hex;
    m_hex_isSet = true;
}

bool OAIColorBase::is_hex_Set() const{
    return m_hex_isSet;
}

bool OAIColorBase::is_hex_Valid() const{
    return m_hex_isValid;
}

OAIColor_hsl OAIColorBase::getHsl() const {
    return m_hsl;
}
void OAIColorBase::setHsl(const OAIColor_hsl &hsl) {
    m_hsl = hsl;
    m_hsl_isSet = true;
}

bool OAIColorBase::is_hsl_Set() const{
    return m_hsl_isSet;
}

bool OAIColorBase::is_hsl_Valid() const{
    return m_hsl_isValid;
}

OAIColor_lab OAIColorBase::getLab() const {
    return m_lab;
}
void OAIColorBase::setLab(const OAIColor_lab &lab) {
    m_lab = lab;
    m_lab_isSet = true;
}

bool OAIColorBase::is_lab_Set() const{
    return m_lab_isSet;
}

bool OAIColorBase::is_lab_Valid() const{
    return m_lab_isValid;
}

double OAIColorBase::getLuminance() const {
    return m_luminance;
}
void OAIColorBase::setLuminance(const double &luminance) {
    m_luminance = luminance;
    m_luminance_isSet = true;
}

bool OAIColorBase::is_luminance_Set() const{
    return m_luminance_isSet;
}

bool OAIColorBase::is_luminance_Valid() const{
    return m_luminance_isValid;
}

double OAIColorBase::getLuminanceWcag() const {
    return m_luminance_wcag;
}
void OAIColorBase::setLuminanceWcag(const double &luminance_wcag) {
    m_luminance_wcag = luminance_wcag;
    m_luminance_wcag_isSet = true;
}

bool OAIColorBase::is_luminance_wcag_Set() const{
    return m_luminance_wcag_isSet;
}

bool OAIColorBase::is_luminance_wcag_Valid() const{
    return m_luminance_wcag_isValid;
}

QString OAIColorBase::getName() const {
    return m_name;
}
void OAIColorBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIColorBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIColorBase::is_name_Valid() const{
    return m_name_isValid;
}

OAIColor_rgb OAIColorBase::getRgb() const {
    return m_rgb;
}
void OAIColorBase::setRgb(const OAIColor_rgb &rgb) {
    m_rgb = rgb;
    m_rgb_isSet = true;
}

bool OAIColorBase::is_rgb_Set() const{
    return m_rgb_isSet;
}

bool OAIColorBase::is_rgb_Valid() const{
    return m_rgb_isValid;
}

OAIColorBase_swatchImg OAIColorBase::getSwatchImg() const {
    return m_swatch_img;
}
void OAIColorBase::setSwatchImg(const OAIColorBase_swatchImg &swatch_img) {
    m_swatch_img = swatch_img;
    m_swatch_img_isSet = true;
}

bool OAIColorBase::is_swatch_img_Set() const{
    return m_swatch_img_isSet;
}

bool OAIColorBase::is_swatch_img_Valid() const{
    return m_swatch_img_isValid;
}

bool OAIColorBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_luminance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_luminance_wcag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_swatch_img.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
