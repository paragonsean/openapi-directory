/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_lists__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_lists__get_200_response::OAI_lists__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_lists__get_200_response::OAI_lists__get_200_response() {
    this->initializeModel();
}

OAI_lists__get_200_response::~OAI_lists__get_200_response() {}

void OAI_lists__get_200_response::initializeModel() {

    m_list_descriptions_isSet = false;
    m_list_descriptions_isValid = false;

    m_local_available_color_name_lists_isSet = false;
    m_local_available_color_name_lists_isValid = false;
}

void OAI_lists__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_lists__get_200_response::fromJsonObject(QJsonObject json) {

    m_list_descriptions_isValid = ::OpenAPI::fromJsonValue(m_list_descriptions, json[QString("listDescriptions")]);
    m_list_descriptions_isSet = !json[QString("listDescriptions")].isNull() && m_list_descriptions_isValid;

    m_local_available_color_name_lists_isValid = ::OpenAPI::fromJsonValue(m_local_available_color_name_lists, json[QString("localAvailableColorNameLists")]);
    m_local_available_color_name_lists_isSet = !json[QString("localAvailableColorNameLists")].isNull() && m_local_available_color_name_lists_isValid;
}

QString OAI_lists__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_lists__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_list_descriptions.isSet()) {
        obj.insert(QString("listDescriptions"), ::OpenAPI::toJsonValue(m_list_descriptions));
    }
    if (m_local_available_color_name_lists.size() > 0) {
        obj.insert(QString("localAvailableColorNameLists"), ::OpenAPI::toJsonValue(m_local_available_color_name_lists));
    }
    return obj;
}

OAI_lists__get_200_response_listDescriptions OAI_lists__get_200_response::getListDescriptions() const {
    return m_list_descriptions;
}
void OAI_lists__get_200_response::setListDescriptions(const OAI_lists__get_200_response_listDescriptions &list_descriptions) {
    m_list_descriptions = list_descriptions;
    m_list_descriptions_isSet = true;
}

bool OAI_lists__get_200_response::is_list_descriptions_Set() const{
    return m_list_descriptions_isSet;
}

bool OAI_lists__get_200_response::is_list_descriptions_Valid() const{
    return m_list_descriptions_isValid;
}

QList<QString> OAI_lists__get_200_response::getLocalAvailableColorNameLists() const {
    return m_local_available_color_name_lists;
}
void OAI_lists__get_200_response::setLocalAvailableColorNameLists(const QList<QString> &local_available_color_name_lists) {
    m_local_available_color_name_lists = local_available_color_name_lists;
    m_local_available_color_name_lists_isSet = true;
}

bool OAI_lists__get_200_response::is_local_available_color_name_lists_Set() const{
    return m_local_available_color_name_lists_isSet;
}

bool OAI_lists__get_200_response::is_local_available_color_name_lists_Valid() const{
    return m_local_available_color_name_lists_isValid;
}

bool OAI_lists__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_available_color_name_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_lists__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
