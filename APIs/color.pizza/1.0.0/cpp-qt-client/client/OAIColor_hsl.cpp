/**
 * Color Name API
 * An API that provides names for colors based on their hex value
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: color-name-api@elastiq.click
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColor_hsl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColor_hsl::OAIColor_hsl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColor_hsl::OAIColor_hsl() {
    this->initializeModel();
}

OAIColor_hsl::~OAIColor_hsl() {}

void OAIColor_hsl::initializeModel() {

    m_h_isSet = false;
    m_h_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;

    m_s_isSet = false;
    m_s_isValid = false;
}

void OAIColor_hsl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColor_hsl::fromJsonObject(QJsonObject json) {

    m_h_isValid = ::OpenAPI::fromJsonValue(m_h, json[QString("h")]);
    m_h_isSet = !json[QString("h")].isNull() && m_h_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("l")]);
    m_l_isSet = !json[QString("l")].isNull() && m_l_isValid;

    m_s_isValid = ::OpenAPI::fromJsonValue(m_s, json[QString("s")]);
    m_s_isSet = !json[QString("s")].isNull() && m_s_isValid;
}

QString OAIColor_hsl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColor_hsl::asJsonObject() const {
    QJsonObject obj;
    if (m_h_isSet) {
        obj.insert(QString("h"), ::OpenAPI::toJsonValue(m_h));
    }
    if (m_l_isSet) {
        obj.insert(QString("l"), ::OpenAPI::toJsonValue(m_l));
    }
    if (m_s_isSet) {
        obj.insert(QString("s"), ::OpenAPI::toJsonValue(m_s));
    }
    return obj;
}

double OAIColor_hsl::getH() const {
    return m_h;
}
void OAIColor_hsl::setH(const double &h) {
    m_h = h;
    m_h_isSet = true;
}

bool OAIColor_hsl::is_h_Set() const{
    return m_h_isSet;
}

bool OAIColor_hsl::is_h_Valid() const{
    return m_h_isValid;
}

double OAIColor_hsl::getL() const {
    return m_l;
}
void OAIColor_hsl::setL(const double &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIColor_hsl::is_l_Set() const{
    return m_l_isSet;
}

bool OAIColor_hsl::is_l_Valid() const{
    return m_l_isValid;
}

double OAIColor_hsl::getS() const {
    return m_s;
}
void OAIColor_hsl::setS(const double &s) {
    m_s = s;
    m_s_isSet = true;
}

bool OAIColor_hsl::is_s_Set() const{
    return m_s_isSet;
}

bool OAIColor_hsl::is_s_Valid() const{
    return m_s_isValid;
}

bool OAIColor_hsl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColor_hsl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
