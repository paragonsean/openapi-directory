# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album_primary_genres import AlbumPrimaryGenres
from openapi_server.models.album_secondary_genres import AlbumSecondaryGenres
from openapi_server.models.artist_artist_alias_list_inner import ArtistArtistAliasListInner
from openapi_server.models.artist_artist_credits import ArtistArtistCredits
from openapi_server.models.artist_artist_name_translation_list_inner import ArtistArtistNameTranslationListInner
from openapi_server import util


class Artist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist_alias_list: List[ArtistArtistAliasListInner]=None, artist_comment: str=None, artist_country: str=None, artist_credits: ArtistArtistCredits=None, artist_edit_url: str=None, artist_id: float=None, artist_mbid: str=None, artist_name: str=None, artist_name_translation_list: List[ArtistArtistNameTranslationListInner]=None, artist_rating: float=None, artist_share_url: str=None, artist_twitter_url: str=None, artist_vanity_id: str=None, managed: float=None, primary_genres: AlbumPrimaryGenres=None, restricted: float=None, secondary_genres: AlbumSecondaryGenres=None, updated_time: str=None):
        """Artist - a model defined in OpenAPI

        :param artist_alias_list: The artist_alias_list of this Artist.
        :param artist_comment: The artist_comment of this Artist.
        :param artist_country: The artist_country of this Artist.
        :param artist_credits: The artist_credits of this Artist.
        :param artist_edit_url: The artist_edit_url of this Artist.
        :param artist_id: The artist_id of this Artist.
        :param artist_mbid: The artist_mbid of this Artist.
        :param artist_name: The artist_name of this Artist.
        :param artist_name_translation_list: The artist_name_translation_list of this Artist.
        :param artist_rating: The artist_rating of this Artist.
        :param artist_share_url: The artist_share_url of this Artist.
        :param artist_twitter_url: The artist_twitter_url of this Artist.
        :param artist_vanity_id: The artist_vanity_id of this Artist.
        :param managed: The managed of this Artist.
        :param primary_genres: The primary_genres of this Artist.
        :param restricted: The restricted of this Artist.
        :param secondary_genres: The secondary_genres of this Artist.
        :param updated_time: The updated_time of this Artist.
        """
        self.openapi_types = {
            'artist_alias_list': List[ArtistArtistAliasListInner],
            'artist_comment': str,
            'artist_country': str,
            'artist_credits': ArtistArtistCredits,
            'artist_edit_url': str,
            'artist_id': float,
            'artist_mbid': str,
            'artist_name': str,
            'artist_name_translation_list': List[ArtistArtistNameTranslationListInner],
            'artist_rating': float,
            'artist_share_url': str,
            'artist_twitter_url': str,
            'artist_vanity_id': str,
            'managed': float,
            'primary_genres': AlbumPrimaryGenres,
            'restricted': float,
            'secondary_genres': AlbumSecondaryGenres,
            'updated_time': str
        }

        self.attribute_map = {
            'artist_alias_list': 'artist_alias_list',
            'artist_comment': 'artist_comment',
            'artist_country': 'artist_country',
            'artist_credits': 'artist_credits',
            'artist_edit_url': 'artist_edit_url',
            'artist_id': 'artist_id',
            'artist_mbid': 'artist_mbid',
            'artist_name': 'artist_name',
            'artist_name_translation_list': 'artist_name_translation_list',
            'artist_rating': 'artist_rating',
            'artist_share_url': 'artist_share_url',
            'artist_twitter_url': 'artist_twitter_url',
            'artist_vanity_id': 'artist_vanity_id',
            'managed': 'managed',
            'primary_genres': 'primary_genres',
            'restricted': 'restricted',
            'secondary_genres': 'secondary_genres',
            'updated_time': 'updated_time'
        }

        self._artist_alias_list = artist_alias_list
        self._artist_comment = artist_comment
        self._artist_country = artist_country
        self._artist_credits = artist_credits
        self._artist_edit_url = artist_edit_url
        self._artist_id = artist_id
        self._artist_mbid = artist_mbid
        self._artist_name = artist_name
        self._artist_name_translation_list = artist_name_translation_list
        self._artist_rating = artist_rating
        self._artist_share_url = artist_share_url
        self._artist_twitter_url = artist_twitter_url
        self._artist_vanity_id = artist_vanity_id
        self._managed = managed
        self._primary_genres = primary_genres
        self._restricted = restricted
        self._secondary_genres = secondary_genres
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Artist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Artist of this Artist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist_alias_list(self):
        """Gets the artist_alias_list of this Artist.


        :return: The artist_alias_list of this Artist.
        :rtype: List[ArtistArtistAliasListInner]
        """
        return self._artist_alias_list

    @artist_alias_list.setter
    def artist_alias_list(self, artist_alias_list):
        """Sets the artist_alias_list of this Artist.


        :param artist_alias_list: The artist_alias_list of this Artist.
        :type artist_alias_list: List[ArtistArtistAliasListInner]
        """

        self._artist_alias_list = artist_alias_list

    @property
    def artist_comment(self):
        """Gets the artist_comment of this Artist.

        

        :return: The artist_comment of this Artist.
        :rtype: str
        """
        return self._artist_comment

    @artist_comment.setter
    def artist_comment(self, artist_comment):
        """Sets the artist_comment of this Artist.

        

        :param artist_comment: The artist_comment of this Artist.
        :type artist_comment: str
        """

        self._artist_comment = artist_comment

    @property
    def artist_country(self):
        """Gets the artist_country of this Artist.

        

        :return: The artist_country of this Artist.
        :rtype: str
        """
        return self._artist_country

    @artist_country.setter
    def artist_country(self, artist_country):
        """Sets the artist_country of this Artist.

        

        :param artist_country: The artist_country of this Artist.
        :type artist_country: str
        """

        self._artist_country = artist_country

    @property
    def artist_credits(self):
        """Gets the artist_credits of this Artist.


        :return: The artist_credits of this Artist.
        :rtype: ArtistArtistCredits
        """
        return self._artist_credits

    @artist_credits.setter
    def artist_credits(self, artist_credits):
        """Sets the artist_credits of this Artist.


        :param artist_credits: The artist_credits of this Artist.
        :type artist_credits: ArtistArtistCredits
        """

        self._artist_credits = artist_credits

    @property
    def artist_edit_url(self):
        """Gets the artist_edit_url of this Artist.

        

        :return: The artist_edit_url of this Artist.
        :rtype: str
        """
        return self._artist_edit_url

    @artist_edit_url.setter
    def artist_edit_url(self, artist_edit_url):
        """Sets the artist_edit_url of this Artist.

        

        :param artist_edit_url: The artist_edit_url of this Artist.
        :type artist_edit_url: str
        """

        self._artist_edit_url = artist_edit_url

    @property
    def artist_id(self):
        """Gets the artist_id of this Artist.

        

        :return: The artist_id of this Artist.
        :rtype: float
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id):
        """Sets the artist_id of this Artist.

        

        :param artist_id: The artist_id of this Artist.
        :type artist_id: float
        """

        self._artist_id = artist_id

    @property
    def artist_mbid(self):
        """Gets the artist_mbid of this Artist.

        

        :return: The artist_mbid of this Artist.
        :rtype: str
        """
        return self._artist_mbid

    @artist_mbid.setter
    def artist_mbid(self, artist_mbid):
        """Sets the artist_mbid of this Artist.

        

        :param artist_mbid: The artist_mbid of this Artist.
        :type artist_mbid: str
        """

        self._artist_mbid = artist_mbid

    @property
    def artist_name(self):
        """Gets the artist_name of this Artist.

        

        :return: The artist_name of this Artist.
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name):
        """Sets the artist_name of this Artist.

        

        :param artist_name: The artist_name of this Artist.
        :type artist_name: str
        """

        self._artist_name = artist_name

    @property
    def artist_name_translation_list(self):
        """Gets the artist_name_translation_list of this Artist.


        :return: The artist_name_translation_list of this Artist.
        :rtype: List[ArtistArtistNameTranslationListInner]
        """
        return self._artist_name_translation_list

    @artist_name_translation_list.setter
    def artist_name_translation_list(self, artist_name_translation_list):
        """Sets the artist_name_translation_list of this Artist.


        :param artist_name_translation_list: The artist_name_translation_list of this Artist.
        :type artist_name_translation_list: List[ArtistArtistNameTranslationListInner]
        """

        self._artist_name_translation_list = artist_name_translation_list

    @property
    def artist_rating(self):
        """Gets the artist_rating of this Artist.

        

        :return: The artist_rating of this Artist.
        :rtype: float
        """
        return self._artist_rating

    @artist_rating.setter
    def artist_rating(self, artist_rating):
        """Sets the artist_rating of this Artist.

        

        :param artist_rating: The artist_rating of this Artist.
        :type artist_rating: float
        """

        self._artist_rating = artist_rating

    @property
    def artist_share_url(self):
        """Gets the artist_share_url of this Artist.

        

        :return: The artist_share_url of this Artist.
        :rtype: str
        """
        return self._artist_share_url

    @artist_share_url.setter
    def artist_share_url(self, artist_share_url):
        """Sets the artist_share_url of this Artist.

        

        :param artist_share_url: The artist_share_url of this Artist.
        :type artist_share_url: str
        """

        self._artist_share_url = artist_share_url

    @property
    def artist_twitter_url(self):
        """Gets the artist_twitter_url of this Artist.

        

        :return: The artist_twitter_url of this Artist.
        :rtype: str
        """
        return self._artist_twitter_url

    @artist_twitter_url.setter
    def artist_twitter_url(self, artist_twitter_url):
        """Sets the artist_twitter_url of this Artist.

        

        :param artist_twitter_url: The artist_twitter_url of this Artist.
        :type artist_twitter_url: str
        """

        self._artist_twitter_url = artist_twitter_url

    @property
    def artist_vanity_id(self):
        """Gets the artist_vanity_id of this Artist.

        

        :return: The artist_vanity_id of this Artist.
        :rtype: str
        """
        return self._artist_vanity_id

    @artist_vanity_id.setter
    def artist_vanity_id(self, artist_vanity_id):
        """Sets the artist_vanity_id of this Artist.

        

        :param artist_vanity_id: The artist_vanity_id of this Artist.
        :type artist_vanity_id: str
        """

        self._artist_vanity_id = artist_vanity_id

    @property
    def managed(self):
        """Gets the managed of this Artist.

        

        :return: The managed of this Artist.
        :rtype: float
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Artist.

        

        :param managed: The managed of this Artist.
        :type managed: float
        """

        self._managed = managed

    @property
    def primary_genres(self):
        """Gets the primary_genres of this Artist.


        :return: The primary_genres of this Artist.
        :rtype: AlbumPrimaryGenres
        """
        return self._primary_genres

    @primary_genres.setter
    def primary_genres(self, primary_genres):
        """Sets the primary_genres of this Artist.


        :param primary_genres: The primary_genres of this Artist.
        :type primary_genres: AlbumPrimaryGenres
        """

        self._primary_genres = primary_genres

    @property
    def restricted(self):
        """Gets the restricted of this Artist.

        

        :return: The restricted of this Artist.
        :rtype: float
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this Artist.

        

        :param restricted: The restricted of this Artist.
        :type restricted: float
        """

        self._restricted = restricted

    @property
    def secondary_genres(self):
        """Gets the secondary_genres of this Artist.


        :return: The secondary_genres of this Artist.
        :rtype: AlbumSecondaryGenres
        """
        return self._secondary_genres

    @secondary_genres.setter
    def secondary_genres(self, secondary_genres):
        """Sets the secondary_genres of this Artist.


        :param secondary_genres: The secondary_genres of this Artist.
        :type secondary_genres: AlbumSecondaryGenres
        """

        self._secondary_genres = secondary_genres

    @property
    def updated_time(self):
        """Gets the updated_time of this Artist.

        

        :return: The updated_time of this Artist.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Artist.

        

        :param updated_time: The updated_time of this Artist.
        :type updated_time: str
        """

        self._updated_time = updated_time
