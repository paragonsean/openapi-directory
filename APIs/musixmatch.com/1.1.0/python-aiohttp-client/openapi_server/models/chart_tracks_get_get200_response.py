# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_tracks_get_get200_response_message import ChartTracksGetGet200ResponseMessage
from openapi_server import util


class ChartTracksGetGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: ChartTracksGetGet200ResponseMessage=None):
        """ChartTracksGetGet200Response - a model defined in OpenAPI

        :param message: The message of this ChartTracksGetGet200Response.
        """
        self.openapi_types = {
            'message': ChartTracksGetGet200ResponseMessage
        }

        self.attribute_map = {
            'message': 'message'
        }

        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartTracksGetGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _chart_tracks_get_get_200_response of this ChartTracksGetGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ChartTracksGetGet200Response.


        :return: The message of this ChartTracksGetGet200Response.
        :rtype: ChartTracksGetGet200ResponseMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChartTracksGetGet200Response.


        :param message: The message of this ChartTracksGetGet200Response.
        :type message: ChartTracksGetGet200ResponseMessage
        """

        self._message = message
