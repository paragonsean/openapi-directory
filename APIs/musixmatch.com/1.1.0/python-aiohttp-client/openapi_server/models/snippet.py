# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Snippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_tracking_url: str=None, instrumental: float=None, pixel_tracking_url: str=None, restricted: float=None, script_tracking_url: str=None, snippet_body: str=None, snippet_id: float=None, snippet_language: str=None, updated_time: str=None):
        """Snippet - a model defined in OpenAPI

        :param html_tracking_url: The html_tracking_url of this Snippet.
        :param instrumental: The instrumental of this Snippet.
        :param pixel_tracking_url: The pixel_tracking_url of this Snippet.
        :param restricted: The restricted of this Snippet.
        :param script_tracking_url: The script_tracking_url of this Snippet.
        :param snippet_body: The snippet_body of this Snippet.
        :param snippet_id: The snippet_id of this Snippet.
        :param snippet_language: The snippet_language of this Snippet.
        :param updated_time: The updated_time of this Snippet.
        """
        self.openapi_types = {
            'html_tracking_url': str,
            'instrumental': float,
            'pixel_tracking_url': str,
            'restricted': float,
            'script_tracking_url': str,
            'snippet_body': str,
            'snippet_id': float,
            'snippet_language': str,
            'updated_time': str
        }

        self.attribute_map = {
            'html_tracking_url': 'html_tracking_url',
            'instrumental': 'instrumental',
            'pixel_tracking_url': 'pixel_tracking_url',
            'restricted': 'restricted',
            'script_tracking_url': 'script_tracking_url',
            'snippet_body': 'snippet_body',
            'snippet_id': 'snippet_id',
            'snippet_language': 'snippet_language',
            'updated_time': 'updated_time'
        }

        self._html_tracking_url = html_tracking_url
        self._instrumental = instrumental
        self._pixel_tracking_url = pixel_tracking_url
        self._restricted = restricted
        self._script_tracking_url = script_tracking_url
        self._snippet_body = snippet_body
        self._snippet_id = snippet_id
        self._snippet_language = snippet_language
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snippet of this Snippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_tracking_url(self):
        """Gets the html_tracking_url of this Snippet.

        

        :return: The html_tracking_url of this Snippet.
        :rtype: str
        """
        return self._html_tracking_url

    @html_tracking_url.setter
    def html_tracking_url(self, html_tracking_url):
        """Sets the html_tracking_url of this Snippet.

        

        :param html_tracking_url: The html_tracking_url of this Snippet.
        :type html_tracking_url: str
        """

        self._html_tracking_url = html_tracking_url

    @property
    def instrumental(self):
        """Gets the instrumental of this Snippet.

        

        :return: The instrumental of this Snippet.
        :rtype: float
        """
        return self._instrumental

    @instrumental.setter
    def instrumental(self, instrumental):
        """Sets the instrumental of this Snippet.

        

        :param instrumental: The instrumental of this Snippet.
        :type instrumental: float
        """

        self._instrumental = instrumental

    @property
    def pixel_tracking_url(self):
        """Gets the pixel_tracking_url of this Snippet.

        

        :return: The pixel_tracking_url of this Snippet.
        :rtype: str
        """
        return self._pixel_tracking_url

    @pixel_tracking_url.setter
    def pixel_tracking_url(self, pixel_tracking_url):
        """Sets the pixel_tracking_url of this Snippet.

        

        :param pixel_tracking_url: The pixel_tracking_url of this Snippet.
        :type pixel_tracking_url: str
        """

        self._pixel_tracking_url = pixel_tracking_url

    @property
    def restricted(self):
        """Gets the restricted of this Snippet.

        

        :return: The restricted of this Snippet.
        :rtype: float
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this Snippet.

        

        :param restricted: The restricted of this Snippet.
        :type restricted: float
        """

        self._restricted = restricted

    @property
    def script_tracking_url(self):
        """Gets the script_tracking_url of this Snippet.

        

        :return: The script_tracking_url of this Snippet.
        :rtype: str
        """
        return self._script_tracking_url

    @script_tracking_url.setter
    def script_tracking_url(self, script_tracking_url):
        """Sets the script_tracking_url of this Snippet.

        

        :param script_tracking_url: The script_tracking_url of this Snippet.
        :type script_tracking_url: str
        """

        self._script_tracking_url = script_tracking_url

    @property
    def snippet_body(self):
        """Gets the snippet_body of this Snippet.

        

        :return: The snippet_body of this Snippet.
        :rtype: str
        """
        return self._snippet_body

    @snippet_body.setter
    def snippet_body(self, snippet_body):
        """Sets the snippet_body of this Snippet.

        

        :param snippet_body: The snippet_body of this Snippet.
        :type snippet_body: str
        """

        self._snippet_body = snippet_body

    @property
    def snippet_id(self):
        """Gets the snippet_id of this Snippet.

        

        :return: The snippet_id of this Snippet.
        :rtype: float
        """
        return self._snippet_id

    @snippet_id.setter
    def snippet_id(self, snippet_id):
        """Sets the snippet_id of this Snippet.

        

        :param snippet_id: The snippet_id of this Snippet.
        :type snippet_id: float
        """

        self._snippet_id = snippet_id

    @property
    def snippet_language(self):
        """Gets the snippet_language of this Snippet.

        

        :return: The snippet_language of this Snippet.
        :rtype: str
        """
        return self._snippet_language

    @snippet_language.setter
    def snippet_language(self, snippet_language):
        """Sets the snippet_language of this Snippet.

        

        :param snippet_language: The snippet_language of this Snippet.
        :type snippet_language: str
        """

        self._snippet_language = snippet_language

    @property
    def updated_time(self):
        """Gets the updated_time of this Snippet.

        

        :return: The updated_time of this Snippet.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Snippet.

        

        :param updated_time: The updated_time of this Snippet.
        :type updated_time: str
        """

        self._updated_time = updated_time
