/**
 * Datasette API
 * Execute SQL queries against a Datasette database and return the results as JSON
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/DefaultApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a SQLite SQL query against the content database
     * Accepts SQLite SQL query, returns JSON. Does not allow PRAGMA statements.
     * @param {String} sql The SQL query to be executed
     * @param {module:model/String} shape The shape of the response data. Must be \"array\"
     * @param {module:api/DefaultApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    query(sql, shape, callback) {
      let postBody = null;
      // verify the required parameter 'sql' is set
      if (sql === undefined || sql === null) {
        throw new Error("Missing the required parameter 'sql' when calling query");
      }
      // verify the required parameter 'shape' is set
      if (shape === undefined || shape === null) {
        throw new Error("Missing the required parameter 'shape' when calling query");
      }

      let pathParams = {
      };
      let queryParams = {
        'sql': sql,
        '_shape': shape
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/content.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
