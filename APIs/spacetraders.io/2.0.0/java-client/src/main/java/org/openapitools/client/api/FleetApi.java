/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateChart201Response;
import org.openapitools.client.model.CreateShipShipScan201Response;
import org.openapitools.client.model.CreateShipSystemScan201Response;
import org.openapitools.client.model.CreateShipWaypointScan201Response;
import org.openapitools.client.model.CreateSurvey201Response;
import org.openapitools.client.model.DockShip200Response;
import org.openapitools.client.model.ExtractResources201Response;
import org.openapitools.client.model.ExtractResourcesRequest;
import org.openapitools.client.model.GetMyShip200Response;
import org.openapitools.client.model.GetMyShipCargo200Response;
import org.openapitools.client.model.GetMyShips200Response;
import org.openapitools.client.model.GetShipCooldown200Response;
import org.openapitools.client.model.GetShipNav200Response;
import org.openapitools.client.model.Jettison200Response;
import org.openapitools.client.model.JettisonRequest;
import org.openapitools.client.model.JumpShip200Response;
import org.openapitools.client.model.JumpShipRequest;
import org.openapitools.client.model.NavigateShip200Response;
import org.openapitools.client.model.NavigateShipRequest;
import org.openapitools.client.model.OrbitShip200Response;
import org.openapitools.client.model.PatchShipNavRequest;
import org.openapitools.client.model.PurchaseCargo201Response;
import org.openapitools.client.model.PurchaseCargoRequest;
import org.openapitools.client.model.PurchaseShip201Response;
import org.openapitools.client.model.PurchaseShipRequest;
import org.openapitools.client.model.RefuelShip200Response;
import org.openapitools.client.model.SellCargo201Response;
import org.openapitools.client.model.SellCargoRequest;
import org.openapitools.client.model.ShipRefine200Response;
import org.openapitools.client.model.ShipRefineRequest;
import org.openapitools.client.model.TransferCargo200Response;
import org.openapitools.client.model.TransferCargoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FleetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FleetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FleetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createChart
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChartCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/chart"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChartValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling createChart(Async)");
        }

        return createChartCall(shipSymbol, _callback);

    }

    /**
     * Create Chart
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @param shipSymbol The symbol of the ship (required)
     * @return CreateChart201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateChart201Response createChart(String shipSymbol) throws ApiException {
        ApiResponse<CreateChart201Response> localVarResp = createChartWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Create Chart
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @param shipSymbol The symbol of the ship (required)
     * @return ApiResponse&lt;CreateChart201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChart201Response> createChartWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = createChartValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<CreateChart201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Chart (asynchronously)
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChartAsync(String shipSymbol, final ApiCallback<CreateChart201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChartValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<CreateChart201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createShipShipScan
     * @param shipSymbol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipShipScanCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/scan/ships"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShipShipScanValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling createShipShipScan(Async)");
        }

        return createShipShipScanCall(shipSymbol, _callback);

    }

    /**
     * Scan Ships
     * Activate your ship&#39;s sensor arrays to scan for ship information.
     * @param shipSymbol  (required)
     * @return CreateShipShipScan201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateShipShipScan201Response createShipShipScan(String shipSymbol) throws ApiException {
        ApiResponse<CreateShipShipScan201Response> localVarResp = createShipShipScanWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Scan Ships
     * Activate your ship&#39;s sensor arrays to scan for ship information.
     * @param shipSymbol  (required)
     * @return ApiResponse&lt;CreateShipShipScan201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateShipShipScan201Response> createShipShipScanWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = createShipShipScanValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<CreateShipShipScan201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scan Ships (asynchronously)
     * Activate your ship&#39;s sensor arrays to scan for ship information.
     * @param shipSymbol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipShipScanAsync(String shipSymbol, final ApiCallback<CreateShipShipScan201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShipShipScanValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<CreateShipShipScan201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createShipSystemScan
     * @param shipSymbol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipSystemScanCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/scan/systems"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShipSystemScanValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling createShipSystemScan(Async)");
        }

        return createShipSystemScanCall(shipSymbol, _callback);

    }

    /**
     * Scan Systems
     * Activate your ship&#39;s sensor arrays to scan for system information.
     * @param shipSymbol  (required)
     * @return CreateShipSystemScan201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateShipSystemScan201Response createShipSystemScan(String shipSymbol) throws ApiException {
        ApiResponse<CreateShipSystemScan201Response> localVarResp = createShipSystemScanWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Scan Systems
     * Activate your ship&#39;s sensor arrays to scan for system information.
     * @param shipSymbol  (required)
     * @return ApiResponse&lt;CreateShipSystemScan201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateShipSystemScan201Response> createShipSystemScanWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = createShipSystemScanValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<CreateShipSystemScan201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scan Systems (asynchronously)
     * Activate your ship&#39;s sensor arrays to scan for system information.
     * @param shipSymbol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipSystemScanAsync(String shipSymbol, final ApiCallback<CreateShipSystemScan201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShipSystemScanValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<CreateShipSystemScan201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createShipWaypointScan
     * @param shipSymbol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipWaypointScanCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/scan/waypoints"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShipWaypointScanValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling createShipWaypointScan(Async)");
        }

        return createShipWaypointScanCall(shipSymbol, _callback);

    }

    /**
     * Scan Waypoints
     * Activate your ship&#39;s sensor arrays to scan for waypoint information.
     * @param shipSymbol  (required)
     * @return CreateShipWaypointScan201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateShipWaypointScan201Response createShipWaypointScan(String shipSymbol) throws ApiException {
        ApiResponse<CreateShipWaypointScan201Response> localVarResp = createShipWaypointScanWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Scan Waypoints
     * Activate your ship&#39;s sensor arrays to scan for waypoint information.
     * @param shipSymbol  (required)
     * @return ApiResponse&lt;CreateShipWaypointScan201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateShipWaypointScan201Response> createShipWaypointScanWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = createShipWaypointScanValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<CreateShipWaypointScan201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scan Waypoints (asynchronously)
     * Activate your ship&#39;s sensor arrays to scan for waypoint information.
     * @param shipSymbol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipWaypointScanAsync(String shipSymbol, final ApiCallback<CreateShipWaypointScan201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShipWaypointScanValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<CreateShipWaypointScan201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSurvey
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSurveyCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/survey"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSurveyValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling createSurvey(Async)");
        }

        return createSurveyCall(shipSymbol, _callback);

    }

    /**
     * Create Survey
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @param shipSymbol The symbol of the ship (required)
     * @return CreateSurvey201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateSurvey201Response createSurvey(String shipSymbol) throws ApiException {
        ApiResponse<CreateSurvey201Response> localVarResp = createSurveyWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Create Survey
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @param shipSymbol The symbol of the ship (required)
     * @return ApiResponse&lt;CreateSurvey201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSurvey201Response> createSurveyWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = createSurveyValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<CreateSurvey201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Survey (asynchronously)
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSurveyAsync(String shipSymbol, final ApiCallback<CreateSurvey201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSurveyValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<CreateSurvey201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dockShip
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully docked at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dockShipCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/dock"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dockShipValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling dockShip(Async)");
        }

        return dockShipCall(shipSymbol, _callback);

    }

    /**
     * Dock Ship
     * Attempt to dock your ship at it&#39;s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @param shipSymbol The symbol of the ship (required)
     * @return DockShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully docked at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public DockShip200Response dockShip(String shipSymbol) throws ApiException {
        ApiResponse<DockShip200Response> localVarResp = dockShipWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Dock Ship
     * Attempt to dock your ship at it&#39;s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @param shipSymbol The symbol of the ship (required)
     * @return ApiResponse&lt;DockShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully docked at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DockShip200Response> dockShipWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = dockShipValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<DockShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dock Ship (asynchronously)
     * Attempt to dock your ship at it&#39;s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully docked at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dockShipAsync(String shipSymbol, final ApiCallback<DockShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dockShipValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<DockShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractResources
     * @param shipSymbol The ship symbol (required)
     * @param extractResourcesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractResourcesCall(String shipSymbol, ExtractResourcesRequest extractResourcesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extractResourcesRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/extract"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractResourcesValidateBeforeCall(String shipSymbol, ExtractResourcesRequest extractResourcesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling extractResources(Async)");
        }

        return extractResourcesCall(shipSymbol, extractResourcesRequest, _callback);

    }

    /**
     * Extract Resources
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @param shipSymbol The ship symbol (required)
     * @param extractResourcesRequest  (optional)
     * @return ExtractResources201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ExtractResources201Response extractResources(String shipSymbol, ExtractResourcesRequest extractResourcesRequest) throws ApiException {
        ApiResponse<ExtractResources201Response> localVarResp = extractResourcesWithHttpInfo(shipSymbol, extractResourcesRequest);
        return localVarResp.getData();
    }

    /**
     * Extract Resources
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @param shipSymbol The ship symbol (required)
     * @param extractResourcesRequest  (optional)
     * @return ApiResponse&lt;ExtractResources201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtractResources201Response> extractResourcesWithHttpInfo(String shipSymbol, ExtractResourcesRequest extractResourcesRequest) throws ApiException {
        okhttp3.Call localVarCall = extractResourcesValidateBeforeCall(shipSymbol, extractResourcesRequest, null);
        Type localVarReturnType = new TypeToken<ExtractResources201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract Resources (asynchronously)
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @param shipSymbol The ship symbol (required)
     * @param extractResourcesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractResourcesAsync(String shipSymbol, ExtractResourcesRequest extractResourcesRequest, final ApiCallback<ExtractResources201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractResourcesValidateBeforeCall(shipSymbol, extractResourcesRequest, _callback);
        Type localVarReturnType = new TypeToken<ExtractResources201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyShip
     * @param shipSymbol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyShipCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyShipValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling getMyShip(Async)");
        }

        return getMyShipCall(shipSymbol, _callback);

    }

    /**
     * Get Ship
     * Retrieve the details of your ship.
     * @param shipSymbol  (required)
     * @return GetMyShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMyShip200Response getMyShip(String shipSymbol) throws ApiException {
        ApiResponse<GetMyShip200Response> localVarResp = getMyShipWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Ship
     * Retrieve the details of your ship.
     * @param shipSymbol  (required)
     * @return ApiResponse&lt;GetMyShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMyShip200Response> getMyShipWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = getMyShipValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<GetMyShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ship (asynchronously)
     * Retrieve the details of your ship.
     * @param shipSymbol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyShipAsync(String shipSymbol, final ApiCallback<GetMyShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyShipValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetMyShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyShipCargo
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyShipCargoCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/cargo"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyShipCargoValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling getMyShipCargo(Async)");
        }

        return getMyShipCargoCall(shipSymbol, _callback);

    }

    /**
     * Get Ship Cargo
     * Retrieve the cargo of your ship.
     * @param shipSymbol The symbol of the ship (required)
     * @return GetMyShipCargo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMyShipCargo200Response getMyShipCargo(String shipSymbol) throws ApiException {
        ApiResponse<GetMyShipCargo200Response> localVarResp = getMyShipCargoWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Ship Cargo
     * Retrieve the cargo of your ship.
     * @param shipSymbol The symbol of the ship (required)
     * @return ApiResponse&lt;GetMyShipCargo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMyShipCargo200Response> getMyShipCargoWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = getMyShipCargoValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<GetMyShipCargo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ship Cargo (asynchronously)
     * Retrieve the cargo of your ship.
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyShipCargoAsync(String shipSymbol, final ApiCallback<GetMyShipCargo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyShipCargoValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetMyShipCargo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyShips
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyShipsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyShipsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getMyShipsCall(page, limit, _callback);

    }

    /**
     * List Ships
     * Retrieve all of your ships.
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @return GetMyShips200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMyShips200Response getMyShips(Integer page, Integer limit) throws ApiException {
        ApiResponse<GetMyShips200Response> localVarResp = getMyShipsWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List Ships
     * Retrieve all of your ships.
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @return ApiResponse&lt;GetMyShips200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMyShips200Response> getMyShipsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMyShipsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<GetMyShips200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Ships (asynchronously)
     * Retrieve all of your ships.
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyShipsAsync(Integer page, Integer limit, final ApiCallback<GetMyShips200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyShipsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<GetMyShips200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipCooldown
     * @param shipSymbol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No cooldown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipCooldownCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/cooldown"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipCooldownValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling getShipCooldown(Async)");
        }

        return getShipCooldownCall(shipSymbol, _callback);

    }

    /**
     * Get Ship Cooldown
     * Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @param shipSymbol  (required)
     * @return GetShipCooldown200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No cooldown </td><td>  -  </td></tr>
     </table>
     */
    public GetShipCooldown200Response getShipCooldown(String shipSymbol) throws ApiException {
        ApiResponse<GetShipCooldown200Response> localVarResp = getShipCooldownWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Ship Cooldown
     * Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @param shipSymbol  (required)
     * @return ApiResponse&lt;GetShipCooldown200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No cooldown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShipCooldown200Response> getShipCooldownWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = getShipCooldownValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<GetShipCooldown200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ship Cooldown (asynchronously)
     * Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @param shipSymbol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No cooldown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipCooldownAsync(String shipSymbol, final ApiCallback<GetShipCooldown200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipCooldownValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetShipCooldown200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipNav
     * @param shipSymbol The ship symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipNavCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/nav"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipNavValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling getShipNav(Async)");
        }

        return getShipNavCall(shipSymbol, _callback);

    }

    /**
     * Get Ship Nav
     * Get the current nav status of a ship.
     * @param shipSymbol The ship symbol (required)
     * @return GetShipNav200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public GetShipNav200Response getShipNav(String shipSymbol) throws ApiException {
        ApiResponse<GetShipNav200Response> localVarResp = getShipNavWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Ship Nav
     * Get the current nav status of a ship.
     * @param shipSymbol The ship symbol (required)
     * @return ApiResponse&lt;GetShipNav200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShipNav200Response> getShipNavWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = getShipNavValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<GetShipNav200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ship Nav (asynchronously)
     * Get the current nav status of a ship.
     * @param shipSymbol The ship symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipNavAsync(String shipSymbol, final ApiCallback<GetShipNav200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipNavValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetShipNav200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jettison
     * @param shipSymbol  (required)
     * @param jettisonRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jettisonCall(String shipSymbol, JettisonRequest jettisonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jettisonRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/jettison"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jettisonValidateBeforeCall(String shipSymbol, JettisonRequest jettisonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling jettison(Async)");
        }

        return jettisonCall(shipSymbol, jettisonRequest, _callback);

    }

    /**
     * Jettison Cargo
     * Jettison cargo from your ship&#39;s cargo hold.
     * @param shipSymbol  (required)
     * @param jettisonRequest  (optional)
     * @return Jettison200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Jettison200Response jettison(String shipSymbol, JettisonRequest jettisonRequest) throws ApiException {
        ApiResponse<Jettison200Response> localVarResp = jettisonWithHttpInfo(shipSymbol, jettisonRequest);
        return localVarResp.getData();
    }

    /**
     * Jettison Cargo
     * Jettison cargo from your ship&#39;s cargo hold.
     * @param shipSymbol  (required)
     * @param jettisonRequest  (optional)
     * @return ApiResponse&lt;Jettison200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jettison200Response> jettisonWithHttpInfo(String shipSymbol, JettisonRequest jettisonRequest) throws ApiException {
        okhttp3.Call localVarCall = jettisonValidateBeforeCall(shipSymbol, jettisonRequest, null);
        Type localVarReturnType = new TypeToken<Jettison200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Jettison Cargo (asynchronously)
     * Jettison cargo from your ship&#39;s cargo hold.
     * @param shipSymbol  (required)
     * @param jettisonRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jettisonAsync(String shipSymbol, JettisonRequest jettisonRequest, final ApiCallback<Jettison200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = jettisonValidateBeforeCall(shipSymbol, jettisonRequest, _callback);
        Type localVarReturnType = new TypeToken<Jettison200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpShip
     * @param shipSymbol  (required)
     * @param jumpShipRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpShipCall(String shipSymbol, JumpShipRequest jumpShipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpShipRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/jump"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpShipValidateBeforeCall(String shipSymbol, JumpShipRequest jumpShipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling jumpShip(Async)");
        }

        return jumpShipCall(shipSymbol, jumpShipRequest, _callback);

    }

    /**
     * Jump Ship
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @param shipSymbol  (required)
     * @param jumpShipRequest  (optional)
     * @return JumpShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public JumpShip200Response jumpShip(String shipSymbol, JumpShipRequest jumpShipRequest) throws ApiException {
        ApiResponse<JumpShip200Response> localVarResp = jumpShipWithHttpInfo(shipSymbol, jumpShipRequest);
        return localVarResp.getData();
    }

    /**
     * Jump Ship
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @param shipSymbol  (required)
     * @param jumpShipRequest  (optional)
     * @return ApiResponse&lt;JumpShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JumpShip200Response> jumpShipWithHttpInfo(String shipSymbol, JumpShipRequest jumpShipRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpShipValidateBeforeCall(shipSymbol, jumpShipRequest, null);
        Type localVarReturnType = new TypeToken<JumpShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Jump Ship (asynchronously)
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @param shipSymbol  (required)
     * @param jumpShipRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpShipAsync(String shipSymbol, JumpShipRequest jumpShipRequest, final ApiCallback<JumpShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpShipValidateBeforeCall(shipSymbol, jumpShipRequest, _callback);
        Type localVarReturnType = new TypeToken<JumpShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for navigateShip
     * @param shipSymbol The ship symbol (required)
     * @param navigateShipRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call navigateShipCall(String shipSymbol, NavigateShipRequest navigateShipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = navigateShipRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/navigate"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call navigateShipValidateBeforeCall(String shipSymbol, NavigateShipRequest navigateShipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling navigateShip(Async)");
        }

        return navigateShipCall(shipSymbol, navigateShipRequest, _callback);

    }

    /**
     * Navigate Ship
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s warp or jump actions.
     * @param shipSymbol The ship symbol (required)
     * @param navigateShipRequest  (optional)
     * @return NavigateShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public NavigateShip200Response navigateShip(String shipSymbol, NavigateShipRequest navigateShipRequest) throws ApiException {
        ApiResponse<NavigateShip200Response> localVarResp = navigateShipWithHttpInfo(shipSymbol, navigateShipRequest);
        return localVarResp.getData();
    }

    /**
     * Navigate Ship
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s warp or jump actions.
     * @param shipSymbol The ship symbol (required)
     * @param navigateShipRequest  (optional)
     * @return ApiResponse&lt;NavigateShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NavigateShip200Response> navigateShipWithHttpInfo(String shipSymbol, NavigateShipRequest navigateShipRequest) throws ApiException {
        okhttp3.Call localVarCall = navigateShipValidateBeforeCall(shipSymbol, navigateShipRequest, null);
        Type localVarReturnType = new TypeToken<NavigateShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Navigate Ship (asynchronously)
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s warp or jump actions.
     * @param shipSymbol The ship symbol (required)
     * @param navigateShipRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call navigateShipAsync(String shipSymbol, NavigateShipRequest navigateShipRequest, final ApiCallback<NavigateShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = navigateShipValidateBeforeCall(shipSymbol, navigateShipRequest, _callback);
        Type localVarReturnType = new TypeToken<NavigateShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orbitShip
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully moved into orbit at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orbitShipCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/orbit"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orbitShipValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling orbitShip(Async)");
        }

        return orbitShipCall(shipSymbol, _callback);

    }

    /**
     * Orbit Ship
     * Attempt to move your ship into orbit at it&#39;s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @param shipSymbol The symbol of the ship (required)
     * @return OrbitShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully moved into orbit at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public OrbitShip200Response orbitShip(String shipSymbol) throws ApiException {
        ApiResponse<OrbitShip200Response> localVarResp = orbitShipWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Orbit Ship
     * Attempt to move your ship into orbit at it&#39;s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @param shipSymbol The symbol of the ship (required)
     * @return ApiResponse&lt;OrbitShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully moved into orbit at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrbitShip200Response> orbitShipWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = orbitShipValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<OrbitShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Orbit Ship (asynchronously)
     * Attempt to move your ship into orbit at it&#39;s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @param shipSymbol The symbol of the ship (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully moved into orbit at it&#39;s current location. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orbitShipAsync(String shipSymbol, final ApiCallback<OrbitShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orbitShipValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<OrbitShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchShipNav
     * @param shipSymbol The ship symbol (required)
     * @param patchShipNavRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchShipNavCall(String shipSymbol, PatchShipNavRequest patchShipNavRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchShipNavRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/nav"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchShipNavValidateBeforeCall(String shipSymbol, PatchShipNavRequest patchShipNavRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling patchShipNav(Async)");
        }

        return patchShipNavCall(shipSymbol, patchShipNavRequest, _callback);

    }

    /**
     * Patch Ship Nav
     * Update the nav data of a ship, such as the flight mode.
     * @param shipSymbol The ship symbol (required)
     * @param patchShipNavRequest  (optional)
     * @return GetShipNav200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public GetShipNav200Response patchShipNav(String shipSymbol, PatchShipNavRequest patchShipNavRequest) throws ApiException {
        ApiResponse<GetShipNav200Response> localVarResp = patchShipNavWithHttpInfo(shipSymbol, patchShipNavRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Ship Nav
     * Update the nav data of a ship, such as the flight mode.
     * @param shipSymbol The ship symbol (required)
     * @param patchShipNavRequest  (optional)
     * @return ApiResponse&lt;GetShipNav200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShipNav200Response> patchShipNavWithHttpInfo(String shipSymbol, PatchShipNavRequest patchShipNavRequest) throws ApiException {
        okhttp3.Call localVarCall = patchShipNavValidateBeforeCall(shipSymbol, patchShipNavRequest, null);
        Type localVarReturnType = new TypeToken<GetShipNav200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Ship Nav (asynchronously)
     * Update the nav data of a ship, such as the flight mode.
     * @param shipSymbol The ship symbol (required)
     * @param patchShipNavRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated nav status of the ship. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchShipNavAsync(String shipSymbol, PatchShipNavRequest patchShipNavRequest, final ApiCallback<GetShipNav200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchShipNavValidateBeforeCall(shipSymbol, patchShipNavRequest, _callback);
        Type localVarReturnType = new TypeToken<GetShipNav200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchaseCargo
     * @param shipSymbol  (required)
     * @param purchaseCargoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseCargoCall(String shipSymbol, PurchaseCargoRequest purchaseCargoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseCargoRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/purchase"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseCargoValidateBeforeCall(String shipSymbol, PurchaseCargoRequest purchaseCargoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling purchaseCargo(Async)");
        }

        return purchaseCargoCall(shipSymbol, purchaseCargoRequest, _callback);

    }

    /**
     * Purchase Cargo
     * Purchase cargo.
     * @param shipSymbol  (required)
     * @param purchaseCargoRequest  (optional)
     * @return PurchaseCargo201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseCargo201Response purchaseCargo(String shipSymbol, PurchaseCargoRequest purchaseCargoRequest) throws ApiException {
        ApiResponse<PurchaseCargo201Response> localVarResp = purchaseCargoWithHttpInfo(shipSymbol, purchaseCargoRequest);
        return localVarResp.getData();
    }

    /**
     * Purchase Cargo
     * Purchase cargo.
     * @param shipSymbol  (required)
     * @param purchaseCargoRequest  (optional)
     * @return ApiResponse&lt;PurchaseCargo201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseCargo201Response> purchaseCargoWithHttpInfo(String shipSymbol, PurchaseCargoRequest purchaseCargoRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseCargoValidateBeforeCall(shipSymbol, purchaseCargoRequest, null);
        Type localVarReturnType = new TypeToken<PurchaseCargo201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purchase Cargo (asynchronously)
     * Purchase cargo.
     * @param shipSymbol  (required)
     * @param purchaseCargoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseCargoAsync(String shipSymbol, PurchaseCargoRequest purchaseCargoRequest, final ApiCallback<PurchaseCargo201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseCargoValidateBeforeCall(shipSymbol, purchaseCargoRequest, _callback);
        Type localVarReturnType = new TypeToken<PurchaseCargo201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchaseShip
     * @param purchaseShipRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseShipCall(PurchaseShipRequest purchaseShipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseShipRequest;

        // create path and map variables
        String localVarPath = "/my/ships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseShipValidateBeforeCall(PurchaseShipRequest purchaseShipRequest, final ApiCallback _callback) throws ApiException {
        return purchaseShipCall(purchaseShipRequest, _callback);

    }

    /**
     * Purchase Ship
     * Purchase a ship
     * @param purchaseShipRequest  (optional)
     * @return PurchaseShip201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseShip201Response purchaseShip(PurchaseShipRequest purchaseShipRequest) throws ApiException {
        ApiResponse<PurchaseShip201Response> localVarResp = purchaseShipWithHttpInfo(purchaseShipRequest);
        return localVarResp.getData();
    }

    /**
     * Purchase Ship
     * Purchase a ship
     * @param purchaseShipRequest  (optional)
     * @return ApiResponse&lt;PurchaseShip201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseShip201Response> purchaseShipWithHttpInfo(PurchaseShipRequest purchaseShipRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseShipValidateBeforeCall(purchaseShipRequest, null);
        Type localVarReturnType = new TypeToken<PurchaseShip201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purchase Ship (asynchronously)
     * Purchase a ship
     * @param purchaseShipRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseShipAsync(PurchaseShipRequest purchaseShipRequest, final ApiCallback<PurchaseShip201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseShipValidateBeforeCall(purchaseShipRequest, _callback);
        Type localVarReturnType = new TypeToken<PurchaseShip201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refuelShip
     * @param shipSymbol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refuelShipCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/refuel"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refuelShipValidateBeforeCall(String shipSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling refuelShip(Async)");
        }

        return refuelShipCall(shipSymbol, _callback);

    }

    /**
     * Refuel Ship
     * Refuel your ship from the local market.
     * @param shipSymbol  (required)
     * @return RefuelShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RefuelShip200Response refuelShip(String shipSymbol) throws ApiException {
        ApiResponse<RefuelShip200Response> localVarResp = refuelShipWithHttpInfo(shipSymbol);
        return localVarResp.getData();
    }

    /**
     * Refuel Ship
     * Refuel your ship from the local market.
     * @param shipSymbol  (required)
     * @return ApiResponse&lt;RefuelShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefuelShip200Response> refuelShipWithHttpInfo(String shipSymbol) throws ApiException {
        okhttp3.Call localVarCall = refuelShipValidateBeforeCall(shipSymbol, null);
        Type localVarReturnType = new TypeToken<RefuelShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refuel Ship (asynchronously)
     * Refuel your ship from the local market.
     * @param shipSymbol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refuelShipAsync(String shipSymbol, final ApiCallback<RefuelShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = refuelShipValidateBeforeCall(shipSymbol, _callback);
        Type localVarReturnType = new TypeToken<RefuelShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sellCargo
     * @param shipSymbol  (required)
     * @param sellCargoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sellCargoCall(String shipSymbol, SellCargoRequest sellCargoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sellCargoRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/sell"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sellCargoValidateBeforeCall(String shipSymbol, SellCargoRequest sellCargoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling sellCargo(Async)");
        }

        return sellCargoCall(shipSymbol, sellCargoRequest, _callback);

    }

    /**
     * Sell Cargo
     * Sell cargo.
     * @param shipSymbol  (required)
     * @param sellCargoRequest  (optional)
     * @return SellCargo201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SellCargo201Response sellCargo(String shipSymbol, SellCargoRequest sellCargoRequest) throws ApiException {
        ApiResponse<SellCargo201Response> localVarResp = sellCargoWithHttpInfo(shipSymbol, sellCargoRequest);
        return localVarResp.getData();
    }

    /**
     * Sell Cargo
     * Sell cargo.
     * @param shipSymbol  (required)
     * @param sellCargoRequest  (optional)
     * @return ApiResponse&lt;SellCargo201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellCargo201Response> sellCargoWithHttpInfo(String shipSymbol, SellCargoRequest sellCargoRequest) throws ApiException {
        okhttp3.Call localVarCall = sellCargoValidateBeforeCall(shipSymbol, sellCargoRequest, null);
        Type localVarReturnType = new TypeToken<SellCargo201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sell Cargo (asynchronously)
     * Sell cargo.
     * @param shipSymbol  (required)
     * @param sellCargoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sellCargoAsync(String shipSymbol, SellCargoRequest sellCargoRequest, final ApiCallback<SellCargo201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sellCargoValidateBeforeCall(shipSymbol, sellCargoRequest, _callback);
        Type localVarReturnType = new TypeToken<SellCargo201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shipRefine
     * @param shipSymbol The symbol of the ship (required)
     * @param shipRefineRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully started refining. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipRefineCall(String shipSymbol, ShipRefineRequest shipRefineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shipRefineRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/refine"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipRefineValidateBeforeCall(String shipSymbol, ShipRefineRequest shipRefineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling shipRefine(Async)");
        }

        return shipRefineCall(shipSymbol, shipRefineRequest, _callback);

    }

    /**
     * Ship Refine
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @param shipSymbol The symbol of the ship (required)
     * @param shipRefineRequest  (optional)
     * @return ShipRefine200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully started refining. </td><td>  -  </td></tr>
     </table>
     */
    public ShipRefine200Response shipRefine(String shipSymbol, ShipRefineRequest shipRefineRequest) throws ApiException {
        ApiResponse<ShipRefine200Response> localVarResp = shipRefineWithHttpInfo(shipSymbol, shipRefineRequest);
        return localVarResp.getData();
    }

    /**
     * Ship Refine
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @param shipSymbol The symbol of the ship (required)
     * @param shipRefineRequest  (optional)
     * @return ApiResponse&lt;ShipRefine200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully started refining. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShipRefine200Response> shipRefineWithHttpInfo(String shipSymbol, ShipRefineRequest shipRefineRequest) throws ApiException {
        okhttp3.Call localVarCall = shipRefineValidateBeforeCall(shipSymbol, shipRefineRequest, null);
        Type localVarReturnType = new TypeToken<ShipRefine200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ship Refine (asynchronously)
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @param shipSymbol The symbol of the ship (required)
     * @param shipRefineRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ship has successfully started refining. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipRefineAsync(String shipSymbol, ShipRefineRequest shipRefineRequest, final ApiCallback<ShipRefine200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipRefineValidateBeforeCall(shipSymbol, shipRefineRequest, _callback);
        Type localVarReturnType = new TypeToken<ShipRefine200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCargo
     * @param shipSymbol  (required)
     * @param transferCargoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCargoCall(String shipSymbol, TransferCargoRequest transferCargoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCargoRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/transfer"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCargoValidateBeforeCall(String shipSymbol, TransferCargoRequest transferCargoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling transferCargo(Async)");
        }

        return transferCargoCall(shipSymbol, transferCargoRequest, _callback);

    }

    /**
     * Transfer Cargo
     * Transfer cargo between ships.
     * @param shipSymbol  (required)
     * @param transferCargoRequest  (optional)
     * @return TransferCargo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TransferCargo200Response transferCargo(String shipSymbol, TransferCargoRequest transferCargoRequest) throws ApiException {
        ApiResponse<TransferCargo200Response> localVarResp = transferCargoWithHttpInfo(shipSymbol, transferCargoRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer Cargo
     * Transfer cargo between ships.
     * @param shipSymbol  (required)
     * @param transferCargoRequest  (optional)
     * @return ApiResponse&lt;TransferCargo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferCargo200Response> transferCargoWithHttpInfo(String shipSymbol, TransferCargoRequest transferCargoRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCargoValidateBeforeCall(shipSymbol, transferCargoRequest, null);
        Type localVarReturnType = new TypeToken<TransferCargo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Cargo (asynchronously)
     * Transfer cargo between ships.
     * @param shipSymbol  (required)
     * @param transferCargoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCargoAsync(String shipSymbol, TransferCargoRequest transferCargoRequest, final ApiCallback<TransferCargo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCargoValidateBeforeCall(shipSymbol, transferCargoRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferCargo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for warpShip
     * @param shipSymbol  (required)
     * @param navigateShipRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call warpShipCall(String shipSymbol, NavigateShipRequest navigateShipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = navigateShipRequest;

        // create path and map variables
        String localVarPath = "/my/ships/{shipSymbol}/warp"
            .replace("{" + "shipSymbol" + "}", localVarApiClient.escapeString(shipSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call warpShipValidateBeforeCall(String shipSymbol, NavigateShipRequest navigateShipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipSymbol' is set
        if (shipSymbol == null) {
            throw new ApiException("Missing the required parameter 'shipSymbol' when calling warpShip(Async)");
        }

        return warpShipCall(shipSymbol, navigateShipRequest, _callback);

    }

    /**
     * Warp Ship
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.
     * @param shipSymbol  (required)
     * @param navigateShipRequest  (optional)
     * @return NavigateShip200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public NavigateShip200Response warpShip(String shipSymbol, NavigateShipRequest navigateShipRequest) throws ApiException {
        ApiResponse<NavigateShip200Response> localVarResp = warpShipWithHttpInfo(shipSymbol, navigateShipRequest);
        return localVarResp.getData();
    }

    /**
     * Warp Ship
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.
     * @param shipSymbol  (required)
     * @param navigateShipRequest  (optional)
     * @return ApiResponse&lt;NavigateShip200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NavigateShip200Response> warpShipWithHttpInfo(String shipSymbol, NavigateShipRequest navigateShipRequest) throws ApiException {
        okhttp3.Call localVarCall = warpShipValidateBeforeCall(shipSymbol, navigateShipRequest, null);
        Type localVarReturnType = new TypeToken<NavigateShip200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Warp Ship (asynchronously)
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.
     * @param shipSymbol  (required)
     * @param navigateShipRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call warpShipAsync(String shipSymbol, NavigateShipRequest navigateShipRequest, final ApiCallback<NavigateShip200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = warpShipValidateBeforeCall(shipSymbol, navigateShipRequest, _callback);
        Type localVarReturnType = new TypeToken<NavigateShip200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
