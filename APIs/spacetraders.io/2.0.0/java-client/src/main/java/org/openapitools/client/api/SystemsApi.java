/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetJumpGate200Response;
import org.openapitools.client.model.GetMarket200Response;
import org.openapitools.client.model.GetShipyard200Response;
import org.openapitools.client.model.GetSystem200Response;
import org.openapitools.client.model.GetSystemWaypoints200Response;
import org.openapitools.client.model.GetSystems200Response;
import org.openapitools.client.model.GetWaypoint200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SystemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getJumpGate
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJumpGateCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate"
            .replace("{" + "systemSymbol" + "}", localVarApiClient.escapeString(systemSymbol.toString()))
            .replace("{" + "waypointSymbol" + "}", localVarApiClient.escapeString(waypointSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJumpGateValidateBeforeCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'systemSymbol' is set
        if (systemSymbol == null) {
            throw new ApiException("Missing the required parameter 'systemSymbol' when calling getJumpGate(Async)");
        }

        // verify the required parameter 'waypointSymbol' is set
        if (waypointSymbol == null) {
            throw new ApiException("Missing the required parameter 'waypointSymbol' when calling getJumpGate(Async)");
        }

        return getJumpGateCall(systemSymbol, waypointSymbol, _callback);

    }

    /**
     * Get Jump Gate
     * Get jump gate details for a waypoint.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return GetJumpGate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetJumpGate200Response getJumpGate(String systemSymbol, String waypointSymbol) throws ApiException {
        ApiResponse<GetJumpGate200Response> localVarResp = getJumpGateWithHttpInfo(systemSymbol, waypointSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Jump Gate
     * Get jump gate details for a waypoint.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return ApiResponse&lt;GetJumpGate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJumpGate200Response> getJumpGateWithHttpInfo(String systemSymbol, String waypointSymbol) throws ApiException {
        okhttp3.Call localVarCall = getJumpGateValidateBeforeCall(systemSymbol, waypointSymbol, null);
        Type localVarReturnType = new TypeToken<GetJumpGate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Jump Gate (asynchronously)
     * Get jump gate details for a waypoint.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJumpGateAsync(String systemSymbol, String waypointSymbol, final ApiCallback<GetJumpGate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJumpGateValidateBeforeCall(systemSymbol, waypointSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetJumpGate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarket
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market"
            .replace("{" + "systemSymbol" + "}", localVarApiClient.escapeString(systemSymbol.toString()))
            .replace("{" + "waypointSymbol" + "}", localVarApiClient.escapeString(waypointSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketValidateBeforeCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'systemSymbol' is set
        if (systemSymbol == null) {
            throw new ApiException("Missing the required parameter 'systemSymbol' when calling getMarket(Async)");
        }

        // verify the required parameter 'waypointSymbol' is set
        if (waypointSymbol == null) {
            throw new ApiException("Missing the required parameter 'waypointSymbol' when calling getMarket(Async)");
        }

        return getMarketCall(systemSymbol, waypointSymbol, _callback);

    }

    /**
     * Get Market
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return GetMarket200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMarket200Response getMarket(String systemSymbol, String waypointSymbol) throws ApiException {
        ApiResponse<GetMarket200Response> localVarResp = getMarketWithHttpInfo(systemSymbol, waypointSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Market
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return ApiResponse&lt;GetMarket200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMarket200Response> getMarketWithHttpInfo(String systemSymbol, String waypointSymbol) throws ApiException {
        okhttp3.Call localVarCall = getMarketValidateBeforeCall(systemSymbol, waypointSymbol, null);
        Type localVarReturnType = new TypeToken<GetMarket200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Market (asynchronously)
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketAsync(String systemSymbol, String waypointSymbol, final ApiCallback<GetMarket200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketValidateBeforeCall(systemSymbol, waypointSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetMarket200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipyard
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipyardCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard"
            .replace("{" + "systemSymbol" + "}", localVarApiClient.escapeString(systemSymbol.toString()))
            .replace("{" + "waypointSymbol" + "}", localVarApiClient.escapeString(waypointSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipyardValidateBeforeCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'systemSymbol' is set
        if (systemSymbol == null) {
            throw new ApiException("Missing the required parameter 'systemSymbol' when calling getShipyard(Async)");
        }

        // verify the required parameter 'waypointSymbol' is set
        if (waypointSymbol == null) {
            throw new ApiException("Missing the required parameter 'waypointSymbol' when calling getShipyard(Async)");
        }

        return getShipyardCall(systemSymbol, waypointSymbol, _callback);

    }

    /**
     * Get Shipyard
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return GetShipyard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetShipyard200Response getShipyard(String systemSymbol, String waypointSymbol) throws ApiException {
        ApiResponse<GetShipyard200Response> localVarResp = getShipyardWithHttpInfo(systemSymbol, waypointSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Shipyard
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return ApiResponse&lt;GetShipyard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShipyard200Response> getShipyardWithHttpInfo(String systemSymbol, String waypointSymbol) throws ApiException {
        okhttp3.Call localVarCall = getShipyardValidateBeforeCall(systemSymbol, waypointSymbol, null);
        Type localVarReturnType = new TypeToken<GetShipyard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipyard (asynchronously)
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipyardAsync(String systemSymbol, String waypointSymbol, final ApiCallback<GetShipyard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipyardValidateBeforeCall(systemSymbol, waypointSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetShipyard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSystem
     * @param systemSymbol The system symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemCall(String systemSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems/{systemSymbol}"
            .replace("{" + "systemSymbol" + "}", localVarApiClient.escapeString(systemSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemValidateBeforeCall(String systemSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'systemSymbol' is set
        if (systemSymbol == null) {
            throw new ApiException("Missing the required parameter 'systemSymbol' when calling getSystem(Async)");
        }

        return getSystemCall(systemSymbol, _callback);

    }

    /**
     * Get System
     * Get the details of a system.
     * @param systemSymbol The system symbol (required)
     * @return GetSystem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSystem200Response getSystem(String systemSymbol) throws ApiException {
        ApiResponse<GetSystem200Response> localVarResp = getSystemWithHttpInfo(systemSymbol);
        return localVarResp.getData();
    }

    /**
     * Get System
     * Get the details of a system.
     * @param systemSymbol The system symbol (required)
     * @return ApiResponse&lt;GetSystem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSystem200Response> getSystemWithHttpInfo(String systemSymbol) throws ApiException {
        okhttp3.Call localVarCall = getSystemValidateBeforeCall(systemSymbol, null);
        Type localVarReturnType = new TypeToken<GetSystem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get System (asynchronously)
     * Get the details of a system.
     * @param systemSymbol The system symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemAsync(String systemSymbol, final ApiCallback<GetSystem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemValidateBeforeCall(systemSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetSystem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSystemWaypoints
     * @param systemSymbol The system symbol (required)
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemWaypointsCall(String systemSymbol, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems/{systemSymbol}/waypoints"
            .replace("{" + "systemSymbol" + "}", localVarApiClient.escapeString(systemSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemWaypointsValidateBeforeCall(String systemSymbol, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'systemSymbol' is set
        if (systemSymbol == null) {
            throw new ApiException("Missing the required parameter 'systemSymbol' when calling getSystemWaypoints(Async)");
        }

        return getSystemWaypointsCall(systemSymbol, page, limit, _callback);

    }

    /**
     * List Waypoints
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @param systemSymbol The system symbol (required)
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @return GetSystemWaypoints200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSystemWaypoints200Response getSystemWaypoints(String systemSymbol, Integer page, Integer limit) throws ApiException {
        ApiResponse<GetSystemWaypoints200Response> localVarResp = getSystemWaypointsWithHttpInfo(systemSymbol, page, limit);
        return localVarResp.getData();
    }

    /**
     * List Waypoints
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @param systemSymbol The system symbol (required)
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @return ApiResponse&lt;GetSystemWaypoints200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSystemWaypoints200Response> getSystemWaypointsWithHttpInfo(String systemSymbol, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getSystemWaypointsValidateBeforeCall(systemSymbol, page, limit, null);
        Type localVarReturnType = new TypeToken<GetSystemWaypoints200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Waypoints (asynchronously)
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @param systemSymbol The system symbol (required)
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemWaypointsAsync(String systemSymbol, Integer page, Integer limit, final ApiCallback<GetSystemWaypoints200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemWaypointsValidateBeforeCall(systemSymbol, page, limit, _callback);
        Type localVarReturnType = new TypeToken<GetSystemWaypoints200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSystems
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getSystemsCall(page, limit, _callback);

    }

    /**
     * List Systems
     * Return a list of all systems.
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @return GetSystems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSystems200Response getSystems(Integer page, Integer limit) throws ApiException {
        ApiResponse<GetSystems200Response> localVarResp = getSystemsWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List Systems
     * Return a list of all systems.
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @return ApiResponse&lt;GetSystems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSystems200Response> getSystemsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getSystemsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<GetSystems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Systems (asynchronously)
     * Return a list of all systems.
     * @param page What entry offset to request (optional)
     * @param limit How many entries to return per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemsAsync(Integer page, Integer limit, final ApiCallback<GetSystems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<GetSystems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWaypoint
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWaypointCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}"
            .replace("{" + "systemSymbol" + "}", localVarApiClient.escapeString(systemSymbol.toString()))
            .replace("{" + "waypointSymbol" + "}", localVarApiClient.escapeString(waypointSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AgentToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWaypointValidateBeforeCall(String systemSymbol, String waypointSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'systemSymbol' is set
        if (systemSymbol == null) {
            throw new ApiException("Missing the required parameter 'systemSymbol' when calling getWaypoint(Async)");
        }

        // verify the required parameter 'waypointSymbol' is set
        if (waypointSymbol == null) {
            throw new ApiException("Missing the required parameter 'waypointSymbol' when calling getWaypoint(Async)");
        }

        return getWaypointCall(systemSymbol, waypointSymbol, _callback);

    }

    /**
     * Get Waypoint
     * View the details of a waypoint.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return GetWaypoint200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetWaypoint200Response getWaypoint(String systemSymbol, String waypointSymbol) throws ApiException {
        ApiResponse<GetWaypoint200Response> localVarResp = getWaypointWithHttpInfo(systemSymbol, waypointSymbol);
        return localVarResp.getData();
    }

    /**
     * Get Waypoint
     * View the details of a waypoint.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @return ApiResponse&lt;GetWaypoint200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWaypoint200Response> getWaypointWithHttpInfo(String systemSymbol, String waypointSymbol) throws ApiException {
        okhttp3.Call localVarCall = getWaypointValidateBeforeCall(systemSymbol, waypointSymbol, null);
        Type localVarReturnType = new TypeToken<GetWaypoint200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Waypoint (asynchronously)
     * View the details of a waypoint.
     * @param systemSymbol The system symbol (required)
     * @param waypointSymbol The waypoint symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWaypointAsync(String systemSymbol, String waypointSymbol, final ApiCallback<GetWaypoint200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWaypointValidateBeforeCall(systemSymbol, waypointSymbol, _callback);
        Type localVarReturnType = new TypeToken<GetWaypoint200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
