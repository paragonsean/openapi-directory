/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSurvey201ResponseDataSurveysInnerDepositsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSurvey201ResponseDataSurveysInner {
  public static final String SERIALIZED_NAME_DEPOSITS = "deposits";
  @SerializedName(SERIALIZED_NAME_DEPOSITS)
  private List<CreateSurvey201ResponseDataSurveysInnerDepositsInner> deposits = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  /**
   * The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    SMALL("SMALL"),
    
    MODERATE("MODERATE"),
    
    LARGE("LARGE");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public CreateSurvey201ResponseDataSurveysInner() {
  }

  public CreateSurvey201ResponseDataSurveysInner deposits(List<CreateSurvey201ResponseDataSurveysInnerDepositsInner> deposits) {
    this.deposits = deposits;
    return this;
  }

  public CreateSurvey201ResponseDataSurveysInner addDepositsItem(CreateSurvey201ResponseDataSurveysInnerDepositsInner depositsItem) {
    if (this.deposits == null) {
      this.deposits = new ArrayList<>();
    }
    this.deposits.add(depositsItem);
    return this;
  }

  /**
   * A list of deposits that can be found at this location.
   * @return deposits
   */
  @javax.annotation.Nonnull
  public List<CreateSurvey201ResponseDataSurveysInnerDepositsInner> getDeposits() {
    return deposits;
  }

  public void setDeposits(List<CreateSurvey201ResponseDataSurveysInnerDepositsInner> deposits) {
    this.deposits = deposits;
  }


  public CreateSurvey201ResponseDataSurveysInner expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
   * @return expiration
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public CreateSurvey201ResponseDataSurveysInner signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
   * @return signature
   */
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public CreateSurvey201ResponseDataSurveysInner size(SizeEnum size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
   * @return size
   */
  @javax.annotation.Nonnull
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }


  public CreateSurvey201ResponseDataSurveysInner symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The symbol of the waypoint that this survey is for.
   * @return symbol
   */
  @javax.annotation.Nonnull
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSurvey201ResponseDataSurveysInner createSurvey201ResponseDataSurveysInner = (CreateSurvey201ResponseDataSurveysInner) o;
    return Objects.equals(this.deposits, createSurvey201ResponseDataSurveysInner.deposits) &&
        Objects.equals(this.expiration, createSurvey201ResponseDataSurveysInner.expiration) &&
        Objects.equals(this.signature, createSurvey201ResponseDataSurveysInner.signature) &&
        Objects.equals(this.size, createSurvey201ResponseDataSurveysInner.size) &&
        Objects.equals(this.symbol, createSurvey201ResponseDataSurveysInner.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deposits, expiration, signature, size, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSurvey201ResponseDataSurveysInner {\n");
    sb.append("    deposits: ").append(toIndentedString(deposits)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deposits");
    openapiFields.add("expiration");
    openapiFields.add("signature");
    openapiFields.add("size");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deposits");
    openapiRequiredFields.add("expiration");
    openapiRequiredFields.add("signature");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("symbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSurvey201ResponseDataSurveysInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSurvey201ResponseDataSurveysInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSurvey201ResponseDataSurveysInner is not found in the empty JSON string", CreateSurvey201ResponseDataSurveysInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSurvey201ResponseDataSurveysInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSurvey201ResponseDataSurveysInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSurvey201ResponseDataSurveysInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("deposits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deposits` to be an array in the JSON string but got `%s`", jsonObj.get("deposits").toString()));
      }

      JsonArray jsonArraydeposits = jsonObj.getAsJsonArray("deposits");
      // validate the required field `deposits` (array)
      for (int i = 0; i < jsonArraydeposits.size(); i++) {
        CreateSurvey201ResponseDataSurveysInnerDepositsInner.validateJsonElement(jsonArraydeposits.get(i));
      };
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the required field `size`
      SizeEnum.validateJsonElement(jsonObj.get("size"));
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSurvey201ResponseDataSurveysInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSurvey201ResponseDataSurveysInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSurvey201ResponseDataSurveysInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSurvey201ResponseDataSurveysInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSurvey201ResponseDataSurveysInner>() {
           @Override
           public void write(JsonWriter out, CreateSurvey201ResponseDataSurveysInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSurvey201ResponseDataSurveysInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSurvey201ResponseDataSurveysInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSurvey201ResponseDataSurveysInner
   * @throws IOException if the JSON string is invalid with respect to CreateSurvey201ResponseDataSurveysInner
   */
  public static CreateSurvey201ResponseDataSurveysInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSurvey201ResponseDataSurveysInner.class);
  }

  /**
   * Convert an instance of CreateSurvey201ResponseDataSurveysInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

