/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetShipyard200ResponseDataShipTypesInner;
import org.openapitools.client.model.GetShipyard200ResponseDataShipsInner;
import org.openapitools.client.model.GetShipyard200ResponseDataTransactionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetShipyard200ResponseData {
  public static final String SERIALIZED_NAME_SHIP_TYPES = "shipTypes";
  @SerializedName(SERIALIZED_NAME_SHIP_TYPES)
  private List<GetShipyard200ResponseDataShipTypesInner> shipTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPS = "ships";
  @SerializedName(SERIALIZED_NAME_SHIPS)
  private List<GetShipyard200ResponseDataShipsInner> ships = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<GetShipyard200ResponseDataTransactionsInner> transactions = new ArrayList<>();

  public GetShipyard200ResponseData() {
  }

  public GetShipyard200ResponseData shipTypes(List<GetShipyard200ResponseDataShipTypesInner> shipTypes) {
    this.shipTypes = shipTypes;
    return this;
  }

  public GetShipyard200ResponseData addShipTypesItem(GetShipyard200ResponseDataShipTypesInner shipTypesItem) {
    if (this.shipTypes == null) {
      this.shipTypes = new ArrayList<>();
    }
    this.shipTypes.add(shipTypesItem);
    return this;
  }

  /**
   * The list of ship types available for purchase at this shipyard.
   * @return shipTypes
   */
  @javax.annotation.Nonnull
  public List<GetShipyard200ResponseDataShipTypesInner> getShipTypes() {
    return shipTypes;
  }

  public void setShipTypes(List<GetShipyard200ResponseDataShipTypesInner> shipTypes) {
    this.shipTypes = shipTypes;
  }


  public GetShipyard200ResponseData ships(List<GetShipyard200ResponseDataShipsInner> ships) {
    this.ships = ships;
    return this;
  }

  public GetShipyard200ResponseData addShipsItem(GetShipyard200ResponseDataShipsInner shipsItem) {
    if (this.ships == null) {
      this.ships = new ArrayList<>();
    }
    this.ships.add(shipsItem);
    return this;
  }

  /**
   * The ships that are currently available for purchase at the shipyard.
   * @return ships
   */
  @javax.annotation.Nullable
  public List<GetShipyard200ResponseDataShipsInner> getShips() {
    return ships;
  }

  public void setShips(List<GetShipyard200ResponseDataShipsInner> ships) {
    this.ships = ships;
  }


  public GetShipyard200ResponseData symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
   * @return symbol
   */
  @javax.annotation.Nonnull
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public GetShipyard200ResponseData transactions(List<GetShipyard200ResponseDataTransactionsInner> transactions) {
    this.transactions = transactions;
    return this;
  }

  public GetShipyard200ResponseData addTransactionsItem(GetShipyard200ResponseDataTransactionsInner transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * The list of recent transactions at this shipyard.
   * @return transactions
   */
  @javax.annotation.Nullable
  public List<GetShipyard200ResponseDataTransactionsInner> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<GetShipyard200ResponseDataTransactionsInner> transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetShipyard200ResponseData getShipyard200ResponseData = (GetShipyard200ResponseData) o;
    return Objects.equals(this.shipTypes, getShipyard200ResponseData.shipTypes) &&
        Objects.equals(this.ships, getShipyard200ResponseData.ships) &&
        Objects.equals(this.symbol, getShipyard200ResponseData.symbol) &&
        Objects.equals(this.transactions, getShipyard200ResponseData.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipTypes, ships, symbol, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetShipyard200ResponseData {\n");
    sb.append("    shipTypes: ").append(toIndentedString(shipTypes)).append("\n");
    sb.append("    ships: ").append(toIndentedString(ships)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shipTypes");
    openapiFields.add("ships");
    openapiFields.add("symbol");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shipTypes");
    openapiRequiredFields.add("symbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetShipyard200ResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetShipyard200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetShipyard200ResponseData is not found in the empty JSON string", GetShipyard200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetShipyard200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetShipyard200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetShipyard200ResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("shipTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipTypes` to be an array in the JSON string but got `%s`", jsonObj.get("shipTypes").toString()));
      }

      JsonArray jsonArrayshipTypes = jsonObj.getAsJsonArray("shipTypes");
      // validate the required field `shipTypes` (array)
      for (int i = 0; i < jsonArrayshipTypes.size(); i++) {
        GetShipyard200ResponseDataShipTypesInner.validateJsonElement(jsonArrayshipTypes.get(i));
      };
      if (jsonObj.get("ships") != null && !jsonObj.get("ships").isJsonNull()) {
        JsonArray jsonArrayships = jsonObj.getAsJsonArray("ships");
        if (jsonArrayships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ships` to be an array in the JSON string but got `%s`", jsonObj.get("ships").toString()));
          }

          // validate the optional field `ships` (array)
          for (int i = 0; i < jsonArrayships.size(); i++) {
            GetShipyard200ResponseDataShipsInner.validateJsonElement(jsonArrayships.get(i));
          };
        }
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            GetShipyard200ResponseDataTransactionsInner.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetShipyard200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetShipyard200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetShipyard200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetShipyard200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<GetShipyard200ResponseData>() {
           @Override
           public void write(JsonWriter out, GetShipyard200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetShipyard200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetShipyard200ResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetShipyard200ResponseData
   * @throws IOException if the JSON string is invalid with respect to GetShipyard200ResponseData
   */
  public static GetShipyard200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetShipyard200ResponseData.class);
  }

  /**
   * Convert an instance of GetShipyard200ResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

