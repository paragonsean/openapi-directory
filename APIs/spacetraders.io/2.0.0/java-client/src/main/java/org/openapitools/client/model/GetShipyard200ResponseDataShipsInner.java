/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetShipyard200ResponseDataShipsInner {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private Object engine = null;

  public static final String SERIALIZED_NAME_FRAME = "frame";
  @SerializedName(SERIALIZED_NAME_FRAME)
  private Object frame = null;

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private List<Object> modules = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOUNTS = "mounts";
  @SerializedName(SERIALIZED_NAME_MOUNTS)
  private List<Object> mounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PURCHASE_PRICE = "purchasePrice";
  @SerializedName(SERIALIZED_NAME_PURCHASE_PRICE)
  private Integer purchasePrice;

  public static final String SERIALIZED_NAME_REACTOR = "reactor";
  @SerializedName(SERIALIZED_NAME_REACTOR)
  private Object reactor = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Object type = null;

  public GetShipyard200ResponseDataShipsInner() {
  }

  public GetShipyard200ResponseDataShipsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetShipyard200ResponseDataShipsInner engine(Object engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nonnull
  public Object getEngine() {
    return engine;
  }

  public void setEngine(Object engine) {
    this.engine = engine;
  }


  public GetShipyard200ResponseDataShipsInner frame(Object frame) {
    this.frame = frame;
    return this;
  }

  /**
   * Get frame
   * @return frame
   */
  @javax.annotation.Nonnull
  public Object getFrame() {
    return frame;
  }

  public void setFrame(Object frame) {
    this.frame = frame;
  }


  public GetShipyard200ResponseDataShipsInner modules(List<Object> modules) {
    this.modules = modules;
    return this;
  }

  public GetShipyard200ResponseDataShipsInner addModulesItem(Object modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nonnull
  public List<Object> getModules() {
    return modules;
  }

  public void setModules(List<Object> modules) {
    this.modules = modules;
  }


  public GetShipyard200ResponseDataShipsInner mounts(List<Object> mounts) {
    this.mounts = mounts;
    return this;
  }

  public GetShipyard200ResponseDataShipsInner addMountsItem(Object mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * Get mounts
   * @return mounts
   */
  @javax.annotation.Nonnull
  public List<Object> getMounts() {
    return mounts;
  }

  public void setMounts(List<Object> mounts) {
    this.mounts = mounts;
  }


  public GetShipyard200ResponseDataShipsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetShipyard200ResponseDataShipsInner purchasePrice(Integer purchasePrice) {
    this.purchasePrice = purchasePrice;
    return this;
  }

  /**
   * Get purchasePrice
   * @return purchasePrice
   */
  @javax.annotation.Nonnull
  public Integer getPurchasePrice() {
    return purchasePrice;
  }

  public void setPurchasePrice(Integer purchasePrice) {
    this.purchasePrice = purchasePrice;
  }


  public GetShipyard200ResponseDataShipsInner reactor(Object reactor) {
    this.reactor = reactor;
    return this;
  }

  /**
   * Get reactor
   * @return reactor
   */
  @javax.annotation.Nonnull
  public Object getReactor() {
    return reactor;
  }

  public void setReactor(Object reactor) {
    this.reactor = reactor;
  }


  public GetShipyard200ResponseDataShipsInner type(Object type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Object getType() {
    return type;
  }

  public void setType(Object type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetShipyard200ResponseDataShipsInner getShipyard200ResponseDataShipsInner = (GetShipyard200ResponseDataShipsInner) o;
    return Objects.equals(this.description, getShipyard200ResponseDataShipsInner.description) &&
        Objects.equals(this.engine, getShipyard200ResponseDataShipsInner.engine) &&
        Objects.equals(this.frame, getShipyard200ResponseDataShipsInner.frame) &&
        Objects.equals(this.modules, getShipyard200ResponseDataShipsInner.modules) &&
        Objects.equals(this.mounts, getShipyard200ResponseDataShipsInner.mounts) &&
        Objects.equals(this.name, getShipyard200ResponseDataShipsInner.name) &&
        Objects.equals(this.purchasePrice, getShipyard200ResponseDataShipsInner.purchasePrice) &&
        Objects.equals(this.reactor, getShipyard200ResponseDataShipsInner.reactor) &&
        Objects.equals(this.type, getShipyard200ResponseDataShipsInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, engine, frame, modules, mounts, name, purchasePrice, reactor, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetShipyard200ResponseDataShipsInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    frame: ").append(toIndentedString(frame)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purchasePrice: ").append(toIndentedString(purchasePrice)).append("\n");
    sb.append("    reactor: ").append(toIndentedString(reactor)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("engine");
    openapiFields.add("frame");
    openapiFields.add("modules");
    openapiFields.add("mounts");
    openapiFields.add("name");
    openapiFields.add("purchasePrice");
    openapiFields.add("reactor");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("engine");
    openapiRequiredFields.add("frame");
    openapiRequiredFields.add("modules");
    openapiRequiredFields.add("mounts");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("purchasePrice");
    openapiRequiredFields.add("reactor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetShipyard200ResponseDataShipsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetShipyard200ResponseDataShipsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetShipyard200ResponseDataShipsInner is not found in the empty JSON string", GetShipyard200ResponseDataShipsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetShipyard200ResponseDataShipsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetShipyard200ResponseDataShipsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetShipyard200ResponseDataShipsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("modules") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("modules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("mounts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mounts` to be an array in the JSON string but got `%s`", jsonObj.get("mounts").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetShipyard200ResponseDataShipsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetShipyard200ResponseDataShipsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetShipyard200ResponseDataShipsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetShipyard200ResponseDataShipsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetShipyard200ResponseDataShipsInner>() {
           @Override
           public void write(JsonWriter out, GetShipyard200ResponseDataShipsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetShipyard200ResponseDataShipsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetShipyard200ResponseDataShipsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetShipyard200ResponseDataShipsInner
   * @throws IOException if the JSON string is invalid with respect to GetShipyard200ResponseDataShipsInner
   */
  public static GetShipyard200ResponseDataShipsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetShipyard200ResponseDataShipsInner.class);
  }

  /**
   * Convert an instance of GetShipyard200ResponseDataShipsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

