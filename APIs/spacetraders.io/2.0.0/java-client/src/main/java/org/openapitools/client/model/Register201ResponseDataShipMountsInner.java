/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mount is installed on the exterier of a ship.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Register201ResponseDataShipMountsInner {
  /**
   * Gets or Sets deposits
   */
  @JsonAdapter(DepositsEnum.Adapter.class)
  public enum DepositsEnum {
    QUARTZ_SAND("QUARTZ_SAND"),
    
    SILICON_CRYSTALS("SILICON_CRYSTALS"),
    
    PRECIOUS_STONES("PRECIOUS_STONES"),
    
    ICE_WATER("ICE_WATER"),
    
    AMMONIA_ICE("AMMONIA_ICE"),
    
    IRON_ORE("IRON_ORE"),
    
    COPPER_ORE("COPPER_ORE"),
    
    SILVER_ORE("SILVER_ORE"),
    
    ALUMINUM_ORE("ALUMINUM_ORE"),
    
    GOLD_ORE("GOLD_ORE"),
    
    PLATINUM_ORE("PLATINUM_ORE"),
    
    DIAMONDS("DIAMONDS"),
    
    URANITE_ORE("URANITE_ORE"),
    
    MERITIUM_ORE("MERITIUM_ORE");

    private String value;

    DepositsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepositsEnum fromValue(String value) {
      for (DepositsEnum b : DepositsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepositsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepositsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepositsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepositsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DepositsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPOSITS = "deposits";
  @SerializedName(SERIALIZED_NAME_DEPOSITS)
  private List<DepositsEnum> deposits = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIREMENTS = "requirements";
  @SerializedName(SERIALIZED_NAME_REQUIREMENTS)
  private Object requirements = null;

  public static final String SERIALIZED_NAME_STRENGTH = "strength";
  @SerializedName(SERIALIZED_NAME_STRENGTH)
  private Integer strength;

  /**
   * Gets or Sets symbol
   */
  @JsonAdapter(SymbolEnum.Adapter.class)
  public enum SymbolEnum {
    GAS_SIPHON_I("MOUNT_GAS_SIPHON_I"),
    
    GAS_SIPHON_II("MOUNT_GAS_SIPHON_II"),
    
    GAS_SIPHON_III("MOUNT_GAS_SIPHON_III"),
    
    SURVEYOR_I("MOUNT_SURVEYOR_I"),
    
    SURVEYOR_II("MOUNT_SURVEYOR_II"),
    
    SURVEYOR_III("MOUNT_SURVEYOR_III"),
    
    SENSOR_ARRAY_I("MOUNT_SENSOR_ARRAY_I"),
    
    SENSOR_ARRAY_II("MOUNT_SENSOR_ARRAY_II"),
    
    SENSOR_ARRAY_III("MOUNT_SENSOR_ARRAY_III"),
    
    MINING_LASER_I("MOUNT_MINING_LASER_I"),
    
    MINING_LASER_II("MOUNT_MINING_LASER_II"),
    
    MINING_LASER_III("MOUNT_MINING_LASER_III"),
    
    LASER_CANNON_I("MOUNT_LASER_CANNON_I"),
    
    MISSILE_LAUNCHER_I("MOUNT_MISSILE_LAUNCHER_I"),
    
    TURRET_I("MOUNT_TURRET_I");

    private String value;

    SymbolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymbolEnum fromValue(String value) {
      for (SymbolEnum b : SymbolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SymbolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymbolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SymbolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SymbolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SymbolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private SymbolEnum symbol;

  public Register201ResponseDataShipMountsInner() {
  }

  public Register201ResponseDataShipMountsInner deposits(List<DepositsEnum> deposits) {
    this.deposits = deposits;
    return this;
  }

  public Register201ResponseDataShipMountsInner addDepositsItem(DepositsEnum depositsItem) {
    if (this.deposits == null) {
      this.deposits = new ArrayList<>();
    }
    this.deposits.add(depositsItem);
    return this;
  }

  /**
   * Get deposits
   * @return deposits
   */
  @javax.annotation.Nullable
  public List<DepositsEnum> getDeposits() {
    return deposits;
  }

  public void setDeposits(List<DepositsEnum> deposits) {
    this.deposits = deposits;
  }


  public Register201ResponseDataShipMountsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Register201ResponseDataShipMountsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Register201ResponseDataShipMountsInner requirements(Object requirements) {
    this.requirements = requirements;
    return this;
  }

  /**
   * Get requirements
   * @return requirements
   */
  @javax.annotation.Nonnull
  public Object getRequirements() {
    return requirements;
  }

  public void setRequirements(Object requirements) {
    this.requirements = requirements;
  }


  public Register201ResponseDataShipMountsInner strength(Integer strength) {
    this.strength = strength;
    return this;
  }

  /**
   * Get strength
   * minimum: 0
   * @return strength
   */
  @javax.annotation.Nullable
  public Integer getStrength() {
    return strength;
  }

  public void setStrength(Integer strength) {
    this.strength = strength;
  }


  public Register201ResponseDataShipMountsInner symbol(SymbolEnum symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nonnull
  public SymbolEnum getSymbol() {
    return symbol;
  }

  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Register201ResponseDataShipMountsInner register201ResponseDataShipMountsInner = (Register201ResponseDataShipMountsInner) o;
    return Objects.equals(this.deposits, register201ResponseDataShipMountsInner.deposits) &&
        Objects.equals(this.description, register201ResponseDataShipMountsInner.description) &&
        Objects.equals(this.name, register201ResponseDataShipMountsInner.name) &&
        Objects.equals(this.requirements, register201ResponseDataShipMountsInner.requirements) &&
        Objects.equals(this.strength, register201ResponseDataShipMountsInner.strength) &&
        Objects.equals(this.symbol, register201ResponseDataShipMountsInner.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deposits, description, name, requirements, strength, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Register201ResponseDataShipMountsInner {\n");
    sb.append("    deposits: ").append(toIndentedString(deposits)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deposits");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("requirements");
    openapiFields.add("strength");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("requirements");
    openapiRequiredFields.add("symbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Register201ResponseDataShipMountsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Register201ResponseDataShipMountsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Register201ResponseDataShipMountsInner is not found in the empty JSON string", Register201ResponseDataShipMountsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Register201ResponseDataShipMountsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Register201ResponseDataShipMountsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Register201ResponseDataShipMountsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deposits") != null && !jsonObj.get("deposits").isJsonNull() && !jsonObj.get("deposits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deposits` to be an array in the JSON string but got `%s`", jsonObj.get("deposits").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      // validate the required field `symbol`
      SymbolEnum.validateJsonElement(jsonObj.get("symbol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Register201ResponseDataShipMountsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Register201ResponseDataShipMountsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Register201ResponseDataShipMountsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Register201ResponseDataShipMountsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Register201ResponseDataShipMountsInner>() {
           @Override
           public void write(JsonWriter out, Register201ResponseDataShipMountsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Register201ResponseDataShipMountsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Register201ResponseDataShipMountsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Register201ResponseDataShipMountsInner
   * @throws IOException if the JSON string is invalid with respect to Register201ResponseDataShipMountsInner
   */
  public static Register201ResponseDataShipMountsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Register201ResponseDataShipMountsInner.class);
  }

  /**
   * Convert an instance of Register201ResponseDataShipMountsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

