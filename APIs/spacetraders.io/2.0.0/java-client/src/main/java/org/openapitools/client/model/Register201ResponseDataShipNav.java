/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Register201ResponseDataShipNavRoute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The navigation information of the ship.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Register201ResponseDataShipNav {
  /**
   * The ship&#39;s set speed when traveling between waypoints or systems.
   */
  @JsonAdapter(FlightModeEnum.Adapter.class)
  public enum FlightModeEnum {
    DRIFT("DRIFT"),
    
    STEALTH("STEALTH"),
    
    CRUISE("CRUISE"),
    
    BURN("BURN");

    private String value;

    FlightModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlightModeEnum fromValue(String value) {
      for (FlightModeEnum b : FlightModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlightModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlightModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlightModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlightModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlightModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLIGHT_MODE = "flightMode";
  @SerializedName(SERIALIZED_NAME_FLIGHT_MODE)
  private FlightModeEnum flightMode = FlightModeEnum.CRUISE;

  public static final String SERIALIZED_NAME_ROUTE = "route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private Register201ResponseDataShipNavRoute route;

  /**
   * The current status of the ship
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_TRANSIT("IN_TRANSIT"),
    
    IN_ORBIT("IN_ORBIT"),
    
    DOCKED("DOCKED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SYSTEM_SYMBOL = "systemSymbol";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SYMBOL)
  private String systemSymbol;

  public static final String SERIALIZED_NAME_WAYPOINT_SYMBOL = "waypointSymbol";
  @SerializedName(SERIALIZED_NAME_WAYPOINT_SYMBOL)
  private String waypointSymbol;

  public Register201ResponseDataShipNav() {
  }

  public Register201ResponseDataShipNav flightMode(FlightModeEnum flightMode) {
    this.flightMode = flightMode;
    return this;
  }

  /**
   * The ship&#39;s set speed when traveling between waypoints or systems.
   * @return flightMode
   */
  @javax.annotation.Nonnull
  public FlightModeEnum getFlightMode() {
    return flightMode;
  }

  public void setFlightMode(FlightModeEnum flightMode) {
    this.flightMode = flightMode;
  }


  public Register201ResponseDataShipNav route(Register201ResponseDataShipNavRoute route) {
    this.route = route;
    return this;
  }

  /**
   * Get route
   * @return route
   */
  @javax.annotation.Nonnull
  public Register201ResponseDataShipNavRoute getRoute() {
    return route;
  }

  public void setRoute(Register201ResponseDataShipNavRoute route) {
    this.route = route;
  }


  public Register201ResponseDataShipNav status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the ship
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Register201ResponseDataShipNav systemSymbol(String systemSymbol) {
    this.systemSymbol = systemSymbol;
    return this;
  }

  /**
   * The system symbol of the ship&#39;s current location.
   * @return systemSymbol
   */
  @javax.annotation.Nonnull
  public String getSystemSymbol() {
    return systemSymbol;
  }

  public void setSystemSymbol(String systemSymbol) {
    this.systemSymbol = systemSymbol;
  }


  public Register201ResponseDataShipNav waypointSymbol(String waypointSymbol) {
    this.waypointSymbol = waypointSymbol;
    return this;
  }

  /**
   * The waypoint symbol of the ship&#39;s current location, or if the ship is in-transit, the waypoint symbol of the ship&#39;s destination.
   * @return waypointSymbol
   */
  @javax.annotation.Nonnull
  public String getWaypointSymbol() {
    return waypointSymbol;
  }

  public void setWaypointSymbol(String waypointSymbol) {
    this.waypointSymbol = waypointSymbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Register201ResponseDataShipNav register201ResponseDataShipNav = (Register201ResponseDataShipNav) o;
    return Objects.equals(this.flightMode, register201ResponseDataShipNav.flightMode) &&
        Objects.equals(this.route, register201ResponseDataShipNav.route) &&
        Objects.equals(this.status, register201ResponseDataShipNav.status) &&
        Objects.equals(this.systemSymbol, register201ResponseDataShipNav.systemSymbol) &&
        Objects.equals(this.waypointSymbol, register201ResponseDataShipNav.waypointSymbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flightMode, route, status, systemSymbol, waypointSymbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Register201ResponseDataShipNav {\n");
    sb.append("    flightMode: ").append(toIndentedString(flightMode)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    systemSymbol: ").append(toIndentedString(systemSymbol)).append("\n");
    sb.append("    waypointSymbol: ").append(toIndentedString(waypointSymbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flightMode");
    openapiFields.add("route");
    openapiFields.add("status");
    openapiFields.add("systemSymbol");
    openapiFields.add("waypointSymbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("flightMode");
    openapiRequiredFields.add("route");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("systemSymbol");
    openapiRequiredFields.add("waypointSymbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Register201ResponseDataShipNav
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Register201ResponseDataShipNav.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Register201ResponseDataShipNav is not found in the empty JSON string", Register201ResponseDataShipNav.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Register201ResponseDataShipNav.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Register201ResponseDataShipNav` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Register201ResponseDataShipNav.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("flightMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flightMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flightMode").toString()));
      }
      // validate the required field `flightMode`
      FlightModeEnum.validateJsonElement(jsonObj.get("flightMode"));
      // validate the required field `route`
      Register201ResponseDataShipNavRoute.validateJsonElement(jsonObj.get("route"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("systemSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemSymbol").toString()));
      }
      if (!jsonObj.get("waypointSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waypointSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waypointSymbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Register201ResponseDataShipNav.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Register201ResponseDataShipNav' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Register201ResponseDataShipNav> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Register201ResponseDataShipNav.class));

       return (TypeAdapter<T>) new TypeAdapter<Register201ResponseDataShipNav>() {
           @Override
           public void write(JsonWriter out, Register201ResponseDataShipNav value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Register201ResponseDataShipNav read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Register201ResponseDataShipNav given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Register201ResponseDataShipNav
   * @throws IOException if the JSON string is invalid with respect to Register201ResponseDataShipNav
   */
  public static Register201ResponseDataShipNav fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Register201ResponseDataShipNav.class);
  }

  /**
   * Convert an instance of Register201ResponseDataShipNav to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

