/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSystemWaypoints200ResponseDataInnerTraitsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSystemWaypoints200ResponseDataInnerTraitsInner {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The unique identifier of the trait.
   */
  @JsonAdapter(SymbolEnum.Adapter.class)
  public enum SymbolEnum {
    UNCHARTED("UNCHARTED"),
    
    MARKETPLACE("MARKETPLACE"),
    
    SHIPYARD("SHIPYARD"),
    
    OUTPOST("OUTPOST"),
    
    SCATTERED_SETTLEMENTS("SCATTERED_SETTLEMENTS"),
    
    SPRAWLING_CITIES("SPRAWLING_CITIES"),
    
    MEGA_STRUCTURES("MEGA_STRUCTURES"),
    
    OVERCROWDED("OVERCROWDED"),
    
    HIGH_TECH("HIGH_TECH"),
    
    CORRUPT("CORRUPT"),
    
    BUREAUCRATIC("BUREAUCRATIC"),
    
    TRADING_HUB("TRADING_HUB"),
    
    INDUSTRIAL("INDUSTRIAL"),
    
    BLACK_MARKET("BLACK_MARKET"),
    
    RESEARCH_FACILITY("RESEARCH_FACILITY"),
    
    MILITARY_BASE("MILITARY_BASE"),
    
    SURVEILLANCE_OUTPOST("SURVEILLANCE_OUTPOST"),
    
    EXPLORATION_OUTPOST("EXPLORATION_OUTPOST"),
    
    MINERAL_DEPOSITS("MINERAL_DEPOSITS"),
    
    COMMON_METAL_DEPOSITS("COMMON_METAL_DEPOSITS"),
    
    PRECIOUS_METAL_DEPOSITS("PRECIOUS_METAL_DEPOSITS"),
    
    RARE_METAL_DEPOSITS("RARE_METAL_DEPOSITS"),
    
    METHANE_POOLS("METHANE_POOLS"),
    
    ICE_CRYSTALS("ICE_CRYSTALS"),
    
    EXPLOSIVE_GASES("EXPLOSIVE_GASES"),
    
    STRONG_MAGNETOSPHERE("STRONG_MAGNETOSPHERE"),
    
    VIBRANT_AURORAS("VIBRANT_AURORAS"),
    
    SALT_FLATS("SALT_FLATS"),
    
    CANYONS("CANYONS"),
    
    PERPETUAL_DAYLIGHT("PERPETUAL_DAYLIGHT"),
    
    PERPETUAL_OVERCAST("PERPETUAL_OVERCAST"),
    
    DRY_SEABEDS("DRY_SEABEDS"),
    
    MAGMA_SEAS("MAGMA_SEAS"),
    
    SUPERVOLCANOES("SUPERVOLCANOES"),
    
    ASH_CLOUDS("ASH_CLOUDS"),
    
    VAST_RUINS("VAST_RUINS"),
    
    MUTATED_FLORA("MUTATED_FLORA"),
    
    TERRAFORMED("TERRAFORMED"),
    
    EXTREME_TEMPERATURES("EXTREME_TEMPERATURES"),
    
    EXTREME_PRESSURE("EXTREME_PRESSURE"),
    
    DIVERSE_LIFE("DIVERSE_LIFE"),
    
    SCARCE_LIFE("SCARCE_LIFE"),
    
    FOSSILS("FOSSILS"),
    
    WEAK_GRAVITY("WEAK_GRAVITY"),
    
    STRONG_GRAVITY("STRONG_GRAVITY"),
    
    CRUSHING_GRAVITY("CRUSHING_GRAVITY"),
    
    TOXIC_ATMOSPHERE("TOXIC_ATMOSPHERE"),
    
    CORROSIVE_ATMOSPHERE("CORROSIVE_ATMOSPHERE"),
    
    BREATHABLE_ATMOSPHERE("BREATHABLE_ATMOSPHERE"),
    
    JOVIAN("JOVIAN"),
    
    ROCKY("ROCKY"),
    
    VOLCANIC("VOLCANIC"),
    
    FROZEN("FROZEN"),
    
    SWAMP("SWAMP"),
    
    BARREN("BARREN"),
    
    TEMPERATE("TEMPERATE"),
    
    JUNGLE("JUNGLE"),
    
    OCEAN("OCEAN"),
    
    STRIPPED("STRIPPED");

    private String value;

    SymbolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymbolEnum fromValue(String value) {
      for (SymbolEnum b : SymbolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SymbolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymbolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SymbolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SymbolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SymbolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private SymbolEnum symbol;

  public GetSystemWaypoints200ResponseDataInnerTraitsInner() {
  }

  public GetSystemWaypoints200ResponseDataInnerTraitsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the trait.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetSystemWaypoints200ResponseDataInnerTraitsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the trait.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetSystemWaypoints200ResponseDataInnerTraitsInner symbol(SymbolEnum symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The unique identifier of the trait.
   * @return symbol
   */
  @javax.annotation.Nonnull
  public SymbolEnum getSymbol() {
    return symbol;
  }

  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSystemWaypoints200ResponseDataInnerTraitsInner getSystemWaypoints200ResponseDataInnerTraitsInner = (GetSystemWaypoints200ResponseDataInnerTraitsInner) o;
    return Objects.equals(this.description, getSystemWaypoints200ResponseDataInnerTraitsInner.description) &&
        Objects.equals(this.name, getSystemWaypoints200ResponseDataInnerTraitsInner.name) &&
        Objects.equals(this.symbol, getSystemWaypoints200ResponseDataInnerTraitsInner.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSystemWaypoints200ResponseDataInnerTraitsInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("symbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSystemWaypoints200ResponseDataInnerTraitsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSystemWaypoints200ResponseDataInnerTraitsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSystemWaypoints200ResponseDataInnerTraitsInner is not found in the empty JSON string", GetSystemWaypoints200ResponseDataInnerTraitsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSystemWaypoints200ResponseDataInnerTraitsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSystemWaypoints200ResponseDataInnerTraitsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSystemWaypoints200ResponseDataInnerTraitsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      // validate the required field `symbol`
      SymbolEnum.validateJsonElement(jsonObj.get("symbol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSystemWaypoints200ResponseDataInnerTraitsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSystemWaypoints200ResponseDataInnerTraitsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSystemWaypoints200ResponseDataInnerTraitsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSystemWaypoints200ResponseDataInnerTraitsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSystemWaypoints200ResponseDataInnerTraitsInner>() {
           @Override
           public void write(JsonWriter out, GetSystemWaypoints200ResponseDataInnerTraitsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSystemWaypoints200ResponseDataInnerTraitsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSystemWaypoints200ResponseDataInnerTraitsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSystemWaypoints200ResponseDataInnerTraitsInner
   * @throws IOException if the JSON string is invalid with respect to GetSystemWaypoints200ResponseDataInnerTraitsInner
   */
  public static GetSystemWaypoints200ResponseDataInnerTraitsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSystemWaypoints200ResponseDataInnerTraitsInner.class);
  }

  /**
   * Convert an instance of GetSystemWaypoints200ResponseDataInnerTraitsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

