/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Register201ResponseDataContractTerms;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Register201ResponseDataContract {
  public static final String SERIALIZED_NAME_ACCEPTED = "accepted";
  @SerializedName(SERIALIZED_NAME_ACCEPTED)
  private Boolean accepted = false;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_FACTION_SYMBOL = "factionSymbol";
  @SerializedName(SERIALIZED_NAME_FACTION_SYMBOL)
  private String factionSymbol;

  public static final String SERIALIZED_NAME_FULFILLED = "fulfilled";
  @SerializedName(SERIALIZED_NAME_FULFILLED)
  private Boolean fulfilled = false;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private Register201ResponseDataContractTerms terms;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PROCUREMENT("PROCUREMENT"),
    
    TRANSPORT("TRANSPORT"),
    
    SHUTTLE("SHUTTLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Register201ResponseDataContract() {
  }

  public Register201ResponseDataContract accepted(Boolean accepted) {
    this.accepted = accepted;
    return this;
  }

  /**
   * Whether the contract has been accepted by the agent
   * @return accepted
   */
  @javax.annotation.Nonnull
  public Boolean getAccepted() {
    return accepted;
  }

  public void setAccepted(Boolean accepted) {
    this.accepted = accepted;
  }


  public Register201ResponseDataContract expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * The time at which the contract expires
   * @return expiration
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public Register201ResponseDataContract factionSymbol(String factionSymbol) {
    this.factionSymbol = factionSymbol;
    return this;
  }

  /**
   * The symbol of the faction that this contract is for.
   * @return factionSymbol
   */
  @javax.annotation.Nonnull
  public String getFactionSymbol() {
    return factionSymbol;
  }

  public void setFactionSymbol(String factionSymbol) {
    this.factionSymbol = factionSymbol;
  }


  public Register201ResponseDataContract fulfilled(Boolean fulfilled) {
    this.fulfilled = fulfilled;
    return this;
  }

  /**
   * Whether the contract has been fulfilled
   * @return fulfilled
   */
  @javax.annotation.Nonnull
  public Boolean getFulfilled() {
    return fulfilled;
  }

  public void setFulfilled(Boolean fulfilled) {
    this.fulfilled = fulfilled;
  }


  public Register201ResponseDataContract id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Register201ResponseDataContract terms(Register201ResponseDataContractTerms terms) {
    this.terms = terms;
    return this;
  }

  /**
   * Get terms
   * @return terms
   */
  @javax.annotation.Nonnull
  public Register201ResponseDataContractTerms getTerms() {
    return terms;
  }

  public void setTerms(Register201ResponseDataContractTerms terms) {
    this.terms = terms;
  }


  public Register201ResponseDataContract type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Register201ResponseDataContract register201ResponseDataContract = (Register201ResponseDataContract) o;
    return Objects.equals(this.accepted, register201ResponseDataContract.accepted) &&
        Objects.equals(this.expiration, register201ResponseDataContract.expiration) &&
        Objects.equals(this.factionSymbol, register201ResponseDataContract.factionSymbol) &&
        Objects.equals(this.fulfilled, register201ResponseDataContract.fulfilled) &&
        Objects.equals(this.id, register201ResponseDataContract.id) &&
        Objects.equals(this.terms, register201ResponseDataContract.terms) &&
        Objects.equals(this.type, register201ResponseDataContract.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accepted, expiration, factionSymbol, fulfilled, id, terms, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Register201ResponseDataContract {\n");
    sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    factionSymbol: ").append(toIndentedString(factionSymbol)).append("\n");
    sb.append("    fulfilled: ").append(toIndentedString(fulfilled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted");
    openapiFields.add("expiration");
    openapiFields.add("factionSymbol");
    openapiFields.add("fulfilled");
    openapiFields.add("id");
    openapiFields.add("terms");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accepted");
    openapiRequiredFields.add("expiration");
    openapiRequiredFields.add("factionSymbol");
    openapiRequiredFields.add("fulfilled");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("terms");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Register201ResponseDataContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Register201ResponseDataContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Register201ResponseDataContract is not found in the empty JSON string", Register201ResponseDataContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Register201ResponseDataContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Register201ResponseDataContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Register201ResponseDataContract.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("factionSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factionSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factionSymbol").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `terms`
      Register201ResponseDataContractTerms.validateJsonElement(jsonObj.get("terms"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Register201ResponseDataContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Register201ResponseDataContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Register201ResponseDataContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Register201ResponseDataContract.class));

       return (TypeAdapter<T>) new TypeAdapter<Register201ResponseDataContract>() {
           @Override
           public void write(JsonWriter out, Register201ResponseDataContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Register201ResponseDataContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Register201ResponseDataContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Register201ResponseDataContract
   * @throws IOException if the JSON string is invalid with respect to Register201ResponseDataContract
   */
  public static Register201ResponseDataContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Register201ResponseDataContract.class);
  }

  /**
   * Convert an instance of Register201ResponseDataContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

