/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ship&#39;s crew service and maintain the ship&#39;s systems and equipment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Register201ResponseDataShipCrew {
  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Integer current;

  public static final String SERIALIZED_NAME_MORALE = "morale";
  @SerializedName(SERIALIZED_NAME_MORALE)
  private Integer morale;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Integer required;

  /**
   * The rotation of crew shifts. A stricter shift improves the ship&#39;s performance. A more relaxed shift improves the crew&#39;s morale.
   */
  @JsonAdapter(RotationEnum.Adapter.class)
  public enum RotationEnum {
    STRICT("STRICT"),
    
    RELAXED("RELAXED");

    private String value;

    RotationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RotationEnum fromValue(String value) {
      for (RotationEnum b : RotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RotationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RotationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RotationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RotationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RotationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROTATION = "rotation";
  @SerializedName(SERIALIZED_NAME_ROTATION)
  private RotationEnum rotation = RotationEnum.STRICT;

  public static final String SERIALIZED_NAME_WAGES = "wages";
  @SerializedName(SERIALIZED_NAME_WAGES)
  private Integer wages;

  public Register201ResponseDataShipCrew() {
  }

  public Register201ResponseDataShipCrew capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * The maximum number of crew members the ship can support.
   * @return capacity
   */
  @javax.annotation.Nonnull
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public Register201ResponseDataShipCrew current(Integer current) {
    this.current = current;
    return this;
  }

  /**
   * The current number of crew members on the ship.
   * @return current
   */
  @javax.annotation.Nonnull
  public Integer getCurrent() {
    return current;
  }

  public void setCurrent(Integer current) {
    this.current = current;
  }


  public Register201ResponseDataShipCrew morale(Integer morale) {
    this.morale = morale;
    return this;
  }

  /**
   * A rough measure of the crew&#39;s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
   * minimum: 0
   * maximum: 100
   * @return morale
   */
  @javax.annotation.Nonnull
  public Integer getMorale() {
    return morale;
  }

  public void setMorale(Integer morale) {
    this.morale = morale;
  }


  public Register201ResponseDataShipCrew required(Integer required) {
    this.required = required;
    return this;
  }

  /**
   * The minimum number of crew members required to maintain the ship.
   * @return required
   */
  @javax.annotation.Nonnull
  public Integer getRequired() {
    return required;
  }

  public void setRequired(Integer required) {
    this.required = required;
  }


  public Register201ResponseDataShipCrew rotation(RotationEnum rotation) {
    this.rotation = rotation;
    return this;
  }

  /**
   * The rotation of crew shifts. A stricter shift improves the ship&#39;s performance. A more relaxed shift improves the crew&#39;s morale.
   * @return rotation
   */
  @javax.annotation.Nonnull
  public RotationEnum getRotation() {
    return rotation;
  }

  public void setRotation(RotationEnum rotation) {
    this.rotation = rotation;
  }


  public Register201ResponseDataShipCrew wages(Integer wages) {
    this.wages = wages;
    return this;
  }

  /**
   * The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
   * minimum: 0
   * @return wages
   */
  @javax.annotation.Nonnull
  public Integer getWages() {
    return wages;
  }

  public void setWages(Integer wages) {
    this.wages = wages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Register201ResponseDataShipCrew register201ResponseDataShipCrew = (Register201ResponseDataShipCrew) o;
    return Objects.equals(this.capacity, register201ResponseDataShipCrew.capacity) &&
        Objects.equals(this.current, register201ResponseDataShipCrew.current) &&
        Objects.equals(this.morale, register201ResponseDataShipCrew.morale) &&
        Objects.equals(this.required, register201ResponseDataShipCrew.required) &&
        Objects.equals(this.rotation, register201ResponseDataShipCrew.rotation) &&
        Objects.equals(this.wages, register201ResponseDataShipCrew.wages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, current, morale, required, rotation, wages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Register201ResponseDataShipCrew {\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    morale: ").append(toIndentedString(morale)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacity");
    openapiFields.add("current");
    openapiFields.add("morale");
    openapiFields.add("required");
    openapiFields.add("rotation");
    openapiFields.add("wages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("capacity");
    openapiRequiredFields.add("current");
    openapiRequiredFields.add("morale");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("rotation");
    openapiRequiredFields.add("wages");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Register201ResponseDataShipCrew
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Register201ResponseDataShipCrew.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Register201ResponseDataShipCrew is not found in the empty JSON string", Register201ResponseDataShipCrew.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Register201ResponseDataShipCrew.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Register201ResponseDataShipCrew` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Register201ResponseDataShipCrew.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("rotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotation").toString()));
      }
      // validate the required field `rotation`
      RotationEnum.validateJsonElement(jsonObj.get("rotation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Register201ResponseDataShipCrew.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Register201ResponseDataShipCrew' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Register201ResponseDataShipCrew> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Register201ResponseDataShipCrew.class));

       return (TypeAdapter<T>) new TypeAdapter<Register201ResponseDataShipCrew>() {
           @Override
           public void write(JsonWriter out, Register201ResponseDataShipCrew value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Register201ResponseDataShipCrew read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Register201ResponseDataShipCrew given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Register201ResponseDataShipCrew
   * @throws IOException if the JSON string is invalid with respect to Register201ResponseDataShipCrew
   */
  public static Register201ResponseDataShipCrew fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Register201ResponseDataShipCrew.class);
  }

  /**
   * Convert an instance of Register201ResponseDataShipCrew to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

