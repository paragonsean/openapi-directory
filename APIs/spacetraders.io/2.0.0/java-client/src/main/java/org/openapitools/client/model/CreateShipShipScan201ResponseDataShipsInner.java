/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateShipShipScan201ResponseDataShipsInnerEngine;
import org.openapitools.client.model.CreateShipShipScan201ResponseDataShipsInnerFrame;
import org.openapitools.client.model.CreateShipShipScan201ResponseDataShipsInnerMountsInner;
import org.openapitools.client.model.CreateShipShipScan201ResponseDataShipsInnerReactor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ship that was scanned. Details include information about the ship that could be detected by the scanner.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateShipShipScan201ResponseDataShipsInner {
  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private CreateShipShipScan201ResponseDataShipsInnerEngine engine;

  public static final String SERIALIZED_NAME_FRAME = "frame";
  @SerializedName(SERIALIZED_NAME_FRAME)
  private CreateShipShipScan201ResponseDataShipsInnerFrame frame;

  public static final String SERIALIZED_NAME_MOUNTS = "mounts";
  @SerializedName(SERIALIZED_NAME_MOUNTS)
  private List<CreateShipShipScan201ResponseDataShipsInnerMountsInner> mounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAV = "nav";
  @SerializedName(SERIALIZED_NAME_NAV)
  private Object nav = null;

  public static final String SERIALIZED_NAME_REACTOR = "reactor";
  @SerializedName(SERIALIZED_NAME_REACTOR)
  private CreateShipShipScan201ResponseDataShipsInnerReactor reactor;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private Object registration = null;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public CreateShipShipScan201ResponseDataShipsInner() {
  }

  public CreateShipShipScan201ResponseDataShipsInner engine(CreateShipShipScan201ResponseDataShipsInnerEngine engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nonnull
  public CreateShipShipScan201ResponseDataShipsInnerEngine getEngine() {
    return engine;
  }

  public void setEngine(CreateShipShipScan201ResponseDataShipsInnerEngine engine) {
    this.engine = engine;
  }


  public CreateShipShipScan201ResponseDataShipsInner frame(CreateShipShipScan201ResponseDataShipsInnerFrame frame) {
    this.frame = frame;
    return this;
  }

  /**
   * Get frame
   * @return frame
   */
  @javax.annotation.Nullable
  public CreateShipShipScan201ResponseDataShipsInnerFrame getFrame() {
    return frame;
  }

  public void setFrame(CreateShipShipScan201ResponseDataShipsInnerFrame frame) {
    this.frame = frame;
  }


  public CreateShipShipScan201ResponseDataShipsInner mounts(List<CreateShipShipScan201ResponseDataShipsInnerMountsInner> mounts) {
    this.mounts = mounts;
    return this;
  }

  public CreateShipShipScan201ResponseDataShipsInner addMountsItem(CreateShipShipScan201ResponseDataShipsInnerMountsInner mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * Get mounts
   * @return mounts
   */
  @javax.annotation.Nullable
  public List<CreateShipShipScan201ResponseDataShipsInnerMountsInner> getMounts() {
    return mounts;
  }

  public void setMounts(List<CreateShipShipScan201ResponseDataShipsInnerMountsInner> mounts) {
    this.mounts = mounts;
  }


  public CreateShipShipScan201ResponseDataShipsInner nav(Object nav) {
    this.nav = nav;
    return this;
  }

  /**
   * Get nav
   * @return nav
   */
  @javax.annotation.Nonnull
  public Object getNav() {
    return nav;
  }

  public void setNav(Object nav) {
    this.nav = nav;
  }


  public CreateShipShipScan201ResponseDataShipsInner reactor(CreateShipShipScan201ResponseDataShipsInnerReactor reactor) {
    this.reactor = reactor;
    return this;
  }

  /**
   * Get reactor
   * @return reactor
   */
  @javax.annotation.Nullable
  public CreateShipShipScan201ResponseDataShipsInnerReactor getReactor() {
    return reactor;
  }

  public void setReactor(CreateShipShipScan201ResponseDataShipsInnerReactor reactor) {
    this.reactor = reactor;
  }


  public CreateShipShipScan201ResponseDataShipsInner registration(Object registration) {
    this.registration = registration;
    return this;
  }

  /**
   * Get registration
   * @return registration
   */
  @javax.annotation.Nonnull
  public Object getRegistration() {
    return registration;
  }

  public void setRegistration(Object registration) {
    this.registration = registration;
  }


  public CreateShipShipScan201ResponseDataShipsInner symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The globally unique identifier of the ship.
   * @return symbol
   */
  @javax.annotation.Nonnull
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateShipShipScan201ResponseDataShipsInner createShipShipScan201ResponseDataShipsInner = (CreateShipShipScan201ResponseDataShipsInner) o;
    return Objects.equals(this.engine, createShipShipScan201ResponseDataShipsInner.engine) &&
        Objects.equals(this.frame, createShipShipScan201ResponseDataShipsInner.frame) &&
        Objects.equals(this.mounts, createShipShipScan201ResponseDataShipsInner.mounts) &&
        Objects.equals(this.nav, createShipShipScan201ResponseDataShipsInner.nav) &&
        Objects.equals(this.reactor, createShipShipScan201ResponseDataShipsInner.reactor) &&
        Objects.equals(this.registration, createShipShipScan201ResponseDataShipsInner.registration) &&
        Objects.equals(this.symbol, createShipShipScan201ResponseDataShipsInner.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, frame, mounts, nav, reactor, registration, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateShipShipScan201ResponseDataShipsInner {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    frame: ").append(toIndentedString(frame)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    reactor: ").append(toIndentedString(reactor)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engine");
    openapiFields.add("frame");
    openapiFields.add("mounts");
    openapiFields.add("nav");
    openapiFields.add("reactor");
    openapiFields.add("registration");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engine");
    openapiRequiredFields.add("nav");
    openapiRequiredFields.add("registration");
    openapiRequiredFields.add("symbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateShipShipScan201ResponseDataShipsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateShipShipScan201ResponseDataShipsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateShipShipScan201ResponseDataShipsInner is not found in the empty JSON string", CreateShipShipScan201ResponseDataShipsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateShipShipScan201ResponseDataShipsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateShipShipScan201ResponseDataShipsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateShipShipScan201ResponseDataShipsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `engine`
      CreateShipShipScan201ResponseDataShipsInnerEngine.validateJsonElement(jsonObj.get("engine"));
      // validate the optional field `frame`
      if (jsonObj.get("frame") != null && !jsonObj.get("frame").isJsonNull()) {
        CreateShipShipScan201ResponseDataShipsInnerFrame.validateJsonElement(jsonObj.get("frame"));
      }
      if (jsonObj.get("mounts") != null && !jsonObj.get("mounts").isJsonNull()) {
        JsonArray jsonArraymounts = jsonObj.getAsJsonArray("mounts");
        if (jsonArraymounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mounts` to be an array in the JSON string but got `%s`", jsonObj.get("mounts").toString()));
          }

          // validate the optional field `mounts` (array)
          for (int i = 0; i < jsonArraymounts.size(); i++) {
            CreateShipShipScan201ResponseDataShipsInnerMountsInner.validateJsonElement(jsonArraymounts.get(i));
          };
        }
      }
      // validate the optional field `reactor`
      if (jsonObj.get("reactor") != null && !jsonObj.get("reactor").isJsonNull()) {
        CreateShipShipScan201ResponseDataShipsInnerReactor.validateJsonElement(jsonObj.get("reactor"));
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateShipShipScan201ResponseDataShipsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateShipShipScan201ResponseDataShipsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateShipShipScan201ResponseDataShipsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateShipShipScan201ResponseDataShipsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateShipShipScan201ResponseDataShipsInner>() {
           @Override
           public void write(JsonWriter out, CreateShipShipScan201ResponseDataShipsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateShipShipScan201ResponseDataShipsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateShipShipScan201ResponseDataShipsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateShipShipScan201ResponseDataShipsInner
   * @throws IOException if the JSON string is invalid with respect to CreateShipShipScan201ResponseDataShipsInner
   */
  public static CreateShipShipScan201ResponseDataShipsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateShipShipScan201ResponseDataShipsInner.class);
  }

  /**
   * Convert an instance of CreateShipShipScan201ResponseDataShipsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

