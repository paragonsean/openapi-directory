/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetSystems200ResponseDataInnerFactionsInner;
import org.openapitools.client.model.GetSystems200ResponseDataInnerWaypointsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:30.174611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSystems200ResponseDataInner {
  public static final String SERIALIZED_NAME_FACTIONS = "factions";
  @SerializedName(SERIALIZED_NAME_FACTIONS)
  private List<GetSystems200ResponseDataInnerFactionsInner> factions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECTOR_SYMBOL = "sectorSymbol";
  @SerializedName(SERIALIZED_NAME_SECTOR_SYMBOL)
  private String sectorSymbol;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  /**
   * The type of waypoint.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NEUTRON_STAR("NEUTRON_STAR"),
    
    RED_STAR("RED_STAR"),
    
    ORANGE_STAR("ORANGE_STAR"),
    
    BLUE_STAR("BLUE_STAR"),
    
    YOUNG_STAR("YOUNG_STAR"),
    
    WHITE_DWARF("WHITE_DWARF"),
    
    BLACK_HOLE("BLACK_HOLE"),
    
    HYPERGIANT("HYPERGIANT"),
    
    NEBULA("NEBULA"),
    
    UNSTABLE("UNSTABLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_WAYPOINTS = "waypoints";
  @SerializedName(SERIALIZED_NAME_WAYPOINTS)
  private List<GetSystems200ResponseDataInnerWaypointsInner> waypoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private Integer x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private Integer y;

  public GetSystems200ResponseDataInner() {
  }

  public GetSystems200ResponseDataInner factions(List<GetSystems200ResponseDataInnerFactionsInner> factions) {
    this.factions = factions;
    return this;
  }

  public GetSystems200ResponseDataInner addFactionsItem(GetSystems200ResponseDataInnerFactionsInner factionsItem) {
    if (this.factions == null) {
      this.factions = new ArrayList<>();
    }
    this.factions.add(factionsItem);
    return this;
  }

  /**
   * Get factions
   * @return factions
   */
  @javax.annotation.Nonnull
  public List<GetSystems200ResponseDataInnerFactionsInner> getFactions() {
    return factions;
  }

  public void setFactions(List<GetSystems200ResponseDataInnerFactionsInner> factions) {
    this.factions = factions;
  }


  public GetSystems200ResponseDataInner sectorSymbol(String sectorSymbol) {
    this.sectorSymbol = sectorSymbol;
    return this;
  }

  /**
   * Get sectorSymbol
   * @return sectorSymbol
   */
  @javax.annotation.Nonnull
  public String getSectorSymbol() {
    return sectorSymbol;
  }

  public void setSectorSymbol(String sectorSymbol) {
    this.sectorSymbol = sectorSymbol;
  }


  public GetSystems200ResponseDataInner symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nonnull
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public GetSystems200ResponseDataInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of waypoint.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GetSystems200ResponseDataInner waypoints(List<GetSystems200ResponseDataInnerWaypointsInner> waypoints) {
    this.waypoints = waypoints;
    return this;
  }

  public GetSystems200ResponseDataInner addWaypointsItem(GetSystems200ResponseDataInnerWaypointsInner waypointsItem) {
    if (this.waypoints == null) {
      this.waypoints = new ArrayList<>();
    }
    this.waypoints.add(waypointsItem);
    return this;
  }

  /**
   * Get waypoints
   * @return waypoints
   */
  @javax.annotation.Nonnull
  public List<GetSystems200ResponseDataInnerWaypointsInner> getWaypoints() {
    return waypoints;
  }

  public void setWaypoints(List<GetSystems200ResponseDataInnerWaypointsInner> waypoints) {
    this.waypoints = waypoints;
  }


  public GetSystems200ResponseDataInner x(Integer x) {
    this.x = x;
    return this;
  }

  /**
   * Get x
   * @return x
   */
  @javax.annotation.Nonnull
  public Integer getX() {
    return x;
  }

  public void setX(Integer x) {
    this.x = x;
  }


  public GetSystems200ResponseDataInner y(Integer y) {
    this.y = y;
    return this;
  }

  /**
   * Get y
   * @return y
   */
  @javax.annotation.Nonnull
  public Integer getY() {
    return y;
  }

  public void setY(Integer y) {
    this.y = y;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSystems200ResponseDataInner getSystems200ResponseDataInner = (GetSystems200ResponseDataInner) o;
    return Objects.equals(this.factions, getSystems200ResponseDataInner.factions) &&
        Objects.equals(this.sectorSymbol, getSystems200ResponseDataInner.sectorSymbol) &&
        Objects.equals(this.symbol, getSystems200ResponseDataInner.symbol) &&
        Objects.equals(this.type, getSystems200ResponseDataInner.type) &&
        Objects.equals(this.waypoints, getSystems200ResponseDataInner.waypoints) &&
        Objects.equals(this.x, getSystems200ResponseDataInner.x) &&
        Objects.equals(this.y, getSystems200ResponseDataInner.y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(factions, sectorSymbol, symbol, type, waypoints, x, y);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSystems200ResponseDataInner {\n");
    sb.append("    factions: ").append(toIndentedString(factions)).append("\n");
    sb.append("    sectorSymbol: ").append(toIndentedString(sectorSymbol)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    waypoints: ").append(toIndentedString(waypoints)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("factions");
    openapiFields.add("sectorSymbol");
    openapiFields.add("symbol");
    openapiFields.add("type");
    openapiFields.add("waypoints");
    openapiFields.add("x");
    openapiFields.add("y");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("factions");
    openapiRequiredFields.add("sectorSymbol");
    openapiRequiredFields.add("symbol");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("waypoints");
    openapiRequiredFields.add("x");
    openapiRequiredFields.add("y");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSystems200ResponseDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSystems200ResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSystems200ResponseDataInner is not found in the empty JSON string", GetSystems200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSystems200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSystems200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSystems200ResponseDataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("factions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `factions` to be an array in the JSON string but got `%s`", jsonObj.get("factions").toString()));
      }

      JsonArray jsonArrayfactions = jsonObj.getAsJsonArray("factions");
      // validate the required field `factions` (array)
      for (int i = 0; i < jsonArrayfactions.size(); i++) {
        GetSystems200ResponseDataInnerFactionsInner.validateJsonElement(jsonArrayfactions.get(i));
      };
      if (!jsonObj.get("sectorSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectorSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectorSymbol").toString()));
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // ensure the json data is an array
      if (!jsonObj.get("waypoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `waypoints` to be an array in the JSON string but got `%s`", jsonObj.get("waypoints").toString()));
      }

      JsonArray jsonArraywaypoints = jsonObj.getAsJsonArray("waypoints");
      // validate the required field `waypoints` (array)
      for (int i = 0; i < jsonArraywaypoints.size(); i++) {
        GetSystems200ResponseDataInnerWaypointsInner.validateJsonElement(jsonArraywaypoints.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSystems200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSystems200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSystems200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSystems200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSystems200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, GetSystems200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSystems200ResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSystems200ResponseDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSystems200ResponseDataInner
   * @throws IOException if the JSON string is invalid with respect to GetSystems200ResponseDataInner
   */
  public static GetSystems200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSystems200ResponseDataInner.class);
  }

  /**
   * Convert an instance of GetSystems200ResponseDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

