/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetJumpGate200Response from '../model/GetJumpGate200Response';
import GetMarket200Response from '../model/GetMarket200Response';
import GetShipyard200Response from '../model/GetShipyard200Response';
import GetSystem200Response from '../model/GetSystem200Response';
import GetSystemWaypoints200Response from '../model/GetSystemWaypoints200Response';
import GetSystems200Response from '../model/GetSystems200Response';
import GetWaypoint200Response from '../model/GetWaypoint200Response';

/**
* Systems service.
* @module api/SystemsApi
* @version 2.0.0
*/
export default class SystemsApi {

    /**
    * Constructs a new SystemsApi. 
    * @alias module:api/SystemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getJumpGate operation.
     * @callback module:api/SystemsApi~getJumpGateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJumpGate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jump Gate
     * Get jump gate details for a waypoint.
     * @param {String} systemSymbol The system symbol
     * @param {String} waypointSymbol The waypoint symbol
     * @param {module:api/SystemsApi~getJumpGateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJumpGate200Response}
     */
    getJumpGate(systemSymbol, waypointSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'systemSymbol' is set
      if (systemSymbol === undefined || systemSymbol === null) {
        throw new Error("Missing the required parameter 'systemSymbol' when calling getJumpGate");
      }
      // verify the required parameter 'waypointSymbol' is set
      if (waypointSymbol === undefined || waypointSymbol === null) {
        throw new Error("Missing the required parameter 'waypointSymbol' when calling getJumpGate");
      }

      let pathParams = {
        'systemSymbol': systemSymbol,
        'waypointSymbol': waypointSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJumpGate200Response;
      return this.apiClient.callApi(
        '/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarket operation.
     * @callback module:api/SystemsApi~getMarketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMarket200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Market
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @param {String} systemSymbol The system symbol
     * @param {String} waypointSymbol The waypoint symbol
     * @param {module:api/SystemsApi~getMarketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMarket200Response}
     */
    getMarket(systemSymbol, waypointSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'systemSymbol' is set
      if (systemSymbol === undefined || systemSymbol === null) {
        throw new Error("Missing the required parameter 'systemSymbol' when calling getMarket");
      }
      // verify the required parameter 'waypointSymbol' is set
      if (waypointSymbol === undefined || waypointSymbol === null) {
        throw new Error("Missing the required parameter 'waypointSymbol' when calling getMarket");
      }

      let pathParams = {
        'systemSymbol': systemSymbol,
        'waypointSymbol': waypointSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMarket200Response;
      return this.apiClient.callApi(
        '/systems/{systemSymbol}/waypoints/{waypointSymbol}/market', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipyard operation.
     * @callback module:api/SystemsApi~getShipyardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShipyard200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Shipyard
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @param {String} systemSymbol The system symbol
     * @param {String} waypointSymbol The waypoint symbol
     * @param {module:api/SystemsApi~getShipyardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShipyard200Response}
     */
    getShipyard(systemSymbol, waypointSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'systemSymbol' is set
      if (systemSymbol === undefined || systemSymbol === null) {
        throw new Error("Missing the required parameter 'systemSymbol' when calling getShipyard");
      }
      // verify the required parameter 'waypointSymbol' is set
      if (waypointSymbol === undefined || waypointSymbol === null) {
        throw new Error("Missing the required parameter 'waypointSymbol' when calling getShipyard");
      }

      let pathParams = {
        'systemSymbol': systemSymbol,
        'waypointSymbol': waypointSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetShipyard200Response;
      return this.apiClient.callApi(
        '/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystem operation.
     * @callback module:api/SystemsApi~getSystemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSystem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get System
     * Get the details of a system.
     * @param {String} systemSymbol The system symbol
     * @param {module:api/SystemsApi~getSystemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSystem200Response}
     */
    getSystem(systemSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'systemSymbol' is set
      if (systemSymbol === undefined || systemSymbol === null) {
        throw new Error("Missing the required parameter 'systemSymbol' when calling getSystem");
      }

      let pathParams = {
        'systemSymbol': systemSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystem200Response;
      return this.apiClient.callApi(
        '/systems/{systemSymbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemWaypoints operation.
     * @callback module:api/SystemsApi~getSystemWaypointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSystemWaypoints200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Waypoints
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @param {String} systemSymbol The system symbol
     * @param {Object} opts Optional parameters
     * @param {Number} [page] What entry offset to request
     * @param {Number} [limit] How many entries to return per page
     * @param {module:api/SystemsApi~getSystemWaypointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSystemWaypoints200Response}
     */
    getSystemWaypoints(systemSymbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemSymbol' is set
      if (systemSymbol === undefined || systemSymbol === null) {
        throw new Error("Missing the required parameter 'systemSymbol' when calling getSystemWaypoints");
      }

      let pathParams = {
        'systemSymbol': systemSymbol
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemWaypoints200Response;
      return this.apiClient.callApi(
        '/systems/{systemSymbol}/waypoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystems operation.
     * @callback module:api/SystemsApi~getSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSystems200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Systems
     * Return a list of all systems.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] What entry offset to request
     * @param {Number} [limit] How many entries to return per page
     * @param {module:api/SystemsApi~getSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSystems200Response}
     */
    getSystems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystems200Response;
      return this.apiClient.callApi(
        '/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWaypoint operation.
     * @callback module:api/SystemsApi~getWaypointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWaypoint200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Waypoint
     * View the details of a waypoint.
     * @param {String} systemSymbol The system symbol
     * @param {String} waypointSymbol The waypoint symbol
     * @param {module:api/SystemsApi~getWaypointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWaypoint200Response}
     */
    getWaypoint(systemSymbol, waypointSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'systemSymbol' is set
      if (systemSymbol === undefined || systemSymbol === null) {
        throw new Error("Missing the required parameter 'systemSymbol' when calling getWaypoint");
      }
      // verify the required parameter 'waypointSymbol' is set
      if (waypointSymbol === undefined || waypointSymbol === null) {
        throw new Error("Missing the required parameter 'waypointSymbol' when calling getWaypoint");
      }

      let pathParams = {
        'systemSymbol': systemSymbol,
        'waypointSymbol': waypointSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWaypoint200Response;
      return this.apiClient.callApi(
        '/systems/{systemSymbol}/waypoints/{waypointSymbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
