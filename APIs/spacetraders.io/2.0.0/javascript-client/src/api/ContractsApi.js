/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptContract200Response from '../model/AcceptContract200Response';
import DeliverContract200Response from '../model/DeliverContract200Response';
import DeliverContractRequest from '../model/DeliverContractRequest';
import FulfillContract200Response from '../model/FulfillContract200Response';
import GetContract200Response from '../model/GetContract200Response';
import GetContracts200Response from '../model/GetContracts200Response';

/**
* Contracts service.
* @module api/ContractsApi
* @version 2.0.0
*/
export default class ContractsApi {

    /**
    * Constructs a new ContractsApi. 
    * @alias module:api/ContractsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptContract operation.
     * @callback module:api/ContractsApi~acceptContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptContract200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Contract
     * Accept a contract.
     * @param {String} contractId 
     * @param {module:api/ContractsApi~acceptContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptContract200Response}
     */
    acceptContract(contractId, callback) {
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling acceptContract");
      }

      let pathParams = {
        'contractId': contractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AcceptContract200Response;
      return this.apiClient.callApi(
        '/my/contracts/{contractId}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deliverContract operation.
     * @callback module:api/ContractsApi~deliverContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeliverContract200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deliver Contract
     * Deliver cargo on a given contract.
     * @param {String} contractId The ID of the contract
     * @param {Object} opts Optional parameters
     * @param {module:model/DeliverContractRequest} [deliverContractRequest] 
     * @param {module:api/ContractsApi~deliverContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeliverContract200Response}
     */
    deliverContract(contractId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deliverContractRequest'];
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling deliverContract");
      }

      let pathParams = {
        'contractId': contractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeliverContract200Response;
      return this.apiClient.callApi(
        '/my/contracts/{contractId}/deliver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fulfillContract operation.
     * @callback module:api/ContractsApi~fulfillContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulfillContract200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fulfill Contract
     * Fulfill a contract
     * @param {String} contractId The ID of the contract
     * @param {module:api/ContractsApi~fulfillContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulfillContract200Response}
     */
    fulfillContract(contractId, callback) {
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling fulfillContract");
      }

      let pathParams = {
        'contractId': contractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FulfillContract200Response;
      return this.apiClient.callApi(
        '/my/contracts/{contractId}/fulfill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContract operation.
     * @callback module:api/ContractsApi~getContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContract200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Contract
     * Get the details of a contract by ID.
     * @param {String} contractId The contract ID
     * @param {module:api/ContractsApi~getContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContract200Response}
     */
    getContract(contractId, callback) {
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling getContract");
      }

      let pathParams = {
        'contractId': contractId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContract200Response;
      return this.apiClient.callApi(
        '/my/contracts/{contractId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContracts operation.
     * @callback module:api/ContractsApi~getContractsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContracts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Contracts
     * List all of your contracts.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] What entry offset to request
     * @param {Number} [limit] How many entries to return per page
     * @param {module:api/ContractsApi~getContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContracts200Response}
     */
    getContracts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContracts200Response;
      return this.apiClient.callApi(
        '/my/contracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
