/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateChart201Response from '../model/CreateChart201Response';
import CreateShipShipScan201Response from '../model/CreateShipShipScan201Response';
import CreateShipSystemScan201Response from '../model/CreateShipSystemScan201Response';
import CreateShipWaypointScan201Response from '../model/CreateShipWaypointScan201Response';
import CreateSurvey201Response from '../model/CreateSurvey201Response';
import DockShip200Response from '../model/DockShip200Response';
import ExtractResources201Response from '../model/ExtractResources201Response';
import ExtractResourcesRequest from '../model/ExtractResourcesRequest';
import GetMyShip200Response from '../model/GetMyShip200Response';
import GetMyShipCargo200Response from '../model/GetMyShipCargo200Response';
import GetMyShips200Response from '../model/GetMyShips200Response';
import GetShipCooldown200Response from '../model/GetShipCooldown200Response';
import GetShipNav200Response from '../model/GetShipNav200Response';
import Jettison200Response from '../model/Jettison200Response';
import JettisonRequest from '../model/JettisonRequest';
import JumpShip200Response from '../model/JumpShip200Response';
import JumpShipRequest from '../model/JumpShipRequest';
import NavigateShip200Response from '../model/NavigateShip200Response';
import NavigateShipRequest from '../model/NavigateShipRequest';
import OrbitShip200Response from '../model/OrbitShip200Response';
import PatchShipNavRequest from '../model/PatchShipNavRequest';
import PurchaseCargo201Response from '../model/PurchaseCargo201Response';
import PurchaseCargoRequest from '../model/PurchaseCargoRequest';
import PurchaseShip201Response from '../model/PurchaseShip201Response';
import PurchaseShipRequest from '../model/PurchaseShipRequest';
import RefuelShip200Response from '../model/RefuelShip200Response';
import SellCargo201Response from '../model/SellCargo201Response';
import SellCargoRequest from '../model/SellCargoRequest';
import ShipRefine200Response from '../model/ShipRefine200Response';
import ShipRefineRequest from '../model/ShipRefineRequest';
import TransferCargo200Response from '../model/TransferCargo200Response';
import TransferCargoRequest from '../model/TransferCargoRequest';

/**
* Fleet service.
* @module api/FleetApi
* @version 2.0.0
*/
export default class FleetApi {

    /**
    * Constructs a new FleetApi. 
    * @alias module:api/FleetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChart operation.
     * @callback module:api/FleetApi~createChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChart201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Chart
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @param {String} shipSymbol The symbol of the ship
     * @param {module:api/FleetApi~createChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChart201Response}
     */
    createChart(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling createChart");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateChart201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/chart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createShipShipScan operation.
     * @callback module:api/FleetApi~createShipShipScanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateShipShipScan201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan Ships
     * Activate your ship's sensor arrays to scan for ship information.
     * @param {String} shipSymbol 
     * @param {module:api/FleetApi~createShipShipScanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateShipShipScan201Response}
     */
    createShipShipScan(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling createShipShipScan");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateShipShipScan201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/scan/ships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createShipSystemScan operation.
     * @callback module:api/FleetApi~createShipSystemScanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateShipSystemScan201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan Systems
     * Activate your ship's sensor arrays to scan for system information.
     * @param {String} shipSymbol 
     * @param {module:api/FleetApi~createShipSystemScanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateShipSystemScan201Response}
     */
    createShipSystemScan(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling createShipSystemScan");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateShipSystemScan201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/scan/systems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createShipWaypointScan operation.
     * @callback module:api/FleetApi~createShipWaypointScanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateShipWaypointScan201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan Waypoints
     * Activate your ship's sensor arrays to scan for waypoint information.
     * @param {String} shipSymbol 
     * @param {module:api/FleetApi~createShipWaypointScanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateShipWaypointScan201Response}
     */
    createShipWaypointScan(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling createShipWaypointScan");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateShipWaypointScan201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/scan/waypoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSurvey operation.
     * @callback module:api/FleetApi~createSurveyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSurvey201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Survey
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @param {String} shipSymbol The symbol of the ship
     * @param {module:api/FleetApi~createSurveyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSurvey201Response}
     */
    createSurvey(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling createSurvey");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateSurvey201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/survey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dockShip operation.
     * @callback module:api/FleetApi~dockShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DockShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dock Ship
     * Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @param {String} shipSymbol The symbol of the ship
     * @param {module:api/FleetApi~dockShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DockShip200Response}
     */
    dockShip(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling dockShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DockShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/dock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extractResources operation.
     * @callback module:api/FleetApi~extractResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtractResources201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract Resources
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @param {String} shipSymbol The ship symbol
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtractResourcesRequest} [extractResourcesRequest] 
     * @param {module:api/FleetApi~extractResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtractResources201Response}
     */
    extractResources(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['extractResourcesRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling extractResources");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExtractResources201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/extract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyShip operation.
     * @callback module:api/FleetApi~getMyShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMyShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ship
     * Retrieve the details of your ship.
     * @param {String} shipSymbol 
     * @param {module:api/FleetApi~getMyShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMyShip200Response}
     */
    getMyShip(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling getMyShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMyShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyShipCargo operation.
     * @callback module:api/FleetApi~getMyShipCargoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMyShipCargo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ship Cargo
     * Retrieve the cargo of your ship.
     * @param {String} shipSymbol The symbol of the ship
     * @param {module:api/FleetApi~getMyShipCargoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMyShipCargo200Response}
     */
    getMyShipCargo(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling getMyShipCargo");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMyShipCargo200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/cargo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyShips operation.
     * @callback module:api/FleetApi~getMyShipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMyShips200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Ships
     * Retrieve all of your ships.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] What entry offset to request
     * @param {Number} [limit] How many entries to return per page
     * @param {module:api/FleetApi~getMyShipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMyShips200Response}
     */
    getMyShips(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMyShips200Response;
      return this.apiClient.callApi(
        '/my/ships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipCooldown operation.
     * @callback module:api/FleetApi~getShipCooldownCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShipCooldown200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ship Cooldown
     * Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @param {String} shipSymbol 
     * @param {module:api/FleetApi~getShipCooldownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShipCooldown200Response}
     */
    getShipCooldown(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling getShipCooldown");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetShipCooldown200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/cooldown', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipNav operation.
     * @callback module:api/FleetApi~getShipNavCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShipNav200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ship Nav
     * Get the current nav status of a ship.
     * @param {String} shipSymbol The ship symbol
     * @param {module:api/FleetApi~getShipNavCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShipNav200Response}
     */
    getShipNav(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling getShipNav");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetShipNav200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/nav', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jettison operation.
     * @callback module:api/FleetApi~jettisonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Jettison200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Jettison Cargo
     * Jettison cargo from your ship's cargo hold.
     * @param {String} shipSymbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/JettisonRequest} [jettisonRequest] 
     * @param {module:api/FleetApi~jettisonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Jettison200Response}
     */
    jettison(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['jettisonRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling jettison");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Jettison200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/jettison', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jumpShip operation.
     * @callback module:api/FleetApi~jumpShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JumpShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Jump Ship
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @param {String} shipSymbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/JumpShipRequest} [jumpShipRequest] 
     * @param {module:api/FleetApi~jumpShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JumpShip200Response}
     */
    jumpShip(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['jumpShipRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling jumpShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JumpShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/jump', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the navigateShip operation.
     * @callback module:api/FleetApi~navigateShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NavigateShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Navigate Ship
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.  To travel between systems, see the ship's warp or jump actions.
     * @param {String} shipSymbol The ship symbol
     * @param {Object} opts Optional parameters
     * @param {module:model/NavigateShipRequest} [navigateShipRequest] 
     * @param {module:api/FleetApi~navigateShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NavigateShip200Response}
     */
    navigateShip(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['navigateShipRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling navigateShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NavigateShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/navigate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orbitShip operation.
     * @callback module:api/FleetApi~orbitShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrbitShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Orbit Ship
     * Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @param {String} shipSymbol The symbol of the ship
     * @param {module:api/FleetApi~orbitShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrbitShip200Response}
     */
    orbitShip(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling orbitShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrbitShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/orbit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchShipNav operation.
     * @callback module:api/FleetApi~patchShipNavCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShipNav200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch Ship Nav
     * Update the nav data of a ship, such as the flight mode.
     * @param {String} shipSymbol The ship symbol
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchShipNavRequest} [patchShipNavRequest] 
     * @param {module:api/FleetApi~patchShipNavCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShipNav200Response}
     */
    patchShipNav(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchShipNavRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling patchShipNav");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetShipNav200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/nav', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCargo operation.
     * @callback module:api/FleetApi~purchaseCargoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseCargo201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Cargo
     * Purchase cargo.
     * @param {String} shipSymbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/PurchaseCargoRequest} [purchaseCargoRequest] 
     * @param {module:api/FleetApi~purchaseCargoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseCargo201Response}
     */
    purchaseCargo(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['purchaseCargoRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling purchaseCargo");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseCargo201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseShip operation.
     * @callback module:api/FleetApi~purchaseShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseShip201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Ship
     * Purchase a ship
     * @param {Object} opts Optional parameters
     * @param {module:model/PurchaseShipRequest} [purchaseShipRequest] 
     * @param {module:api/FleetApi~purchaseShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseShip201Response}
     */
    purchaseShip(opts, callback) {
      opts = opts || {};
      let postBody = opts['purchaseShipRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseShip201Response;
      return this.apiClient.callApi(
        '/my/ships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refuelShip operation.
     * @callback module:api/FleetApi~refuelShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefuelShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refuel Ship
     * Refuel your ship from the local market.
     * @param {String} shipSymbol 
     * @param {module:api/FleetApi~refuelShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefuelShip200Response}
     */
    refuelShip(shipSymbol, callback) {
      let postBody = null;
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling refuelShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefuelShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/refuel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sellCargo operation.
     * @callback module:api/FleetApi~sellCargoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellCargo201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sell Cargo
     * Sell cargo.
     * @param {String} shipSymbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/SellCargoRequest} [sellCargoRequest] 
     * @param {module:api/FleetApi~sellCargoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellCargo201Response}
     */
    sellCargo(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['sellCargoRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling sellCargo");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellCargo201Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/sell', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shipRefine operation.
     * @callback module:api/FleetApi~shipRefineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipRefine200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ship Refine
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @param {String} shipSymbol The symbol of the ship
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipRefineRequest} [shipRefineRequest] 
     * @param {module:api/FleetApi~shipRefineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipRefine200Response}
     */
    shipRefine(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['shipRefineRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling shipRefine");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipRefine200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/refine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferCargo operation.
     * @callback module:api/FleetApi~transferCargoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferCargo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer Cargo
     * Transfer cargo between ships.
     * @param {String} shipSymbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/TransferCargoRequest} [transferCargoRequest] 
     * @param {module:api/FleetApi~transferCargoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferCargo200Response}
     */
    transferCargo(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['transferCargoRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling transferCargo");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferCargo200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the warpShip operation.
     * @callback module:api/FleetApi~warpShipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NavigateShip200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Warp Ship
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     * @param {String} shipSymbol 
     * @param {Object} opts Optional parameters
     * @param {module:model/NavigateShipRequest} [navigateShipRequest] 
     * @param {module:api/FleetApi~warpShipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NavigateShip200Response}
     */
    warpShip(shipSymbol, opts, callback) {
      opts = opts || {};
      let postBody = opts['navigateShipRequest'];
      // verify the required parameter 'shipSymbol' is set
      if (shipSymbol === undefined || shipSymbol === null) {
        throw new Error("Missing the required parameter 'shipSymbol' when calling warpShip");
      }

      let pathParams = {
        'shipSymbol': shipSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AgentToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NavigateShip200Response;
      return this.apiClient.callApi(
        '/my/ships/{shipSymbol}/warp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
