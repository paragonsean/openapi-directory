/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetMarket200ResponseDataTradeGoodsInner model module.
 * @module model/GetMarket200ResponseDataTradeGoodsInner
 * @version 2.0.0
 */
class GetMarket200ResponseDataTradeGoodsInner {
    /**
     * Constructs a new <code>GetMarket200ResponseDataTradeGoodsInner</code>.
     * @alias module:model/GetMarket200ResponseDataTradeGoodsInner
     * @param purchasePrice {Number} The price at which this good can be purchased from the market.
     * @param sellPrice {Number} The price at which this good can be sold to the market.
     * @param supply {module:model/GetMarket200ResponseDataTradeGoodsInner.SupplyEnum} A rough estimate of the total supply of this good in the marketplace.
     * @param symbol {String} The symbol of the trade good.
     * @param tradeVolume {Number} The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.
     */
    constructor(purchasePrice, sellPrice, supply, symbol, tradeVolume) { 
        
        GetMarket200ResponseDataTradeGoodsInner.initialize(this, purchasePrice, sellPrice, supply, symbol, tradeVolume);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, purchasePrice, sellPrice, supply, symbol, tradeVolume) { 
        obj['purchasePrice'] = purchasePrice;
        obj['sellPrice'] = sellPrice;
        obj['supply'] = supply;
        obj['symbol'] = symbol;
        obj['tradeVolume'] = tradeVolume;
    }

    /**
     * Constructs a <code>GetMarket200ResponseDataTradeGoodsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetMarket200ResponseDataTradeGoodsInner} obj Optional instance to populate.
     * @return {module:model/GetMarket200ResponseDataTradeGoodsInner} The populated <code>GetMarket200ResponseDataTradeGoodsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetMarket200ResponseDataTradeGoodsInner();

            if (data.hasOwnProperty('purchasePrice')) {
                obj['purchasePrice'] = ApiClient.convertToType(data['purchasePrice'], 'Number');
            }
            if (data.hasOwnProperty('sellPrice')) {
                obj['sellPrice'] = ApiClient.convertToType(data['sellPrice'], 'Number');
            }
            if (data.hasOwnProperty('supply')) {
                obj['supply'] = ApiClient.convertToType(data['supply'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('tradeVolume')) {
                obj['tradeVolume'] = ApiClient.convertToType(data['tradeVolume'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetMarket200ResponseDataTradeGoodsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetMarket200ResponseDataTradeGoodsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetMarket200ResponseDataTradeGoodsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['supply'] && !(typeof data['supply'] === 'string' || data['supply'] instanceof String)) {
            throw new Error("Expected the field `supply` to be a primitive type in the JSON string but got " + data['supply']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}

GetMarket200ResponseDataTradeGoodsInner.RequiredProperties = ["purchasePrice", "sellPrice", "supply", "symbol", "tradeVolume"];

/**
 * The price at which this good can be purchased from the market.
 * @member {Number} purchasePrice
 */
GetMarket200ResponseDataTradeGoodsInner.prototype['purchasePrice'] = undefined;

/**
 * The price at which this good can be sold to the market.
 * @member {Number} sellPrice
 */
GetMarket200ResponseDataTradeGoodsInner.prototype['sellPrice'] = undefined;

/**
 * A rough estimate of the total supply of this good in the marketplace.
 * @member {module:model/GetMarket200ResponseDataTradeGoodsInner.SupplyEnum} supply
 */
GetMarket200ResponseDataTradeGoodsInner.prototype['supply'] = undefined;

/**
 * The symbol of the trade good.
 * @member {String} symbol
 */
GetMarket200ResponseDataTradeGoodsInner.prototype['symbol'] = undefined;

/**
 * The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.
 * @member {Number} tradeVolume
 */
GetMarket200ResponseDataTradeGoodsInner.prototype['tradeVolume'] = undefined;





/**
 * Allowed values for the <code>supply</code> property.
 * @enum {String}
 * @readonly
 */
GetMarket200ResponseDataTradeGoodsInner['SupplyEnum'] = {

    /**
     * value: "SCARCE"
     * @const
     */
    "SCARCE": "SCARCE",

    /**
     * value: "LIMITED"
     * @const
     */
    "LIMITED": "LIMITED",

    /**
     * value: "MODERATE"
     * @const
     */
    "MODERATE": "MODERATE",

    /**
     * value: "ABUNDANT"
     * @const
     */
    "ABUNDANT": "ABUNDANT"
};



export default GetMarket200ResponseDataTradeGoodsInner;

