/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Register201ResponseDataShipFrameRequirements from './Register201ResponseDataShipFrameRequirements';

/**
 * The Register201ResponseDataShipFrame model module.
 * @module model/Register201ResponseDataShipFrame
 * @version 2.0.0
 */
class Register201ResponseDataShipFrame {
    /**
     * Constructs a new <code>Register201ResponseDataShipFrame</code>.
     * The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
     * @alias module:model/Register201ResponseDataShipFrame
     * @param description {String} 
     * @param fuelCapacity {Number} 
     * @param moduleSlots {Number} 
     * @param mountingPoints {Number} 
     * @param name {String} 
     * @param requirements {module:model/Register201ResponseDataShipFrameRequirements} 
     * @param symbol {module:model/Register201ResponseDataShipFrame.SymbolEnum} 
     */
    constructor(description, fuelCapacity, moduleSlots, mountingPoints, name, requirements, symbol) { 
        
        Register201ResponseDataShipFrame.initialize(this, description, fuelCapacity, moduleSlots, mountingPoints, name, requirements, symbol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, fuelCapacity, moduleSlots, mountingPoints, name, requirements, symbol) { 
        obj['description'] = description;
        obj['fuelCapacity'] = fuelCapacity;
        obj['moduleSlots'] = moduleSlots;
        obj['mountingPoints'] = mountingPoints;
        obj['name'] = name;
        obj['requirements'] = requirements;
        obj['symbol'] = symbol;
    }

    /**
     * Constructs a <code>Register201ResponseDataShipFrame</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataShipFrame} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataShipFrame} The populated <code>Register201ResponseDataShipFrame</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataShipFrame();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fuelCapacity')) {
                obj['fuelCapacity'] = ApiClient.convertToType(data['fuelCapacity'], 'Number');
            }
            if (data.hasOwnProperty('moduleSlots')) {
                obj['moduleSlots'] = ApiClient.convertToType(data['moduleSlots'], 'Number');
            }
            if (data.hasOwnProperty('mountingPoints')) {
                obj['mountingPoints'] = ApiClient.convertToType(data['mountingPoints'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requirements')) {
                obj['requirements'] = Register201ResponseDataShipFrameRequirements.constructFromObject(data['requirements']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataShipFrame</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataShipFrame</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataShipFrame.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `requirements`
        if (data['requirements']) { // data not null
          Register201ResponseDataShipFrameRequirements.validateJSON(data['requirements']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}

Register201ResponseDataShipFrame.RequiredProperties = ["description", "fuelCapacity", "moduleSlots", "mountingPoints", "name", "requirements", "symbol"];

/**
 * Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
 * @member {Number} condition
 */
Register201ResponseDataShipFrame.prototype['condition'] = undefined;

/**
 * @member {String} description
 */
Register201ResponseDataShipFrame.prototype['description'] = undefined;

/**
 * @member {Number} fuelCapacity
 */
Register201ResponseDataShipFrame.prototype['fuelCapacity'] = undefined;

/**
 * @member {Number} moduleSlots
 */
Register201ResponseDataShipFrame.prototype['moduleSlots'] = undefined;

/**
 * @member {Number} mountingPoints
 */
Register201ResponseDataShipFrame.prototype['mountingPoints'] = undefined;

/**
 * @member {String} name
 */
Register201ResponseDataShipFrame.prototype['name'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipFrameRequirements} requirements
 */
Register201ResponseDataShipFrame.prototype['requirements'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipFrame.SymbolEnum} symbol
 */
Register201ResponseDataShipFrame.prototype['symbol'] = undefined;





/**
 * Allowed values for the <code>symbol</code> property.
 * @enum {String}
 * @readonly
 */
Register201ResponseDataShipFrame['SymbolEnum'] = {

    /**
     * value: "FRAME_PROBE"
     * @const
     */
    "PROBE": "FRAME_PROBE",

    /**
     * value: "FRAME_DRONE"
     * @const
     */
    "DRONE": "FRAME_DRONE",

    /**
     * value: "FRAME_INTERCEPTOR"
     * @const
     */
    "INTERCEPTOR": "FRAME_INTERCEPTOR",

    /**
     * value: "FRAME_RACER"
     * @const
     */
    "RACER": "FRAME_RACER",

    /**
     * value: "FRAME_FIGHTER"
     * @const
     */
    "FIGHTER": "FRAME_FIGHTER",

    /**
     * value: "FRAME_FRIGATE"
     * @const
     */
    "FRIGATE": "FRAME_FRIGATE",

    /**
     * value: "FRAME_SHUTTLE"
     * @const
     */
    "SHUTTLE": "FRAME_SHUTTLE",

    /**
     * value: "FRAME_EXPLORER"
     * @const
     */
    "EXPLORER": "FRAME_EXPLORER",

    /**
     * value: "FRAME_MINER"
     * @const
     */
    "MINER": "FRAME_MINER",

    /**
     * value: "FRAME_LIGHT_FREIGHTER"
     * @const
     */
    "LIGHT_FREIGHTER": "FRAME_LIGHT_FREIGHTER",

    /**
     * value: "FRAME_HEAVY_FREIGHTER"
     * @const
     */
    "HEAVY_FREIGHTER": "FRAME_HEAVY_FREIGHTER",

    /**
     * value: "FRAME_TRANSPORT"
     * @const
     */
    "TRANSPORT": "FRAME_TRANSPORT",

    /**
     * value: "FRAME_DESTROYER"
     * @const
     */
    "DESTROYER": "FRAME_DESTROYER",

    /**
     * value: "FRAME_CRUISER"
     * @const
     */
    "CRUISER": "FRAME_CRUISER",

    /**
     * value: "FRAME_CARRIER"
     * @const
     */
    "CARRIER": "FRAME_CARRIER"
};



export default Register201ResponseDataShipFrame;

