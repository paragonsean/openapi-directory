/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Register201ResponseDataShipNavRouteDestination model module.
 * @module model/Register201ResponseDataShipNavRouteDestination
 * @version 2.0.0
 */
class Register201ResponseDataShipNavRouteDestination {
    /**
     * Constructs a new <code>Register201ResponseDataShipNavRouteDestination</code>.
     * The destination or departure of a ships nav route.
     * @alias module:model/Register201ResponseDataShipNavRouteDestination
     * @param symbol {String} 
     * @param systemSymbol {String} 
     * @param type {module:model/Register201ResponseDataShipNavRouteDestination.TypeEnum} The type of waypoint.
     * @param x {Number} 
     * @param y {Number} 
     */
    constructor(symbol, systemSymbol, type, x, y) { 
        
        Register201ResponseDataShipNavRouteDestination.initialize(this, symbol, systemSymbol, type, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, symbol, systemSymbol, type, x, y) { 
        obj['symbol'] = symbol;
        obj['systemSymbol'] = systemSymbol;
        obj['type'] = type;
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>Register201ResponseDataShipNavRouteDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataShipNavRouteDestination} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataShipNavRouteDestination} The populated <code>Register201ResponseDataShipNavRouteDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataShipNavRouteDestination();

            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('systemSymbol')) {
                obj['systemSymbol'] = ApiClient.convertToType(data['systemSymbol'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataShipNavRouteDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataShipNavRouteDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataShipNavRouteDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['systemSymbol'] && !(typeof data['systemSymbol'] === 'string' || data['systemSymbol'] instanceof String)) {
            throw new Error("Expected the field `systemSymbol` to be a primitive type in the JSON string but got " + data['systemSymbol']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Register201ResponseDataShipNavRouteDestination.RequiredProperties = ["symbol", "systemSymbol", "type", "x", "y"];

/**
 * @member {String} symbol
 */
Register201ResponseDataShipNavRouteDestination.prototype['symbol'] = undefined;

/**
 * @member {String} systemSymbol
 */
Register201ResponseDataShipNavRouteDestination.prototype['systemSymbol'] = undefined;

/**
 * The type of waypoint.
 * @member {module:model/Register201ResponseDataShipNavRouteDestination.TypeEnum} type
 */
Register201ResponseDataShipNavRouteDestination.prototype['type'] = undefined;

/**
 * @member {Number} x
 */
Register201ResponseDataShipNavRouteDestination.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
Register201ResponseDataShipNavRouteDestination.prototype['y'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Register201ResponseDataShipNavRouteDestination['TypeEnum'] = {

    /**
     * value: "PLANET"
     * @const
     */
    "PLANET": "PLANET",

    /**
     * value: "GAS_GIANT"
     * @const
     */
    "GAS_GIANT": "GAS_GIANT",

    /**
     * value: "MOON"
     * @const
     */
    "MOON": "MOON",

    /**
     * value: "ORBITAL_STATION"
     * @const
     */
    "ORBITAL_STATION": "ORBITAL_STATION",

    /**
     * value: "JUMP_GATE"
     * @const
     */
    "JUMP_GATE": "JUMP_GATE",

    /**
     * value: "ASTEROID_FIELD"
     * @const
     */
    "ASTEROID_FIELD": "ASTEROID_FIELD",

    /**
     * value: "NEBULA"
     * @const
     */
    "NEBULA": "NEBULA",

    /**
     * value: "DEBRIS_FIELD"
     * @const
     */
    "DEBRIS_FIELD": "DEBRIS_FIELD",

    /**
     * value: "GRAVITY_WELL"
     * @const
     */
    "GRAVITY_WELL": "GRAVITY_WELL"
};



export default Register201ResponseDataShipNavRouteDestination;

