/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Register201ResponseDataShipCargo from './Register201ResponseDataShipCargo';
import Register201ResponseDataShipCrew from './Register201ResponseDataShipCrew';
import Register201ResponseDataShipEngine from './Register201ResponseDataShipEngine';
import Register201ResponseDataShipFrame from './Register201ResponseDataShipFrame';
import Register201ResponseDataShipFuel from './Register201ResponseDataShipFuel';
import Register201ResponseDataShipModulesInner from './Register201ResponseDataShipModulesInner';
import Register201ResponseDataShipMountsInner from './Register201ResponseDataShipMountsInner';
import Register201ResponseDataShipNav from './Register201ResponseDataShipNav';
import Register201ResponseDataShipReactor from './Register201ResponseDataShipReactor';
import Register201ResponseDataShipRegistration from './Register201ResponseDataShipRegistration';

/**
 * The Register201ResponseDataShip model module.
 * @module model/Register201ResponseDataShip
 * @version 2.0.0
 */
class Register201ResponseDataShip {
    /**
     * Constructs a new <code>Register201ResponseDataShip</code>.
     * A ship
     * @alias module:model/Register201ResponseDataShip
     * @param cargo {module:model/Register201ResponseDataShipCargo} 
     * @param crew {module:model/Register201ResponseDataShipCrew} 
     * @param engine {module:model/Register201ResponseDataShipEngine} 
     * @param frame {module:model/Register201ResponseDataShipFrame} 
     * @param fuel {module:model/Register201ResponseDataShipFuel} 
     * @param modules {Array.<module:model/Register201ResponseDataShipModulesInner>} 
     * @param mounts {Array.<module:model/Register201ResponseDataShipMountsInner>} 
     * @param nav {module:model/Register201ResponseDataShipNav} 
     * @param reactor {module:model/Register201ResponseDataShipReactor} 
     * @param registration {module:model/Register201ResponseDataShipRegistration} 
     * @param symbol {String} The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]`
     */
    constructor(cargo, crew, engine, frame, fuel, modules, mounts, nav, reactor, registration, symbol) { 
        
        Register201ResponseDataShip.initialize(this, cargo, crew, engine, frame, fuel, modules, mounts, nav, reactor, registration, symbol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cargo, crew, engine, frame, fuel, modules, mounts, nav, reactor, registration, symbol) { 
        obj['cargo'] = cargo;
        obj['crew'] = crew;
        obj['engine'] = engine;
        obj['frame'] = frame;
        obj['fuel'] = fuel;
        obj['modules'] = modules;
        obj['mounts'] = mounts;
        obj['nav'] = nav;
        obj['reactor'] = reactor;
        obj['registration'] = registration;
        obj['symbol'] = symbol;
    }

    /**
     * Constructs a <code>Register201ResponseDataShip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataShip} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataShip} The populated <code>Register201ResponseDataShip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataShip();

            if (data.hasOwnProperty('cargo')) {
                obj['cargo'] = Register201ResponseDataShipCargo.constructFromObject(data['cargo']);
            }
            if (data.hasOwnProperty('crew')) {
                obj['crew'] = Register201ResponseDataShipCrew.constructFromObject(data['crew']);
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = Register201ResponseDataShipEngine.constructFromObject(data['engine']);
            }
            if (data.hasOwnProperty('frame')) {
                obj['frame'] = Register201ResponseDataShipFrame.constructFromObject(data['frame']);
            }
            if (data.hasOwnProperty('fuel')) {
                obj['fuel'] = Register201ResponseDataShipFuel.constructFromObject(data['fuel']);
            }
            if (data.hasOwnProperty('modules')) {
                obj['modules'] = ApiClient.convertToType(data['modules'], [Register201ResponseDataShipModulesInner]);
            }
            if (data.hasOwnProperty('mounts')) {
                obj['mounts'] = ApiClient.convertToType(data['mounts'], [Register201ResponseDataShipMountsInner]);
            }
            if (data.hasOwnProperty('nav')) {
                obj['nav'] = Register201ResponseDataShipNav.constructFromObject(data['nav']);
            }
            if (data.hasOwnProperty('reactor')) {
                obj['reactor'] = Register201ResponseDataShipReactor.constructFromObject(data['reactor']);
            }
            if (data.hasOwnProperty('registration')) {
                obj['registration'] = Register201ResponseDataShipRegistration.constructFromObject(data['registration']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataShip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataShip</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataShip.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cargo`
        if (data['cargo']) { // data not null
          Register201ResponseDataShipCargo.validateJSON(data['cargo']);
        }
        // validate the optional field `crew`
        if (data['crew']) { // data not null
          Register201ResponseDataShipCrew.validateJSON(data['crew']);
        }
        // validate the optional field `engine`
        if (data['engine']) { // data not null
          Register201ResponseDataShipEngine.validateJSON(data['engine']);
        }
        // validate the optional field `frame`
        if (data['frame']) { // data not null
          Register201ResponseDataShipFrame.validateJSON(data['frame']);
        }
        // validate the optional field `fuel`
        if (data['fuel']) { // data not null
          Register201ResponseDataShipFuel.validateJSON(data['fuel']);
        }
        if (data['modules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['modules'])) {
                throw new Error("Expected the field `modules` to be an array in the JSON data but got " + data['modules']);
            }
            // validate the optional field `modules` (array)
            for (const item of data['modules']) {
                Register201ResponseDataShipModulesInner.validateJSON(item);
            };
        }
        if (data['mounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mounts'])) {
                throw new Error("Expected the field `mounts` to be an array in the JSON data but got " + data['mounts']);
            }
            // validate the optional field `mounts` (array)
            for (const item of data['mounts']) {
                Register201ResponseDataShipMountsInner.validateJSON(item);
            };
        }
        // validate the optional field `nav`
        if (data['nav']) { // data not null
          Register201ResponseDataShipNav.validateJSON(data['nav']);
        }
        // validate the optional field `reactor`
        if (data['reactor']) { // data not null
          Register201ResponseDataShipReactor.validateJSON(data['reactor']);
        }
        // validate the optional field `registration`
        if (data['registration']) { // data not null
          Register201ResponseDataShipRegistration.validateJSON(data['registration']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}

Register201ResponseDataShip.RequiredProperties = ["cargo", "crew", "engine", "frame", "fuel", "modules", "mounts", "nav", "reactor", "registration", "symbol"];

/**
 * @member {module:model/Register201ResponseDataShipCargo} cargo
 */
Register201ResponseDataShip.prototype['cargo'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipCrew} crew
 */
Register201ResponseDataShip.prototype['crew'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipEngine} engine
 */
Register201ResponseDataShip.prototype['engine'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipFrame} frame
 */
Register201ResponseDataShip.prototype['frame'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipFuel} fuel
 */
Register201ResponseDataShip.prototype['fuel'] = undefined;

/**
 * @member {Array.<module:model/Register201ResponseDataShipModulesInner>} modules
 */
Register201ResponseDataShip.prototype['modules'] = undefined;

/**
 * @member {Array.<module:model/Register201ResponseDataShipMountsInner>} mounts
 */
Register201ResponseDataShip.prototype['mounts'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipNav} nav
 */
Register201ResponseDataShip.prototype['nav'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipReactor} reactor
 */
Register201ResponseDataShip.prototype['reactor'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipRegistration} registration
 */
Register201ResponseDataShip.prototype['registration'] = undefined;

/**
 * The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]`
 * @member {String} symbol
 */
Register201ResponseDataShip.prototype['symbol'] = undefined;






export default Register201ResponseDataShip;

