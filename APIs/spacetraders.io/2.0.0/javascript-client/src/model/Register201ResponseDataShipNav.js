/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Register201ResponseDataShipNavRoute from './Register201ResponseDataShipNavRoute';

/**
 * The Register201ResponseDataShipNav model module.
 * @module model/Register201ResponseDataShipNav
 * @version 2.0.0
 */
class Register201ResponseDataShipNav {
    /**
     * Constructs a new <code>Register201ResponseDataShipNav</code>.
     * The navigation information of the ship.
     * @alias module:model/Register201ResponseDataShipNav
     * @param flightMode {module:model/Register201ResponseDataShipNav.FlightModeEnum} The ship's set speed when traveling between waypoints or systems.
     * @param route {module:model/Register201ResponseDataShipNavRoute} 
     * @param status {module:model/Register201ResponseDataShipNav.StatusEnum} The current status of the ship
     * @param systemSymbol {String} The system symbol of the ship's current location.
     * @param waypointSymbol {String} The waypoint symbol of the ship's current location, or if the ship is in-transit, the waypoint symbol of the ship's destination.
     */
    constructor(flightMode, route, status, systemSymbol, waypointSymbol) { 
        
        Register201ResponseDataShipNav.initialize(this, flightMode, route, status, systemSymbol, waypointSymbol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flightMode, route, status, systemSymbol, waypointSymbol) { 
        obj['flightMode'] = flightMode || 'CRUISE';
        obj['route'] = route;
        obj['status'] = status;
        obj['systemSymbol'] = systemSymbol;
        obj['waypointSymbol'] = waypointSymbol;
    }

    /**
     * Constructs a <code>Register201ResponseDataShipNav</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataShipNav} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataShipNav} The populated <code>Register201ResponseDataShipNav</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataShipNav();

            if (data.hasOwnProperty('flightMode')) {
                obj['flightMode'] = ApiClient.convertToType(data['flightMode'], 'String');
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = Register201ResponseDataShipNavRoute.constructFromObject(data['route']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('systemSymbol')) {
                obj['systemSymbol'] = ApiClient.convertToType(data['systemSymbol'], 'String');
            }
            if (data.hasOwnProperty('waypointSymbol')) {
                obj['waypointSymbol'] = ApiClient.convertToType(data['waypointSymbol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataShipNav</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataShipNav</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataShipNav.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['flightMode'] && !(typeof data['flightMode'] === 'string' || data['flightMode'] instanceof String)) {
            throw new Error("Expected the field `flightMode` to be a primitive type in the JSON string but got " + data['flightMode']);
        }
        // validate the optional field `route`
        if (data['route']) { // data not null
          Register201ResponseDataShipNavRoute.validateJSON(data['route']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['systemSymbol'] && !(typeof data['systemSymbol'] === 'string' || data['systemSymbol'] instanceof String)) {
            throw new Error("Expected the field `systemSymbol` to be a primitive type in the JSON string but got " + data['systemSymbol']);
        }
        // ensure the json data is a string
        if (data['waypointSymbol'] && !(typeof data['waypointSymbol'] === 'string' || data['waypointSymbol'] instanceof String)) {
            throw new Error("Expected the field `waypointSymbol` to be a primitive type in the JSON string but got " + data['waypointSymbol']);
        }

        return true;
    }


}

Register201ResponseDataShipNav.RequiredProperties = ["flightMode", "route", "status", "systemSymbol", "waypointSymbol"];

/**
 * The ship's set speed when traveling between waypoints or systems.
 * @member {module:model/Register201ResponseDataShipNav.FlightModeEnum} flightMode
 * @default 'CRUISE'
 */
Register201ResponseDataShipNav.prototype['flightMode'] = 'CRUISE';

/**
 * @member {module:model/Register201ResponseDataShipNavRoute} route
 */
Register201ResponseDataShipNav.prototype['route'] = undefined;

/**
 * The current status of the ship
 * @member {module:model/Register201ResponseDataShipNav.StatusEnum} status
 */
Register201ResponseDataShipNav.prototype['status'] = undefined;

/**
 * The system symbol of the ship's current location.
 * @member {String} systemSymbol
 */
Register201ResponseDataShipNav.prototype['systemSymbol'] = undefined;

/**
 * The waypoint symbol of the ship's current location, or if the ship is in-transit, the waypoint symbol of the ship's destination.
 * @member {String} waypointSymbol
 */
Register201ResponseDataShipNav.prototype['waypointSymbol'] = undefined;





/**
 * Allowed values for the <code>flightMode</code> property.
 * @enum {String}
 * @readonly
 */
Register201ResponseDataShipNav['FlightModeEnum'] = {

    /**
     * value: "DRIFT"
     * @const
     */
    "DRIFT": "DRIFT",

    /**
     * value: "STEALTH"
     * @const
     */
    "STEALTH": "STEALTH",

    /**
     * value: "CRUISE"
     * @const
     */
    "CRUISE": "CRUISE",

    /**
     * value: "BURN"
     * @const
     */
    "BURN": "BURN"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Register201ResponseDataShipNav['StatusEnum'] = {

    /**
     * value: "IN_TRANSIT"
     * @const
     */
    "IN_TRANSIT": "IN_TRANSIT",

    /**
     * value: "IN_ORBIT"
     * @const
     */
    "IN_ORBIT": "IN_ORBIT",

    /**
     * value: "DOCKED"
     * @const
     */
    "DOCKED": "DOCKED"
};



export default Register201ResponseDataShipNav;

