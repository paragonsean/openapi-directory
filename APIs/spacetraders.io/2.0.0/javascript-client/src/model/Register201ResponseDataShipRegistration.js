/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Register201ResponseDataShipRegistration model module.
 * @module model/Register201ResponseDataShipRegistration
 * @version 2.0.0
 */
class Register201ResponseDataShipRegistration {
    /**
     * Constructs a new <code>Register201ResponseDataShipRegistration</code>.
     * The public registration information of the ship
     * @alias module:model/Register201ResponseDataShipRegistration
     * @param factionSymbol {String} The symbol of the faction the ship is registered with
     * @param name {String} The agent's registered name of the ship
     * @param role {module:model/Register201ResponseDataShipRegistration.RoleEnum} The registered role of the ship
     */
    constructor(factionSymbol, name, role) { 
        
        Register201ResponseDataShipRegistration.initialize(this, factionSymbol, name, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, factionSymbol, name, role) { 
        obj['factionSymbol'] = factionSymbol;
        obj['name'] = name;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>Register201ResponseDataShipRegistration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataShipRegistration} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataShipRegistration} The populated <code>Register201ResponseDataShipRegistration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataShipRegistration();

            if (data.hasOwnProperty('factionSymbol')) {
                obj['factionSymbol'] = ApiClient.convertToType(data['factionSymbol'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataShipRegistration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataShipRegistration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataShipRegistration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['factionSymbol'] && !(typeof data['factionSymbol'] === 'string' || data['factionSymbol'] instanceof String)) {
            throw new Error("Expected the field `factionSymbol` to be a primitive type in the JSON string but got " + data['factionSymbol']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

Register201ResponseDataShipRegistration.RequiredProperties = ["factionSymbol", "name", "role"];

/**
 * The symbol of the faction the ship is registered with
 * @member {String} factionSymbol
 */
Register201ResponseDataShipRegistration.prototype['factionSymbol'] = undefined;

/**
 * The agent's registered name of the ship
 * @member {String} name
 */
Register201ResponseDataShipRegistration.prototype['name'] = undefined;

/**
 * The registered role of the ship
 * @member {module:model/Register201ResponseDataShipRegistration.RoleEnum} role
 */
Register201ResponseDataShipRegistration.prototype['role'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Register201ResponseDataShipRegistration['RoleEnum'] = {

    /**
     * value: "FABRICATOR"
     * @const
     */
    "FABRICATOR": "FABRICATOR",

    /**
     * value: "HARVESTER"
     * @const
     */
    "HARVESTER": "HARVESTER",

    /**
     * value: "HAULER"
     * @const
     */
    "HAULER": "HAULER",

    /**
     * value: "INTERCEPTOR"
     * @const
     */
    "INTERCEPTOR": "INTERCEPTOR",

    /**
     * value: "EXCAVATOR"
     * @const
     */
    "EXCAVATOR": "EXCAVATOR",

    /**
     * value: "TRANSPORT"
     * @const
     */
    "TRANSPORT": "TRANSPORT",

    /**
     * value: "REPAIR"
     * @const
     */
    "REPAIR": "REPAIR",

    /**
     * value: "SURVEYOR"
     * @const
     */
    "SURVEYOR": "SURVEYOR",

    /**
     * value: "COMMAND"
     * @const
     */
    "COMMAND": "COMMAND",

    /**
     * value: "CARRIER"
     * @const
     */
    "CARRIER": "CARRIER",

    /**
     * value: "PATROL"
     * @const
     */
    "PATROL": "PATROL",

    /**
     * value: "SATELLITE"
     * @const
     */
    "SATELLITE": "SATELLITE",

    /**
     * value: "EXPLORER"
     * @const
     */
    "EXPLORER": "EXPLORER",

    /**
     * value: "REFINERY"
     * @const
     */
    "REFINERY": "REFINERY"
};



export default Register201ResponseDataShipRegistration;

