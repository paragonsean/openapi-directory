/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetSystemWaypoints200ResponseDataInnerChart from './GetSystemWaypoints200ResponseDataInnerChart';
import GetSystemWaypoints200ResponseDataInnerOrbitalsInner from './GetSystemWaypoints200ResponseDataInnerOrbitalsInner';
import GetSystemWaypoints200ResponseDataInnerTraitsInner from './GetSystemWaypoints200ResponseDataInnerTraitsInner';
import GetSystems200ResponseDataInnerFactionsInner from './GetSystems200ResponseDataInnerFactionsInner';

/**
 * The GetSystemWaypoints200ResponseDataInner model module.
 * @module model/GetSystemWaypoints200ResponseDataInner
 * @version 2.0.0
 */
class GetSystemWaypoints200ResponseDataInner {
    /**
     * Constructs a new <code>GetSystemWaypoints200ResponseDataInner</code>.
     * A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
     * @alias module:model/GetSystemWaypoints200ResponseDataInner
     * @param orbitals {Array.<module:model/GetSystemWaypoints200ResponseDataInnerOrbitalsInner>} 
     * @param symbol {String} 
     * @param systemSymbol {String} 
     * @param traits {Array.<module:model/GetSystemWaypoints200ResponseDataInnerTraitsInner>} The traits of the waypoint.
     * @param type {Object} 
     * @param x {Number} 
     * @param y {Number} 
     */
    constructor(orbitals, symbol, systemSymbol, traits, type, x, y) { 
        
        GetSystemWaypoints200ResponseDataInner.initialize(this, orbitals, symbol, systemSymbol, traits, type, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orbitals, symbol, systemSymbol, traits, type, x, y) { 
        obj['orbitals'] = orbitals;
        obj['symbol'] = symbol;
        obj['systemSymbol'] = systemSymbol;
        obj['traits'] = traits;
        obj['type'] = type;
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>GetSystemWaypoints200ResponseDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetSystemWaypoints200ResponseDataInner} obj Optional instance to populate.
     * @return {module:model/GetSystemWaypoints200ResponseDataInner} The populated <code>GetSystemWaypoints200ResponseDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetSystemWaypoints200ResponseDataInner();

            if (data.hasOwnProperty('chart')) {
                obj['chart'] = GetSystemWaypoints200ResponseDataInnerChart.constructFromObject(data['chart']);
            }
            if (data.hasOwnProperty('faction')) {
                obj['faction'] = GetSystems200ResponseDataInnerFactionsInner.constructFromObject(data['faction']);
            }
            if (data.hasOwnProperty('orbitals')) {
                obj['orbitals'] = ApiClient.convertToType(data['orbitals'], [GetSystemWaypoints200ResponseDataInnerOrbitalsInner]);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('systemSymbol')) {
                obj['systemSymbol'] = ApiClient.convertToType(data['systemSymbol'], 'String');
            }
            if (data.hasOwnProperty('traits')) {
                obj['traits'] = ApiClient.convertToType(data['traits'], [GetSystemWaypoints200ResponseDataInnerTraitsInner]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Object.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetSystemWaypoints200ResponseDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetSystemWaypoints200ResponseDataInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetSystemWaypoints200ResponseDataInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `chart`
        if (data['chart']) { // data not null
          GetSystemWaypoints200ResponseDataInnerChart.validateJSON(data['chart']);
        }
        // validate the optional field `faction`
        if (data['faction']) { // data not null
          GetSystems200ResponseDataInnerFactionsInner.validateJSON(data['faction']);
        }
        if (data['orbitals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orbitals'])) {
                throw new Error("Expected the field `orbitals` to be an array in the JSON data but got " + data['orbitals']);
            }
            // validate the optional field `orbitals` (array)
            for (const item of data['orbitals']) {
                GetSystemWaypoints200ResponseDataInnerOrbitalsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['systemSymbol'] && !(typeof data['systemSymbol'] === 'string' || data['systemSymbol'] instanceof String)) {
            throw new Error("Expected the field `systemSymbol` to be a primitive type in the JSON string but got " + data['systemSymbol']);
        }
        if (data['traits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['traits'])) {
                throw new Error("Expected the field `traits` to be an array in the JSON data but got " + data['traits']);
            }
            // validate the optional field `traits` (array)
            for (const item of data['traits']) {
                GetSystemWaypoints200ResponseDataInnerTraitsInner.validateJSON(item);
            };
        }

        return true;
    }


}

GetSystemWaypoints200ResponseDataInner.RequiredProperties = ["orbitals", "symbol", "systemSymbol", "traits", "type", "x", "y"];

/**
 * @member {module:model/GetSystemWaypoints200ResponseDataInnerChart} chart
 */
GetSystemWaypoints200ResponseDataInner.prototype['chart'] = undefined;

/**
 * @member {module:model/GetSystems200ResponseDataInnerFactionsInner} faction
 */
GetSystemWaypoints200ResponseDataInner.prototype['faction'] = undefined;

/**
 * @member {Array.<module:model/GetSystemWaypoints200ResponseDataInnerOrbitalsInner>} orbitals
 */
GetSystemWaypoints200ResponseDataInner.prototype['orbitals'] = undefined;

/**
 * @member {String} symbol
 */
GetSystemWaypoints200ResponseDataInner.prototype['symbol'] = undefined;

/**
 * @member {String} systemSymbol
 */
GetSystemWaypoints200ResponseDataInner.prototype['systemSymbol'] = undefined;

/**
 * The traits of the waypoint.
 * @member {Array.<module:model/GetSystemWaypoints200ResponseDataInnerTraitsInner>} traits
 */
GetSystemWaypoints200ResponseDataInner.prototype['traits'] = undefined;

/**
 * @member {Object} type
 */
GetSystemWaypoints200ResponseDataInner.prototype['type'] = undefined;

/**
 * @member {Number} x
 */
GetSystemWaypoints200ResponseDataInner.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
GetSystemWaypoints200ResponseDataInner.prototype['y'] = undefined;






export default GetSystemWaypoints200ResponseDataInner;

