/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Register201ResponseDataContractTermsDeliverInner model module.
 * @module model/Register201ResponseDataContractTermsDeliverInner
 * @version 2.0.0
 */
class Register201ResponseDataContractTermsDeliverInner {
    /**
     * Constructs a new <code>Register201ResponseDataContractTermsDeliverInner</code>.
     * The details of a delivery contract. Includes the type of good, units needed, and the destination.
     * @alias module:model/Register201ResponseDataContractTermsDeliverInner
     * @param destinationSymbol {String} The destination where goods need to be delivered.
     * @param tradeSymbol {String} The symbol of the trade good to deliver.
     * @param unitsFulfilled {Number} The number of units fulfilled on this contract.
     * @param unitsRequired {Number} The number of units that need to be delivered on this contract.
     */
    constructor(destinationSymbol, tradeSymbol, unitsFulfilled, unitsRequired) { 
        
        Register201ResponseDataContractTermsDeliverInner.initialize(this, destinationSymbol, tradeSymbol, unitsFulfilled, unitsRequired);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destinationSymbol, tradeSymbol, unitsFulfilled, unitsRequired) { 
        obj['destinationSymbol'] = destinationSymbol;
        obj['tradeSymbol'] = tradeSymbol;
        obj['unitsFulfilled'] = unitsFulfilled;
        obj['unitsRequired'] = unitsRequired;
    }

    /**
     * Constructs a <code>Register201ResponseDataContractTermsDeliverInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataContractTermsDeliverInner} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataContractTermsDeliverInner} The populated <code>Register201ResponseDataContractTermsDeliverInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataContractTermsDeliverInner();

            if (data.hasOwnProperty('destinationSymbol')) {
                obj['destinationSymbol'] = ApiClient.convertToType(data['destinationSymbol'], 'String');
            }
            if (data.hasOwnProperty('tradeSymbol')) {
                obj['tradeSymbol'] = ApiClient.convertToType(data['tradeSymbol'], 'String');
            }
            if (data.hasOwnProperty('unitsFulfilled')) {
                obj['unitsFulfilled'] = ApiClient.convertToType(data['unitsFulfilled'], 'Number');
            }
            if (data.hasOwnProperty('unitsRequired')) {
                obj['unitsRequired'] = ApiClient.convertToType(data['unitsRequired'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataContractTermsDeliverInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataContractTermsDeliverInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataContractTermsDeliverInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['destinationSymbol'] && !(typeof data['destinationSymbol'] === 'string' || data['destinationSymbol'] instanceof String)) {
            throw new Error("Expected the field `destinationSymbol` to be a primitive type in the JSON string but got " + data['destinationSymbol']);
        }
        // ensure the json data is a string
        if (data['tradeSymbol'] && !(typeof data['tradeSymbol'] === 'string' || data['tradeSymbol'] instanceof String)) {
            throw new Error("Expected the field `tradeSymbol` to be a primitive type in the JSON string but got " + data['tradeSymbol']);
        }

        return true;
    }


}

Register201ResponseDataContractTermsDeliverInner.RequiredProperties = ["destinationSymbol", "tradeSymbol", "unitsFulfilled", "unitsRequired"];

/**
 * The destination where goods need to be delivered.
 * @member {String} destinationSymbol
 */
Register201ResponseDataContractTermsDeliverInner.prototype['destinationSymbol'] = undefined;

/**
 * The symbol of the trade good to deliver.
 * @member {String} tradeSymbol
 */
Register201ResponseDataContractTermsDeliverInner.prototype['tradeSymbol'] = undefined;

/**
 * The number of units fulfilled on this contract.
 * @member {Number} unitsFulfilled
 */
Register201ResponseDataContractTermsDeliverInner.prototype['unitsFulfilled'] = undefined;

/**
 * The number of units that need to be delivered on this contract.
 * @member {Number} unitsRequired
 */
Register201ResponseDataContractTermsDeliverInner.prototype['unitsRequired'] = undefined;






export default Register201ResponseDataContractTermsDeliverInner;

