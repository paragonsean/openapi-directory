/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Register201ResponseDataShipFuelConsumed from './Register201ResponseDataShipFuelConsumed';

/**
 * The Register201ResponseDataShipFuel model module.
 * @module model/Register201ResponseDataShipFuel
 * @version 2.0.0
 */
class Register201ResponseDataShipFuel {
    /**
     * Constructs a new <code>Register201ResponseDataShipFuel</code>.
     * Details of the ship&#39;s fuel tanks including how much fuel was consumed during the last transit or action.
     * @alias module:model/Register201ResponseDataShipFuel
     * @param capacity {Number} The maximum amount of fuel the ship's tanks can hold.
     * @param current {Number} The current amount of fuel in the ship's tanks.
     */
    constructor(capacity, current) { 
        
        Register201ResponseDataShipFuel.initialize(this, capacity, current);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, capacity, current) { 
        obj['capacity'] = capacity;
        obj['current'] = current;
    }

    /**
     * Constructs a <code>Register201ResponseDataShipFuel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Register201ResponseDataShipFuel} obj Optional instance to populate.
     * @return {module:model/Register201ResponseDataShipFuel} The populated <code>Register201ResponseDataShipFuel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Register201ResponseDataShipFuel();

            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('consumed')) {
                obj['consumed'] = Register201ResponseDataShipFuelConsumed.constructFromObject(data['consumed']);
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Register201ResponseDataShipFuel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Register201ResponseDataShipFuel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Register201ResponseDataShipFuel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `consumed`
        if (data['consumed']) { // data not null
          Register201ResponseDataShipFuelConsumed.validateJSON(data['consumed']);
        }

        return true;
    }


}

Register201ResponseDataShipFuel.RequiredProperties = ["capacity", "current"];

/**
 * The maximum amount of fuel the ship's tanks can hold.
 * @member {Number} capacity
 */
Register201ResponseDataShipFuel.prototype['capacity'] = undefined;

/**
 * @member {module:model/Register201ResponseDataShipFuelConsumed} consumed
 */
Register201ResponseDataShipFuel.prototype['consumed'] = undefined;

/**
 * The current amount of fuel in the ship's tanks.
 * @member {Number} current
 */
Register201ResponseDataShipFuel.prototype['current'] = undefined;






export default Register201ResponseDataShipFuel;

