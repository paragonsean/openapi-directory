/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShipRefine200ResponseDataConsumedInner from './ShipRefine200ResponseDataConsumedInner';
import ShipRefine200ResponseDataCooldown from './ShipRefine200ResponseDataCooldown';

/**
 * The ShipRefine200ResponseData model module.
 * @module model/ShipRefine200ResponseData
 * @version 2.0.0
 */
class ShipRefine200ResponseData {
    /**
     * Constructs a new <code>ShipRefine200ResponseData</code>.
     * @alias module:model/ShipRefine200ResponseData
     * @param cargo {Object} 
     * @param consumed {Array.<module:model/ShipRefine200ResponseDataConsumedInner>} 
     * @param cooldown {module:model/ShipRefine200ResponseDataCooldown} 
     * @param produced {Array.<module:model/ShipRefine200ResponseDataConsumedInner>} 
     */
    constructor(cargo, consumed, cooldown, produced) { 
        
        ShipRefine200ResponseData.initialize(this, cargo, consumed, cooldown, produced);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cargo, consumed, cooldown, produced) { 
        obj['cargo'] = cargo;
        obj['consumed'] = consumed;
        obj['cooldown'] = cooldown;
        obj['produced'] = produced;
    }

    /**
     * Constructs a <code>ShipRefine200ResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShipRefine200ResponseData} obj Optional instance to populate.
     * @return {module:model/ShipRefine200ResponseData} The populated <code>ShipRefine200ResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShipRefine200ResponseData();

            if (data.hasOwnProperty('cargo')) {
                obj['cargo'] = Object.constructFromObject(data['cargo']);
            }
            if (data.hasOwnProperty('consumed')) {
                obj['consumed'] = ApiClient.convertToType(data['consumed'], [ShipRefine200ResponseDataConsumedInner]);
            }
            if (data.hasOwnProperty('cooldown')) {
                obj['cooldown'] = ShipRefine200ResponseDataCooldown.constructFromObject(data['cooldown']);
            }
            if (data.hasOwnProperty('produced')) {
                obj['produced'] = ApiClient.convertToType(data['produced'], [ShipRefine200ResponseDataConsumedInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShipRefine200ResponseData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShipRefine200ResponseData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShipRefine200ResponseData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['consumed']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consumed'])) {
                throw new Error("Expected the field `consumed` to be an array in the JSON data but got " + data['consumed']);
            }
            // validate the optional field `consumed` (array)
            for (const item of data['consumed']) {
                ShipRefine200ResponseDataConsumedInner.validateJSON(item);
            };
        }
        // validate the optional field `cooldown`
        if (data['cooldown']) { // data not null
          ShipRefine200ResponseDataCooldown.validateJSON(data['cooldown']);
        }
        if (data['produced']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['produced'])) {
                throw new Error("Expected the field `produced` to be an array in the JSON data but got " + data['produced']);
            }
            // validate the optional field `produced` (array)
            for (const item of data['produced']) {
                ShipRefine200ResponseDataConsumedInner.validateJSON(item);
            };
        }

        return true;
    }


}

ShipRefine200ResponseData.RequiredProperties = ["cargo", "consumed", "cooldown", "produced"];

/**
 * @member {Object} cargo
 */
ShipRefine200ResponseData.prototype['cargo'] = undefined;

/**
 * @member {Array.<module:model/ShipRefine200ResponseDataConsumedInner>} consumed
 */
ShipRefine200ResponseData.prototype['consumed'] = undefined;

/**
 * @member {module:model/ShipRefine200ResponseDataCooldown} cooldown
 */
ShipRefine200ResponseData.prototype['cooldown'] = undefined;

/**
 * @member {Array.<module:model/ShipRefine200ResponseDataConsumedInner>} produced
 */
ShipRefine200ResponseData.prototype['produced'] = undefined;






export default ShipRefine200ResponseData;

