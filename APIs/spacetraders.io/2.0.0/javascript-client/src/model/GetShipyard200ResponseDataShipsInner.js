/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetShipyard200ResponseDataShipsInner model module.
 * @module model/GetShipyard200ResponseDataShipsInner
 * @version 2.0.0
 */
class GetShipyard200ResponseDataShipsInner {
    /**
     * Constructs a new <code>GetShipyard200ResponseDataShipsInner</code>.
     * 
     * @alias module:model/GetShipyard200ResponseDataShipsInner
     * @param description {String} 
     * @param engine {Object} 
     * @param frame {Object} 
     * @param modules {Array.<Object>} 
     * @param mounts {Array.<Object>} 
     * @param name {String} 
     * @param purchasePrice {Number} 
     * @param reactor {Object} 
     */
    constructor(description, engine, frame, modules, mounts, name, purchasePrice, reactor) { 
        
        GetShipyard200ResponseDataShipsInner.initialize(this, description, engine, frame, modules, mounts, name, purchasePrice, reactor);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, engine, frame, modules, mounts, name, purchasePrice, reactor) { 
        obj['description'] = description;
        obj['engine'] = engine;
        obj['frame'] = frame;
        obj['modules'] = modules;
        obj['mounts'] = mounts;
        obj['name'] = name;
        obj['purchasePrice'] = purchasePrice;
        obj['reactor'] = reactor;
    }

    /**
     * Constructs a <code>GetShipyard200ResponseDataShipsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetShipyard200ResponseDataShipsInner} obj Optional instance to populate.
     * @return {module:model/GetShipyard200ResponseDataShipsInner} The populated <code>GetShipyard200ResponseDataShipsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetShipyard200ResponseDataShipsInner();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = Object.constructFromObject(data['engine']);
            }
            if (data.hasOwnProperty('frame')) {
                obj['frame'] = Object.constructFromObject(data['frame']);
            }
            if (data.hasOwnProperty('modules')) {
                obj['modules'] = ApiClient.convertToType(data['modules'], [Object]);
            }
            if (data.hasOwnProperty('mounts')) {
                obj['mounts'] = ApiClient.convertToType(data['mounts'], [Object]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('purchasePrice')) {
                obj['purchasePrice'] = ApiClient.convertToType(data['purchasePrice'], 'Number');
            }
            if (data.hasOwnProperty('reactor')) {
                obj['reactor'] = Object.constructFromObject(data['reactor']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Object.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetShipyard200ResponseDataShipsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetShipyard200ResponseDataShipsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetShipyard200ResponseDataShipsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modules'])) {
            throw new Error("Expected the field `modules` to be an array in the JSON data but got " + data['modules']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mounts'])) {
            throw new Error("Expected the field `mounts` to be an array in the JSON data but got " + data['mounts']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

GetShipyard200ResponseDataShipsInner.RequiredProperties = ["description", "engine", "frame", "modules", "mounts", "name", "purchasePrice", "reactor"];

/**
 * @member {String} description
 */
GetShipyard200ResponseDataShipsInner.prototype['description'] = undefined;

/**
 * @member {Object} engine
 */
GetShipyard200ResponseDataShipsInner.prototype['engine'] = undefined;

/**
 * @member {Object} frame
 */
GetShipyard200ResponseDataShipsInner.prototype['frame'] = undefined;

/**
 * @member {Array.<Object>} modules
 */
GetShipyard200ResponseDataShipsInner.prototype['modules'] = undefined;

/**
 * @member {Array.<Object>} mounts
 */
GetShipyard200ResponseDataShipsInner.prototype['mounts'] = undefined;

/**
 * @member {String} name
 */
GetShipyard200ResponseDataShipsInner.prototype['name'] = undefined;

/**
 * @member {Number} purchasePrice
 */
GetShipyard200ResponseDataShipsInner.prototype['purchasePrice'] = undefined;

/**
 * @member {Object} reactor
 */
GetShipyard200ResponseDataShipsInner.prototype['reactor'] = undefined;

/**
 * @member {Object} type
 */
GetShipyard200ResponseDataShipsInner.prototype['type'] = undefined;






export default GetShipyard200ResponseDataShipsInner;

