/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreate_ship_ship_scan_201_response_data_ships_inner.h
 *
 * The ship that was scanned. Details include information about the ship that could be detected by the scanner.
 */

#ifndef OAICreate_ship_ship_scan_201_response_data_ships_inner_H
#define OAICreate_ship_ship_scan_201_response_data_ships_inner_H

#include <QJsonObject>

#include "OAICreate_ship_ship_scan_201_response_data_ships_inner_engine.h"
#include "OAICreate_ship_ship_scan_201_response_data_ships_inner_frame.h"
#include "OAICreate_ship_ship_scan_201_response_data_ships_inner_mounts_inner.h"
#include "OAICreate_ship_ship_scan_201_response_data_ships_inner_reactor.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreate_ship_ship_scan_201_response_data_ships_inner_engine;
class OAICreate_ship_ship_scan_201_response_data_ships_inner_frame;
class OAICreate_ship_ship_scan_201_response_data_ships_inner_mounts_inner;
class OAICreate_ship_ship_scan_201_response_data_ships_inner_reactor;

class OAICreate_ship_ship_scan_201_response_data_ships_inner : public OAIObject {
public:
    OAICreate_ship_ship_scan_201_response_data_ships_inner();
    OAICreate_ship_ship_scan_201_response_data_ships_inner(QString json);
    ~OAICreate_ship_ship_scan_201_response_data_ships_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreate_ship_ship_scan_201_response_data_ships_inner_engine getEngine() const;
    void setEngine(const OAICreate_ship_ship_scan_201_response_data_ships_inner_engine &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    OAICreate_ship_ship_scan_201_response_data_ships_inner_frame getFrame() const;
    void setFrame(const OAICreate_ship_ship_scan_201_response_data_ships_inner_frame &frame);
    bool is_frame_Set() const;
    bool is_frame_Valid() const;

    QList<OAICreate_ship_ship_scan_201_response_data_ships_inner_mounts_inner> getMounts() const;
    void setMounts(const QList<OAICreate_ship_ship_scan_201_response_data_ships_inner_mounts_inner> &mounts);
    bool is_mounts_Set() const;
    bool is_mounts_Valid() const;

    OAIObject getNav() const;
    void setNav(const OAIObject &nav);
    bool is_nav_Set() const;
    bool is_nav_Valid() const;

    OAICreate_ship_ship_scan_201_response_data_ships_inner_reactor getReactor() const;
    void setReactor(const OAICreate_ship_ship_scan_201_response_data_ships_inner_reactor &reactor);
    bool is_reactor_Set() const;
    bool is_reactor_Valid() const;

    OAIObject getRegistration() const;
    void setRegistration(const OAIObject &registration);
    bool is_registration_Set() const;
    bool is_registration_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreate_ship_ship_scan_201_response_data_ships_inner_engine m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    OAICreate_ship_ship_scan_201_response_data_ships_inner_frame m_frame;
    bool m_frame_isSet;
    bool m_frame_isValid;

    QList<OAICreate_ship_ship_scan_201_response_data_ships_inner_mounts_inner> m_mounts;
    bool m_mounts_isSet;
    bool m_mounts_isValid;

    OAIObject m_nav;
    bool m_nav_isSet;
    bool m_nav_isValid;

    OAICreate_ship_ship_scan_201_response_data_ships_inner_reactor m_reactor;
    bool m_reactor_isSet;
    bool m_reactor_isValid;

    OAIObject m_registration;
    bool m_registration_isSet;
    bool m_registration_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreate_ship_ship_scan_201_response_data_ships_inner)

#endif // OAICreate_ship_ship_scan_201_response_data_ships_inner_H
