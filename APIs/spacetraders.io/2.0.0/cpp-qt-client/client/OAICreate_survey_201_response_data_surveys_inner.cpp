/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_survey_201_response_data_surveys_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_survey_201_response_data_surveys_inner::OAICreate_survey_201_response_data_surveys_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_survey_201_response_data_surveys_inner::OAICreate_survey_201_response_data_surveys_inner() {
    this->initializeModel();
}

OAICreate_survey_201_response_data_surveys_inner::~OAICreate_survey_201_response_data_surveys_inner() {}

void OAICreate_survey_201_response_data_surveys_inner::initializeModel() {

    m_deposits_isSet = false;
    m_deposits_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAICreate_survey_201_response_data_surveys_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_survey_201_response_data_surveys_inner::fromJsonObject(QJsonObject json) {

    m_deposits_isValid = ::OpenAPI::fromJsonValue(m_deposits, json[QString("deposits")]);
    m_deposits_isSet = !json[QString("deposits")].isNull() && m_deposits_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAICreate_survey_201_response_data_surveys_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_survey_201_response_data_surveys_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_deposits.size() > 0) {
        obj.insert(QString("deposits"), ::OpenAPI::toJsonValue(m_deposits));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QList<OAICreate_survey_201_response_data_surveys_inner_deposits_inner> OAICreate_survey_201_response_data_surveys_inner::getDeposits() const {
    return m_deposits;
}
void OAICreate_survey_201_response_data_surveys_inner::setDeposits(const QList<OAICreate_survey_201_response_data_surveys_inner_deposits_inner> &deposits) {
    m_deposits = deposits;
    m_deposits_isSet = true;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_deposits_Set() const{
    return m_deposits_isSet;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_deposits_Valid() const{
    return m_deposits_isValid;
}

QDateTime OAICreate_survey_201_response_data_surveys_inner::getExpiration() const {
    return m_expiration;
}
void OAICreate_survey_201_response_data_surveys_inner::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAICreate_survey_201_response_data_surveys_inner::getSignature() const {
    return m_signature;
}
void OAICreate_survey_201_response_data_surveys_inner::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAICreate_survey_201_response_data_surveys_inner::getSize() const {
    return m_size;
}
void OAICreate_survey_201_response_data_surveys_inner::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAICreate_survey_201_response_data_surveys_inner::getSymbol() const {
    return m_symbol;
}
void OAICreate_survey_201_response_data_surveys_inner::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAICreate_survey_201_response_data_surveys_inner::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAICreate_survey_201_response_data_surveys_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deposits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_survey_201_response_data_surveys_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deposits_isValid && m_expiration_isValid && m_signature_isValid && m_size_isValid && m_symbol_isValid && true;
}

} // namespace OpenAPI
