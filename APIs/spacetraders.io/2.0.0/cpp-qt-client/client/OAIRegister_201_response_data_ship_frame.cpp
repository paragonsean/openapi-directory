/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship_frame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship_frame::OAIRegister_201_response_data_ship_frame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship_frame::OAIRegister_201_response_data_ship_frame() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship_frame::~OAIRegister_201_response_data_ship_frame() {}

void OAIRegister_201_response_data_ship_frame::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fuel_capacity_isSet = false;
    m_fuel_capacity_isValid = false;

    m_module_slots_isSet = false;
    m_module_slots_isValid = false;

    m_mounting_points_isSet = false;
    m_mounting_points_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIRegister_201_response_data_ship_frame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship_frame::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fuel_capacity_isValid = ::OpenAPI::fromJsonValue(m_fuel_capacity, json[QString("fuelCapacity")]);
    m_fuel_capacity_isSet = !json[QString("fuelCapacity")].isNull() && m_fuel_capacity_isValid;

    m_module_slots_isValid = ::OpenAPI::fromJsonValue(m_module_slots, json[QString("moduleSlots")]);
    m_module_slots_isSet = !json[QString("moduleSlots")].isNull() && m_module_slots_isValid;

    m_mounting_points_isValid = ::OpenAPI::fromJsonValue(m_mounting_points, json[QString("mountingPoints")]);
    m_mounting_points_isSet = !json[QString("mountingPoints")].isNull() && m_mounting_points_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIRegister_201_response_data_ship_frame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship_frame::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fuel_capacity_isSet) {
        obj.insert(QString("fuelCapacity"), ::OpenAPI::toJsonValue(m_fuel_capacity));
    }
    if (m_module_slots_isSet) {
        obj.insert(QString("moduleSlots"), ::OpenAPI::toJsonValue(m_module_slots));
    }
    if (m_mounting_points_isSet) {
        obj.insert(QString("mountingPoints"), ::OpenAPI::toJsonValue(m_mounting_points));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requirements.isSet()) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

qint32 OAIRegister_201_response_data_ship_frame::getCondition() const {
    return m_condition;
}
void OAIRegister_201_response_data_ship_frame::setCondition(const qint32 &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIRegister_201_response_data_ship_frame::getDescription() const {
    return m_description;
}
void OAIRegister_201_response_data_ship_frame::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIRegister_201_response_data_ship_frame::getFuelCapacity() const {
    return m_fuel_capacity;
}
void OAIRegister_201_response_data_ship_frame::setFuelCapacity(const qint32 &fuel_capacity) {
    m_fuel_capacity = fuel_capacity;
    m_fuel_capacity_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_fuel_capacity_Set() const{
    return m_fuel_capacity_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_fuel_capacity_Valid() const{
    return m_fuel_capacity_isValid;
}

qint32 OAIRegister_201_response_data_ship_frame::getModuleSlots() const {
    return m_module_slots;
}
void OAIRegister_201_response_data_ship_frame::setModuleSlots(const qint32 &module_slots) {
    m_module_slots = module_slots;
    m_module_slots_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_module_slots_Set() const{
    return m_module_slots_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_module_slots_Valid() const{
    return m_module_slots_isValid;
}

qint32 OAIRegister_201_response_data_ship_frame::getMountingPoints() const {
    return m_mounting_points;
}
void OAIRegister_201_response_data_ship_frame::setMountingPoints(const qint32 &mounting_points) {
    m_mounting_points = mounting_points;
    m_mounting_points_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_mounting_points_Set() const{
    return m_mounting_points_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_mounting_points_Valid() const{
    return m_mounting_points_isValid;
}

QString OAIRegister_201_response_data_ship_frame::getName() const {
    return m_name;
}
void OAIRegister_201_response_data_ship_frame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_name_Valid() const{
    return m_name_isValid;
}

OAIRegister_201_response_data_ship_frame_requirements OAIRegister_201_response_data_ship_frame::getRequirements() const {
    return m_requirements;
}
void OAIRegister_201_response_data_ship_frame::setRequirements(const OAIRegister_201_response_data_ship_frame_requirements &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_requirements_Valid() const{
    return m_requirements_isValid;
}

QString OAIRegister_201_response_data_ship_frame::getSymbol() const {
    return m_symbol;
}
void OAIRegister_201_response_data_ship_frame::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIRegister_201_response_data_ship_frame::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIRegister_201_response_data_ship_frame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounting_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship_frame::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_fuel_capacity_isValid && m_module_slots_isValid && m_mounting_points_isValid && m_name_isValid && m_requirements_isValid && m_symbol_isValid && true;
}

} // namespace OpenAPI
