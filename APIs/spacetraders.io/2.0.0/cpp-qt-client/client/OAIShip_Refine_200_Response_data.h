/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShip_Refine_200_Response_data.h
 *
 * 
 */

#ifndef OAIShip_Refine_200_Response_data_H
#define OAIShip_Refine_200_Response_data_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIShip_Refine_200_Response_data_consumed_inner.h"
#include "OAIShip_Refine_200_Response_data_cooldown.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIShip_Refine_200_Response_data_consumed_inner;
class OAIShip_Refine_200_Response_data_cooldown;

class OAIShip_Refine_200_Response_data : public OAIObject {
public:
    OAIShip_Refine_200_Response_data();
    OAIShip_Refine_200_Response_data(QString json);
    ~OAIShip_Refine_200_Response_data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getCargo() const;
    void setCargo(const OAIObject &cargo);
    bool is_cargo_Set() const;
    bool is_cargo_Valid() const;

    QList<OAIShip_Refine_200_Response_data_consumed_inner> getConsumed() const;
    void setConsumed(const QList<OAIShip_Refine_200_Response_data_consumed_inner> &consumed);
    bool is_consumed_Set() const;
    bool is_consumed_Valid() const;

    OAIShip_Refine_200_Response_data_cooldown getCooldown() const;
    void setCooldown(const OAIShip_Refine_200_Response_data_cooldown &cooldown);
    bool is_cooldown_Set() const;
    bool is_cooldown_Valid() const;

    QList<OAIShip_Refine_200_Response_data_consumed_inner> getProduced() const;
    void setProduced(const QList<OAIShip_Refine_200_Response_data_consumed_inner> &produced);
    bool is_produced_Set() const;
    bool is_produced_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_cargo;
    bool m_cargo_isSet;
    bool m_cargo_isValid;

    QList<OAIShip_Refine_200_Response_data_consumed_inner> m_consumed;
    bool m_consumed_isSet;
    bool m_consumed_isValid;

    OAIShip_Refine_200_Response_data_cooldown m_cooldown;
    bool m_cooldown_isSet;
    bool m_cooldown_isValid;

    QList<OAIShip_Refine_200_Response_data_consumed_inner> m_produced;
    bool m_produced_isSet;
    bool m_produced_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShip_Refine_200_Response_data)

#endif // OAIShip_Refine_200_Response_data_H
