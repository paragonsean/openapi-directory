/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_shipyard_200_response_data_ships_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_shipyard_200_response_data_ships_inner::OAIGet_shipyard_200_response_data_ships_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_shipyard_200_response_data_ships_inner::OAIGet_shipyard_200_response_data_ships_inner() {
    this->initializeModel();
}

OAIGet_shipyard_200_response_data_ships_inner::~OAIGet_shipyard_200_response_data_ships_inner() {}

void OAIGet_shipyard_200_response_data_ships_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_frame_isSet = false;
    m_frame_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_mounts_isSet = false;
    m_mounts_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_purchase_price_isSet = false;
    m_purchase_price_isValid = false;

    m_reactor_isSet = false;
    m_reactor_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGet_shipyard_200_response_data_ships_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_shipyard_200_response_data_ships_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_frame_isValid = ::OpenAPI::fromJsonValue(m_frame, json[QString("frame")]);
    m_frame_isSet = !json[QString("frame")].isNull() && m_frame_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_mounts_isValid = ::OpenAPI::fromJsonValue(m_mounts, json[QString("mounts")]);
    m_mounts_isSet = !json[QString("mounts")].isNull() && m_mounts_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_purchase_price_isValid = ::OpenAPI::fromJsonValue(m_purchase_price, json[QString("purchasePrice")]);
    m_purchase_price_isSet = !json[QString("purchasePrice")].isNull() && m_purchase_price_isValid;

    m_reactor_isValid = ::OpenAPI::fromJsonValue(m_reactor, json[QString("reactor")]);
    m_reactor_isSet = !json[QString("reactor")].isNull() && m_reactor_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGet_shipyard_200_response_data_ships_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_shipyard_200_response_data_ships_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine.isSet()) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_frame.isSet()) {
        obj.insert(QString("frame"), ::OpenAPI::toJsonValue(m_frame));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_mounts.size() > 0) {
        obj.insert(QString("mounts"), ::OpenAPI::toJsonValue(m_mounts));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_purchase_price_isSet) {
        obj.insert(QString("purchasePrice"), ::OpenAPI::toJsonValue(m_purchase_price));
    }
    if (m_reactor.isSet()) {
        obj.insert(QString("reactor"), ::OpenAPI::toJsonValue(m_reactor));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGet_shipyard_200_response_data_ships_inner::getDescription() const {
    return m_description;
}
void OAIGet_shipyard_200_response_data_ships_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIGet_shipyard_200_response_data_ships_inner::getEngine() const {
    return m_engine;
}
void OAIGet_shipyard_200_response_data_ships_inner::setEngine(const OAIObject &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

OAIObject OAIGet_shipyard_200_response_data_ships_inner::getFrame() const {
    return m_frame;
}
void OAIGet_shipyard_200_response_data_ships_inner::setFrame(const OAIObject &frame) {
    m_frame = frame;
    m_frame_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_frame_Set() const{
    return m_frame_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_frame_Valid() const{
    return m_frame_isValid;
}

QList<OAIObject> OAIGet_shipyard_200_response_data_ships_inner::getModules() const {
    return m_modules;
}
void OAIGet_shipyard_200_response_data_ships_inner::setModules(const QList<OAIObject> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_modules_Valid() const{
    return m_modules_isValid;
}

QList<OAIObject> OAIGet_shipyard_200_response_data_ships_inner::getMounts() const {
    return m_mounts;
}
void OAIGet_shipyard_200_response_data_ships_inner::setMounts(const QList<OAIObject> &mounts) {
    m_mounts = mounts;
    m_mounts_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_mounts_Set() const{
    return m_mounts_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_mounts_Valid() const{
    return m_mounts_isValid;
}

QString OAIGet_shipyard_200_response_data_ships_inner::getName() const {
    return m_name;
}
void OAIGet_shipyard_200_response_data_ships_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGet_shipyard_200_response_data_ships_inner::getPurchasePrice() const {
    return m_purchase_price;
}
void OAIGet_shipyard_200_response_data_ships_inner::setPurchasePrice(const qint32 &purchase_price) {
    m_purchase_price = purchase_price;
    m_purchase_price_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_purchase_price_Set() const{
    return m_purchase_price_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_purchase_price_Valid() const{
    return m_purchase_price_isValid;
}

OAIObject OAIGet_shipyard_200_response_data_ships_inner::getReactor() const {
    return m_reactor;
}
void OAIGet_shipyard_200_response_data_ships_inner::setReactor(const OAIObject &reactor) {
    m_reactor = reactor;
    m_reactor_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_reactor_Set() const{
    return m_reactor_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_reactor_Valid() const{
    return m_reactor_isValid;
}

OAIObject OAIGet_shipyard_200_response_data_ships_inner::getType() const {
    return m_type;
}
void OAIGet_shipyard_200_response_data_ships_inner::setType(const OAIObject &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGet_shipyard_200_response_data_ships_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGet_shipyard_200_response_data_ships_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_shipyard_200_response_data_ships_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_engine_isValid && m_frame_isValid && m_modules_isValid && m_mounts_isValid && m_name_isValid && m_purchase_price_isValid && m_reactor_isValid && true;
}

} // namespace OpenAPI
