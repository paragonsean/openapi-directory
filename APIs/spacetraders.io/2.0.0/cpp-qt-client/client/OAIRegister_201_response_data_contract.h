/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegister_201_response_data_contract.h
 *
 * 
 */

#ifndef OAIRegister_201_response_data_contract_H
#define OAIRegister_201_response_data_contract_H

#include <QJsonObject>

#include "OAIRegister_201_response_data_contract_terms.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRegister_201_response_data_contract_terms;

class OAIRegister_201_response_data_contract : public OAIObject {
public:
    OAIRegister_201_response_data_contract();
    OAIRegister_201_response_data_contract(QString json);
    ~OAIRegister_201_response_data_contract() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAccepted() const;
    void setAccepted(const bool &accepted);
    bool is_accepted_Set() const;
    bool is_accepted_Valid() const;

    QDateTime getExpiration() const;
    void setExpiration(const QDateTime &expiration);
    bool is_expiration_Set() const;
    bool is_expiration_Valid() const;

    QString getFactionSymbol() const;
    void setFactionSymbol(const QString &faction_symbol);
    bool is_faction_symbol_Set() const;
    bool is_faction_symbol_Valid() const;

    bool isFulfilled() const;
    void setFulfilled(const bool &fulfilled);
    bool is_fulfilled_Set() const;
    bool is_fulfilled_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIRegister_201_response_data_contract_terms getTerms() const;
    void setTerms(const OAIRegister_201_response_data_contract_terms &terms);
    bool is_terms_Set() const;
    bool is_terms_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_accepted;
    bool m_accepted_isSet;
    bool m_accepted_isValid;

    QDateTime m_expiration;
    bool m_expiration_isSet;
    bool m_expiration_isValid;

    QString m_faction_symbol;
    bool m_faction_symbol_isSet;
    bool m_faction_symbol_isValid;

    bool m_fulfilled;
    bool m_fulfilled_isSet;
    bool m_fulfilled_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIRegister_201_response_data_contract_terms m_terms;
    bool m_terms_isSet;
    bool m_terms_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegister_201_response_data_contract)

#endif // OAIRegister_201_response_data_contract_H
