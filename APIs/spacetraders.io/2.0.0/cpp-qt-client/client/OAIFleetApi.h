/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFleetApi_H
#define OAI_OAIFleetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_chart_201_response.h"
#include "OAICreate_ship_ship_scan_201_response.h"
#include "OAICreate_ship_system_scan_201_response.h"
#include "OAICreate_ship_waypoint_scan_201_response.h"
#include "OAICreate_survey_201_response.h"
#include "OAIDock_Ship_200_Response.h"
#include "OAIExtract_resources_201_response.h"
#include "OAIExtract_resources_request.h"
#include "OAIGet_my_ship_200_response.h"
#include "OAIGet_my_ship_cargo_200_response.h"
#include "OAIGet_my_ships_200_response.h"
#include "OAIGet_ship_cooldown_200_response.h"
#include "OAIGet_ship_nav_200_response.h"
#include "OAIJettison_200_response.h"
#include "OAIJettison_request.h"
#include "OAIJump_ship_200_response.h"
#include "OAIJump_ship_request.h"
#include "OAINavigate_ship_200_response.h"
#include "OAINavigate_ship_request.h"
#include "OAIOrbit_Ship_200_Response.h"
#include "OAIPatch_ship_nav_request.h"
#include "OAIPurchase_Cargo_201_Response.h"
#include "OAIPurchase_Cargo_Request.h"
#include "OAIPurchase_ship_201_response.h"
#include "OAIPurchase_ship_request.h"
#include "OAIRefuel_ship_200_response.h"
#include "OAISellCargoRequest.h"
#include "OAISell_Cargo_201_Response.h"
#include "OAIShip_Refine_200_Response.h"
#include "OAIShip_refine_request.h"
#include "OAITransfer_Cargo_200_Response.h"
#include "OAITransfer_Cargo_Request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFleetApi : public QObject {
    Q_OBJECT

public:
    OAIFleetApi(const int timeOut = 0);
    ~OAIFleetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void createChart(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void createShipShipScan(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void createShipSystemScan(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void createShipWaypointScan(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void createSurvey(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void dockShip(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_extract_resources_request OAIExtract_resources_request [optional]
    */
    virtual void extractResources(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAIExtract_resources_request> &oai_extract_resources_request = ::OpenAPI::OptionalParam<OAIExtract_resources_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void getMyShip(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void getMyShipCargo(const QString &ship_symbol);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMyShips(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void getShipCooldown(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void getShipNav(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_jettison_request OAIJettison_request [optional]
    */
    virtual void jettison(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAIJettison_request> &oai_jettison_request = ::OpenAPI::OptionalParam<OAIJettison_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_jump_ship_request OAIJump_ship_request [optional]
    */
    virtual void jumpShip(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAIJump_ship_request> &oai_jump_ship_request = ::OpenAPI::OptionalParam<OAIJump_ship_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_navigate_ship_request OAINavigate_ship_request [optional]
    */
    virtual void navigateShip(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAINavigate_ship_request> &oai_navigate_ship_request = ::OpenAPI::OptionalParam<OAINavigate_ship_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void orbitShip(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_patch_ship_nav_request OAIPatch_ship_nav_request [optional]
    */
    virtual void patchShipNav(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAIPatch_ship_nav_request> &oai_patch_ship_nav_request = ::OpenAPI::OptionalParam<OAIPatch_ship_nav_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_purchase_cargo_request OAIPurchase_Cargo_Request [optional]
    */
    virtual void purchaseCargo(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAIPurchase_Cargo_Request> &oai_purchase_cargo_request = ::OpenAPI::OptionalParam<OAIPurchase_Cargo_Request>());

    /**
    * @param[in]  oai_purchase_ship_request OAIPurchase_ship_request [optional]
    */
    virtual void purchaseShip(const ::OpenAPI::OptionalParam<OAIPurchase_ship_request> &oai_purchase_ship_request = ::OpenAPI::OptionalParam<OAIPurchase_ship_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    */
    virtual void refuelShip(const QString &ship_symbol);

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_sell_cargo_request OAISellCargoRequest [optional]
    */
    virtual void sellCargo(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAISellCargoRequest> &oai_sell_cargo_request = ::OpenAPI::OptionalParam<OAISellCargoRequest>());

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_ship_refine_request OAIShip_refine_request [optional]
    */
    virtual void shipRefine(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAIShip_refine_request> &oai_ship_refine_request = ::OpenAPI::OptionalParam<OAIShip_refine_request>());

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_transfer_cargo_request OAITransfer_Cargo_Request [optional]
    */
    virtual void transferCargo(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAITransfer_Cargo_Request> &oai_transfer_cargo_request = ::OpenAPI::OptionalParam<OAITransfer_Cargo_Request>());

    /**
    * @param[in]  ship_symbol QString [required]
    * @param[in]  oai_navigate_ship_request OAINavigate_ship_request [optional]
    */
    virtual void warpShip(const QString &ship_symbol, const ::OpenAPI::OptionalParam<OAINavigate_ship_request> &oai_navigate_ship_request = ::OpenAPI::OptionalParam<OAINavigate_ship_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createChartCallback(OAIHttpRequestWorker *worker);
    void createShipShipScanCallback(OAIHttpRequestWorker *worker);
    void createShipSystemScanCallback(OAIHttpRequestWorker *worker);
    void createShipWaypointScanCallback(OAIHttpRequestWorker *worker);
    void createSurveyCallback(OAIHttpRequestWorker *worker);
    void dockShipCallback(OAIHttpRequestWorker *worker);
    void extractResourcesCallback(OAIHttpRequestWorker *worker);
    void getMyShipCallback(OAIHttpRequestWorker *worker);
    void getMyShipCargoCallback(OAIHttpRequestWorker *worker);
    void getMyShipsCallback(OAIHttpRequestWorker *worker);
    void getShipCooldownCallback(OAIHttpRequestWorker *worker);
    void getShipNavCallback(OAIHttpRequestWorker *worker);
    void jettisonCallback(OAIHttpRequestWorker *worker);
    void jumpShipCallback(OAIHttpRequestWorker *worker);
    void navigateShipCallback(OAIHttpRequestWorker *worker);
    void orbitShipCallback(OAIHttpRequestWorker *worker);
    void patchShipNavCallback(OAIHttpRequestWorker *worker);
    void purchaseCargoCallback(OAIHttpRequestWorker *worker);
    void purchaseShipCallback(OAIHttpRequestWorker *worker);
    void refuelShipCallback(OAIHttpRequestWorker *worker);
    void sellCargoCallback(OAIHttpRequestWorker *worker);
    void shipRefineCallback(OAIHttpRequestWorker *worker);
    void transferCargoCallback(OAIHttpRequestWorker *worker);
    void warpShipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createChartSignal(OAICreate_chart_201_response summary);
    void createShipShipScanSignal(OAICreate_ship_ship_scan_201_response summary);
    void createShipSystemScanSignal(OAICreate_ship_system_scan_201_response summary);
    void createShipWaypointScanSignal(OAICreate_ship_waypoint_scan_201_response summary);
    void createSurveySignal(OAICreate_survey_201_response summary);
    void dockShipSignal(OAIDock_Ship_200_Response summary);
    void extractResourcesSignal(OAIExtract_resources_201_response summary);
    void getMyShipSignal(OAIGet_my_ship_200_response summary);
    void getMyShipCargoSignal(OAIGet_my_ship_cargo_200_response summary);
    void getMyShipsSignal(OAIGet_my_ships_200_response summary);
    void getShipCooldownSignal(OAIGet_ship_cooldown_200_response summary);
    void getShipNavSignal(OAIGet_ship_nav_200_response summary);
    void jettisonSignal(OAIJettison_200_response summary);
    void jumpShipSignal(OAIJump_ship_200_response summary);
    void navigateShipSignal(OAINavigate_ship_200_response summary);
    void orbitShipSignal(OAIOrbit_Ship_200_Response summary);
    void patchShipNavSignal(OAIGet_ship_nav_200_response summary);
    void purchaseCargoSignal(OAIPurchase_Cargo_201_Response summary);
    void purchaseShipSignal(OAIPurchase_ship_201_response summary);
    void refuelShipSignal(OAIRefuel_ship_200_response summary);
    void sellCargoSignal(OAISell_Cargo_201_Response summary);
    void shipRefineSignal(OAIShip_Refine_200_Response summary);
    void transferCargoSignal(OAITransfer_Cargo_200_Response summary);
    void warpShipSignal(OAINavigate_ship_200_response summary);


    void createChartSignalFull(OAIHttpRequestWorker *worker, OAICreate_chart_201_response summary);
    void createShipShipScanSignalFull(OAIHttpRequestWorker *worker, OAICreate_ship_ship_scan_201_response summary);
    void createShipSystemScanSignalFull(OAIHttpRequestWorker *worker, OAICreate_ship_system_scan_201_response summary);
    void createShipWaypointScanSignalFull(OAIHttpRequestWorker *worker, OAICreate_ship_waypoint_scan_201_response summary);
    void createSurveySignalFull(OAIHttpRequestWorker *worker, OAICreate_survey_201_response summary);
    void dockShipSignalFull(OAIHttpRequestWorker *worker, OAIDock_Ship_200_Response summary);
    void extractResourcesSignalFull(OAIHttpRequestWorker *worker, OAIExtract_resources_201_response summary);
    void getMyShipSignalFull(OAIHttpRequestWorker *worker, OAIGet_my_ship_200_response summary);
    void getMyShipCargoSignalFull(OAIHttpRequestWorker *worker, OAIGet_my_ship_cargo_200_response summary);
    void getMyShipsSignalFull(OAIHttpRequestWorker *worker, OAIGet_my_ships_200_response summary);
    void getShipCooldownSignalFull(OAIHttpRequestWorker *worker, OAIGet_ship_cooldown_200_response summary);
    void getShipNavSignalFull(OAIHttpRequestWorker *worker, OAIGet_ship_nav_200_response summary);
    void jettisonSignalFull(OAIHttpRequestWorker *worker, OAIJettison_200_response summary);
    void jumpShipSignalFull(OAIHttpRequestWorker *worker, OAIJump_ship_200_response summary);
    void navigateShipSignalFull(OAIHttpRequestWorker *worker, OAINavigate_ship_200_response summary);
    void orbitShipSignalFull(OAIHttpRequestWorker *worker, OAIOrbit_Ship_200_Response summary);
    void patchShipNavSignalFull(OAIHttpRequestWorker *worker, OAIGet_ship_nav_200_response summary);
    void purchaseCargoSignalFull(OAIHttpRequestWorker *worker, OAIPurchase_Cargo_201_Response summary);
    void purchaseShipSignalFull(OAIHttpRequestWorker *worker, OAIPurchase_ship_201_response summary);
    void refuelShipSignalFull(OAIHttpRequestWorker *worker, OAIRefuel_ship_200_response summary);
    void sellCargoSignalFull(OAIHttpRequestWorker *worker, OAISell_Cargo_201_Response summary);
    void shipRefineSignalFull(OAIHttpRequestWorker *worker, OAIShip_Refine_200_Response summary);
    void transferCargoSignalFull(OAIHttpRequestWorker *worker, OAITransfer_Cargo_200_Response summary);
    void warpShipSignalFull(OAIHttpRequestWorker *worker, OAINavigate_ship_200_response summary);

    Q_DECL_DEPRECATED_X("Use createChartSignalError() instead")
    void createChartSignalE(OAICreate_chart_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChartSignalError(OAICreate_chart_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipShipScanSignalError() instead")
    void createShipShipScanSignalE(OAICreate_ship_ship_scan_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipShipScanSignalError(OAICreate_ship_ship_scan_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipSystemScanSignalError() instead")
    void createShipSystemScanSignalE(OAICreate_ship_system_scan_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipSystemScanSignalError(OAICreate_ship_system_scan_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipWaypointScanSignalError() instead")
    void createShipWaypointScanSignalE(OAICreate_ship_waypoint_scan_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipWaypointScanSignalError(OAICreate_ship_waypoint_scan_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSurveySignalError() instead")
    void createSurveySignalE(OAICreate_survey_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSurveySignalError(OAICreate_survey_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dockShipSignalError() instead")
    void dockShipSignalE(OAIDock_Ship_200_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dockShipSignalError(OAIDock_Ship_200_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractResourcesSignalError() instead")
    void extractResourcesSignalE(OAIExtract_resources_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractResourcesSignalError(OAIExtract_resources_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyShipSignalError() instead")
    void getMyShipSignalE(OAIGet_my_ship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyShipSignalError(OAIGet_my_ship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyShipCargoSignalError() instead")
    void getMyShipCargoSignalE(OAIGet_my_ship_cargo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyShipCargoSignalError(OAIGet_my_ship_cargo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyShipsSignalError() instead")
    void getMyShipsSignalE(OAIGet_my_ships_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyShipsSignalError(OAIGet_my_ships_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipCooldownSignalError() instead")
    void getShipCooldownSignalE(OAIGet_ship_cooldown_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipCooldownSignalError(OAIGet_ship_cooldown_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipNavSignalError() instead")
    void getShipNavSignalE(OAIGet_ship_nav_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipNavSignalError(OAIGet_ship_nav_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jettisonSignalError() instead")
    void jettisonSignalE(OAIJettison_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jettisonSignalError(OAIJettison_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jumpShipSignalError() instead")
    void jumpShipSignalE(OAIJump_ship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jumpShipSignalError(OAIJump_ship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use navigateShipSignalError() instead")
    void navigateShipSignalE(OAINavigate_ship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void navigateShipSignalError(OAINavigate_ship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orbitShipSignalError() instead")
    void orbitShipSignalE(OAIOrbit_Ship_200_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orbitShipSignalError(OAIOrbit_Ship_200_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchShipNavSignalError() instead")
    void patchShipNavSignalE(OAIGet_ship_nav_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchShipNavSignalError(OAIGet_ship_nav_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseCargoSignalError() instead")
    void purchaseCargoSignalE(OAIPurchase_Cargo_201_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseCargoSignalError(OAIPurchase_Cargo_201_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseShipSignalError() instead")
    void purchaseShipSignalE(OAIPurchase_ship_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseShipSignalError(OAIPurchase_ship_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refuelShipSignalError() instead")
    void refuelShipSignalE(OAIRefuel_ship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refuelShipSignalError(OAIRefuel_ship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sellCargoSignalError() instead")
    void sellCargoSignalE(OAISell_Cargo_201_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sellCargoSignalError(OAISell_Cargo_201_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipRefineSignalError() instead")
    void shipRefineSignalE(OAIShip_Refine_200_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipRefineSignalError(OAIShip_Refine_200_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCargoSignalError() instead")
    void transferCargoSignalE(OAITransfer_Cargo_200_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCargoSignalError(OAITransfer_Cargo_200_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warpShipSignalError() instead")
    void warpShipSignalE(OAINavigate_ship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void warpShipSignalError(OAINavigate_ship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createChartSignalErrorFull() instead")
    void createChartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipShipScanSignalErrorFull() instead")
    void createShipShipScanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipShipScanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipSystemScanSignalErrorFull() instead")
    void createShipSystemScanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipSystemScanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipWaypointScanSignalErrorFull() instead")
    void createShipWaypointScanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipWaypointScanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSurveySignalErrorFull() instead")
    void createSurveySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSurveySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dockShipSignalErrorFull() instead")
    void dockShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dockShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractResourcesSignalErrorFull() instead")
    void extractResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyShipSignalErrorFull() instead")
    void getMyShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyShipCargoSignalErrorFull() instead")
    void getMyShipCargoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyShipCargoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMyShipsSignalErrorFull() instead")
    void getMyShipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMyShipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipCooldownSignalErrorFull() instead")
    void getShipCooldownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipCooldownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipNavSignalErrorFull() instead")
    void getShipNavSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipNavSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jettisonSignalErrorFull() instead")
    void jettisonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jettisonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jumpShipSignalErrorFull() instead")
    void jumpShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jumpShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use navigateShipSignalErrorFull() instead")
    void navigateShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void navigateShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orbitShipSignalErrorFull() instead")
    void orbitShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orbitShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchShipNavSignalErrorFull() instead")
    void patchShipNavSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchShipNavSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseCargoSignalErrorFull() instead")
    void purchaseCargoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseCargoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseShipSignalErrorFull() instead")
    void purchaseShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refuelShipSignalErrorFull() instead")
    void refuelShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refuelShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sellCargoSignalErrorFull() instead")
    void sellCargoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sellCargoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipRefineSignalErrorFull() instead")
    void shipRefineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipRefineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCargoSignalErrorFull() instead")
    void transferCargoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCargoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warpShipSignalErrorFull() instead")
    void warpShipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warpShipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
