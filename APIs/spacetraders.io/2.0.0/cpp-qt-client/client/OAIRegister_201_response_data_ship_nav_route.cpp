/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship_nav_route.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship_nav_route::OAIRegister_201_response_data_ship_nav_route(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship_nav_route::OAIRegister_201_response_data_ship_nav_route() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship_nav_route::~OAIRegister_201_response_data_ship_nav_route() {}

void OAIRegister_201_response_data_ship_nav_route::initializeModel() {

    m_arrival_isSet = false;
    m_arrival_isValid = false;

    m_departure_isSet = false;
    m_departure_isValid = false;

    m_departure_time_isSet = false;
    m_departure_time_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;
}

void OAIRegister_201_response_data_ship_nav_route::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship_nav_route::fromJsonObject(QJsonObject json) {

    m_arrival_isValid = ::OpenAPI::fromJsonValue(m_arrival, json[QString("arrival")]);
    m_arrival_isSet = !json[QString("arrival")].isNull() && m_arrival_isValid;

    m_departure_isValid = ::OpenAPI::fromJsonValue(m_departure, json[QString("departure")]);
    m_departure_isSet = !json[QString("departure")].isNull() && m_departure_isValid;

    m_departure_time_isValid = ::OpenAPI::fromJsonValue(m_departure_time, json[QString("departureTime")]);
    m_departure_time_isSet = !json[QString("departureTime")].isNull() && m_departure_time_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;
}

QString OAIRegister_201_response_data_ship_nav_route::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship_nav_route::asJsonObject() const {
    QJsonObject obj;
    if (m_arrival_isSet) {
        obj.insert(QString("arrival"), ::OpenAPI::toJsonValue(m_arrival));
    }
    if (m_departure.isSet()) {
        obj.insert(QString("departure"), ::OpenAPI::toJsonValue(m_departure));
    }
    if (m_departure_time_isSet) {
        obj.insert(QString("departureTime"), ::OpenAPI::toJsonValue(m_departure_time));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    return obj;
}

QDateTime OAIRegister_201_response_data_ship_nav_route::getArrival() const {
    return m_arrival;
}
void OAIRegister_201_response_data_ship_nav_route::setArrival(const QDateTime &arrival) {
    m_arrival = arrival;
    m_arrival_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route::is_arrival_Set() const{
    return m_arrival_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route::is_arrival_Valid() const{
    return m_arrival_isValid;
}

OAIObject OAIRegister_201_response_data_ship_nav_route::getDeparture() const {
    return m_departure;
}
void OAIRegister_201_response_data_ship_nav_route::setDeparture(const OAIObject &departure) {
    m_departure = departure;
    m_departure_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route::is_departure_Set() const{
    return m_departure_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route::is_departure_Valid() const{
    return m_departure_isValid;
}

QDateTime OAIRegister_201_response_data_ship_nav_route::getDepartureTime() const {
    return m_departure_time;
}
void OAIRegister_201_response_data_ship_nav_route::setDepartureTime(const QDateTime &departure_time) {
    m_departure_time = departure_time;
    m_departure_time_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route::is_departure_time_Set() const{
    return m_departure_time_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route::is_departure_time_Valid() const{
    return m_departure_time_isValid;
}

OAIRegister_201_response_data_ship_nav_route_destination OAIRegister_201_response_data_ship_nav_route::getDestination() const {
    return m_destination;
}
void OAIRegister_201_response_data_ship_nav_route::setDestination(const OAIRegister_201_response_data_ship_nav_route_destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIRegister_201_response_data_ship_nav_route::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship_nav_route::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arrival_isValid && m_departure_isValid && m_departure_time_isValid && m_destination_isValid && true;
}

} // namespace OpenAPI
