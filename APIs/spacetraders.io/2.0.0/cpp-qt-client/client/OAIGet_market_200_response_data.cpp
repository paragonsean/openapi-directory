/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_market_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_market_200_response_data::OAIGet_market_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_market_200_response_data::OAIGet_market_200_response_data() {
    this->initializeModel();
}

OAIGet_market_200_response_data::~OAIGet_market_200_response_data() {}

void OAIGet_market_200_response_data::initializeModel() {

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_exports_isSet = false;
    m_exports_isValid = false;

    m_imports_isSet = false;
    m_imports_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_trade_goods_isSet = false;
    m_trade_goods_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIGet_market_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_market_200_response_data::fromJsonObject(QJsonObject json) {

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_exports_isValid = ::OpenAPI::fromJsonValue(m_exports, json[QString("exports")]);
    m_exports_isSet = !json[QString("exports")].isNull() && m_exports_isValid;

    m_imports_isValid = ::OpenAPI::fromJsonValue(m_imports, json[QString("imports")]);
    m_imports_isSet = !json[QString("imports")].isNull() && m_imports_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_trade_goods_isValid = ::OpenAPI::fromJsonValue(m_trade_goods, json[QString("tradeGoods")]);
    m_trade_goods_isSet = !json[QString("tradeGoods")].isNull() && m_trade_goods_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIGet_market_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_market_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_exchange.size() > 0) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_exports.size() > 0) {
        obj.insert(QString("exports"), ::OpenAPI::toJsonValue(m_exports));
    }
    if (m_imports.size() > 0) {
        obj.insert(QString("imports"), ::OpenAPI::toJsonValue(m_imports));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_trade_goods.size() > 0) {
        obj.insert(QString("tradeGoods"), ::OpenAPI::toJsonValue(m_trade_goods));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

QList<OAIObject> OAIGet_market_200_response_data::getExchange() const {
    return m_exchange;
}
void OAIGet_market_200_response_data::setExchange(const QList<OAIObject> &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIGet_market_200_response_data::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIGet_market_200_response_data::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QList<OAIGet_market_200_response_data_exports_inner> OAIGet_market_200_response_data::getExports() const {
    return m_exports;
}
void OAIGet_market_200_response_data::setExports(const QList<OAIGet_market_200_response_data_exports_inner> &exports) {
    m_exports = exports;
    m_exports_isSet = true;
}

bool OAIGet_market_200_response_data::is_exports_Set() const{
    return m_exports_isSet;
}

bool OAIGet_market_200_response_data::is_exports_Valid() const{
    return m_exports_isValid;
}

QList<OAIObject> OAIGet_market_200_response_data::getImports() const {
    return m_imports;
}
void OAIGet_market_200_response_data::setImports(const QList<OAIObject> &imports) {
    m_imports = imports;
    m_imports_isSet = true;
}

bool OAIGet_market_200_response_data::is_imports_Set() const{
    return m_imports_isSet;
}

bool OAIGet_market_200_response_data::is_imports_Valid() const{
    return m_imports_isValid;
}

QString OAIGet_market_200_response_data::getSymbol() const {
    return m_symbol;
}
void OAIGet_market_200_response_data::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIGet_market_200_response_data::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIGet_market_200_response_data::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QList<OAIGet_market_200_response_data_tradeGoods_inner> OAIGet_market_200_response_data::getTradeGoods() const {
    return m_trade_goods;
}
void OAIGet_market_200_response_data::setTradeGoods(const QList<OAIGet_market_200_response_data_tradeGoods_inner> &trade_goods) {
    m_trade_goods = trade_goods;
    m_trade_goods_isSet = true;
}

bool OAIGet_market_200_response_data::is_trade_goods_Set() const{
    return m_trade_goods_isSet;
}

bool OAIGet_market_200_response_data::is_trade_goods_Valid() const{
    return m_trade_goods_isValid;
}

QList<OAIGet_market_200_response_data_transactions_inner> OAIGet_market_200_response_data::getTransactions() const {
    return m_transactions;
}
void OAIGet_market_200_response_data::setTransactions(const QList<OAIGet_market_200_response_data_transactions_inner> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIGet_market_200_response_data::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIGet_market_200_response_data::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIGet_market_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exchange.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_imports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade_goods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_market_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_exchange_isValid && m_exports_isValid && m_imports_isValid && m_symbol_isValid && true;
}

} // namespace OpenAPI
