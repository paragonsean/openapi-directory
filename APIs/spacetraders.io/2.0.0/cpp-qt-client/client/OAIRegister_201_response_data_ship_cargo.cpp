/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship_cargo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship_cargo::OAIRegister_201_response_data_ship_cargo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship_cargo::OAIRegister_201_response_data_ship_cargo() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship_cargo::~OAIRegister_201_response_data_ship_cargo() {}

void OAIRegister_201_response_data_ship_cargo::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIRegister_201_response_data_ship_cargo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship_cargo::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIRegister_201_response_data_ship_cargo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship_cargo::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_inventory.size() > 0) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

qint32 OAIRegister_201_response_data_ship_cargo::getCapacity() const {
    return m_capacity;
}
void OAIRegister_201_response_data_ship_cargo::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIRegister_201_response_data_ship_cargo::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIRegister_201_response_data_ship_cargo::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QList<OAIRegister_201_response_data_ship_cargo_inventory_inner> OAIRegister_201_response_data_ship_cargo::getInventory() const {
    return m_inventory;
}
void OAIRegister_201_response_data_ship_cargo::setInventory(const QList<OAIRegister_201_response_data_ship_cargo_inventory_inner> &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIRegister_201_response_data_ship_cargo::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIRegister_201_response_data_ship_cargo::is_inventory_Valid() const{
    return m_inventory_isValid;
}

qint32 OAIRegister_201_response_data_ship_cargo::getUnits() const {
    return m_units;
}
void OAIRegister_201_response_data_ship_cargo::setUnits(const qint32 &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIRegister_201_response_data_ship_cargo::is_units_Set() const{
    return m_units_isSet;
}

bool OAIRegister_201_response_data_ship_cargo::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIRegister_201_response_data_ship_cargo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship_cargo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capacity_isValid && m_inventory_isValid && m_units_isValid && true;
}

} // namespace OpenAPI
