/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_shipyard_200_response_data_ships_inner.h
 *
 * 
 */

#ifndef OAIGet_shipyard_200_response_data_ships_inner_H
#define OAIGet_shipyard_200_response_data_ships_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGet_shipyard_200_response_data_ships_inner : public OAIObject {
public:
    OAIGet_shipyard_200_response_data_ships_inner();
    OAIGet_shipyard_200_response_data_ships_inner(QString json);
    ~OAIGet_shipyard_200_response_data_ships_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIObject getEngine() const;
    void setEngine(const OAIObject &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    OAIObject getFrame() const;
    void setFrame(const OAIObject &frame);
    bool is_frame_Set() const;
    bool is_frame_Valid() const;

    QList<OAIObject> getModules() const;
    void setModules(const QList<OAIObject> &modules);
    bool is_modules_Set() const;
    bool is_modules_Valid() const;

    QList<OAIObject> getMounts() const;
    void setMounts(const QList<OAIObject> &mounts);
    bool is_mounts_Set() const;
    bool is_mounts_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPurchasePrice() const;
    void setPurchasePrice(const qint32 &purchase_price);
    bool is_purchase_price_Set() const;
    bool is_purchase_price_Valid() const;

    OAIObject getReactor() const;
    void setReactor(const OAIObject &reactor);
    bool is_reactor_Set() const;
    bool is_reactor_Valid() const;

    OAIObject getType() const;
    void setType(const OAIObject &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIObject m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    OAIObject m_frame;
    bool m_frame_isSet;
    bool m_frame_isValid;

    QList<OAIObject> m_modules;
    bool m_modules_isSet;
    bool m_modules_isValid;

    QList<OAIObject> m_mounts;
    bool m_mounts_isSet;
    bool m_mounts_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_purchase_price;
    bool m_purchase_price_isSet;
    bool m_purchase_price_isValid;

    OAIObject m_reactor;
    bool m_reactor_isSet;
    bool m_reactor_isValid;

    OAIObject m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_shipyard_200_response_data_ships_inner)

#endif // OAIGet_shipyard_200_response_data_ships_inner_H
