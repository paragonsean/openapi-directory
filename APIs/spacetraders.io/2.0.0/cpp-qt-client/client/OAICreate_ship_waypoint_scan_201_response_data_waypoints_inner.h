/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner.h
 *
 * A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
 */

#ifndef OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner_H
#define OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner : public OAIObject {
public:
    OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner();
    OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner(QString json);
    ~OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getChart() const;
    void setChart(const OAIObject &chart);
    bool is_chart_Set() const;
    bool is_chart_Valid() const;

    OAIObject getFaction() const;
    void setFaction(const OAIObject &faction);
    bool is_faction_Set() const;
    bool is_faction_Valid() const;

    QList<OAIObject> getOrbitals() const;
    void setOrbitals(const QList<OAIObject> &orbitals);
    bool is_orbitals_Set() const;
    bool is_orbitals_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    QString getSystemSymbol() const;
    void setSystemSymbol(const QString &system_symbol);
    bool is_system_symbol_Set() const;
    bool is_system_symbol_Valid() const;

    QList<OAIObject> getTraits() const;
    void setTraits(const QList<OAIObject> &traits);
    bool is_traits_Set() const;
    bool is_traits_Valid() const;

    OAIObject getType() const;
    void setType(const OAIObject &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getX() const;
    void setX(const qint32 &x);
    bool is_x_Set() const;
    bool is_x_Valid() const;

    qint32 getY() const;
    void setY(const qint32 &y);
    bool is_y_Set() const;
    bool is_y_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_chart;
    bool m_chart_isSet;
    bool m_chart_isValid;

    OAIObject m_faction;
    bool m_faction_isSet;
    bool m_faction_isValid;

    QList<OAIObject> m_orbitals;
    bool m_orbitals_isSet;
    bool m_orbitals_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;

    QString m_system_symbol;
    bool m_system_symbol_isSet;
    bool m_system_symbol_isValid;

    QList<OAIObject> m_traits;
    bool m_traits_isSet;
    bool m_traits_isValid;

    OAIObject m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_x;
    bool m_x_isSet;
    bool m_x_isValid;

    qint32 m_y;
    bool m_y_isSet;
    bool m_y_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner)

#endif // OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner_H
