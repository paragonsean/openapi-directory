/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_contract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_contract::OAIRegister_201_response_data_contract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_contract::OAIRegister_201_response_data_contract() {
    this->initializeModel();
}

OAIRegister_201_response_data_contract::~OAIRegister_201_response_data_contract() {}

void OAIRegister_201_response_data_contract::initializeModel() {

    m_accepted_isSet = false;
    m_accepted_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_faction_symbol_isSet = false;
    m_faction_symbol_isValid = false;

    m_fulfilled_isSet = false;
    m_fulfilled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRegister_201_response_data_contract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_contract::fromJsonObject(QJsonObject json) {

    m_accepted_isValid = ::OpenAPI::fromJsonValue(m_accepted, json[QString("accepted")]);
    m_accepted_isSet = !json[QString("accepted")].isNull() && m_accepted_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_faction_symbol_isValid = ::OpenAPI::fromJsonValue(m_faction_symbol, json[QString("factionSymbol")]);
    m_faction_symbol_isSet = !json[QString("factionSymbol")].isNull() && m_faction_symbol_isValid;

    m_fulfilled_isValid = ::OpenAPI::fromJsonValue(m_fulfilled, json[QString("fulfilled")]);
    m_fulfilled_isSet = !json[QString("fulfilled")].isNull() && m_fulfilled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRegister_201_response_data_contract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_contract::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_isSet) {
        obj.insert(QString("accepted"), ::OpenAPI::toJsonValue(m_accepted));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_faction_symbol_isSet) {
        obj.insert(QString("factionSymbol"), ::OpenAPI::toJsonValue(m_faction_symbol));
    }
    if (m_fulfilled_isSet) {
        obj.insert(QString("fulfilled"), ::OpenAPI::toJsonValue(m_fulfilled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIRegister_201_response_data_contract::isAccepted() const {
    return m_accepted;
}
void OAIRegister_201_response_data_contract::setAccepted(const bool &accepted) {
    m_accepted = accepted;
    m_accepted_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_accepted_Set() const{
    return m_accepted_isSet;
}

bool OAIRegister_201_response_data_contract::is_accepted_Valid() const{
    return m_accepted_isValid;
}

QDateTime OAIRegister_201_response_data_contract::getExpiration() const {
    return m_expiration;
}
void OAIRegister_201_response_data_contract::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIRegister_201_response_data_contract::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIRegister_201_response_data_contract::getFactionSymbol() const {
    return m_faction_symbol;
}
void OAIRegister_201_response_data_contract::setFactionSymbol(const QString &faction_symbol) {
    m_faction_symbol = faction_symbol;
    m_faction_symbol_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_faction_symbol_Set() const{
    return m_faction_symbol_isSet;
}

bool OAIRegister_201_response_data_contract::is_faction_symbol_Valid() const{
    return m_faction_symbol_isValid;
}

bool OAIRegister_201_response_data_contract::isFulfilled() const {
    return m_fulfilled;
}
void OAIRegister_201_response_data_contract::setFulfilled(const bool &fulfilled) {
    m_fulfilled = fulfilled;
    m_fulfilled_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_fulfilled_Set() const{
    return m_fulfilled_isSet;
}

bool OAIRegister_201_response_data_contract::is_fulfilled_Valid() const{
    return m_fulfilled_isValid;
}

QString OAIRegister_201_response_data_contract::getId() const {
    return m_id;
}
void OAIRegister_201_response_data_contract::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRegister_201_response_data_contract::is_id_Valid() const{
    return m_id_isValid;
}

OAIRegister_201_response_data_contract_terms OAIRegister_201_response_data_contract::getTerms() const {
    return m_terms;
}
void OAIRegister_201_response_data_contract::setTerms(const OAIRegister_201_response_data_contract_terms &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIRegister_201_response_data_contract::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIRegister_201_response_data_contract::getType() const {
    return m_type;
}
void OAIRegister_201_response_data_contract::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRegister_201_response_data_contract::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRegister_201_response_data_contract::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRegister_201_response_data_contract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfilled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_contract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accepted_isValid && m_expiration_isValid && m_faction_symbol_isValid && m_fulfilled_isValid && m_id_isValid && m_terms_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
