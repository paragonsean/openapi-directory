/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegister_201_response_data_ship_nav.h
 *
 * The navigation information of the ship.
 */

#ifndef OAIRegister_201_response_data_ship_nav_H
#define OAIRegister_201_response_data_ship_nav_H

#include <QJsonObject>

#include "OAIRegister_201_response_data_ship_nav_route.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRegister_201_response_data_ship_nav_route;

class OAIRegister_201_response_data_ship_nav : public OAIObject {
public:
    OAIRegister_201_response_data_ship_nav();
    OAIRegister_201_response_data_ship_nav(QString json);
    ~OAIRegister_201_response_data_ship_nav() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFlightMode() const;
    void setFlightMode(const QString &flight_mode);
    bool is_flight_mode_Set() const;
    bool is_flight_mode_Valid() const;

    OAIRegister_201_response_data_ship_nav_route getRoute() const;
    void setRoute(const OAIRegister_201_response_data_ship_nav_route &route);
    bool is_route_Set() const;
    bool is_route_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSystemSymbol() const;
    void setSystemSymbol(const QString &system_symbol);
    bool is_system_symbol_Set() const;
    bool is_system_symbol_Valid() const;

    QString getWaypointSymbol() const;
    void setWaypointSymbol(const QString &waypoint_symbol);
    bool is_waypoint_symbol_Set() const;
    bool is_waypoint_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_flight_mode;
    bool m_flight_mode_isSet;
    bool m_flight_mode_isValid;

    OAIRegister_201_response_data_ship_nav_route m_route;
    bool m_route_isSet;
    bool m_route_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_system_symbol;
    bool m_system_symbol_isSet;
    bool m_system_symbol_isValid;

    QString m_waypoint_symbol;
    bool m_waypoint_symbol_isSet;
    bool m_waypoint_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegister_201_response_data_ship_nav)

#endif // OAIRegister_201_response_data_ship_nav_H
