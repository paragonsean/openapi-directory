/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShip_Refine_200_Response_data_cooldown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShip_Refine_200_Response_data_cooldown::OAIShip_Refine_200_Response_data_cooldown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShip_Refine_200_Response_data_cooldown::OAIShip_Refine_200_Response_data_cooldown() {
    this->initializeModel();
}

OAIShip_Refine_200_Response_data_cooldown::~OAIShip_Refine_200_Response_data_cooldown() {}

void OAIShip_Refine_200_Response_data_cooldown::initializeModel() {

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_remaining_seconds_isSet = false;
    m_remaining_seconds_isValid = false;

    m_ship_symbol_isSet = false;
    m_ship_symbol_isValid = false;

    m_total_seconds_isSet = false;
    m_total_seconds_isValid = false;
}

void OAIShip_Refine_200_Response_data_cooldown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShip_Refine_200_Response_data_cooldown::fromJsonObject(QJsonObject json) {

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_remaining_seconds_isValid = ::OpenAPI::fromJsonValue(m_remaining_seconds, json[QString("remainingSeconds")]);
    m_remaining_seconds_isSet = !json[QString("remainingSeconds")].isNull() && m_remaining_seconds_isValid;

    m_ship_symbol_isValid = ::OpenAPI::fromJsonValue(m_ship_symbol, json[QString("shipSymbol")]);
    m_ship_symbol_isSet = !json[QString("shipSymbol")].isNull() && m_ship_symbol_isValid;

    m_total_seconds_isValid = ::OpenAPI::fromJsonValue(m_total_seconds, json[QString("totalSeconds")]);
    m_total_seconds_isSet = !json[QString("totalSeconds")].isNull() && m_total_seconds_isValid;
}

QString OAIShip_Refine_200_Response_data_cooldown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShip_Refine_200_Response_data_cooldown::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_remaining_seconds_isSet) {
        obj.insert(QString("remainingSeconds"), ::OpenAPI::toJsonValue(m_remaining_seconds));
    }
    if (m_ship_symbol_isSet) {
        obj.insert(QString("shipSymbol"), ::OpenAPI::toJsonValue(m_ship_symbol));
    }
    if (m_total_seconds_isSet) {
        obj.insert(QString("totalSeconds"), ::OpenAPI::toJsonValue(m_total_seconds));
    }
    return obj;
}

QDateTime OAIShip_Refine_200_Response_data_cooldown::getExpiration() const {
    return m_expiration;
}
void OAIShip_Refine_200_Response_data_cooldown::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_expiration_Valid() const{
    return m_expiration_isValid;
}

qint32 OAIShip_Refine_200_Response_data_cooldown::getRemainingSeconds() const {
    return m_remaining_seconds;
}
void OAIShip_Refine_200_Response_data_cooldown::setRemainingSeconds(const qint32 &remaining_seconds) {
    m_remaining_seconds = remaining_seconds;
    m_remaining_seconds_isSet = true;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_remaining_seconds_Set() const{
    return m_remaining_seconds_isSet;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_remaining_seconds_Valid() const{
    return m_remaining_seconds_isValid;
}

QString OAIShip_Refine_200_Response_data_cooldown::getShipSymbol() const {
    return m_ship_symbol;
}
void OAIShip_Refine_200_Response_data_cooldown::setShipSymbol(const QString &ship_symbol) {
    m_ship_symbol = ship_symbol;
    m_ship_symbol_isSet = true;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_ship_symbol_Set() const{
    return m_ship_symbol_isSet;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_ship_symbol_Valid() const{
    return m_ship_symbol_isValid;
}

qint32 OAIShip_Refine_200_Response_data_cooldown::getTotalSeconds() const {
    return m_total_seconds;
}
void OAIShip_Refine_200_Response_data_cooldown::setTotalSeconds(const qint32 &total_seconds) {
    m_total_seconds = total_seconds;
    m_total_seconds_isSet = true;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_total_seconds_Set() const{
    return m_total_seconds_isSet;
}

bool OAIShip_Refine_200_Response_data_cooldown::is_total_seconds_Valid() const{
    return m_total_seconds_isValid;
}

bool OAIShip_Refine_200_Response_data_cooldown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShip_Refine_200_Response_data_cooldown::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiration_isValid && m_remaining_seconds_isValid && m_ship_symbol_isValid && m_total_seconds_isValid && true;
}

} // namespace OpenAPI
