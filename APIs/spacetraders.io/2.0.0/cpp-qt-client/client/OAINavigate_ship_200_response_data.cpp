/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINavigate_ship_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINavigate_ship_200_response_data::OAINavigate_ship_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINavigate_ship_200_response_data::OAINavigate_ship_200_response_data() {
    this->initializeModel();
}

OAINavigate_ship_200_response_data::~OAINavigate_ship_200_response_data() {}

void OAINavigate_ship_200_response_data::initializeModel() {

    m_fuel_isSet = false;
    m_fuel_isValid = false;

    m_nav_isSet = false;
    m_nav_isValid = false;
}

void OAINavigate_ship_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINavigate_ship_200_response_data::fromJsonObject(QJsonObject json) {

    m_fuel_isValid = ::OpenAPI::fromJsonValue(m_fuel, json[QString("fuel")]);
    m_fuel_isSet = !json[QString("fuel")].isNull() && m_fuel_isValid;

    m_nav_isValid = ::OpenAPI::fromJsonValue(m_nav, json[QString("nav")]);
    m_nav_isSet = !json[QString("nav")].isNull() && m_nav_isValid;
}

QString OAINavigate_ship_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINavigate_ship_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_fuel.isSet()) {
        obj.insert(QString("fuel"), ::OpenAPI::toJsonValue(m_fuel));
    }
    if (m_nav.isSet()) {
        obj.insert(QString("nav"), ::OpenAPI::toJsonValue(m_nav));
    }
    return obj;
}

OAIObject OAINavigate_ship_200_response_data::getFuel() const {
    return m_fuel;
}
void OAINavigate_ship_200_response_data::setFuel(const OAIObject &fuel) {
    m_fuel = fuel;
    m_fuel_isSet = true;
}

bool OAINavigate_ship_200_response_data::is_fuel_Set() const{
    return m_fuel_isSet;
}

bool OAINavigate_ship_200_response_data::is_fuel_Valid() const{
    return m_fuel_isValid;
}

OAIObject OAINavigate_ship_200_response_data::getNav() const {
    return m_nav;
}
void OAINavigate_ship_200_response_data::setNav(const OAIObject &nav) {
    m_nav = nav;
    m_nav_isSet = true;
}

bool OAINavigate_ship_200_response_data::is_nav_Set() const{
    return m_nav_isSet;
}

bool OAINavigate_ship_200_response_data::is_nav_Valid() const{
    return m_nav_isValid;
}

bool OAINavigate_ship_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fuel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nav.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINavigate_ship_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fuel_isValid && m_nav_isValid && true;
}

} // namespace OpenAPI
