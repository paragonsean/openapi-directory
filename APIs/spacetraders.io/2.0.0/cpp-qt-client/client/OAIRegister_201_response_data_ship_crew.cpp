/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship_crew.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship_crew::OAIRegister_201_response_data_ship_crew(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship_crew::OAIRegister_201_response_data_ship_crew() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship_crew::~OAIRegister_201_response_data_ship_crew() {}

void OAIRegister_201_response_data_ship_crew::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_morale_isSet = false;
    m_morale_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_wages_isSet = false;
    m_wages_isValid = false;
}

void OAIRegister_201_response_data_ship_crew::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship_crew::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_morale_isValid = ::OpenAPI::fromJsonValue(m_morale, json[QString("morale")]);
    m_morale_isSet = !json[QString("morale")].isNull() && m_morale_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_wages_isValid = ::OpenAPI::fromJsonValue(m_wages, json[QString("wages")]);
    m_wages_isSet = !json[QString("wages")].isNull() && m_wages_isValid;
}

QString OAIRegister_201_response_data_ship_crew::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship_crew::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_morale_isSet) {
        obj.insert(QString("morale"), ::OpenAPI::toJsonValue(m_morale));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_wages_isSet) {
        obj.insert(QString("wages"), ::OpenAPI::toJsonValue(m_wages));
    }
    return obj;
}

qint32 OAIRegister_201_response_data_ship_crew::getCapacity() const {
    return m_capacity;
}
void OAIRegister_201_response_data_ship_crew::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIRegister_201_response_data_ship_crew::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIRegister_201_response_data_ship_crew::is_capacity_Valid() const{
    return m_capacity_isValid;
}

qint32 OAIRegister_201_response_data_ship_crew::getCurrent() const {
    return m_current;
}
void OAIRegister_201_response_data_ship_crew::setCurrent(const qint32 &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIRegister_201_response_data_ship_crew::is_current_Set() const{
    return m_current_isSet;
}

bool OAIRegister_201_response_data_ship_crew::is_current_Valid() const{
    return m_current_isValid;
}

qint32 OAIRegister_201_response_data_ship_crew::getMorale() const {
    return m_morale;
}
void OAIRegister_201_response_data_ship_crew::setMorale(const qint32 &morale) {
    m_morale = morale;
    m_morale_isSet = true;
}

bool OAIRegister_201_response_data_ship_crew::is_morale_Set() const{
    return m_morale_isSet;
}

bool OAIRegister_201_response_data_ship_crew::is_morale_Valid() const{
    return m_morale_isValid;
}

qint32 OAIRegister_201_response_data_ship_crew::getRequired() const {
    return m_required;
}
void OAIRegister_201_response_data_ship_crew::setRequired(const qint32 &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIRegister_201_response_data_ship_crew::is_required_Set() const{
    return m_required_isSet;
}

bool OAIRegister_201_response_data_ship_crew::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIRegister_201_response_data_ship_crew::getRotation() const {
    return m_rotation;
}
void OAIRegister_201_response_data_ship_crew::setRotation(const QString &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIRegister_201_response_data_ship_crew::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIRegister_201_response_data_ship_crew::is_rotation_Valid() const{
    return m_rotation_isValid;
}

qint32 OAIRegister_201_response_data_ship_crew::getWages() const {
    return m_wages;
}
void OAIRegister_201_response_data_ship_crew::setWages(const qint32 &wages) {
    m_wages = wages;
    m_wages_isSet = true;
}

bool OAIRegister_201_response_data_ship_crew::is_wages_Set() const{
    return m_wages_isSet;
}

bool OAIRegister_201_response_data_ship_crew::is_wages_Valid() const{
    return m_wages_isValid;
}

bool OAIRegister_201_response_data_ship_crew::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_morale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship_crew::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capacity_isValid && m_current_isValid && m_morale_isValid && m_required_isValid && m_rotation_isValid && m_wages_isValid && true;
}

} // namespace OpenAPI
