/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_contract_terms_payment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_contract_terms_payment::OAIRegister_201_response_data_contract_terms_payment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_contract_terms_payment::OAIRegister_201_response_data_contract_terms_payment() {
    this->initializeModel();
}

OAIRegister_201_response_data_contract_terms_payment::~OAIRegister_201_response_data_contract_terms_payment() {}

void OAIRegister_201_response_data_contract_terms_payment::initializeModel() {

    m_on_accepted_isSet = false;
    m_on_accepted_isValid = false;

    m_on_fulfilled_isSet = false;
    m_on_fulfilled_isValid = false;
}

void OAIRegister_201_response_data_contract_terms_payment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_contract_terms_payment::fromJsonObject(QJsonObject json) {

    m_on_accepted_isValid = ::OpenAPI::fromJsonValue(m_on_accepted, json[QString("onAccepted")]);
    m_on_accepted_isSet = !json[QString("onAccepted")].isNull() && m_on_accepted_isValid;

    m_on_fulfilled_isValid = ::OpenAPI::fromJsonValue(m_on_fulfilled, json[QString("onFulfilled")]);
    m_on_fulfilled_isSet = !json[QString("onFulfilled")].isNull() && m_on_fulfilled_isValid;
}

QString OAIRegister_201_response_data_contract_terms_payment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_contract_terms_payment::asJsonObject() const {
    QJsonObject obj;
    if (m_on_accepted_isSet) {
        obj.insert(QString("onAccepted"), ::OpenAPI::toJsonValue(m_on_accepted));
    }
    if (m_on_fulfilled_isSet) {
        obj.insert(QString("onFulfilled"), ::OpenAPI::toJsonValue(m_on_fulfilled));
    }
    return obj;
}

qint32 OAIRegister_201_response_data_contract_terms_payment::getOnAccepted() const {
    return m_on_accepted;
}
void OAIRegister_201_response_data_contract_terms_payment::setOnAccepted(const qint32 &on_accepted) {
    m_on_accepted = on_accepted;
    m_on_accepted_isSet = true;
}

bool OAIRegister_201_response_data_contract_terms_payment::is_on_accepted_Set() const{
    return m_on_accepted_isSet;
}

bool OAIRegister_201_response_data_contract_terms_payment::is_on_accepted_Valid() const{
    return m_on_accepted_isValid;
}

qint32 OAIRegister_201_response_data_contract_terms_payment::getOnFulfilled() const {
    return m_on_fulfilled;
}
void OAIRegister_201_response_data_contract_terms_payment::setOnFulfilled(const qint32 &on_fulfilled) {
    m_on_fulfilled = on_fulfilled;
    m_on_fulfilled_isSet = true;
}

bool OAIRegister_201_response_data_contract_terms_payment::is_on_fulfilled_Set() const{
    return m_on_fulfilled_isSet;
}

bool OAIRegister_201_response_data_contract_terms_payment::is_on_fulfilled_Valid() const{
    return m_on_fulfilled_isValid;
}

bool OAIRegister_201_response_data_contract_terms_payment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_fulfilled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_contract_terms_payment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_on_accepted_isValid && m_on_fulfilled_isValid && true;
}

} // namespace OpenAPI
