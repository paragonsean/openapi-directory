/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_system_waypoints_200_response_data_inner_traits_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_system_waypoints_200_response_data_inner_traits_inner::OAIGet_system_waypoints_200_response_data_inner_traits_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_system_waypoints_200_response_data_inner_traits_inner::OAIGet_system_waypoints_200_response_data_inner_traits_inner() {
    this->initializeModel();
}

OAIGet_system_waypoints_200_response_data_inner_traits_inner::~OAIGet_system_waypoints_200_response_data_inner_traits_inner() {}

void OAIGet_system_waypoints_200_response_data_inner_traits_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIGet_system_waypoints_200_response_data_inner_traits_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_system_waypoints_200_response_data_inner_traits_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIGet_system_waypoints_200_response_data_inner_traits_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_system_waypoints_200_response_data_inner_traits_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIGet_system_waypoints_200_response_data_inner_traits_inner::getDescription() const {
    return m_description;
}
void OAIGet_system_waypoints_200_response_data_inner_traits_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGet_system_waypoints_200_response_data_inner_traits_inner::getName() const {
    return m_name;
}
void OAIGet_system_waypoints_200_response_data_inner_traits_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGet_system_waypoints_200_response_data_inner_traits_inner::getSymbol() const {
    return m_symbol;
}
void OAIGet_system_waypoints_200_response_data_inner_traits_inner::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_system_waypoints_200_response_data_inner_traits_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_symbol_isValid && true;
}

} // namespace OpenAPI
