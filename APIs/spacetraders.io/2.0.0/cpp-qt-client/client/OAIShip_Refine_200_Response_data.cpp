/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShip_Refine_200_Response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShip_Refine_200_Response_data::OAIShip_Refine_200_Response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShip_Refine_200_Response_data::OAIShip_Refine_200_Response_data() {
    this->initializeModel();
}

OAIShip_Refine_200_Response_data::~OAIShip_Refine_200_Response_data() {}

void OAIShip_Refine_200_Response_data::initializeModel() {

    m_cargo_isSet = false;
    m_cargo_isValid = false;

    m_consumed_isSet = false;
    m_consumed_isValid = false;

    m_cooldown_isSet = false;
    m_cooldown_isValid = false;

    m_produced_isSet = false;
    m_produced_isValid = false;
}

void OAIShip_Refine_200_Response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShip_Refine_200_Response_data::fromJsonObject(QJsonObject json) {

    m_cargo_isValid = ::OpenAPI::fromJsonValue(m_cargo, json[QString("cargo")]);
    m_cargo_isSet = !json[QString("cargo")].isNull() && m_cargo_isValid;

    m_consumed_isValid = ::OpenAPI::fromJsonValue(m_consumed, json[QString("consumed")]);
    m_consumed_isSet = !json[QString("consumed")].isNull() && m_consumed_isValid;

    m_cooldown_isValid = ::OpenAPI::fromJsonValue(m_cooldown, json[QString("cooldown")]);
    m_cooldown_isSet = !json[QString("cooldown")].isNull() && m_cooldown_isValid;

    m_produced_isValid = ::OpenAPI::fromJsonValue(m_produced, json[QString("produced")]);
    m_produced_isSet = !json[QString("produced")].isNull() && m_produced_isValid;
}

QString OAIShip_Refine_200_Response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShip_Refine_200_Response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_cargo.isSet()) {
        obj.insert(QString("cargo"), ::OpenAPI::toJsonValue(m_cargo));
    }
    if (m_consumed.size() > 0) {
        obj.insert(QString("consumed"), ::OpenAPI::toJsonValue(m_consumed));
    }
    if (m_cooldown.isSet()) {
        obj.insert(QString("cooldown"), ::OpenAPI::toJsonValue(m_cooldown));
    }
    if (m_produced.size() > 0) {
        obj.insert(QString("produced"), ::OpenAPI::toJsonValue(m_produced));
    }
    return obj;
}

OAIObject OAIShip_Refine_200_Response_data::getCargo() const {
    return m_cargo;
}
void OAIShip_Refine_200_Response_data::setCargo(const OAIObject &cargo) {
    m_cargo = cargo;
    m_cargo_isSet = true;
}

bool OAIShip_Refine_200_Response_data::is_cargo_Set() const{
    return m_cargo_isSet;
}

bool OAIShip_Refine_200_Response_data::is_cargo_Valid() const{
    return m_cargo_isValid;
}

QList<OAIShip_Refine_200_Response_data_consumed_inner> OAIShip_Refine_200_Response_data::getConsumed() const {
    return m_consumed;
}
void OAIShip_Refine_200_Response_data::setConsumed(const QList<OAIShip_Refine_200_Response_data_consumed_inner> &consumed) {
    m_consumed = consumed;
    m_consumed_isSet = true;
}

bool OAIShip_Refine_200_Response_data::is_consumed_Set() const{
    return m_consumed_isSet;
}

bool OAIShip_Refine_200_Response_data::is_consumed_Valid() const{
    return m_consumed_isValid;
}

OAIShip_Refine_200_Response_data_cooldown OAIShip_Refine_200_Response_data::getCooldown() const {
    return m_cooldown;
}
void OAIShip_Refine_200_Response_data::setCooldown(const OAIShip_Refine_200_Response_data_cooldown &cooldown) {
    m_cooldown = cooldown;
    m_cooldown_isSet = true;
}

bool OAIShip_Refine_200_Response_data::is_cooldown_Set() const{
    return m_cooldown_isSet;
}

bool OAIShip_Refine_200_Response_data::is_cooldown_Valid() const{
    return m_cooldown_isValid;
}

QList<OAIShip_Refine_200_Response_data_consumed_inner> OAIShip_Refine_200_Response_data::getProduced() const {
    return m_produced;
}
void OAIShip_Refine_200_Response_data::setProduced(const QList<OAIShip_Refine_200_Response_data_consumed_inner> &produced) {
    m_produced = produced;
    m_produced_isSet = true;
}

bool OAIShip_Refine_200_Response_data::is_produced_Set() const{
    return m_produced_isSet;
}

bool OAIShip_Refine_200_Response_data::is_produced_Valid() const{
    return m_produced_isValid;
}

bool OAIShip_Refine_200_Response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cargo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooldown.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_produced.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShip_Refine_200_Response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cargo_isValid && m_consumed_isValid && m_cooldown_isValid && m_produced_isValid && true;
}

} // namespace OpenAPI
