/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner() {
    this->initializeModel();
}

OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::~OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner() {}

void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::initializeModel() {

    m_chart_isSet = false;
    m_chart_isValid = false;

    m_faction_isSet = false;
    m_faction_isValid = false;

    m_orbitals_isSet = false;
    m_orbitals_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_system_symbol_isSet = false;
    m_system_symbol_isValid = false;

    m_traits_isSet = false;
    m_traits_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::fromJsonObject(QJsonObject json) {

    m_chart_isValid = ::OpenAPI::fromJsonValue(m_chart, json[QString("chart")]);
    m_chart_isSet = !json[QString("chart")].isNull() && m_chart_isValid;

    m_faction_isValid = ::OpenAPI::fromJsonValue(m_faction, json[QString("faction")]);
    m_faction_isSet = !json[QString("faction")].isNull() && m_faction_isValid;

    m_orbitals_isValid = ::OpenAPI::fromJsonValue(m_orbitals, json[QString("orbitals")]);
    m_orbitals_isSet = !json[QString("orbitals")].isNull() && m_orbitals_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_system_symbol_isValid = ::OpenAPI::fromJsonValue(m_system_symbol, json[QString("systemSymbol")]);
    m_system_symbol_isSet = !json[QString("systemSymbol")].isNull() && m_system_symbol_isValid;

    m_traits_isValid = ::OpenAPI::fromJsonValue(m_traits, json[QString("traits")]);
    m_traits_isSet = !json[QString("traits")].isNull() && m_traits_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_chart.isSet()) {
        obj.insert(QString("chart"), ::OpenAPI::toJsonValue(m_chart));
    }
    if (m_faction.isSet()) {
        obj.insert(QString("faction"), ::OpenAPI::toJsonValue(m_faction));
    }
    if (m_orbitals.size() > 0) {
        obj.insert(QString("orbitals"), ::OpenAPI::toJsonValue(m_orbitals));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_system_symbol_isSet) {
        obj.insert(QString("systemSymbol"), ::OpenAPI::toJsonValue(m_system_symbol));
    }
    if (m_traits.size() > 0) {
        obj.insert(QString("traits"), ::OpenAPI::toJsonValue(m_traits));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

OAIObject OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getChart() const {
    return m_chart;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setChart(const OAIObject &chart) {
    m_chart = chart;
    m_chart_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_chart_Set() const{
    return m_chart_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_chart_Valid() const{
    return m_chart_isValid;
}

OAIObject OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getFaction() const {
    return m_faction;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setFaction(const OAIObject &faction) {
    m_faction = faction;
    m_faction_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_faction_Set() const{
    return m_faction_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_faction_Valid() const{
    return m_faction_isValid;
}

QList<OAIObject> OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getOrbitals() const {
    return m_orbitals;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setOrbitals(const QList<OAIObject> &orbitals) {
    m_orbitals = orbitals;
    m_orbitals_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_orbitals_Set() const{
    return m_orbitals_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_orbitals_Valid() const{
    return m_orbitals_isValid;
}

QString OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getSymbol() const {
    return m_symbol;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getSystemSymbol() const {
    return m_system_symbol;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setSystemSymbol(const QString &system_symbol) {
    m_system_symbol = system_symbol;
    m_system_symbol_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_system_symbol_Set() const{
    return m_system_symbol_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_system_symbol_Valid() const{
    return m_system_symbol_isValid;
}

QList<OAIObject> OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getTraits() const {
    return m_traits;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setTraits(const QList<OAIObject> &traits) {
    m_traits = traits;
    m_traits_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_traits_Set() const{
    return m_traits_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_traits_Valid() const{
    return m_traits_isValid;
}

OAIObject OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getType() const {
    return m_type;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setType(const OAIObject &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getX() const {
    return m_x;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setX(const qint32 &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_x_Set() const{
    return m_x_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_x_Valid() const{
    return m_x_isValid;
}

qint32 OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::getY() const {
    return m_y;
}
void OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::setY(const qint32 &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_y_Set() const{
    return m_y_isSet;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::is_y_Valid() const{
    return m_y_isValid;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orbitals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_ship_waypoint_scan_201_response_data_waypoints_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_orbitals_isValid && m_symbol_isValid && m_system_symbol_isValid && m_traits_isValid && m_type_isValid && m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
