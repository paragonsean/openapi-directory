/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegister_201_response_data_ship_frame.h
 *
 * The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
 */

#ifndef OAIRegister_201_response_data_ship_frame_H
#define OAIRegister_201_response_data_ship_frame_H

#include <QJsonObject>

#include "OAIRegister_201_response_data_ship_frame_requirements.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRegister_201_response_data_ship_frame_requirements;

class OAIRegister_201_response_data_ship_frame : public OAIObject {
public:
    OAIRegister_201_response_data_ship_frame();
    OAIRegister_201_response_data_ship_frame(QString json);
    ~OAIRegister_201_response_data_ship_frame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCondition() const;
    void setCondition(const qint32 &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getFuelCapacity() const;
    void setFuelCapacity(const qint32 &fuel_capacity);
    bool is_fuel_capacity_Set() const;
    bool is_fuel_capacity_Valid() const;

    qint32 getModuleSlots() const;
    void setModuleSlots(const qint32 &module_slots);
    bool is_module_slots_Set() const;
    bool is_module_slots_Valid() const;

    qint32 getMountingPoints() const;
    void setMountingPoints(const qint32 &mounting_points);
    bool is_mounting_points_Set() const;
    bool is_mounting_points_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIRegister_201_response_data_ship_frame_requirements getRequirements() const;
    void setRequirements(const OAIRegister_201_response_data_ship_frame_requirements &requirements);
    bool is_requirements_Set() const;
    bool is_requirements_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_fuel_capacity;
    bool m_fuel_capacity_isSet;
    bool m_fuel_capacity_isValid;

    qint32 m_module_slots;
    bool m_module_slots_isSet;
    bool m_module_slots_isValid;

    qint32 m_mounting_points;
    bool m_mounting_points_isSet;
    bool m_mounting_points_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIRegister_201_response_data_ship_frame_requirements m_requirements;
    bool m_requirements_isSet;
    bool m_requirements_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegister_201_response_data_ship_frame)

#endif // OAIRegister_201_response_data_ship_frame_H
