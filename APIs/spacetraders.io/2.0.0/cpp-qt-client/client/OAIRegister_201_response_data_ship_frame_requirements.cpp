/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship_frame_requirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship_frame_requirements::OAIRegister_201_response_data_ship_frame_requirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship_frame_requirements::OAIRegister_201_response_data_ship_frame_requirements() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship_frame_requirements::~OAIRegister_201_response_data_ship_frame_requirements() {}

void OAIRegister_201_response_data_ship_frame_requirements::initializeModel() {

    m_crew_isSet = false;
    m_crew_isValid = false;

    m_power_isSet = false;
    m_power_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;
}

void OAIRegister_201_response_data_ship_frame_requirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship_frame_requirements::fromJsonObject(QJsonObject json) {

    m_crew_isValid = ::OpenAPI::fromJsonValue(m_crew, json[QString("crew")]);
    m_crew_isSet = !json[QString("crew")].isNull() && m_crew_isValid;

    m_power_isValid = ::OpenAPI::fromJsonValue(m_power, json[QString("power")]);
    m_power_isSet = !json[QString("power")].isNull() && m_power_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;
}

QString OAIRegister_201_response_data_ship_frame_requirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship_frame_requirements::asJsonObject() const {
    QJsonObject obj;
    if (m_crew_isSet) {
        obj.insert(QString("crew"), ::OpenAPI::toJsonValue(m_crew));
    }
    if (m_power_isSet) {
        obj.insert(QString("power"), ::OpenAPI::toJsonValue(m_power));
    }
    if (m_r_slots_isSet) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    return obj;
}

qint32 OAIRegister_201_response_data_ship_frame_requirements::getCrew() const {
    return m_crew;
}
void OAIRegister_201_response_data_ship_frame_requirements::setCrew(const qint32 &crew) {
    m_crew = crew;
    m_crew_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame_requirements::is_crew_Set() const{
    return m_crew_isSet;
}

bool OAIRegister_201_response_data_ship_frame_requirements::is_crew_Valid() const{
    return m_crew_isValid;
}

qint32 OAIRegister_201_response_data_ship_frame_requirements::getPower() const {
    return m_power;
}
void OAIRegister_201_response_data_ship_frame_requirements::setPower(const qint32 &power) {
    m_power = power;
    m_power_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame_requirements::is_power_Set() const{
    return m_power_isSet;
}

bool OAIRegister_201_response_data_ship_frame_requirements::is_power_Valid() const{
    return m_power_isValid;
}

qint32 OAIRegister_201_response_data_ship_frame_requirements::getRSlots() const {
    return m_r_slots;
}
void OAIRegister_201_response_data_ship_frame_requirements::setRSlots(const qint32 &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIRegister_201_response_data_ship_frame_requirements::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIRegister_201_response_data_ship_frame_requirements::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

bool OAIRegister_201_response_data_ship_frame_requirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship_frame_requirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
