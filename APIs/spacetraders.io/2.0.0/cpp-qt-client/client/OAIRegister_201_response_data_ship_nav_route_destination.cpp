/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship_nav_route_destination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship_nav_route_destination::OAIRegister_201_response_data_ship_nav_route_destination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship_nav_route_destination::OAIRegister_201_response_data_ship_nav_route_destination() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship_nav_route_destination::~OAIRegister_201_response_data_ship_nav_route_destination() {}

void OAIRegister_201_response_data_ship_nav_route_destination::initializeModel() {

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_system_symbol_isSet = false;
    m_system_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIRegister_201_response_data_ship_nav_route_destination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship_nav_route_destination::fromJsonObject(QJsonObject json) {

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_system_symbol_isValid = ::OpenAPI::fromJsonValue(m_system_symbol, json[QString("systemSymbol")]);
    m_system_symbol_isSet = !json[QString("systemSymbol")].isNull() && m_system_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIRegister_201_response_data_ship_nav_route_destination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship_nav_route_destination::asJsonObject() const {
    QJsonObject obj;
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_system_symbol_isSet) {
        obj.insert(QString("systemSymbol"), ::OpenAPI::toJsonValue(m_system_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

QString OAIRegister_201_response_data_ship_nav_route_destination::getSymbol() const {
    return m_symbol;
}
void OAIRegister_201_response_data_ship_nav_route_destination::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAIRegister_201_response_data_ship_nav_route_destination::getSystemSymbol() const {
    return m_system_symbol;
}
void OAIRegister_201_response_data_ship_nav_route_destination::setSystemSymbol(const QString &system_symbol) {
    m_system_symbol = system_symbol;
    m_system_symbol_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_system_symbol_Set() const{
    return m_system_symbol_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_system_symbol_Valid() const{
    return m_system_symbol_isValid;
}

QString OAIRegister_201_response_data_ship_nav_route_destination::getType() const {
    return m_type;
}
void OAIRegister_201_response_data_ship_nav_route_destination::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIRegister_201_response_data_ship_nav_route_destination::getX() const {
    return m_x;
}
void OAIRegister_201_response_data_ship_nav_route_destination::setX(const qint32 &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_x_Set() const{
    return m_x_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_x_Valid() const{
    return m_x_isValid;
}

qint32 OAIRegister_201_response_data_ship_nav_route_destination::getY() const {
    return m_y;
}
void OAIRegister_201_response_data_ship_nav_route_destination::setY(const qint32 &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_y_Set() const{
    return m_y_isSet;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship_nav_route_destination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_symbol_isValid && m_system_symbol_isValid && m_type_isValid && m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
