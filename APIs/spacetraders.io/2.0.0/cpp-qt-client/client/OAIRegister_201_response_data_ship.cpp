/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegister_201_response_data_ship.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegister_201_response_data_ship::OAIRegister_201_response_data_ship(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegister_201_response_data_ship::OAIRegister_201_response_data_ship() {
    this->initializeModel();
}

OAIRegister_201_response_data_ship::~OAIRegister_201_response_data_ship() {}

void OAIRegister_201_response_data_ship::initializeModel() {

    m_cargo_isSet = false;
    m_cargo_isValid = false;

    m_crew_isSet = false;
    m_crew_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_frame_isSet = false;
    m_frame_isValid = false;

    m_fuel_isSet = false;
    m_fuel_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_mounts_isSet = false;
    m_mounts_isValid = false;

    m_nav_isSet = false;
    m_nav_isValid = false;

    m_reactor_isSet = false;
    m_reactor_isValid = false;

    m_registration_isSet = false;
    m_registration_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIRegister_201_response_data_ship::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegister_201_response_data_ship::fromJsonObject(QJsonObject json) {

    m_cargo_isValid = ::OpenAPI::fromJsonValue(m_cargo, json[QString("cargo")]);
    m_cargo_isSet = !json[QString("cargo")].isNull() && m_cargo_isValid;

    m_crew_isValid = ::OpenAPI::fromJsonValue(m_crew, json[QString("crew")]);
    m_crew_isSet = !json[QString("crew")].isNull() && m_crew_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_frame_isValid = ::OpenAPI::fromJsonValue(m_frame, json[QString("frame")]);
    m_frame_isSet = !json[QString("frame")].isNull() && m_frame_isValid;

    m_fuel_isValid = ::OpenAPI::fromJsonValue(m_fuel, json[QString("fuel")]);
    m_fuel_isSet = !json[QString("fuel")].isNull() && m_fuel_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_mounts_isValid = ::OpenAPI::fromJsonValue(m_mounts, json[QString("mounts")]);
    m_mounts_isSet = !json[QString("mounts")].isNull() && m_mounts_isValid;

    m_nav_isValid = ::OpenAPI::fromJsonValue(m_nav, json[QString("nav")]);
    m_nav_isSet = !json[QString("nav")].isNull() && m_nav_isValid;

    m_reactor_isValid = ::OpenAPI::fromJsonValue(m_reactor, json[QString("reactor")]);
    m_reactor_isSet = !json[QString("reactor")].isNull() && m_reactor_isValid;

    m_registration_isValid = ::OpenAPI::fromJsonValue(m_registration, json[QString("registration")]);
    m_registration_isSet = !json[QString("registration")].isNull() && m_registration_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIRegister_201_response_data_ship::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegister_201_response_data_ship::asJsonObject() const {
    QJsonObject obj;
    if (m_cargo.isSet()) {
        obj.insert(QString("cargo"), ::OpenAPI::toJsonValue(m_cargo));
    }
    if (m_crew.isSet()) {
        obj.insert(QString("crew"), ::OpenAPI::toJsonValue(m_crew));
    }
    if (m_engine.isSet()) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_frame.isSet()) {
        obj.insert(QString("frame"), ::OpenAPI::toJsonValue(m_frame));
    }
    if (m_fuel.isSet()) {
        obj.insert(QString("fuel"), ::OpenAPI::toJsonValue(m_fuel));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_mounts.size() > 0) {
        obj.insert(QString("mounts"), ::OpenAPI::toJsonValue(m_mounts));
    }
    if (m_nav.isSet()) {
        obj.insert(QString("nav"), ::OpenAPI::toJsonValue(m_nav));
    }
    if (m_reactor.isSet()) {
        obj.insert(QString("reactor"), ::OpenAPI::toJsonValue(m_reactor));
    }
    if (m_registration.isSet()) {
        obj.insert(QString("registration"), ::OpenAPI::toJsonValue(m_registration));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

OAIRegister_201_response_data_ship_cargo OAIRegister_201_response_data_ship::getCargo() const {
    return m_cargo;
}
void OAIRegister_201_response_data_ship::setCargo(const OAIRegister_201_response_data_ship_cargo &cargo) {
    m_cargo = cargo;
    m_cargo_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_cargo_Set() const{
    return m_cargo_isSet;
}

bool OAIRegister_201_response_data_ship::is_cargo_Valid() const{
    return m_cargo_isValid;
}

OAIRegister_201_response_data_ship_crew OAIRegister_201_response_data_ship::getCrew() const {
    return m_crew;
}
void OAIRegister_201_response_data_ship::setCrew(const OAIRegister_201_response_data_ship_crew &crew) {
    m_crew = crew;
    m_crew_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_crew_Set() const{
    return m_crew_isSet;
}

bool OAIRegister_201_response_data_ship::is_crew_Valid() const{
    return m_crew_isValid;
}

OAIRegister_201_response_data_ship_engine OAIRegister_201_response_data_ship::getEngine() const {
    return m_engine;
}
void OAIRegister_201_response_data_ship::setEngine(const OAIRegister_201_response_data_ship_engine &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIRegister_201_response_data_ship::is_engine_Valid() const{
    return m_engine_isValid;
}

OAIRegister_201_response_data_ship_frame OAIRegister_201_response_data_ship::getFrame() const {
    return m_frame;
}
void OAIRegister_201_response_data_ship::setFrame(const OAIRegister_201_response_data_ship_frame &frame) {
    m_frame = frame;
    m_frame_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_frame_Set() const{
    return m_frame_isSet;
}

bool OAIRegister_201_response_data_ship::is_frame_Valid() const{
    return m_frame_isValid;
}

OAIRegister_201_response_data_ship_fuel OAIRegister_201_response_data_ship::getFuel() const {
    return m_fuel;
}
void OAIRegister_201_response_data_ship::setFuel(const OAIRegister_201_response_data_ship_fuel &fuel) {
    m_fuel = fuel;
    m_fuel_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_fuel_Set() const{
    return m_fuel_isSet;
}

bool OAIRegister_201_response_data_ship::is_fuel_Valid() const{
    return m_fuel_isValid;
}

QList<OAIRegister_201_response_data_ship_modules_inner> OAIRegister_201_response_data_ship::getModules() const {
    return m_modules;
}
void OAIRegister_201_response_data_ship::setModules(const QList<OAIRegister_201_response_data_ship_modules_inner> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAIRegister_201_response_data_ship::is_modules_Valid() const{
    return m_modules_isValid;
}

QList<OAIRegister_201_response_data_ship_mounts_inner> OAIRegister_201_response_data_ship::getMounts() const {
    return m_mounts;
}
void OAIRegister_201_response_data_ship::setMounts(const QList<OAIRegister_201_response_data_ship_mounts_inner> &mounts) {
    m_mounts = mounts;
    m_mounts_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_mounts_Set() const{
    return m_mounts_isSet;
}

bool OAIRegister_201_response_data_ship::is_mounts_Valid() const{
    return m_mounts_isValid;
}

OAIRegister_201_response_data_ship_nav OAIRegister_201_response_data_ship::getNav() const {
    return m_nav;
}
void OAIRegister_201_response_data_ship::setNav(const OAIRegister_201_response_data_ship_nav &nav) {
    m_nav = nav;
    m_nav_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_nav_Set() const{
    return m_nav_isSet;
}

bool OAIRegister_201_response_data_ship::is_nav_Valid() const{
    return m_nav_isValid;
}

OAIRegister_201_response_data_ship_reactor OAIRegister_201_response_data_ship::getReactor() const {
    return m_reactor;
}
void OAIRegister_201_response_data_ship::setReactor(const OAIRegister_201_response_data_ship_reactor &reactor) {
    m_reactor = reactor;
    m_reactor_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_reactor_Set() const{
    return m_reactor_isSet;
}

bool OAIRegister_201_response_data_ship::is_reactor_Valid() const{
    return m_reactor_isValid;
}

OAIRegister_201_response_data_ship_registration OAIRegister_201_response_data_ship::getRegistration() const {
    return m_registration;
}
void OAIRegister_201_response_data_ship::setRegistration(const OAIRegister_201_response_data_ship_registration &registration) {
    m_registration = registration;
    m_registration_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_registration_Set() const{
    return m_registration_isSet;
}

bool OAIRegister_201_response_data_ship::is_registration_Valid() const{
    return m_registration_isValid;
}

QString OAIRegister_201_response_data_ship::getSymbol() const {
    return m_symbol;
}
void OAIRegister_201_response_data_ship::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIRegister_201_response_data_ship::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIRegister_201_response_data_ship::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIRegister_201_response_data_ship::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cargo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crew.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nav.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegister_201_response_data_ship::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cargo_isValid && m_crew_isValid && m_engine_isValid && m_frame_isValid && m_fuel_isValid && m_modules_isValid && m_mounts_isValid && m_nav_isValid && m_reactor_isValid && m_registration_isValid && m_symbol_isValid && true;
}

} // namespace OpenAPI
