/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Box from '../model/Box';
import BulkAnonymizationData from '../model/BulkAnonymizationData';
import Image from '../model/Image';
import IncomingTransaction from '../model/IncomingTransaction';
import OutgoingTransaction from '../model/OutgoingTransaction';
import RemoteBox from '../model/RemoteBox';
import RemoteBoxConnectionData from '../model/RemoteBoxConnectionData';

/**
* Boxes service.
* @module api/BoxesApi
* @version 2.0
*/
export default class BoxesApi {

    /**
    * Constructs a new BoxesApi. 
    * @alias module:api/BoxesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the boxesConnectPost operation.
     * @callback module:api/BoxesApi~boxesConnectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Box} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect to another box using a received URL. Used to connect to a public box.
     * @param {module:model/RemoteBox} remoteBox remote box to connect with
     * @param {module:api/BoxesApi~boxesConnectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Box}
     */
    boxesConnectPost(remoteBox, callback) {
      let postBody = remoteBox;
      // verify the required parameter 'remoteBox' is set
      if (remoteBox === undefined || remoteBox === null) {
        throw new Error("Missing the required parameter 'remoteBox' when calling boxesConnectPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Box;
      return this.apiClient.callApi(
        '/boxes/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesCreateconnectionPost operation.
     * @callback module:api/BoxesApi~boxesCreateconnectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Box} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new box connection where the supplied entity holds the remote box name. Used by publicly available boxes.
     * @param {module:model/RemoteBoxConnectionData} remoteBoxConnectionData name of box to connect (and send URL) to
     * @param {module:api/BoxesApi~boxesCreateconnectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Box}
     */
    boxesCreateconnectionPost(remoteBoxConnectionData, callback) {
      let postBody = remoteBoxConnectionData;
      // verify the required parameter 'remoteBoxConnectionData' is set
      if (remoteBoxConnectionData === undefined || remoteBoxConnectionData === null) {
        throw new Error("Missing the required parameter 'remoteBoxConnectionData' when calling boxesCreateconnectionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Box;
      return this.apiClient.callApi(
        '/boxes/createconnection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesGet operation.
     * @callback module:api/BoxesApi~boxesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Box>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of box connections
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of boxes
     * @param {Number} [count = 20)] size of returned slice of boxes
     * @param {module:api/BoxesApi~boxesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Box>}
     */
    boxesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Box];
      return this.apiClient.callApi(
        '/boxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesIdDelete operation.
     * @callback module:api/BoxesApi~boxesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the remote box with the supplied ID
     * @param {Number} id ID of box to remove
     * @param {module:api/BoxesApi~boxesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boxesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesIdSendPost operation.
     * @callback module:api/BoxesApi~boxesIdSendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send images corresponding to the supplied image ids to the remote box with the supplied ID
     * @param {Number} id ID of box to send images to
     * @param {module:model/BulkAnonymizationData} sequenceOfImageTagValues specification of which images to send and list of DICOM attribute values to use in anonymized datasets
     * @param {module:api/BoxesApi~boxesIdSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxesIdSendPost(id, sequenceOfImageTagValues, callback) {
      let postBody = sequenceOfImageTagValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boxesIdSendPost");
      }
      // verify the required parameter 'sequenceOfImageTagValues' is set
      if (sequenceOfImageTagValues === undefined || sequenceOfImageTagValues === null) {
        throw new Error("Missing the required parameter 'sequenceOfImageTagValues' when calling boxesIdSendPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxes/{id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesIncomingGet operation.
     * @callback module:api/BoxesApi~boxesIncomingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IncomingTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get incoming transactions (finished, currently receiving, waiting or failed)
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of transactions
     * @param {Number} [count = 20)] size of returned slice of transactions
     * @param {module:api/BoxesApi~boxesIncomingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IncomingTransaction>}
     */
    boxesIncomingGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [IncomingTransaction];
      return this.apiClient.callApi(
        '/boxes/incoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesIncomingIdDelete operation.
     * @callback module:api/BoxesApi~boxesIncomingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an incoming transaction. If a currently active transaction is deleted, a new transaction with the remainder of the images is created when receiving the next incoming image.
     * @param {Number} id ID of incoming transaction
     * @param {module:api/BoxesApi~boxesIncomingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxesIncomingIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boxesIncomingIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxes/incoming/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesIncomingIdImagesGet operation.
     * @callback module:api/BoxesApi~boxesIncomingIdImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the received images corresponding to the incoming transaction with the supplied ID
     * @param {Number} id ID of incoming transaction
     * @param {module:api/BoxesApi~boxesIncomingIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    boxesIncomingIdImagesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boxesIncomingIdImagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/boxes/incoming/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesOutgoingGet operation.
     * @callback module:api/BoxesApi~boxesOutgoingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OutgoingTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get outgoing transactions (finished, currently sending, waiting or failed)
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of transactions
     * @param {Number} [count = 20)] size of returned slice of transactions
     * @param {module:api/BoxesApi~boxesOutgoingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OutgoingTransaction>}
     */
    boxesOutgoingGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [OutgoingTransaction];
      return this.apiClient.callApi(
        '/boxes/outgoing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesOutgoingIdDelete operation.
     * @callback module:api/BoxesApi~boxesOutgoingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an outgoing transaction. This will stop ongoing transactions.
     * @param {Number} id ID of outgoing transaction
     * @param {module:api/BoxesApi~boxesOutgoingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxesOutgoingIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boxesOutgoingIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxes/outgoing/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxesOutgoingIdImagesGet operation.
     * @callback module:api/BoxesApi~boxesOutgoingIdImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the sent images corresponding to the outgoing transaction with the supplied ID
     * @param {Number} id ID of outgoing transaction
     * @param {module:api/BoxesApi~boxesOutgoingIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    boxesOutgoingIdImagesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boxesOutgoingIdImagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/boxes/outgoing/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
