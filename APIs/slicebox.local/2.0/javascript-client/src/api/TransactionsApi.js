/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FailedOutgoingTransactionImage from '../model/FailedOutgoingTransactionImage';
import OutgoingTransactionImage from '../model/OutgoingTransactionImage';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 2.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transactionsTokenImagePost operation.
     * @callback module:api/TransactionsApi~transactionsTokenImagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add an image (dataset) as part of a transaction. This method is used when sending images using the push method to a public slicebox.
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {Number} transactionid the ID of the client's outgoing transaction
     * @param {Number} sequencenumber the index of this image in the transaction
     * @param {Number} totalimagecount the total number of images in this transaction
     * @param {Object.<String, Object>} dataset the dataset byte array
     * @param {module:api/TransactionsApi~transactionsTokenImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTokenImagePost(token, transactionid, sequencenumber, totalimagecount, dataset, callback) {
      let postBody = dataset;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenImagePost");
      }
      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling transactionsTokenImagePost");
      }
      // verify the required parameter 'sequencenumber' is set
      if (sequencenumber === undefined || sequencenumber === null) {
        throw new Error("Missing the required parameter 'sequencenumber' when calling transactionsTokenImagePost");
      }
      // verify the required parameter 'totalimagecount' is set
      if (totalimagecount === undefined || totalimagecount === null) {
        throw new Error("Missing the required parameter 'totalimagecount' when calling transactionsTokenImagePost");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling transactionsTokenImagePost");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'transactionid': transactionid,
        'sequencenumber': sequencenumber,
        'totalimagecount': totalimagecount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{token}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTokenOutgoingDonePost operation.
     * @callback module:api/TransactionsApi~transactionsTokenOutgoingDonePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * signal that the supplied outgoing transaction and image was successfully received and can be marked as sent. This method is used when sending images using the poll method from a public slicebox.
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {module:model/OutgoingTransactionImage} outgoingEntryAndImageInformationBlock outgoing transaction and image that has been successfully received
     * @param {module:api/TransactionsApi~transactionsTokenOutgoingDonePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTokenOutgoingDonePost(token, outgoingEntryAndImageInformationBlock, callback) {
      let postBody = outgoingEntryAndImageInformationBlock;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenOutgoingDonePost");
      }
      // verify the required parameter 'outgoingEntryAndImageInformationBlock' is set
      if (outgoingEntryAndImageInformationBlock === undefined || outgoingEntryAndImageInformationBlock === null) {
        throw new Error("Missing the required parameter 'outgoingEntryAndImageInformationBlock' when calling transactionsTokenOutgoingDonePost");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{token}/outgoing/done', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTokenOutgoingFailedPost operation.
     * @callback module:api/TransactionsApi~transactionsTokenOutgoingFailedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * signal that the image corresponding to the supplied outgoing transaction and image could not be read or stored properly on the receiving side, and that the transaction should be marked as failed.
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {module:model/FailedOutgoingTransactionImage} outgoingTransactionAndImageAndErrorMessage the outgoing transaction and image information block corresponding to the failed image transfer, along with the associated error message
     * @param {module:api/TransactionsApi~transactionsTokenOutgoingFailedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTokenOutgoingFailedPost(token, outgoingTransactionAndImageAndErrorMessage, callback) {
      let postBody = outgoingTransactionAndImageAndErrorMessage;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenOutgoingFailedPost");
      }
      // verify the required parameter 'outgoingTransactionAndImageAndErrorMessage' is set
      if (outgoingTransactionAndImageAndErrorMessage === undefined || outgoingTransactionAndImageAndErrorMessage === null) {
        throw new Error("Missing the required parameter 'outgoingTransactionAndImageAndErrorMessage' when calling transactionsTokenOutgoingFailedPost");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{token}/outgoing/failed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTokenOutgoingGet operation.
     * @callback module:api/TransactionsApi~transactionsTokenOutgoingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch an image from the connected box as part of a transaction. This method is used when sending images using the poll method from a public slicebox.
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {Number} transactionid the ID of the outgoing transaction
     * @param {Number} imageid the ID of the outgoing transaction image
     * @param {module:api/TransactionsApi~transactionsTokenOutgoingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTokenOutgoingGet(token, transactionid, imageid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenOutgoingGet");
      }
      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling transactionsTokenOutgoingGet");
      }
      // verify the required parameter 'imageid' is set
      if (imageid === undefined || imageid === null) {
        throw new Error("Missing the required parameter 'imageid' when calling transactionsTokenOutgoingGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'transactionid': transactionid,
        'imageid': imageid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{token}/outgoing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTokenOutgoingPollGet operation.
     * @callback module:api/TransactionsApi~transactionsTokenOutgoingPollGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OutgoingTransactionImage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get next outgoing transaction and image (information on the next image that the connected box wishes to send to you), if any. This method is used when sending images using the poll method from a public slicebox.
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {module:api/TransactionsApi~transactionsTokenOutgoingPollGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OutgoingTransactionImage>}
     */
    transactionsTokenOutgoingPollGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenOutgoingPollGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [OutgoingTransactionImage];
      return this.apiClient.callApi(
        '/transactions/{token}/outgoing/poll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTokenStatusGet operation.
     * @callback module:api/TransactionsApi~transactionsTokenStatusGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the status of the remote incoming transaction with the supplied transaction ID
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {Number} transactionid the ID of the client's outgoing transaction
     * @param {module:api/TransactionsApi~transactionsTokenStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTokenStatusGet(token, transactionid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenStatusGet");
      }
      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling transactionsTokenStatusGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'transactionid': transactionid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{token}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTokenStatusPut operation.
     * @callback module:api/TransactionsApi~transactionsTokenStatusPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update the status of the transaction with the supplied ID
     * @param {String} token authentication token identifying the current box-to-box connection
     * @param {Number} transactionid the ID of the client's outgoing transaction
     * @param {String} transactionStatus the updated status of the transaction
     * @param {module:api/TransactionsApi~transactionsTokenStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTokenStatusPut(token, transactionid, transactionStatus, callback) {
      let postBody = transactionStatus;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling transactionsTokenStatusPut");
      }
      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling transactionsTokenStatusPut");
      }
      // verify the required parameter 'transactionStatus' is set
      if (transactionStatus === undefined || transactionStatus === null) {
        throw new Error("Missing the required parameter 'transactionStatus' when calling transactionsTokenStatusPut");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'transactionid': transactionid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{token}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
