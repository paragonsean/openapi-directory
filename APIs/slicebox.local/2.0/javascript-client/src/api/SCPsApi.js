/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Scp from '../model/Scp';

/**
* SCPs service.
* @module api/SCPsApi
* @version 2.0
*/
export default class SCPsApi {

    /**
    * Constructs a new SCPsApi. 
    * @alias module:api/SCPsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scpsGet operation.
     * @callback module:api/SCPsApi~scpsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Scp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of DICOM SCPs. Each SCP is a server for receiving DICOM images from e.g. a PACS system.
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of SCPs
     * @param {Number} [count = 20)] size of returned slice of SCPs
     * @param {module:api/SCPsApi~scpsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Scp>}
     */
    scpsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Scp];
      return this.apiClient.callApi(
        '/scps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scpsIdDelete operation.
     * @callback module:api/SCPsApi~scpsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * shut down and remove the SCP corresponding to the supplied ID
     * @param {Number} id id of SCP to remove
     * @param {module:api/SCPsApi~scpsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scpsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scpsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scpsPost operation.
     * @callback module:api/SCPsApi~scpsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new SCP for receiving DICOM images
     * @param {Object} opts Optional parameters
     * @param {module:model/Scp} [scp] SCP information. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/SCPsApi~scpsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scp}
     */
    scpsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['scp'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Scp;
      return this.apiClient.callApi(
        '/scps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
