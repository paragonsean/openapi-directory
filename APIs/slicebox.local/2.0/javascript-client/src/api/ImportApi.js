/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Image from '../model/Image';
import ImagesPostRequest from '../model/ImagesPostRequest';
import ImportSession from '../model/ImportSession';

/**
* Import service.
* @module api/ImportApi
* @version 2.0
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the importSessionsGet operation.
     * @callback module:api/ImportApi~importSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImportSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of available import sessions.
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of import sessions
     * @param {Number} [count = 20)] size of returned slice of import sessions
     * @param {module:api/ImportApi~importSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImportSession>}
     */
    importSessionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [ImportSession];
      return this.apiClient.callApi(
        '/import/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSessionsIdDelete operation.
     * @callback module:api/ImportApi~importSessionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes the import session with the supplied ID
     * @param {Number} id ID of import session to delete
     * @param {module:api/ImportApi~importSessionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importSessionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importSessionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import/sessions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSessionsIdGet operation.
     * @callback module:api/ImportApi~importSessionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the import sessions with the supplied ID
     * @param {Number} id ID of session
     * @param {module:api/ImportApi~importSessionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportSession}
     */
    importSessionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importSessionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = ImportSession;
      return this.apiClient.callApi(
        '/import/sessions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSessionsIdImagesGet operation.
     * @callback module:api/ImportApi~importSessionsIdImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the imported images corresponding to the import session with the supplied ID
     * @param {Number} id ID of import session
     * @param {module:api/ImportApi~importSessionsIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    importSessionsIdImagesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importSessionsIdImagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/import/sessions/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSessionsIdImagesPost operation.
     * @callback module:api/ImportApi~importSessionsIdImagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a DICOM dataset to the import session with the supplied ID
     * @param {Number} id ID of session
     * @param {module:model/ImagesPostRequest} imagesPostRequest 
     * @param {module:api/ImportApi~importSessionsIdImagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    importSessionsIdImagesPost(id, imagesPostRequest, callback) {
      let postBody = imagesPostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importSessionsIdImagesPost");
      }
      // verify the required parameter 'imagesPostRequest' is set
      if (imagesPostRequest === undefined || imagesPostRequest === null) {
        throw new Error("Missing the required parameter 'imagesPostRequest' when calling importSessionsIdImagesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/import/sessions/{id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSessionsPost operation.
     * @callback module:api/ImportApi~importSessionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new import sessions
     * @param {module:model/ImportSession} importSession The import session to create containing the user defined name of the session
     * @param {module:api/ImportApi~importSessionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportSession}
     */
    importSessionsPost(importSession, callback) {
      let postBody = importSession;
      // verify the required parameter 'importSession' is set
      if (importSession === undefined || importSession === null) {
        throw new Error("Missing the required parameter 'importSession' when calling importSessionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = ImportSession;
      return this.apiClient.callApi(
        '/import/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
