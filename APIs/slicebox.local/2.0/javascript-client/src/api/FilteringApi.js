/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Filter from '../model/Filter';
import SourceTagFilter from '../model/SourceTagFilter';
import TagPathTag from '../model/TagPathTag';

/**
* Filtering service.
* @module api/FilteringApi
* @version 2.0
*/
export default class FilteringApi {

    /**
    * Constructs a new FilteringApi. 
    * @alias module:api/FilteringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filteringAssociationsGet operation.
     * @callback module:api/FilteringApi~filteringAssociationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SourceTagFilter>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of source to filter associations.
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of source <-> filter associations
     * @param {Number} [count = 20)] size of returned slice of source <-> filter associations
     * @param {module:api/FilteringApi~filteringAssociationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SourceTagFilter>}
     */
    filteringAssociationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [SourceTagFilter];
      return this.apiClient.callApi(
        '/filtering/associations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringAssociationsIdDelete operation.
     * @callback module:api/FilteringApi~filteringAssociationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the source <-> filter association corresponding to the supplied ID
     * @param {Number} id id of source <-> filter association to remove
     * @param {module:api/FilteringApi~filteringAssociationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteringAssociationsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filteringAssociationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filtering/associations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringAssociationsPost operation.
     * @callback module:api/FilteringApi~filteringAssociationsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts or updates a source <-> filter associations. If the specified Source already  has an association this is updated, otherwise a new is inserted.
     * @param {module:model/SourceTagFilter} sourcetagfilter Source to Filter association
     * @param {module:api/FilteringApi~filteringAssociationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteringAssociationsPost(sourcetagfilter, callback) {
      let postBody = sourcetagfilter;
      // verify the required parameter 'sourcetagfilter' is set
      if (sourcetagfilter === undefined || sourcetagfilter === null) {
        throw new Error("Missing the required parameter 'sourcetagfilter' when calling filteringAssociationsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filtering/associations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringFiltersGet operation.
     * @callback module:api/FilteringApi~filteringFiltersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Filter>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List defined filters
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of filters
     * @param {Number} [count = 20)] size of returned slice of filters
     * @param {module:api/FilteringApi~filteringFiltersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Filter>}
     */
    filteringFiltersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Filter];
      return this.apiClient.callApi(
        '/filtering/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringFiltersIdDelete operation.
     * @callback module:api/FilteringApi~filteringFiltersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the filter corresponding to the supplied ID
     * @param {Number} id id of filter to remove
     * @param {module:api/FilteringApi~filteringFiltersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteringFiltersIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filteringFiltersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filtering/filters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringFiltersIdTagpathsGet operation.
     * @callback module:api/FilteringApi~filteringFiltersIdTagpathsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagPathTag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tagpaths for the selected filter
     * @param {Number} id id of filter
     * @param {module:api/FilteringApi~filteringFiltersIdTagpathsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagPathTag>}
     */
    filteringFiltersIdTagpathsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filteringFiltersIdTagpathsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [TagPathTag];
      return this.apiClient.callApi(
        '/filtering/filters/{id}/tagpaths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringFiltersIdTagpathsPost operation.
     * @callback module:api/FilteringApi~filteringFiltersIdTagpathsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a tagpath to a filter
     * @param {Number} id id of filter to remove
     * @param {module:model/TagPathTag} tagpath id of filter to remove
     * @param {module:api/FilteringApi~filteringFiltersIdTagpathsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteringFiltersIdTagpathsPost(id, tagpath, callback) {
      let postBody = tagpath;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filteringFiltersIdTagpathsPost");
      }
      // verify the required parameter 'tagpath' is set
      if (tagpath === undefined || tagpath === null) {
        throw new Error("Missing the required parameter 'tagpath' when calling filteringFiltersIdTagpathsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filtering/filters/{id}/tagpaths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringFiltersIdTagpathsTagpathidDelete operation.
     * @callback module:api/FilteringApi~filteringFiltersIdTagpathsTagpathidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the tagpath corresponding to the supplied ID
     * @param {Number} id id of filter
     * @param {Number} tagpathid id of TagPath to remove
     * @param {module:api/FilteringApi~filteringFiltersIdTagpathsTagpathidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteringFiltersIdTagpathsTagpathidDelete(id, tagpathid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filteringFiltersIdTagpathsTagpathidDelete");
      }
      // verify the required parameter 'tagpathid' is set
      if (tagpathid === undefined || tagpathid === null) {
        throw new Error("Missing the required parameter 'tagpathid' when calling filteringFiltersIdTagpathsTagpathidDelete");
      }

      let pathParams = {
        'id': id,
        'tagpathid': tagpathid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filtering/filters/{id}/tagpaths/{tagpathid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteringFiltersPost operation.
     * @callback module:api/FilteringApi~filteringFiltersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts or updates a filter. If a filter with same name as supplied filter exists this filter is updated, otherwise a new filter is inserted.
     * @param {module:model/Filter} tagFilter Filter
     * @param {module:api/FilteringApi~filteringFiltersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filteringFiltersPost(tagFilter, callback) {
      let postBody = tagFilter;
      // verify the required parameter 'tagFilter' is set
      if (tagFilter === undefined || tagFilter === null) {
        throw new Error("Missing the required parameter 'tagFilter' when calling filteringFiltersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filtering/filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
