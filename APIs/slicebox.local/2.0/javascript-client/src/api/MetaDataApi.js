/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FlatSeries from '../model/FlatSeries';
import Idsquery from '../model/Idsquery';
import Image from '../model/Image';
import Patient from '../model/Patient';
import Query from '../model/Query';
import Series from '../model/Series';
import Seriesidseriestypesresult from '../model/Seriesidseriestypesresult';
import Seriestag from '../model/Seriestag';
import Seriestype from '../model/Seriestype';
import Source from '../model/Source';
import Study from '../model/Study';

/**
* MetaData service.
* @module api/MetaDataApi
* @version 2.0
*/
export default class MetaDataApi {

    /**
    * Constructs a new MetaDataApi. 
    * @alias module:api/MetaDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metadataFlatseriesGet operation.
     * @callback module:api/MetaDataApi~metadataFlatseriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlatSeries>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of flattened metadata on the patient, study and series levels
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of flat series
     * @param {Number} [count = 20)] size of returned slice of flat series
     * @param {String} [orderby] flat series property to order results by
     * @param {Boolean} [orderascending = true)] order result ascendingly if true, descendingly otherwise
     * @param {String} [filter] filter the results by matching substrings of flat series properties against this value
     * @param {String} [sources] filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources=box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5.
     * @param {String} [seriestypes] filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes=3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22.
     * @param {String} [seriestags] filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags=6,2,11 shows series with either of the series tags with ids 6, 2 and 11.
     * @param {module:api/MetaDataApi~metadataFlatseriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlatSeries>}
     */
    metadataFlatseriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count'],
        'orderby': opts['orderby'],
        'orderascending': opts['orderascending'],
        'filter': opts['filter'],
        'sources': opts['sources'],
        'seriestypes': opts['seriestypes'],
        'seriestags': opts['seriestags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [FlatSeries];
      return this.apiClient.callApi(
        '/metadata/flatseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataFlatseriesIdGet operation.
     * @callback module:api/MetaDataApi~metadataFlatseriesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlatSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the flat series with the supplied ID
     * @param {Number} id ID of flat series
     * @param {module:api/MetaDataApi~metadataFlatseriesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlatSeries}
     */
    metadataFlatseriesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataFlatseriesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = FlatSeries;
      return this.apiClient.callApi(
        '/metadata/flatseries/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataFlatseriesQueryPost operation.
     * @callback module:api/MetaDataApi~metadataFlatseriesQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlatSeries>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for flat series
     * @param {module:model/Query} query parameters of flat series query
     * @param {module:api/MetaDataApi~metadataFlatseriesQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlatSeries>}
     */
    metadataFlatseriesQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling metadataFlatseriesQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [FlatSeries];
      return this.apiClient.callApi(
        '/metadata/flatseries/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataImagesGet operation.
     * @callback module:api/MetaDataApi~metadataImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metadata on the image level of the DICOM hierarchy
     * @param {Number} seriesid reference to series to list images for
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of images
     * @param {Number} [count = 20)] size of returned slice of images
     * @param {module:api/MetaDataApi~metadataImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    metadataImagesGet(seriesid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'seriesid' is set
      if (seriesid === undefined || seriesid === null) {
        throw new Error("Missing the required parameter 'seriesid' when calling metadataImagesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count'],
        'seriesid': seriesid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/metadata/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataImagesIdGet operation.
     * @callback module:api/MetaDataApi~metadataImagesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the image with the supplied ID
     * @param {Number} id ID of image
     * @param {module:api/MetaDataApi~metadataImagesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    metadataImagesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataImagesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/metadata/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataImagesQueryPost operation.
     * @callback module:api/MetaDataApi~metadataImagesQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for images
     * @param {module:model/Query} query parameters of images query
     * @param {module:api/MetaDataApi~metadataImagesQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    metadataImagesQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling metadataImagesQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/metadata/images/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataPatientsGet operation.
     * @callback module:api/MetaDataApi~metadataPatientsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Patient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metadata on the patient level of the DICOM hierarchy
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of patients
     * @param {Number} [count = 20)] size of returned slice of patients
     * @param {String} [orderby] patient property to order results by
     * @param {Boolean} [orderascending = true)] order result ascendingly if true, descendingly otherwise
     * @param {String} [filter] filter the results by matching substrings of patient properties against this value
     * @param {String} [sources] filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources=box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5.
     * @param {String} [seriestypes] filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes=3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22.
     * @param {String} [seriestags] filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags=6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11.
     * @param {module:api/MetaDataApi~metadataPatientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Patient>}
     */
    metadataPatientsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count'],
        'orderby': opts['orderby'],
        'orderascending': opts['orderascending'],
        'filter': opts['filter'],
        'sources': opts['sources'],
        'seriestypes': opts['seriestypes'],
        'seriestags': opts['seriestags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Patient];
      return this.apiClient.callApi(
        '/metadata/patients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataPatientsIdGet operation.
     * @callback module:api/MetaDataApi~metadataPatientsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the patient with the supplied ID
     * @param {Number} id ID of patient
     * @param {module:api/MetaDataApi~metadataPatientsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    metadataPatientsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataPatientsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/metadata/patients/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataPatientsIdImagesGet operation.
     * @callback module:api/MetaDataApi~metadataPatientsIdImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all images for the patient with the supplied patient ID
     * @param {Number} id ID of patient
     * @param {Object} opts Optional parameters
     * @param {String} [sources] filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources=box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5.
     * @param {String} [seriestypes] filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes=3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22.
     * @param {String} [seriestags] filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags=6,2,11 shows series with either of the series tags with ids 6, 2 and 11.
     * @param {module:api/MetaDataApi~metadataPatientsIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    metadataPatientsIdImagesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataPatientsIdImagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'sources': opts['sources'],
        'seriestypes': opts['seriestypes'],
        'seriestags': opts['seriestags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/metadata/patients/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataPatientsQueryPost operation.
     * @callback module:api/MetaDataApi~metadataPatientsQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Patient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for patients
     * @param {module:model/Query} query parameters of patient query
     * @param {module:api/MetaDataApi~metadataPatientsQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Patient>}
     */
    metadataPatientsQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling metadataPatientsQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Patient];
      return this.apiClient.callApi(
        '/metadata/patients/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesGet operation.
     * @callback module:api/MetaDataApi~metadataSeriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Series>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metadata on the series level of the DICOM hierarchy
     * @param {Number} studyid reference to study to list series for
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of series
     * @param {Number} [count = 20)] size of returned slice of series
     * @param {String} [sources] filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources=box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5.
     * @param {String} [seriestypes] filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes=3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22.
     * @param {String} [seriestags] filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags=6,2,11 shows series with either of the series tags with ids 6, 2 and 11.
     * @param {module:api/MetaDataApi~metadataSeriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Series>}
     */
    metadataSeriesGet(studyid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studyid' is set
      if (studyid === undefined || studyid === null) {
        throw new Error("Missing the required parameter 'studyid' when calling metadataSeriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count'],
        'studyid': studyid,
        'sources': opts['sources'],
        'seriestypes': opts['seriestypes'],
        'seriestags': opts['seriestags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Series];
      return this.apiClient.callApi(
        '/metadata/series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesIdGet operation.
     * @callback module:api/MetaDataApi~metadataSeriesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Series} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the series with the supplied ID
     * @param {Number} id ID of series
     * @param {module:api/MetaDataApi~metadataSeriesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Series}
     */
    metadataSeriesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataSeriesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Series;
      return this.apiClient.callApi(
        '/metadata/series/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesIdSeriestagsGet operation.
     * @callback module:api/MetaDataApi~metadataSeriesIdSeriestagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seriestag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of series tags for the series with the supplied ID.
     * @param {Number} id ID of series
     * @param {module:api/MetaDataApi~metadataSeriesIdSeriestagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seriestag>}
     */
    metadataSeriesIdSeriestagsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataSeriesIdSeriestagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Seriestag];
      return this.apiClient.callApi(
        '/metadata/series/{id}/seriestags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesIdSeriestagsPost operation.
     * @callback module:api/MetaDataApi~metadataSeriesIdSeriestagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriestag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a series tag to the series with the supplied ID
     * @param {Number} id ID of series
     * @param {module:model/Seriestag} query series tag to add
     * @param {module:api/MetaDataApi~metadataSeriesIdSeriestagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriestag}
     */
    metadataSeriesIdSeriestagsPost(id, query, callback) {
      let postBody = query;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataSeriesIdSeriestagsPost");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling metadataSeriesIdSeriestagsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Seriestag;
      return this.apiClient.callApi(
        '/metadata/series/{id}/seriestags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesIdSeriestypesDelete operation.
     * @callback module:api/MetaDataApi~metadataSeriesIdSeriestypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all series types for the series with the supplied ID
     * @param {Number} id ID of series
     * @param {module:api/MetaDataApi~metadataSeriesIdSeriestypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataSeriesIdSeriestypesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataSeriesIdSeriestypesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/series/{id}/seriestypes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesIdSeriestypesGet operation.
     * @callback module:api/MetaDataApi~metadataSeriesIdSeriestypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seriestype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of series types for the series with the supplied ID.
     * @param {Number} id ID of series
     * @param {module:api/MetaDataApi~metadataSeriesIdSeriestypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seriestype>}
     */
    metadataSeriesIdSeriestypesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataSeriesIdSeriestypesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Seriestype];
      return this.apiClient.callApi(
        '/metadata/series/{id}/seriestypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesIdSourceGet operation.
     * @callback module:api/MetaDataApi~metadataSeriesIdSourceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the source of the series with the supplied ID
     * @param {Number} id ID of series
     * @param {module:api/MetaDataApi~metadataSeriesIdSourceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    metadataSeriesIdSourceGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataSeriesIdSourceGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/metadata/series/{id}/source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesQueryPost operation.
     * @callback module:api/MetaDataApi~metadataSeriesQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Series>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for series
     * @param {module:model/Query} query parameters of series query
     * @param {module:api/MetaDataApi~metadataSeriesQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Series>}
     */
    metadataSeriesQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling metadataSeriesQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Series];
      return this.apiClient.callApi(
        '/metadata/series/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete operation.
     * @callback module:api/MetaDataApi~metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the series tag with the supplied series tag ID from the series with the supplied series ID
     * @param {Number} seriesId ID of series
     * @param {Number} seriesTagId ID of series tag to remove
     * @param {module:api/MetaDataApi~metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete(seriesId, seriesTagId, callback) {
      let postBody = null;
      // verify the required parameter 'seriesId' is set
      if (seriesId === undefined || seriesId === null) {
        throw new Error("Missing the required parameter 'seriesId' when calling metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete");
      }
      // verify the required parameter 'seriesTagId' is set
      if (seriesTagId === undefined || seriesTagId === null) {
        throw new Error("Missing the required parameter 'seriesTagId' when calling metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete");
      }

      let pathParams = {
        'seriesId': seriesId,
        'seriesTagId': seriesTagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/series/{seriesId}/seriestags/{seriesTagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete operation.
     * @callback module:api/MetaDataApi~metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the series type with the supplied series type ID from the series with the supplied series ID
     * @param {Number} seriesId ID of series
     * @param {Number} seriesTypeId ID of series type to remove
     * @param {module:api/MetaDataApi~metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete(seriesId, seriesTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'seriesId' is set
      if (seriesId === undefined || seriesId === null) {
        throw new Error("Missing the required parameter 'seriesId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete");
      }
      // verify the required parameter 'seriesTypeId' is set
      if (seriesTypeId === undefined || seriesTypeId === null) {
        throw new Error("Missing the required parameter 'seriesTypeId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete");
      }

      let pathParams = {
        'seriesId': seriesId,
        'seriesTypeId': seriesTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/series/{seriesId}/seriestypes/{seriesTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut operation.
     * @callback module:api/MetaDataApi~metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the series type with the supplied series type ID to the series with the supplied series ID
     * @param {Number} seriesId ID of series
     * @param {Number} seriesTypeId ID of series type to add
     * @param {module:api/MetaDataApi~metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut(seriesId, seriesTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'seriesId' is set
      if (seriesId === undefined || seriesId === null) {
        throw new Error("Missing the required parameter 'seriesId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut");
      }
      // verify the required parameter 'seriesTypeId' is set
      if (seriesTypeId === undefined || seriesTypeId === null) {
        throw new Error("Missing the required parameter 'seriesTypeId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut");
      }

      let pathParams = {
        'seriesId': seriesId,
        'seriesTypeId': seriesTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/series/{seriesId}/seriestypes/{seriesTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataSeriestagsGet operation.
     * @callback module:api/MetaDataApi~metadataSeriestagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seriestag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of series tags currently currently in use.
     * @param {module:api/MetaDataApi~metadataSeriestagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seriestag>}
     */
    metadataSeriestagsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Seriestag];
      return this.apiClient.callApi(
        '/metadata/seriestags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataStudiesGet operation.
     * @callback module:api/MetaDataApi~metadataStudiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Study>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metadata on the study level of the DICOM hierarchy
     * @param {Number} patientid reference to patient to list studies for
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of studies
     * @param {Number} [count = 20)] size of returned slice of studies
     * @param {String} [sources] filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources=box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5.
     * @param {String} [seriestypes] filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes=3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22.
     * @param {String} [seriestags] filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags=6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11.
     * @param {module:api/MetaDataApi~metadataStudiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Study>}
     */
    metadataStudiesGet(patientid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'patientid' is set
      if (patientid === undefined || patientid === null) {
        throw new Error("Missing the required parameter 'patientid' when calling metadataStudiesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count'],
        'patientid': patientid,
        'sources': opts['sources'],
        'seriestypes': opts['seriestypes'],
        'seriestags': opts['seriestags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Study];
      return this.apiClient.callApi(
        '/metadata/studies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataStudiesIdGet operation.
     * @callback module:api/MetaDataApi~metadataStudiesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Study} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the study with the supplied ID
     * @param {Number} id ID of study
     * @param {module:api/MetaDataApi~metadataStudiesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Study}
     */
    metadataStudiesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataStudiesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Study;
      return this.apiClient.callApi(
        '/metadata/studies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataStudiesIdImagesGet operation.
     * @callback module:api/MetaDataApi~metadataStudiesIdImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all images for the study with the supplied study ID
     * @param {Number} id ID of study
     * @param {Object} opts Optional parameters
     * @param {String} [sources] filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources=box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5.
     * @param {String} [seriestypes] filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes=3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22.
     * @param {String} [seriestags] filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags=6,2,11 shows series with either of the series tags with ids 6, 2 and 11.
     * @param {module:api/MetaDataApi~metadataStudiesIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    metadataStudiesIdImagesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling metadataStudiesIdImagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'sources': opts['sources'],
        'seriestypes': opts['seriestypes'],
        'seriestags': opts['seriestags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/metadata/studies/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataStudiesQueryPost operation.
     * @callback module:api/MetaDataApi~metadataStudiesQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Study>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for studies
     * @param {module:model/Query} query parameters of study query
     * @param {module:api/MetaDataApi~metadataStudiesQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Study>}
     */
    metadataStudiesQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling metadataStudiesQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Study];
      return this.apiClient.callApi(
        '/metadata/studies/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesSeriesQueryPost operation.
     * @callback module:api/MetaDataApi~seriestypesSeriesQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriesidseriestypesresult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for seriestypes for a list of series
     * @param {module:model/Idsquery} query parameters of series query
     * @param {module:api/MetaDataApi~seriestypesSeriesQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriesidseriestypesresult}
     */
    seriestypesSeriesQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling seriestypesSeriesQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Seriesidseriestypesresult;
      return this.apiClient.callApi(
        '/seriestypes/series/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
