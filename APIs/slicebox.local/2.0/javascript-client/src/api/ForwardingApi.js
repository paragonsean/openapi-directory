/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Forwardingrule from '../model/Forwardingrule';

/**
* Forwarding service.
* @module api/ForwardingApi
* @version 2.0
*/
export default class ForwardingApi {

    /**
    * Constructs a new ForwardingApi. 
    * @alias module:api/ForwardingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the forwardingRuleIdDelete operation.
     * @callback module:api/ForwardingApi~forwardingRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the forwarding rule corresponding to the supplied ID
     * @param {Number} id id of forwarding rule to remove
     * @param {module:api/ForwardingApi~forwardingRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forwardingRuleIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling forwardingRuleIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forwarding/rule/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forwardingRulesGet operation.
     * @callback module:api/ForwardingApi~forwardingRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Forwardingrule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of all forwarding rules. A forwarding rule specifies the automatic forwarding of images from a source (SCP, BOX, etc.) to a destimation (BOX, SCU, etc.)
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of rules
     * @param {Number} [count = 20)] size of returned slice of rules
     * @param {module:api/ForwardingApi~forwardingRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Forwardingrule>}
     */
    forwardingRulesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Forwardingrule];
      return this.apiClient.callApi(
        '/forwarding/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forwardingRulesPost operation.
     * @callback module:api/ForwardingApi~forwardingRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Forwardingrule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new forwarding rule
     * @param {Object} opts Optional parameters
     * @param {module:model/Forwardingrule} [fowardingRule] The forwarding rule to add. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/ForwardingApi~forwardingRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Forwardingrule}
     */
    forwardingRulesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['fowardingRule'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Forwardingrule;
      return this.apiClient.callApi(
        '/forwarding/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
