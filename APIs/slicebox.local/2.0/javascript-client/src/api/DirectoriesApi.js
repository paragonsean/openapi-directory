/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WatchedDirectory from '../model/WatchedDirectory';

/**
* Directories service.
* @module api/DirectoriesApi
* @version 2.0
*/
export default class DirectoriesApi {

    /**
    * Constructs a new DirectoriesApi. 
    * @alias module:api/DirectoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the directorywatchesGet operation.
     * @callback module:api/DirectoriesApi~directorywatchesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WatchedDirectory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of watch directories. Each watch directory and its sub-directories are watched for incoming DICOM files, which are read and imported into slicebox.
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of watched directories
     * @param {Number} [count = 20)] size of returned slice of watched directories
     * @param {module:api/DirectoriesApi~directorywatchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WatchedDirectory>}
     */
    directorywatchesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [WatchedDirectory];
      return this.apiClient.callApi(
        '/directorywatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the directorywatchesIdDelete operation.
     * @callback module:api/DirectoriesApi~directorywatchesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * stop watching and remove the directory corresponding to the supplied ID
     * @param {Number} id id of directory to stop watching
     * @param {module:api/DirectoriesApi~directorywatchesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    directorywatchesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling directorywatchesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/directorywatches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the directorywatchesPost operation.
     * @callback module:api/DirectoriesApi~directorywatchesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchedDirectory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new directory to watch for incoming DICOM files
     * @param {Object} opts Optional parameters
     * @param {module:model/WatchedDirectory} [watchedDirectory] directory to setup a watch for. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/DirectoriesApi~directorywatchesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchedDirectory}
     */
    directorywatchesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['watchedDirectory'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = WatchedDirectory;
      return this.apiClient.callApi(
        '/directorywatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
