/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnonymizationData from '../model/AnonymizationData';
import AnonymizationKey from '../model/AnonymizationKey';
import AnonymizationKeyQuery from '../model/AnonymizationKeyQuery';
import AnonymizationKeyValue from '../model/AnonymizationKeyValue';
import ConfidentialityOption from '../model/ConfidentialityOption';
import Image from '../model/Image';
import ImageTagValues from '../model/ImageTagValues';

/**
* Anonymization service.
* @module api/AnonymizationApi
* @version 2.0
*/
export default class AnonymizationApi {

    /**
    * Constructs a new AnonymizationApi. 
    * @alias module:api/AnonymizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the anonymizationAnonymizePost operation.
     * @callback module:api/AnonymizationApi~anonymizationAnonymizePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * anonymize the images corresponding to the supplied list of image IDs (each paired with a list of DICOM tag translation). This route corresponds to repeated use of the route /images/{id}/anonymize.
     * @param {Array.<module:model/ImageTagValues>} query parameters of anonymization key query
     * @param {module:api/AnonymizationApi~anonymizationAnonymizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    anonymizationAnonymizePost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling anonymizationAnonymizePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/anonymization/anonymize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationKeysExportCsvGet operation.
     * @callback module:api/AnonymizationApi~anonymizationKeysExportCsvGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * export all anonymization keys as a csv file
     * @param {module:api/AnonymizationApi~anonymizationKeysExportCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    anonymizationKeysExportCsvGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/anonymization/keys/export/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationKeysGet operation.
     * @callback module:api/AnonymizationApi~anonymizationKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnonymizationKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of anonymization keys, each specifying how vital DICOM attributes have been anonymized for a particular image
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of anonymization keys
     * @param {Number} [count = 20)] size of returned slice of anonymization keys
     * @param {String} [orderby] property to order results by
     * @param {Boolean} [orderascending = true)] order result ascendingly if true, descendingly otherwise
     * @param {String} [filter] filter the results by matching substrings of properties against this value
     * @param {module:api/AnonymizationApi~anonymizationKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnonymizationKey>}
     */
    anonymizationKeysGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count'],
        'orderby': opts['orderby'],
        'orderascending': opts['orderascending'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [AnonymizationKey];
      return this.apiClient.callApi(
        '/anonymization/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationKeysIdDelete operation.
     * @callback module:api/AnonymizationApi~anonymizationKeysIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an anonymization key that is no longer of interest
     * @param {Number} id ID of anonymization key
     * @param {module:api/AnonymizationApi~anonymizationKeysIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    anonymizationKeysIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling anonymizationKeysIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/anonymization/keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationKeysIdGet operation.
     * @callback module:api/AnonymizationApi~anonymizationKeysIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnonymizationKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the anonymization key with the supplied ID
     * @param {Number} id ID of anonymization key
     * @param {module:api/AnonymizationApi~anonymizationKeysIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnonymizationKey}
     */
    anonymizationKeysIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling anonymizationKeysIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = AnonymizationKey;
      return this.apiClient.callApi(
        '/anonymization/keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationKeysIdKeyvaluesGet operation.
     * @callback module:api/AnonymizationApi~anonymizationKeysIdKeyvaluesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnonymizationKeyValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get pointers to the images corresponding to the anonymization key with the supplied ID
     * @param {Number} id ID of anonymization key
     * @param {module:api/AnonymizationApi~anonymizationKeysIdKeyvaluesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnonymizationKeyValue>}
     */
    anonymizationKeysIdKeyvaluesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling anonymizationKeysIdKeyvaluesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [AnonymizationKeyValue];
      return this.apiClient.callApi(
        '/anonymization/keys/{id}/keyvalues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationKeysQueryPost operation.
     * @callback module:api/AnonymizationApi~anonymizationKeysQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnonymizationKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a query for anonymization keys
     * @param {module:model/AnonymizationKeyQuery} query parameters of anonymization key query
     * @param {module:api/AnonymizationApi~anonymizationKeysQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnonymizationKey>}
     */
    anonymizationKeysQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling anonymizationKeysQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [AnonymizationKey];
      return this.apiClient.callApi(
        '/anonymization/keys/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizationOptionsGet operation.
     * @callback module:api/AnonymizationApi~anonymizationOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfidentialityOption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all supported anonymization options defining an anonymization profile
     * @param {module:api/AnonymizationApi~anonymizationOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfidentialityOption>}
     */
    anonymizationOptionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [ConfidentialityOption];
      return this.apiClient.callApi(
        '/anonymization/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdAnonymizePut operation.
     * @callback module:api/AnonymizationApi~imagesIdAnonymizePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete the selected image and replace it with an anonymized version
     * @param {Number} id ID of image to anonymize
     * @param {module:model/AnonymizationData} tagValues specification of values for anonymous DICOM attributes
     * @param {module:api/AnonymizationApi~imagesIdAnonymizePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    imagesIdAnonymizePut(id, tagValues, callback) {
      let postBody = tagValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdAnonymizePut");
      }
      // verify the required parameter 'tagValues' is set
      if (tagValues === undefined || tagValues === null) {
        throw new Error("Missing the required parameter 'tagValues' when calling imagesIdAnonymizePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/images/{id}/anonymize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdAnonymizedPost operation.
     * @callback module:api/AnonymizationApi~imagesIdAnonymizedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an anonymized version of the image with the supplied ID
     * @param {Number} id ID of image for which to get anonymized dataset
     * @param {module:model/AnonymizationData} tagValues specification of values for anonymous DICOM attributes
     * @param {module:api/AnonymizationApi~imagesIdAnonymizedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdAnonymizedPost(id, tagValues, callback) {
      let postBody = tagValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdAnonymizedPost");
      }
      // verify the required parameter 'tagValues' is set
      if (tagValues === undefined || tagValues === null) {
        throw new Error("Missing the required parameter 'tagValues' when calling imagesIdAnonymizedPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}/anonymized', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
