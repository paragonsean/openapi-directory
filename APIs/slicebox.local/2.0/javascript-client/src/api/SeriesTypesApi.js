/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Seriestype from '../model/Seriestype';
import Seriestyperule from '../model/Seriestyperule';
import Seriestyperuleattribute from '../model/Seriestyperuleattribute';
import Seriestypeupdatestatus from '../model/Seriestypeupdatestatus';

/**
* SeriesTypes service.
* @module api/SeriesTypesApi
* @version 2.0
*/
export default class SeriesTypesApi {

    /**
    * Constructs a new SeriesTypesApi. 
    * @alias module:api/SeriesTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the seriestypesGet operation.
     * @callback module:api/SeriesTypesApi~seriestypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seriestype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of all added series types. By filtering search results for certain series types, it is easier for applications to ensure that they read images of applicable types.
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of series types
     * @param {Number} [count = 20)] size of returned slice of series types
     * @param {module:api/SeriesTypesApi~seriestypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seriestype>}
     */
    seriestypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Seriestype];
      return this.apiClient.callApi(
        '/seriestypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesIdDelete operation.
     * @callback module:api/SeriesTypesApi~seriestypesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the series type corresponding to the supplied ID
     * @param {Number} id id of series type to remove
     * @param {module:api/SeriesTypesApi~seriestypesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seriestypesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seriestypesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seriestypes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesIdPut operation.
     * @callback module:api/SeriesTypesApi~seriestypesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request an asynchronous update of all series, labelling appropriate series with the series type corresponding to the supplied ID.
     * @param {Number} id id of series type to update series labels for
     * @param {module:api/SeriesTypesApi~seriestypesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seriestypesIdPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seriestypesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seriestypes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesPost operation.
     * @callback module:api/SeriesTypesApi~seriestypesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriestype} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new series type
     * @param {Object} opts Optional parameters
     * @param {module:model/Seriestype} [seriesType] Series type information. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/SeriesTypesApi~seriestypesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriestype}
     */
    seriestypesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['seriesType'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Seriestype;
      return this.apiClient.callApi(
        '/seriestypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesGet operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seriestyperule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of rules for assigning series types to series. A rule connects to a series of attributes with values and a resulting series type. If a series has the required values of the listed attributes, it is assigned to the series type of the rule.
     * @param {Number} seriestypeid ID of series type to list rules for
     * @param {module:api/SeriesTypesApi~seriestypesRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seriestyperule>}
     */
    seriestypesRulesGet(seriestypeid, callback) {
      let postBody = null;
      // verify the required parameter 'seriestypeid' is set
      if (seriestypeid === undefined || seriestypeid === null) {
        throw new Error("Missing the required parameter 'seriestypeid' when calling seriestypesRulesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'seriestypeid': seriestypeid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Seriestyperule];
      return this.apiClient.callApi(
        '/seriestypes/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesIdAttributesGet operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesIdAttributesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seriestyperuleattribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of attributes for the series type rule with the supplied ID.
     * @param {Number} id index of series type rule to list rule attributes for
     * @param {module:api/SeriesTypesApi~seriestypesRulesIdAttributesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seriestyperuleattribute>}
     */
    seriestypesRulesIdAttributesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seriestypesRulesIdAttributesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Seriestyperuleattribute];
      return this.apiClient.callApi(
        '/seriestypes/rules/{id}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesIdAttributesPost operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesIdAttributesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriestyperuleattribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new series type rule attribute
     * @param {Number} id ID of rule
     * @param {Object} opts Optional parameters
     * @param {module:model/Seriestyperuleattribute} [seriesTypeRuleAttribute] Series type rule attribute information. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/SeriesTypesApi~seriestypesRulesIdAttributesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriestyperuleattribute}
     */
    seriestypesRulesIdAttributesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['seriesTypeRuleAttribute'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seriestypesRulesIdAttributesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Seriestyperuleattribute;
      return this.apiClient.callApi(
        '/seriestypes/rules/{id}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesIdDelete operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the series type rule corresponding to the supplied ID
     * @param {Number} id id of series type rule to remove
     * @param {module:api/SeriesTypesApi~seriestypesRulesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seriestypesRulesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seriestypesRulesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seriestypes/rules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesPost operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriestyperule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new series type rule
     * @param {Object} opts Optional parameters
     * @param {module:model/Seriestyperule} [seriesTypeRule] Series type rule information. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/SeriesTypesApi~seriestypesRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriestyperule}
     */
    seriestypesRulesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['seriesTypeRule'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Seriestyperule;
      return this.apiClient.callApi(
        '/seriestypes/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesRuleIdAttributesAttributeIdDelete operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesRuleIdAttributesAttributeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the series type rule attribute corresponding to the supplied series type and attribute IDs
     * @param {Number} ruleId id of series type rule for which to remove an attribute
     * @param {Number} attributeId id of attribute to remove
     * @param {module:api/SeriesTypesApi~seriestypesRulesRuleIdAttributesAttributeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seriestypesRulesRuleIdAttributesAttributeIdDelete(ruleId, attributeId, callback) {
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling seriestypesRulesRuleIdAttributesAttributeIdDelete");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling seriestypesRulesRuleIdAttributesAttributeIdDelete");
      }

      let pathParams = {
        'ruleId': ruleId,
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seriestypes/rules/{ruleId}/attributes/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seriestypesRulesUpdatestatusGet operation.
     * @callback module:api/SeriesTypesApi~seriestypesRulesUpdatestatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriestypeupdatestatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the status of the internal process of updating series types for series following a change of series types, rules or attributes.
     * @param {module:api/SeriesTypesApi~seriestypesRulesUpdatestatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriestypeupdatestatus}
     */
    seriestypesRulesUpdatestatusGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Seriestypeupdatestatus;
      return this.apiClient.callApi(
        '/seriestypes/rules/updatestatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
