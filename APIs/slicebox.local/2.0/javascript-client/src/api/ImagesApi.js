/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnonymizationData from '../model/AnonymizationData';
import ExportSetId from '../model/ExportSetId';
import Image from '../model/Image';
import ImageAttribute from '../model/ImageAttribute';
import ImageInformation from '../model/ImageInformation';
import ImagesPostRequest from '../model/ImagesPostRequest';
import TagMapping from '../model/TagMapping';

/**
* Images service.
* @module api/ImagesApi
* @version 2.0
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imagesDeletePost operation.
     * @callback module:api/ImagesApi~imagesDeletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * bulk delete a sequence of images according to the supplied image IDs. This is the same as a sequence of DELETE requests to /images/{id}
     * @param {Array.<Number>} imageIDs IDs of images to delete
     * @param {module:api/ImagesApi~imagesDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesDeletePost(imageIDs, callback) {
      let postBody = imageIDs;
      // verify the required parameter 'imageIDs' is set
      if (imageIDs === undefined || imageIDs === null) {
        throw new Error("Missing the required parameter 'imageIDs' when calling imagesDeletePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesExportGet operation.
     * @callback module:api/ImagesApi~imagesExportGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * download the export set with the supplied export set ID as a zip archive
     * @param {Number} id ID of export set to download
     * @param {module:api/ImagesApi~imagesExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesExportGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesExportGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesExportPost operation.
     * @callback module:api/ImagesApi~imagesExportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportSetId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an export set, a group of image IDs of images to export. The export set will contain the selected images. The export set is available for download 12 hours before it is automatically deleted.
     * @param {Array.<Number>} imageIds ids of images to export
     * @param {module:api/ImagesApi~imagesExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportSetId}
     */
    imagesExportPost(imageIds, callback) {
      let postBody = imageIds;
      // verify the required parameter 'imageIds' is set
      if (imageIds === undefined || imageIds === null) {
        throw new Error("Missing the required parameter 'imageIds' when calling imagesExportPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = ExportSetId;
      return this.apiClient.callApi(
        '/images/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdAnonymizePut_0 operation.
     * @callback module:api/ImagesApi~imagesIdAnonymizePut_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete the selected image and replace it with an anonymized version
     * @param {Number} id ID of image to anonymize
     * @param {module:model/AnonymizationData} tagValues specification of values for anonymous DICOM attributes
     * @param {module:api/ImagesApi~imagesIdAnonymizePut_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    imagesIdAnonymizePut_0(id, tagValues, callback) {
      let postBody = tagValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdAnonymizePut_0");
      }
      // verify the required parameter 'tagValues' is set
      if (tagValues === undefined || tagValues === null) {
        throw new Error("Missing the required parameter 'tagValues' when calling imagesIdAnonymizePut_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/images/{id}/anonymize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdAnonymizedPost_0 operation.
     * @callback module:api/ImagesApi~imagesIdAnonymizedPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an anonymized version of the image with the supplied ID
     * @param {Number} id ID of image for which to get anonymized dataset
     * @param {module:model/AnonymizationData} tagValues specification of values for anonymous DICOM attributes
     * @param {module:api/ImagesApi~imagesIdAnonymizedPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdAnonymizedPost_0(id, tagValues, callback) {
      let postBody = tagValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdAnonymizedPost_0");
      }
      // verify the required parameter 'tagValues' is set
      if (tagValues === undefined || tagValues === null) {
        throw new Error("Missing the required parameter 'tagValues' when calling imagesIdAnonymizedPost_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}/anonymized', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdAttributesGet operation.
     * @callback module:api/ImagesApi~imagesIdAttributesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageAttribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all DICOM attributes of the dataset corresponding to the supplied image ID
     * @param {Number} id ID of image
     * @param {module:api/ImagesApi~imagesIdAttributesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageAttribute>}
     */
    imagesIdAttributesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdAttributesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [ImageAttribute];
      return this.apiClient.callApi(
        '/images/{id}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdDelete operation.
     * @callback module:api/ImagesApi~imagesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the image with the supplied ID
     * @param {Number} id ID of image
     * @param {module:api/ImagesApi~imagesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdGet operation.
     * @callback module:api/ImagesApi~imagesIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch dataset corresponding to the supplied image ID
     * @param {Number} id ID of image
     * @param {module:api/ImagesApi~imagesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdImageinformationGet operation.
     * @callback module:api/ImagesApi~imagesIdImageinformationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get basic information about the pixel data of an image
     * @param {Number} id ID of image
     * @param {module:api/ImagesApi~imagesIdImageinformationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageInformation}
     */
    imagesIdImageinformationGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdImageinformationGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = ImageInformation;
      return this.apiClient.callApi(
        '/images/{id}/imageinformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdModifyPut operation.
     * @callback module:api/ImagesApi~imagesIdModifyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * modify and/or insert image attributes according to the input tagpath-value mappings
     * @param {Number} id ID of image to modify
     * @param {Array.<module:model/TagMapping>} tagPathValueMappings specification of tag paths and corresponding values to insert or modify
     * @param {module:api/ImagesApi~imagesIdModifyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdModifyPut(id, tagPathValueMappings, callback) {
      let postBody = tagPathValueMappings;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdModifyPut");
      }
      // verify the required parameter 'tagPathValueMappings' is set
      if (tagPathValueMappings === undefined || tagPathValueMappings === null) {
        throw new Error("Missing the required parameter 'tagPathValueMappings' when calling imagesIdModifyPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}/modify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesIdPngGet operation.
     * @callback module:api/ImagesApi~imagesIdPngGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a PNG image representation of the image corresponding to the supplied ID
     * @param {Number} id ID of image
     * @param {Object} opts Optional parameters
     * @param {Number} [framenumber = 1)] frame/slice to show
     * @param {Number} [windowmin = 0)] intensity window minimum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes
     * @param {Number} [windowmax = 0)] intensity window maximum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes
     * @param {Number} [imageheight = 0)] height of PNG image. If not specified or set to zero, the image height will equal that of the data
     * @param {module:api/ImagesApi~imagesIdPngGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imagesIdPngGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling imagesIdPngGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'framenumber': opts['framenumber'],
        'windowmin': opts['windowmin'],
        'windowmax': opts['windowmax'],
        'imageheight': opts['imageheight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/images/{id}/png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesJpegPost operation.
     * @callback module:api/ImagesApi~imagesJpegPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a JPEG image to slicebox. The image data will be wrapped in a DICOM file and added as a new series belonging to the study with the supplied ID
     * @param {Number} studyid ID of study to add new series to
     * @param {Object.<String, Object>} jpegBytes The jpeg image data
     * @param {Object} opts Optional parameters
     * @param {String} [description] DICOM series description of the resulting secondary capture series
     * @param {module:api/ImagesApi~imagesJpegPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    imagesJpegPost(studyid, jpegBytes, opts, callback) {
      opts = opts || {};
      let postBody = jpegBytes;
      // verify the required parameter 'studyid' is set
      if (studyid === undefined || studyid === null) {
        throw new Error("Missing the required parameter 'studyid' when calling imagesJpegPost");
      }
      // verify the required parameter 'jpegBytes' is set
      if (jpegBytes === undefined || jpegBytes === null) {
        throw new Error("Missing the required parameter 'jpegBytes' when calling imagesJpegPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'studyid': studyid,
        'description': opts['description']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/images/jpeg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagesPost operation.
     * @callback module:api/ImagesApi~imagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a DICOM dataset to slicebox
     * @param {module:model/ImagesPostRequest} imagesPostRequest 
     * @param {module:api/ImagesApi~imagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    imagesPost(imagesPostRequest, callback) {
      let postBody = imagesPostRequest;
      // verify the required parameter 'imagesPostRequest' is set
      if (imagesPostRequest === undefined || imagesPostRequest === null) {
        throw new Error("Missing the required parameter 'imagesPostRequest' when calling imagesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
