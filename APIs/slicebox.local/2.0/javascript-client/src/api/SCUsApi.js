/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Scu from '../model/Scu';

/**
* SCUs service.
* @module api/SCUsApi
* @version 2.0
*/
export default class SCUsApi {

    /**
    * Constructs a new SCUsApi. 
    * @alias module:api/SCUsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scusGet operation.
     * @callback module:api/SCUsApi~scusGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Scu>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a list of DICOM SCUs. Each SCU is a client for sending DICOM images to an SCP, e.g. a PACS system.
     * @param {Object} opts Optional parameters
     * @param {Number} [startindex = 0)] start index of returned slice of SCUs
     * @param {Number} [count = 20)] size of returned slice of SCUs
     * @param {module:api/SCUsApi~scusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Scu>}
     */
    scusGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startindex': opts['startindex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = [Scu];
      return this.apiClient.callApi(
        '/scus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scusIdDelete operation.
     * @callback module:api/SCUsApi~scusIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove the SCU corresponding to the supplied ID
     * @param {Number} id id of SCU to remove
     * @param {module:api/SCUsApi~scusIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scusIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scusIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scus/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scusIdSendPost operation.
     * @callback module:api/SCUsApi~scusIdSendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send the images with the supplied image IDs to a DICOM SCP using the the SCU with the supplied scu ID
     * @param {Number} id id of SCU to use for sending
     * @param {Array.<Number>} imageids array of ids of images to send
     * @param {module:api/SCUsApi~scusIdSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scusIdSendPost(id, imageids, callback) {
      let postBody = imageids;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scusIdSendPost");
      }
      // verify the required parameter 'imageids' is set
      if (imageids === undefined || imageids === null) {
        throw new Error("Missing the required parameter 'imageids' when calling scusIdSendPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scus/{id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scusPost operation.
     * @callback module:api/SCUsApi~scusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scu} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new SCU for sending DICOM images
     * @param {Object} opts Optional parameters
     * @param {module:model/Scu} [scu] SCU information. The ID property is irrelevant, the ID of the inserted record is present in the returned data.
     * @param {module:api/SCUsApi~scusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scu}
     */
    scusPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['scu'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/octet-stream', 'multipart/form-data'];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Scu;
      return this.apiClient.callApi(
        '/scus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
