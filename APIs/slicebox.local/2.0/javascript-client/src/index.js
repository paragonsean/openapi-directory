/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AnonymizationData from './model/AnonymizationData';
import AnonymizationKey from './model/AnonymizationKey';
import AnonymizationKeyQuery from './model/AnonymizationKeyQuery';
import AnonymizationKeyValue from './model/AnonymizationKeyValue';
import AnonymizationProfile from './model/AnonymizationProfile';
import Box from './model/Box';
import BulkAnonymizationData from './model/BulkAnonymizationData';
import ConfidentialityOption from './model/ConfidentialityOption';
import Destination from './model/Destination';
import DicomPropertyValue from './model/DicomPropertyValue';
import ExportSetId from './model/ExportSetId';
import FailedOutgoingTransactionImage from './model/FailedOutgoingTransactionImage';
import Filter from './model/Filter';
import FlatSeries from './model/FlatSeries';
import Forwardingrule from './model/Forwardingrule';
import Idsquery from './model/Idsquery';
import Image from './model/Image';
import ImageAttribute from './model/ImageAttribute';
import ImageInformation from './model/ImageInformation';
import ImageTagValues from './model/ImageTagValues';
import ImagesPostRequest from './model/ImagesPostRequest';
import ImportSession from './model/ImportSession';
import IncomingTransaction from './model/IncomingTransaction';
import LogEntry from './model/LogEntry';
import NewUser from './model/NewUser';
import OutgoingImage from './model/OutgoingImage';
import OutgoingTransaction from './model/OutgoingTransaction';
import OutgoingTransactionImage from './model/OutgoingTransactionImage';
import Patient from './model/Patient';
import Query from './model/Query';
import QueryFilters from './model/QueryFilters';
import QueryOrder from './model/QueryOrder';
import QueryProperty from './model/QueryProperty';
import RemoteBox from './model/RemoteBox';
import RemoteBoxConnectionData from './model/RemoteBoxConnectionData';
import Scp from './model/Scp';
import Scu from './model/Scu';
import Series from './model/Series';
import Seriesidseriestype from './model/Seriesidseriestype';
import Seriesidseriestypesresult from './model/Seriesidseriestypesresult';
import Seriestag from './model/Seriestag';
import Seriestype from './model/Seriestype';
import Seriestyperule from './model/Seriestyperule';
import Seriestyperuleattribute from './model/Seriestyperuleattribute';
import Seriestypeupdatestatus from './model/Seriestypeupdatestatus';
import Source from './model/Source';
import SourceRef from './model/SourceRef';
import SourceTagFilter from './model/SourceTagFilter';
import Study from './model/Study';
import TagMapping from './model/TagMapping';
import TagPathTag from './model/TagPathTag';
import TagPathTrunk from './model/TagPathTrunk';
import TagValue from './model/TagValue';
import User from './model/User';
import UserInfo from './model/UserInfo';
import UserPass from './model/UserPass';
import WatchedDirectory from './model/WatchedDirectory';
import AnonymizationApi from './api/AnonymizationApi';
import BoxesApi from './api/BoxesApi';
import DirectoriesApi from './api/DirectoriesApi';
import FilteringApi from './api/FilteringApi';
import ForwardingApi from './api/ForwardingApi';
import GeneralApi from './api/GeneralApi';
import ImagesApi from './api/ImagesApi';
import ImportApi from './api/ImportApi';
import LogsApi from './api/LogsApi';
import MetaDataApi from './api/MetaDataApi';
import SCPsApi from './api/SCPsApi';
import SCUsApi from './api/SCUsApi';
import SeriesTypesApi from './api/SeriesTypesApi';
import TransactionsApi from './api/TransactionsApi';
import UsersApi from './api/UsersApi';


/**
* Slicebox - safe sharing of medical images.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SliceboxApi = require('index'); // See note below*.
* var xxxSvc = new SliceboxApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SliceboxApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SliceboxApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SliceboxApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AnonymizationData model constructor.
     * @property {module:model/AnonymizationData}
     */
    AnonymizationData,

    /**
     * The AnonymizationKey model constructor.
     * @property {module:model/AnonymizationKey}
     */
    AnonymizationKey,

    /**
     * The AnonymizationKeyQuery model constructor.
     * @property {module:model/AnonymizationKeyQuery}
     */
    AnonymizationKeyQuery,

    /**
     * The AnonymizationKeyValue model constructor.
     * @property {module:model/AnonymizationKeyValue}
     */
    AnonymizationKeyValue,

    /**
     * The AnonymizationProfile model constructor.
     * @property {module:model/AnonymizationProfile}
     */
    AnonymizationProfile,

    /**
     * The Box model constructor.
     * @property {module:model/Box}
     */
    Box,

    /**
     * The BulkAnonymizationData model constructor.
     * @property {module:model/BulkAnonymizationData}
     */
    BulkAnonymizationData,

    /**
     * The ConfidentialityOption model constructor.
     * @property {module:model/ConfidentialityOption}
     */
    ConfidentialityOption,

    /**
     * The Destination model constructor.
     * @property {module:model/Destination}
     */
    Destination,

    /**
     * The DicomPropertyValue model constructor.
     * @property {module:model/DicomPropertyValue}
     */
    DicomPropertyValue,

    /**
     * The ExportSetId model constructor.
     * @property {module:model/ExportSetId}
     */
    ExportSetId,

    /**
     * The FailedOutgoingTransactionImage model constructor.
     * @property {module:model/FailedOutgoingTransactionImage}
     */
    FailedOutgoingTransactionImage,

    /**
     * The Filter model constructor.
     * @property {module:model/Filter}
     */
    Filter,

    /**
     * The FlatSeries model constructor.
     * @property {module:model/FlatSeries}
     */
    FlatSeries,

    /**
     * The Forwardingrule model constructor.
     * @property {module:model/Forwardingrule}
     */
    Forwardingrule,

    /**
     * The Idsquery model constructor.
     * @property {module:model/Idsquery}
     */
    Idsquery,

    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image,

    /**
     * The ImageAttribute model constructor.
     * @property {module:model/ImageAttribute}
     */
    ImageAttribute,

    /**
     * The ImageInformation model constructor.
     * @property {module:model/ImageInformation}
     */
    ImageInformation,

    /**
     * The ImageTagValues model constructor.
     * @property {module:model/ImageTagValues}
     */
    ImageTagValues,

    /**
     * The ImagesPostRequest model constructor.
     * @property {module:model/ImagesPostRequest}
     */
    ImagesPostRequest,

    /**
     * The ImportSession model constructor.
     * @property {module:model/ImportSession}
     */
    ImportSession,

    /**
     * The IncomingTransaction model constructor.
     * @property {module:model/IncomingTransaction}
     */
    IncomingTransaction,

    /**
     * The LogEntry model constructor.
     * @property {module:model/LogEntry}
     */
    LogEntry,

    /**
     * The NewUser model constructor.
     * @property {module:model/NewUser}
     */
    NewUser,

    /**
     * The OutgoingImage model constructor.
     * @property {module:model/OutgoingImage}
     */
    OutgoingImage,

    /**
     * The OutgoingTransaction model constructor.
     * @property {module:model/OutgoingTransaction}
     */
    OutgoingTransaction,

    /**
     * The OutgoingTransactionImage model constructor.
     * @property {module:model/OutgoingTransactionImage}
     */
    OutgoingTransactionImage,

    /**
     * The Patient model constructor.
     * @property {module:model/Patient}
     */
    Patient,

    /**
     * The Query model constructor.
     * @property {module:model/Query}
     */
    Query,

    /**
     * The QueryFilters model constructor.
     * @property {module:model/QueryFilters}
     */
    QueryFilters,

    /**
     * The QueryOrder model constructor.
     * @property {module:model/QueryOrder}
     */
    QueryOrder,

    /**
     * The QueryProperty model constructor.
     * @property {module:model/QueryProperty}
     */
    QueryProperty,

    /**
     * The RemoteBox model constructor.
     * @property {module:model/RemoteBox}
     */
    RemoteBox,

    /**
     * The RemoteBoxConnectionData model constructor.
     * @property {module:model/RemoteBoxConnectionData}
     */
    RemoteBoxConnectionData,

    /**
     * The Scp model constructor.
     * @property {module:model/Scp}
     */
    Scp,

    /**
     * The Scu model constructor.
     * @property {module:model/Scu}
     */
    Scu,

    /**
     * The Series model constructor.
     * @property {module:model/Series}
     */
    Series,

    /**
     * The Seriesidseriestype model constructor.
     * @property {module:model/Seriesidseriestype}
     */
    Seriesidseriestype,

    /**
     * The Seriesidseriestypesresult model constructor.
     * @property {module:model/Seriesidseriestypesresult}
     */
    Seriesidseriestypesresult,

    /**
     * The Seriestag model constructor.
     * @property {module:model/Seriestag}
     */
    Seriestag,

    /**
     * The Seriestype model constructor.
     * @property {module:model/Seriestype}
     */
    Seriestype,

    /**
     * The Seriestyperule model constructor.
     * @property {module:model/Seriestyperule}
     */
    Seriestyperule,

    /**
     * The Seriestyperuleattribute model constructor.
     * @property {module:model/Seriestyperuleattribute}
     */
    Seriestyperuleattribute,

    /**
     * The Seriestypeupdatestatus model constructor.
     * @property {module:model/Seriestypeupdatestatus}
     */
    Seriestypeupdatestatus,

    /**
     * The Source model constructor.
     * @property {module:model/Source}
     */
    Source,

    /**
     * The SourceRef model constructor.
     * @property {module:model/SourceRef}
     */
    SourceRef,

    /**
     * The SourceTagFilter model constructor.
     * @property {module:model/SourceTagFilter}
     */
    SourceTagFilter,

    /**
     * The Study model constructor.
     * @property {module:model/Study}
     */
    Study,

    /**
     * The TagMapping model constructor.
     * @property {module:model/TagMapping}
     */
    TagMapping,

    /**
     * The TagPathTag model constructor.
     * @property {module:model/TagPathTag}
     */
    TagPathTag,

    /**
     * The TagPathTrunk model constructor.
     * @property {module:model/TagPathTrunk}
     */
    TagPathTrunk,

    /**
     * The TagValue model constructor.
     * @property {module:model/TagValue}
     */
    TagValue,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserInfo model constructor.
     * @property {module:model/UserInfo}
     */
    UserInfo,

    /**
     * The UserPass model constructor.
     * @property {module:model/UserPass}
     */
    UserPass,

    /**
     * The WatchedDirectory model constructor.
     * @property {module:model/WatchedDirectory}
     */
    WatchedDirectory,

    /**
    * The AnonymizationApi service constructor.
    * @property {module:api/AnonymizationApi}
    */
    AnonymizationApi,

    /**
    * The BoxesApi service constructor.
    * @property {module:api/BoxesApi}
    */
    BoxesApi,

    /**
    * The DirectoriesApi service constructor.
    * @property {module:api/DirectoriesApi}
    */
    DirectoriesApi,

    /**
    * The FilteringApi service constructor.
    * @property {module:api/FilteringApi}
    */
    FilteringApi,

    /**
    * The ForwardingApi service constructor.
    * @property {module:api/ForwardingApi}
    */
    ForwardingApi,

    /**
    * The GeneralApi service constructor.
    * @property {module:api/GeneralApi}
    */
    GeneralApi,

    /**
    * The ImagesApi service constructor.
    * @property {module:api/ImagesApi}
    */
    ImagesApi,

    /**
    * The ImportApi service constructor.
    * @property {module:api/ImportApi}
    */
    ImportApi,

    /**
    * The LogsApi service constructor.
    * @property {module:api/LogsApi}
    */
    LogsApi,

    /**
    * The MetaDataApi service constructor.
    * @property {module:api/MetaDataApi}
    */
    MetaDataApi,

    /**
    * The SCPsApi service constructor.
    * @property {module:api/SCPsApi}
    */
    SCPsApi,

    /**
    * The SCUsApi service constructor.
    * @property {module:api/SCUsApi}
    */
    SCUsApi,

    /**
    * The SeriesTypesApi service constructor.
    * @property {module:api/SeriesTypesApi}
    */
    SeriesTypesApi,

    /**
    * The TransactionsApi service constructor.
    * @property {module:api/TransactionsApi}
    */
    TransactionsApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
