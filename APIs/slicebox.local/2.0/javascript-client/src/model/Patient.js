/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DicomPropertyValue from './DicomPropertyValue';

/**
 * The Patient model module.
 * @module model/Patient
 * @version 2.0
 */
class Patient {
    /**
     * Constructs a new <code>Patient</code>.
     * @alias module:model/Patient
     */
    constructor() { 
        
        Patient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Patient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Patient} obj Optional instance to populate.
     * @return {module:model/Patient} The populated <code>Patient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Patient();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('patientBirthDate')) {
                obj['patientBirthDate'] = DicomPropertyValue.constructFromObject(data['patientBirthDate']);
            }
            if (data.hasOwnProperty('patientID')) {
                obj['patientID'] = DicomPropertyValue.constructFromObject(data['patientID']);
            }
            if (data.hasOwnProperty('patientName')) {
                obj['patientName'] = DicomPropertyValue.constructFromObject(data['patientName']);
            }
            if (data.hasOwnProperty('patientSex')) {
                obj['patientSex'] = DicomPropertyValue.constructFromObject(data['patientSex']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Patient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Patient</code>.
     */
    static validateJSON(data) {
        // validate the optional field `patientBirthDate`
        if (data['patientBirthDate']) { // data not null
          DicomPropertyValue.validateJSON(data['patientBirthDate']);
        }
        // validate the optional field `patientID`
        if (data['patientID']) { // data not null
          DicomPropertyValue.validateJSON(data['patientID']);
        }
        // validate the optional field `patientName`
        if (data['patientName']) { // data not null
          DicomPropertyValue.validateJSON(data['patientName']);
        }
        // validate the optional field `patientSex`
        if (data['patientSex']) { // data not null
          DicomPropertyValue.validateJSON(data['patientSex']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Patient.prototype['id'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} patientBirthDate
 */
Patient.prototype['patientBirthDate'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} patientID
 */
Patient.prototype['patientID'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} patientName
 */
Patient.prototype['patientName'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} patientSex
 */
Patient.prototype['patientSex'] = undefined;






export default Patient;

