/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DicomPropertyValue from './DicomPropertyValue';

/**
 * The Image model module.
 * @module model/Image
 * @version 2.0
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * @alias module:model/Image
     */
    constructor() { 
        
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = DicomPropertyValue.constructFromObject(data['imageType']);
            }
            if (data.hasOwnProperty('instanceNumber')) {
                obj['instanceNumber'] = DicomPropertyValue.constructFromObject(data['instanceNumber']);
            }
            if (data.hasOwnProperty('seriesId')) {
                obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'Number');
            }
            if (data.hasOwnProperty('sopInstanceUID')) {
                obj['sopInstanceUID'] = DicomPropertyValue.constructFromObject(data['sopInstanceUID']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // validate the optional field `imageType`
        if (data['imageType']) { // data not null
          DicomPropertyValue.validateJSON(data['imageType']);
        }
        // validate the optional field `instanceNumber`
        if (data['instanceNumber']) { // data not null
          DicomPropertyValue.validateJSON(data['instanceNumber']);
        }
        // validate the optional field `sopInstanceUID`
        if (data['sopInstanceUID']) { // data not null
          DicomPropertyValue.validateJSON(data['sopInstanceUID']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Image.prototype['id'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} imageType
 */
Image.prototype['imageType'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} instanceNumber
 */
Image.prototype['instanceNumber'] = undefined;

/**
 * @member {Number} seriesId
 */
Image.prototype['seriesId'] = undefined;

/**
 * @member {module:model/DicomPropertyValue} sopInstanceUID
 */
Image.prototype['sopInstanceUID'] = undefined;






export default Image;

