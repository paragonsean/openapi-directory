/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SliceboxApi);
  }
}(this, function(expect, SliceboxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SliceboxApi.ImagesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImagesApi', function() {
    describe('imagesDeletePost', function() {
      it('should call imagesDeletePost successfully', function(done) {
        //uncomment below and update the code to test imagesDeletePost
        //instance.imagesDeletePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesExportGet', function() {
      it('should call imagesExportGet successfully', function(done) {
        //uncomment below and update the code to test imagesExportGet
        //instance.imagesExportGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesExportPost', function() {
      it('should call imagesExportPost successfully', function(done) {
        //uncomment below and update the code to test imagesExportPost
        //instance.imagesExportPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdAnonymizePut_0', function() {
      it('should call imagesIdAnonymizePut_0 successfully', function(done) {
        //uncomment below and update the code to test imagesIdAnonymizePut_0
        //instance.imagesIdAnonymizePut_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdAnonymizedPost_0', function() {
      it('should call imagesIdAnonymizedPost_0 successfully', function(done) {
        //uncomment below and update the code to test imagesIdAnonymizedPost_0
        //instance.imagesIdAnonymizedPost_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdAttributesGet', function() {
      it('should call imagesIdAttributesGet successfully', function(done) {
        //uncomment below and update the code to test imagesIdAttributesGet
        //instance.imagesIdAttributesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdDelete', function() {
      it('should call imagesIdDelete successfully', function(done) {
        //uncomment below and update the code to test imagesIdDelete
        //instance.imagesIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdGet', function() {
      it('should call imagesIdGet successfully', function(done) {
        //uncomment below and update the code to test imagesIdGet
        //instance.imagesIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdImageinformationGet', function() {
      it('should call imagesIdImageinformationGet successfully', function(done) {
        //uncomment below and update the code to test imagesIdImageinformationGet
        //instance.imagesIdImageinformationGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdModifyPut', function() {
      it('should call imagesIdModifyPut successfully', function(done) {
        //uncomment below and update the code to test imagesIdModifyPut
        //instance.imagesIdModifyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesIdPngGet', function() {
      it('should call imagesIdPngGet successfully', function(done) {
        //uncomment below and update the code to test imagesIdPngGet
        //instance.imagesIdPngGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesJpegPost', function() {
      it('should call imagesJpegPost successfully', function(done) {
        //uncomment below and update the code to test imagesJpegPost
        //instance.imagesJpegPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imagesPost', function() {
      it('should call imagesPost successfully', function(done) {
        //uncomment below and update the code to test imagesPost
        //instance.imagesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
