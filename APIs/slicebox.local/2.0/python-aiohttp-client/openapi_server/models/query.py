# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_filters import QueryFilters
from openapi_server.models.query_order import QueryOrder
from openapi_server.models.query_property import QueryProperty
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, filters: QueryFilters=None, order: QueryOrder=None, query_properties: List[QueryProperty]=None, start_index: int=None):
        """Query - a model defined in OpenAPI

        :param count: The count of this Query.
        :param filters: The filters of this Query.
        :param order: The order of this Query.
        :param query_properties: The query_properties of this Query.
        :param start_index: The start_index of this Query.
        """
        self.openapi_types = {
            'count': int,
            'filters': QueryFilters,
            'order': QueryOrder,
            'query_properties': List[QueryProperty],
            'start_index': int
        }

        self.attribute_map = {
            'count': 'count',
            'filters': 'filters',
            'order': 'order',
            'query_properties': 'queryProperties',
            'start_index': 'startIndex'
        }

        self._count = count
        self._filters = filters
        self._order = order
        self._query_properties = query_properties
        self._start_index = start_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The query of this Query.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Query.


        :return: The count of this Query.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Query.


        :param count: The count of this Query.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def filters(self):
        """Gets the filters of this Query.


        :return: The filters of this Query.
        :rtype: QueryFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Query.


        :param filters: The filters of this Query.
        :type filters: QueryFilters
        """

        self._filters = filters

    @property
    def order(self):
        """Gets the order of this Query.


        :return: The order of this Query.
        :rtype: QueryOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Query.


        :param order: The order of this Query.
        :type order: QueryOrder
        """

        self._order = order

    @property
    def query_properties(self):
        """Gets the query_properties of this Query.


        :return: The query_properties of this Query.
        :rtype: List[QueryProperty]
        """
        return self._query_properties

    @query_properties.setter
    def query_properties(self, query_properties):
        """Sets the query_properties of this Query.


        :param query_properties: The query_properties of this Query.
        :type query_properties: List[QueryProperty]
        """
        if query_properties is None:
            raise ValueError("Invalid value for `query_properties`, must not be `None`")

        self._query_properties = query_properties

    @property
    def start_index(self):
        """Gets the start_index of this Query.


        :return: The start_index of this Query.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this Query.


        :param start_index: The start_index of this Query.
        :type start_index: int
        """
        if start_index is None:
            raise ValueError("Invalid value for `start_index`, must not be `None`")

        self._start_index = start_index
