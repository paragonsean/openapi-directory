# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IncomingTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, box_id: int=None, box_name: str=None, id: int=None, outgoing_transaction_id: int=None, received_image_count: int=None, status: str=None, total_image_count: int=None, updated: int=None):
        """IncomingTransaction - a model defined in OpenAPI

        :param box_id: The box_id of this IncomingTransaction.
        :param box_name: The box_name of this IncomingTransaction.
        :param id: The id of this IncomingTransaction.
        :param outgoing_transaction_id: The outgoing_transaction_id of this IncomingTransaction.
        :param received_image_count: The received_image_count of this IncomingTransaction.
        :param status: The status of this IncomingTransaction.
        :param total_image_count: The total_image_count of this IncomingTransaction.
        :param updated: The updated of this IncomingTransaction.
        """
        self.openapi_types = {
            'box_id': int,
            'box_name': str,
            'id': int,
            'outgoing_transaction_id': int,
            'received_image_count': int,
            'status': str,
            'total_image_count': int,
            'updated': int
        }

        self.attribute_map = {
            'box_id': 'boxId',
            'box_name': 'boxName',
            'id': 'id',
            'outgoing_transaction_id': 'outgoingTransactionId',
            'received_image_count': 'receivedImageCount',
            'status': 'status',
            'total_image_count': 'totalImageCount',
            'updated': 'updated'
        }

        self._box_id = box_id
        self._box_name = box_name
        self._id = id
        self._outgoing_transaction_id = outgoing_transaction_id
        self._received_image_count = received_image_count
        self._status = status
        self._total_image_count = total_image_count
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncomingTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The incomingTransaction of this IncomingTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def box_id(self):
        """Gets the box_id of this IncomingTransaction.


        :return: The box_id of this IncomingTransaction.
        :rtype: int
        """
        return self._box_id

    @box_id.setter
    def box_id(self, box_id):
        """Sets the box_id of this IncomingTransaction.


        :param box_id: The box_id of this IncomingTransaction.
        :type box_id: int
        """

        self._box_id = box_id

    @property
    def box_name(self):
        """Gets the box_name of this IncomingTransaction.


        :return: The box_name of this IncomingTransaction.
        :rtype: str
        """
        return self._box_name

    @box_name.setter
    def box_name(self, box_name):
        """Sets the box_name of this IncomingTransaction.


        :param box_name: The box_name of this IncomingTransaction.
        :type box_name: str
        """

        self._box_name = box_name

    @property
    def id(self):
        """Gets the id of this IncomingTransaction.


        :return: The id of this IncomingTransaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncomingTransaction.


        :param id: The id of this IncomingTransaction.
        :type id: int
        """

        self._id = id

    @property
    def outgoing_transaction_id(self):
        """Gets the outgoing_transaction_id of this IncomingTransaction.


        :return: The outgoing_transaction_id of this IncomingTransaction.
        :rtype: int
        """
        return self._outgoing_transaction_id

    @outgoing_transaction_id.setter
    def outgoing_transaction_id(self, outgoing_transaction_id):
        """Sets the outgoing_transaction_id of this IncomingTransaction.


        :param outgoing_transaction_id: The outgoing_transaction_id of this IncomingTransaction.
        :type outgoing_transaction_id: int
        """

        self._outgoing_transaction_id = outgoing_transaction_id

    @property
    def received_image_count(self):
        """Gets the received_image_count of this IncomingTransaction.


        :return: The received_image_count of this IncomingTransaction.
        :rtype: int
        """
        return self._received_image_count

    @received_image_count.setter
    def received_image_count(self, received_image_count):
        """Sets the received_image_count of this IncomingTransaction.


        :param received_image_count: The received_image_count of this IncomingTransaction.
        :type received_image_count: int
        """

        self._received_image_count = received_image_count

    @property
    def status(self):
        """Gets the status of this IncomingTransaction.


        :return: The status of this IncomingTransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IncomingTransaction.


        :param status: The status of this IncomingTransaction.
        :type status: str
        """

        self._status = status

    @property
    def total_image_count(self):
        """Gets the total_image_count of this IncomingTransaction.


        :return: The total_image_count of this IncomingTransaction.
        :rtype: int
        """
        return self._total_image_count

    @total_image_count.setter
    def total_image_count(self, total_image_count):
        """Sets the total_image_count of this IncomingTransaction.


        :param total_image_count: The total_image_count of this IncomingTransaction.
        :type total_image_count: int
        """

        self._total_image_count = total_image_count

    @property
    def updated(self):
        """Gets the updated of this IncomingTransaction.


        :return: The updated of this IncomingTransaction.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this IncomingTransaction.


        :param updated: The updated of this IncomingTransaction.
        :type updated: int
        """

        self._updated = updated
