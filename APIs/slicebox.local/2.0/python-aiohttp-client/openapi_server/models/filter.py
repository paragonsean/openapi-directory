# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_path_tag import TagPathTag
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, tag_filter_type: str=None, tags: List[TagPathTag]=None):
        """Filter - a model defined in OpenAPI

        :param id: The id of this Filter.
        :param name: The name of this Filter.
        :param tag_filter_type: The tag_filter_type of this Filter.
        :param tags: The tags of this Filter.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'tag_filter_type': str,
            'tags': List[TagPathTag]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'tag_filter_type': 'tagFilterType',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._tag_filter_type = tag_filter_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Filter.


        :return: The id of this Filter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Filter.


        :param id: The id of this Filter.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Filter.


        :return: The name of this Filter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Filter.


        :param name: The name of this Filter.
        :type name: str
        """

        self._name = name

    @property
    def tag_filter_type(self):
        """Gets the tag_filter_type of this Filter.


        :return: The tag_filter_type of this Filter.
        :rtype: str
        """
        return self._tag_filter_type

    @tag_filter_type.setter
    def tag_filter_type(self, tag_filter_type):
        """Sets the tag_filter_type of this Filter.


        :param tag_filter_type: The tag_filter_type of this Filter.
        :type tag_filter_type: str
        """

        self._tag_filter_type = tag_filter_type

    @property
    def tags(self):
        """Gets the tags of this Filter.


        :return: The tags of this Filter.
        :rtype: List[TagPathTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Filter.


        :param tags: The tags of this Filter.
        :type tags: List[TagPathTag]
        """

        self._tags = tags
