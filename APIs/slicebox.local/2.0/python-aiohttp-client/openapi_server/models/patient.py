# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dicom_property_value import DicomPropertyValue
from openapi_server import util


class Patient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, patient_birth_date: DicomPropertyValue=None, patient_id: DicomPropertyValue=None, patient_name: DicomPropertyValue=None, patient_sex: DicomPropertyValue=None):
        """Patient - a model defined in OpenAPI

        :param id: The id of this Patient.
        :param patient_birth_date: The patient_birth_date of this Patient.
        :param patient_id: The patient_id of this Patient.
        :param patient_name: The patient_name of this Patient.
        :param patient_sex: The patient_sex of this Patient.
        """
        self.openapi_types = {
            'id': int,
            'patient_birth_date': DicomPropertyValue,
            'patient_id': DicomPropertyValue,
            'patient_name': DicomPropertyValue,
            'patient_sex': DicomPropertyValue
        }

        self.attribute_map = {
            'id': 'id',
            'patient_birth_date': 'patientBirthDate',
            'patient_id': 'patientID',
            'patient_name': 'patientName',
            'patient_sex': 'patientSex'
        }

        self._id = id
        self._patient_birth_date = patient_birth_date
        self._patient_id = patient_id
        self._patient_name = patient_name
        self._patient_sex = patient_sex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Patient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The patient of this Patient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Patient.


        :return: The id of this Patient.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Patient.


        :param id: The id of this Patient.
        :type id: int
        """

        self._id = id

    @property
    def patient_birth_date(self):
        """Gets the patient_birth_date of this Patient.


        :return: The patient_birth_date of this Patient.
        :rtype: DicomPropertyValue
        """
        return self._patient_birth_date

    @patient_birth_date.setter
    def patient_birth_date(self, patient_birth_date):
        """Sets the patient_birth_date of this Patient.


        :param patient_birth_date: The patient_birth_date of this Patient.
        :type patient_birth_date: DicomPropertyValue
        """

        self._patient_birth_date = patient_birth_date

    @property
    def patient_id(self):
        """Gets the patient_id of this Patient.


        :return: The patient_id of this Patient.
        :rtype: DicomPropertyValue
        """
        return self._patient_id

    @patient_id.setter
    def patient_id(self, patient_id):
        """Sets the patient_id of this Patient.


        :param patient_id: The patient_id of this Patient.
        :type patient_id: DicomPropertyValue
        """

        self._patient_id = patient_id

    @property
    def patient_name(self):
        """Gets the patient_name of this Patient.


        :return: The patient_name of this Patient.
        :rtype: DicomPropertyValue
        """
        return self._patient_name

    @patient_name.setter
    def patient_name(self, patient_name):
        """Sets the patient_name of this Patient.


        :param patient_name: The patient_name of this Patient.
        :type patient_name: DicomPropertyValue
        """

        self._patient_name = patient_name

    @property
    def patient_sex(self):
        """Gets the patient_sex of this Patient.


        :return: The patient_sex of this Patient.
        :rtype: DicomPropertyValue
        """
        return self._patient_sex

    @patient_sex.setter
    def patient_sex(self, patient_sex):
        """Sets the patient_sex of this Patient.


        :param patient_sex: The patient_sex of this Patient.
        :type patient_sex: DicomPropertyValue
        """

        self._patient_sex = patient_sex
