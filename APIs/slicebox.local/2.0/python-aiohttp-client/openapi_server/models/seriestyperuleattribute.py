# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Seriestyperuleattribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element: int=None, group: int=None, id: int=None, path: str=None, series_type_rule_id: int=None, value: str=None):
        """Seriestyperuleattribute - a model defined in OpenAPI

        :param element: The element of this Seriestyperuleattribute.
        :param group: The group of this Seriestyperuleattribute.
        :param id: The id of this Seriestyperuleattribute.
        :param path: The path of this Seriestyperuleattribute.
        :param series_type_rule_id: The series_type_rule_id of this Seriestyperuleattribute.
        :param value: The value of this Seriestyperuleattribute.
        """
        self.openapi_types = {
            'element': int,
            'group': int,
            'id': int,
            'path': str,
            'series_type_rule_id': int,
            'value': str
        }

        self.attribute_map = {
            'element': 'element',
            'group': 'group',
            'id': 'id',
            'path': 'path',
            'series_type_rule_id': 'seriesTypeRuleId',
            'value': 'value'
        }

        self._element = element
        self._group = group
        self._id = id
        self._path = path
        self._series_type_rule_id = series_type_rule_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Seriestyperuleattribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The seriestyperuleattribute of this Seriestyperuleattribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element(self):
        """Gets the element of this Seriestyperuleattribute.


        :return: The element of this Seriestyperuleattribute.
        :rtype: int
        """
        return self._element

    @element.setter
    def element(self, element):
        """Sets the element of this Seriestyperuleattribute.


        :param element: The element of this Seriestyperuleattribute.
        :type element: int
        """
        if element is None:
            raise ValueError("Invalid value for `element`, must not be `None`")

        self._element = element

    @property
    def group(self):
        """Gets the group of this Seriestyperuleattribute.


        :return: The group of this Seriestyperuleattribute.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Seriestyperuleattribute.


        :param group: The group of this Seriestyperuleattribute.
        :type group: int
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def id(self):
        """Gets the id of this Seriestyperuleattribute.


        :return: The id of this Seriestyperuleattribute.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Seriestyperuleattribute.


        :param id: The id of this Seriestyperuleattribute.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def path(self):
        """Gets the path of this Seriestyperuleattribute.


        :return: The path of this Seriestyperuleattribute.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Seriestyperuleattribute.


        :param path: The path of this Seriestyperuleattribute.
        :type path: str
        """

        self._path = path

    @property
    def series_type_rule_id(self):
        """Gets the series_type_rule_id of this Seriestyperuleattribute.


        :return: The series_type_rule_id of this Seriestyperuleattribute.
        :rtype: int
        """
        return self._series_type_rule_id

    @series_type_rule_id.setter
    def series_type_rule_id(self, series_type_rule_id):
        """Sets the series_type_rule_id of this Seriestyperuleattribute.


        :param series_type_rule_id: The series_type_rule_id of this Seriestyperuleattribute.
        :type series_type_rule_id: int
        """
        if series_type_rule_id is None:
            raise ValueError("Invalid value for `series_type_rule_id`, must not be `None`")

        self._series_type_rule_id = series_type_rule_id

    @property
    def value(self):
        """Gets the value of this Seriestyperuleattribute.


        :return: The value of this Seriestyperuleattribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Seriestyperuleattribute.


        :param value: The value of this Seriestyperuleattribute.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
