# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frame_index: int=None, maximum_pixel_value: int=None, minimum_pixel_value: int=None, number_of_frames: int=None):
        """ImageInformation - a model defined in OpenAPI

        :param frame_index: The frame_index of this ImageInformation.
        :param maximum_pixel_value: The maximum_pixel_value of this ImageInformation.
        :param minimum_pixel_value: The minimum_pixel_value of this ImageInformation.
        :param number_of_frames: The number_of_frames of this ImageInformation.
        """
        self.openapi_types = {
            'frame_index': int,
            'maximum_pixel_value': int,
            'minimum_pixel_value': int,
            'number_of_frames': int
        }

        self.attribute_map = {
            'frame_index': 'frameIndex',
            'maximum_pixel_value': 'maximumPixelValue',
            'minimum_pixel_value': 'minimumPixelValue',
            'number_of_frames': 'numberOfFrames'
        }

        self._frame_index = frame_index
        self._maximum_pixel_value = maximum_pixel_value
        self._minimum_pixel_value = minimum_pixel_value
        self._number_of_frames = number_of_frames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The imageInformation of this ImageInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frame_index(self):
        """Gets the frame_index of this ImageInformation.


        :return: The frame_index of this ImageInformation.
        :rtype: int
        """
        return self._frame_index

    @frame_index.setter
    def frame_index(self, frame_index):
        """Sets the frame_index of this ImageInformation.


        :param frame_index: The frame_index of this ImageInformation.
        :type frame_index: int
        """

        self._frame_index = frame_index

    @property
    def maximum_pixel_value(self):
        """Gets the maximum_pixel_value of this ImageInformation.


        :return: The maximum_pixel_value of this ImageInformation.
        :rtype: int
        """
        return self._maximum_pixel_value

    @maximum_pixel_value.setter
    def maximum_pixel_value(self, maximum_pixel_value):
        """Sets the maximum_pixel_value of this ImageInformation.


        :param maximum_pixel_value: The maximum_pixel_value of this ImageInformation.
        :type maximum_pixel_value: int
        """

        self._maximum_pixel_value = maximum_pixel_value

    @property
    def minimum_pixel_value(self):
        """Gets the minimum_pixel_value of this ImageInformation.


        :return: The minimum_pixel_value of this ImageInformation.
        :rtype: int
        """
        return self._minimum_pixel_value

    @minimum_pixel_value.setter
    def minimum_pixel_value(self, minimum_pixel_value):
        """Sets the minimum_pixel_value of this ImageInformation.


        :param minimum_pixel_value: The minimum_pixel_value of this ImageInformation.
        :type minimum_pixel_value: int
        """

        self._minimum_pixel_value = minimum_pixel_value

    @property
    def number_of_frames(self):
        """Gets the number_of_frames of this ImageInformation.


        :return: The number_of_frames of this ImageInformation.
        :rtype: int
        """
        return self._number_of_frames

    @number_of_frames.setter
    def number_of_frames(self, number_of_frames):
        """Sets the number_of_frames of this ImageInformation.


        :param number_of_frames: The number_of_frames of this ImageInformation.
        :type number_of_frames: int
        """

        self._number_of_frames = number_of_frames
