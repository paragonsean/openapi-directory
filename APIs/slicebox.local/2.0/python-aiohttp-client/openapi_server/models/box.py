# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anonymization_profile import AnonymizationProfile
from openapi_server import util


class Box(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, id: int=None, name: str=None, online: bool=None, profile: AnonymizationProfile=None, send_method: str=None, token: str=None):
        """Box - a model defined in OpenAPI

        :param base_url: The base_url of this Box.
        :param id: The id of this Box.
        :param name: The name of this Box.
        :param online: The online of this Box.
        :param profile: The profile of this Box.
        :param send_method: The send_method of this Box.
        :param token: The token of this Box.
        """
        self.openapi_types = {
            'base_url': str,
            'id': int,
            'name': str,
            'online': bool,
            'profile': AnonymizationProfile,
            'send_method': str,
            'token': str
        }

        self.attribute_map = {
            'base_url': 'baseUrl',
            'id': 'id',
            'name': 'name',
            'online': 'online',
            'profile': 'profile',
            'send_method': 'sendMethod',
            'token': 'token'
        }

        self._base_url = base_url
        self._id = id
        self._name = name
        self._online = online
        self._profile = profile
        self._send_method = send_method
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Box':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The box of this Box.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this Box.


        :return: The base_url of this Box.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Box.


        :param base_url: The base_url of this Box.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def id(self):
        """Gets the id of this Box.


        :return: The id of this Box.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Box.


        :param id: The id of this Box.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Box.


        :return: The name of this Box.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Box.


        :param name: The name of this Box.
        :type name: str
        """

        self._name = name

    @property
    def online(self):
        """Gets the online of this Box.


        :return: The online of this Box.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this Box.


        :param online: The online of this Box.
        :type online: bool
        """

        self._online = online

    @property
    def profile(self):
        """Gets the profile of this Box.


        :return: The profile of this Box.
        :rtype: AnonymizationProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Box.


        :param profile: The profile of this Box.
        :type profile: AnonymizationProfile
        """

        self._profile = profile

    @property
    def send_method(self):
        """Gets the send_method of this Box.


        :return: The send_method of this Box.
        :rtype: str
        """
        return self._send_method

    @send_method.setter
    def send_method(self, send_method):
        """Sets the send_method of this Box.


        :param send_method: The send_method of this Box.
        :type send_method: str
        """

        self._send_method = send_method

    @property
    def token(self):
        """Gets the token of this Box.


        :return: The token of this Box.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Box.


        :param token: The token of this Box.
        :type token: str
        """

        self._token = token
