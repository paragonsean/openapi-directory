# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, entry_type: str=None, id: int=None, message: str=None, subject: str=None):
        """LogEntry - a model defined in OpenAPI

        :param created: The created of this LogEntry.
        :param entry_type: The entry_type of this LogEntry.
        :param id: The id of this LogEntry.
        :param message: The message of this LogEntry.
        :param subject: The subject of this LogEntry.
        """
        self.openapi_types = {
            'created': int,
            'entry_type': str,
            'id': int,
            'message': str,
            'subject': str
        }

        self.attribute_map = {
            'created': 'created',
            'entry_type': 'entryType',
            'id': 'id',
            'message': 'message',
            'subject': 'subject'
        }

        self._created = created
        self._entry_type = entry_type
        self._id = id
        self._message = message
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The logEntry of this LogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this LogEntry.


        :return: The created of this LogEntry.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LogEntry.


        :param created: The created of this LogEntry.
        :type created: int
        """

        self._created = created

    @property
    def entry_type(self):
        """Gets the entry_type of this LogEntry.


        :return: The entry_type of this LogEntry.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this LogEntry.


        :param entry_type: The entry_type of this LogEntry.
        :type entry_type: str
        """

        self._entry_type = entry_type

    @property
    def id(self):
        """Gets the id of this LogEntry.


        :return: The id of this LogEntry.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogEntry.


        :param id: The id of this LogEntry.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this LogEntry.


        :return: The message of this LogEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogEntry.


        :param message: The message of this LogEntry.
        :type message: str
        """

        self._message = message

    @property
    def subject(self):
        """Gets the subject of this LogEntry.


        :return: The subject of this LogEntry.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this LogEntry.


        :param subject: The subject of this LogEntry.
        :type subject: str
        """

        self._subject = subject
