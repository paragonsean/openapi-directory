# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hashed_password: str=None, id: int=None, role: str=None, user: str=None):
        """User - a model defined in OpenAPI

        :param hashed_password: The hashed_password of this User.
        :param id: The id of this User.
        :param role: The role of this User.
        :param user: The user of this User.
        """
        self.openapi_types = {
            'hashed_password': str,
            'id': int,
            'role': str,
            'user': str
        }

        self.attribute_map = {
            'hashed_password': 'hashedPassword',
            'id': 'id',
            'role': 'role',
            'user': 'user'
        }

        self._hashed_password = hashed_password
        self._id = id
        self._role = role
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hashed_password(self):
        """Gets the hashed_password of this User.


        :return: The hashed_password of this User.
        :rtype: str
        """
        return self._hashed_password

    @hashed_password.setter
    def hashed_password(self, hashed_password):
        """Sets the hashed_password of this User.


        :param hashed_password: The hashed_password of this User.
        :type hashed_password: str
        """

        self._hashed_password = hashed_password

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def role(self):
        """Gets the role of this User.


        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.


        :param role: The role of this User.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def user(self):
        """Gets the user of this User.


        :return: The user of this User.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this User.


        :param user: The user of this User.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
