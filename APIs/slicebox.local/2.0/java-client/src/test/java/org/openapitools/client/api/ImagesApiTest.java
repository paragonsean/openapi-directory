/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnonymizationData;
import org.openapitools.client.model.ExportSetId;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageAttribute;
import org.openapitools.client.model.ImageInformation;
import org.openapitools.client.model.ImagesPostRequest;
import org.openapitools.client.model.TagMapping;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImagesApi
 */
@Disabled
public class ImagesApiTest {

    private final ImagesApi api = new ImagesApi();

    /**
     * bulk delete a sequence of images according to the supplied image IDs. This is the same as a sequence of DELETE requests to /images/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesDeletePostTest() throws ApiException {
        List<Long> imageIDs = null;
        api.imagesDeletePost(imageIDs);
        // TODO: test validations
    }

    /**
     * download the export set with the supplied export set ID as a zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesExportGetTest() throws ApiException {
        Long id = null;
        api.imagesExportGet(id);
        // TODO: test validations
    }

    /**
     * create an export set, a group of image IDs of images to export. The export set will contain the selected images. The export set is available for download 12 hours before it is automatically deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesExportPostTest() throws ApiException {
        List<Long> imageIds = null;
        ExportSetId response = api.imagesExportPost(imageIds);
        // TODO: test validations
    }

    /**
     * delete the selected image and replace it with an anonymized version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdAnonymizePut_0Test() throws ApiException {
        Long id = null;
        AnonymizationData tagValues = null;
        Image response = api.imagesIdAnonymizePut_0(id, tagValues);
        // TODO: test validations
    }

    /**
     * get an anonymized version of the image with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdAnonymizedPost_0Test() throws ApiException {
        Long id = null;
        AnonymizationData tagValues = null;
        api.imagesIdAnonymizedPost_0(id, tagValues);
        // TODO: test validations
    }

    /**
     * list all DICOM attributes of the dataset corresponding to the supplied image ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdAttributesGetTest() throws ApiException {
        Long id = null;
        List<ImageAttribute> response = api.imagesIdAttributesGet(id);
        // TODO: test validations
    }

    /**
     * Delete the image with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdDeleteTest() throws ApiException {
        Long id = null;
        api.imagesIdDelete(id);
        // TODO: test validations
    }

    /**
     * fetch dataset corresponding to the supplied image ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdGetTest() throws ApiException {
        Long id = null;
        api.imagesIdGet(id);
        // TODO: test validations
    }

    /**
     * get basic information about the pixel data of an image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdImageinformationGetTest() throws ApiException {
        Long id = null;
        ImageInformation response = api.imagesIdImageinformationGet(id);
        // TODO: test validations
    }

    /**
     * modify and/or insert image attributes according to the input tagpath-value mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdModifyPutTest() throws ApiException {
        Long id = null;
        List<TagMapping> tagPathValueMappings = null;
        api.imagesIdModifyPut(id, tagPathValueMappings);
        // TODO: test validations
    }

    /**
     * get a PNG image representation of the image corresponding to the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdPngGetTest() throws ApiException {
        Long id = null;
        Integer framenumber = null;
        Integer windowmin = null;
        Integer windowmax = null;
        Integer imageheight = null;
        api.imagesIdPngGet(id, framenumber, windowmin, windowmax, imageheight);
        // TODO: test validations
    }

    /**
     * add a JPEG image to slicebox. The image data will be wrapped in a DICOM file and added as a new series belonging to the study with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesJpegPostTest() throws ApiException {
        Long studyid = null;
        Object jpegBytes = null;
        String description = null;
        Image response = api.imagesJpegPost(studyid, jpegBytes, description);
        // TODO: test validations
    }

    /**
     * add a DICOM dataset to slicebox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesPostTest() throws ApiException {
        ImagesPostRequest imagesPostRequest = null;
        Image response = api.imagesPost(imagesPostRequest);
        // TODO: test validations
    }

}
