/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnonymizationData;
import org.openapitools.client.model.AnonymizationKey;
import org.openapitools.client.model.AnonymizationKeyQuery;
import org.openapitools.client.model.AnonymizationKeyValue;
import org.openapitools.client.model.ConfidentialityOption;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageTagValues;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnonymizationApi
 */
@Disabled
public class AnonymizationApiTest {

    private final AnonymizationApi api = new AnonymizationApi();

    /**
     * anonymize the images corresponding to the supplied list of image IDs (each paired with a list of DICOM tag translation). This route corresponds to repeated use of the route /images/{id}/anonymize.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationAnonymizePostTest() throws ApiException {
        List<ImageTagValues> query = null;
        List<Image> response = api.anonymizationAnonymizePost(query);
        // TODO: test validations
    }

    /**
     * export all anonymization keys as a csv file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationKeysExportCsvGetTest() throws ApiException {
        String response = api.anonymizationKeysExportCsvGet();
        // TODO: test validations
    }

    /**
     * get a list of anonymization keys, each specifying how vital DICOM attributes have been anonymized for a particular image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationKeysGetTest() throws ApiException {
        Long startindex = null;
        Long count = null;
        String orderby = null;
        Boolean orderascending = null;
        String filter = null;
        List<AnonymizationKey> response = api.anonymizationKeysGet(startindex, count, orderby, orderascending, filter);
        // TODO: test validations
    }

    /**
     * delete an anonymization key that is no longer of interest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationKeysIdDeleteTest() throws ApiException {
        Long id = null;
        api.anonymizationKeysIdDelete(id);
        // TODO: test validations
    }

    /**
     * get the anonymization key with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationKeysIdGetTest() throws ApiException {
        Long id = null;
        AnonymizationKey response = api.anonymizationKeysIdGet(id);
        // TODO: test validations
    }

    /**
     * get pointers to the images corresponding to the anonymization key with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationKeysIdKeyvaluesGetTest() throws ApiException {
        Long id = null;
        List<AnonymizationKeyValue> response = api.anonymizationKeysIdKeyvaluesGet(id);
        // TODO: test validations
    }

    /**
     * submit a query for anonymization keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationKeysQueryPostTest() throws ApiException {
        AnonymizationKeyQuery query = null;
        List<AnonymizationKey> response = api.anonymizationKeysQueryPost(query);
        // TODO: test validations
    }

    /**
     * list all supported anonymization options defining an anonymization profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizationOptionsGetTest() throws ApiException {
        List<ConfidentialityOption> response = api.anonymizationOptionsGet();
        // TODO: test validations
    }

    /**
     * delete the selected image and replace it with an anonymized version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdAnonymizePutTest() throws ApiException {
        Long id = null;
        AnonymizationData tagValues = null;
        Image response = api.imagesIdAnonymizePut(id, tagValues);
        // TODO: test validations
    }

    /**
     * get an anonymized version of the image with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagesIdAnonymizedPostTest() throws ApiException {
        Long id = null;
        AnonymizationData tagValues = null;
        api.imagesIdAnonymizedPost(id, tagValues);
        // TODO: test validations
    }

}
