/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FailedOutgoingTransactionImage;
import org.openapitools.client.model.OutgoingTransactionImage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * add an image (dataset) as part of a transaction. This method is used when sending images using the push method to a public slicebox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenImagePostTest() throws ApiException {
        String token = null;
        Long transactionid = null;
        Long sequencenumber = null;
        Long totalimagecount = null;
        Object dataset = null;
        api.transactionsTokenImagePost(token, transactionid, sequencenumber, totalimagecount, dataset);
        // TODO: test validations
    }

    /**
     * signal that the supplied outgoing transaction and image was successfully received and can be marked as sent. This method is used when sending images using the poll method from a public slicebox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenOutgoingDonePostTest() throws ApiException {
        String token = null;
        OutgoingTransactionImage outgoingEntryAndImageInformationBlock = null;
        api.transactionsTokenOutgoingDonePost(token, outgoingEntryAndImageInformationBlock);
        // TODO: test validations
    }

    /**
     * signal that the image corresponding to the supplied outgoing transaction and image could not be read or stored properly on the receiving side, and that the transaction should be marked as failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenOutgoingFailedPostTest() throws ApiException {
        String token = null;
        FailedOutgoingTransactionImage outgoingTransactionAndImageCommaAndErrorMessage = null;
        api.transactionsTokenOutgoingFailedPost(token, outgoingTransactionAndImageCommaAndErrorMessage);
        // TODO: test validations
    }

    /**
     * fetch an image from the connected box as part of a transaction. This method is used when sending images using the poll method from a public slicebox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenOutgoingGetTest() throws ApiException {
        String token = null;
        Long transactionid = null;
        Long imageid = null;
        api.transactionsTokenOutgoingGet(token, transactionid, imageid);
        // TODO: test validations
    }

    /**
     * get next outgoing transaction and image (information on the next image that the connected box wishes to send to you), if any. This method is used when sending images using the poll method from a public slicebox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenOutgoingPollGetTest() throws ApiException {
        String token = null;
        List<OutgoingTransactionImage> response = api.transactionsTokenOutgoingPollGet(token);
        // TODO: test validations
    }

    /**
     * get the status of the remote incoming transaction with the supplied transaction ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenStatusGetTest() throws ApiException {
        String token = null;
        Long transactionid = null;
        api.transactionsTokenStatusGet(token, transactionid);
        // TODO: test validations
    }

    /**
     * update the status of the transaction with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTokenStatusPutTest() throws ApiException {
        String token = null;
        Long transactionid = null;
        String transactionStatus = null;
        api.transactionsTokenStatusPut(token, transactionid, transactionStatus);
        // TODO: test validations
    }

}
