/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Box;
import org.openapitools.client.model.BulkAnonymizationData;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.IncomingTransaction;
import org.openapitools.client.model.OutgoingTransaction;
import org.openapitools.client.model.RemoteBox;
import org.openapitools.client.model.RemoteBoxConnectionData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BoxesApi
 */
@Disabled
public class BoxesApiTest {

    private final BoxesApi api = new BoxesApi();

    /**
     * connect to another box using a received URL. Used to connect to a public box.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesConnectPostTest() throws ApiException {
        RemoteBox remoteBox = null;
        Box response = api.boxesConnectPost(remoteBox);
        // TODO: test validations
    }

    /**
     * create a new box connection where the supplied entity holds the remote box name. Used by publicly available boxes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesCreateconnectionPostTest() throws ApiException {
        RemoteBoxConnectionData remoteBoxConnectionData = null;
        Box response = api.boxesCreateconnectionPost(remoteBoxConnectionData);
        // TODO: test validations
    }

    /**
     * get a list of box connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesGetTest() throws ApiException {
        Long startindex = null;
        Long count = null;
        List<Box> response = api.boxesGet(startindex, count);
        // TODO: test validations
    }

    /**
     * Delete the remote box with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesIdDeleteTest() throws ApiException {
        Long id = null;
        api.boxesIdDelete(id);
        // TODO: test validations
    }

    /**
     * send images corresponding to the supplied image ids to the remote box with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesIdSendPostTest() throws ApiException {
        Long id = null;
        BulkAnonymizationData sequenceOfImageTagValues = null;
        api.boxesIdSendPost(id, sequenceOfImageTagValues);
        // TODO: test validations
    }

    /**
     * get incoming transactions (finished, currently receiving, waiting or failed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesIncomingGetTest() throws ApiException {
        Long startindex = null;
        Long count = null;
        List<IncomingTransaction> response = api.boxesIncomingGet(startindex, count);
        // TODO: test validations
    }

    /**
     * delete an incoming transaction. If a currently active transaction is deleted, a new transaction with the remainder of the images is created when receiving the next incoming image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesIncomingIdDeleteTest() throws ApiException {
        Long id = null;
        api.boxesIncomingIdDelete(id);
        // TODO: test validations
    }

    /**
     * get the received images corresponding to the incoming transaction with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesIncomingIdImagesGetTest() throws ApiException {
        Long id = null;
        List<Image> response = api.boxesIncomingIdImagesGet(id);
        // TODO: test validations
    }

    /**
     * get outgoing transactions (finished, currently sending, waiting or failed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesOutgoingGetTest() throws ApiException {
        Long startindex = null;
        Long count = null;
        List<OutgoingTransaction> response = api.boxesOutgoingGet(startindex, count);
        // TODO: test validations
    }

    /**
     * delete an outgoing transaction. This will stop ongoing transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesOutgoingIdDeleteTest() throws ApiException {
        Long id = null;
        api.boxesOutgoingIdDelete(id);
        // TODO: test validations
    }

    /**
     * get the sent images corresponding to the outgoing transaction with the supplied ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxesOutgoingIdImagesGetTest() throws ApiException {
        Long id = null;
        List<Image> response = api.boxesOutgoingIdImagesGet(id);
        // TODO: test validations
    }

}
