/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnonymizationData;
import org.openapitools.client.model.ExportSetId;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageAttribute;
import org.openapitools.client.model.ImageInformation;
import org.openapitools.client.model.ImagesPostRequest;
import org.openapitools.client.model.TagMapping;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for imagesDeletePost
     * @param imageIDs IDs of images to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Images deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesDeletePostCall(List<Long> imageIDs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageIDs;

        // create path and map variables
        String localVarPath = "/images/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesDeletePostValidateBeforeCall(List<Long> imageIDs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageIDs' is set
        if (imageIDs == null) {
            throw new ApiException("Missing the required parameter 'imageIDs' when calling imagesDeletePost(Async)");
        }

        return imagesDeletePostCall(imageIDs, _callback);

    }

    /**
     * 
     * bulk delete a sequence of images according to the supplied image IDs. This is the same as a sequence of DELETE requests to /images/{id}
     * @param imageIDs IDs of images to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Images deleted </td><td>  -  </td></tr>
     </table>
     */
    public void imagesDeletePost(List<Long> imageIDs) throws ApiException {
        imagesDeletePostWithHttpInfo(imageIDs);
    }

    /**
     * 
     * bulk delete a sequence of images according to the supplied image IDs. This is the same as a sequence of DELETE requests to /images/{id}
     * @param imageIDs IDs of images to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Images deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesDeletePostWithHttpInfo(List<Long> imageIDs) throws ApiException {
        okhttp3.Call localVarCall = imagesDeletePostValidateBeforeCall(imageIDs, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * bulk delete a sequence of images according to the supplied image IDs. This is the same as a sequence of DELETE requests to /images/{id}
     * @param imageIDs IDs of images to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Images deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesDeletePostAsync(List<Long> imageIDs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesDeletePostValidateBeforeCall(imageIDs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesExportGet
     * @param id ID of export set to download (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip archive of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesExportGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesExportGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesExportGet(Async)");
        }

        return imagesExportGetCall(id, _callback);

    }

    /**
     * 
     * download the export set with the supplied export set ID as a zip archive
     * @param id ID of export set to download (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip archive of images </td><td>  -  </td></tr>
     </table>
     */
    public void imagesExportGet(Long id) throws ApiException {
        imagesExportGetWithHttpInfo(id);
    }

    /**
     * 
     * download the export set with the supplied export set ID as a zip archive
     * @param id ID of export set to download (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip archive of images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesExportGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = imagesExportGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * download the export set with the supplied export set ID as a zip archive
     * @param id ID of export set to download (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> zip archive of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesExportGetAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesExportGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesExportPost
     * @param imageIds ids of images to export (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ID of created export set. To be used with the associated GET method for downloading. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> if the supplied list of image ids is empty or no if images could be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesExportPostCall(List<Long> imageIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageIds;

        // create path and map variables
        String localVarPath = "/images/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesExportPostValidateBeforeCall(List<Long> imageIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageIds' is set
        if (imageIds == null) {
            throw new ApiException("Missing the required parameter 'imageIds' when calling imagesExportPost(Async)");
        }

        return imagesExportPostCall(imageIds, _callback);

    }

    /**
     * 
     * create an export set, a group of image IDs of images to export. The export set will contain the selected images. The export set is available for download 12 hours before it is automatically deleted.
     * @param imageIds ids of images to export (required)
     * @return ExportSetId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ID of created export set. To be used with the associated GET method for downloading. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> if the supplied list of image ids is empty or no if images could be found </td><td>  -  </td></tr>
     </table>
     */
    public ExportSetId imagesExportPost(List<Long> imageIds) throws ApiException {
        ApiResponse<ExportSetId> localVarResp = imagesExportPostWithHttpInfo(imageIds);
        return localVarResp.getData();
    }

    /**
     * 
     * create an export set, a group of image IDs of images to export. The export set will contain the selected images. The export set is available for download 12 hours before it is automatically deleted.
     * @param imageIds ids of images to export (required)
     * @return ApiResponse&lt;ExportSetId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ID of created export set. To be used with the associated GET method for downloading. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> if the supplied list of image ids is empty or no if images could be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportSetId> imagesExportPostWithHttpInfo(List<Long> imageIds) throws ApiException {
        okhttp3.Call localVarCall = imagesExportPostValidateBeforeCall(imageIds, null);
        Type localVarReturnType = new TypeToken<ExportSetId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create an export set, a group of image IDs of images to export. The export set will contain the selected images. The export set is available for download 12 hours before it is automatically deleted.
     * @param imageIds ids of images to export (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ID of created export set. To be used with the associated GET method for downloading. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> if the supplied list of image ids is empty or no if images could be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesExportPostAsync(List<Long> imageIds, final ApiCallback<ExportSetId> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesExportPostValidateBeforeCall(imageIds, _callback);
        Type localVarReturnType = new TypeToken<ExportSetId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdAnonymizePut_0
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizePut_0Call(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagValues;

        // create path and map variables
        String localVarPath = "/images/{id}/anonymize"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdAnonymizePut_0ValidateBeforeCall(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdAnonymizePut_0(Async)");
        }

        // verify the required parameter 'tagValues' is set
        if (tagValues == null) {
            throw new ApiException("Missing the required parameter 'tagValues' when calling imagesIdAnonymizePut_0(Async)");
        }

        return imagesIdAnonymizePut_0Call(id, tagValues, _callback);

    }

    /**
     * 
     * delete the selected image and replace it with an anonymized version
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public Image imagesIdAnonymizePut_0(Long id, AnonymizationData tagValues) throws ApiException {
        ApiResponse<Image> localVarResp = imagesIdAnonymizePut_0WithHttpInfo(id, tagValues);
        return localVarResp.getData();
    }

    /**
     * 
     * delete the selected image and replace it with an anonymized version
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> imagesIdAnonymizePut_0WithHttpInfo(Long id, AnonymizationData tagValues) throws ApiException {
        okhttp3.Call localVarCall = imagesIdAnonymizePut_0ValidateBeforeCall(id, tagValues, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete the selected image and replace it with an anonymized version
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizePut_0Async(Long id, AnonymizationData tagValues, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdAnonymizePut_0ValidateBeforeCall(id, tagValues, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdAnonymizedPost_0
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizedPost_0Call(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagValues;

        // create path and map variables
        String localVarPath = "/images/{id}/anonymized"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdAnonymizedPost_0ValidateBeforeCall(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdAnonymizedPost_0(Async)");
        }

        // verify the required parameter 'tagValues' is set
        if (tagValues == null) {
            throw new ApiException("Missing the required parameter 'tagValues' when calling imagesIdAnonymizedPost_0(Async)");
        }

        return imagesIdAnonymizedPost_0Call(id, tagValues, _callback);

    }

    /**
     * 
     * get an anonymized version of the image with the supplied ID
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdAnonymizedPost_0(Long id, AnonymizationData tagValues) throws ApiException {
        imagesIdAnonymizedPost_0WithHttpInfo(id, tagValues);
    }

    /**
     * 
     * get an anonymized version of the image with the supplied ID
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdAnonymizedPost_0WithHttpInfo(Long id, AnonymizationData tagValues) throws ApiException {
        okhttp3.Call localVarCall = imagesIdAnonymizedPost_0ValidateBeforeCall(id, tagValues, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * get an anonymized version of the image with the supplied ID
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizedPost_0Async(Long id, AnonymizationData tagValues, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdAnonymizedPost_0ValidateBeforeCall(id, tagValues, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdAttributesGet
     * @param id ID of image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of DICOM attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAttributesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}/attributes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdAttributesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdAttributesGet(Async)");
        }

        return imagesIdAttributesGetCall(id, _callback);

    }

    /**
     * 
     * list all DICOM attributes of the dataset corresponding to the supplied image ID
     * @param id ID of image (required)
     * @return List&lt;ImageAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of DICOM attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public List<ImageAttribute> imagesIdAttributesGet(Long id) throws ApiException {
        ApiResponse<List<ImageAttribute>> localVarResp = imagesIdAttributesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * list all DICOM attributes of the dataset corresponding to the supplied image ID
     * @param id ID of image (required)
     * @return ApiResponse&lt;List&lt;ImageAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of DICOM attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImageAttribute>> imagesIdAttributesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = imagesIdAttributesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ImageAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * list all DICOM attributes of the dataset corresponding to the supplied image ID
     * @param id ID of image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of DICOM attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAttributesGetAsync(Long id, final ApiCallback<List<ImageAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdAttributesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ImageAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdDelete
     * @param id ID of image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdDelete(Async)");
        }

        return imagesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete the image with the supplied ID
     * @param id ID of image (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image deleted </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdDelete(Long id) throws ApiException {
        imagesIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete the image with the supplied ID
     * @param id ID of image (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = imagesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the image with the supplied ID
     * @param id ID of image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdGet
     * @param id ID of image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdGet(Async)");
        }

        return imagesIdGetCall(id, _callback);

    }

    /**
     * 
     * fetch dataset corresponding to the supplied image ID
     * @param id ID of image (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdGet(Long id) throws ApiException {
        imagesIdGetWithHttpInfo(id);
    }

    /**
     * 
     * fetch dataset corresponding to the supplied image ID
     * @param id ID of image (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = imagesIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * fetch dataset corresponding to the supplied image ID
     * @param id ID of image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdGetAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdImageinformationGet
     * @param id ID of image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information about the pixeldata of an image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdImageinformationGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}/imageinformation"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdImageinformationGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdImageinformationGet(Async)");
        }

        return imagesIdImageinformationGetCall(id, _callback);

    }

    /**
     * 
     * get basic information about the pixel data of an image
     * @param id ID of image (required)
     * @return ImageInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information about the pixeldata of an image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public ImageInformation imagesIdImageinformationGet(Long id) throws ApiException {
        ApiResponse<ImageInformation> localVarResp = imagesIdImageinformationGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get basic information about the pixel data of an image
     * @param id ID of image (required)
     * @return ApiResponse&lt;ImageInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information about the pixeldata of an image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageInformation> imagesIdImageinformationGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = imagesIdImageinformationGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImageInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get basic information about the pixel data of an image
     * @param id ID of image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information about the pixeldata of an image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdImageinformationGetAsync(Long id, final ApiCallback<ImageInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdImageinformationGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImageInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdModifyPut
     * @param id ID of image to modify (required)
     * @param tagPathValueMappings specification of tag paths and corresponding values to insert or modify (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> image attributes successfully modified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdModifyPutCall(Long id, List<TagMapping> tagPathValueMappings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagPathValueMappings;

        // create path and map variables
        String localVarPath = "/images/{id}/modify"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdModifyPutValidateBeforeCall(Long id, List<TagMapping> tagPathValueMappings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdModifyPut(Async)");
        }

        // verify the required parameter 'tagPathValueMappings' is set
        if (tagPathValueMappings == null) {
            throw new ApiException("Missing the required parameter 'tagPathValueMappings' when calling imagesIdModifyPut(Async)");
        }

        return imagesIdModifyPutCall(id, tagPathValueMappings, _callback);

    }

    /**
     * 
     * modify and/or insert image attributes according to the input tagpath-value mappings
     * @param id ID of image to modify (required)
     * @param tagPathValueMappings specification of tag paths and corresponding values to insert or modify (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> image attributes successfully modified </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdModifyPut(Long id, List<TagMapping> tagPathValueMappings) throws ApiException {
        imagesIdModifyPutWithHttpInfo(id, tagPathValueMappings);
    }

    /**
     * 
     * modify and/or insert image attributes according to the input tagpath-value mappings
     * @param id ID of image to modify (required)
     * @param tagPathValueMappings specification of tag paths and corresponding values to insert or modify (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> image attributes successfully modified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdModifyPutWithHttpInfo(Long id, List<TagMapping> tagPathValueMappings) throws ApiException {
        okhttp3.Call localVarCall = imagesIdModifyPutValidateBeforeCall(id, tagPathValueMappings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * modify and/or insert image attributes according to the input tagpath-value mappings
     * @param id ID of image to modify (required)
     * @param tagPathValueMappings specification of tag paths and corresponding values to insert or modify (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> image attributes successfully modified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdModifyPutAsync(Long id, List<TagMapping> tagPathValueMappings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdModifyPutValidateBeforeCall(id, tagPathValueMappings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdPngGet
     * @param id ID of image (required)
     * @param framenumber frame/slice to show (optional, default to 1)
     * @param windowmin intensity window minimum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param windowmax intensity window maximum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param imageheight height of PNG image. If not specified or set to zero, the image height will equal that of the data (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> if the system is not capable of creating an image representation of the data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdPngGetCall(Long id, Integer framenumber, Integer windowmin, Integer windowmax, Integer imageheight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}/png"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (framenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("framenumber", framenumber));
        }

        if (windowmin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windowmin", windowmin));
        }

        if (windowmax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windowmax", windowmax));
        }

        if (imageheight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageheight", imageheight));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdPngGetValidateBeforeCall(Long id, Integer framenumber, Integer windowmin, Integer windowmax, Integer imageheight, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdPngGet(Async)");
        }

        return imagesIdPngGetCall(id, framenumber, windowmin, windowmax, imageheight, _callback);

    }

    /**
     * 
     * get a PNG image representation of the image corresponding to the supplied ID
     * @param id ID of image (required)
     * @param framenumber frame/slice to show (optional, default to 1)
     * @param windowmin intensity window minimum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param windowmax intensity window maximum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param imageheight height of PNG image. If not specified or set to zero, the image height will equal that of the data (optional, default to 0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> if the system is not capable of creating an image representation of the data </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdPngGet(Long id, Integer framenumber, Integer windowmin, Integer windowmax, Integer imageheight) throws ApiException {
        imagesIdPngGetWithHttpInfo(id, framenumber, windowmin, windowmax, imageheight);
    }

    /**
     * 
     * get a PNG image representation of the image corresponding to the supplied ID
     * @param id ID of image (required)
     * @param framenumber frame/slice to show (optional, default to 1)
     * @param windowmin intensity window minimum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param windowmax intensity window maximum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param imageheight height of PNG image. If not specified or set to zero, the image height will equal that of the data (optional, default to 0)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> if the system is not capable of creating an image representation of the data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdPngGetWithHttpInfo(Long id, Integer framenumber, Integer windowmin, Integer windowmax, Integer imageheight) throws ApiException {
        okhttp3.Call localVarCall = imagesIdPngGetValidateBeforeCall(id, framenumber, windowmin, windowmax, imageheight, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * get a PNG image representation of the image corresponding to the supplied ID
     * @param id ID of image (required)
     * @param framenumber frame/slice to show (optional, default to 1)
     * @param windowmin intensity window minimum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param windowmax intensity window maximum value. If not specified or set to zero, windowing will be selected from relevant DICOM attributes (optional, default to 0)
     * @param imageheight height of PNG image. If not specified or set to zero, the image height will equal that of the data (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> if the system is not capable of creating an image representation of the data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdPngGetAsync(Long id, Integer framenumber, Integer windowmin, Integer windowmax, Integer imageheight, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdPngGetValidateBeforeCall(id, framenumber, windowmin, windowmax, imageheight, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesJpegPost
     * @param studyid ID of study to add new series to (required)
     * @param jpegBytes The jpeg image data (required)
     * @param description DICOM series description of the resulting secondary capture series (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesJpegPostCall(Long studyid, Object jpegBytes, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jpegBytes;

        // create path and map variables
        String localVarPath = "/images/jpeg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (studyid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("studyid", studyid));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesJpegPostValidateBeforeCall(Long studyid, Object jpegBytes, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'studyid' is set
        if (studyid == null) {
            throw new ApiException("Missing the required parameter 'studyid' when calling imagesJpegPost(Async)");
        }

        // verify the required parameter 'jpegBytes' is set
        if (jpegBytes == null) {
            throw new ApiException("Missing the required parameter 'jpegBytes' when calling imagesJpegPost(Async)");
        }

        return imagesJpegPostCall(studyid, jpegBytes, description, _callback);

    }

    /**
     * 
     * add a JPEG image to slicebox. The image data will be wrapped in a DICOM file and added as a new series belonging to the study with the supplied ID
     * @param studyid ID of study to add new series to (required)
     * @param jpegBytes The jpeg image data (required)
     * @param description DICOM series description of the resulting secondary capture series (optional)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public Image imagesJpegPost(Long studyid, Object jpegBytes, String description) throws ApiException {
        ApiResponse<Image> localVarResp = imagesJpegPostWithHttpInfo(studyid, jpegBytes, description);
        return localVarResp.getData();
    }

    /**
     * 
     * add a JPEG image to slicebox. The image data will be wrapped in a DICOM file and added as a new series belonging to the study with the supplied ID
     * @param studyid ID of study to add new series to (required)
     * @param jpegBytes The jpeg image data (required)
     * @param description DICOM series description of the resulting secondary capture series (optional)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> imagesJpegPostWithHttpInfo(Long studyid, Object jpegBytes, String description) throws ApiException {
        okhttp3.Call localVarCall = imagesJpegPostValidateBeforeCall(studyid, jpegBytes, description, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a JPEG image to slicebox. The image data will be wrapped in a DICOM file and added as a new series belonging to the study with the supplied ID
     * @param studyid ID of study to add new series to (required)
     * @param jpegBytes The jpeg image data (required)
     * @param description DICOM series description of the resulting secondary capture series (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesJpegPostAsync(Long studyid, Object jpegBytes, String description, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesJpegPostValidateBeforeCall(studyid, jpegBytes, description, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesPost
     * @param imagesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for added dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesPostCall(ImagesPostRequest imagesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imagesPostRequest;

        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesPostValidateBeforeCall(ImagesPostRequest imagesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imagesPostRequest' is set
        if (imagesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'imagesPostRequest' when calling imagesPost(Async)");
        }

        return imagesPostCall(imagesPostRequest, _callback);

    }

    /**
     * 
     * add a DICOM dataset to slicebox
     * @param imagesPostRequest  (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for added dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public Image imagesPost(ImagesPostRequest imagesPostRequest) throws ApiException {
        ApiResponse<Image> localVarResp = imagesPostWithHttpInfo(imagesPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * add a DICOM dataset to slicebox
     * @param imagesPostRequest  (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for added dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> imagesPostWithHttpInfo(ImagesPostRequest imagesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = imagesPostValidateBeforeCall(imagesPostRequest, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a DICOM dataset to slicebox
     * @param imagesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for added dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for added dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesPostAsync(ImagesPostRequest imagesPostRequest, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesPostValidateBeforeCall(imagesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
