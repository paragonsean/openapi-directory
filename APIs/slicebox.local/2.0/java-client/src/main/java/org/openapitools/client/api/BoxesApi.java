/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Box;
import org.openapitools.client.model.BulkAnonymizationData;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.IncomingTransaction;
import org.openapitools.client.model.OutgoingTransaction;
import org.openapitools.client.model.RemoteBox;
import org.openapitools.client.model.RemoteBoxConnectionData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BoxesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BoxesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoxesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for boxesConnectPost
     * @param remoteBox remote box to connect with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> connected box </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesConnectPostCall(RemoteBox remoteBox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remoteBox;

        // create path and map variables
        String localVarPath = "/boxes/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesConnectPostValidateBeforeCall(RemoteBox remoteBox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'remoteBox' is set
        if (remoteBox == null) {
            throw new ApiException("Missing the required parameter 'remoteBox' when calling boxesConnectPost(Async)");
        }

        return boxesConnectPostCall(remoteBox, _callback);

    }

    /**
     * 
     * connect to another box using a received URL. Used to connect to a public box.
     * @param remoteBox remote box to connect with (required)
     * @return Box
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> connected box </td><td>  -  </td></tr>
     </table>
     */
    public Box boxesConnectPost(RemoteBox remoteBox) throws ApiException {
        ApiResponse<Box> localVarResp = boxesConnectPostWithHttpInfo(remoteBox);
        return localVarResp.getData();
    }

    /**
     * 
     * connect to another box using a received URL. Used to connect to a public box.
     * @param remoteBox remote box to connect with (required)
     * @return ApiResponse&lt;Box&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> connected box </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Box> boxesConnectPostWithHttpInfo(RemoteBox remoteBox) throws ApiException {
        okhttp3.Call localVarCall = boxesConnectPostValidateBeforeCall(remoteBox, null);
        Type localVarReturnType = new TypeToken<Box>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * connect to another box using a received URL. Used to connect to a public box.
     * @param remoteBox remote box to connect with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> connected box </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesConnectPostAsync(RemoteBox remoteBox, final ApiCallback<Box> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesConnectPostValidateBeforeCall(remoteBox, _callback);
        Type localVarReturnType = new TypeToken<Box>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesCreateconnectionPost
     * @param remoteBoxConnectionData name of box to connect (and send URL) to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> remote box of the connection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesCreateconnectionPostCall(RemoteBoxConnectionData remoteBoxConnectionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remoteBoxConnectionData;

        // create path and map variables
        String localVarPath = "/boxes/createconnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesCreateconnectionPostValidateBeforeCall(RemoteBoxConnectionData remoteBoxConnectionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'remoteBoxConnectionData' is set
        if (remoteBoxConnectionData == null) {
            throw new ApiException("Missing the required parameter 'remoteBoxConnectionData' when calling boxesCreateconnectionPost(Async)");
        }

        return boxesCreateconnectionPostCall(remoteBoxConnectionData, _callback);

    }

    /**
     * 
     * create a new box connection where the supplied entity holds the remote box name. Used by publicly available boxes.
     * @param remoteBoxConnectionData name of box to connect (and send URL) to (required)
     * @return Box
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> remote box of the connection </td><td>  -  </td></tr>
     </table>
     */
    public Box boxesCreateconnectionPost(RemoteBoxConnectionData remoteBoxConnectionData) throws ApiException {
        ApiResponse<Box> localVarResp = boxesCreateconnectionPostWithHttpInfo(remoteBoxConnectionData);
        return localVarResp.getData();
    }

    /**
     * 
     * create a new box connection where the supplied entity holds the remote box name. Used by publicly available boxes.
     * @param remoteBoxConnectionData name of box to connect (and send URL) to (required)
     * @return ApiResponse&lt;Box&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> remote box of the connection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Box> boxesCreateconnectionPostWithHttpInfo(RemoteBoxConnectionData remoteBoxConnectionData) throws ApiException {
        okhttp3.Call localVarCall = boxesCreateconnectionPostValidateBeforeCall(remoteBoxConnectionData, null);
        Type localVarReturnType = new TypeToken<Box>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a new box connection where the supplied entity holds the remote box name. Used by publicly available boxes.
     * @param remoteBoxConnectionData name of box to connect (and send URL) to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> remote box of the connection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesCreateconnectionPostAsync(RemoteBoxConnectionData remoteBoxConnectionData, final ApiCallback<Box> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesCreateconnectionPostValidateBeforeCall(remoteBoxConnectionData, _callback);
        Type localVarReturnType = new TypeToken<Box>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesGet
     * @param startindex start index of returned slice of boxes (optional, default to 0)
     * @param count size of returned slice of boxes (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> box connections </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return boxesGetCall(startindex, count, _callback);

    }

    /**
     * 
     * get a list of box connections
     * @param startindex start index of returned slice of boxes (optional, default to 0)
     * @param count size of returned slice of boxes (optional, default to 20)
     * @return List&lt;Box&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> box connections </td><td>  -  </td></tr>
     </table>
     */
    public List<Box> boxesGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<Box>> localVarResp = boxesGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * get a list of box connections
     * @param startindex start index of returned slice of boxes (optional, default to 0)
     * @param count size of returned slice of boxes (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Box&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> box connections </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Box>> boxesGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = boxesGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<Box>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a list of box connections
     * @param startindex start index of returned slice of boxes (optional, default to 0)
     * @param count size of returned slice of boxes (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> box connections </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesGetAsync(Long startindex, Long count, final ApiCallback<List<Box>> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<Box>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesIdDelete
     * @param id ID of box to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> box deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling boxesIdDelete(Async)");
        }

        return boxesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete the remote box with the supplied ID
     * @param id ID of box to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> box deleted </td><td>  -  </td></tr>
     </table>
     */
    public void boxesIdDelete(Long id) throws ApiException {
        boxesIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete the remote box with the supplied ID
     * @param id ID of box to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> box deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxesIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = boxesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the remote box with the supplied ID
     * @param id ID of box to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> box deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesIdSendPost
     * @param id ID of box to send images to (required)
     * @param sequenceOfImageTagValues specification of which images to send and list of DICOM attribute values to use in anonymized datasets (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> images sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> box not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIdSendPostCall(Long id, BulkAnonymizationData sequenceOfImageTagValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sequenceOfImageTagValues;

        // create path and map variables
        String localVarPath = "/boxes/{id}/send"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesIdSendPostValidateBeforeCall(Long id, BulkAnonymizationData sequenceOfImageTagValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling boxesIdSendPost(Async)");
        }

        // verify the required parameter 'sequenceOfImageTagValues' is set
        if (sequenceOfImageTagValues == null) {
            throw new ApiException("Missing the required parameter 'sequenceOfImageTagValues' when calling boxesIdSendPost(Async)");
        }

        return boxesIdSendPostCall(id, sequenceOfImageTagValues, _callback);

    }

    /**
     * 
     * send images corresponding to the supplied image ids to the remote box with the supplied ID
     * @param id ID of box to send images to (required)
     * @param sequenceOfImageTagValues specification of which images to send and list of DICOM attribute values to use in anonymized datasets (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> images sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> box not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public void boxesIdSendPost(Long id, BulkAnonymizationData sequenceOfImageTagValues) throws ApiException {
        boxesIdSendPostWithHttpInfo(id, sequenceOfImageTagValues);
    }

    /**
     * 
     * send images corresponding to the supplied image ids to the remote box with the supplied ID
     * @param id ID of box to send images to (required)
     * @param sequenceOfImageTagValues specification of which images to send and list of DICOM attribute values to use in anonymized datasets (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> images sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> box not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxesIdSendPostWithHttpInfo(Long id, BulkAnonymizationData sequenceOfImageTagValues) throws ApiException {
        okhttp3.Call localVarCall = boxesIdSendPostValidateBeforeCall(id, sequenceOfImageTagValues, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * send images corresponding to the supplied image ids to the remote box with the supplied ID
     * @param id ID of box to send images to (required)
     * @param sequenceOfImageTagValues specification of which images to send and list of DICOM attribute values to use in anonymized datasets (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> images sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> box not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIdSendPostAsync(Long id, BulkAnonymizationData sequenceOfImageTagValues, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesIdSendPostValidateBeforeCall(id, sequenceOfImageTagValues, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesIncomingGet
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> incoming transactions, sorted from most to least recently updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIncomingGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/incoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesIncomingGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return boxesIncomingGetCall(startindex, count, _callback);

    }

    /**
     * 
     * get incoming transactions (finished, currently receiving, waiting or failed)
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @return List&lt;IncomingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> incoming transactions, sorted from most to least recently updated </td><td>  -  </td></tr>
     </table>
     */
    public List<IncomingTransaction> boxesIncomingGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<IncomingTransaction>> localVarResp = boxesIncomingGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * get incoming transactions (finished, currently receiving, waiting or failed)
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @return ApiResponse&lt;List&lt;IncomingTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> incoming transactions, sorted from most to least recently updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IncomingTransaction>> boxesIncomingGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = boxesIncomingGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<IncomingTransaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get incoming transactions (finished, currently receiving, waiting or failed)
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> incoming transactions, sorted from most to least recently updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIncomingGetAsync(Long startindex, Long count, final ApiCallback<List<IncomingTransaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesIncomingGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<IncomingTransaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesIncomingIdDelete
     * @param id ID of incoming transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> incoming transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIncomingIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/incoming/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesIncomingIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling boxesIncomingIdDelete(Async)");
        }

        return boxesIncomingIdDeleteCall(id, _callback);

    }

    /**
     * 
     * delete an incoming transaction. If a currently active transaction is deleted, a new transaction with the remainder of the images is created when receiving the next incoming image.
     * @param id ID of incoming transaction (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> incoming transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public void boxesIncomingIdDelete(Long id) throws ApiException {
        boxesIncomingIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * delete an incoming transaction. If a currently active transaction is deleted, a new transaction with the remainder of the images is created when receiving the next incoming image.
     * @param id ID of incoming transaction (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> incoming transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxesIncomingIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = boxesIncomingIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete an incoming transaction. If a currently active transaction is deleted, a new transaction with the remainder of the images is created when receiving the next incoming image.
     * @param id ID of incoming transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> incoming transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIncomingIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesIncomingIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesIncomingIdImagesGet
     * @param id ID of incoming transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images received corresponding to the specified incoming transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> incoming transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIncomingIdImagesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/incoming/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesIncomingIdImagesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling boxesIncomingIdImagesGet(Async)");
        }

        return boxesIncomingIdImagesGetCall(id, _callback);

    }

    /**
     * 
     * get the received images corresponding to the incoming transaction with the supplied ID
     * @param id ID of incoming transaction (required)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images received corresponding to the specified incoming transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> incoming transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> boxesIncomingIdImagesGet(Long id) throws ApiException {
        ApiResponse<List<Image>> localVarResp = boxesIncomingIdImagesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the received images corresponding to the incoming transaction with the supplied ID
     * @param id ID of incoming transaction (required)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images received corresponding to the specified incoming transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> incoming transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> boxesIncomingIdImagesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = boxesIncomingIdImagesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the received images corresponding to the incoming transaction with the supplied ID
     * @param id ID of incoming transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images received corresponding to the specified incoming transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> incoming transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesIncomingIdImagesGetAsync(Long id, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesIncomingIdImagesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesOutgoingGet
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> outgoing transactions, finished, sending, waiting or failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesOutgoingGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/outgoing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesOutgoingGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return boxesOutgoingGetCall(startindex, count, _callback);

    }

    /**
     * 
     * get outgoing transactions (finished, currently sending, waiting or failed)
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @return List&lt;OutgoingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> outgoing transactions, finished, sending, waiting or failed </td><td>  -  </td></tr>
     </table>
     */
    public List<OutgoingTransaction> boxesOutgoingGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<OutgoingTransaction>> localVarResp = boxesOutgoingGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * get outgoing transactions (finished, currently sending, waiting or failed)
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @return ApiResponse&lt;List&lt;OutgoingTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> outgoing transactions, finished, sending, waiting or failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OutgoingTransaction>> boxesOutgoingGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = boxesOutgoingGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<OutgoingTransaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get outgoing transactions (finished, currently sending, waiting or failed)
     * @param startindex start index of returned slice of transactions (optional, default to 0)
     * @param count size of returned slice of transactions (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> outgoing transactions, finished, sending, waiting or failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesOutgoingGetAsync(Long startindex, Long count, final ApiCallback<List<OutgoingTransaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesOutgoingGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<OutgoingTransaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesOutgoingIdDelete
     * @param id ID of outgoing transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> outgoing transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesOutgoingIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/outgoing/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesOutgoingIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling boxesOutgoingIdDelete(Async)");
        }

        return boxesOutgoingIdDeleteCall(id, _callback);

    }

    /**
     * 
     * delete an outgoing transaction. This will stop ongoing transactions.
     * @param id ID of outgoing transaction (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> outgoing transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public void boxesOutgoingIdDelete(Long id) throws ApiException {
        boxesOutgoingIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * delete an outgoing transaction. This will stop ongoing transactions.
     * @param id ID of outgoing transaction (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> outgoing transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boxesOutgoingIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = boxesOutgoingIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete an outgoing transaction. This will stop ongoing transactions.
     * @param id ID of outgoing transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> outgoing transaction deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesOutgoingIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesOutgoingIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boxesOutgoingIdImagesGet
     * @param id ID of outgoing transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images sent corresponding to the specified outgoing transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> outgoing transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesOutgoingIdImagesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boxes/outgoing/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boxesOutgoingIdImagesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling boxesOutgoingIdImagesGet(Async)");
        }

        return boxesOutgoingIdImagesGetCall(id, _callback);

    }

    /**
     * 
     * get the sent images corresponding to the outgoing transaction with the supplied ID
     * @param id ID of outgoing transaction (required)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images sent corresponding to the specified outgoing transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> outgoing transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> boxesOutgoingIdImagesGet(Long id) throws ApiException {
        ApiResponse<List<Image>> localVarResp = boxesOutgoingIdImagesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the sent images corresponding to the outgoing transaction with the supplied ID
     * @param id ID of outgoing transaction (required)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images sent corresponding to the specified outgoing transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> outgoing transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> boxesOutgoingIdImagesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = boxesOutgoingIdImagesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the sent images corresponding to the outgoing transaction with the supplied ID
     * @param id ID of outgoing transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images sent corresponding to the specified outgoing transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> outgoing transaction not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boxesOutgoingIdImagesGetAsync(Long id, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = boxesOutgoingIdImagesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
