/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DicomPropertyValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Study
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:37.231084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Study {
  public static final String SERIALIZED_NAME_ACCESSION_NUMBER = "accessionNumber";
  @SerializedName(SERIALIZED_NAME_ACCESSION_NUMBER)
  private DicomPropertyValue accessionNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PATIENT_AGE = "patientAge";
  @SerializedName(SERIALIZED_NAME_PATIENT_AGE)
  private DicomPropertyValue patientAge;

  public static final String SERIALIZED_NAME_PATIENT_ID = "patientId";
  @SerializedName(SERIALIZED_NAME_PATIENT_ID)
  private Long patientId;

  public static final String SERIALIZED_NAME_STUDY_DATE = "studyDate";
  @SerializedName(SERIALIZED_NAME_STUDY_DATE)
  private DicomPropertyValue studyDate;

  public static final String SERIALIZED_NAME_STUDY_DESCRIPTION = "studyDescription";
  @SerializedName(SERIALIZED_NAME_STUDY_DESCRIPTION)
  private DicomPropertyValue studyDescription;

  public static final String SERIALIZED_NAME_STUDY_I_D = "studyID";
  @SerializedName(SERIALIZED_NAME_STUDY_I_D)
  private DicomPropertyValue studyID;

  public static final String SERIALIZED_NAME_STUDY_INSTANCE_U_I_D = "studyInstanceUID";
  @SerializedName(SERIALIZED_NAME_STUDY_INSTANCE_U_I_D)
  private DicomPropertyValue studyInstanceUID;

  public Study() {
  }

  public Study accessionNumber(DicomPropertyValue accessionNumber) {
    this.accessionNumber = accessionNumber;
    return this;
  }

  /**
   * Get accessionNumber
   * @return accessionNumber
   */
  @javax.annotation.Nullable
  public DicomPropertyValue getAccessionNumber() {
    return accessionNumber;
  }

  public void setAccessionNumber(DicomPropertyValue accessionNumber) {
    this.accessionNumber = accessionNumber;
  }


  public Study id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Study patientAge(DicomPropertyValue patientAge) {
    this.patientAge = patientAge;
    return this;
  }

  /**
   * Get patientAge
   * @return patientAge
   */
  @javax.annotation.Nullable
  public DicomPropertyValue getPatientAge() {
    return patientAge;
  }

  public void setPatientAge(DicomPropertyValue patientAge) {
    this.patientAge = patientAge;
  }


  public Study patientId(Long patientId) {
    this.patientId = patientId;
    return this;
  }

  /**
   * Get patientId
   * @return patientId
   */
  @javax.annotation.Nullable
  public Long getPatientId() {
    return patientId;
  }

  public void setPatientId(Long patientId) {
    this.patientId = patientId;
  }


  public Study studyDate(DicomPropertyValue studyDate) {
    this.studyDate = studyDate;
    return this;
  }

  /**
   * Get studyDate
   * @return studyDate
   */
  @javax.annotation.Nullable
  public DicomPropertyValue getStudyDate() {
    return studyDate;
  }

  public void setStudyDate(DicomPropertyValue studyDate) {
    this.studyDate = studyDate;
  }


  public Study studyDescription(DicomPropertyValue studyDescription) {
    this.studyDescription = studyDescription;
    return this;
  }

  /**
   * Get studyDescription
   * @return studyDescription
   */
  @javax.annotation.Nullable
  public DicomPropertyValue getStudyDescription() {
    return studyDescription;
  }

  public void setStudyDescription(DicomPropertyValue studyDescription) {
    this.studyDescription = studyDescription;
  }


  public Study studyID(DicomPropertyValue studyID) {
    this.studyID = studyID;
    return this;
  }

  /**
   * Get studyID
   * @return studyID
   */
  @javax.annotation.Nullable
  public DicomPropertyValue getStudyID() {
    return studyID;
  }

  public void setStudyID(DicomPropertyValue studyID) {
    this.studyID = studyID;
  }


  public Study studyInstanceUID(DicomPropertyValue studyInstanceUID) {
    this.studyInstanceUID = studyInstanceUID;
    return this;
  }

  /**
   * Get studyInstanceUID
   * @return studyInstanceUID
   */
  @javax.annotation.Nullable
  public DicomPropertyValue getStudyInstanceUID() {
    return studyInstanceUID;
  }

  public void setStudyInstanceUID(DicomPropertyValue studyInstanceUID) {
    this.studyInstanceUID = studyInstanceUID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Study study = (Study) o;
    return Objects.equals(this.accessionNumber, study.accessionNumber) &&
        Objects.equals(this.id, study.id) &&
        Objects.equals(this.patientAge, study.patientAge) &&
        Objects.equals(this.patientId, study.patientId) &&
        Objects.equals(this.studyDate, study.studyDate) &&
        Objects.equals(this.studyDescription, study.studyDescription) &&
        Objects.equals(this.studyID, study.studyID) &&
        Objects.equals(this.studyInstanceUID, study.studyInstanceUID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessionNumber, id, patientAge, patientId, studyDate, studyDescription, studyID, studyInstanceUID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Study {\n");
    sb.append("    accessionNumber: ").append(toIndentedString(accessionNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    patientAge: ").append(toIndentedString(patientAge)).append("\n");
    sb.append("    patientId: ").append(toIndentedString(patientId)).append("\n");
    sb.append("    studyDate: ").append(toIndentedString(studyDate)).append("\n");
    sb.append("    studyDescription: ").append(toIndentedString(studyDescription)).append("\n");
    sb.append("    studyID: ").append(toIndentedString(studyID)).append("\n");
    sb.append("    studyInstanceUID: ").append(toIndentedString(studyInstanceUID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessionNumber");
    openapiFields.add("id");
    openapiFields.add("patientAge");
    openapiFields.add("patientId");
    openapiFields.add("studyDate");
    openapiFields.add("studyDescription");
    openapiFields.add("studyID");
    openapiFields.add("studyInstanceUID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Study
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Study.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Study is not found in the empty JSON string", Study.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Study.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Study` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessionNumber`
      if (jsonObj.get("accessionNumber") != null && !jsonObj.get("accessionNumber").isJsonNull()) {
        DicomPropertyValue.validateJsonElement(jsonObj.get("accessionNumber"));
      }
      // validate the optional field `patientAge`
      if (jsonObj.get("patientAge") != null && !jsonObj.get("patientAge").isJsonNull()) {
        DicomPropertyValue.validateJsonElement(jsonObj.get("patientAge"));
      }
      // validate the optional field `studyDate`
      if (jsonObj.get("studyDate") != null && !jsonObj.get("studyDate").isJsonNull()) {
        DicomPropertyValue.validateJsonElement(jsonObj.get("studyDate"));
      }
      // validate the optional field `studyDescription`
      if (jsonObj.get("studyDescription") != null && !jsonObj.get("studyDescription").isJsonNull()) {
        DicomPropertyValue.validateJsonElement(jsonObj.get("studyDescription"));
      }
      // validate the optional field `studyID`
      if (jsonObj.get("studyID") != null && !jsonObj.get("studyID").isJsonNull()) {
        DicomPropertyValue.validateJsonElement(jsonObj.get("studyID"));
      }
      // validate the optional field `studyInstanceUID`
      if (jsonObj.get("studyInstanceUID") != null && !jsonObj.get("studyInstanceUID").isJsonNull()) {
        DicomPropertyValue.validateJsonElement(jsonObj.get("studyInstanceUID"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Study.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Study' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Study> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Study.class));

       return (TypeAdapter<T>) new TypeAdapter<Study>() {
           @Override
           public void write(JsonWriter out, Study value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Study read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Study given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Study
   * @throws IOException if the JSON string is invalid with respect to Study
   */
  public static Study fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Study.class);
  }

  /**
   * Convert an instance of Study to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

