/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImagesPostRequest;
import org.openapitools.client.model.ImportSession;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for importSessionsGet
     * @param startindex start index of returned slice of import sessions (optional, default to 0)
     * @param count size of returned slice of import sessions (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> available import sessions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSessionsGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return importSessionsGetCall(startindex, count, _callback);

    }

    /**
     * 
     * Returns a list of available import sessions.
     * @param startindex start index of returned slice of import sessions (optional, default to 0)
     * @param count size of returned slice of import sessions (optional, default to 20)
     * @return List&lt;ImportSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> available import sessions </td><td>  -  </td></tr>
     </table>
     */
    public List<ImportSession> importSessionsGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<ImportSession>> localVarResp = importSessionsGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of available import sessions.
     * @param startindex start index of returned slice of import sessions (optional, default to 0)
     * @param count size of returned slice of import sessions (optional, default to 20)
     * @return ApiResponse&lt;List&lt;ImportSession&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> available import sessions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImportSession>> importSessionsGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = importSessionsGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<ImportSession>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of available import sessions.
     * @param startindex start index of returned slice of import sessions (optional, default to 0)
     * @param count size of returned slice of import sessions (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> available import sessions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsGetAsync(Long startindex, Long count, final ApiCallback<List<ImportSession>> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSessionsGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<ImportSession>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSessionsIdDelete
     * @param id ID of import session to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> import session deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import/sessions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSessionsIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling importSessionsIdDelete(Async)");
        }

        return importSessionsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * deletes the import session with the supplied ID
     * @param id ID of import session to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> import session deleted </td><td>  -  </td></tr>
     </table>
     */
    public void importSessionsIdDelete(Long id) throws ApiException {
        importSessionsIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * deletes the import session with the supplied ID
     * @param id ID of import session to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> import session deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importSessionsIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = importSessionsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * deletes the import session with the supplied ID
     * @param id ID of import session to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> import session deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSessionsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSessionsIdGet
     * @param id ID of session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the import session with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import/sessions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSessionsIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling importSessionsIdGet(Async)");
        }

        return importSessionsIdGetCall(id, _callback);

    }

    /**
     * 
     * Returns the import sessions with the supplied ID
     * @param id ID of session (required)
     * @return ImportSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the import session with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ImportSession importSessionsIdGet(Long id) throws ApiException {
        ApiResponse<ImportSession> localVarResp = importSessionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the import sessions with the supplied ID
     * @param id ID of session (required)
     * @return ApiResponse&lt;ImportSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the import session with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportSession> importSessionsIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = importSessionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImportSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the import sessions with the supplied ID
     * @param id ID of session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the import session with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdGetAsync(Long id, final ApiCallback<ImportSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSessionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImportSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSessionsIdImagesGet
     * @param id ID of import session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images corresponding to the specified import session </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdImagesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import/sessions/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSessionsIdImagesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling importSessionsIdImagesGet(Async)");
        }

        return importSessionsIdImagesGetCall(id, _callback);

    }

    /**
     * 
     * get the imported images corresponding to the import session with the supplied ID
     * @param id ID of import session (required)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images corresponding to the specified import session </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> importSessionsIdImagesGet(Long id) throws ApiException {
        ApiResponse<List<Image>> localVarResp = importSessionsIdImagesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the imported images corresponding to the import session with the supplied ID
     * @param id ID of import session (required)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images corresponding to the specified import session </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> importSessionsIdImagesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = importSessionsIdImagesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the imported images corresponding to the import session with the supplied ID
     * @param id ID of import session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images corresponding to the specified import session </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdImagesGetAsync(Long id, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSessionsIdImagesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSessionsIdImagesPost
     * @param id ID of session (required)
     * @param imagesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdImagesPostCall(Long id, ImagesPostRequest imagesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imagesPostRequest;

        // create path and map variables
        String localVarPath = "/import/sessions/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSessionsIdImagesPostValidateBeforeCall(Long id, ImagesPostRequest imagesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling importSessionsIdImagesPost(Async)");
        }

        // verify the required parameter 'imagesPostRequest' is set
        if (imagesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'imagesPostRequest' when calling importSessionsIdImagesPost(Async)");
        }

        return importSessionsIdImagesPostCall(id, imagesPostRequest, _callback);

    }

    /**
     * 
     * add a DICOM dataset to the import session with the supplied ID
     * @param id ID of session (required)
     * @param imagesPostRequest  (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public Image importSessionsIdImagesPost(Long id, ImagesPostRequest imagesPostRequest) throws ApiException {
        ApiResponse<Image> localVarResp = importSessionsIdImagesPostWithHttpInfo(id, imagesPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * add a DICOM dataset to the import session with the supplied ID
     * @param id ID of session (required)
     * @param imagesPostRequest  (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> importSessionsIdImagesPostWithHttpInfo(Long id, ImagesPostRequest imagesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = importSessionsIdImagesPostValidateBeforeCall(id, imagesPostRequest, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a DICOM dataset to the import session with the supplied ID
     * @param id ID of session (required)
     * @param imagesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy. Status code 200 signifies that this image was already present in the slicebox database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> meta data for the imported dataset on the image level of the DICOM hierarchy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> import session not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsIdImagesPostAsync(Long id, ImagesPostRequest imagesPostRequest, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSessionsIdImagesPostValidateBeforeCall(id, imagesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSessionsPost
     * @param importSession The import session to create containing the user defined name of the session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created import session </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsPostCall(ImportSession importSession, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importSession;

        // create path and map variables
        String localVarPath = "/import/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSessionsPostValidateBeforeCall(ImportSession importSession, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importSession' is set
        if (importSession == null) {
            throw new ApiException("Missing the required parameter 'importSession' when calling importSessionsPost(Async)");
        }

        return importSessionsPostCall(importSession, _callback);

    }

    /**
     * 
     * create a new import sessions
     * @param importSession The import session to create containing the user defined name of the session (required)
     * @return ImportSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created import session </td><td>  -  </td></tr>
     </table>
     */
    public ImportSession importSessionsPost(ImportSession importSession) throws ApiException {
        ApiResponse<ImportSession> localVarResp = importSessionsPostWithHttpInfo(importSession);
        return localVarResp.getData();
    }

    /**
     * 
     * create a new import sessions
     * @param importSession The import session to create containing the user defined name of the session (required)
     * @return ApiResponse&lt;ImportSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created import session </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportSession> importSessionsPostWithHttpInfo(ImportSession importSession) throws ApiException {
        okhttp3.Call localVarCall = importSessionsPostValidateBeforeCall(importSession, null);
        Type localVarReturnType = new TypeToken<ImportSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a new import sessions
     * @param importSession The import session to create containing the user defined name of the session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created import session </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSessionsPostAsync(ImportSession importSession, final ApiCallback<ImportSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSessionsPostValidateBeforeCall(importSession, _callback);
        Type localVarReturnType = new TypeToken<ImportSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
