/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Scu;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScusApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scusGet
     * @param startindex start index of returned slice of SCUs (optional, default to 0)
     * @param count size of returned slice of SCUs (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of SCUs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scusGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return scusGetCall(startindex, count, _callback);

    }

    /**
     * 
     * get a list of DICOM SCUs. Each SCU is a client for sending DICOM images to an SCP, e.g. a PACS system.
     * @param startindex start index of returned slice of SCUs (optional, default to 0)
     * @param count size of returned slice of SCUs (optional, default to 20)
     * @return List&lt;Scu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of SCUs </td><td>  -  </td></tr>
     </table>
     */
    public List<Scu> scusGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<Scu>> localVarResp = scusGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * get a list of DICOM SCUs. Each SCU is a client for sending DICOM images to an SCP, e.g. a PACS system.
     * @param startindex start index of returned slice of SCUs (optional, default to 0)
     * @param count size of returned slice of SCUs (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Scu&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of SCUs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Scu>> scusGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = scusGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<Scu>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a list of DICOM SCUs. Each SCU is a client for sending DICOM images to an SCP, e.g. a PACS system.
     * @param startindex start index of returned slice of SCUs (optional, default to 0)
     * @param count size of returned slice of SCUs (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of SCUs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusGetAsync(Long startindex, Long count, final ApiCallback<List<Scu>> _callback) throws ApiException {

        okhttp3.Call localVarCall = scusGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<Scu>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scusIdDelete
     * @param id id of SCU to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SCU removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scus/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scusIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scusIdDelete(Async)");
        }

        return scusIdDeleteCall(id, _callback);

    }

    /**
     * 
     * remove the SCU corresponding to the supplied ID
     * @param id id of SCU to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SCU removed </td><td>  -  </td></tr>
     </table>
     */
    public void scusIdDelete(Long id) throws ApiException {
        scusIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * remove the SCU corresponding to the supplied ID
     * @param id id of SCU to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SCU removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scusIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = scusIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the SCU corresponding to the supplied ID
     * @param id id of SCU to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SCU removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scusIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scusIdSendPost
     * @param id id of SCU to use for sending (required)
     * @param imageids array of ids of images to send (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Series sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Series not found or SCU not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Receiving SCP host not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusIdSendPostCall(Long id, List<Long> imageids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageids;

        // create path and map variables
        String localVarPath = "/scus/{id}/send"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scusIdSendPostValidateBeforeCall(Long id, List<Long> imageids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scusIdSendPost(Async)");
        }

        // verify the required parameter 'imageids' is set
        if (imageids == null) {
            throw new ApiException("Missing the required parameter 'imageids' when calling scusIdSendPost(Async)");
        }

        return scusIdSendPostCall(id, imageids, _callback);

    }

    /**
     * 
     * send the images with the supplied image IDs to a DICOM SCP using the the SCU with the supplied scu ID
     * @param id id of SCU to use for sending (required)
     * @param imageids array of ids of images to send (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Series sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Series not found or SCU not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Receiving SCP host not available </td><td>  -  </td></tr>
     </table>
     */
    public void scusIdSendPost(Long id, List<Long> imageids) throws ApiException {
        scusIdSendPostWithHttpInfo(id, imageids);
    }

    /**
     * 
     * send the images with the supplied image IDs to a DICOM SCP using the the SCU with the supplied scu ID
     * @param id id of SCU to use for sending (required)
     * @param imageids array of ids of images to send (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Series sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Series not found or SCU not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Receiving SCP host not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scusIdSendPostWithHttpInfo(Long id, List<Long> imageids) throws ApiException {
        okhttp3.Call localVarCall = scusIdSendPostValidateBeforeCall(id, imageids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * send the images with the supplied image IDs to a DICOM SCP using the the SCU with the supplied scu ID
     * @param id id of SCU to use for sending (required)
     * @param imageids array of ids of images to send (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Series sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Series not found or SCU not found </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Receiving SCP host not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusIdSendPostAsync(Long id, List<Long> imageids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scusIdSendPostValidateBeforeCall(id, imageids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scusPost
     * @param scu SCU information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created SCU </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid port number or AE title </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusPostCall(Scu scu, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scu;

        // create path and map variables
        String localVarPath = "/scus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scusPostValidateBeforeCall(Scu scu, final ApiCallback _callback) throws ApiException {
        return scusPostCall(scu, _callback);

    }

    /**
     * 
     * add a new SCU for sending DICOM images
     * @param scu SCU information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return Scu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created SCU </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid port number or AE title </td><td>  -  </td></tr>
     </table>
     */
    public Scu scusPost(Scu scu) throws ApiException {
        ApiResponse<Scu> localVarResp = scusPostWithHttpInfo(scu);
        return localVarResp.getData();
    }

    /**
     * 
     * add a new SCU for sending DICOM images
     * @param scu SCU information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return ApiResponse&lt;Scu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created SCU </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid port number or AE title </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scu> scusPostWithHttpInfo(Scu scu) throws ApiException {
        okhttp3.Call localVarCall = scusPostValidateBeforeCall(scu, null);
        Type localVarReturnType = new TypeToken<Scu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a new SCU for sending DICOM images
     * @param scu SCU information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created SCU </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid port number or AE title </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scusPostAsync(Scu scu, final ApiCallback<Scu> _callback) throws ApiException {

        okhttp3.Call localVarCall = scusPostValidateBeforeCall(scu, _callback);
        Type localVarReturnType = new TypeToken<Scu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
