/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Filter;
import org.openapitools.client.model.SourceTagFilter;
import org.openapitools.client.model.TagPathTag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilteringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilteringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilteringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for filteringAssociationsGet
     * @param startindex start index of returned slice of source &lt;-&gt; filter associations (optional, default to 0)
     * @param count size of returned slice of source &lt;-&gt; filter associations (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source &lt;-&gt; filter associations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringAssociationsGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filtering/associations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringAssociationsGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return filteringAssociationsGetCall(startindex, count, _callback);

    }

    /**
     * 
     * Get a list of source to filter associations.
     * @param startindex start index of returned slice of source &lt;-&gt; filter associations (optional, default to 0)
     * @param count size of returned slice of source &lt;-&gt; filter associations (optional, default to 20)
     * @return List&lt;SourceTagFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source &lt;-&gt; filter associations </td><td>  -  </td></tr>
     </table>
     */
    public List<SourceTagFilter> filteringAssociationsGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<SourceTagFilter>> localVarResp = filteringAssociationsGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of source to filter associations.
     * @param startindex start index of returned slice of source &lt;-&gt; filter associations (optional, default to 0)
     * @param count size of returned slice of source &lt;-&gt; filter associations (optional, default to 20)
     * @return ApiResponse&lt;List&lt;SourceTagFilter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source &lt;-&gt; filter associations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SourceTagFilter>> filteringAssociationsGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = filteringAssociationsGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<SourceTagFilter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of source to filter associations.
     * @param startindex start index of returned slice of source &lt;-&gt; filter associations (optional, default to 0)
     * @param count size of returned slice of source &lt;-&gt; filter associations (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source &lt;-&gt; filter associations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringAssociationsGetAsync(Long startindex, Long count, final ApiCallback<List<SourceTagFilter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringAssociationsGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<SourceTagFilter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringAssociationsIdDelete
     * @param id id of source &lt;-&gt; filter association to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> source &lt;-&gt; filter association removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringAssociationsIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filtering/associations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringAssociationsIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filteringAssociationsIdDelete(Async)");
        }

        return filteringAssociationsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * remove the source &lt;-&gt; filter association corresponding to the supplied ID
     * @param id id of source &lt;-&gt; filter association to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> source &lt;-&gt; filter association removed </td><td>  -  </td></tr>
     </table>
     */
    public void filteringAssociationsIdDelete(Long id) throws ApiException {
        filteringAssociationsIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * remove the source &lt;-&gt; filter association corresponding to the supplied ID
     * @param id id of source &lt;-&gt; filter association to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> source &lt;-&gt; filter association removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> filteringAssociationsIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = filteringAssociationsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the source &lt;-&gt; filter association corresponding to the supplied ID
     * @param id id of source &lt;-&gt; filter association to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> source &lt;-&gt; filter association removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringAssociationsIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringAssociationsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringAssociationsPost
     * @param sourcetagfilter Source to Filter association (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upserted source &lt;-&gt; filter association </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringAssociationsPostCall(SourceTagFilter sourcetagfilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourcetagfilter;

        // create path and map variables
        String localVarPath = "/filtering/associations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringAssociationsPostValidateBeforeCall(SourceTagFilter sourcetagfilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourcetagfilter' is set
        if (sourcetagfilter == null) {
            throw new ApiException("Missing the required parameter 'sourcetagfilter' when calling filteringAssociationsPost(Async)");
        }

        return filteringAssociationsPostCall(sourcetagfilter, _callback);

    }

    /**
     * 
     * Inserts or updates a source &lt;-&gt; filter associations. If the specified Source already  has an association this is updated, otherwise a new is inserted.
     * @param sourcetagfilter Source to Filter association (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upserted source &lt;-&gt; filter association </td><td>  -  </td></tr>
     </table>
     */
    public void filteringAssociationsPost(SourceTagFilter sourcetagfilter) throws ApiException {
        filteringAssociationsPostWithHttpInfo(sourcetagfilter);
    }

    /**
     * 
     * Inserts or updates a source &lt;-&gt; filter associations. If the specified Source already  has an association this is updated, otherwise a new is inserted.
     * @param sourcetagfilter Source to Filter association (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upserted source &lt;-&gt; filter association </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> filteringAssociationsPostWithHttpInfo(SourceTagFilter sourcetagfilter) throws ApiException {
        okhttp3.Call localVarCall = filteringAssociationsPostValidateBeforeCall(sourcetagfilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Inserts or updates a source &lt;-&gt; filter associations. If the specified Source already  has an association this is updated, otherwise a new is inserted.
     * @param sourcetagfilter Source to Filter association (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upserted source &lt;-&gt; filter association </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringAssociationsPostAsync(SourceTagFilter sourcetagfilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringAssociationsPostValidateBeforeCall(sourcetagfilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringFiltersGet
     * @param startindex start index of returned slice of filters (optional, default to 0)
     * @param count size of returned slice of filters (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of filters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filtering/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringFiltersGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return filteringFiltersGetCall(startindex, count, _callback);

    }

    /**
     * 
     * List defined filters
     * @param startindex start index of returned slice of filters (optional, default to 0)
     * @param count size of returned slice of filters (optional, default to 20)
     * @return List&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of filters </td><td>  -  </td></tr>
     </table>
     */
    public List<Filter> filteringFiltersGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<Filter>> localVarResp = filteringFiltersGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * List defined filters
     * @param startindex start index of returned slice of filters (optional, default to 0)
     * @param count size of returned slice of filters (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Filter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of filters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Filter>> filteringFiltersGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = filteringFiltersGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List defined filters
     * @param startindex start index of returned slice of filters (optional, default to 0)
     * @param count size of returned slice of filters (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of filters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersGetAsync(Long startindex, Long count, final ApiCallback<List<Filter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringFiltersGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringFiltersIdDelete
     * @param id id of filter to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Filter removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filtering/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringFiltersIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filteringFiltersIdDelete(Async)");
        }

        return filteringFiltersIdDeleteCall(id, _callback);

    }

    /**
     * 
     * remove the filter corresponding to the supplied ID
     * @param id id of filter to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Filter removed </td><td>  -  </td></tr>
     </table>
     */
    public void filteringFiltersIdDelete(Long id) throws ApiException {
        filteringFiltersIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * remove the filter corresponding to the supplied ID
     * @param id id of filter to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Filter removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> filteringFiltersIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = filteringFiltersIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the filter corresponding to the supplied ID
     * @param id id of filter to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Filter removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringFiltersIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringFiltersIdTagpathsGet
     * @param id id of filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tagpaths </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdTagpathsGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filtering/filters/{id}/tagpaths"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringFiltersIdTagpathsGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filteringFiltersIdTagpathsGet(Async)");
        }

        return filteringFiltersIdTagpathsGetCall(id, _callback);

    }

    /**
     * 
     * List tagpaths for the selected filter
     * @param id id of filter (required)
     * @return List&lt;TagPathTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tagpaths </td><td>  -  </td></tr>
     </table>
     */
    public List<TagPathTag> filteringFiltersIdTagpathsGet(Long id) throws ApiException {
        ApiResponse<List<TagPathTag>> localVarResp = filteringFiltersIdTagpathsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * List tagpaths for the selected filter
     * @param id id of filter (required)
     * @return ApiResponse&lt;List&lt;TagPathTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tagpaths </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TagPathTag>> filteringFiltersIdTagpathsGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = filteringFiltersIdTagpathsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<TagPathTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List tagpaths for the selected filter
     * @param id id of filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tagpaths </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdTagpathsGetAsync(Long id, final ApiCallback<List<TagPathTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringFiltersIdTagpathsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<TagPathTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringFiltersIdTagpathsPost
     * @param id id of filter to remove (required)
     * @param tagpath id of filter to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TagPath added </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdTagpathsPostCall(Long id, TagPathTag tagpath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagpath;

        // create path and map variables
        String localVarPath = "/filtering/filters/{id}/tagpaths"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringFiltersIdTagpathsPostValidateBeforeCall(Long id, TagPathTag tagpath, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filteringFiltersIdTagpathsPost(Async)");
        }

        // verify the required parameter 'tagpath' is set
        if (tagpath == null) {
            throw new ApiException("Missing the required parameter 'tagpath' when calling filteringFiltersIdTagpathsPost(Async)");
        }

        return filteringFiltersIdTagpathsPostCall(id, tagpath, _callback);

    }

    /**
     * 
     * add a tagpath to a filter
     * @param id id of filter to remove (required)
     * @param tagpath id of filter to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TagPath added </td><td>  -  </td></tr>
     </table>
     */
    public void filteringFiltersIdTagpathsPost(Long id, TagPathTag tagpath) throws ApiException {
        filteringFiltersIdTagpathsPostWithHttpInfo(id, tagpath);
    }

    /**
     * 
     * add a tagpath to a filter
     * @param id id of filter to remove (required)
     * @param tagpath id of filter to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TagPath added </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> filteringFiltersIdTagpathsPostWithHttpInfo(Long id, TagPathTag tagpath) throws ApiException {
        okhttp3.Call localVarCall = filteringFiltersIdTagpathsPostValidateBeforeCall(id, tagpath, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * add a tagpath to a filter
     * @param id id of filter to remove (required)
     * @param tagpath id of filter to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> TagPath added </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdTagpathsPostAsync(Long id, TagPathTag tagpath, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringFiltersIdTagpathsPostValidateBeforeCall(id, tagpath, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringFiltersIdTagpathsTagpathidDelete
     * @param id id of filter (required)
     * @param tagpathid id of TagPath to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TagPath removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdTagpathsTagpathidDeleteCall(Long id, Long tagpathid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filtering/filters/{id}/tagpaths/{tagpathid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tagpathid" + "}", localVarApiClient.escapeString(tagpathid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringFiltersIdTagpathsTagpathidDeleteValidateBeforeCall(Long id, Long tagpathid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filteringFiltersIdTagpathsTagpathidDelete(Async)");
        }

        // verify the required parameter 'tagpathid' is set
        if (tagpathid == null) {
            throw new ApiException("Missing the required parameter 'tagpathid' when calling filteringFiltersIdTagpathsTagpathidDelete(Async)");
        }

        return filteringFiltersIdTagpathsTagpathidDeleteCall(id, tagpathid, _callback);

    }

    /**
     * 
     * remove the tagpath corresponding to the supplied ID
     * @param id id of filter (required)
     * @param tagpathid id of TagPath to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TagPath removed </td><td>  -  </td></tr>
     </table>
     */
    public void filteringFiltersIdTagpathsTagpathidDelete(Long id, Long tagpathid) throws ApiException {
        filteringFiltersIdTagpathsTagpathidDeleteWithHttpInfo(id, tagpathid);
    }

    /**
     * 
     * remove the tagpath corresponding to the supplied ID
     * @param id id of filter (required)
     * @param tagpathid id of TagPath to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TagPath removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> filteringFiltersIdTagpathsTagpathidDeleteWithHttpInfo(Long id, Long tagpathid) throws ApiException {
        okhttp3.Call localVarCall = filteringFiltersIdTagpathsTagpathidDeleteValidateBeforeCall(id, tagpathid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the tagpath corresponding to the supplied ID
     * @param id id of filter (required)
     * @param tagpathid id of TagPath to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> TagPath removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersIdTagpathsTagpathidDeleteAsync(Long id, Long tagpathid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringFiltersIdTagpathsTagpathidDeleteValidateBeforeCall(id, tagpathid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteringFiltersPost
     * @param tagFilter Filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Filter upserted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersPostCall(Filter tagFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagFilter;

        // create path and map variables
        String localVarPath = "/filtering/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteringFiltersPostValidateBeforeCall(Filter tagFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagFilter' is set
        if (tagFilter == null) {
            throw new ApiException("Missing the required parameter 'tagFilter' when calling filteringFiltersPost(Async)");
        }

        return filteringFiltersPostCall(tagFilter, _callback);

    }

    /**
     * 
     * Inserts or updates a filter. If a filter with same name as supplied filter exists this filter is updated, otherwise a new filter is inserted.
     * @param tagFilter Filter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Filter upserted </td><td>  -  </td></tr>
     </table>
     */
    public void filteringFiltersPost(Filter tagFilter) throws ApiException {
        filteringFiltersPostWithHttpInfo(tagFilter);
    }

    /**
     * 
     * Inserts or updates a filter. If a filter with same name as supplied filter exists this filter is updated, otherwise a new filter is inserted.
     * @param tagFilter Filter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Filter upserted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> filteringFiltersPostWithHttpInfo(Filter tagFilter) throws ApiException {
        okhttp3.Call localVarCall = filteringFiltersPostValidateBeforeCall(tagFilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Inserts or updates a filter. If a filter with same name as supplied filter exists this filter is updated, otherwise a new filter is inserted.
     * @param tagFilter Filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Filter upserted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteringFiltersPostAsync(Filter tagFilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteringFiltersPostValidateBeforeCall(tagFilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
